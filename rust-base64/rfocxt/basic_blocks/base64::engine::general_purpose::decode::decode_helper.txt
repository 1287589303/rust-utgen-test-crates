[
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
            StorageLive(_11),
            _11 = ((*_2).0: usize),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:44:49: 44:61 (#0),
                    scope: scope[0],
                },
                kind: _12 = core::slice::<impl [u8]>::len(move _13) -> [return: bb1, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_14),
            _14 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:44:9: 44:76 (#0),
                    scope: scope[0],
                },
                kind: _9 = engine::general_purpose::decode::complete_quads_len(move _10, move _11, move _12, move _14) -> [return: bb2, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:44:9: 44:77 (#451),
                    scope: scope[0],
                },
                kind: _8 = <std::result::Result<usize, decode::DecodeSliceError> as std::ops::Try>::branch(move _9) -> [return: bb3, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            _15 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:44:9: 44:77 (#451),
                    scope: scope[0],
                },
                kind: switchInt(move _15) -> [0: bb6, 1: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:44:9: 44:77 (#451),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:44:76: 44:77 (#452),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = ((_8 as Continue).0: usize),
            _7 = _19,
            StorageDead(_19),
            FakeRead(ForLet(None), _7),
            StorageDead(_8),
            StorageLive(_20),
            StorageLive(_21),
            _21 = _7,
            _22 = Eq(const engine::general_purpose::decode::decode_helper::UNROLLED_INPUT_CHUNK_SIZE, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:50:9: 50:73 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _22, "attempt to calculate the remainder of `{}` with a divisor of zero", _21) -> [success: bb9, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, decode::DecodeSliceError>),
            StorageLive(_18),
            _18 = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:44:9: 44:77 (#451),
                    scope: scope[3],
                },
                kind: _0 = <std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, decode::DecodeSliceError>>>::from_residual(move _18) -> [return: bb8, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = Rem(move _21, const engine::general_purpose::decode::decode_helper::UNROLLED_INPUT_CHUNK_SIZE),
            StorageDead(_21),
            FakeRead(ForLet(None), _20),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _7,
            StorageLive(_25),
            _25 = _20,
            _26 = SubWithOverflow(_24, _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:53:9: 53:94 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_26.1: bool), "attempt to compute `{} - {}`, which would overflow", move _24, move _25) -> [success: bb10, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = move (_26.0: usize),
            StorageDead(_25),
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &(*_1),
            StorageLive(_34),
            StorageLive(_35),
            _35 = _23,
            _34 = std::ops::RangeTo::<usize> { end: move _35 },
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:38: 56:65 (#0),
                    scope: scope[7],
                },
                kind: _32 = <[u8] as std::ops::Index<std::ops::RangeTo<usize>>>::index(move _33, move _34) -> [return: bb11, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = &(*_32),
            StorageDead(_34),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:33: 57:49 (#0),
                    scope: scope[7],
                },
                kind: _30 = core::slice::<impl [u8]>::chunks_exact(move _31, const engine::general_purpose::decode::decode_helper::UNROLLED_INPUT_CHUNK_SIZE) -> [return: bb12, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#0),
                    scope: scope[7],
                },
                kind: _29 = <std::slice::ChunksExact<'_, u8> as std::iter::Iterator>::enumerate(move _30) -> [return: bb13, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
                    scope: scope[7],
                },
                kind: _28 = <std::iter::Enumerate<std::slice::ChunksExact<'_, u8>> as std::iter::IntoIterator>::into_iter(move _29) -> [return: bb14, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            PlaceMention(_28),
            StorageLive(_36),
            _36 = move _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:5: 88:6 (#453),
                    scope: scope[8],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:5: 88:6 (#453),
                    scope: scope[8],
                },
                kind: falseUnwind -> [real: bb16, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut _36,
            _40 = &mut (*_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
                    scope: scope[8],
                },
                kind: _39 = <std::iter::Enumerate<std::slice::ChunksExact<'_, u8>> as std::iter::Iterator>::next(move _40) -> [return: bb17, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            PlaceMention(_39),
            _42 = discriminant(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
                    scope: scope[8],
                },
                kind: switchInt(move _42) -> [0: bb19, 1: bb20, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:5: 88:6 (#453),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = (((_39 as Some).0: (usize, &[u8])).0: usize),
            StorageLive(_45),
            _45 = (((_39 as Some).0: (usize, &[u8])).1: &[u8]),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _44,
            _48 = MulWithOverflow(_47, const engine::general_purpose::decode::decode_helper::UNROLLED_INPUT_CHUNK_SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:60:27: 60:66 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_48.1: bool), "attempt to compute `{} * {}`, which would overflow", move _47, const engine::general_purpose::decode::decode_helper::UNROLLED_INPUT_CHUNK_SIZE) -> [success: bb22, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = const (),
            StorageDead(_41),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_36),
            StorageDead(_32),
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_147),
            StorageLive(_148),
            StorageLive(_149),
            _149 = _23,
            _150 = Eq(const 4_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:91:36: 91:63 (#0),
                    scope: scope[7],
                },
                kind: assert(!move _150, "attempt to divide `{}` by zero", _149) -> [success: bb66, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = move (_48.0: usize),
            StorageDead(_47),
            FakeRead(ForLet(None), _46),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut (*_3),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = _44,
            _55 = MulWithOverflow(_54, const engine::general_purpose::decode::decode_helper::UNROLLED_OUTPUT_CHUNK_SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:61:40: 61:80 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_55.1: bool), "attempt to compute `{} * {}`, which would overflow", move _54, const engine::general_purpose::decode::decode_helper::UNROLLED_OUTPUT_CHUNK_SIZE) -> [success: bb23, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _53 = move (_55.0: usize),
            StorageDead(_54),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = _44,
            _59 = AddWithOverflow(_58, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:62:15: 62:32 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_59.1: bool), "attempt to compute `{} + {}`, which would overflow", move _58, const 1_usize) -> [success: bb24, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _57 = move (_59.0: usize),
            StorageDead(_58),
            _60 = MulWithOverflow(_57, const engine::general_purpose::decode::decode_helper::UNROLLED_OUTPUT_CHUNK_SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:62:15: 62:61 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_60.1: bool), "attempt to compute `{} * {}`, which would overflow", move _57, const engine::general_purpose::decode::decode_helper::UNROLLED_OUTPUT_CHUNK_SIZE) -> [success: bb25, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = move (_60.0: usize),
            StorageDead(_57),
            _52 = std::ops::Range::<usize> { start: move _53, end: move _56 },
            StorageDead(_56),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:61:39: 62:62 (#0),
                    scope: scope[10],
                },
                kind: _50 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _51, move _52) -> [return: bb26, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            _49 = &mut (*_50),
            FakeRead(ForLet(None), _49),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = &(*_45),
            StorageLive(_68),
            _68 = std::ops::Range::<usize> { start: const 0_usize, end: const 8_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:65:19: 65:25 (#0),
                    scope: scope[11],
                },
                kind: _66 = <[u8] as std::ops::Index<std::ops::Range<usize>>>::index(move _67, move _68) -> [return: bb27, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_67),
            _65 = &(*_66),
            _64 = &(*_65),
            StorageLive(_69),
            _69 = _46,
            StorageLive(_70),
            _70 = &(*_4),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            StorageLive(_74),
            _74 = &mut (*_49),
            StorageLive(_75),
            _75 = std::ops::Range::<usize> { start: const 0_usize, end: const 6_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:68:30: 68:36 (#0),
                    scope: scope[11],
                },
                kind: _73 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _74, move _75) -> [return: bb28, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            _72 = &mut (*_73),
            _71 = &mut (*_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:64:9: 69:10 (#0),
                    scope: scope[11],
                },
                kind: _63 = engine::general_purpose::decode::decode_chunk_8(move _64, move _69, move _70, move _71) -> [return: bb29, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:64:9: 69:11 (#456),
                    scope: scope[11],
                },
                kind: _62 = <std::result::Result<(), decode::DecodeError> as std::ops::Try>::branch(move _63) -> [return: bb30, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            PlaceMention(_62),
            _76 = discriminant(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:64:9: 69:11 (#456),
                    scope: scope[11],
                },
                kind: switchInt(move _76) -> [0: bb33, 1: bb32, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:64:9: 69:11 (#456),
                    scope: scope[11],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:69:10: 69:11 (#457),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_80),
            _80 = ((_62 as Continue).0: ()),
            _61 = _80,
            StorageDead(_80),
            StorageDead(_73),
            StorageDead(_72),
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_62),
            StorageDead(_61),
            StorageLive(_81),
            StorageLive(_82),
            StorageLive(_83),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            _87 = &(*_45),
            StorageLive(_88),
            _88 = std::ops::Range::<usize> { start: const 8_usize, end: const 16_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:71:19: 71:26 (#0),
                    scope: scope[11],
                },
                kind: _86 = <[u8] as std::ops::Index<std::ops::Range<usize>>>::index(move _87, move _88) -> [return: bb36, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_77),
            _77 = move ((_62 as Break).0: std::result::Result<std::convert::Infallible, decode::DecodeError>),
            StorageLive(_79),
            _79 = move _77,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:64:9: 69:11 (#456),
                    scope: scope[13],
                },
                kind: _0 = <std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, decode::DecodeError>>>::from_residual(move _79) -> [return: bb35, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_77),
            StorageDead(_73),
            StorageDead(_72),
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_62),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[11],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            _85 = &(*_86),
            _84 = &(*_85),
            StorageLive(_89),
            StorageLive(_90),
            _90 = _46,
            _91 = AddWithOverflow(_90, const 8_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:72:13: 72:28 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_91.1: bool), "attempt to compute `{} + {}`, which would overflow", move _90, const 8_usize) -> [success: bb37, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _89 = move (_91.0: usize),
            StorageDead(_90),
            StorageLive(_92),
            _92 = &(*_4),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = &mut (*_49),
            StorageLive(_97),
            _97 = std::ops::Range::<usize> { start: const 6_usize, end: const 12_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:74:30: 74:37 (#0),
                    scope: scope[11],
                },
                kind: _95 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _96, move _97) -> [return: bb38, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageDead(_96),
            _94 = &mut (*_95),
            _93 = &mut (*_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:70:9: 75:10 (#0),
                    scope: scope[11],
                },
                kind: _83 = engine::general_purpose::decode::decode_chunk_8(move _84, move _89, move _92, move _93) -> [return: bb39, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageDead(_92),
            StorageDead(_89),
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:70:9: 75:11 (#458),
                    scope: scope[11],
                },
                kind: _82 = <std::result::Result<(), decode::DecodeError> as std::ops::Try>::branch(move _83) -> [return: bb40, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            PlaceMention(_82),
            _98 = discriminant(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:70:9: 75:11 (#458),
                    scope: scope[11],
                },
                kind: switchInt(move _98) -> [0: bb43, 1: bb42, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:70:9: 75:11 (#458),
                    scope: scope[11],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:75:10: 75:11 (#459),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb44, imaginary: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_102),
            _102 = ((_82 as Continue).0: ()),
            _81 = _102,
            StorageDead(_102),
            StorageDead(_95),
            StorageDead(_94),
            StorageDead(_86),
            StorageDead(_85),
            StorageDead(_82),
            StorageDead(_81),
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            StorageLive(_107),
            StorageLive(_108),
            StorageLive(_109),
            _109 = &(*_45),
            StorageLive(_110),
            _110 = std::ops::Range::<usize> { start: const 16_usize, end: const 24_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:77:19: 77:27 (#0),
                    scope: scope[11],
                },
                kind: _108 = <[u8] as std::ops::Index<std::ops::Range<usize>>>::index(move _109, move _110) -> [return: bb46, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_99),
            _99 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, decode::DecodeError>),
            StorageLive(_101),
            _101 = move _99,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:70:9: 75:11 (#458),
                    scope: scope[17],
                },
                kind: _0 = <std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, decode::DecodeError>>>::from_residual(move _101) -> [return: bb45, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_99),
            StorageDead(_95),
            StorageDead(_94),
            StorageDead(_86),
            StorageDead(_85),
            StorageDead(_82),
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[11],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_110),
            StorageDead(_109),
            _107 = &(*_108),
            _106 = &(*_107),
            StorageLive(_111),
            StorageLive(_112),
            _112 = _46,
            _113 = AddWithOverflow(_112, const 16_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:78:13: 78:29 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_113.1: bool), "attempt to compute `{} + {}`, which would overflow", move _112, const 16_usize) -> [success: bb47, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _111 = move (_113.0: usize),
            StorageDead(_112),
            StorageLive(_114),
            _114 = &(*_4),
            StorageLive(_115),
            StorageLive(_116),
            StorageLive(_117),
            StorageLive(_118),
            _118 = &mut (*_49),
            StorageLive(_119),
            _119 = std::ops::Range::<usize> { start: const 12_usize, end: const 18_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:80:30: 80:38 (#0),
                    scope: scope[11],
                },
                kind: _117 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _118, move _119) -> [return: bb48, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageDead(_118),
            _116 = &mut (*_117),
            _115 = &mut (*_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:76:9: 81:10 (#0),
                    scope: scope[11],
                },
                kind: _105 = engine::general_purpose::decode::decode_chunk_8(move _106, move _111, move _114, move _115) -> [return: bb49, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            StorageDead(_114),
            StorageDead(_111),
            StorageDead(_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:76:9: 81:11 (#460),
                    scope: scope[11],
                },
                kind: _104 = <std::result::Result<(), decode::DecodeError> as std::ops::Try>::branch(move _105) -> [return: bb50, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            PlaceMention(_104),
            _120 = discriminant(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:76:9: 81:11 (#460),
                    scope: scope[11],
                },
                kind: switchInt(move _120) -> [0: bb53, 1: bb52, otherwise: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:76:9: 81:11 (#460),
                    scope: scope[11],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:81:10: 81:11 (#461),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb54, imaginary: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_124),
            _124 = ((_104 as Continue).0: ()),
            _103 = _124,
            StorageDead(_124),
            StorageDead(_117),
            StorageDead(_116),
            StorageDead(_108),
            StorageDead(_107),
            StorageDead(_104),
            StorageDead(_103),
            StorageLive(_125),
            StorageLive(_126),
            StorageLive(_127),
            StorageLive(_128),
            StorageLive(_129),
            StorageLive(_130),
            StorageLive(_131),
            _131 = &(*_45),
            StorageLive(_132),
            _132 = std::ops::Range::<usize> { start: const 24_usize, end: const 32_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:83:19: 83:27 (#0),
                    scope: scope[11],
                },
                kind: _130 = <[u8] as std::ops::Index<std::ops::Range<usize>>>::index(move _131, move _132) -> [return: bb56, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_121),
            _121 = move ((_104 as Break).0: std::result::Result<std::convert::Infallible, decode::DecodeError>),
            StorageLive(_123),
            _123 = move _121,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:76:9: 81:11 (#460),
                    scope: scope[21],
                },
                kind: _0 = <std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, decode::DecodeError>>>::from_residual(move _123) -> [return: bb55, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_123),
            StorageDead(_121),
            StorageDead(_117),
            StorageDead(_116),
            StorageDead(_108),
            StorageDead(_107),
            StorageDead(_104),
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[11],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
            StorageDead(_131),
            _129 = &(*_130),
            _128 = &(*_129),
            StorageLive(_133),
            StorageLive(_134),
            _134 = _46,
            _135 = AddWithOverflow(_134, const 24_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:84:13: 84:29 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_135.1: bool), "attempt to compute `{} + {}`, which would overflow", move _134, const 24_usize) -> [success: bb57, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _133 = move (_135.0: usize),
            StorageDead(_134),
            StorageLive(_136),
            _136 = &(*_4),
            StorageLive(_137),
            StorageLive(_138),
            StorageLive(_139),
            StorageLive(_140),
            _140 = &mut (*_49),
            StorageLive(_141),
            _141 = std::ops::Range::<usize> { start: const 18_usize, end: const 24_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:86:30: 86:38 (#0),
                    scope: scope[11],
                },
                kind: _139 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _140, move _141) -> [return: bb58, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
            StorageDead(_140),
            _138 = &mut (*_139),
            _137 = &mut (*_138),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:82:9: 87:10 (#0),
                    scope: scope[11],
                },
                kind: _127 = engine::general_purpose::decode::decode_chunk_8(move _128, move _133, move _136, move _137) -> [return: bb59, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            StorageDead(_136),
            StorageDead(_133),
            StorageDead(_128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:82:9: 87:11 (#462),
                    scope: scope[11],
                },
                kind: _126 = <std::result::Result<(), decode::DecodeError> as std::ops::Try>::branch(move _127) -> [return: bb60, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            PlaceMention(_126),
            _142 = discriminant(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:82:9: 87:11 (#462),
                    scope: scope[11],
                },
                kind: switchInt(move _142) -> [0: bb63, 1: bb62, otherwise: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:82:9: 87:11 (#462),
                    scope: scope[11],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:87:10: 87:11 (#463),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb64, imaginary: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_146),
            _146 = ((_126 as Continue).0: ()),
            _125 = _146,
            StorageDead(_146),
            StorageDead(_139),
            StorageDead(_138),
            StorageDead(_130),
            StorageDead(_129),
            StorageDead(_126),
            StorageDead(_125),
            _38 = const (),
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_41),
            StorageDead(_39),
            StorageDead(_38),
            _37 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:56:5: 88:6 (#453),
                    scope: scope[8],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_143),
            _143 = move ((_126 as Break).0: std::result::Result<std::convert::Infallible, decode::DecodeError>),
            StorageLive(_145),
            _145 = move _143,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:82:9: 87:11 (#462),
                    scope: scope[25],
                },
                kind: _0 = <std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, decode::DecodeError>>>::from_residual(move _145) -> [return: bb65, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
            StorageDead(_143),
            StorageDead(_139),
            StorageDead(_138),
            StorageDead(_130),
            StorageDead(_129),
            StorageDead(_126),
            StorageDead(_125),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[11],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _148 = Div(move _149, const 4_usize),
            StorageDead(_149),
            _151 = MulWithOverflow(_148, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:91:36: 91:67 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_151.1: bool), "attempt to compute `{} * {}`, which would overflow", move _148, const 3_usize) -> [success: bb67, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _147 = move (_151.0: usize),
            StorageDead(_148),
            FakeRead(ForLet(None), _147),
            StorageLive(_152),
            StorageLive(_153),
            StorageLive(_154),
            _154 = _7,
            _155 = Eq(const 4_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:92:36: 92:76 (#0),
                    scope: scope[28],
                },
                kind: assert(!move _155, "attempt to divide `{}` by zero", _154) -> [success: bb68, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _153 = Div(move _154, const 4_usize),
            StorageDead(_154),
            _156 = MulWithOverflow(_153, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:92:36: 92:80 (#0),
                    scope: scope[28],
                },
                kind: assert(!move (_156.1: bool), "attempt to compute `{} * {}`, which would overflow", move _153, const 3_usize) -> [success: bb69, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _152 = move (_156.0: usize),
            StorageDead(_153),
            FakeRead(ForLet(None), _152),
            StorageLive(_157),
            StorageLive(_158),
            StorageLive(_159),
            StorageLive(_160),
            _160 = &mut (*_3),
            StorageLive(_161),
            StorageLive(_162),
            _162 = _147,
            StorageLive(_163),
            _163 = _152,
            _161 = std::ops::Range::<usize> { start: move _162, end: move _163 },
            StorageDead(_163),
            StorageDead(_162),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:94:46: 94:98 (#0),
                    scope: scope[29],
                },
                kind: _159 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _160, move _161) -> [return: bb70, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
            StorageDead(_160),
            _158 = &mut (*_159),
            FakeRead(ForLet(None), _158),
            StorageLive(_164),
            StorageLive(_165),
            StorageLive(_166),
            StorageLive(_167),
            StorageLive(_168),
            StorageLive(_169),
            _169 = &(*_1),
            StorageLive(_170),
            StorageLive(_171),
            _171 = _23,
            StorageLive(_172),
            _172 = _7,
            _170 = std::ops::Range::<usize> { start: move _171, end: move _172 },
            StorageDead(_172),
            StorageDead(_171),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:97:13: 97:76 (#0),
                    scope: scope[30],
                },
                kind: _168 = <[u8] as std::ops::Index<std::ops::Range<usize>>>::index(move _169, move _170) -> [return: bb71, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _167 = &(*_168),
            StorageDead(_170),
            StorageDead(_169),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:96:37: 98:29 (#0),
                    scope: scope[30],
                },
                kind: _166 = core::slice::<impl [u8]>::chunks_exact(move _167, const 4_usize) -> [return: bb72, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_167),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#0),
                    scope: scope[30],
                },
                kind: _165 = <std::slice::ChunksExact<'_, u8> as std::iter::Iterator>::enumerate(move _166) -> [return: bb73, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_166),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
                    scope: scope[30],
                },
                kind: _164 = <std::iter::Enumerate<std::slice::ChunksExact<'_, u8>> as std::iter::IntoIterator>::into_iter(move _165) -> [return: bb74, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_165),
            PlaceMention(_164),
            StorageLive(_173),
            _173 = move _164,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                    scope: scope[31],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                    scope: scope[31],
                },
                kind: falseUnwind -> [real: bb76, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_174),
            StorageLive(_175),
            StorageLive(_176),
            StorageLive(_177),
            _177 = &mut _173,
            _176 = &mut (*_177),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
                    scope: scope[31],
                },
                kind: _175 = <std::iter::Enumerate<std::slice::ChunksExact<'_, u8>> as std::iter::Iterator>::next(move _176) -> [return: bb77, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_176),
            PlaceMention(_175),
            _178 = discriminant(_175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
                    scope: scope[31],
                },
                kind: switchInt(move _178) -> [0: bb79, 1: bb80, otherwise: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
                    scope: scope[31],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                    scope: scope[31],
                },
                kind: falseEdge -> [real: bb81, imaginary: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_180),
            _180 = (((_175 as Some).0: (usize, &[u8])).0: usize),
            StorageLive(_181),
            _181 = (((_175 as Some).0: (usize, &[u8])).1: &[u8]),
            StorageLive(_182),
            StorageLive(_183),
            StorageLive(_184),
            _184 = &mut (*_158),
            StorageLive(_185),
            StorageLive(_186),
            StorageLive(_187),
            _187 = _180,
            _188 = MulWithOverflow(_187, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:101:57: 101:72 (#0),
                    scope: scope[32],
                },
                kind: assert(!move (_188.1: bool), "attempt to compute `{} * {}`, which would overflow", move _187, const 3_usize) -> [success: bb82, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _157 = const (),
            StorageDead(_177),
            StorageDead(_175),
            StorageDead(_174),
            StorageDead(_173),
            StorageDead(_168),
            StorageDead(_164),
            StorageDead(_159),
            StorageDead(_158),
            StorageDead(_157),
            StorageLive(_211),
            _211 = &(*_1),
            StorageLive(_212),
            _212 = _7,
            StorageLive(_213),
            _213 = &mut (*_3),
            StorageLive(_214),
            _214 = _152,
            StorageLive(_215),
            _215 = &(*_4),
            StorageLive(_216),
            _216 = _5,
            StorageLive(_217),
            _217 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:112:5: 120:6 (#0),
                    scope: scope[29],
                },
                kind: _0 = engine::general_purpose::decode_suffix::decode_suffix(move _211, move _212, move _213, move _214, move _215, move _216, move _217) -> [return: bb95, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _186 = move (_188.0: usize),
            StorageDead(_187),
            StorageLive(_189),
            StorageLive(_190),
            StorageLive(_191),
            _191 = _180,
            _192 = MulWithOverflow(_191, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:101:74: 101:89 (#0),
                    scope: scope[32],
                },
                kind: assert(!move (_192.1: bool), "attempt to compute `{} * {}`, which would overflow", move _191, const 3_usize) -> [success: bb83, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _190 = move (_192.0: usize),
            StorageDead(_191),
            _193 = AddWithOverflow(_190, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:101:74: 101:93 (#0),
                    scope: scope[32],
                },
                kind: assert(!move (_193.1: bool), "attempt to compute `{} + {}`, which would overflow", move _190, const 3_usize) -> [success: bb84, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _189 = move (_193.0: usize),
            StorageDead(_190),
            _185 = std::ops::Range::<usize> { start: move _186, end: move _189 },
            StorageDead(_189),
            StorageDead(_186),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:101:56: 101:94 (#0),
                    scope: scope[32],
                },
                kind: _183 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _184, move _185) -> [return: bb85, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_185),
            StorageDead(_184),
            _182 = &mut (*_183),
            FakeRead(ForLet(None), _182),
            StorageLive(_194),
            StorageLive(_195),
            StorageLive(_196),
            StorageLive(_197),
            _197 = &(*_181),
            StorageLive(_198),
            StorageLive(_199),
            _199 = _23,
            StorageLive(_200),
            StorageLive(_201),
            _201 = _180,
            _202 = MulWithOverflow(_201, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:105:43: 105:58 (#0),
                    scope: scope[33],
                },
                kind: assert(!move (_202.1: bool), "attempt to compute `{} * {}`, which would overflow", move _201, const 4_usize) -> [success: bb86, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _200 = move (_202.0: usize),
            StorageDead(_201),
            _203 = AddWithOverflow(_199, _200),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:105:17: 105:58 (#0),
                    scope: scope[33],
                },
                kind: assert(!move (_203.1: bool), "attempt to compute `{} + {}`, which would overflow", move _199, move _200) -> [success: bb87, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _198 = move (_203.0: usize),
            StorageDead(_200),
            StorageDead(_199),
            StorageLive(_204),
            _204 = &(*_4),
            StorageLive(_205),
            _205 = &mut (*_182),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:103:13: 108:14 (#0),
                    scope: scope[33],
                },
                kind: _196 = engine::general_purpose::decode::decode_chunk_4(move _197, move _198, move _204, move _205) -> [return: bb88, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_205),
            StorageDead(_204),
            StorageDead(_198),
            StorageDead(_197),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:103:13: 108:15 (#467),
                    scope: scope[33],
                },
                kind: _195 = <std::result::Result<(), decode::DecodeError> as std::ops::Try>::branch(move _196) -> [return: bb89, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_196),
            PlaceMention(_195),
            _206 = discriminant(_195),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:103:13: 108:15 (#467),
                    scope: scope[33],
                },
                kind: switchInt(move _206) -> [0: bb92, 1: bb91, otherwise: bb90],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _195),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:103:13: 108:15 (#467),
                    scope: scope[33],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:108:14: 108:15 (#468),
                    scope: scope[33],
                },
                kind: falseEdge -> [real: bb93, imaginary: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_210),
            _210 = ((_195 as Continue).0: ()),
            _194 = _210,
            StorageDead(_210),
            StorageDead(_195),
            StorageDead(_194),
            _174 = const (),
            StorageDead(_183),
            StorageDead(_182),
            StorageDead(_181),
            StorageDead(_180),
            StorageDead(_177),
            StorageDead(_175),
            StorageDead(_174),
            _37 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                    scope: scope[31],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_207),
            _207 = move ((_195 as Break).0: std::result::Result<std::convert::Infallible, decode::DecodeError>),
            StorageLive(_209),
            _209 = move _207,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:103:13: 108:15 (#467),
                    scope: scope[35],
                },
                kind: _0 = <std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, decode::DecodeError>>>::from_residual(move _209) -> [return: bb94, unwind: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_209),
            StorageDead(_207),
            StorageDead(_195),
            StorageDead(_194),
            StorageDead(_183),
            StorageDead(_182),
            StorageDead(_181),
            StorageDead(_180),
            StorageDead(_177),
            StorageDead(_175),
            StorageDead(_174),
            StorageDead(_173),
            StorageDead(_168),
            StorageDead(_164),
            StorageDead(_159),
            StorageDead(_158),
            StorageDead(_157),
            StorageDead(_152),
            StorageDead(_147),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_217),
            StorageDead(_216),
            StorageDead(_215),
            StorageDead(_214),
            StorageDead(_213),
            StorageDead(_212),
            StorageDead(_211),
            StorageDead(_152),
            StorageDead(_147),
            StorageDead(_23),
            StorageDead(_20),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:121:2: 121:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_41),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_36),
            StorageDead(_32),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb97,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:121:2: 121:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb99,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:121:2: 121:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:35:1: 121:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:42:6: 42:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:36:12: 36:17 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:36:5: 36:10 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:36:5: 36:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:36:5: 36:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:37:15: 37:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:37:5: 37:13 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:37:5: 37:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} engine::general_purpose::decode::GeneralPurposeEstimate,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:37:5: 37:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:38:13: 38:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:38:5: 38:11 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:38:5: 38:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:38:5: 38:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:39:19: 39:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:39:5: 39:17 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:39:5: 39:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:39:5: 39:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:40:33: 40:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:40:5: 40:31 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:40:5: 40:31 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:40:5: 40:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:41:19: 41:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:41:5: 41:17 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:41:5: 41:17 (#0),
                    },
                ),
            ),
        ),
        ty: engine::DecodePaddingMode,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:41:5: 41:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:44:9: 44:77 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:43:9: 43:45 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:43:9: 43:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, decode::DecodeSliceError>, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:9: 44:77 (#451),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<usize, decode::DecodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:9: 44:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:28: 44:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:35: 44:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:49: 44:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:49: 44:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:63: 44:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:76: 44:77 (#452),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/engine/general_purpose/decode.rs:44:9: 44:77 (#451),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:44:76: 44:77 (#452),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:76: 44:77 (#452),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:76: 44:77 (#452),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:76: 44:77 (#452),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/engine/general_purpose/decode.rs:44:9: 44:77 (#451),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:44:9: 44:77 (#451),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:44:9: 44:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:50:9: 50:73 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:49:9: 49:55 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:49:9: 49:55 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:50:9: 50:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:50:9: 50:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:53:9: 53:94 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:52:9: 52:32 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:52:9: 52:32 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:53:9: 53:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:53:48: 53:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:53:9: 53:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:5: 88:6 (#453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<std::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<std::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::ChunksExact<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:33: 57:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:33: 56:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:38: 56:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:33: 56:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:39: 56:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:41: 56:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _28,
                                ),
                                src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
                    },
                ),
            ),
        ),
        ty: std::iter::Enumerate<std::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:35:1: 121:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, &'{erased} [u8])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:5: 88:6 (#453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:5: 88:6 (#453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:56:9: 56:29 (#455),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:10: 56:21 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                src/engine/general_purpose/decode.rs:56:33: 58:21 (#454),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:56:9: 56:29 (#455),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:56:23: 56:28 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:60:27: 60:66 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:60:13: 60:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:60:13: 60:24 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:60:27: 60:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:60:27: 60:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:61:28: 62:62 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:61:13: 61:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:61:13: 61:25 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:61:39: 62:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:61:33: 61:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:61:40: 62:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:61:40: 61:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:61:40: 61:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:61:40: 61:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:62:15: 62:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:62:15: 62:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:62:16: 62:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:62:15: 62:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:62:15: 62:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:64:9: 69:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, decode::DecodeError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:64:9: 69:11 (#456),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:64:9: 69:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:65:13: 65:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:65:13: 65:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:65:19: 65:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:65:14: 65:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:65:20: 65:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:66:13: 66:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:67:13: 67:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:68:13: 68:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:68:13: 68:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:68:30: 68:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:68:18: 68:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:68:31: 68:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:69:10: 69:11 (#457),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _62,
                                ),
                                src/engine/general_purpose/decode.rs:64:9: 69:11 (#456),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:69:10: 69:11 (#457),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:69:10: 69:11 (#457),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:69:10: 69:11 (#457),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:69:10: 69:11 (#457),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _62,
                                ),
                                src/engine/general_purpose/decode.rs:64:9: 69:11 (#456),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:64:9: 69:11 (#456),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:64:9: 69:11 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:70:9: 75:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, decode::DecodeError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:70:9: 75:11 (#458),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:70:9: 75:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:71:13: 71:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:71:13: 71:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:71:19: 71:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:71:14: 71:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:71:20: 71:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:72:13: 72:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:72:13: 72:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:72:13: 72:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:73:13: 73:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:74:13: 74:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:74:13: 74:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:74:30: 74:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:74:18: 74:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:74:31: 74:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:75:10: 75:11 (#459),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _82,
                                ),
                                src/engine/general_purpose/decode.rs:70:9: 75:11 (#458),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:75:10: 75:11 (#459),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:75:10: 75:11 (#459),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:75:10: 75:11 (#459),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:75:10: 75:11 (#459),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _82,
                                ),
                                src/engine/general_purpose/decode.rs:70:9: 75:11 (#458),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:70:9: 75:11 (#458),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:70:9: 75:11 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:76:9: 81:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, decode::DecodeError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:76:9: 81:11 (#460),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:76:9: 81:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:77:13: 77:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:77:13: 77:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:77:19: 77:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:77:14: 77:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:77:20: 77:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:78:13: 78:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:78:13: 78:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:78:13: 78:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:79:13: 79:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:80:13: 80:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:80:13: 80:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:80:30: 80:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:80:18: 80:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:80:31: 80:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:81:10: 81:11 (#461),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _104,
                                ),
                                src/engine/general_purpose/decode.rs:76:9: 81:11 (#460),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:81:10: 81:11 (#461),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:81:10: 81:11 (#461),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:81:10: 81:11 (#461),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:81:10: 81:11 (#461),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _104,
                                ),
                                src/engine/general_purpose/decode.rs:76:9: 81:11 (#460),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:76:9: 81:11 (#460),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:76:9: 81:11 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:82:9: 87:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, decode::DecodeError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:82:9: 87:11 (#462),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:82:9: 87:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:83:13: 83:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:83:13: 83:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:83:19: 83:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:83:14: 83:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:83:20: 83:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:84:13: 84:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:84:13: 84:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:84:13: 84:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:85:13: 85:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:86:13: 86:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:86:13: 86:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:86:30: 86:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:86:18: 86:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:86:31: 86:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:87:10: 87:11 (#463),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _126,
                                ),
                                src/engine/general_purpose/decode.rs:82:9: 87:11 (#462),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:87:10: 87:11 (#463),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:87:10: 87:11 (#463),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:87:10: 87:11 (#463),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:87:10: 87:11 (#463),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _126,
                                ),
                                src/engine/general_purpose/decode.rs:82:9: 87:11 (#462),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:82:9: 87:11 (#462),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:82:9: 87:11 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:91:36: 91:67 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:91:9: 91:33 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:91:9: 91:33 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:91:36: 91:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:91:36: 91:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:91:36: 91:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:91:36: 91:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:92:36: 92:80 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:92:9: 92:33 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:92:9: 92:33 (#0),
            scope: scope[28],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:92:36: 92:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:92:36: 92:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:92:36: 92:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:92:36: 92:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:94:35: 94:98 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:94:13: 94:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:94:13: 94:32 (#0),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:94:46: 94:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:94:40: 94:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:94:47: 94:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:94:47: 94:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:94:73: 94:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                },
            ),
        ),
        ty: std::iter::Enumerate<std::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                },
            ),
        ),
        ty: std::iter::Enumerate<std::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                },
            ),
        ),
        ty: std::slice::ChunksExact<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:37: 98:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:37: 97:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:97:13: 97:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:37: 96:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
                },
            ),
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:97:14: 97:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:97:14: 97:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:97:39: 97:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _164,
                                ),
                                src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
                    },
                ),
            ),
        ),
        ty: std::iter::Enumerate<std::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
            scope: scope[30],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, &'{erased} [u8])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:9: 109:10 (#464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _175,
                                ),
                                src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:96:13: 96:33 (#466),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:14: 96:25 (#0),
            scope: scope[31],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _175,
                                ),
                                src/engine/general_purpose/decode.rs:96:37: 99:25 (#465),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:96:13: 96:33 (#466),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:96:27: 96:32 (#0),
            scope: scope[31],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:101:32: 101:94 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:101:17: 101:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:17: 101:29 (#0),
            scope: scope[32],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:56: 101:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:37: 101:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:57: 101:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:57: 101:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:57: 101:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:57: 101:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:74: 101:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:74: 101:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:74: 101:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:74: 101:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:101:74: 101:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:103:13: 108:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, decode::DecodeError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:103:13: 108:15 (#467),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:103:13: 108:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:104:17: 104:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:105:17: 105:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:105:17: 105:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:105:43: 105:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:105:43: 105:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:105:43: 105:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:105:17: 105:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:106:17: 106:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:107:17: 107:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:108:14: 108:15 (#468),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _195,
                                ),
                                src/engine/general_purpose/decode.rs:103:13: 108:15 (#467),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:108:14: 108:15 (#468),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:108:14: 108:15 (#468),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:108:14: 108:15 (#468),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:108:14: 108:15 (#468),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _195,
                                ),
                                src/engine/general_purpose/decode.rs:103:13: 108:15 (#467),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:103:13: 108:15 (#467),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:103:13: 108:15 (#0),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode.rs:112:5: 120:6 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:113:9: 113:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode.rs:112:5: 120:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:114:9: 114:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode.rs:112:5: 120:6 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:115:9: 115:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode.rs:112:5: 120:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:116:9: 116:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode.rs:112:5: 120:6 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:117:9: 117:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode.rs:112:5: 120:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:118:9: 118:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode.rs:112:5: 120:6 (#0),
                },
            ),
        ),
        ty: engine::DecodePaddingMode,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:119:9: 119:21 (#0),
            scope: scope[0],
        },
    },
]