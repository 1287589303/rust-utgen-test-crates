[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/mod.rs:167:21: 167:35 (#0),
                    scope: scope[0],
                },
                kind: _7 = <T as std::convert::AsRef<[u8]>>::as_ref(move _8) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
            StorageLive(_9),
            _9 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/mod.rs:167:9: 167:48 (#0),
                    scope: scope[0],
                },
                kind: _4 = engine::Engine::encode_string::inner::<Self>(move _5, move _6, move _9) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_7),
            StorageDead(_4),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/mod.rs:168:5: 168:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/mod.rs:168:6: 168:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/mod.rs:168:5: 168:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/mod.rs:155:5: 168:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/mod.rs:155:79: 155:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/mod.rs:155:38: 155:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/mod.rs:155:52: 155:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/mod.rs:155:45: 155:50 (#0),
                            ),
                        ),
                        pat_span: src/engine/mod.rs:155:45: 155:50 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/mod.rs:155:45: 155:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/mod.rs:155:67: 155:78 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/mod.rs:155:55: 155:65 (#0),
                            ),
                        ),
                        pat_span: src/engine/mod.rs:155:55: 155:65 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/mod.rs:155:55: 155:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/mod.rs:167:9: 167:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/mod.rs:167:15: 167:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/mod.rs:167:21: 167:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/mod.rs:167:21: 167:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/mod.rs:167:21: 167:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/mod.rs:167:37: 167:47 (#0),
            scope: scope[0],
        },
    },
]