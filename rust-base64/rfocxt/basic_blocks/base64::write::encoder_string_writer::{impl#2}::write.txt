[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut ((*_1).0: write::encoder::EncoderWriter<'_, E, write::encoder_string_writer::Utf8SingleCodeUnitWriter<S>>),
            StorageLive(_4),
            _4 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:84:9: 84:32 (#0),
                    scope: scope[0],
                },
                kind: _0 = <write::encoder::EncoderWriter<'_, E, write::encoder_string_writer::Utf8SingleCodeUnitWriter<S>> as std::io::Write>::write(move _3, move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:85:6: 85:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder_string_writer.rs:83:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<usize, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:83:40: 83:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut write::encoder_string_writer::EncoderStringWriter<'{erased}, E/#1, S/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:83:14: 83:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/write/encoder_string_writer.rs:83:30: 83:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/write/encoder_string_writer.rs:83:25: 83:28 (#0),
                            ),
                        ),
                        pat_span: src/write/encoder_string_writer.rs:83:25: 83:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:83:25: 83:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/write/encoder_string_writer.rs:84:9: 84:32 (#0),
                },
            ),
        ),
        ty: &'{erased} mut write::encoder::EncoderWriter<'{erased}, E/#1, write::encoder_string_writer::Utf8SingleCodeUnitWriter<S/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:84:9: 84:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/write/encoder_string_writer.rs:84:9: 84:32 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder_string_writer.rs:84:28: 84:31 (#0),
            scope: scope[0],
        },
    },
]