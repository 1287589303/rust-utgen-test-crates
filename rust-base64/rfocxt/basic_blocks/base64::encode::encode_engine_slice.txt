[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(*_3),
            StorageLive(_5),
            _5 = move _1,
            StorageLive(_6),
            _6 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:56:5: 56:43 (#0),
                    scope: scope[0],
                },
                kind: _0 = <E as engine::Engine>::encode_slice::<T>(move _4, move _5, move _6) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:57:1: 57:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:57:2: 57:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:56:42: 56:43 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:57:1: 57:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:51:1: 57:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<usize, encode::EncodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:55:6: 55:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/encode.rs:52:12: 52:13 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:52:5: 52:10 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:52:5: 52:10 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:52:5: 52:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/encode.rs:53:17: 53:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:53:5: 53:15 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:53:5: 53:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:53:5: 53:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/encode.rs:54:13: 54:15 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:54:5: 54:11 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:54:5: 54:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} E/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:54:5: 54:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/encode.rs:56:5: 56:43 (#0),
                },
            ),
        ),
        ty: &'{erased} E/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:56:5: 56:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/encode.rs:56:5: 56:43 (#0),
                },
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:56:25: 56:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/encode.rs:56:5: 56:43 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:56:32: 56:42 (#0),
            scope: scope[0],
        },
    },
]