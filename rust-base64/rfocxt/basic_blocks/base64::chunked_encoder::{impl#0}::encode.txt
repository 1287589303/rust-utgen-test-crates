[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = [const 0_u8; 1024],
            FakeRead(ForLet(None), _4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:33:22: 33:46 (#0),
                    scope: scope[1],
                },
                kind: _7 = core::slice::<impl [u8]>::chunks(move _8, const chunked_encoder::ChunkedEncoder::<'e, E>::encode::CHUNK_SIZE) -> [return: bb1, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:33:22: 33:46 (#243),
                    scope: scope[1],
                },
                kind: _6 = <std::slice::Chunks<'_, u8> as std::iter::IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            StorageLive(_9),
            _9 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:33:9: 43:10 (#242),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:33:9: 43:10 (#242),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut _9,
            _13 = &mut (*_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:33:22: 33:46 (#243),
                    scope: scope[2],
                },
                kind: _12 = <std::slice::Chunks<'_, u8> as std::iter::Iterator>::next(move _13) -> [return: bb5, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            PlaceMention(_12),
            _15 = discriminant(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:33:22: 33:46 (#243),
                    scope: scope[2],
                },
                kind: switchInt(move _15) -> [0: bb7, 1: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:33:22: 33:46 (#243),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:33:9: 43:10 (#242),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = ((_12 as Some).0: &[u8]),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*((*_1).0: &E)),
            StorageLive(_20),
            _20 = &(*_17),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut _4,
            _22 = &mut (*_23),
            _21 = move _22 as &mut [u8] (PointerCoercion(Unsize)),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:34:27: 34:71 (#0),
                    scope: scope[3],
                },
                kind: _18 = <E as engine::Engine>::internal_encode(move _19, move _20, move _21) -> [return: bb10, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_56),
            _56 = (),
            _0 = std::result::Result::<(), <S as chunked_encoder::Sink>::Error>::Ok(move _56),
            StorageDead(_56),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:46:6: 46:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageDead(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:35:16: 35:27 (#0),
                    scope: scope[4],
                },
                kind: _26 = core::slice::<impl [u8]>::len(move _27) -> [return: bb11, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            _25 = Ne(move _26, const chunked_encoder::ChunkedEncoder::<'e, E>::encode::CHUNK_SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:35:16: 35:41 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _25) -> [0: bb20, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*((*_1).0: &E)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:35:45: 35:65 (#0),
                    scope: scope[4],
                },
                kind: _30 = <E as engine::Engine>::config(move _31) -> [return: bb13, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = &(*_30),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:35:45: 35:82 (#0),
                    scope: scope[4],
                },
                kind: _28 = <<E as engine::Engine>::Config as engine::Config>::encode_padding(move _29) -> [return: bb14, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:35:45: 35:82 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _28) -> [0: bb19, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageLive(_32),
            StorageLive(_33),
            _33 = _18,
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut _4,
            StorageLive(_38),
            StorageLive(_39),
            _39 = _18,
            _38 = std::ops::RangeFrom::<usize> { start: move _39 },
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:40:49: 40:56 (#0),
                    scope: scope[4],
                },
                kind: _36 = <[u8; 1024] as std::ops::IndexMut<std::ops::RangeFrom<usize>>>::index_mut(move _37, move _38) -> [return: bb16, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            _35 = &mut (*_36),
            _34 = &mut (*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:40:24: 40:57 (#0),
                    scope: scope[4],
                },
                kind: _32 = encode::add_padding(move _33, move _34) -> [return: bb17, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            _40 = AddWithOverflow(_18, _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:40:17: 40:57 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", _18, move _32) -> [success: bb18, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = move (_40.0: usize),
            StorageDead(_32),
            StorageDead(_36),
            StorageDead(_35),
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:35:13: 41:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:35:13: 41:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &mut (*_3),
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &_4,
            StorageLive(_49),
            StorageLive(_50),
            _50 = _18,
            _49 = std::ops::RangeTo::<usize> { end: move _50 },
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:42: 42:49 (#0),
                    scope: scope[4],
                },
                kind: _47 = <[u8; 1024] as std::ops::Index<std::ops::RangeTo<usize>>>::index(move _48, move _49) -> [return: bb23, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_48),
            _46 = &(*_47),
            _45 = &(*_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:13: 42:50 (#0),
                    scope: scope[4],
                },
                kind: _43 = <S as chunked_encoder::Sink>::write_encoded_bytes(move _44, move _45) -> [return: bb24, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:13: 42:51 (#246),
                    scope: scope[4],
                },
                kind: _42 = <std::result::Result<(), <S as chunked_encoder::Sink>::Error> as std::ops::Try>::branch(move _43) -> [return: bb25, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            PlaceMention(_42),
            _51 = discriminant(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:13: 42:51 (#246),
                    scope: scope[4],
                },
                kind: switchInt(move _51) -> [0: bb28, 1: bb27, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:13: 42:51 (#246),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:50: 42:51 (#247),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = ((_42 as Continue).0: ()),
            _41 = _55,
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:51: 42:52 (#0),
                    scope: scope[4],
                },
                kind: drop(_42) -> [return: bb31, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _52 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, <S as chunked_encoder::Sink>::Error>),
            StorageLive(_54),
            _54 = move _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:13: 42:51 (#246),
                    scope: scope[6],
                },
                kind: _0 = <std::result::Result<(), <S as chunked_encoder::Sink>::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, <S as chunked_encoder::Sink>::Error>>>::from_residual(move _54) -> [return: bb30, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:50: 42:51 (#247),
                    scope: scope[4],
                },
                kind: drop(_52) -> [return: bb32, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_42),
            StorageDead(_41),
            _11 = const (),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            _10 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:33:9: 43:10 (#242),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:51: 42:52 (#0),
                    scope: scope[4],
                },
                kind: drop(_42) -> [return: bb33, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:46:6: 46:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:46:6: 46:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:50: 42:51 (#246),
                    scope: scope[6],
                },
                kind: drop(_54) -> [return: bb36, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:50: 42:51 (#247),
                    scope: scope[4],
                },
                kind: drop(_52) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:51: 42:52 (#0),
                    scope: scope[4],
                },
                kind: drop(_42) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:42:50: 42:51 (#246),
                    scope: scope[4],
                },
                kind: drop(_43) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:28:5: 46:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#2], def_id: DefId(0:13 ~ base64[d406]::chunked_encoder::Sink::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:28:66: 28:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} chunked_encoder::ChunkedEncoder<'{erased}, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:28:28: 28:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/chunked_encoder.rs:28:42: 28:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/chunked_encoder.rs:28:35: 28:40 (#0),
                            ),
                        ),
                        pat_span: src/chunked_encoder.rs:28:35: 28:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:28:35: 28:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/chunked_encoder.rs:28:55: 28:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/chunked_encoder.rs:28:49: 28:53 (#0),
                            ),
                        ),
                        pat_span: src/chunked_encoder.rs:28:49: 28:53 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:28:49: 28:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/chunked_encoder.rs:32:23: 32:36 (#0),
                            ),
                        ),
                        pat_span: src/chunked_encoder.rs:32:13: 32:20 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 1024_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:32:13: 32:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:9: 43:10 (#242),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Chunks<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:22: 33:46 (#243),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Chunks<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:22: 33:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:22: 33:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/chunked_encoder.rs:33:22: 33:46 (#243),
                            ),
                        ),
                        pat_span: src/chunked_encoder.rs:33:22: 33:46 (#243),
                    },
                ),
            ),
        ),
        ty: std::slice::Chunks<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:22: 33:46 (#243),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:28:5: 46:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:22: 33:46 (#243),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:22: 33:46 (#243),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Chunks<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:22: 33:46 (#243),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::slice::Chunks<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:22: 33:46 (#243),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:9: 43:10 (#242),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:9: 43:10 (#242),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                src/chunked_encoder.rs:33:22: 33:46 (#243),
                            ),
                        ),
                        pat_span: src/chunked_encoder.rs:33:13: 33:18 (#244),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:33:13: 33:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/chunked_encoder.rs:34:27: 34:71 (#0),
                            ),
                        ),
                        pat_span: src/chunked_encoder.rs:34:17: 34:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:34:17: 34:24 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} E/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:34:27: 34:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:34:55: 34:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:34:62: 34:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8; 1024_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:34:62: 34:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8; 1024_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:34:62: 34:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:35:13: 41:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:35:16: 35:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:35:16: 35:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:35:16: 35:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:35:45: 35:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [E/#1], def_id: DefId(0:328 ~ base64[d406]::engine::Engine::Config) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:35:45: 35:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [E/#1], def_id: DefId(0:328 ~ base64[d406]::engine::Engine::Config) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:35:45: 35:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} E/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:35:45: 35:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:40:24: 40:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:40:36: 40:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:40:41: 40:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:40:41: 40:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:40:49: 40:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8; 1024_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:40:46: 40:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:40:50: 40:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:40:50: 40:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:40:17: 40:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:13: 42:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, Alias(Projection, AliasTy { args: [S/#2], def_id: DefId(0:13 ~ base64[d406]::chunked_encoder::Sink::Error) })>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:13: 42:51 (#246),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), Alias(Projection, AliasTy { args: [S/#2], def_id: DefId(0:13 ~ base64[d406]::chunked_encoder::Sink::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:13: 42:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:13: 42:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:38: 42:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:38: 42:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:42: 42:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 1024_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:39: 42:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:43: 42:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:45: 42:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:50: 42:51 (#247),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                src/chunked_encoder.rs:42:13: 42:51 (#246),
                            ),
                        ),
                        pat_span: src/chunked_encoder.rs:42:50: 42:51 (#247),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, Alias(Projection, AliasTy { args: [S/#2], def_id: DefId(0:13 ~ base64[d406]::chunked_encoder::Sink::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:50: 42:51 (#247),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:50: 42:51 (#247),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, Alias(Projection, AliasTy { args: [S/#2], def_id: DefId(0:13 ~ base64[d406]::chunked_encoder::Sink::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:50: 42:51 (#247),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _42,
                                ),
                                src/chunked_encoder.rs:42:13: 42:51 (#246),
                            ),
                        ),
                        pat_span: src/chunked_encoder.rs:42:13: 42:51 (#246),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:42:13: 42:51 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:45:12: 45:14 (#0),
            scope: scope[0],
        },
    },
]