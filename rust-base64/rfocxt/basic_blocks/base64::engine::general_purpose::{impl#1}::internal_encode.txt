[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = const 0_usize,
            FakeRead(ForLet(None), _4),
            AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:59:31: 59:42 (#0),
                    scope: scope[1],
                },
                kind: _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb1, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _10 = MulWithOverflow(const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:59:58: 59:82 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize) -> [success: bb2, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = move (_10.0: usize),
            _11 = AddWithOverflow(_9, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:59:58: 59:86 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 2_usize) -> [success: bb3, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = move (_11.0: usize),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:59:31: 59:87 (#0),
                    scope: scope[1],
                },
                kind: _5 = core::num::<impl usize>::saturating_sub(move _6, move _8) -> [return: bb4, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_12),
            _12 = const 0_usize,
            FakeRead(ForLet(None), _12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = _5,
            _14 = Gt(move _15, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:62:12: 62:31 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _14) -> [0: bb125, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:63:13: 125:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:63:13: 125:14 (#0),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb7, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            StorageLive(_18),
            _18 = _4,
            StorageLive(_19),
            _19 = _5,
            _17 = Le(move _18, move _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:63:19: 63:49 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _17) -> [0: bb124, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_2),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _4,
            StorageLive(_25),
            StorageLive(_26),
            _26 = _4,
            StorageLive(_27),
            StorageLive(_28),
            _29 = MulWithOverflow(const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:67:57: 67:81 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_29.1: bool), "attempt to compute `{} * {}`, which would overflow", const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize) -> [success: bb9, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = move (_29.0: usize),
            _30 = AddWithOverflow(_28, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:67:56: 67:86 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", move _28, const 2_usize) -> [success: bb10, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = move (_30.0: usize),
            StorageDead(_28),
            _31 = AddWithOverflow(_26, _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:67:41: 67:87 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", move _26, move _27) -> [success: bb11, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = move (_31.0: usize),
            StorageDead(_27),
            StorageDead(_26),
            _23 = std::ops::Range::<usize> { start: move _24, end: move _25 },
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:67:27: 67:88 (#0),
                    scope: scope[3],
                },
                kind: _21 = <[u8] as std::ops::Index<std::ops::Range<usize>>>::index(move _22, move _23) -> [return: bb12, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            _20 = &(*_21),
            FakeRead(ForLet(None), _20),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &mut (*_3),
            StorageLive(_35),
            StorageLive(_36),
            _36 = _12,
            StorageLive(_37),
            StorageLive(_38),
            _38 = _12,
            StorageLive(_39),
            _40 = MulWithOverflow(const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 8_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:69:63: 69:87 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_40.1: bool), "attempt to compute `{} * {}`, which would overflow", const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 8_usize) -> [success: bb13, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = move (_40.0: usize),
            _41 = AddWithOverflow(_38, _39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:69:47: 69:88 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, move _39) -> [success: bb14, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = move (_41.0: usize),
            StorageDead(_39),
            StorageDead(_38),
            _35 = std::ops::Range::<usize> { start: move _36, end: move _37 },
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:69:32: 69:89 (#0),
                    scope: scope[4],
                },
                kind: _33 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _34, move _35) -> [return: bb15, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            _32 = &mut (*_33),
            FakeRead(ForLet(None), _32),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &(*_20),
            StorageLive(_47),
            _47 = std::ops::RangeFrom::<usize> { start: const 0_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:79:54: 79:59 (#0),
                    scope: scope[5],
                },
                kind: _45 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _46, move _47) -> [return: bb16, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
            _44 = &(*_45),
            _43 = &(*_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:79:33: 79:60 (#0),
                    scope: scope[5],
                },
                kind: _42 = engine::general_purpose::read_u64(move _43) -> [return: bb17, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            FakeRead(ForLet(None), _42),
            StorageDead(_45),
            StorageDead(_44),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = _42,
            _53 = const 58_i32 as u32 (IntToInt),
            _54 = Lt(move _53, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:81:54: 81:71 (#0),
                    scope: scope[6],
                },
                kind: assert(move _54, "attempt to shift right by `{}`, which would overflow", const 58_i32) -> [success: bb18, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _51 = Shr(move _52, const 58_i32),
            StorageDead(_52),
            _50 = BitAnd(move _51, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_51),
            _49 = move _50 as usize (IntToInt),
            StorageDead(_50),
            _55 = Len(((*_1).0: [u8; 64])),
            _56 = Lt(_49, _55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:81:35: 81:97 (#0),
                    scope: scope[6],
                },
                kind: assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _49) -> [success: bb19, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = ((*_1).0: [u8; 64])[_49],
            StorageLive(_57),
            _57 = const 0_usize,
            _58 = Len((*_32)),
            _59 = Lt(_57, _58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:81:17: 81:32 (#0),
                    scope: scope[6],
                },
                kind: assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> [success: bb20, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_57] = move _48,
            StorageDead(_48),
            StorageDead(_57),
            StorageDead(_49),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            _64 = _42,
            _65 = const 52_i32 as u32 (IntToInt),
            _66 = Lt(move _65, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:82:54: 82:71 (#0),
                    scope: scope[6],
                },
                kind: assert(move _66, "attempt to shift right by `{}`, which would overflow", const 52_i32) -> [success: bb21, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _63 = Shr(move _64, const 52_i32),
            StorageDead(_64),
            _62 = BitAnd(move _63, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_63),
            _61 = move _62 as usize (IntToInt),
            StorageDead(_62),
            _67 = Len(((*_1).0: [u8; 64])),
            _68 = Lt(_61, _67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:82:35: 82:97 (#0),
                    scope: scope[6],
                },
                kind: assert(move _68, "index out of bounds: the length is {} but the index is {}", move _67, _61) -> [success: bb22, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _60 = ((*_1).0: [u8; 64])[_61],
            StorageLive(_69),
            _69 = const 1_usize,
            _70 = Len((*_32)),
            _71 = Lt(_69, _70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:82:17: 82:32 (#0),
                    scope: scope[6],
                },
                kind: assert(move _71, "index out of bounds: the length is {} but the index is {}", move _70, _69) -> [success: bb23, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_69] = move _60,
            StorageDead(_60),
            StorageDead(_69),
            StorageDead(_61),
            StorageLive(_72),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = _42,
            _77 = const 46_i32 as u32 (IntToInt),
            _78 = Lt(move _77, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:83:54: 83:71 (#0),
                    scope: scope[6],
                },
                kind: assert(move _78, "attempt to shift right by `{}`, which would overflow", const 46_i32) -> [success: bb24, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _75 = Shr(move _76, const 46_i32),
            StorageDead(_76),
            _74 = BitAnd(move _75, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_75),
            _73 = move _74 as usize (IntToInt),
            StorageDead(_74),
            _79 = Len(((*_1).0: [u8; 64])),
            _80 = Lt(_73, _79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:83:35: 83:97 (#0),
                    scope: scope[6],
                },
                kind: assert(move _80, "index out of bounds: the length is {} but the index is {}", move _79, _73) -> [success: bb25, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _72 = ((*_1).0: [u8; 64])[_73],
            StorageLive(_81),
            _81 = const 2_usize,
            _82 = Len((*_32)),
            _83 = Lt(_81, _82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:83:17: 83:32 (#0),
                    scope: scope[6],
                },
                kind: assert(move _83, "index out of bounds: the length is {} but the index is {}", move _82, _81) -> [success: bb26, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_81] = move _72,
            StorageDead(_72),
            StorageDead(_81),
            StorageDead(_73),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = _42,
            _89 = const 40_i32 as u32 (IntToInt),
            _90 = Lt(move _89, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:84:54: 84:71 (#0),
                    scope: scope[6],
                },
                kind: assert(move _90, "attempt to shift right by `{}`, which would overflow", const 40_i32) -> [success: bb27, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _87 = Shr(move _88, const 40_i32),
            StorageDead(_88),
            _86 = BitAnd(move _87, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_87),
            _85 = move _86 as usize (IntToInt),
            StorageDead(_86),
            _91 = Len(((*_1).0: [u8; 64])),
            _92 = Lt(_85, _91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:84:35: 84:97 (#0),
                    scope: scope[6],
                },
                kind: assert(move _92, "index out of bounds: the length is {} but the index is {}", move _91, _85) -> [success: bb28, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _84 = ((*_1).0: [u8; 64])[_85],
            StorageLive(_93),
            _93 = const 3_usize,
            _94 = Len((*_32)),
            _95 = Lt(_93, _94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:84:17: 84:32 (#0),
                    scope: scope[6],
                },
                kind: assert(move _95, "index out of bounds: the length is {} but the index is {}", move _94, _93) -> [success: bb29, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_93] = move _84,
            StorageDead(_84),
            StorageDead(_93),
            StorageDead(_85),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = _42,
            _101 = const 34_i32 as u32 (IntToInt),
            _102 = Lt(move _101, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:85:54: 85:71 (#0),
                    scope: scope[6],
                },
                kind: assert(move _102, "attempt to shift right by `{}`, which would overflow", const 34_i32) -> [success: bb30, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _99 = Shr(move _100, const 34_i32),
            StorageDead(_100),
            _98 = BitAnd(move _99, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_99),
            _97 = move _98 as usize (IntToInt),
            StorageDead(_98),
            _103 = Len(((*_1).0: [u8; 64])),
            _104 = Lt(_97, _103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:85:35: 85:97 (#0),
                    scope: scope[6],
                },
                kind: assert(move _104, "index out of bounds: the length is {} but the index is {}", move _103, _97) -> [success: bb31, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _96 = ((*_1).0: [u8; 64])[_97],
            StorageLive(_105),
            _105 = const 4_usize,
            _106 = Len((*_32)),
            _107 = Lt(_105, _106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:85:17: 85:32 (#0),
                    scope: scope[6],
                },
                kind: assert(move _107, "index out of bounds: the length is {} but the index is {}", move _106, _105) -> [success: bb32, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_105] = move _96,
            StorageDead(_96),
            StorageDead(_105),
            StorageDead(_97),
            StorageLive(_108),
            StorageLive(_109),
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            _112 = _42,
            _113 = const 28_i32 as u32 (IntToInt),
            _114 = Lt(move _113, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:86:54: 86:71 (#0),
                    scope: scope[6],
                },
                kind: assert(move _114, "attempt to shift right by `{}`, which would overflow", const 28_i32) -> [success: bb33, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _111 = Shr(move _112, const 28_i32),
            StorageDead(_112),
            _110 = BitAnd(move _111, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_111),
            _109 = move _110 as usize (IntToInt),
            StorageDead(_110),
            _115 = Len(((*_1).0: [u8; 64])),
            _116 = Lt(_109, _115),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:86:35: 86:97 (#0),
                    scope: scope[6],
                },
                kind: assert(move _116, "index out of bounds: the length is {} but the index is {}", move _115, _109) -> [success: bb34, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _108 = ((*_1).0: [u8; 64])[_109],
            StorageLive(_117),
            _117 = const 5_usize,
            _118 = Len((*_32)),
            _119 = Lt(_117, _118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:86:17: 86:32 (#0),
                    scope: scope[6],
                },
                kind: assert(move _119, "index out of bounds: the length is {} but the index is {}", move _118, _117) -> [success: bb35, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_117] = move _108,
            StorageDead(_108),
            StorageDead(_117),
            StorageDead(_109),
            StorageLive(_120),
            StorageLive(_121),
            StorageLive(_122),
            StorageLive(_123),
            StorageLive(_124),
            _124 = _42,
            _125 = const 22_i32 as u32 (IntToInt),
            _126 = Lt(move _125, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:87:54: 87:71 (#0),
                    scope: scope[6],
                },
                kind: assert(move _126, "attempt to shift right by `{}`, which would overflow", const 22_i32) -> [success: bb36, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _123 = Shr(move _124, const 22_i32),
            StorageDead(_124),
            _122 = BitAnd(move _123, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_123),
            _121 = move _122 as usize (IntToInt),
            StorageDead(_122),
            _127 = Len(((*_1).0: [u8; 64])),
            _128 = Lt(_121, _127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:87:35: 87:97 (#0),
                    scope: scope[6],
                },
                kind: assert(move _128, "index out of bounds: the length is {} but the index is {}", move _127, _121) -> [success: bb37, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _120 = ((*_1).0: [u8; 64])[_121],
            StorageLive(_129),
            _129 = const 6_usize,
            _130 = Len((*_32)),
            _131 = Lt(_129, _130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:87:17: 87:32 (#0),
                    scope: scope[6],
                },
                kind: assert(move _131, "index out of bounds: the length is {} but the index is {}", move _130, _129) -> [success: bb38, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_129] = move _120,
            StorageDead(_120),
            StorageDead(_129),
            StorageDead(_121),
            StorageLive(_132),
            StorageLive(_133),
            StorageLive(_134),
            StorageLive(_135),
            StorageLive(_136),
            _136 = _42,
            _137 = const 16_i32 as u32 (IntToInt),
            _138 = Lt(move _137, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:88:54: 88:71 (#0),
                    scope: scope[6],
                },
                kind: assert(move _138, "attempt to shift right by `{}`, which would overflow", const 16_i32) -> [success: bb39, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _135 = Shr(move _136, const 16_i32),
            StorageDead(_136),
            _134 = BitAnd(move _135, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_135),
            _133 = move _134 as usize (IntToInt),
            StorageDead(_134),
            _139 = Len(((*_1).0: [u8; 64])),
            _140 = Lt(_133, _139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:88:35: 88:97 (#0),
                    scope: scope[6],
                },
                kind: assert(move _140, "index out of bounds: the length is {} but the index is {}", move _139, _133) -> [success: bb40, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _132 = ((*_1).0: [u8; 64])[_133],
            StorageLive(_141),
            _141 = const 7_usize,
            _142 = Len((*_32)),
            _143 = Lt(_141, _142),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:88:17: 88:32 (#0),
                    scope: scope[6],
                },
                kind: assert(move _143, "index out of bounds: the length is {} but the index is {}", move _142, _141) -> [success: bb41, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_141] = move _132,
            StorageDead(_132),
            StorageDead(_141),
            StorageDead(_133),
            StorageLive(_144),
            StorageLive(_145),
            StorageLive(_146),
            StorageLive(_147),
            StorageLive(_148),
            _148 = &(*_20),
            StorageLive(_149),
            _149 = std::ops::RangeFrom::<usize> { start: const 6_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:90:54: 90:59 (#0),
                    scope: scope[6],
                },
                kind: _147 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _148, move _149) -> [return: bb42, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
            StorageDead(_148),
            _146 = &(*_147),
            _145 = &(*_146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:90:33: 90:60 (#0),
                    scope: scope[6],
                },
                kind: _144 = engine::general_purpose::read_u64(move _145) -> [return: bb43, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
            FakeRead(ForLet(None), _144),
            StorageDead(_147),
            StorageDead(_146),
            StorageLive(_150),
            StorageLive(_151),
            StorageLive(_152),
            StorageLive(_153),
            StorageLive(_154),
            _154 = _144,
            _155 = const 58_i32 as u32 (IntToInt),
            _156 = Lt(move _155, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:92:54: 92:71 (#0),
                    scope: scope[7],
                },
                kind: assert(move _156, "attempt to shift right by `{}`, which would overflow", const 58_i32) -> [success: bb44, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _153 = Shr(move _154, const 58_i32),
            StorageDead(_154),
            _152 = BitAnd(move _153, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_153),
            _151 = move _152 as usize (IntToInt),
            StorageDead(_152),
            _157 = Len(((*_1).0: [u8; 64])),
            _158 = Lt(_151, _157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:92:35: 92:97 (#0),
                    scope: scope[7],
                },
                kind: assert(move _158, "index out of bounds: the length is {} but the index is {}", move _157, _151) -> [success: bb45, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _150 = ((*_1).0: [u8; 64])[_151],
            StorageLive(_159),
            _159 = const 8_usize,
            _160 = Len((*_32)),
            _161 = Lt(_159, _160),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:92:17: 92:32 (#0),
                    scope: scope[7],
                },
                kind: assert(move _161, "index out of bounds: the length is {} but the index is {}", move _160, _159) -> [success: bb46, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_159] = move _150,
            StorageDead(_150),
            StorageDead(_159),
            StorageDead(_151),
            StorageLive(_162),
            StorageLive(_163),
            StorageLive(_164),
            StorageLive(_165),
            StorageLive(_166),
            _166 = _144,
            _167 = const 52_i32 as u32 (IntToInt),
            _168 = Lt(move _167, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:93:54: 93:71 (#0),
                    scope: scope[7],
                },
                kind: assert(move _168, "attempt to shift right by `{}`, which would overflow", const 52_i32) -> [success: bb47, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _165 = Shr(move _166, const 52_i32),
            StorageDead(_166),
            _164 = BitAnd(move _165, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_165),
            _163 = move _164 as usize (IntToInt),
            StorageDead(_164),
            _169 = Len(((*_1).0: [u8; 64])),
            _170 = Lt(_163, _169),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:93:35: 93:97 (#0),
                    scope: scope[7],
                },
                kind: assert(move _170, "index out of bounds: the length is {} but the index is {}", move _169, _163) -> [success: bb48, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _162 = ((*_1).0: [u8; 64])[_163],
            StorageLive(_171),
            _171 = const 9_usize,
            _172 = Len((*_32)),
            _173 = Lt(_171, _172),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:93:17: 93:32 (#0),
                    scope: scope[7],
                },
                kind: assert(move _173, "index out of bounds: the length is {} but the index is {}", move _172, _171) -> [success: bb49, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_171] = move _162,
            StorageDead(_162),
            StorageDead(_171),
            StorageDead(_163),
            StorageLive(_174),
            StorageLive(_175),
            StorageLive(_176),
            StorageLive(_177),
            StorageLive(_178),
            _178 = _144,
            _179 = const 46_i32 as u32 (IntToInt),
            _180 = Lt(move _179, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:94:55: 94:72 (#0),
                    scope: scope[7],
                },
                kind: assert(move _180, "attempt to shift right by `{}`, which would overflow", const 46_i32) -> [success: bb50, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _177 = Shr(move _178, const 46_i32),
            StorageDead(_178),
            _176 = BitAnd(move _177, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_177),
            _175 = move _176 as usize (IntToInt),
            StorageDead(_176),
            _181 = Len(((*_1).0: [u8; 64])),
            _182 = Lt(_175, _181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:94:36: 94:98 (#0),
                    scope: scope[7],
                },
                kind: assert(move _182, "index out of bounds: the length is {} but the index is {}", move _181, _175) -> [success: bb51, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _174 = ((*_1).0: [u8; 64])[_175],
            StorageLive(_183),
            _183 = const 10_usize,
            _184 = Len((*_32)),
            _185 = Lt(_183, _184),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:94:17: 94:33 (#0),
                    scope: scope[7],
                },
                kind: assert(move _185, "index out of bounds: the length is {} but the index is {}", move _184, _183) -> [success: bb52, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_183] = move _174,
            StorageDead(_174),
            StorageDead(_183),
            StorageDead(_175),
            StorageLive(_186),
            StorageLive(_187),
            StorageLive(_188),
            StorageLive(_189),
            StorageLive(_190),
            _190 = _144,
            _191 = const 40_i32 as u32 (IntToInt),
            _192 = Lt(move _191, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:95:55: 95:72 (#0),
                    scope: scope[7],
                },
                kind: assert(move _192, "attempt to shift right by `{}`, which would overflow", const 40_i32) -> [success: bb53, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _189 = Shr(move _190, const 40_i32),
            StorageDead(_190),
            _188 = BitAnd(move _189, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_189),
            _187 = move _188 as usize (IntToInt),
            StorageDead(_188),
            _193 = Len(((*_1).0: [u8; 64])),
            _194 = Lt(_187, _193),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:95:36: 95:98 (#0),
                    scope: scope[7],
                },
                kind: assert(move _194, "index out of bounds: the length is {} but the index is {}", move _193, _187) -> [success: bb54, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _186 = ((*_1).0: [u8; 64])[_187],
            StorageLive(_195),
            _195 = const 11_usize,
            _196 = Len((*_32)),
            _197 = Lt(_195, _196),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:95:17: 95:33 (#0),
                    scope: scope[7],
                },
                kind: assert(move _197, "index out of bounds: the length is {} but the index is {}", move _196, _195) -> [success: bb55, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_195] = move _186,
            StorageDead(_186),
            StorageDead(_195),
            StorageDead(_187),
            StorageLive(_198),
            StorageLive(_199),
            StorageLive(_200),
            StorageLive(_201),
            StorageLive(_202),
            _202 = _144,
            _203 = const 34_i32 as u32 (IntToInt),
            _204 = Lt(move _203, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:96:55: 96:72 (#0),
                    scope: scope[7],
                },
                kind: assert(move _204, "attempt to shift right by `{}`, which would overflow", const 34_i32) -> [success: bb56, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _201 = Shr(move _202, const 34_i32),
            StorageDead(_202),
            _200 = BitAnd(move _201, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_201),
            _199 = move _200 as usize (IntToInt),
            StorageDead(_200),
            _205 = Len(((*_1).0: [u8; 64])),
            _206 = Lt(_199, _205),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:96:36: 96:98 (#0),
                    scope: scope[7],
                },
                kind: assert(move _206, "index out of bounds: the length is {} but the index is {}", move _205, _199) -> [success: bb57, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _198 = ((*_1).0: [u8; 64])[_199],
            StorageLive(_207),
            _207 = const 12_usize,
            _208 = Len((*_32)),
            _209 = Lt(_207, _208),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:96:17: 96:33 (#0),
                    scope: scope[7],
                },
                kind: assert(move _209, "index out of bounds: the length is {} but the index is {}", move _208, _207) -> [success: bb58, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_207] = move _198,
            StorageDead(_198),
            StorageDead(_207),
            StorageDead(_199),
            StorageLive(_210),
            StorageLive(_211),
            StorageLive(_212),
            StorageLive(_213),
            StorageLive(_214),
            _214 = _144,
            _215 = const 28_i32 as u32 (IntToInt),
            _216 = Lt(move _215, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:97:55: 97:72 (#0),
                    scope: scope[7],
                },
                kind: assert(move _216, "attempt to shift right by `{}`, which would overflow", const 28_i32) -> [success: bb59, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _213 = Shr(move _214, const 28_i32),
            StorageDead(_214),
            _212 = BitAnd(move _213, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_213),
            _211 = move _212 as usize (IntToInt),
            StorageDead(_212),
            _217 = Len(((*_1).0: [u8; 64])),
            _218 = Lt(_211, _217),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:97:36: 97:98 (#0),
                    scope: scope[7],
                },
                kind: assert(move _218, "index out of bounds: the length is {} but the index is {}", move _217, _211) -> [success: bb60, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _210 = ((*_1).0: [u8; 64])[_211],
            StorageLive(_219),
            _219 = const 13_usize,
            _220 = Len((*_32)),
            _221 = Lt(_219, _220),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:97:17: 97:33 (#0),
                    scope: scope[7],
                },
                kind: assert(move _221, "index out of bounds: the length is {} but the index is {}", move _220, _219) -> [success: bb61, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_219] = move _210,
            StorageDead(_210),
            StorageDead(_219),
            StorageDead(_211),
            StorageLive(_222),
            StorageLive(_223),
            StorageLive(_224),
            StorageLive(_225),
            StorageLive(_226),
            _226 = _144,
            _227 = const 22_i32 as u32 (IntToInt),
            _228 = Lt(move _227, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:98:55: 98:72 (#0),
                    scope: scope[7],
                },
                kind: assert(move _228, "attempt to shift right by `{}`, which would overflow", const 22_i32) -> [success: bb62, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _225 = Shr(move _226, const 22_i32),
            StorageDead(_226),
            _224 = BitAnd(move _225, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_225),
            _223 = move _224 as usize (IntToInt),
            StorageDead(_224),
            _229 = Len(((*_1).0: [u8; 64])),
            _230 = Lt(_223, _229),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:98:36: 98:98 (#0),
                    scope: scope[7],
                },
                kind: assert(move _230, "index out of bounds: the length is {} but the index is {}", move _229, _223) -> [success: bb63, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _222 = ((*_1).0: [u8; 64])[_223],
            StorageLive(_231),
            _231 = const 14_usize,
            _232 = Len((*_32)),
            _233 = Lt(_231, _232),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:98:17: 98:33 (#0),
                    scope: scope[7],
                },
                kind: assert(move _233, "index out of bounds: the length is {} but the index is {}", move _232, _231) -> [success: bb64, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_231] = move _222,
            StorageDead(_222),
            StorageDead(_231),
            StorageDead(_223),
            StorageLive(_234),
            StorageLive(_235),
            StorageLive(_236),
            StorageLive(_237),
            StorageLive(_238),
            _238 = _144,
            _239 = const 16_i32 as u32 (IntToInt),
            _240 = Lt(move _239, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:99:55: 99:72 (#0),
                    scope: scope[7],
                },
                kind: assert(move _240, "attempt to shift right by `{}`, which would overflow", const 16_i32) -> [success: bb65, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _237 = Shr(move _238, const 16_i32),
            StorageDead(_238),
            _236 = BitAnd(move _237, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_237),
            _235 = move _236 as usize (IntToInt),
            StorageDead(_236),
            _241 = Len(((*_1).0: [u8; 64])),
            _242 = Lt(_235, _241),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:99:36: 99:98 (#0),
                    scope: scope[7],
                },
                kind: assert(move _242, "index out of bounds: the length is {} but the index is {}", move _241, _235) -> [success: bb66, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _234 = ((*_1).0: [u8; 64])[_235],
            StorageLive(_243),
            _243 = const 15_usize,
            _244 = Len((*_32)),
            _245 = Lt(_243, _244),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:99:17: 99:33 (#0),
                    scope: scope[7],
                },
                kind: assert(move _245, "index out of bounds: the length is {} but the index is {}", move _244, _243) -> [success: bb67, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_243] = move _234,
            StorageDead(_234),
            StorageDead(_243),
            StorageDead(_235),
            StorageLive(_246),
            StorageLive(_247),
            StorageLive(_248),
            StorageLive(_249),
            StorageLive(_250),
            _250 = &(*_20),
            StorageLive(_251),
            _251 = std::ops::RangeFrom::<usize> { start: const 12_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:101:54: 101:60 (#0),
                    scope: scope[7],
                },
                kind: _249 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _250, move _251) -> [return: bb68, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_251),
            StorageDead(_250),
            _248 = &(*_249),
            _247 = &(*_248),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:101:33: 101:61 (#0),
                    scope: scope[7],
                },
                kind: _246 = engine::general_purpose::read_u64(move _247) -> [return: bb69, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_247),
            FakeRead(ForLet(None), _246),
            StorageDead(_249),
            StorageDead(_248),
            StorageLive(_252),
            StorageLive(_253),
            StorageLive(_254),
            StorageLive(_255),
            StorageLive(_256),
            _256 = _246,
            _257 = const 58_i32 as u32 (IntToInt),
            _258 = Lt(move _257, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:103:55: 103:72 (#0),
                    scope: scope[8],
                },
                kind: assert(move _258, "attempt to shift right by `{}`, which would overflow", const 58_i32) -> [success: bb70, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _255 = Shr(move _256, const 58_i32),
            StorageDead(_256),
            _254 = BitAnd(move _255, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_255),
            _253 = move _254 as usize (IntToInt),
            StorageDead(_254),
            _259 = Len(((*_1).0: [u8; 64])),
            _260 = Lt(_253, _259),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:103:36: 103:98 (#0),
                    scope: scope[8],
                },
                kind: assert(move _260, "index out of bounds: the length is {} but the index is {}", move _259, _253) -> [success: bb71, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _252 = ((*_1).0: [u8; 64])[_253],
            StorageLive(_261),
            _261 = const 16_usize,
            _262 = Len((*_32)),
            _263 = Lt(_261, _262),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:103:17: 103:33 (#0),
                    scope: scope[8],
                },
                kind: assert(move _263, "index out of bounds: the length is {} but the index is {}", move _262, _261) -> [success: bb72, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_261] = move _252,
            StorageDead(_252),
            StorageDead(_261),
            StorageDead(_253),
            StorageLive(_264),
            StorageLive(_265),
            StorageLive(_266),
            StorageLive(_267),
            StorageLive(_268),
            _268 = _246,
            _269 = const 52_i32 as u32 (IntToInt),
            _270 = Lt(move _269, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:104:55: 104:72 (#0),
                    scope: scope[8],
                },
                kind: assert(move _270, "attempt to shift right by `{}`, which would overflow", const 52_i32) -> [success: bb73, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _267 = Shr(move _268, const 52_i32),
            StorageDead(_268),
            _266 = BitAnd(move _267, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_267),
            _265 = move _266 as usize (IntToInt),
            StorageDead(_266),
            _271 = Len(((*_1).0: [u8; 64])),
            _272 = Lt(_265, _271),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:104:36: 104:98 (#0),
                    scope: scope[8],
                },
                kind: assert(move _272, "index out of bounds: the length is {} but the index is {}", move _271, _265) -> [success: bb74, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _264 = ((*_1).0: [u8; 64])[_265],
            StorageLive(_273),
            _273 = const 17_usize,
            _274 = Len((*_32)),
            _275 = Lt(_273, _274),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:104:17: 104:33 (#0),
                    scope: scope[8],
                },
                kind: assert(move _275, "index out of bounds: the length is {} but the index is {}", move _274, _273) -> [success: bb75, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_273] = move _264,
            StorageDead(_264),
            StorageDead(_273),
            StorageDead(_265),
            StorageLive(_276),
            StorageLive(_277),
            StorageLive(_278),
            StorageLive(_279),
            StorageLive(_280),
            _280 = _246,
            _281 = const 46_i32 as u32 (IntToInt),
            _282 = Lt(move _281, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:105:55: 105:72 (#0),
                    scope: scope[8],
                },
                kind: assert(move _282, "attempt to shift right by `{}`, which would overflow", const 46_i32) -> [success: bb76, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _279 = Shr(move _280, const 46_i32),
            StorageDead(_280),
            _278 = BitAnd(move _279, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_279),
            _277 = move _278 as usize (IntToInt),
            StorageDead(_278),
            _283 = Len(((*_1).0: [u8; 64])),
            _284 = Lt(_277, _283),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:105:36: 105:98 (#0),
                    scope: scope[8],
                },
                kind: assert(move _284, "index out of bounds: the length is {} but the index is {}", move _283, _277) -> [success: bb77, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _276 = ((*_1).0: [u8; 64])[_277],
            StorageLive(_285),
            _285 = const 18_usize,
            _286 = Len((*_32)),
            _287 = Lt(_285, _286),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:105:17: 105:33 (#0),
                    scope: scope[8],
                },
                kind: assert(move _287, "index out of bounds: the length is {} but the index is {}", move _286, _285) -> [success: bb78, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_285] = move _276,
            StorageDead(_276),
            StorageDead(_285),
            StorageDead(_277),
            StorageLive(_288),
            StorageLive(_289),
            StorageLive(_290),
            StorageLive(_291),
            StorageLive(_292),
            _292 = _246,
            _293 = const 40_i32 as u32 (IntToInt),
            _294 = Lt(move _293, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:106:55: 106:72 (#0),
                    scope: scope[8],
                },
                kind: assert(move _294, "attempt to shift right by `{}`, which would overflow", const 40_i32) -> [success: bb79, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _291 = Shr(move _292, const 40_i32),
            StorageDead(_292),
            _290 = BitAnd(move _291, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_291),
            _289 = move _290 as usize (IntToInt),
            StorageDead(_290),
            _295 = Len(((*_1).0: [u8; 64])),
            _296 = Lt(_289, _295),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:106:36: 106:98 (#0),
                    scope: scope[8],
                },
                kind: assert(move _296, "index out of bounds: the length is {} but the index is {}", move _295, _289) -> [success: bb80, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _288 = ((*_1).0: [u8; 64])[_289],
            StorageLive(_297),
            _297 = const 19_usize,
            _298 = Len((*_32)),
            _299 = Lt(_297, _298),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:106:17: 106:33 (#0),
                    scope: scope[8],
                },
                kind: assert(move _299, "index out of bounds: the length is {} but the index is {}", move _298, _297) -> [success: bb81, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_297] = move _288,
            StorageDead(_288),
            StorageDead(_297),
            StorageDead(_289),
            StorageLive(_300),
            StorageLive(_301),
            StorageLive(_302),
            StorageLive(_303),
            StorageLive(_304),
            _304 = _246,
            _305 = const 34_i32 as u32 (IntToInt),
            _306 = Lt(move _305, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:107:55: 107:72 (#0),
                    scope: scope[8],
                },
                kind: assert(move _306, "attempt to shift right by `{}`, which would overflow", const 34_i32) -> [success: bb82, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _303 = Shr(move _304, const 34_i32),
            StorageDead(_304),
            _302 = BitAnd(move _303, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_303),
            _301 = move _302 as usize (IntToInt),
            StorageDead(_302),
            _307 = Len(((*_1).0: [u8; 64])),
            _308 = Lt(_301, _307),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:107:36: 107:98 (#0),
                    scope: scope[8],
                },
                kind: assert(move _308, "index out of bounds: the length is {} but the index is {}", move _307, _301) -> [success: bb83, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _300 = ((*_1).0: [u8; 64])[_301],
            StorageLive(_309),
            _309 = const 20_usize,
            _310 = Len((*_32)),
            _311 = Lt(_309, _310),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:107:17: 107:33 (#0),
                    scope: scope[8],
                },
                kind: assert(move _311, "index out of bounds: the length is {} but the index is {}", move _310, _309) -> [success: bb84, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_309] = move _300,
            StorageDead(_300),
            StorageDead(_309),
            StorageDead(_301),
            StorageLive(_312),
            StorageLive(_313),
            StorageLive(_314),
            StorageLive(_315),
            StorageLive(_316),
            _316 = _246,
            _317 = const 28_i32 as u32 (IntToInt),
            _318 = Lt(move _317, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:108:55: 108:72 (#0),
                    scope: scope[8],
                },
                kind: assert(move _318, "attempt to shift right by `{}`, which would overflow", const 28_i32) -> [success: bb85, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _315 = Shr(move _316, const 28_i32),
            StorageDead(_316),
            _314 = BitAnd(move _315, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_315),
            _313 = move _314 as usize (IntToInt),
            StorageDead(_314),
            _319 = Len(((*_1).0: [u8; 64])),
            _320 = Lt(_313, _319),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:108:36: 108:98 (#0),
                    scope: scope[8],
                },
                kind: assert(move _320, "index out of bounds: the length is {} but the index is {}", move _319, _313) -> [success: bb86, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _312 = ((*_1).0: [u8; 64])[_313],
            StorageLive(_321),
            _321 = const 21_usize,
            _322 = Len((*_32)),
            _323 = Lt(_321, _322),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:108:17: 108:33 (#0),
                    scope: scope[8],
                },
                kind: assert(move _323, "index out of bounds: the length is {} but the index is {}", move _322, _321) -> [success: bb87, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_321] = move _312,
            StorageDead(_312),
            StorageDead(_321),
            StorageDead(_313),
            StorageLive(_324),
            StorageLive(_325),
            StorageLive(_326),
            StorageLive(_327),
            StorageLive(_328),
            _328 = _246,
            _329 = const 22_i32 as u32 (IntToInt),
            _330 = Lt(move _329, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:109:55: 109:72 (#0),
                    scope: scope[8],
                },
                kind: assert(move _330, "attempt to shift right by `{}`, which would overflow", const 22_i32) -> [success: bb88, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _327 = Shr(move _328, const 22_i32),
            StorageDead(_328),
            _326 = BitAnd(move _327, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_327),
            _325 = move _326 as usize (IntToInt),
            StorageDead(_326),
            _331 = Len(((*_1).0: [u8; 64])),
            _332 = Lt(_325, _331),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:109:36: 109:98 (#0),
                    scope: scope[8],
                },
                kind: assert(move _332, "index out of bounds: the length is {} but the index is {}", move _331, _325) -> [success: bb89, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _324 = ((*_1).0: [u8; 64])[_325],
            StorageLive(_333),
            _333 = const 22_usize,
            _334 = Len((*_32)),
            _335 = Lt(_333, _334),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:109:17: 109:33 (#0),
                    scope: scope[8],
                },
                kind: assert(move _335, "index out of bounds: the length is {} but the index is {}", move _334, _333) -> [success: bb90, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_333] = move _324,
            StorageDead(_324),
            StorageDead(_333),
            StorageDead(_325),
            StorageLive(_336),
            StorageLive(_337),
            StorageLive(_338),
            StorageLive(_339),
            StorageLive(_340),
            _340 = _246,
            _341 = const 16_i32 as u32 (IntToInt),
            _342 = Lt(move _341, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:110:55: 110:72 (#0),
                    scope: scope[8],
                },
                kind: assert(move _342, "attempt to shift right by `{}`, which would overflow", const 16_i32) -> [success: bb91, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _339 = Shr(move _340, const 16_i32),
            StorageDead(_340),
            _338 = BitAnd(move _339, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_339),
            _337 = move _338 as usize (IntToInt),
            StorageDead(_338),
            _343 = Len(((*_1).0: [u8; 64])),
            _344 = Lt(_337, _343),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:110:36: 110:98 (#0),
                    scope: scope[8],
                },
                kind: assert(move _344, "index out of bounds: the length is {} but the index is {}", move _343, _337) -> [success: bb92, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _336 = ((*_1).0: [u8; 64])[_337],
            StorageLive(_345),
            _345 = const 23_usize,
            _346 = Len((*_32)),
            _347 = Lt(_345, _346),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:110:17: 110:33 (#0),
                    scope: scope[8],
                },
                kind: assert(move _347, "index out of bounds: the length is {} but the index is {}", move _346, _345) -> [success: bb93, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_345] = move _336,
            StorageDead(_336),
            StorageDead(_345),
            StorageDead(_337),
            StorageLive(_348),
            StorageLive(_349),
            StorageLive(_350),
            StorageLive(_351),
            StorageLive(_352),
            _352 = &(*_20),
            StorageLive(_353),
            _353 = std::ops::RangeFrom::<usize> { start: const 18_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:112:54: 112:60 (#0),
                    scope: scope[8],
                },
                kind: _351 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _352, move _353) -> [return: bb94, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_353),
            StorageDead(_352),
            _350 = &(*_351),
            _349 = &(*_350),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:112:33: 112:61 (#0),
                    scope: scope[8],
                },
                kind: _348 = engine::general_purpose::read_u64(move _349) -> [return: bb95, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_349),
            FakeRead(ForLet(None), _348),
            StorageDead(_351),
            StorageDead(_350),
            StorageLive(_354),
            StorageLive(_355),
            StorageLive(_356),
            StorageLive(_357),
            StorageLive(_358),
            _358 = _348,
            _359 = const 58_i32 as u32 (IntToInt),
            _360 = Lt(move _359, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:114:55: 114:72 (#0),
                    scope: scope[9],
                },
                kind: assert(move _360, "attempt to shift right by `{}`, which would overflow", const 58_i32) -> [success: bb96, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _357 = Shr(move _358, const 58_i32),
            StorageDead(_358),
            _356 = BitAnd(move _357, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_357),
            _355 = move _356 as usize (IntToInt),
            StorageDead(_356),
            _361 = Len(((*_1).0: [u8; 64])),
            _362 = Lt(_355, _361),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:114:36: 114:98 (#0),
                    scope: scope[9],
                },
                kind: assert(move _362, "index out of bounds: the length is {} but the index is {}", move _361, _355) -> [success: bb97, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _354 = ((*_1).0: [u8; 64])[_355],
            StorageLive(_363),
            _363 = const 24_usize,
            _364 = Len((*_32)),
            _365 = Lt(_363, _364),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:114:17: 114:33 (#0),
                    scope: scope[9],
                },
                kind: assert(move _365, "index out of bounds: the length is {} but the index is {}", move _364, _363) -> [success: bb98, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_363] = move _354,
            StorageDead(_354),
            StorageDead(_363),
            StorageDead(_355),
            StorageLive(_366),
            StorageLive(_367),
            StorageLive(_368),
            StorageLive(_369),
            StorageLive(_370),
            _370 = _348,
            _371 = const 52_i32 as u32 (IntToInt),
            _372 = Lt(move _371, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:115:55: 115:72 (#0),
                    scope: scope[9],
                },
                kind: assert(move _372, "attempt to shift right by `{}`, which would overflow", const 52_i32) -> [success: bb99, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _369 = Shr(move _370, const 52_i32),
            StorageDead(_370),
            _368 = BitAnd(move _369, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_369),
            _367 = move _368 as usize (IntToInt),
            StorageDead(_368),
            _373 = Len(((*_1).0: [u8; 64])),
            _374 = Lt(_367, _373),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:115:36: 115:98 (#0),
                    scope: scope[9],
                },
                kind: assert(move _374, "index out of bounds: the length is {} but the index is {}", move _373, _367) -> [success: bb100, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _366 = ((*_1).0: [u8; 64])[_367],
            StorageLive(_375),
            _375 = const 25_usize,
            _376 = Len((*_32)),
            _377 = Lt(_375, _376),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:115:17: 115:33 (#0),
                    scope: scope[9],
                },
                kind: assert(move _377, "index out of bounds: the length is {} but the index is {}", move _376, _375) -> [success: bb101, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_375] = move _366,
            StorageDead(_366),
            StorageDead(_375),
            StorageDead(_367),
            StorageLive(_378),
            StorageLive(_379),
            StorageLive(_380),
            StorageLive(_381),
            StorageLive(_382),
            _382 = _348,
            _383 = const 46_i32 as u32 (IntToInt),
            _384 = Lt(move _383, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:116:55: 116:72 (#0),
                    scope: scope[9],
                },
                kind: assert(move _384, "attempt to shift right by `{}`, which would overflow", const 46_i32) -> [success: bb102, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _381 = Shr(move _382, const 46_i32),
            StorageDead(_382),
            _380 = BitAnd(move _381, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_381),
            _379 = move _380 as usize (IntToInt),
            StorageDead(_380),
            _385 = Len(((*_1).0: [u8; 64])),
            _386 = Lt(_379, _385),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:116:36: 116:98 (#0),
                    scope: scope[9],
                },
                kind: assert(move _386, "index out of bounds: the length is {} but the index is {}", move _385, _379) -> [success: bb103, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _378 = ((*_1).0: [u8; 64])[_379],
            StorageLive(_387),
            _387 = const 26_usize,
            _388 = Len((*_32)),
            _389 = Lt(_387, _388),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:116:17: 116:33 (#0),
                    scope: scope[9],
                },
                kind: assert(move _389, "index out of bounds: the length is {} but the index is {}", move _388, _387) -> [success: bb104, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_387] = move _378,
            StorageDead(_378),
            StorageDead(_387),
            StorageDead(_379),
            StorageLive(_390),
            StorageLive(_391),
            StorageLive(_392),
            StorageLive(_393),
            StorageLive(_394),
            _394 = _348,
            _395 = const 40_i32 as u32 (IntToInt),
            _396 = Lt(move _395, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:117:55: 117:72 (#0),
                    scope: scope[9],
                },
                kind: assert(move _396, "attempt to shift right by `{}`, which would overflow", const 40_i32) -> [success: bb105, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _393 = Shr(move _394, const 40_i32),
            StorageDead(_394),
            _392 = BitAnd(move _393, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_393),
            _391 = move _392 as usize (IntToInt),
            StorageDead(_392),
            _397 = Len(((*_1).0: [u8; 64])),
            _398 = Lt(_391, _397),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:117:36: 117:98 (#0),
                    scope: scope[9],
                },
                kind: assert(move _398, "index out of bounds: the length is {} but the index is {}", move _397, _391) -> [success: bb106, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _390 = ((*_1).0: [u8; 64])[_391],
            StorageLive(_399),
            _399 = const 27_usize,
            _400 = Len((*_32)),
            _401 = Lt(_399, _400),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:117:17: 117:33 (#0),
                    scope: scope[9],
                },
                kind: assert(move _401, "index out of bounds: the length is {} but the index is {}", move _400, _399) -> [success: bb107, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_399] = move _390,
            StorageDead(_390),
            StorageDead(_399),
            StorageDead(_391),
            StorageLive(_402),
            StorageLive(_403),
            StorageLive(_404),
            StorageLive(_405),
            StorageLive(_406),
            _406 = _348,
            _407 = const 34_i32 as u32 (IntToInt),
            _408 = Lt(move _407, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:118:55: 118:72 (#0),
                    scope: scope[9],
                },
                kind: assert(move _408, "attempt to shift right by `{}`, which would overflow", const 34_i32) -> [success: bb108, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _405 = Shr(move _406, const 34_i32),
            StorageDead(_406),
            _404 = BitAnd(move _405, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_405),
            _403 = move _404 as usize (IntToInt),
            StorageDead(_404),
            _409 = Len(((*_1).0: [u8; 64])),
            _410 = Lt(_403, _409),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:118:36: 118:98 (#0),
                    scope: scope[9],
                },
                kind: assert(move _410, "index out of bounds: the length is {} but the index is {}", move _409, _403) -> [success: bb109, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _402 = ((*_1).0: [u8; 64])[_403],
            StorageLive(_411),
            _411 = const 28_usize,
            _412 = Len((*_32)),
            _413 = Lt(_411, _412),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:118:17: 118:33 (#0),
                    scope: scope[9],
                },
                kind: assert(move _413, "index out of bounds: the length is {} but the index is {}", move _412, _411) -> [success: bb110, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_411] = move _402,
            StorageDead(_402),
            StorageDead(_411),
            StorageDead(_403),
            StorageLive(_414),
            StorageLive(_415),
            StorageLive(_416),
            StorageLive(_417),
            StorageLive(_418),
            _418 = _348,
            _419 = const 28_i32 as u32 (IntToInt),
            _420 = Lt(move _419, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:119:55: 119:72 (#0),
                    scope: scope[9],
                },
                kind: assert(move _420, "attempt to shift right by `{}`, which would overflow", const 28_i32) -> [success: bb111, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _417 = Shr(move _418, const 28_i32),
            StorageDead(_418),
            _416 = BitAnd(move _417, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_417),
            _415 = move _416 as usize (IntToInt),
            StorageDead(_416),
            _421 = Len(((*_1).0: [u8; 64])),
            _422 = Lt(_415, _421),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:119:36: 119:98 (#0),
                    scope: scope[9],
                },
                kind: assert(move _422, "index out of bounds: the length is {} but the index is {}", move _421, _415) -> [success: bb112, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _414 = ((*_1).0: [u8; 64])[_415],
            StorageLive(_423),
            _423 = const 29_usize,
            _424 = Len((*_32)),
            _425 = Lt(_423, _424),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:119:17: 119:33 (#0),
                    scope: scope[9],
                },
                kind: assert(move _425, "index out of bounds: the length is {} but the index is {}", move _424, _423) -> [success: bb113, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_423] = move _414,
            StorageDead(_414),
            StorageDead(_423),
            StorageDead(_415),
            StorageLive(_426),
            StorageLive(_427),
            StorageLive(_428),
            StorageLive(_429),
            StorageLive(_430),
            _430 = _348,
            _431 = const 22_i32 as u32 (IntToInt),
            _432 = Lt(move _431, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:120:55: 120:72 (#0),
                    scope: scope[9],
                },
                kind: assert(move _432, "attempt to shift right by `{}`, which would overflow", const 22_i32) -> [success: bb114, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _429 = Shr(move _430, const 22_i32),
            StorageDead(_430),
            _428 = BitAnd(move _429, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_429),
            _427 = move _428 as usize (IntToInt),
            StorageDead(_428),
            _433 = Len(((*_1).0: [u8; 64])),
            _434 = Lt(_427, _433),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:120:36: 120:98 (#0),
                    scope: scope[9],
                },
                kind: assert(move _434, "index out of bounds: the length is {} but the index is {}", move _433, _427) -> [success: bb115, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _426 = ((*_1).0: [u8; 64])[_427],
            StorageLive(_435),
            _435 = const 30_usize,
            _436 = Len((*_32)),
            _437 = Lt(_435, _436),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:120:17: 120:33 (#0),
                    scope: scope[9],
                },
                kind: assert(move _437, "index out of bounds: the length is {} but the index is {}", move _436, _435) -> [success: bb116, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_435] = move _426,
            StorageDead(_426),
            StorageDead(_435),
            StorageDead(_427),
            StorageLive(_438),
            StorageLive(_439),
            StorageLive(_440),
            StorageLive(_441),
            StorageLive(_442),
            _442 = _348,
            _443 = const 16_i32 as u32 (IntToInt),
            _444 = Lt(move _443, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:121:55: 121:72 (#0),
                    scope: scope[9],
                },
                kind: assert(move _444, "attempt to shift right by `{}`, which would overflow", const 16_i32) -> [success: bb117, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _441 = Shr(move _442, const 16_i32),
            StorageDead(_442),
            _440 = BitAnd(move _441, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS),
            StorageDead(_441),
            _439 = move _440 as usize (IntToInt),
            StorageDead(_440),
            _445 = Len(((*_1).0: [u8; 64])),
            _446 = Lt(_439, _445),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:121:36: 121:98 (#0),
                    scope: scope[9],
                },
                kind: assert(move _446, "index out of bounds: the length is {} but the index is {}", move _445, _439) -> [success: bb118, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _438 = ((*_1).0: [u8; 64])[_439],
            StorageLive(_447),
            _447 = const 31_usize,
            _448 = Len((*_32)),
            _449 = Lt(_447, _448),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:121:17: 121:33 (#0),
                    scope: scope[9],
                },
                kind: assert(move _449, "index out of bounds: the length is {} but the index is {}", move _448, _447) -> [success: bb119, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_32)[_447] = move _438,
            StorageDead(_438),
            StorageDead(_447),
            StorageDead(_439),
            StorageLive(_450),
            _451 = MulWithOverflow(const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 8_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:123:33: 123:57 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_451.1: bool), "attempt to compute `{} * {}`, which would overflow", const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 8_usize) -> [success: bb120, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _450 = move (_451.0: usize),
            _452 = AddWithOverflow(_12, _450),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:123:17: 123:57 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_452.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, move _450) -> [success: bb121, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_452.0: usize),
            StorageDead(_450),
            StorageLive(_453),
            _454 = MulWithOverflow(const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:124:32: 124:56 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_454.1: bool), "attempt to compute `{} * {}`, which would overflow", const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize) -> [success: bb122, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _453 = move (_454.0: usize),
            _455 = AddWithOverflow(_4, _453),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:124:17: 124:56 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_455.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, move _453) -> [success: bb123, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move (_455.0: usize),
            StorageDead(_453),
            _16 = const (),
            StorageDead(_348),
            StorageDead(_246),
            StorageDead(_144),
            StorageDead(_42),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:63:13: 125:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_457),
            _13 = const (),
            StorageDead(_457),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:62:9: 126:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb126,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:62:9: 126:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb126,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_459),
            StorageLive(_460),
            StorageLive(_461),
            _461 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:132:19: 132:30 (#0),
                    scope: scope[3],
                },
                kind: _460 = core::slice::<impl [u8]>::len(move _461) -> [return: bb127, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_461),
            _462 = Eq(const 3_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:132:19: 132:34 (#0),
                    scope: scope[3],
                },
                kind: assert(!move _462, "attempt to calculate the remainder of `{}` with a divisor of zero", _460) -> [success: bb128, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _459 = Rem(move _460, const 3_usize),
            StorageDead(_460),
            FakeRead(ForLet(None), _459),
            StorageLive(_463),
            StorageLive(_464),
            StorageLive(_465),
            _465 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:133:28: 133:39 (#0),
                    scope: scope[10],
                },
                kind: _464 = core::slice::<impl [u8]>::len(move _465) -> [return: bb129, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_465),
            StorageLive(_466),
            _466 = _459,
            _467 = SubWithOverflow(_464, _466),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:133:28: 133:45 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_467.1: bool), "attempt to compute `{} - {}`, which would overflow", move _464, move _466) -> [success: bb130, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _463 = move (_467.0: usize),
            StorageDead(_466),
            StorageDead(_464),
            FakeRead(ForLet(None), _463),
            StorageLive(_468),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb131,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#0),
                    scope: scope[11],
                },
                kind: falseUnwind -> [real: bb132, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_469),
            StorageLive(_470),
            _470 = _4,
            StorageLive(_471),
            _471 = _463,
            _469 = Lt(move _470, move _471),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:137:15: 137:41 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _469) -> [0: bb159, otherwise: bb133],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_471),
            StorageDead(_470),
            StorageLive(_472),
            StorageLive(_473),
            StorageLive(_474),
            _474 = &(*_2),
            StorageLive(_475),
            StorageLive(_476),
            _476 = _4,
            StorageLive(_477),
            StorageLive(_478),
            _478 = _4,
            _479 = AddWithOverflow(_478, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:138:51: 138:68 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_479.1: bool), "attempt to compute `{} + {}`, which would overflow", move _478, const 3_usize) -> [success: bb134, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _477 = move (_479.0: usize),
            StorageDead(_478),
            _475 = std::ops::Range::<usize> { start: move _476, end: move _477 },
            StorageDead(_477),
            StorageDead(_476),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:138:37: 138:69 (#0),
                    scope: scope[11],
                },
                kind: _473 = <[u8] as std::ops::Index<std::ops::Range<usize>>>::index(move _474, move _475) -> [return: bb135, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_475),
            StorageDead(_474),
            _472 = &(*_473),
            FakeRead(ForLet(None), _472),
            StorageLive(_480),
            StorageLive(_481),
            StorageLive(_482),
            _482 = &mut (*_3),
            StorageLive(_483),
            StorageLive(_484),
            _484 = _12,
            StorageLive(_485),
            StorageLive(_486),
            _486 = _12,
            _487 = AddWithOverflow(_486, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:139:58: 139:76 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_487.1: bool), "attempt to compute `{} + {}`, which would overflow", move _486, const 4_usize) -> [success: bb136, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _485 = move (_487.0: usize),
            StorageDead(_486),
            _483 = std::ops::Range::<usize> { start: move _484, end: move _485 },
            StorageDead(_485),
            StorageDead(_484),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:139:43: 139:77 (#0),
                    scope: scope[12],
                },
                kind: _481 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _482, move _483) -> [return: bb137, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_483),
            StorageDead(_482),
            _480 = &mut (*_481),
            FakeRead(ForLet(None), _480),
            StorageLive(_488),
            StorageLive(_489),
            StorageLive(_490),
            StorageLive(_491),
            StorageLive(_492),
            _492 = const 0_usize,
            _493 = Len((*_472)),
            _494 = Lt(_492, _493),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:141:50: 141:64 (#0),
                    scope: scope[13],
                },
                kind: assert(move _494, "index out of bounds: the length is {} but the index is {}", move _493, _492) -> [success: bb138, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _491 = (*_472)[_492],
            _495 = const 2_i32 as u32 (IntToInt),
            _496 = Lt(move _495, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:141:49: 141:70 (#0),
                    scope: scope[13],
                },
                kind: assert(move _496, "attempt to shift right by `{}`, which would overflow", const 2_i32) -> [success: bb139, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _490 = Shr(move _491, const 2_i32),
            StorageDead(_491),
            _489 = move _490 as usize (IntToInt),
            StorageDead(_490),
            _497 = Len(((*_1).0: [u8; 64])),
            _498 = Lt(_489, _497),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:141:31: 141:80 (#0),
                    scope: scope[13],
                },
                kind: assert(move _498, "index out of bounds: the length is {} but the index is {}", move _497, _489) -> [success: bb140, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _488 = ((*_1).0: [u8; 64])[_489],
            StorageLive(_499),
            _499 = const 0_usize,
            _500 = Len((*_480)),
            _501 = Lt(_499, _500),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:141:13: 141:28 (#0),
                    scope: scope[13],
                },
                kind: assert(move _501, "index out of bounds: the length is {} but the index is {}", move _500, _499) -> [success: bb141, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_480)[_499] = move _488,
            StorageDead(_488),
            StorageDead(_499),
            StorageDead(_492),
            StorageDead(_489),
            StorageLive(_502),
            StorageLive(_503),
            StorageLive(_504),
            StorageLive(_505),
            StorageLive(_506),
            StorageLive(_507),
            StorageLive(_508),
            _508 = const 0_usize,
            _509 = Len((*_472)),
            _510 = Lt(_508, _509),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:143:20: 143:34 (#0),
                    scope: scope[13],
                },
                kind: assert(move _510, "index out of bounds: the length is {} but the index is {}", move _509, _508) -> [success: bb142, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _507 = (*_472)[_508],
            _511 = const 4_i32 as u32 (IntToInt),
            _512 = Lt(move _511, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:143:20: 143:39 (#0),
                    scope: scope[13],
                },
                kind: assert(move _512, "attempt to shift left by `{}`, which would overflow", const 4_i32) -> [success: bb143, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _506 = Shl(move _507, const 4_i32),
            StorageDead(_507),
            StorageLive(_513),
            StorageLive(_514),
            StorageLive(_515),
            _515 = const 1_usize,
            _516 = Len((*_472)),
            _517 = Lt(_515, _516),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:143:42: 143:56 (#0),
                    scope: scope[13],
                },
                kind: assert(move _517, "index out of bounds: the length is {} but the index is {}", move _516, _515) -> [success: bb144, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _514 = (*_472)[_515],
            _518 = const 4_i32 as u32 (IntToInt),
            _519 = Lt(move _518, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:143:42: 143:61 (#0),
                    scope: scope[13],
                },
                kind: assert(move _519, "attempt to shift right by `{}`, which would overflow", const 4_i32) -> [success: bb145, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _513 = Shr(move _514, const 4_i32),
            StorageDead(_514),
            _505 = BitOr(move _506, move _513),
            StorageDead(_513),
            StorageDead(_506),
            _504 = BitAnd(move _505, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8),
            StorageDead(_505),
            _503 = move _504 as usize (IntToInt),
            StorageDead(_504),
            _520 = Len(((*_1).0: [u8; 64])),
            _521 = Lt(_503, _520),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:142:31: 143:91 (#0),
                    scope: scope[13],
                },
                kind: assert(move _521, "index out of bounds: the length is {} but the index is {}", move _520, _503) -> [success: bb146, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _502 = ((*_1).0: [u8; 64])[_503],
            StorageLive(_522),
            _522 = const 1_usize,
            _523 = Len((*_480)),
            _524 = Lt(_522, _523),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:142:13: 142:28 (#0),
                    scope: scope[13],
                },
                kind: assert(move _524, "index out of bounds: the length is {} but the index is {}", move _523, _522) -> [success: bb147, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_480)[_522] = move _502,
            StorageDead(_502),
            StorageDead(_522),
            StorageDead(_515),
            StorageDead(_508),
            StorageDead(_503),
            StorageLive(_525),
            StorageLive(_526),
            StorageLive(_527),
            StorageLive(_528),
            StorageLive(_529),
            StorageLive(_530),
            StorageLive(_531),
            _531 = const 1_usize,
            _532 = Len((*_472)),
            _533 = Lt(_531, _532),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:145:20: 145:34 (#0),
                    scope: scope[13],
                },
                kind: assert(move _533, "index out of bounds: the length is {} but the index is {}", move _532, _531) -> [success: bb148, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _530 = (*_472)[_531],
            _534 = const 2_i32 as u32 (IntToInt),
            _535 = Lt(move _534, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:145:20: 145:39 (#0),
                    scope: scope[13],
                },
                kind: assert(move _535, "attempt to shift left by `{}`, which would overflow", const 2_i32) -> [success: bb149, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _529 = Shl(move _530, const 2_i32),
            StorageDead(_530),
            StorageLive(_536),
            StorageLive(_537),
            StorageLive(_538),
            _538 = const 2_usize,
            _539 = Len((*_472)),
            _540 = Lt(_538, _539),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:145:42: 145:56 (#0),
                    scope: scope[13],
                },
                kind: assert(move _540, "index out of bounds: the length is {} but the index is {}", move _539, _538) -> [success: bb150, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _537 = (*_472)[_538],
            _541 = const 6_i32 as u32 (IntToInt),
            _542 = Lt(move _541, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:145:42: 145:61 (#0),
                    scope: scope[13],
                },
                kind: assert(move _542, "attempt to shift right by `{}`, which would overflow", const 6_i32) -> [success: bb151, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _536 = Shr(move _537, const 6_i32),
            StorageDead(_537),
            _528 = BitOr(move _529, move _536),
            StorageDead(_536),
            StorageDead(_529),
            _527 = BitAnd(move _528, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8),
            StorageDead(_528),
            _526 = move _527 as usize (IntToInt),
            StorageDead(_527),
            _543 = Len(((*_1).0: [u8; 64])),
            _544 = Lt(_526, _543),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:144:31: 145:91 (#0),
                    scope: scope[13],
                },
                kind: assert(move _544, "index out of bounds: the length is {} but the index is {}", move _543, _526) -> [success: bb152, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _525 = ((*_1).0: [u8; 64])[_526],
            StorageLive(_545),
            _545 = const 2_usize,
            _546 = Len((*_480)),
            _547 = Lt(_545, _546),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:144:13: 144:28 (#0),
                    scope: scope[13],
                },
                kind: assert(move _547, "index out of bounds: the length is {} but the index is {}", move _546, _545) -> [success: bb153, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_480)[_545] = move _525,
            StorageDead(_525),
            StorageDead(_545),
            StorageDead(_538),
            StorageDead(_531),
            StorageDead(_526),
            StorageLive(_548),
            StorageLive(_549),
            StorageLive(_550),
            StorageLive(_551),
            StorageLive(_552),
            _552 = const 2_usize,
            _553 = Len((*_472)),
            _554 = Lt(_552, _553),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:146:50: 146:64 (#0),
                    scope: scope[13],
                },
                kind: assert(move _554, "index out of bounds: the length is {} but the index is {}", move _553, _552) -> [success: bb154, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _551 = (*_472)[_552],
            _550 = BitAnd(move _551, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8),
            StorageDead(_551),
            _549 = move _550 as usize (IntToInt),
            StorageDead(_550),
            _555 = Len(((*_1).0: [u8; 64])),
            _556 = Lt(_549, _555),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:146:31: 146:93 (#0),
                    scope: scope[13],
                },
                kind: assert(move _556, "index out of bounds: the length is {} but the index is {}", move _555, _549) -> [success: bb155, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _548 = ((*_1).0: [u8; 64])[_549],
            StorageLive(_557),
            _557 = const 3_usize,
            _558 = Len((*_480)),
            _559 = Lt(_557, _558),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:146:13: 146:28 (#0),
                    scope: scope[13],
                },
                kind: assert(move _559, "index out of bounds: the length is {} but the index is {}", move _558, _557) -> [success: bb156, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_480)[_557] = move _548,
            StorageDead(_548),
            StorageDead(_557),
            StorageDead(_552),
            StorageDead(_549),
            _560 = AddWithOverflow(_4, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:148:13: 148:29 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_560.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 3_usize) -> [success: bb157, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move (_560.0: usize),
            _561 = AddWithOverflow(_12, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:149:13: 149:30 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_561.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 4_usize) -> [success: bb158, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_561.0: usize),
            _16 = const (),
            StorageDead(_481),
            StorageDead(_480),
            StorageDead(_473),
            StorageDead(_472),
            StorageDead(_469),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb131,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_471),
            StorageDead(_470),
            StorageLive(_563),
            _468 = const (),
            StorageDead(_563),
            StorageDead(_469),
            StorageDead(_468),
            StorageLive(_565),
            StorageLive(_566),
            StorageLive(_567),
            _567 = _459,
            _566 = Eq(move _567, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:152:12: 152:20 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _566) -> [0: bb161, otherwise: bb160],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_567),
            StorageLive(_568),
            StorageLive(_569),
            StorageLive(_570),
            StorageLive(_571),
            StorageLive(_572),
            _572 = _463,
            _573 = Len((*_2)),
            _574 = Lt(_572, _573),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:153:55: 153:74 (#0),
                    scope: scope[11],
                },
                kind: assert(move _574, "index out of bounds: the length is {} but the index is {}", move _573, _572) -> [success: bb162, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_567),
            StorageLive(_629),
            StorageLive(_630),
            _630 = _459,
            _629 = Eq(move _630, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:160:19: 160:27 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _629) -> [0: bb182, otherwise: bb181],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _571 = (*_2)[_572],
            _575 = const 2_i32 as u32 (IntToInt),
            _576 = Lt(move _575, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:153:54: 153:80 (#0),
                    scope: scope[11],
                },
                kind: assert(move _576, "attempt to shift right by `{}`, which would overflow", const 2_i32) -> [success: bb163, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _570 = Shr(move _571, const 2_i32),
            StorageDead(_571),
            _569 = move _570 as usize (IntToInt),
            StorageDead(_570),
            _577 = Len(((*_1).0: [u8; 64])),
            _578 = Lt(_569, _577),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:153:36: 153:90 (#0),
                    scope: scope[11],
                },
                kind: assert(move _578, "index out of bounds: the length is {} but the index is {}", move _577, _569) -> [success: bb164, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _568 = ((*_1).0: [u8; 64])[_569],
            StorageLive(_579),
            _579 = _12,
            _580 = Len((*_3)),
            _581 = Lt(_579, _580),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:153:13: 153:33 (#0),
                    scope: scope[11],
                },
                kind: assert(move _581, "index out of bounds: the length is {} but the index is {}", move _580, _579) -> [success: bb165, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_3)[_579] = move _568,
            StorageDead(_568),
            StorageDead(_579),
            StorageDead(_572),
            StorageDead(_569),
            StorageLive(_582),
            StorageLive(_583),
            StorageLive(_584),
            StorageLive(_585),
            StorageLive(_586),
            StorageLive(_587),
            StorageLive(_588),
            _588 = _463,
            _589 = Len((*_2)),
            _590 = Lt(_588, _589),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:155:37: 155:56 (#0),
                    scope: scope[11],
                },
                kind: assert(move _590, "index out of bounds: the length is {} but the index is {}", move _589, _588) -> [success: bb166, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _587 = (*_2)[_588],
            _591 = const 4_i32 as u32 (IntToInt),
            _592 = Lt(move _591, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:155:37: 155:61 (#0),
                    scope: scope[11],
                },
                kind: assert(move _592, "attempt to shift left by `{}`, which would overflow", const 4_i32) -> [success: bb167, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _586 = Shl(move _587, const 4_i32),
            StorageDead(_587),
            StorageLive(_593),
            StorageLive(_594),
            StorageLive(_595),
            StorageLive(_596),
            _596 = _463,
            _597 = AddWithOverflow(_596, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:155:70: 155:86 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_597.1: bool), "attempt to compute `{} + {}`, which would overflow", move _596, const 1_usize) -> [success: bb168, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _595 = move (_597.0: usize),
            StorageDead(_596),
            _598 = Len((*_2)),
            _599 = Lt(_595, _598),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:155:64: 155:87 (#0),
                    scope: scope[11],
                },
                kind: assert(move _599, "index out of bounds: the length is {} but the index is {}", move _598, _595) -> [success: bb169, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _594 = (*_2)[_595],
            _600 = const 4_i32 as u32 (IntToInt),
            _601 = Lt(move _600, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:155:64: 155:92 (#0),
                    scope: scope[11],
                },
                kind: assert(move _601, "attempt to shift right by `{}`, which would overflow", const 4_i32) -> [success: bb170, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _593 = Shr(move _594, const 4_i32),
            StorageDead(_594),
            _585 = BitOr(move _586, move _593),
            StorageDead(_593),
            StorageDead(_586),
            _584 = BitAnd(move _585, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8),
            StorageDead(_585),
            _583 = move _584 as usize (IntToInt),
            StorageDead(_584),
            _602 = Len(((*_1).0: [u8; 64])),
            _603 = Lt(_583, _602),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:155:17: 156:49 (#0),
                    scope: scope[11],
                },
                kind: assert(move _603, "index out of bounds: the length is {} but the index is {}", move _602, _583) -> [success: bb171, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _582 = ((*_1).0: [u8; 64])[_583],
            StorageLive(_604),
            StorageLive(_605),
            _605 = _12,
            _606 = AddWithOverflow(_605, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:154:20: 154:36 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_606.1: bool), "attempt to compute `{} + {}`, which would overflow", move _605, const 1_usize) -> [success: bb172, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _604 = move (_606.0: usize),
            StorageDead(_605),
            _607 = Len((*_3)),
            _608 = Lt(_604, _607),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:154:13: 154:37 (#0),
                    scope: scope[11],
                },
                kind: assert(move _608, "index out of bounds: the length is {} but the index is {}", move _607, _604) -> [success: bb173, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_3)[_604] = move _582,
            StorageDead(_582),
            StorageDead(_604),
            StorageDead(_595),
            StorageDead(_588),
            StorageDead(_583),
            StorageLive(_609),
            StorageLive(_610),
            StorageLive(_611),
            StorageLive(_612),
            StorageLive(_613),
            StorageLive(_614),
            StorageLive(_615),
            _615 = _463,
            _616 = AddWithOverflow(_615, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:158:43: 158:59 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_616.1: bool), "attempt to compute `{} + {}`, which would overflow", move _615, const 1_usize) -> [success: bb174, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _614 = move (_616.0: usize),
            StorageDead(_615),
            _617 = Len((*_2)),
            _618 = Lt(_614, _617),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:158:37: 158:60 (#0),
                    scope: scope[11],
                },
                kind: assert(move _618, "index out of bounds: the length is {} but the index is {}", move _617, _614) -> [success: bb175, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _613 = (*_2)[_614],
            _619 = const 2_i32 as u32 (IntToInt),
            _620 = Lt(move _619, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:158:36: 158:66 (#0),
                    scope: scope[11],
                },
                kind: assert(move _620, "attempt to shift left by `{}`, which would overflow", const 2_i32) -> [success: bb176, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _612 = Shl(move _613, const 2_i32),
            StorageDead(_613),
            _611 = BitAnd(move _612, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8),
            StorageDead(_612),
            _610 = move _611 as usize (IntToInt),
            StorageDead(_611),
            _621 = Len(((*_1).0: [u8; 64])),
            _622 = Lt(_610, _621),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:158:17: 158:95 (#0),
                    scope: scope[11],
                },
                kind: assert(move _622, "index out of bounds: the length is {} but the index is {}", move _621, _610) -> [success: bb177, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _609 = ((*_1).0: [u8; 64])[_610],
            StorageLive(_623),
            StorageLive(_624),
            _624 = _12,
            _625 = AddWithOverflow(_624, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:157:20: 157:36 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_625.1: bool), "attempt to compute `{} + {}`, which would overflow", move _624, const 2_usize) -> [success: bb178, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _623 = move (_625.0: usize),
            StorageDead(_624),
            _626 = Len((*_3)),
            _627 = Lt(_623, _626),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:157:13: 157:37 (#0),
                    scope: scope[11],
                },
                kind: assert(move _627, "index out of bounds: the length is {} but the index is {}", move _626, _623) -> [success: bb179, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_3)[_623] = move _609,
            StorageDead(_609),
            StorageDead(_623),
            StorageDead(_614),
            StorageDead(_610),
            _628 = AddWithOverflow(_12, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:159:13: 159:30 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_628.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 3_usize) -> [success: bb180, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_628.0: usize),
            _565 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:152:9: 165:10 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_630),
            StorageLive(_631),
            StorageLive(_632),
            StorageLive(_633),
            StorageLive(_634),
            StorageLive(_635),
            _635 = _463,
            _636 = Len((*_2)),
            _637 = Lt(_635, _636),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:161:55: 161:74 (#0),
                    scope: scope[11],
                },
                kind: assert(move _637, "index out of bounds: the length is {} but the index is {}", move _636, _635) -> [success: bb183, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_630),
            _565 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:160:16: 165:10 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb193,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _634 = (*_2)[_635],
            _638 = const 2_i32 as u32 (IntToInt),
            _639 = Lt(move _638, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:161:54: 161:80 (#0),
                    scope: scope[11],
                },
                kind: assert(move _639, "attempt to shift right by `{}`, which would overflow", const 2_i32) -> [success: bb184, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _633 = Shr(move _634, const 2_i32),
            StorageDead(_634),
            _632 = move _633 as usize (IntToInt),
            StorageDead(_633),
            _640 = Len(((*_1).0: [u8; 64])),
            _641 = Lt(_632, _640),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:161:36: 161:90 (#0),
                    scope: scope[11],
                },
                kind: assert(move _641, "index out of bounds: the length is {} but the index is {}", move _640, _632) -> [success: bb185, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _631 = ((*_1).0: [u8; 64])[_632],
            StorageLive(_642),
            _642 = _12,
            _643 = Len((*_3)),
            _644 = Lt(_642, _643),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:161:13: 161:33 (#0),
                    scope: scope[11],
                },
                kind: assert(move _644, "index out of bounds: the length is {} but the index is {}", move _643, _642) -> [success: bb186, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_3)[_642] = move _631,
            StorageDead(_631),
            StorageDead(_642),
            StorageDead(_635),
            StorageDead(_632),
            StorageLive(_645),
            StorageLive(_646),
            StorageLive(_647),
            StorageLive(_648),
            StorageLive(_649),
            StorageLive(_650),
            _650 = _463,
            _651 = Len((*_2)),
            _652 = Lt(_650, _651),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:163:37: 163:56 (#0),
                    scope: scope[11],
                },
                kind: assert(move _652, "index out of bounds: the length is {} but the index is {}", move _651, _650) -> [success: bb187, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _649 = (*_2)[_650],
            _653 = const 4_i32 as u32 (IntToInt),
            _654 = Lt(move _653, const 8_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:163:36: 163:62 (#0),
                    scope: scope[11],
                },
                kind: assert(move _654, "attempt to shift left by `{}`, which would overflow", const 4_i32) -> [success: bb188, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _648 = Shl(move _649, const 4_i32),
            StorageDead(_649),
            _647 = BitAnd(move _648, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8),
            StorageDead(_648),
            _646 = move _647 as usize (IntToInt),
            StorageDead(_647),
            _655 = Len(((*_1).0: [u8; 64])),
            _656 = Lt(_646, _655),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:163:17: 163:91 (#0),
                    scope: scope[11],
                },
                kind: assert(move _656, "index out of bounds: the length is {} but the index is {}", move _655, _646) -> [success: bb189, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _645 = ((*_1).0: [u8; 64])[_646],
            StorageLive(_657),
            StorageLive(_658),
            _658 = _12,
            _659 = AddWithOverflow(_658, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:162:20: 162:36 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_659.1: bool), "attempt to compute `{} + {}`, which would overflow", move _658, const 1_usize) -> [success: bb190, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _657 = move (_659.0: usize),
            StorageDead(_658),
            _660 = Len((*_3)),
            _661 = Lt(_657, _660),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:162:13: 162:37 (#0),
                    scope: scope[11],
                },
                kind: assert(move _661, "index out of bounds: the length is {} but the index is {}", move _660, _657) -> [success: bb191, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_3)[_657] = move _645,
            StorageDead(_645),
            StorageDead(_657),
            StorageDead(_650),
            StorageDead(_646),
            _662 = AddWithOverflow(_12, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:164:13: 164:30 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_662.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 2_usize) -> [success: bb192, unwind: bb195],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_662.0: usize),
            _565 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:160:16: 165:10 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb193,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_629),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:152:9: 165:10 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_566),
            StorageDead(_565),
            _0 = _12,
            StorageDead(_463),
            StorageDead(_459),
            StorageDead(_12),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:168:6: 168:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:51:5: 168:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:51:67: 51:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} engine::general_purpose::GeneralPurpose,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:51:24: 51:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/mod.rs:51:38: 51:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:51:31: 51:36 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:51:31: 51:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:51:31: 51:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/mod.rs:51:53: 51:62 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:51:45: 51:51 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:51:45: 51:51 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:51:45: 51:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:52:38: 52:39 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:52:13: 52:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/engine/general_purpose/mod.rs:52:30: 52:35 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:52:13: 52:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:59:31: 59:87 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:59:13: 59:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:59:13: 59:28 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:59:31: 59:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:59:31: 59:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:59:58: 59:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:59:58: 59:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:59:58: 59:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:59:58: 59:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:60:32: 60:33 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:60:13: 60:29 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:60:13: 60:29 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:62:9: 126:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:62:12: 62:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:62:12: 62:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:51:5: 168:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:63:13: 125:14 (#523),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:63:19: 63:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:63:13: 125:14 (#523),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:63:19: 63:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:63:13: 125:14 (#523),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:63:34: 63:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:67:21: 67:88 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:66:21: 66:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:66:21: 66:32 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:27: 67:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:22: 67:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:28: 67:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:28: 67:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:41: 67:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:42: 67:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:56: 67:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:57: 67:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:57: 67:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:56: 67:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:67:41: 67:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:69:21: 69:89 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:68:21: 68:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:68:21: 68:33 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:69:32: 69:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:69:26: 69:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:69:33: 69:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:69:33: 69:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:69:47: 69:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:69:48: 69:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:69:63: 69:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:69:63: 69:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:69:47: 69:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:79:33: 79:60 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:79:21: 79:30 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:79:21: 79:30 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:79:42: 79:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:79:42: 79:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:79:54: 79:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:79:43: 79:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:79:55: 79:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:35: 81:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:53: 81:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:53: 81:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:54: 81:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:55: 81:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:54: 81:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:54: 81:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:35: 81:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:35: 81:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:30: 81:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:17: 81:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:81:17: 81:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:35: 82:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:53: 82:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:53: 82:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:54: 82:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:55: 82:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:54: 82:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:54: 82:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:35: 82:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:35: 82:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:30: 82:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:17: 82:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:82:17: 82:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:35: 83:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:53: 83:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:53: 83:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:54: 83:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:55: 83:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:54: 83:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:54: 83:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:35: 83:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:35: 83:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:30: 83:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:17: 83:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:83:17: 83:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:35: 84:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:53: 84:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:53: 84:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:54: 84:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:55: 84:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:54: 84:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:54: 84:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:35: 84:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:35: 84:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:30: 84:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:17: 84:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:84:17: 84:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:35: 85:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:53: 85:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:53: 85:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:54: 85:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:55: 85:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:54: 85:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:54: 85:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:35: 85:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:35: 85:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:30: 85:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:17: 85:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:85:17: 85:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:35: 86:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:53: 86:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:53: 86:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:54: 86:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:55: 86:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:54: 86:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:54: 86:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:35: 86:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:35: 86:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:30: 86:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:17: 86:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:86:17: 86:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:35: 87:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:53: 87:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:53: 87:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:54: 87:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:55: 87:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:54: 87:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:54: 87:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:35: 87:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:35: 87:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:30: 87:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:17: 87:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:87:17: 87:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:35: 88:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:53: 88:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:53: 88:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:54: 88:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:55: 88:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:54: 88:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:54: 88:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:35: 88:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:35: 88:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:30: 88:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:17: 88:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:88:17: 88:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:90:33: 90:60 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:90:21: 90:30 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:90:21: 90:30 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:90:42: 90:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:90:42: 90:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:90:54: 90:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:90:43: 90:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:90:55: 90:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:35: 92:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:53: 92:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:53: 92:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:54: 92:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:55: 92:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:54: 92:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:54: 92:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:35: 92:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:35: 92:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:30: 92:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:17: 92:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:92:17: 92:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:35: 93:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:53: 93:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:53: 93:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:54: 93:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:55: 93:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:54: 93:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:54: 93:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:35: 93:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:35: 93:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:30: 93:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:17: 93:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:93:17: 93:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:36: 94:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:54: 94:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:54: 94:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:55: 94:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:56: 94:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:55: 94:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:55: 94:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:36: 94:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:36: 94:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:30: 94:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:17: 94:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:94:17: 94:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:36: 95:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:54: 95:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:54: 95:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:55: 95:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:56: 95:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:55: 95:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:55: 95:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:36: 95:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:36: 95:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:30: 95:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:17: 95:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:95:17: 95:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:36: 96:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:54: 96:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:54: 96:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:55: 96:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:56: 96:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:55: 96:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:55: 96:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:36: 96:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:36: 96:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:30: 96:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:17: 96:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:96:17: 96:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:36: 97:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:54: 97:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:54: 97:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:55: 97:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:56: 97:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:55: 97:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:55: 97:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:36: 97:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:36: 97:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:30: 97:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:17: 97:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:97:17: 97:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:36: 98:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:54: 98:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:54: 98:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:55: 98:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:56: 98:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:55: 98:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:55: 98:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:36: 98:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:36: 98:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:30: 98:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:17: 98:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:98:17: 98:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:36: 99:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:54: 99:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:54: 99:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:55: 99:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:56: 99:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:55: 99:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:55: 99:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:36: 99:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:36: 99:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:30: 99:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:17: 99:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:99:17: 99:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:101:33: 101:61 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:101:21: 101:30 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:101:21: 101:30 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:101:42: 101:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:101:42: 101:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:101:54: 101:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:101:43: 101:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:101:55: 101:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:36: 103:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:54: 103:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:54: 103:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:55: 103:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:56: 103:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:55: 103:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:55: 103:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:36: 103:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:36: 103:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:30: 103:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:17: 103:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:103:17: 103:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:36: 104:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:54: 104:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:54: 104:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:55: 104:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:56: 104:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:55: 104:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:55: 104:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:36: 104:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:36: 104:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:30: 104:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:17: 104:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:104:17: 104:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:36: 105:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:54: 105:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:54: 105:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:55: 105:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:56: 105:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:55: 105:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:55: 105:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:36: 105:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:36: 105:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:30: 105:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:17: 105:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:105:17: 105:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:36: 106:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:54: 106:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:54: 106:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:55: 106:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:56: 106:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:55: 106:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:55: 106:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:36: 106:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:36: 106:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:30: 106:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:17: 106:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:106:17: 106:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:36: 107:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:54: 107:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:54: 107:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:55: 107:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:56: 107:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:55: 107:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:55: 107:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:36: 107:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:36: 107:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:30: 107:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:17: 107:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:107:17: 107:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:36: 108:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:54: 108:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:54: 108:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:55: 108:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:56: 108:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:55: 108:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:55: 108:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:36: 108:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:36: 108:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:30: 108:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:17: 108:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:108:17: 108:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:36: 109:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:54: 109:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:54: 109:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:55: 109:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:56: 109:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:55: 109:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:55: 109:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:36: 109:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:36: 109:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:30: 109:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:17: 109:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:109:17: 109:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:36: 110:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:54: 110:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:54: 110:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:55: 110:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:56: 110:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:55: 110:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:55: 110:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:36: 110:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:36: 110:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:30: 110:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:17: 110:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:110:17: 110:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:112:33: 112:61 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:112:21: 112:30 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:112:21: 112:30 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:112:42: 112:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:112:42: 112:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:112:54: 112:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:112:43: 112:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:112:55: 112:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:36: 114:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:54: 114:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:54: 114:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:55: 114:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:56: 114:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:55: 114:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:55: 114:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:36: 114:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:36: 114:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:30: 114:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:17: 114:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:114:17: 114:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:36: 115:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:54: 115:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:54: 115:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:55: 115:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:56: 115:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:55: 115:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:55: 115:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:36: 115:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:36: 115:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:30: 115:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:17: 115:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:115:17: 115:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:36: 116:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:54: 116:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:54: 116:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:55: 116:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:56: 116:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:55: 116:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:55: 116:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:36: 116:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:36: 116:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:30: 116:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:17: 116:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:116:17: 116:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:36: 117:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:54: 117:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:54: 117:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:55: 117:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:56: 117:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:55: 117:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:55: 117:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:36: 117:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:36: 117:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:30: 117:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:17: 117:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:117:17: 117:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:36: 118:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:54: 118:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:54: 118:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:55: 118:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:56: 118:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:55: 118:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:55: 118:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:36: 118:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:36: 118:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:30: 118:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:17: 118:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:118:17: 118:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:36: 119:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:54: 119:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:54: 119:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:55: 119:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:56: 119:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:55: 119:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:55: 119:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:36: 119:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:36: 119:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:30: 119:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:17: 119:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:119:17: 119:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:36: 120:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:54: 120:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:54: 120:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:55: 120:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:56: 120:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:55: 120:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:55: 120:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:36: 120:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:36: 120:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:30: 120:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:17: 120:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:120:17: 120:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:36: 121:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:54: 121:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:54: 121:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:55: 121:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:56: 121:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:55: 121:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:55: 121:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:36: 121:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:36: 121:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:30: 121:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:17: 121:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:121:17: 121:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:123:33: 123:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:123:33: 123:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:123:17: 123:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:124:32: 124:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:124:32: 124:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:124:17: 124:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:63:13: 125:14 (#523),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:63:13: 125:14 (#523),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:63:13: 125:14 (#523),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:63:13: 125:14 (#523),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:132:19: 132:34 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:132:13: 132:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:132:13: 132:16 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:132:19: 132:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:132:19: 132:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:132:19: 132:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:133:28: 133:45 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:133:13: 133:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:133:13: 133:25 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:133:28: 133:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:133:28: 133:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:133:42: 133:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:133:28: 133:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#525),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:137:15: 137:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#525),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:137:15: 137:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#525),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:137:29: 137:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:138:31: 138:69 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:138:17: 138:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:138:17: 138:28 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:138:37: 138:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:138:32: 138:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:138:38: 138:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:138:38: 138:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:138:51: 138:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:138:52: 138:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:138:51: 138:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:139:32: 139:77 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:139:17: 139:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:139:17: 139:29 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:139:43: 139:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:139:37: 139:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:139:44: 139:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:139:44: 139:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:139:58: 139:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:139:59: 139:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:139:58: 139:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:31: 141:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:49: 141:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:49: 141:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:50: 141:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:62: 141:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:50: 141:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:50: 141:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:49: 141:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:49: 141:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:31: 141:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:31: 141:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:26: 141:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:13: 141:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:141:13: 141:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:142:31: 143:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:18: 143:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:18: 143:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:19: 143:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:20: 143:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:20: 143:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:32: 143:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:20: 143:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:20: 143:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:20: 143:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:20: 143:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:42: 143:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:42: 143:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:54: 143:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:42: 143:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:42: 143:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:42: 143:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:143:42: 143:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:142:31: 143:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:142:31: 143:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:142:26: 142:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:142:13: 142:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:142:13: 142:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:144:31: 145:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:18: 145:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:18: 145:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:19: 145:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:20: 145:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:20: 145:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:32: 145:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:20: 145:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:20: 145:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:20: 145:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:20: 145:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:42: 145:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:42: 145:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:54: 145:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:42: 145:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:42: 145:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:42: 145:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:145:42: 145:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:144:31: 145:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:144:31: 145:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:144:26: 144:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:144:13: 144:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:144:13: 144:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:31: 146:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:49: 146:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:49: 146:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:50: 146:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:62: 146:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:50: 146:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:50: 146:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:31: 146:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:31: 146:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:26: 146:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:13: 146:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:146:13: 146:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:148:13: 148:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:149:13: 149:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#525),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#525),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#525),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:137:9: 150:10 (#525),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:152:9: 165:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:152:12: 152:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:152:12: 152:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:36: 153:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:54: 153:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:54: 153:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:55: 153:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:61: 153:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:55: 153:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:55: 153:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:54: 153:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:54: 153:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:36: 153:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:36: 153:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:20: 153:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:13: 153:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:153:13: 153:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:17: 156:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:35: 156:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:35: 156:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:36: 155:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:37: 155:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:37: 155:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:43: 155:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:37: 155:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:37: 155:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:37: 155:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:37: 155:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:64: 155:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:64: 155:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:70: 155:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:70: 155:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:70: 155:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:64: 155:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:64: 155:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:64: 155:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:64: 155:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:17: 156:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:155:17: 156:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:154:20: 154:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:154:20: 154:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:154:20: 154:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:154:13: 154:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:154:13: 154:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:17: 158:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:35: 158:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:35: 158:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:36: 158:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:37: 158:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:43: 158:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:43: 158:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:43: 158:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:37: 158:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:37: 158:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:36: 158:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:36: 158:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:17: 158:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:158:17: 158:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:157:20: 157:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:157:20: 157:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:157:20: 157:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:157:13: 157:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:157:13: 157:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:159:13: 159:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:160:19: 160:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:160:19: 160:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:36: 161:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:54: 161:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:54: 161:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:55: 161:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:61: 161:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:55: 161:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:55: 161:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:54: 161:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:54: 161:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:36: 161:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:36: 161:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:20: 161:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:13: 161:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:161:13: 161:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:17: 163:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:35: 163:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:35: 163:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:36: 163:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:37: 163:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:43: 163:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:37: 163:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:37: 163:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:36: 163:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:36: 163:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:17: 163:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:163:17: 163:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:162:20: 162:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:162:20: 162:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:162:20: 162:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:162:13: 162:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:162:13: 162:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:164:13: 164:30 (#0),
            scope: scope[0],
        },
    },
]