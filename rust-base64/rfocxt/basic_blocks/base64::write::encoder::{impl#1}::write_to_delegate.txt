[
    BasicBlockData {
        statements: [
            ((*_1).6: bool) = const true,
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut ((*_1).1: std::option::Option<W>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:181:19: 183:22 (#0),
                    scope: scope[0],
                },
                kind: _6 = std::option::Option::<W>::as_mut(move _7) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = const "Writer must be present",
            _8 = &(*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:181:19: 184:46 (#0),
                    scope: scope[0],
                },
                kind: _5 = std::option::Option::<&mut W>::expect(move _6, move _8) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_5),
            StorageDead(_8),
            StorageDead(_6),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).4: [u8; 1024]),
            StorageLive(_14),
            StorageLive(_15),
            _15 = _2,
            _14 = std::ops::RangeTo::<usize> { end: move _15 },
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:185:32: 185:54 (#0),
                    scope: scope[0],
                },
                kind: _12 = <[u8; 1024] as std::ops::Index<std::ops::RangeTo<usize>>>::index(move _13, move _14) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            _11 = &(*_12),
            _10 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:181:19: 185:55 (#0),
                    scope: scope[0],
                },
                kind: _3 = <W as std::io::Write>::write(move _4, move _10) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_5),
            ((*_1).6: bool) = const false,
            StorageLive(_16),
            _16 = move _3,
            StorageLive(_17),
            StorageLive(_18),
            _18 = &_2,
            StorageLive(_19),
            _19 = &mut _1,
            _17 = {closure@src/write/encoder.rs:188:17: 188:27} { current_output_len: move _18, self: move _19 },
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:188:9: 200:11 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::result::Result::<usize, std::io::Error>::map::<(), {closure@src/write/encoder.rs:188:17: 188:27}>(move _16, move _17) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:201:5: 201:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:201:6: 201:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:200:10: 200:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:201:5: 201:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:179:5: 201:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:179:67: 179:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut write::encoder::EncoderWriter<'{erased}, E/#1, W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:179:26: 179:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/write/encoder.rs:179:57: 179:62 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/write/encoder.rs:179:37: 179:55 (#0),
                            ),
                        ),
                        pat_span: src/write/encoder.rs:179:37: 179:55 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:179:37: 179:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/write/encoder.rs:181:19: 185:55 (#0),
                            ),
                        ),
                        pat_span: src/write/encoder.rs:181:13: 181:16 (#0),
                    },
                ),
            ),
        ),
        ty: std::result::Result<usize, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:181:13: 181:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:181:19: 184:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:181:19: 184:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:181:19: 183:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::option::Option<W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:181:19: 182:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:184:21: 184:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:184:21: 184:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:185:20: 185:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:185:20: 185:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:185:32: 185:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 1024_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:185:21: 185:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:185:33: 185:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:185:35: 185:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/write/encoder.rs:188:9: 200:11 (#0),
                },
            ),
        ),
        ty: std::result::Result<usize, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:188:9: 188:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/write/encoder.rs:188:9: 200:11 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:159 ~ base64[d406]::write::encoder::{impl#1}::write_to_delegate::{closure#0}),
            [
                '{erased},
                E/#1,
                W/#2,
                i32,
                Binder { value: extern "RustCall" fn((usize,)), bound_vars: [] },
                (&'{erased} usize, &'{erased} mut &'{erased} mut write::encoder::EncoderWriter<'{erased}, E/#1, W/#2>),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:188:17: 200:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/write/encoder.rs:188:9: 200:11 (#0),
                },
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:188:17: 200:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/write/encoder.rs:188:9: 200:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut &'{erased} mut write::encoder::EncoderWriter<'{erased}, E/#1, W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:188:17: 200:10 (#0),
            scope: scope[0],
        },
    },
]