[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).1: std::option::Option<W>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:143:12: 143:35 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::option::Option::<W>::is_none(move _4) -> [return: bb1, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:143:12: 143:35 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_6),
            _6 = (),
            _0 = std::result::Result::<(), std::io::Error>::Ok(move _6),
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:9: 149:40 (#0),
                    scope: scope[0],
                },
                kind: _9 = write::encoder::EncoderWriter::<'_, E, W>::write_all_encoded_output(move _10) -> [return: bb4, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:9: 149:41 (#381),
                    scope: scope[0],
                },
                kind: _8 = <std::result::Result<(), std::io::Error> as std::ops::Try>::branch(move _9) -> [return: bb5, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            _11 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:9: 149:41 (#381),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb8, 1: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:9: 149:41 (#381),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:40: 149:41 (#382),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = ((_8 as Continue).0: ()),
            _7 = _15,
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:41: 149:42 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb11, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>),
            StorageLive(_14),
            _14 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:9: 149:41 (#381),
                    scope: scope[2],
                },
                kind: _0 = <std::result::Result<(), std::io::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::io::Error>>>::from_residual(move _14) -> [return: bb10, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:40: 149:41 (#382),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb29, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = ((*_1).3: usize),
            _17 = Gt(move _18, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:151:12: 151:45 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _17) -> [0: bb25, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*((*_1).0: &E)),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &((*_1).2: [u8; 3]),
            StorageLive(_25),
            StorageLive(_26),
            _26 = ((*_1).3: usize),
            _25 = std::ops::RangeTo::<usize> { end: move _26 },
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:155:38: 155:71 (#0),
                    scope: scope[0],
                },
                kind: _23 = <[u8; 3] as std::ops::Index<std::ops::RangeTo<usize>>>::index(move _24, move _25) -> [return: bb13, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            _22 = &(*_23),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &mut ((*_1).4: [u8; 1024]),
            StorageLive(_31),
            _31 = std::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:156:37: 156:41 (#0),
                    scope: scope[0],
                },
                kind: _29 = <[u8; 1024] as std::ops::IndexMut<std::ops::RangeFull>>::index_mut(move _30, move _31) -> [return: bb14, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            _28 = &mut (*_29),
            _27 = &mut (*_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:152:31: 157:18 (#0),
                    scope: scope[0],
                },
                kind: _20 = <E as engine::Engine>::encode_slice::<&[u8]>(move _21, move _22, move _27) -> [return: bb15, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_22),
            StorageDead(_21),
            StorageLive(_32),
            StorageLive(_33),
            _33 = const "buffer is large enough",
            _32 = &(*_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:152:31: 158:50 (#0),
                    scope: scope[0],
                },
                kind: _19 = std::result::Result::<usize, encode::EncodeSliceError>::expect(move _20, move _32) -> [return: bb16, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_20),
            FakeRead(ForLet(None), _19),
            StorageDead(_33),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_23),
            StorageLive(_34),
            _34 = _19,
            ((*_1).5: usize) = move _34,
            StorageDead(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:13: 162:44 (#0),
                    scope: scope[5],
                },
                kind: _37 = write::encoder::EncoderWriter::<'_, E, W>::write_all_encoded_output(move _38) -> [return: bb17, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:13: 162:45 (#384),
                    scope: scope[5],
                },
                kind: _36 = <std::result::Result<(), std::io::Error> as std::ops::Try>::branch(move _37) -> [return: bb18, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            PlaceMention(_36),
            _39 = discriminant(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:13: 162:45 (#384),
                    scope: scope[5],
                },
                kind: switchInt(move _39) -> [0: bb21, 1: bb20, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:13: 162:45 (#384),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:44: 162:45 (#385),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = ((_36 as Continue).0: ()),
            _35 = _43,
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:45: 162:46 (#0),
                    scope: scope[5],
                },
                kind: drop(_36) -> [return: bb24, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>),
            StorageLive(_42),
            _42 = move _40,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:13: 162:45 (#384),
                    scope: scope[7],
                },
                kind: _0 = <std::result::Result<(), std::io::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::io::Error>>>::from_residual(move _42) -> [return: bb23, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:44: 162:45 (#385),
                    scope: scope[5],
                },
                kind: drop(_40) -> [return: bb27, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            ((*_1).3: usize) = const 0_usize,
            _16 = const (),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:151:9: 166:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            _16 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:151:9: 166:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_44),
            _44 = (),
            _0 = std::result::Result::<(), std::io::Error>::Ok(move _44),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:169:6: 169:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:45: 162:46 (#0),
                    scope: scope[5],
                },
                kind: drop(_36) -> [return: bb28, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:41: 149:42 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb30, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:169:6: 169:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:44: 162:45 (#384),
                    scope: scope[7],
                },
                kind: drop(_42) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:44: 162:45 (#385),
                    scope: scope[5],
                },
                kind: drop(_40) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:45: 162:46 (#0),
                    scope: scope[5],
                },
                kind: drop(_36) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:162:44: 162:45 (#384),
                    scope: scope[5],
                },
                kind: drop(_37) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:40: 149:41 (#381),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:40: 149:41 (#382),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:41: 149:42 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:149:40: 149:41 (#381),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:142:5: 169:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:142:44: 142:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut write::encoder::EncoderWriter<'{erased}, E/#1, W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:142:30: 142:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:143:9: 147:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:143:12: 143:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:143:12: 143:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:143:36: 147:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:146:23: 146:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:149:9: 149:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:149:9: 149:41 (#381),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:149:9: 149:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut write::encoder::EncoderWriter<'{erased}, E/#1, W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:149:9: 149:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:149:40: 149:41 (#382),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/write/encoder.rs:149:9: 149:41 (#381),
                            ),
                        ),
                        pat_span: src/write/encoder.rs:149:40: 149:41 (#382),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:149:40: 149:41 (#382),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:149:40: 149:41 (#382),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:149:40: 149:41 (#382),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/write/encoder.rs:149:9: 149:41 (#381),
                            ),
                        ),
                        pat_span: src/write/encoder.rs:149:9: 149:41 (#381),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:149:9: 149:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:151:9: 166:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:151:12: 151:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:151:12: 151:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/write/encoder.rs:152:31: 158:50 (#0),
                            ),
                        ),
                        pat_span: src/write/encoder.rs:152:17: 152:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:152:17: 152:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<usize, encode::EncodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:152:31: 157:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} E/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:152:31: 153:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:155:21: 155:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:155:38: 155:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:155:22: 155:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:155:39: 155:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:155:41: 155:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:156:21: 156:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:156:21: 156:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:156:37: 156:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8; 1024_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:156:26: 156:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:156:38: 156:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:158:25: 158:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:158:25: 158:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:160:40: 160:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:162:13: 162:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:162:13: 162:45 (#384),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:162:13: 162:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut write::encoder::EncoderWriter<'{erased}, E/#1, W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:162:13: 162:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:162:44: 162:45 (#385),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                src/write/encoder.rs:162:13: 162:45 (#384),
                            ),
                        ),
                        pat_span: src/write/encoder.rs:162:44: 162:45 (#385),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:162:44: 162:45 (#385),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:162:44: 162:45 (#385),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:162:44: 162:45 (#385),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _36,
                                ),
                                src/write/encoder.rs:162:13: 162:45 (#384),
                            ),
                        ),
                        pat_span: src/write/encoder.rs:162:13: 162:45 (#384),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:162:13: 162:45 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:168:12: 168:14 (#0),
            scope: scope[0],
        },
    },
]