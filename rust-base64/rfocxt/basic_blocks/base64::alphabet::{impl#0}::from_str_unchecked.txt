[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = [const 0_u8; 64],
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:64:28: 64:47 (#0),
                    scope: scope[1],
                },
                kind: _3 = core::str::<impl str>::as_bytes(move _4) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            _5 = const 0_usize,
            FakeRead(ForLet(None), _5),
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:68:9: 71:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:68:9: 71:10 (#0),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            _9 = _5,
            _8 = Lt(move _9, const alphabet::ALPHABET_SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:68:15: 68:36 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _8) -> [0: bb8, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _5,
            _12 = Len((*_3)),
            _13 = Lt(_11, _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:69:30: 69:49 (#0),
                    scope: scope[3],
                },
                kind: assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> [success: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = (*_3)[_11],
            StorageLive(_14),
            _14 = _5,
            _15 = Len(_2),
            _16 = Lt(_14, _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:69:13: 69:27 (#0),
                    scope: scope[3],
                },
                kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> [success: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2[_14] = move _10,
            StorageDead(_10),
            StorageDead(_14),
            StorageDead(_11),
            _17 = AddWithOverflow(_5, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:70:13: 70:23 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", _5, const 1_usize) -> [success: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_17.0: usize),
            _7 = const (),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:68:9: 71:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_19),
            _6 = const (),
            StorageDead(_19),
            StorageDead(_8),
            StorageDead(_6),
            StorageLive(_21),
            _21 = _2,
            _0 = alphabet::Alphabet { symbols: move _21 },
            StorageDead(_21),
            StorageDead(_5),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:74:6: 74:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:62:5: 74:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alphabet::Alphabet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:62:52: 62:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/alphabet.rs:62:43: 62:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/alphabet.rs:62:33: 62:41 (#0),
                            ),
                        ),
                        pat_span: src/alphabet.rs:62:33: 62:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:62:33: 62:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/alphabet.rs:63:27: 63:48 (#0),
                            ),
                        ),
                        pat_span: src/alphabet.rs:63:13: 63:24 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 64_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:63:13: 63:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/alphabet.rs:64:28: 64:47 (#0),
                            ),
                        ),
                        pat_span: src/alphabet.rs:64:13: 64:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:64:13: 64:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:64:28: 64:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/alphabet.rs:67:25: 67:26 (#0),
                            ),
                        ),
                        pat_span: src/alphabet.rs:67:13: 67:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:67:13: 67:22 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:68:9: 71:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:62:5: 74:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/alphabet.rs:68:9: 71:10 (#538),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:68:15: 68:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/alphabet.rs:68:9: 71:10 (#538),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:68:15: 68:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:69:30: 69:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:69:43: 69:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:69:30: 69:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:69:30: 69:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:69:21: 69:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:69:13: 69:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:69:13: 69:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:70:13: 70:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/alphabet.rs:68:9: 71:10 (#538),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:68:9: 71:10 (#538),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:68:9: 71:10 (#538),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:68:9: 71:10 (#538),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [u8; 64_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:73:16: 73:23 (#0),
            scope: scope[0],
        },
    },
]