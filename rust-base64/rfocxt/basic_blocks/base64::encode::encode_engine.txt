[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*_2),
            StorageLive(_4),
            _4 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:29:5: 29:25 (#0),
                    scope: scope[0],
                },
                kind: _0 = <E as engine::Engine>::encode::<T>(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:30:1: 30:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:30:2: 30:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:29:24: 29:25 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:30:1: 30:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:28:1: 30:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:28:74: 28:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/encode.rs:28:56: 28:57 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:28:49: 28:54 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:28:49: 28:54 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:28:49: 28:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/encode.rs:28:67: 28:69 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:28:59: 28:65 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:28:59: 28:65 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} E/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:28:59: 28:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/encode.rs:29:5: 29:25 (#0),
                },
            ),
        ),
        ty: &'{erased} E/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:29:5: 29:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/encode.rs:29:5: 29:25 (#0),
                },
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:29:19: 29:24 (#0),
            scope: scope[0],
        },
    },
]