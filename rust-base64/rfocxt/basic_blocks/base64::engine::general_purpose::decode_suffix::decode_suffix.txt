[
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            _9 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#156),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb6, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:20:20: 20:31 (#0),
                    scope: scope[0],
                },
                kind: _13 = core::slice::<impl [u8]>::len(move _14) -> [return: bb2, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            _15 = _2,
            _16 = SubWithOverflow(_13, _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:20:19: 20:46 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_16.1: bool), "attempt to compute `{} - {}`, which would overflow", move _13, move _15) -> [success: bb3, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_16.0: usize),
            StorageDead(_15),
            StorageDead(_13),
            _11 = Le(move _12, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:20:19: 20:51 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _10 = const (),
            StorageDead(_11),
            StorageDead(_10),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#155),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#157),
                    scope: scope[0],
                },
                kind: _17 = core::panicking::panic(const "assertion failed: (input.len() - input_index) <= 4") -> bb126,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#155),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_18),
            _18 = const 0_usize,
            FakeRead(ForLet(None), _18),
            StorageLive(_19),
            _19 = const 0_usize,
            FakeRead(ForLet(None), _19),
            StorageLive(_20),
            _20 = const 0_usize,
            FakeRead(ForLet(None), _20),
            AscribeUserType(_20, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_21),
            _21 = const 0_u8,
            FakeRead(ForLet(None), _21),
            StorageLive(_22),
            _22 = [const 0_u8; 4],
            FakeRead(ForLet(None), _22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &(*_1),
            StorageLive(_30),
            StorageLive(_31),
            _31 = _2,
            _30 = std::ops::RangeFrom::<usize> { start: move _31 },
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:38: 31:53 (#0),
                    scope: scope[5],
                },
                kind: _28 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _29, move _30) -> [return: bb8, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = &(*_28),
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:60 (#0),
                    scope: scope[5],
                },
                kind: _26 = core::slice::<impl [u8]>::iter(move _27) -> [return: bb9, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#0),
                    scope: scope[5],
                },
                kind: _25 = <std::slice::Iter<'_, u8> as std::iter::Iterator>::enumerate(move _26) -> [return: bb10, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
                    scope: scope[5],
                },
                kind: _24 = <std::iter::Enumerate<std::slice::Iter<'_, u8>> as std::iter::IntoIterator>::into_iter(move _25) -> [return: bb11, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            StorageLive(_32),
            _32 = move _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:5: 86:6 (#499),
                    scope: scope[6],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:5: 86:6 (#499),
                    scope: scope[6],
                },
                kind: falseUnwind -> [real: bb13, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut _32,
            _36 = &mut (*_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
                    scope: scope[6],
                },
                kind: _35 = <std::iter::Enumerate<std::slice::Iter<'_, u8>> as std::iter::Iterator>::next(move _36) -> [return: bb14, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            PlaceMention(_35),
            _38 = discriminant(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
                    scope: scope[6],
                },
                kind: switchInt(move _38) -> [0: bb16, 1: bb17, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:5: 86:6 (#499),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = (((_35 as Some).0: (usize, &u8)).0: usize),
            StorageLive(_41),
            _41 = (*(((_35 as Some).0: (usize, &u8)).1: &u8)),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = _41,
            _43 = Eq(move _44, const PAD_BYTE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:33:12: 33:25 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _43) -> [0: bb39, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = const (),
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_28),
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_105),
            StorageLive(_106),
            StorageLive(_107),
            _107 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:90:9: 90:25 (#0),
                    scope: scope[5],
                },
                kind: _106 = core::slice::<impl [u8]>::is_empty(move _107) -> [return: bb51, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            _48 = _40,
            _47 = Lt(move _48, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:46:16: 46:34 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _47) -> [0: bb34, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageLive(_50),
            StorageLive(_51),
            _51 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#160),
                    scope: scope[7],
                },
                kind: switchInt(move _51) -> [0: bb30, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = _40,
            _53 = Eq(move _54, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:51:21: 51:40 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _53) -> [0: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#161),
                    scope: scope[7],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = _40,
            _55 = Eq(move _56, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:51:45: 51:64 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _55) -> [0: bb27, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = _19,
            _57 = Eq(move _58, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:51:68: 51:92 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _57) -> [0: bb26, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#161),
                    scope: scope[7],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#161),
                    scope: scope[7],
                },
                kind: _59 = core::panicking::panic(const "assertion failed: leftover_index == 0 || (leftover_index == 1 && padding_bytes_count == 0)") -> bb126,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = const (),
            StorageDead(_57),
            StorageDead(_55),
            StorageDead(_53),
            StorageDead(_52),
            _50 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#159),
                    scope: scope[7],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _50 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#159),
                    scope: scope[7],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
            StorageLive(_60),
            StorageLive(_61),
            _61 = _2,
            StorageLive(_62),
            _62 = _40,
            _63 = AddWithOverflow(_61, _62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:53:41: 53:69 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_63.1: bool), "attempt to compute `{} + {}`, which would overflow", move _61, move _62) -> [success: bb32, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _60 = move (_63.0: usize),
            StorageDead(_62),
            StorageDead(_61),
            FakeRead(ForLet(None), _60),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            _66 = _60,
            StorageLive(_67),
            _67 = _41,
            _65 = decode::DecodeError::InvalidByte(move _66, move _67),
            StorageDead(_67),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:54:28: 54:81 (#0),
                    scope: scope[8],
                },
                kind: _64 = <decode::DecodeError as std::convert::Into<decode::DecodeSliceError>>::into(move _65) -> [return: bb33, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            _0 = std::result::Result::<engine::DecodeMetadata, decode::DecodeSliceError>::Err(move _64),
            StorageDead(_64),
            StorageDead(_60),
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_43),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb123,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            _46 = const (),
            StorageDead(_47),
            StorageDead(_46),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = _19,
            _69 = Eq(move _70, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:57:16: 57:40 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _69) -> [0: bb36, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageLive(_71),
            _71 = _40,
            _20 = move _71,
            StorageDead(_71),
            _68 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:57:13: 59:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            _68 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:57:13: 59:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageDead(_68),
            _72 = AddWithOverflow(_19, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:61:13: 61:37 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_72.1: bool), "attempt to compute `{} + {}`, which would overflow", _19, const 1_usize) -> [success: bb38, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = move (_72.0: usize),
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            _42 = const (),
            StorageDead(_43),
            StorageDead(_42),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            _75 = _19,
            _74 = Gt(move _75, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:69:12: 69:35 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _74) -> [0: bb41, otherwise: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            _80 = _2,
            StorageLive(_81),
            _81 = _20,
            _82 = AddWithOverflow(_80, _81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:71:42: 71:76 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_82.1: bool), "attempt to compute `{} + {}`, which would overflow", move _80, move _81) -> [success: bb42, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            _73 = const (),
            StorageDead(_74),
            StorageDead(_73),
            StorageLive(_83),
            _83 = _41,
            _21 = move _83,
            StorageDead(_83),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            _86 = _41,
            _85 = move _86 as usize (IntToInt),
            StorageDead(_86),
            _87 = Len((*_5)),
            _88 = Lt(_85, _87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:79:22: 79:46 (#0),
                    scope: scope[7],
                },
                kind: assert(move _88, "index out of bounds: the length is {} but the index is {}", move _87, _85) -> [success: bb44, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _79 = move (_82.0: usize),
            StorageDead(_81),
            StorageDead(_80),
            _78 = decode::DecodeError::InvalidByte(move _79, const PAD_BYTE),
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:71:17: 71:94 (#0),
                    scope: scope[7],
                },
                kind: _77 = <decode::DecodeError as std::convert::Into<decode::DecodeSliceError>>::into(move _78) -> [return: bb43, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            _0 = std::result::Result::<engine::DecodeMetadata, decode::DecodeSliceError>::Err(move _77),
            StorageDead(_77),
            StorageDead(_74),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb123,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _84 = (*_5)[_85],
            FakeRead(ForLet(None), _84),
            StorageDead(_85),
            StorageLive(_89),
            StorageLive(_90),
            StorageLive(_91),
            _91 = _84,
            _90 = Eq(move _91, const engine::general_purpose::INVALID_VALUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:80:12: 80:35 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _90) -> [0: bb48, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = _2,
            StorageLive(_97),
            _97 = _40,
            _98 = AddWithOverflow(_96, _97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:81:49: 81:77 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_98.1: bool), "attempt to compute `{} + {}`, which would overflow", move _96, move _97) -> [success: bb46, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _95 = move (_98.0: usize),
            StorageDead(_97),
            StorageDead(_96),
            StorageLive(_99),
            _99 = _41,
            _94 = decode::DecodeError::InvalidByte(move _95, move _99),
            StorageDead(_99),
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:81:24: 81:88 (#0),
                    scope: scope[9],
                },
                kind: _93 = <decode::DecodeError as std::convert::Into<decode::DecodeSliceError>>::into(move _94) -> [return: bb47, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            _0 = std::result::Result::<engine::DecodeMetadata, decode::DecodeSliceError>::Err(move _93),
            StorageDead(_93),
            StorageDead(_90),
            StorageDead(_89),
            StorageDead(_84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb123,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            _89 = const (),
            StorageDead(_90),
            StorageDead(_89),
            StorageLive(_100),
            _100 = _84,
            StorageLive(_101),
            _101 = _18,
            _102 = Len(_22),
            _103 = Lt(_101, _102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:84:9: 84:37 (#0),
                    scope: scope[9],
                },
                kind: assert(move _103, "index out of bounds: the length is {} but the index is {}", move _102, _101) -> [success: bb49, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22[_101] = move _100,
            StorageDead(_100),
            StorageDead(_101),
            _104 = AddWithOverflow(_18, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:85:9: 85:33 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_104.1: bool), "attempt to compute `{} + {}`, which would overflow", _18, const 1_usize) -> [success: bb50, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = move (_104.0: usize),
            _34 = const (),
            StorageDead(_84),
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_34),
            _33 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:31:5: 86:6 (#499),
                    scope: scope[6],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:90:9: 90:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _106) -> [0: bb53, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:90:53: 92:6 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_107),
            StorageLive(_108),
            StorageLive(_109),
            _109 = _18,
            _108 = Lt(move _109, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:90:29: 90:52 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _108) -> [0: bb57, otherwise: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            _114 = _2,
            StorageLive(_115),
            _115 = _18,
            _116 = AddWithOverflow(_114, _115),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:91:47: 91:80 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_116.1: bool), "attempt to compute `{} + {}`, which would overflow", move _114, move _115) -> [success: bb55, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _113 = move (_116.0: usize),
            StorageDead(_115),
            StorageDead(_114),
            _112 = decode::DecodeError::InvalidLength(move _113),
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:91:20: 91:88 (#0),
                    scope: scope[5],
                },
                kind: _111 = <decode::DecodeError as std::convert::Into<decode::DecodeSliceError>>::into(move _112) -> [return: bb56, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            _0 = std::result::Result::<engine::DecodeMetadata, decode::DecodeSliceError>::Err(move _111),
            StorageDead(_111),
            StorageDead(_108),
            StorageDead(_106),
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb124,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _105 = const (),
            StorageDead(_108),
            StorageDead(_106),
            StorageDead(_105),
            StorageLive(_117),
            PlaceMention(_7),
            _118 = discriminant(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:94:5: 94:23 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _118) -> [0: bb60, 1: bb61, 2: bb62, otherwise: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:94:11: 94:23 (#0),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:95:9: 95:39 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb63, imaginary: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:96:9: 96:44 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb64, imaginary: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_129),
            StorageLive(_130),
            _130 = _19,
            _129 = Gt(move _130, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:103:16: 103:39 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _129) -> [0: bb72, otherwise: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _117 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:95:43: 95:97 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_119),
            StorageLive(_120),
            StorageLive(_121),
            StorageLive(_122),
            _122 = _19,
            StorageLive(_123),
            _123 = _18,
            _124 = AddWithOverflow(_122, _123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:98:16: 98:59 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_124.1: bool), "attempt to compute `{} + {}`, which would overflow", move _122, move _123) -> [success: bb65, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _121 = move (_124.0: usize),
            StorageDead(_123),
            StorageDead(_122),
            _125 = Eq(const 4_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:98:16: 98:63 (#0),
                    scope: scope[5],
                },
                kind: assert(!move _125, "attempt to calculate the remainder of `{}` with a divisor of zero", _121) -> [success: bb66, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _120 = Rem(move _121, const 4_usize),
            StorageDead(_121),
            _119 = Ne(move _120, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:98:16: 98:68 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _119) -> [0: bb69, otherwise: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            StorageLive(_127),
            StorageLive(_128),
            _128 = decode::DecodeError::InvalidPadding,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:99:28: 99:62 (#0),
                    scope: scope[5],
                },
                kind: _127 = <decode::DecodeError as std::convert::Into<decode::DecodeSliceError>>::into(move _128) -> [return: bb68, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            _0 = std::result::Result::<engine::DecodeMetadata, decode::DecodeSliceError>::Err(move _127),
            StorageDead(_127),
            StorageDead(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb122,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            _117 = const (),
            StorageDead(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:100:13: 100:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
            StorageLive(_132),
            StorageLive(_133),
            _133 = decode::DecodeError::InvalidPadding,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:106:28: 106:62 (#0),
                    scope: scope[5],
                },
                kind: _132 = <decode::DecodeError as std::convert::Into<decode::DecodeSliceError>>::into(move _133) -> [return: bb71, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
            _0 = std::result::Result::<engine::DecodeMetadata, decode::DecodeSliceError>::Err(move _132),
            StorageDead(_132),
            StorageDead(_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb122,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
            _117 = const (),
            StorageDead(_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:107:13: 107:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
            StorageLive(_134),
            StorageLive(_135),
            StorageLive(_136),
            _136 = _18,
            _137 = MulWithOverflow(_136, const 6_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:123:36: 123:59 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_137.1: bool), "attempt to compute `{} * {}`, which would overflow", move _136, const 6_usize) -> [success: bb74, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _135 = move (_137.0: usize),
            StorageDead(_136),
            _138 = Eq(const 8_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:123:36: 123:63 (#0),
                    scope: scope[5],
                },
                kind: assert(!move _138, "attempt to divide `{}` by zero", _135) -> [success: bb75, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _134 = Div(move _135, const 8_usize),
            StorageDead(_135),
            FakeRead(ForLet(None), _134),
            StorageLive(_139),
            StorageLive(_140),
            StorageLive(_141),
            StorageLive(_142),
            StorageLive(_143),
            StorageLive(_144),
            StorageLive(_145),
            _145 = const 0_usize,
            _146 = Len(_22),
            _147 = Lt(_145, _146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:126:39: 126:49 (#0),
                    scope: scope[10],
                },
                kind: assert(move _147, "index out of bounds: the length is {} but the index is {}", move _146, _145) -> [success: bb76, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _144 = _22[_145],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:126:29: 126:50 (#0),
                    scope: scope[10],
                },
                kind: _143 = <u32 as std::convert::From<u8>>::from(move _144) -> [return: bb77, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
            _148 = const 26_i32 as u32 (IntToInt),
            _149 = Lt(move _148, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:126:28: 126:57 (#0),
                    scope: scope[10],
                },
                kind: assert(move _149, "attempt to shift left by `{}`, which would overflow", const 26_i32) -> [success: bb78, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _142 = Shl(move _143, const 26_i32),
            StorageDead(_143),
            StorageLive(_150),
            StorageLive(_151),
            StorageLive(_152),
            StorageLive(_153),
            _153 = const 1_usize,
            _154 = Len(_22),
            _155 = Lt(_153, _154),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:127:22: 127:32 (#0),
                    scope: scope[10],
                },
                kind: assert(move _155, "index out of bounds: the length is {} but the index is {}", move _154, _153) -> [success: bb79, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _152 = _22[_153],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:127:12: 127:33 (#0),
                    scope: scope[10],
                },
                kind: _151 = <u32 as std::convert::From<u8>>::from(move _152) -> [return: bb80, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_152),
            _156 = const 20_i32 as u32 (IntToInt),
            _157 = Lt(move _156, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:127:11: 127:40 (#0),
                    scope: scope[10],
                },
                kind: assert(move _157, "attempt to shift left by `{}`, which would overflow", const 20_i32) -> [success: bb81, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _150 = Shl(move _151, const 20_i32),
            StorageDead(_151),
            _141 = BitOr(move _142, move _150),
            StorageDead(_150),
            StorageDead(_142),
            StorageLive(_158),
            StorageLive(_159),
            StorageLive(_160),
            StorageLive(_161),
            _161 = const 2_usize,
            _162 = Len(_22),
            _163 = Lt(_161, _162),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:128:22: 128:32 (#0),
                    scope: scope[10],
                },
                kind: assert(move _163, "index out of bounds: the length is {} but the index is {}", move _162, _161) -> [success: bb82, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _160 = _22[_161],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:128:12: 128:33 (#0),
                    scope: scope[10],
                },
                kind: _159 = <u32 as std::convert::From<u8>>::from(move _160) -> [return: bb83, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_160),
            _164 = const 14_i32 as u32 (IntToInt),
            _165 = Lt(move _164, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:128:11: 128:40 (#0),
                    scope: scope[10],
                },
                kind: assert(move _165, "attempt to shift left by `{}`, which would overflow", const 14_i32) -> [success: bb84, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _158 = Shl(move _159, const 14_i32),
            StorageDead(_159),
            _140 = BitOr(move _141, move _158),
            StorageDead(_158),
            StorageDead(_141),
            StorageLive(_166),
            StorageLive(_167),
            StorageLive(_168),
            StorageLive(_169),
            _169 = const 3_usize,
            _170 = Len(_22),
            _171 = Lt(_169, _170),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:129:22: 129:32 (#0),
                    scope: scope[10],
                },
                kind: assert(move _171, "index out of bounds: the length is {} but the index is {}", move _170, _169) -> [success: bb85, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _168 = _22[_169],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:129:12: 129:33 (#0),
                    scope: scope[10],
                },
                kind: _167 = <u32 as std::convert::From<u8>>::from(move _168) -> [return: bb86, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_168),
            _172 = const 8_i32 as u32 (IntToInt),
            _173 = Lt(move _172, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:129:11: 129:39 (#0),
                    scope: scope[10],
                },
                kind: assert(move _173, "attempt to shift left by `{}`, which would overflow", const 8_i32) -> [success: bb87, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _166 = Shl(move _167, const 8_i32),
            StorageDead(_167),
            _139 = BitOr(move _140, move _166),
            StorageDead(_166),
            StorageDead(_140),
            FakeRead(ForLet(None), _139),
            StorageDead(_169),
            StorageDead(_161),
            StorageDead(_153),
            StorageDead(_145),
            StorageLive(_174),
            StorageLive(_175),
            _175 = Not(const 0_u32),
            StorageLive(_176),
            StorageLive(_177),
            _177 = _134,
            _178 = MulWithOverflow(_177, const 8_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:133:26: 133:56 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_178.1: bool), "attempt to compute `{} * {}`, which would overflow", move _177, const 8_usize) -> [success: bb88, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _176 = move (_178.0: usize),
            StorageDead(_177),
            _179 = Lt(_176, const 32_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:133:16: 133:56 (#0),
                    scope: scope[11],
                },
                kind: assert(move _179, "attempt to shift right by `{}`, which would overflow", _176) -> [success: bb89, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _174 = Shr(move _175, move _176),
            StorageDead(_176),
            StorageDead(_175),
            FakeRead(ForLet(None), _174),
            StorageLive(_180),
            StorageLive(_181),
            _181 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:134:9: 134:35 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _181) -> [0: bb90, otherwise: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_182),
            StorageLive(_183),
            StorageLive(_184),
            _184 = _139,
            StorageLive(_185),
            _185 = _174,
            _183 = BitAnd(move _184, move _185),
            StorageDead(_185),
            StorageDead(_184),
            _182 = Ne(move _183, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:134:39: 134:65 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _182) -> [0: bb95, otherwise: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_183),
            StorageLive(_187),
            StorageLive(_188),
            StorageLive(_189),
            StorageLive(_190),
            StorageLive(_191),
            _191 = _2,
            StorageLive(_192),
            _192 = _18,
            _193 = AddWithOverflow(_191, _192),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:137:13: 137:46 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_193.1: bool), "attempt to compute `{} + {}`, which would overflow", move _191, move _192) -> [success: bb92, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _190 = move (_193.0: usize),
            StorageDead(_192),
            StorageDead(_191),
            _194 = SubWithOverflow(_190, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:137:13: 137:50 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_194.1: bool), "attempt to compute `{} - {}`, which would overflow", move _190, const 1_usize) -> [success: bb93, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _189 = move (_194.0: usize),
            StorageDead(_190),
            StorageLive(_195),
            _195 = _21,
            _188 = decode::DecodeError::InvalidLastSymbol(move _189, move _195),
            StorageDead(_195),
            StorageDead(_189),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:136:20: 140:16 (#0),
                    scope: scope[12],
                },
                kind: _187 = <decode::DecodeError as std::convert::Into<decode::DecodeSliceError>>::into(move _188) -> [return: bb94, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_188),
            _0 = std::result::Result::<engine::DecodeMetadata, decode::DecodeSliceError>::Err(move _187),
            StorageDead(_187),
            StorageDead(_182),
            StorageDead(_181),
            StorageDead(_180),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_183),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb96,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _180 = const (),
            StorageDead(_182),
            StorageDead(_181),
            StorageDead(_180),
            StorageLive(_196),
            StorageLive(_197),
            StorageLive(_198),
            StorageLive(_199),
            _199 = _134,
            _198 = std::ops::Range::<usize> { start: const 0_usize, end: move _199 },
            StorageDead(_199),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
                    scope: scope[12],
                },
                kind: _197 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _198) -> [return: bb97, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_198),
            PlaceMention(_197),
            StorageLive(_200),
            _200 = move _197,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:145:5: 152:6 (#516),
                    scope: scope[13],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:145:5: 152:6 (#516),
                    scope: scope[13],
                },
                kind: falseUnwind -> [real: bb99, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_201),
            StorageLive(_202),
            StorageLive(_203),
            StorageLive(_204),
            _204 = &mut _200,
            _203 = &mut (*_204),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
                    scope: scope[13],
                },
                kind: _202 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _203) -> [return: bb100, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_203),
            PlaceMention(_202),
            _205 = discriminant(_202),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
                    scope: scope[13],
                },
                kind: switchInt(move _205) -> [0: bb102, 1: bb103, otherwise: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _202),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
                    scope: scope[13],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:145:5: 152:6 (#516),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb104, imaginary: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_207),
            StorageLive(_208),
            StorageLive(_209),
            _209 = _139,
            _210 = const 24_i32 as u32 (IntToInt),
            _211 = Lt(move _210, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:146:23: 146:43 (#0),
                    scope: scope[13],
                },
                kind: assert(move _211, "attempt to shift right by `{}`, which would overflow", const 24_i32) -> [success: bb105, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _196 = const (),
            StorageDead(_204),
            StorageDead(_202),
            StorageDead(_201),
            StorageDead(_200),
            StorageDead(_197),
            StorageDead(_196),
            StorageLive(_228),
            StorageLive(_229),
            _229 = _4,
            StorageLive(_230),
            StorageLive(_231),
            StorageLive(_232),
            _232 = _19,
            _231 = Gt(move _232, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:156:12: 156:35 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _231) -> [0: bb117, otherwise: bb116],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _208 = Shr(move _209, const 24_i32),
            StorageDead(_209),
            _207 = move _208 as u8 (IntToInt),
            StorageDead(_208),
            FakeRead(ForLet(None), _207),
            _212 = const 8_i32 as u32 (IntToInt),
            _213 = Lt(move _212, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:147:9: 147:27 (#0),
                    scope: scope[14],
                },
                kind: assert(move _213, "attempt to shift left by `{}`, which would overflow", const 8_i32) -> [success: bb106, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _139 = Shl(_139, const 8_i32),
            StorageLive(_214),
            _214 = _207,
            StorageLive(_215),
            StorageLive(_216),
            StorageLive(_217),
            StorageLive(_218),
            StorageLive(_219),
            _219 = &mut (*_3),
            StorageLive(_220),
            _220 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:148:10: 149:35 (#0),
                    scope: scope[14],
                },
                kind: _218 = core::slice::<impl [u8]>::get_mut::<usize>(move _219, move _220) -> [return: bb107, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_220),
            StorageDead(_219),
            StorageLive(_221),
            _221 = decode::DecodeSliceError::OutputSliceTooSmall,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:148:10: 150:58 (#0),
                    scope: scope[14],
                },
                kind: _217 = std::option::Option::<&mut u8>::ok_or::<decode::DecodeSliceError>(move _218, move _221) -> [return: bb108, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_221),
            StorageDead(_218),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:148:10: 150:59 (#519),
                    scope: scope[14],
                },
                kind: _216 = <std::result::Result<&mut u8, decode::DecodeSliceError> as std::ops::Try>::branch(move _217) -> [return: bb109, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_217),
            PlaceMention(_216),
            _222 = discriminant(_216),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:148:10: 150:59 (#519),
                    scope: scope[14],
                },
                kind: switchInt(move _222) -> [0: bb112, 1: bb111, otherwise: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _216),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:148:10: 150:59 (#519),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:150:58: 150:59 (#520),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb113, imaginary: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_226),
            _226 = move ((_216 as Continue).0: &mut u8),
            _215 = move _226,
            StorageDead(_226),
            (*_215) = move _214,
            StorageDead(_214),
            StorageDead(_216),
            StorageDead(_215),
            _227 = AddWithOverflow(_4, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:151:9: 151:26 (#0),
                    scope: scope[14],
                },
                kind: assert(!move (_227.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 1_usize) -> [success: bb115, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_223),
            _223 = move ((_216 as Break).0: std::result::Result<std::convert::Infallible, decode::DecodeSliceError>),
            StorageLive(_225),
            _225 = move _223,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:148:10: 150:59 (#519),
                    scope: scope[16],
                },
                kind: _0 = <std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, decode::DecodeSliceError>>>::from_residual(move _225) -> [return: bb114, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_225),
            StorageDead(_223),
            StorageDead(_214),
            StorageDead(_216),
            StorageDead(_215),
            StorageDead(_207),
            StorageDead(_204),
            StorageDead(_202),
            StorageDead(_201),
            StorageDead(_200),
            StorageDead(_197),
            StorageDead(_196),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move (_227.0: usize),
            _201 = const (),
            StorageDead(_207),
            StorageDead(_204),
            StorageDead(_202),
            StorageDead(_201),
            _33 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:145:5: 152:6 (#516),
                    scope: scope[13],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_232),
            StorageLive(_233),
            StorageLive(_234),
            _234 = _2,
            StorageLive(_235),
            _235 = _20,
            _236 = AddWithOverflow(_234, _235),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:157:18: 157:52 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_236.1: bool), "attempt to compute `{} + {}`, which would overflow", move _234, move _235) -> [success: bb118, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_232),
            _230 = std::option::Option::<usize>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:156:9: 160:10 (#0),
                    scope: scope[12],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _233 = move (_236.0: usize),
            StorageDead(_235),
            StorageDead(_234),
            _230 = std::option::Option::<usize>::Some(move _233),
            StorageDead(_233),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:156:9: 160:10 (#0),
                    scope: scope[12],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_231),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:154:8: 161:6 (#0),
                    scope: scope[12],
                },
                kind: _228 = engine::DecodeMetadata::new(move _229, move _230) -> [return: bb120, unwind: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_230),
            StorageDead(_229),
            _0 = std::result::Result::<engine::DecodeMetadata, decode::DecodeSliceError>::Ok(move _228),
            StorageDead(_228),
            StorageDead(_174),
            StorageDead(_139),
            StorageDead(_134),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:162:2: 162:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb125,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_174),
            StorageDead(_139),
            StorageDead(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb124,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb124,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_28),
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb124,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:162:2: 162:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb125,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:162:2: 162:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode_suffix.rs:11:1: 162:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<engine::DecodeMetadata, decode::DecodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:19:6: 19:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode_suffix.rs:12:12: 12:17 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:12:5: 12:10 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:12:5: 12:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:12:5: 12:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode_suffix.rs:13:18: 13:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:13:5: 13:16 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:13:5: 13:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:13:5: 13:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode_suffix.rs:14:13: 14:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:14:5: 14:11 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:14:5: 14:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:14:5: 14:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode_suffix.rs:15:23: 15:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:15:5: 15:21 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:15:5: 15:21 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:15:5: 15:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode_suffix.rs:16:19: 16:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:16:5: 16:17 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:16:5: 16:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:16:5: 16:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode_suffix.rs:17:33: 17:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:17:5: 17:31 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:17:5: 17:31 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:17:5: 17:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode_suffix.rs:18:19: 18:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:18:5: 18:17 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:18:5: 18:17 (#0),
                    },
                ),
            ),
        ),
        ty: engine::DecodePaddingMode,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:18:5: 18:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#155),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#156),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#157),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:20:19: 20:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:20:19: 20:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:20:20: 20:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:20:20: 20:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:20:34: 20:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:20:19: 20:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#157),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#157),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:24:35: 24:36 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:24:9: 24:32 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:24:9: 24:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:25:35: 25:36 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:25:9: 25:32 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:25:9: 25:32 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:27:43: 27:44 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:27:9: 27:33 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/engine/general_purpose/decode_suffix.rs:27:35: 27:40 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:27:9: 27:33 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:28:27: 28:31 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:28:9: 28:24 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:28:9: 28:24 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:29:23: 29:32 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:29:9: 29:20 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:29:9: 29:20 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:5: 86:6 (#499),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<std::slice::Iter<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::iter::Enumerate<std::slice::Iter<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:38: 31:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:39: 31:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:39: 31:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
                    },
                ),
            ),
        ),
        ty: std::iter::Enumerate<std::slice::Iter<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:11:1: 162:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<(usize, &'{erased} u8)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::slice::Iter<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::iter::Enumerate<std::slice::Iter<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:5: 86:6 (#499),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:5: 86:6 (#499),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _35,
                                ),
                                src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:31:9: 31:29 (#501),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:10: 31:24 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _35,
                                ),
                                src/engine/general_purpose/decode_suffix.rs:31:33: 31:72 (#500),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:31:9: 31:29 (#501),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:31:27: 31:28 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:33:9: 63:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:33:12: 33:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:33:12: 33:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:33:26: 63:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:46:13: 55:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:46:16: 46:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:46:16: 46:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:46:35: 55:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#160),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#161),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:51:21: 51:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:51:21: 51:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:51:45: 51:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:51:45: 51:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:51:68: 51:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:51:68: 51:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#161),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#161),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:53:41: 53:69 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:53:21: 53:38 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:53:21: 53:38 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:53:41: 53:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:53:55: 53:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:53:41: 53:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:54:28: 54:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:54:28: 54:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:54:53: 54:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:54:72: 54:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:57:13: 59:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:57:16: 57:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:57:16: 57:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:58:40: 58:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:61:13: 61:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:69:9: 73:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:69:12: 69:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:69:12: 69:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:69:36: 73:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:71:17: 71:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:71:17: 71:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:71:42: 71:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:71:42: 71:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:71:56: 71:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:71:42: 71:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:75:23: 75:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:79:22: 79:46 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:79:13: 79:19 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:79:13: 79:19 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:79:35: 79:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:79:35: 79:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:79:22: 79:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:79:22: 79:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:80:9: 82:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:80:12: 80:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:80:12: 80:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:80:36: 82:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:81:24: 81:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:81:24: 81:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:81:49: 81:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:81:49: 81:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:81:63: 81:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:81:49: 81:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:81:79: 81:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:84:40: 84:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:84:17: 84:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:84:9: 84:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:84:9: 84:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:85:9: 85:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:90:5: 92:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:90:9: 90:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:90:9: 90:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:90:29: 90:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:90:29: 90:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:90:53: 92:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:91:20: 91:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:91:20: 91:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:91:47: 91:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:91:47: 91:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:91:61: 91:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:91:47: 91:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:94:5: 109:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:95:9: 95:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode_suffix.rs:98:13: 100:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:98:16: 98:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode_suffix.rs:98:13: 100:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:98:16: 98:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode_suffix.rs:98:13: 100:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:98:16: 98:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode_suffix.rs:98:13: 100:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:98:17: 98:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode_suffix.rs:98:13: 100:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:98:39: 98:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:98:16: 98:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:98:16: 98:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode_suffix.rs:98:13: 100:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:98:69: 100:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:99:28: 99:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:99:28: 99:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode_suffix.rs:103:13: 107:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:103:16: 103:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode_suffix.rs:103:13: 107:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:103:16: 103:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/engine/general_purpose/decode_suffix.rs:103:13: 107:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:103:40: 107:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:106:28: 106:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:106:28: 106:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:123:36: 123:63 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:123:9: 123:33 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:123:9: 123:33 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:123:36: 123:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:123:36: 123:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:123:36: 123:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:123:36: 123:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:126:28: 129:39 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:126:9: 126:25 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:9: 126:25 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:28: 128:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:28: 127:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:28: 126:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:29: 126:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:39: 126:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:47: 126:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:39: 126:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:39: 126:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:28: 126:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:126:28: 126:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:127:11: 127:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:127:12: 127:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:127:22: 127:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:127:30: 127:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:127:22: 127:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:127:22: 127:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:127:11: 127:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:127:11: 127:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:128:11: 128:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:128:12: 128:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:128:22: 128:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:128:30: 128:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:128:22: 128:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:128:22: 128:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:128:11: 128:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:128:11: 128:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:129:11: 129:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:129:12: 129:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:129:22: 129:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:129:30: 129:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:129:22: 129:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:129:22: 129:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:129:11: 129:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:129:11: 129:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:133:16: 133:56 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:133:9: 133:13 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:133:9: 133:13 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:133:16: 133:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:133:26: 133:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:133:27: 133:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:133:26: 133:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:133:16: 133:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:134:5: 141:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:134:9: 134:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:134:39: 134:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:134:39: 134:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:134:40: 134:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:134:55: 134:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:134:66: 141:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:136:20: 140:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:136:20: 139:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:137:13: 137:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:137:13: 137:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:137:13: 137:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:137:27: 137:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:137:13: 137:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:137:13: 137:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:138:13: 138:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:5: 152:6 (#516),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:17: 145:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _197,
                                ),
                                src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
                    },
                ),
            ),
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:14: 145:41 (#517),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:5: 152:6 (#516),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:145:5: 152:6 (#516),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode_suffix.rs:146:23: 146:49 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:146:13: 146:20 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:146:13: 146:20 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:146:23: 146:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:146:24: 146:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:146:23: 146:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:146:23: 146:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:147:9: 147:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:147:9: 147:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:150:62: 150:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:148:10: 150:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, decode::DecodeSliceError>, &'{erased} mut u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:148:10: 150:59 (#519),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<&'{erased} mut u8, decode::DecodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:148:10: 150:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:148:10: 149:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:148:10: 148:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:149:22: 149:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: decode::DecodeSliceError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:150:20: 150:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:150:58: 150:59 (#520),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _216,
                                ),
                                src/engine/general_purpose/decode_suffix.rs:148:10: 150:59 (#519),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:150:58: 150:59 (#520),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:150:58: 150:59 (#520),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:150:58: 150:59 (#520),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, decode::DecodeSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:150:58: 150:59 (#520),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _216,
                                ),
                                src/engine/general_purpose/decode_suffix.rs:148:10: 150:59 (#519),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode_suffix.rs:148:10: 150:59 (#519),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:148:10: 150:59 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:151:9: 151:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: engine::DecodeMetadata,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:154:8: 161:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode_suffix.rs:154:5: 161:7 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:155:9: 155:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode_suffix.rs:154:5: 161:7 (#0),
                },
            ),
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:156:9: 160:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode_suffix.rs:154:5: 161:7 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:156:12: 156:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode_suffix.rs:154:5: 161:7 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:156:12: 156:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:157:18: 157:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode_suffix.rs:157:13: 157:53 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:157:18: 157:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/decode_suffix.rs:157:13: 157:53 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:157:32: 157:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode_suffix.rs:157:18: 157:52 (#0),
            scope: scope[0],
        },
    },
]