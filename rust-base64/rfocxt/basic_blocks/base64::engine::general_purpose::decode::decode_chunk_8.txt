[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = const 0_usize,
            _9 = Len((*_1)),
            _10 = Lt(_8, _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:180:43: 180:51 (#0),
                    scope: scope[0],
                },
                kind: assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb1, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = (*_1)[_8],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:180:31: 180:52 (#0),
                    scope: scope[0],
                },
                kind: _6 = <usize as std::convert::From<u8>>::from(move _7) -> [return: bb2, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _11 = Len((*_3)),
            _12 = Lt(_6, _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:180:18: 180:53 (#0),
                    scope: scope[0],
                },
                kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _6) -> [success: bb3, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = (*_3)[_6],
            FakeRead(ForLet(None), _5),
            StorageDead(_8),
            StorageDead(_6),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = _5,
            _14 = Eq(move _15, const engine::general_purpose::INVALID_VALUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:181:8: 181:31 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _14) -> [0: bb6, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _2,
            StorageLive(_19),
            StorageLive(_20),
            _20 = const 0_usize,
            _21 = Len((*_1)),
            _22 = Lt(_20, _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:182:70: 182:78 (#0),
                    scope: scope[1],
                },
                kind: assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb5, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = (*_1)[_20],
            _17 = decode::DecodeError::InvalidByte(move _18, move _19),
            StorageDead(_19),
            StorageDead(_18),
            _0 = std::result::Result::<(), decode::DecodeError>::Err(move _17),
            StorageDead(_17),
            StorageDead(_20),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = const (),
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:184:21: 184:38 (#0),
                    scope: scope[1],
                },
                kind: _24 = <u64 as std::convert::From<u8>>::from(move _25) -> [return: bb7, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _26 = const 58_i32 as u32 (IntToInt),
            _27 = Lt(move _26, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:184:21: 184:44 (#0),
                    scope: scope[1],
                },
                kind: assert(move _27, "attempt to shift left by `{}`, which would overflow", const 58_i32) -> [success: bb8, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = Shl(move _24, const 58_i32),
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = const 1_usize,
            _32 = Len((*_1)),
            _33 = Lt(_31, _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:186:43: 186:51 (#0),
                    scope: scope[2],
                },
                kind: assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> [success: bb9, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = (*_1)[_31],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:186:31: 186:52 (#0),
                    scope: scope[2],
                },
                kind: _29 = <usize as std::convert::From<u8>>::from(move _30) -> [return: bb10, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            _34 = Len((*_3)),
            _35 = Lt(_29, _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:186:18: 186:53 (#0),
                    scope: scope[2],
                },
                kind: assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _29) -> [success: bb11, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _28 = (*_3)[_29],
            FakeRead(ForLet(None), _28),
            StorageDead(_31),
            StorageDead(_29),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _28,
            _37 = Eq(move _38, const engine::general_purpose::INVALID_VALUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:187:8: 187:31 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _37) -> [0: bb15, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = _2,
            _43 = AddWithOverflow(_42, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:189:13: 189:40 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_43.1: bool), "attempt to compute `{} + {}`, which would overflow", move _42, const 1_usize) -> [success: bb13, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = move (_43.0: usize),
            StorageDead(_42),
            StorageLive(_44),
            StorageLive(_45),
            _45 = const 1_usize,
            _46 = Len((*_1)),
            _47 = Lt(_45, _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:190:13: 190:21 (#0),
                    scope: scope[3],
                },
                kind: assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _45) -> [success: bb14, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _44 = (*_1)[_45],
            _40 = decode::DecodeError::InvalidByte(move _41, move _44),
            StorageDead(_44),
            StorageDead(_41),
            _0 = std::result::Result::<(), decode::DecodeError>::Err(move _40),
            StorageDead(_40),
            StorageDead(_45),
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            _36 = const (),
            StorageDead(_37),
            StorageDead(_36),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:193:14: 193:31 (#0),
                    scope: scope[3],
                },
                kind: _49 = <u64 as std::convert::From<u8>>::from(move _50) -> [return: bb16, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            _51 = const 52_i32 as u32 (IntToInt),
            _52 = Lt(move _51, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:193:14: 193:37 (#0),
                    scope: scope[3],
                },
                kind: assert(move _52, "attempt to shift left by `{}`, which would overflow", const 52_i32) -> [success: bb17, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = Shl(move _49, const 52_i32),
            StorageDead(_49),
            _23 = BitOr(_23, move _48),
            StorageDead(_48),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = const 2_usize,
            _57 = Len((*_1)),
            _58 = Lt(_56, _57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:195:43: 195:51 (#0),
                    scope: scope[3],
                },
                kind: assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _56) -> [success: bb18, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _55 = (*_1)[_56],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:195:31: 195:52 (#0),
                    scope: scope[3],
                },
                kind: _54 = <usize as std::convert::From<u8>>::from(move _55) -> [return: bb19, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            _59 = Len((*_3)),
            _60 = Lt(_54, _59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:195:18: 195:53 (#0),
                    scope: scope[3],
                },
                kind: assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _54) -> [success: bb20, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _53 = (*_3)[_54],
            FakeRead(ForLet(None), _53),
            StorageDead(_56),
            StorageDead(_54),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = _53,
            _62 = Eq(move _63, const engine::general_purpose::INVALID_VALUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:196:8: 196:31 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _62) -> [0: bb24, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = _2,
            _68 = AddWithOverflow(_67, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:198:13: 198:40 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_68.1: bool), "attempt to compute `{} + {}`, which would overflow", move _67, const 2_usize) -> [success: bb22, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _66 = move (_68.0: usize),
            StorageDead(_67),
            StorageLive(_69),
            StorageLive(_70),
            _70 = const 2_usize,
            _71 = Len((*_1)),
            _72 = Lt(_70, _71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:199:13: 199:21 (#0),
                    scope: scope[4],
                },
                kind: assert(move _72, "index out of bounds: the length is {} but the index is {}", move _71, _70) -> [success: bb23, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _69 = (*_1)[_70],
            _65 = decode::DecodeError::InvalidByte(move _66, move _69),
            StorageDead(_69),
            StorageDead(_66),
            _0 = std::result::Result::<(), decode::DecodeError>::Err(move _65),
            StorageDead(_65),
            StorageDead(_70),
            StorageDead(_62),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            _61 = const (),
            StorageDead(_62),
            StorageDead(_61),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            _75 = _53,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:202:14: 202:31 (#0),
                    scope: scope[4],
                },
                kind: _74 = <u64 as std::convert::From<u8>>::from(move _75) -> [return: bb25, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            _76 = const 46_i32 as u32 (IntToInt),
            _77 = Lt(move _76, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:202:14: 202:37 (#0),
                    scope: scope[4],
                },
                kind: assert(move _77, "attempt to shift left by `{}`, which would overflow", const 46_i32) -> [success: bb26, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _73 = Shl(move _74, const 46_i32),
            StorageDead(_74),
            _23 = BitOr(_23, move _73),
            StorageDead(_73),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            _81 = const 3_usize,
            _82 = Len((*_1)),
            _83 = Lt(_81, _82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:204:43: 204:51 (#0),
                    scope: scope[4],
                },
                kind: assert(move _83, "index out of bounds: the length is {} but the index is {}", move _82, _81) -> [success: bb27, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _80 = (*_1)[_81],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:204:31: 204:52 (#0),
                    scope: scope[4],
                },
                kind: _79 = <usize as std::convert::From<u8>>::from(move _80) -> [return: bb28, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            _84 = Len((*_3)),
            _85 = Lt(_79, _84),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:204:18: 204:53 (#0),
                    scope: scope[4],
                },
                kind: assert(move _85, "index out of bounds: the length is {} but the index is {}", move _84, _79) -> [success: bb29, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _78 = (*_3)[_79],
            FakeRead(ForLet(None), _78),
            StorageDead(_81),
            StorageDead(_79),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = _78,
            _87 = Eq(move _88, const engine::general_purpose::INVALID_VALUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:205:8: 205:31 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _87) -> [0: bb33, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageLive(_90),
            StorageLive(_91),
            StorageLive(_92),
            _92 = _2,
            _93 = AddWithOverflow(_92, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:207:13: 207:40 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_93.1: bool), "attempt to compute `{} + {}`, which would overflow", move _92, const 3_usize) -> [success: bb31, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _91 = move (_93.0: usize),
            StorageDead(_92),
            StorageLive(_94),
            StorageLive(_95),
            _95 = const 3_usize,
            _96 = Len((*_1)),
            _97 = Lt(_95, _96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:208:13: 208:21 (#0),
                    scope: scope[5],
                },
                kind: assert(move _97, "index out of bounds: the length is {} but the index is {}", move _96, _95) -> [success: bb32, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _94 = (*_1)[_95],
            _90 = decode::DecodeError::InvalidByte(move _91, move _94),
            StorageDead(_94),
            StorageDead(_91),
            _0 = std::result::Result::<(), decode::DecodeError>::Err(move _90),
            StorageDead(_90),
            StorageDead(_95),
            StorageDead(_87),
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            _86 = const (),
            StorageDead(_87),
            StorageDead(_86),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = _78,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:211:14: 211:31 (#0),
                    scope: scope[5],
                },
                kind: _99 = <u64 as std::convert::From<u8>>::from(move _100) -> [return: bb34, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            _101 = const 40_i32 as u32 (IntToInt),
            _102 = Lt(move _101, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:211:14: 211:37 (#0),
                    scope: scope[5],
                },
                kind: assert(move _102, "attempt to shift left by `{}`, which would overflow", const 40_i32) -> [success: bb35, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _98 = Shl(move _99, const 40_i32),
            StorageDead(_99),
            _23 = BitOr(_23, move _98),
            StorageDead(_98),
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = const 4_usize,
            _107 = Len((*_1)),
            _108 = Lt(_106, _107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:213:43: 213:51 (#0),
                    scope: scope[5],
                },
                kind: assert(move _108, "index out of bounds: the length is {} but the index is {}", move _107, _106) -> [success: bb36, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _105 = (*_1)[_106],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:213:31: 213:52 (#0),
                    scope: scope[5],
                },
                kind: _104 = <usize as std::convert::From<u8>>::from(move _105) -> [return: bb37, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            _109 = Len((*_3)),
            _110 = Lt(_104, _109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:213:18: 213:53 (#0),
                    scope: scope[5],
                },
                kind: assert(move _110, "index out of bounds: the length is {} but the index is {}", move _109, _104) -> [success: bb38, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _103 = (*_3)[_104],
            FakeRead(ForLet(None), _103),
            StorageDead(_106),
            StorageDead(_104),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            _113 = _103,
            _112 = Eq(move _113, const engine::general_purpose::INVALID_VALUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:214:8: 214:31 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _112) -> [0: bb42, otherwise: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            StorageLive(_115),
            StorageLive(_116),
            StorageLive(_117),
            _117 = _2,
            _118 = AddWithOverflow(_117, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:216:13: 216:40 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_118.1: bool), "attempt to compute `{} + {}`, which would overflow", move _117, const 4_usize) -> [success: bb40, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _116 = move (_118.0: usize),
            StorageDead(_117),
            StorageLive(_119),
            StorageLive(_120),
            _120 = const 4_usize,
            _121 = Len((*_1)),
            _122 = Lt(_120, _121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:217:13: 217:21 (#0),
                    scope: scope[6],
                },
                kind: assert(move _122, "index out of bounds: the length is {} but the index is {}", move _121, _120) -> [success: bb41, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _119 = (*_1)[_120],
            _115 = decode::DecodeError::InvalidByte(move _116, move _119),
            StorageDead(_119),
            StorageDead(_116),
            _0 = std::result::Result::<(), decode::DecodeError>::Err(move _115),
            StorageDead(_115),
            StorageDead(_120),
            StorageDead(_112),
            StorageDead(_111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            _111 = const (),
            StorageDead(_112),
            StorageDead(_111),
            StorageLive(_123),
            StorageLive(_124),
            StorageLive(_125),
            _125 = _103,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:220:14: 220:31 (#0),
                    scope: scope[6],
                },
                kind: _124 = <u64 as std::convert::From<u8>>::from(move _125) -> [return: bb43, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            _126 = const 34_i32 as u32 (IntToInt),
            _127 = Lt(move _126, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:220:14: 220:37 (#0),
                    scope: scope[6],
                },
                kind: assert(move _127, "attempt to shift left by `{}`, which would overflow", const 34_i32) -> [success: bb44, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _123 = Shl(move _124, const 34_i32),
            StorageDead(_124),
            _23 = BitOr(_23, move _123),
            StorageDead(_123),
            StorageLive(_128),
            StorageLive(_129),
            StorageLive(_130),
            StorageLive(_131),
            _131 = const 5_usize,
            _132 = Len((*_1)),
            _133 = Lt(_131, _132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:222:43: 222:51 (#0),
                    scope: scope[6],
                },
                kind: assert(move _133, "index out of bounds: the length is {} but the index is {}", move _132, _131) -> [success: bb45, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _130 = (*_1)[_131],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:222:31: 222:52 (#0),
                    scope: scope[6],
                },
                kind: _129 = <usize as std::convert::From<u8>>::from(move _130) -> [return: bb46, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_130),
            _134 = Len((*_3)),
            _135 = Lt(_129, _134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:222:18: 222:53 (#0),
                    scope: scope[6],
                },
                kind: assert(move _135, "index out of bounds: the length is {} but the index is {}", move _134, _129) -> [success: bb47, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _128 = (*_3)[_129],
            FakeRead(ForLet(None), _128),
            StorageDead(_131),
            StorageDead(_129),
            StorageLive(_136),
            StorageLive(_137),
            StorageLive(_138),
            _138 = _128,
            _137 = Eq(move _138, const engine::general_purpose::INVALID_VALUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:223:8: 223:31 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _137) -> [0: bb51, otherwise: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
            StorageLive(_140),
            StorageLive(_141),
            StorageLive(_142),
            _142 = _2,
            _143 = AddWithOverflow(_142, const 5_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:225:13: 225:40 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_143.1: bool), "attempt to compute `{} + {}`, which would overflow", move _142, const 5_usize) -> [success: bb49, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _141 = move (_143.0: usize),
            StorageDead(_142),
            StorageLive(_144),
            StorageLive(_145),
            _145 = const 5_usize,
            _146 = Len((*_1)),
            _147 = Lt(_145, _146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:226:13: 226:21 (#0),
                    scope: scope[7],
                },
                kind: assert(move _147, "index out of bounds: the length is {} but the index is {}", move _146, _145) -> [success: bb50, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _144 = (*_1)[_145],
            _140 = decode::DecodeError::InvalidByte(move _141, move _144),
            StorageDead(_144),
            StorageDead(_141),
            _0 = std::result::Result::<(), decode::DecodeError>::Err(move _140),
            StorageDead(_140),
            StorageDead(_145),
            StorageDead(_137),
            StorageDead(_136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
            _136 = const (),
            StorageDead(_137),
            StorageDead(_136),
            StorageLive(_148),
            StorageLive(_149),
            StorageLive(_150),
            _150 = _128,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:229:14: 229:31 (#0),
                    scope: scope[7],
                },
                kind: _149 = <u64 as std::convert::From<u8>>::from(move _150) -> [return: bb52, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
            _151 = const 28_i32 as u32 (IntToInt),
            _152 = Lt(move _151, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:229:14: 229:37 (#0),
                    scope: scope[7],
                },
                kind: assert(move _152, "attempt to shift left by `{}`, which would overflow", const 28_i32) -> [success: bb53, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _148 = Shl(move _149, const 28_i32),
            StorageDead(_149),
            _23 = BitOr(_23, move _148),
            StorageDead(_148),
            StorageLive(_153),
            StorageLive(_154),
            StorageLive(_155),
            StorageLive(_156),
            _156 = const 6_usize,
            _157 = Len((*_1)),
            _158 = Lt(_156, _157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:231:43: 231:51 (#0),
                    scope: scope[7],
                },
                kind: assert(move _158, "index out of bounds: the length is {} but the index is {}", move _157, _156) -> [success: bb54, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _155 = (*_1)[_156],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:231:31: 231:52 (#0),
                    scope: scope[7],
                },
                kind: _154 = <usize as std::convert::From<u8>>::from(move _155) -> [return: bb55, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_155),
            _159 = Len((*_3)),
            _160 = Lt(_154, _159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:231:18: 231:53 (#0),
                    scope: scope[7],
                },
                kind: assert(move _160, "index out of bounds: the length is {} but the index is {}", move _159, _154) -> [success: bb56, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _153 = (*_3)[_154],
            FakeRead(ForLet(None), _153),
            StorageDead(_156),
            StorageDead(_154),
            StorageLive(_161),
            StorageLive(_162),
            StorageLive(_163),
            _163 = _153,
            _162 = Eq(move _163, const engine::general_purpose::INVALID_VALUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:232:8: 232:31 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _162) -> [0: bb60, otherwise: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_163),
            StorageLive(_165),
            StorageLive(_166),
            StorageLive(_167),
            _167 = _2,
            _168 = AddWithOverflow(_167, const 6_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:234:13: 234:40 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_168.1: bool), "attempt to compute `{} + {}`, which would overflow", move _167, const 6_usize) -> [success: bb58, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _166 = move (_168.0: usize),
            StorageDead(_167),
            StorageLive(_169),
            StorageLive(_170),
            _170 = const 6_usize,
            _171 = Len((*_1)),
            _172 = Lt(_170, _171),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:235:13: 235:21 (#0),
                    scope: scope[8],
                },
                kind: assert(move _172, "index out of bounds: the length is {} but the index is {}", move _171, _170) -> [success: bb59, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _169 = (*_1)[_170],
            _165 = decode::DecodeError::InvalidByte(move _166, move _169),
            StorageDead(_169),
            StorageDead(_166),
            _0 = std::result::Result::<(), decode::DecodeError>::Err(move _165),
            StorageDead(_165),
            StorageDead(_170),
            StorageDead(_162),
            StorageDead(_161),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_163),
            _161 = const (),
            StorageDead(_162),
            StorageDead(_161),
            StorageLive(_173),
            StorageLive(_174),
            StorageLive(_175),
            _175 = _153,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:238:14: 238:31 (#0),
                    scope: scope[8],
                },
                kind: _174 = <u64 as std::convert::From<u8>>::from(move _175) -> [return: bb61, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_175),
            _176 = const 22_i32 as u32 (IntToInt),
            _177 = Lt(move _176, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:238:14: 238:37 (#0),
                    scope: scope[8],
                },
                kind: assert(move _177, "attempt to shift left by `{}`, which would overflow", const 22_i32) -> [success: bb62, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _173 = Shl(move _174, const 22_i32),
            StorageDead(_174),
            _23 = BitOr(_23, move _173),
            StorageDead(_173),
            StorageLive(_178),
            StorageLive(_179),
            StorageLive(_180),
            StorageLive(_181),
            _181 = const 7_usize,
            _182 = Len((*_1)),
            _183 = Lt(_181, _182),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:240:43: 240:51 (#0),
                    scope: scope[8],
                },
                kind: assert(move _183, "index out of bounds: the length is {} but the index is {}", move _182, _181) -> [success: bb63, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _180 = (*_1)[_181],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:240:31: 240:52 (#0),
                    scope: scope[8],
                },
                kind: _179 = <usize as std::convert::From<u8>>::from(move _180) -> [return: bb64, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_180),
            _184 = Len((*_3)),
            _185 = Lt(_179, _184),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:240:18: 240:53 (#0),
                    scope: scope[8],
                },
                kind: assert(move _185, "index out of bounds: the length is {} but the index is {}", move _184, _179) -> [success: bb65, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _178 = (*_3)[_179],
            FakeRead(ForLet(None), _178),
            StorageDead(_181),
            StorageDead(_179),
            StorageLive(_186),
            StorageLive(_187),
            StorageLive(_188),
            _188 = _178,
            _187 = Eq(move _188, const engine::general_purpose::INVALID_VALUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:241:8: 241:31 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _187) -> [0: bb69, otherwise: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_188),
            StorageLive(_190),
            StorageLive(_191),
            StorageLive(_192),
            _192 = _2,
            _193 = AddWithOverflow(_192, const 7_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:243:13: 243:40 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_193.1: bool), "attempt to compute `{} + {}`, which would overflow", move _192, const 7_usize) -> [success: bb67, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _191 = move (_193.0: usize),
            StorageDead(_192),
            StorageLive(_194),
            StorageLive(_195),
            _195 = const 7_usize,
            _196 = Len((*_1)),
            _197 = Lt(_195, _196),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:244:13: 244:21 (#0),
                    scope: scope[9],
                },
                kind: assert(move _197, "index out of bounds: the length is {} but the index is {}", move _196, _195) -> [success: bb68, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _194 = (*_1)[_195],
            _190 = decode::DecodeError::InvalidByte(move _191, move _194),
            StorageDead(_194),
            StorageDead(_191),
            _0 = std::result::Result::<(), decode::DecodeError>::Err(move _190),
            StorageDead(_190),
            StorageDead(_195),
            StorageDead(_187),
            StorageDead(_186),
            StorageDead(_178),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_188),
            _186 = const (),
            StorageDead(_187),
            StorageDead(_186),
            StorageLive(_198),
            StorageLive(_199),
            StorageLive(_200),
            _200 = _178,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:247:14: 247:31 (#0),
                    scope: scope[9],
                },
                kind: _199 = <u64 as std::convert::From<u8>>::from(move _200) -> [return: bb70, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_200),
            _201 = const 16_i32 as u32 (IntToInt),
            _202 = Lt(move _201, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:247:14: 247:37 (#0),
                    scope: scope[9],
                },
                kind: assert(move _202, "attempt to shift left by `{}`, which would overflow", const 16_i32) -> [success: bb71, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _198 = Shl(move _199, const 16_i32),
            StorageDead(_199),
            _23 = BitOr(_23, move _198),
            StorageDead(_198),
            StorageLive(_203),
            StorageLive(_204),
            StorageLive(_205),
            StorageLive(_206),
            _206 = &mut (*_4),
            StorageLive(_207),
            _207 = std::ops::RangeTo::<usize> { end: const 6_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:249:11: 249:16 (#0),
                    scope: scope[9],
                },
                kind: _205 = <[u8] as std::ops::IndexMut<std::ops::RangeTo<usize>>>::index_mut(move _206, move _207) -> [return: bb72, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _204 = &mut (*_205),
            StorageDead(_207),
            StorageDead(_206),
            StorageLive(_208),
            StorageLive(_209),
            StorageLive(_210),
            StorageLive(_211),
            StorageLive(_212),
            StorageLive(_213),
            _213 = _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:249:34: 249:53 (#0),
                    scope: scope[9],
                },
                kind: _212 = core::num::<impl u64>::to_be_bytes(move _213) -> [return: bb73, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _211 = &_212,
            StorageDead(_213),
            StorageLive(_214),
            _214 = std::ops::RangeTo::<usize> { end: const 6_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:249:53: 249:58 (#0),
                    scope: scope[9],
                },
                kind: _210 = <[u8; 8] as std::ops::Index<std::ops::RangeTo<usize>>>::index(move _211, move _214) -> [return: bb74, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_214),
            StorageDead(_211),
            _209 = &(*_210),
            _208 = &(*_209),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:249:5: 249:59 (#0),
                    scope: scope[9],
                },
                kind: _203 = core::slice::<impl [u8]>::copy_from_slice(move _204, move _208) -> [return: bb75, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_208),
            StorageDead(_204),
            StorageDead(_212),
            StorageDead(_210),
            StorageDead(_209),
            StorageDead(_205),
            StorageDead(_203),
            StorageLive(_215),
            _215 = (),
            _0 = std::result::Result::<(), decode::DecodeError>::Ok(move _215),
            StorageDead(_215),
            StorageDead(_178),
            StorageDead(_153),
            StorageDead(_128),
            StorageDead(_103),
            StorageDead(_78),
            StorageDead(_53),
            StorageDead(_28),
            StorageDead(_23),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:252:2: 252:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:252:2: 252:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:252:2: 252:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/decode.rs:174:1: 252:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:179:6: 179:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:175:12: 175:17 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:175:5: 175:10 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:175:5: 175:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:175:5: 175:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:176:30: 176:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:176:5: 176:28 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:176:5: 176:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:176:5: 176:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:177:19: 177:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:177:5: 177:17 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:177:5: 177:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:177:5: 177:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/decode.rs:178:13: 178:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:178:5: 178:11 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:178:5: 178:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:178:5: 178:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:180:18: 180:53 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:180:9: 180:15 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:180:9: 180:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:180:31: 180:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:180:43: 180:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:180:49: 180:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:180:43: 180:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:180:43: 180:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:180:18: 180:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:180:18: 180:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:181:5: 183:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:181:8: 181:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:181:8: 181:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:181:32: 183:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:182:20: 182:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:182:45: 182:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:182:70: 182:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:182:76: 182:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:182:70: 182:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:182:70: 182:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:184:21: 184:44 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:184:9: 184:18 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:184:9: 184:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:184:21: 184:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:184:31: 184:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:184:21: 184:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:184:21: 184:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:186:18: 186:53 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:186:9: 186:15 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:186:9: 186:15 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:186:31: 186:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:186:43: 186:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:186:49: 186:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:186:43: 186:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:186:43: 186:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:186:18: 186:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:186:18: 186:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:187:5: 192:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:187:8: 187:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:187:8: 187:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:187:32: 192:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:188:20: 191:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:189:13: 189:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:189:13: 189:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:189:13: 189:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:190:13: 190:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:190:19: 190:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:190:13: 190:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:190:13: 190:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:193:14: 193:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:193:14: 193:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:193:24: 193:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:193:14: 193:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:193:14: 193:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:195:18: 195:53 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:195:9: 195:15 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:195:9: 195:15 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:195:31: 195:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:195:43: 195:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:195:49: 195:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:195:43: 195:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:195:43: 195:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:195:18: 195:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:195:18: 195:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:196:5: 201:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:196:8: 196:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:196:8: 196:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:196:32: 201:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:197:20: 200:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:198:13: 198:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:198:13: 198:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:198:13: 198:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:199:13: 199:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:199:19: 199:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:199:13: 199:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:199:13: 199:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:202:14: 202:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:202:14: 202:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:202:24: 202:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:202:14: 202:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:202:14: 202:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:204:18: 204:53 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:204:9: 204:15 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:204:9: 204:15 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:204:31: 204:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:204:43: 204:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:204:49: 204:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:204:43: 204:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:204:43: 204:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:204:18: 204:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:204:18: 204:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:205:5: 210:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:205:8: 205:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:205:8: 205:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:205:32: 210:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:206:20: 209:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:207:13: 207:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:207:13: 207:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:207:13: 207:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:208:13: 208:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:208:19: 208:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:208:13: 208:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:208:13: 208:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:211:14: 211:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:211:14: 211:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:211:24: 211:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:211:14: 211:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:211:14: 211:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:213:18: 213:53 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:213:9: 213:15 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:213:9: 213:15 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:213:31: 213:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:213:43: 213:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:213:49: 213:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:213:43: 213:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:213:43: 213:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:213:18: 213:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:213:18: 213:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:214:5: 219:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:214:8: 214:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:214:8: 214:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:214:32: 219:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:215:20: 218:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:216:13: 216:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:216:13: 216:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:216:13: 216:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:217:13: 217:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:217:19: 217:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:217:13: 217:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:217:13: 217:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:220:14: 220:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:220:14: 220:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:220:24: 220:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:220:14: 220:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:220:14: 220:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:222:18: 222:53 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:222:9: 222:15 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:222:9: 222:15 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:222:31: 222:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:222:43: 222:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:222:49: 222:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:222:43: 222:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:222:43: 222:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:222:18: 222:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:222:18: 222:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:223:5: 228:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:223:8: 223:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:223:8: 223:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:223:32: 228:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:224:20: 227:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:225:13: 225:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:225:13: 225:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:225:13: 225:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:226:13: 226:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:226:19: 226:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:226:13: 226:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:226:13: 226:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:229:14: 229:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:229:14: 229:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:229:24: 229:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:229:14: 229:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:229:14: 229:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:231:18: 231:53 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:231:9: 231:15 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:231:9: 231:15 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:231:31: 231:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:231:43: 231:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:231:49: 231:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:231:43: 231:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:231:43: 231:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:231:18: 231:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:231:18: 231:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:232:5: 237:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:232:8: 232:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:232:8: 232:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:232:32: 237:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:233:20: 236:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:234:13: 234:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:234:13: 234:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:234:13: 234:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:235:13: 235:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:235:19: 235:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:235:13: 235:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:235:13: 235:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:238:14: 238:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:238:14: 238:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:238:24: 238:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:238:14: 238:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:238:14: 238:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/decode.rs:240:18: 240:53 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/decode.rs:240:9: 240:15 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:240:9: 240:15 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:240:31: 240:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:240:43: 240:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:240:49: 240:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:240:43: 240:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:240:43: 240:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:240:18: 240:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:240:18: 240:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:241:5: 246:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:241:8: 241:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:241:8: 241:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:241:32: 246:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: decode::DecodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:242:20: 245:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:243:13: 243:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:243:13: 243:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:243:13: 243:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:244:13: 244:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:244:19: 244:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:244:13: 244:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:244:13: 244:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:247:14: 247:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:247:14: 247:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:247:24: 247:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:247:14: 247:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:247:14: 247:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:5: 249:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:5: 249:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:11: 249:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:5: 249:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:12: 249:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:33: 249:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:33: 249:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:53: 249:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:34: 249:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:34: 249:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:34: 249:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:249:54: 249:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/decode.rs:251:8: 251:10 (#0),
            scope: scope[0],
        },
    },
]