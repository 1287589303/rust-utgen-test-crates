[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*((*_1).0: &mut std::string::String)),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:67:30: 67:47 (#0),
                    scope: scope[0],
                },
                kind: _7 = std::str::from_utf8(move _8) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:67:30: 67:56 (#0),
                    scope: scope[0],
                },
                kind: _6 = std::result::Result::<&str, std::str::Utf8Error>::unwrap(move _7) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:67:9: 67:57 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::string::String::push_str(move _4, move _5) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_6),
            StorageDead(_3),
            StorageLive(_9),
            _9 = (),
            _0 = std::result::Result::<(), ()>::Ok(move _9),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:70:6: 70:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/chunked_encoder.rs:66:5: 70:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:66:52: 66:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut chunked_encoder::StringSink<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:66:28: 66:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/chunked_encoder.rs:66:42: 66:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/chunked_encoder.rs:66:39: 66:40 (#0),
                            ),
                        ),
                        pat_span: src/chunked_encoder.rs:66:39: 66:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:66:39: 66:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:67:9: 67:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:67:9: 67:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:67:30: 67:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:67:30: 67:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<&'{erased} str, std::str::Utf8Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:67:30: 67:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:67:45: 67:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/chunked_encoder.rs:69:12: 69:14 (#0),
            scope: scope[0],
        },
    },
]