[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*_2),
            StorageLive(_4),
            _4 = move _1,
            StorageLive(_5),
            _5 = [const 0_u8; 1024],
            StorageLive(_6),
            _6 = [const 0_u8; 3],
            StorageLive(_7),
            _7 = std::option::Option::<usize>::None,
            _0 = read::decoder::DecoderReader::<'_, E, R> { engine: move _3, inner: move _4, b64_buffer: move _5, b64_offset: const 0_usize, b64_len: const 0_usize, decoded_chunk_buffer: move _6, decoded_offset: const 0_usize, decoded_len: const 0_usize, input_consumed_len: const 0_usize, padding_offset: move _7 },
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read/decoder.rs:90:9: 90:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read/decoder.rs:91:5: 91:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read/decoder.rs:91:6: 91:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read/decoder.rs:91:5: 91:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/read/decoder.rs:78:5: 91:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: read::decoder::DecoderReader<'{erased}, E/#1, R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read/decoder.rs:78:45: 78:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/read/decoder.rs:78:24: 78:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/read/decoder.rs:78:16: 78:22 (#0),
                            ),
                        ),
                        pat_span: src/read/decoder.rs:78:16: 78:22 (#0),
                    },
                ),
            ),
        ),
        ty: R/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read/decoder.rs:78:16: 78:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/read/decoder.rs:78:35: 78:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/read/decoder.rs:78:27: 78:33 (#0),
                            ),
                        ),
                        pat_span: src/read/decoder.rs:78:27: 78:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} E/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read/decoder.rs:78:27: 78:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} E/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read/decoder.rs:80:13: 80:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: R/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read/decoder.rs:81:20: 81:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [u8; 1024_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read/decoder.rs:82:25: 82:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [u8; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/read/decoder.rs:85:35: 85:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/read/decoder.rs:89:29: 89:33 (#0),
            scope: scope[0],
        },
    },
]