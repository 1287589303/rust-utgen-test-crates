[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = const engine::general_purpose::STANDARD,
            _4 = &_5,
            StorageLive(_6),
            _6 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:151:5: 152:52 (#0),
                    scope: scope[0],
                },
                kind: _3 = <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_decoded_len_estimate(move _4, move _6) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &_3,
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:151:5: 153:32 (#0),
                    scope: scope[0],
                },
                kind: _0 = <engine::general_purpose::decode::GeneralPurposeEstimate as engine::DecodeEstimate>::decoded_len_estimate(move _2) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:154:2: 154:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:150:1: 154:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:150:52: 150:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/decode.rs:150:42: 150:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/decode.rs:150:29: 150:40 (#0),
                            ),
                        ),
                        pat_span: src/decode.rs:150:29: 150:40 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:150:29: 150:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/decode.rs:151:5: 153:32 (#0),
                },
            ),
        ),
        ty: &'{erased} engine::general_purpose::decode::GeneralPurposeEstimate,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:151:5: 152:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/decode.rs:151:5: 153:32 (#0),
                },
            ),
        ),
        ty: engine::general_purpose::decode::GeneralPurposeEstimate,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:151:5: 152:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/decode.rs:151:5: 153:32 (#0),
                },
            ),
        ),
        ty: &'{erased} engine::general_purpose::GeneralPurpose,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:151:5: 151:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:312 ~ base64[d406]::engine::general_purpose::STANDARD),
            },
        ),
        ty: engine::general_purpose::GeneralPurpose,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:151:5: 151:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/decode.rs:151:5: 153:32 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:152:40: 152:51 (#0),
            scope: scope[0],
        },
    },
]