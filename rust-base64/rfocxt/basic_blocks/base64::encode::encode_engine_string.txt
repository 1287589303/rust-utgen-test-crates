[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_3),
            StorageLive(_6),
            _6 = move _1,
            StorageLive(_7),
            _7 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:43:5: 43:44 (#0),
                    scope: scope[0],
                },
                kind: _4 = <E as engine::Engine>::encode_string::<T>(move _5, move _6, move _7) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:44:1: 44:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:44:2: 44:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:43:43: 43:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:44:1: 44:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:38:1: 44:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:42:2: 42:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/encode.rs:39:12: 39:13 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:39:5: 39:10 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:39:5: 39:10 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:39:5: 39:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/encode.rs:40:17: 40:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:40:5: 40:15 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:40:5: 40:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:40:5: 40:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/encode.rs:41:13: 41:15 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:41:5: 41:11 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:41:5: 41:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} E/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:41:5: 41:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:43:5: 43:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} E/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:43:5: 43:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:43:26: 43:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:43:33: 43:43 (#0),
            scope: scope[0],
        },
    },
]