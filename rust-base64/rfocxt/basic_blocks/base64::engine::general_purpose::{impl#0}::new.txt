[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:40:27: 40:49 (#0),
                    scope: scope[0],
                },
                kind: _3 = engine::general_purpose::encode_table(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:41:27: 41:49 (#0),
                    scope: scope[0],
                },
                kind: _5 = engine::general_purpose::decode_table(move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            _7 = _2,
            _0 = engine::general_purpose::GeneralPurpose { encode_table: move _3, decode_table: move _5, config: move _7 },
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:44:6: 44:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/engine/general_purpose/mod.rs:38:5: 44:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: engine::general_purpose::GeneralPurpose,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:38:76: 38:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/mod.rs:38:32: 38:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:38:22: 38:30 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:38:22: 38:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} alphabet::Alphabet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:38:22: 38:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/engine/general_purpose/mod.rs:38:51: 38:71 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/engine/general_purpose/mod.rs:38:43: 38:49 (#0),
                            ),
                        ),
                        pat_span: src/engine/general_purpose/mod.rs:38:43: 38:49 (#0),
                    },
                ),
            ),
        ),
        ty: engine::general_purpose::GeneralPurposeConfig,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:38:43: 38:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [u8; 64_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:40:27: 40:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/mod.rs:39:9: 43:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alphabet::Alphabet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:40:40: 40:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [u8; 256_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:41:27: 41:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/engine/general_purpose/mod.rs:39:9: 43:10 (#0),
                },
            ),
        ),
        ty: &'{erased} alphabet::Alphabet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:41:40: 41:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: engine::general_purpose::GeneralPurposeConfig,
        user_ty: None,
        source_info: SourceInfo {
            span: src/engine/general_purpose/mod.rs:42:13: 42:19 (#0),
            scope: scope[0],
        },
    },
]