[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).1: std::option::Option<W>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:130:13: 130:36 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::option::Option::<W>::is_some(move _4) -> [return: bb1, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:130:13: 130:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:9: 134:37 (#0),
                    scope: scope[0],
                },
                kind: _9 = write::encoder::EncoderWriter::<'_, E, W>::write_final_leftovers(move _10) -> [return: bb4, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:223:9: 223:38 (#101),
                    scope: scope[0],
                },
                kind: _6 = std::rt::begin_panic::<&str>(const "Encoder has already had finish() called") -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:9: 134:38 (#378),
                    scope: scope[0],
                },
                kind: _8 = <std::result::Result<(), std::io::Error> as std::ops::Try>::branch(move _9) -> [return: bb5, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            _11 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:9: 134:38 (#378),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb8, 1: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:9: 134:38 (#378),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:37: 134:38 (#379),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = ((_8 as Continue).0: ()),
            _7 = _15,
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:38: 134:39 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb11, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>),
            StorageLive(_14),
            _14 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:9: 134:38 (#378),
                    scope: scope[2],
                },
                kind: _0 = <std::result::Result<W, std::io::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, std::io::Error>>>::from_residual(move _14) -> [return: bb10, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:37: 134:38 (#379),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb16, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut ((*_1).1: std::option::Option<W>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:136:22: 136:42 (#0),
                    scope: scope[0],
                },
                kind: _17 = std::option::Option::<W>::take(move _18) -> [return: bb12, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = const "Writer must be present",
            _19 = &(*_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:136:22: 136:75 (#0),
                    scope: scope[0],
                },
                kind: _16 = std::option::Option::<W>::expect(move _17, move _19) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_17),
            FakeRead(ForLet(None), _16),
            StorageDead(_20),
            StorageLive(_21),
            _21 = move _16,
            _0 = std::result::Result::<W, std::io::Error>::Ok(move _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:138:18: 138:19 (#0),
                    scope: scope[5],
                },
                kind: drop(_21) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:139:5: 139:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb15, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:139:6: 139:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:38: 134:39 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb17, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:139:6: 139:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:139:6: 139:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:139:5: 139:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:136:74: 136:75 (#0),
                    scope: scope[0],
                },
                kind: drop(_17) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:37: 134:38 (#378),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:37: 134:38 (#379),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:38: 134:39 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:134:37: 134:38 (#378),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/write/encoder.rs:126:5: 139:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<W/#2, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:126:33: 126:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut write::encoder::EncoderWriter<'{erased}, E/#1, W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:126:19: 126:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:129:9: 132:10 (#97),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:130:13: 130:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::option::Option<W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:130:13: 130:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:222:27: 224:6 (#101),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:222:27: 224:6 (#101),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:223:9: 223:38 (#101),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:134:9: 134:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:134:9: 134:38 (#378),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:134:9: 134:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut write::encoder::EncoderWriter<'{erased}, E/#1, W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:134:9: 134:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:134:37: 134:38 (#379),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/write/encoder.rs:134:9: 134:38 (#378),
                            ),
                        ),
                        pat_span: src/write/encoder.rs:134:37: 134:38 (#379),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:134:37: 134:38 (#379),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:134:37: 134:38 (#379),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, std::io::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:134:37: 134:38 (#379),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/write/encoder.rs:134:9: 134:38 (#378),
                            ),
                        ),
                        pat_span: src/write/encoder.rs:134:9: 134:38 (#378),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:134:9: 134:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/write/encoder.rs:136:22: 136:75 (#0),
                            ),
                        ),
                        pat_span: src/write/encoder.rs:136:13: 136:19 (#0),
                    },
                ),
            ),
        ),
        ty: W/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:136:13: 136:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:136:22: 136:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::option::Option<W/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:136:22: 136:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:136:50: 136:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:136:50: 136:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: W/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/write/encoder.rs:138:12: 138:18 (#0),
            scope: scope[0],
        },
    },
]