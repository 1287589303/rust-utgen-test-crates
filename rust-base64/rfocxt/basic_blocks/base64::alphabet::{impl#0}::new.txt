[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:80:21: 80:40 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::str::<impl str>::as_bytes(move _3) -> [return: bb1, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:81:12: 81:23 (#0),
                    scope: scope[1],
                },
                kind: _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb2, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = Ne(move _6, const alphabet::ALPHABET_SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:81:12: 81:40 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_9),
            _9 = alphabet::ParseAlphabetError::InvalidLength,
            _0 = std::result::Result::<alphabet::Alphabet, alphabet::ParseAlphabetError>::Err(move _9),
            StorageDead(_9),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = const (),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_10),
            StorageLive(_11),
            _11 = const 0_usize,
            FakeRead(ForLet(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:87:13: 121:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:87:13: 121:14 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb6, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            _14 = _11,
            _13 = Lt(move _14, const alphabet::ALPHABET_SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:87:19: 87:40 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _13) -> [0: bb28, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = _11,
            _17 = Len((*_2)),
            _18 = Lt(_16, _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:88:28: 88:40 (#0),
                    scope: scope[2],
                },
                kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb8, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = (*_2)[_16],
            FakeRead(ForLet(None), _15),
            StorageDead(_16),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = _15,
            _20 = Ge(move _21, const 32_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:92:22: 92:35 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _20) -> [0: bb12, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = _15,
            _22 = Le(move _23, const 126_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:92:39: 92:53 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _22) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            _19 = const (),
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = _15,
            _28 = Eq(move _29, const PAD_BYTE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:96:20: 96:36 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _28) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            StorageLive(_26),
            _26 = _15,
            _25 = alphabet::ParseAlphabetError::UnprintableByte(move _26),
            StorageDead(_26),
            _0 = std::result::Result::<alphabet::Alphabet, alphabet::ParseAlphabetError>::Err(move _25),
            StorageDead(_25),
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageLive(_31),
            StorageLive(_32),
            _32 = _15,
            _31 = alphabet::ParseAlphabetError::ReservedByte(move _32),
            StorageDead(_32),
            _0 = std::result::Result::<alphabet::Alphabet, alphabet::ParseAlphabetError>::Err(move _31),
            StorageDead(_31),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            _27 = const (),
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_33),
            _33 = const 0_usize,
            FakeRead(ForLet(None), _33),
            StorageLive(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:105:17: 118:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:105:17: 118:18 (#0),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb17, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            StorageLive(_36),
            _36 = _33,
            _35 = Lt(move _36, const alphabet::ALPHABET_SIZE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:105:23: 105:50 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _35) -> [0: bb26, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = _33,
            StorageLive(_40),
            _40 = _11,
            _38 = Eq(move _39, move _40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:106:24: 106:44 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _38) -> [0: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            _42 = AddWithOverflow(_33, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:107:25: 107:41 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", _33, const 1_usize) -> [success: bb20, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = move (_42.0: usize),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            _37 = const (),
            StorageDead(_38),
            StorageDead(_37),
            StorageLive(_43),
            StorageLive(_44),
            _44 = _33,
            _45 = Len((*_2)),
            _46 = Lt(_44, _45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:111:38: 111:56 (#0),
                    scope: scope[4],
                },
                kind: assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> [success: bb22, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = (*_2)[_44],
            FakeRead(ForLet(None), _43),
            StorageDead(_44),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _15,
            StorageLive(_50),
            _50 = _43,
            _48 = Eq(move _49, move _50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:113:24: 113:42 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _48) -> [0: bb24, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageLive(_52),
            StorageLive(_53),
            _53 = _15,
            _52 = alphabet::ParseAlphabetError::DuplicatedByte(move _53),
            StorageDead(_53),
            _0 = std::result::Result::<alphabet::Alphabet, alphabet::ParseAlphabetError>::Err(move _52),
            StorageDead(_52),
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_43),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            _47 = const (),
            StorageDead(_48),
            StorageDead(_47),
            _54 = AddWithOverflow(_33, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:117:21: 117:37 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", _33, const 1_usize) -> [success: bb25, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = move (_54.0: usize),
            _12 = const (),
            StorageDead(_43),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:105:17: 118:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageLive(_56),
            _34 = const (),
            StorageDead(_56),
            StorageDead(_35),
            StorageDead(_34),
            _58 = AddWithOverflow(_11, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:120:17: 120:27 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_58.1: bool), "attempt to compute `{} + {}`, which would overflow", _11, const 1_usize) -> [success: bb27, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = move (_58.0: usize),
            _12 = const (),
            StorageDead(_33),
            StorageDead(_15),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:87:13: 121:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_60),
            _10 = const (),
            StorageDead(_60),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:124:12: 124:46 (#0),
                    scope: scope[1],
                },
                kind: _62 = alphabet::Alphabet::from_str_unchecked(move _63) -> [return: bb29, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            _0 = std::result::Result::<alphabet::Alphabet, alphabet::ParseAlphabetError>::Ok(move _62),
            StorageDead(_62),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:125:6: 125:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:125:6: 125:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:125:6: 125:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/alphabet.rs:79:5: 125:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<alphabet::Alphabet, alphabet::ParseAlphabetError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:79:41: 79:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/alphabet.rs:79:32: 79:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/alphabet.rs:79:22: 79:30 (#0),
                            ),
                        ),
                        pat_span: src/alphabet.rs:79:22: 79:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:79:22: 79:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/alphabet.rs:80:21: 80:40 (#0),
                            ),
                        ),
                        pat_span: src/alphabet.rs:80:13: 80:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:80:13: 80:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:80:21: 80:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:81:9: 83:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:81:12: 81:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:81:12: 81:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:81:12: 81:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:81:41: 83:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alphabet::ParseAlphabetError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:82:24: 82:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/alphabet.rs:87:13: 121:14 (#0),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:87:13: 121:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/alphabet.rs:86:29: 86:30 (#0),
                            ),
                        ),
                        pat_span: src/alphabet.rs:86:17: 86:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:86:17: 86:26 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:79:5: 125:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/alphabet.rs:87:13: 121:14 (#541),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:87:19: 87:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/alphabet.rs:87:13: 121:14 (#541),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:87:19: 87:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/alphabet.rs:88:28: 88:40 (#0),
                            ),
                        ),
                        pat_span: src/alphabet.rs:88:21: 88:25 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:88:21: 88:25 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:88:34: 88:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:88:28: 88:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:88:28: 88:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:92:17: 94:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:92:22: 92:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:92:22: 92:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:92:39: 92:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:92:39: 92:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:92:55: 94:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alphabet::ParseAlphabetError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:93:32: 93:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:93:68: 93:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:96:17: 98:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:96:20: 96:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:96:20: 96:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:96:37: 98:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alphabet::ParseAlphabetError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:97:32: 97:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:97:65: 97:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/alphabet.rs:104:39: 104:40 (#0),
                            ),
                        ),
                        pat_span: src/alphabet.rs:104:21: 104:36 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:104:21: 104:36 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:105:17: 118:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/alphabet.rs:105:17: 118:18 (#545),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:105:23: 105:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/alphabet.rs:105:17: 118:18 (#545),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:105:23: 105:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:106:21: 109:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:106:24: 106:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:106:24: 106:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:106:39: 106:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:106:45: 109:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:107:25: 107:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/alphabet.rs:111:38: 111:56 (#0),
                            ),
                        ),
                        pat_span: src/alphabet.rs:111:25: 111:35 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:111:25: 111:35 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:111:44: 111:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:111:38: 111:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:111:38: 111:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:113:21: 115:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:113:24: 113:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:113:24: 113:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:113:32: 113:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:113:43: 115:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alphabet::ParseAlphabetError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:114:36: 114:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:114:71: 114:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:117:21: 117:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/alphabet.rs:105:17: 118:18 (#545),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:105:17: 118:18 (#545),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:105:17: 118:18 (#545),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:105:17: 118:18 (#545),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:120:17: 120:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/alphabet.rs:87:13: 121:14 (#541),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:87:13: 121:14 (#541),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:87:13: 121:14 (#541),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:87:13: 121:14 (#541),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alphabet::Alphabet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:124:12: 124:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/alphabet.rs:124:9: 124:47 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/alphabet.rs:124:37: 124:45 (#0),
            scope: scope[0],
        },
    },
]