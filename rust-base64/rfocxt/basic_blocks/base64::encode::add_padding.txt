[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _1,
            _7 = Eq(const 4_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:134:26: 134:51 (#0),
                    scope: scope[0],
                },
                kind: assert(!move _7, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> [success: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = Rem(move _6, const 4_usize),
            StorageDead(_6),
            _8 = SubWithOverflow(const 4_usize, _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:134:21: 134:52 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", const 4_usize, move _5) -> [success: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move (_8.0: usize),
            StorageDead(_5),
            _9 = Eq(const 4_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:134:21: 134:56 (#0),
                    scope: scope[0],
                },
                kind: assert(!move _9, "attempt to calculate the remainder of `{}` with a divisor of zero", _4) -> [success: bb3, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = Rem(move _4, const 4_usize),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _3,
            _12 = std::ops::Range::<usize> { start: const 0_usize, end: move _13 },
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:138:14: 138:26 (#561),
                    scope: scope[2],
                },
                kind: _11 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _12) -> [return: bb4, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            StorageLive(_14),
            _14 = move _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:138:5: 140:6 (#560),
                    scope: scope[3],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:138:5: 140:6 (#560),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut _14,
            _18 = &mut (*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:138:14: 138:26 (#561),
                    scope: scope[3],
                },
                kind: _17 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _18) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            _20 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:138:14: 138:26 (#561),
                    scope: scope[3],
                },
                kind: switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:138:14: 138:26 (#561),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:138:5: 140:6 (#560),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = ((_17 as Some).0: usize),
            StorageLive(_23),
            _23 = _22,
            _24 = Len((*_2)),
            _25 = Lt(_23, _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:139:9: 139:18 (#0),
                    scope: scope[4],
                },
                kind: assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb12, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = const (),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_10),
            _0 = _3,
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:143:2: 143:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_2)[_23] = const PAD_BYTE,
            StorageDead(_23),
            _16 = const (),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:138:5: 140:6 (#560),
                    scope: scope[3],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/encode.rs:133:1: 143:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:133:77: 133:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/encode.rs:133:48: 133:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:133:27: 133:46 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:133:27: 133:46 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:133:27: 133:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/encode.rs:133:63: 133:72 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:133:55: 133:61 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:133:55: 133:61 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:133:55: 133:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/encode.rs:134:21: 134:56 (#0),
                            ),
                        ),
                        pat_span: src/encode.rs:134:9: 134:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:134:9: 134:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:134:21: 134:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:134:26: 134:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:134:27: 134:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:134:26: 134:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:134:21: 134:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:134:21: 134:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:5: 140:6 (#560),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:14: 138:26 (#561),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:14: 138:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:17: 138:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/encode.rs:138:14: 138:26 (#561),
                            ),
                        ),
                        pat_span: src/encode.rs:138:14: 138:26 (#561),
                    },
                ),
            ),
        ),
        ty: std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:14: 138:26 (#561),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:133:1: 143:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:14: 138:26 (#561),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:14: 138:26 (#561),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:14: 138:26 (#561),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:14: 138:26 (#561),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:5: 140:6 (#560),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:5: 140:6 (#560),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                src/encode.rs:138:14: 138:26 (#561),
                            ),
                        ),
                        pat_span: src/encode.rs:138:9: 138:10 (#562),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:138:9: 138:10 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:139:16: 139:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:139:9: 139:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/encode.rs:139:9: 139:18 (#0),
            scope: scope[0],
        },
    },
]