[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*_2),
            StorageLive(_4),
            _4 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:103:5: 103:25 (#0),
                    scope: scope[0],
                },
                kind: _0 = <E as engine::Engine>::decode::<T>(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:104:1: 104:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:104:2: 104:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:103:24: 103:25 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:104:1: 104:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/decode.rs:99:1: 104:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::vec::Vec<u8, std::alloc::Global>, decode::DecodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:102:6: 102:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/decode.rs:100:12: 100:13 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/decode.rs:100:5: 100:10 (#0),
                            ),
                        ),
                        pat_span: src/decode.rs:100:5: 100:10 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:100:5: 100:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/decode.rs:101:13: 101:15 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/decode.rs:101:5: 101:11 (#0),
                            ),
                        ),
                        pat_span: src/decode.rs:101:5: 101:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} E/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:101:5: 101:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/decode.rs:103:5: 103:25 (#0),
                },
            ),
        ),
        ty: &'{erased} E/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:103:5: 103:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/decode.rs:103:5: 103:25 (#0),
                },
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/decode.rs:103:19: 103:24 (#0),
            scope: scope[0],
        },
    },
]