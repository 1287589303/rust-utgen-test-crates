{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/engine/general_purpose/mod.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a table mapping base64 bytes as the lookup index to either:\n/// - [`INVALID_VALUE`] for bytes that aren't members of the alphabet\n/// - a byte whose lower 6 bits are the value that was encoded into the index byte\n214 pub(crate) const fn decode_table(alphabet: &Alphabet) -> [u8; 256] {\n215     let mut decode_table = [INVALID_VALUE; 256];\n216 \n217     // Since the table is full of `INVALID_VALUE` already, we only need to overwrite\n218     // the parts that are valid.\n219     let mut index = 0;\n220     while index < 64 {\n221         // The index in the alphabet is the 6-bit value we care about.\n222         // Since the index is in 0-63, it is safe to cast to u8.\n223         decode_table[alphabet.symbols[index] as usize] = index as u8;\n224         index += 1;\n225     }\n226 \n227     decode_table\n228 }\n\n",
  "depend_pt": ""
}