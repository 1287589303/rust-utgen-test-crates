{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/engine/general_purpose/mod.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a table mapping a 6-bit index to the ASCII byte encoding of the index\n196 pub(crate) const fn encode_table(alphabet: &Alphabet) -> [u8; 64] {\n197     // the encode table is just the alphabet:\n198     // 6-bit index lookup -> printable byte\n199     let mut encode_table = [0_u8; 64];\n200     {\n201         let mut index = 0;\n202         while index < 64 {\n203             encode_table[index] = alphabet.symbols[index];\n204             index += 1;\n205         }\n206     }\n207 \n208     encode_table\n209 }\n\n",
  "depend_pt": ""
}