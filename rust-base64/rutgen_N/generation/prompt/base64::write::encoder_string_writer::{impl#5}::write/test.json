{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/write/encoder_string_writer.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n120 fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n121     // Because we expect all input to be valid utf-8 individual bytes, we can encode any buffer\n122     // length\n123     let s = std::str::from_utf8(buf).expect(\"Input must be valid UTF-8\");\n124 \n125     self.str_consumer.consume(s);\n126 \n127     Ok(buf.len())\n128 }\n\n",
  "depend_pt": ""
}