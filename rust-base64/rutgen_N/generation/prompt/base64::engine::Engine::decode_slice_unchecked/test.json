{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/engine/mod.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the input into the provided output slice.\n///\n/// Returns the number of bytes written to the slice.\n///\n/// This will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).\n///\n/// See [`crate::decoded_len_estimate`] for calculating buffer sizes.\n///\n/// See [`Engine::decode_slice`] for a version that returns an error instead of panicking if the output\n/// buffer is too small.\n///\n/// # Panics\n///\n/// Panics if the provided output buffer is too small for the decoded data.\n393 fn decode_slice_unchecked<T: AsRef<[u8]>>(\n394     &self,\n395     input: T,\n396     output: &mut [u8],\n397 ) -> Result<usize, DecodeError> {\n398     fn inner<E>(engine: &E, input_bytes: &[u8], output: &mut [u8]) -> Result<usize, DecodeError>\n399     where\n400         E: Engine + ?Sized,\n401     {\n402         engine\n403             .internal_decode(\n404                 input_bytes,\n405                 output,\n406                 engine.internal_decoded_len_estimate(input_bytes.len()),\n407             )\n408             .map(|dm| dm.decoded_len)\n409             .map_err(|e| match e {\n410                 DecodeSliceError::DecodeError(e) => e,\n411                 DecodeSliceError::OutputSliceTooSmall => {\n412                     panic!(\"Output slice is too small\")\n413                 }\n414             })\n415     }\n416 \n417     inner(self, input.as_ref(), output)\n418 }\n\n",
  "depend_pt": ""
}