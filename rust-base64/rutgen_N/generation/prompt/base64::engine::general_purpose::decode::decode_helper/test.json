{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/engine/general_purpose/decode.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Helper to avoid duplicating `num_chunks` calculation, which is costly on short inputs.\n/// Returns the decode metadata, or an error.\n 35 pub(crate) fn decode_helper(\n 36     input: &[u8],\n 37     estimate: &GeneralPurposeEstimate,\n 38     output: &mut [u8],\n 39     decode_table: &[u8; 256],\n 40     decode_allow_trailing_bits: bool,\n 41     padding_mode: DecodePaddingMode,\n 42 ) -> Result<DecodeMetadata, DecodeSliceError> {\n 43     let input_complete_nonterminal_quads_len =\n 44         complete_quads_len(input, estimate.rem, output.len(), decode_table)?;\n 45 \n 46     const UNROLLED_INPUT_CHUNK_SIZE: usize = 32;\n 47     const UNROLLED_OUTPUT_CHUNK_SIZE: usize = UNROLLED_INPUT_CHUNK_SIZE / 4 * 3;\n 48 \n 49     let input_complete_quads_after_unrolled_chunks_len =\n 50         input_complete_nonterminal_quads_len % UNROLLED_INPUT_CHUNK_SIZE;\n 51 \n 52     let input_unrolled_loop_len =\n 53         input_complete_nonterminal_quads_len - input_complete_quads_after_unrolled_chunks_len;\n 54 \n 55     // chunks of 32 bytes\n 56     for (chunk_index, chunk) in input[..input_unrolled_loop_len]\n 57         .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n 58         .enumerate()\n 59     {\n 60         let input_index = chunk_index * UNROLLED_INPUT_CHUNK_SIZE;\n 61         let chunk_output = &mut output[chunk_index * UNROLLED_OUTPUT_CHUNK_SIZE\n 62             ..(chunk_index + 1) * UNROLLED_OUTPUT_CHUNK_SIZE];\n 63 \n 64         decode_chunk_8(\n 65             &chunk[0..8],\n 66             input_index,\n 67             decode_table,\n 68             &mut chunk_output[0..6],\n 69         )?;\n 70         decode_chunk_8(\n 71             &chunk[8..16],\n 72             input_index + 8,\n 73             decode_table,\n 74             &mut chunk_output[6..12],\n 75         )?;\n 76         decode_chunk_8(\n 77             &chunk[16..24],\n 78             input_index + 16,\n 79             decode_table,\n 80             &mut chunk_output[12..18],\n 81         )?;\n 82         decode_chunk_8(\n 83             &chunk[24..32],\n 84             input_index + 24,\n 85             decode_table,\n 86             &mut chunk_output[18..24],\n 87         )?;\n 88     }\n 89 \n 90     // remaining quads, except for the last possibly partial one, as it may have padding\n 91     let output_unrolled_loop_len = input_unrolled_loop_len / 4 * 3;\n 92     let output_complete_quad_len = input_complete_nonterminal_quads_len / 4 * 3;\n 93     {\n 94         let output_after_unroll = &mut output[output_unrolled_loop_len..output_complete_quad_len];\n 95 \n 96         for (chunk_index, chunk) in input\n 97             [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n 98             .chunks_exact(4)\n 99             .enumerate()\n100         {\n101             let chunk_output = &mut output_after_unroll[chunk_index * 3..chunk_index * 3 + 3];\n102 \n103             decode_chunk_4(\n104                 chunk,\n105                 input_unrolled_loop_len + chunk_index * 4,\n106                 decode_table,\n107                 chunk_output,\n108             )?;\n109         }\n110     }\n111 \n112     super::decode_suffix::decode_suffix(\n113         input,\n114         input_complete_nonterminal_quads_len,\n115         output,\n116         output_complete_quad_len,\n117         decode_table,\n118         decode_allow_trailing_bits,\n119         padding_mode,\n120     )\n121 }\n\n",
  "depend_pt": ""
}