{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/engine/general_purpose/decode.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Like [`decode_chunk_8`] but for 4 bytes of input and 3 bytes of output.\n256 fn decode_chunk_4(\n257     input: &[u8],\n258     index_at_start_of_input: usize,\n259     decode_table: &[u8; 256],\n260     output: &mut [u8],\n261 ) -> Result<(), DecodeError> {\n262     let morsel = decode_table[usize::from(input[0])];\n263     if morsel == INVALID_VALUE {\n264         return Err(DecodeError::InvalidByte(index_at_start_of_input, input[0]));\n265     }\n266     let mut accum = u32::from(morsel) << 26;\n267 \n268     let morsel = decode_table[usize::from(input[1])];\n269     if morsel == INVALID_VALUE {\n270         return Err(DecodeError::InvalidByte(\n271             index_at_start_of_input + 1,\n272             input[1],\n273         ));\n274     }\n275     accum |= u32::from(morsel) << 20;\n276 \n277     let morsel = decode_table[usize::from(input[2])];\n278     if morsel == INVALID_VALUE {\n279         return Err(DecodeError::InvalidByte(\n280             index_at_start_of_input + 2,\n281             input[2],\n282         ));\n283     }\n284     accum |= u32::from(morsel) << 14;\n285 \n286     let morsel = decode_table[usize::from(input[3])];\n287     if morsel == INVALID_VALUE {\n288         return Err(DecodeError::InvalidByte(\n289             index_at_start_of_input + 3,\n290             input[3],\n291         ));\n292     }\n293     accum |= u32::from(morsel) << 8;\n294 \n295     output[..3].copy_from_slice(&accum.to_be_bytes()[..3]);\n296 \n297     Ok(())\n298 }\n\n",
  "depend_pt": ""
}