{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/alphabet.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create an `Alphabet` from a string of 64 unique printable ASCII bytes.\n///\n/// The `=` byte is not allowed as it is used for padding.\n 79 pub const fn new(alphabet: &str) -> Result<Self, ParseAlphabetError> {\n 80     let bytes = alphabet.as_bytes();\n 81     if bytes.len() != ALPHABET_SIZE {\n 82         return Err(ParseAlphabetError::InvalidLength);\n 83     }\n 84 \n 85     {\n 86         let mut index = 0;\n 87         while index < ALPHABET_SIZE {\n 88             let byte = bytes[index];\n 89 \n 90             // must be ascii printable. 127 (DEL) is commonly considered printable\n 91             // for some reason but clearly unsuitable for base64.\n 92             if !(byte >= 32_u8 && byte <= 126_u8) {\n 93                 return Err(ParseAlphabetError::UnprintableByte(byte));\n 94             }\n 95             // = is assumed to be padding, so cannot be used as a symbol\n 96             if byte == PAD_BYTE {\n 97                 return Err(ParseAlphabetError::ReservedByte(byte));\n 98             }\n 99 \n100             // Check for duplicates while staying within what const allows.\n101             // It's n^2, but only over 64 hot bytes, and only once, so it's likely in the single digit\n102             // microsecond range.\n103 \n104             let mut probe_index = 0;\n105             while probe_index < ALPHABET_SIZE {\n106                 if probe_index == index {\n107                     probe_index += 1;\n108                     continue;\n109                 }\n110 \n111                 let probe_byte = bytes[probe_index];\n112 \n113                 if byte == probe_byte {\n114                     return Err(ParseAlphabetError::DuplicatedByte(byte));\n115                 }\n116 \n117                 probe_index += 1;\n118             }\n119 \n120             index += 1;\n121         }\n122     }\n123 \n124     Ok(Self::from_str_unchecked(alphabet))\n125 }\n\n",
  "depend_pt": ""
}