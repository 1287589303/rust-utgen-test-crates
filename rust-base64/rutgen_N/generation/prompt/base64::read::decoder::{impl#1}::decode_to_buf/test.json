{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/read/decoder.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the requested number of bytes from the b64 buffer into the provided buffer. It's the\n/// caller's responsibility to choose the number of b64 bytes to decode correctly.\n///\n/// Returns a Result with the number of decoded bytes written to `buf`.\n///\n/// # Panics\n///\n/// panics if `buf` is too small\n140 fn decode_to_buf(&mut self, b64_len_to_decode: usize, buf: &mut [u8]) -> io::Result<usize> {\n141     debug_assert!(self.b64_len >= b64_len_to_decode);\n142     debug_assert!(self.b64_offset + self.b64_len <= BUF_SIZE);\n143     debug_assert!(!buf.is_empty());\n144 \n145     let b64_to_decode = &self.b64_buffer[self.b64_offset..self.b64_offset + b64_len_to_decode];\n146     let decode_metadata = self\n147         .engine\n148         .internal_decode(\n149             b64_to_decode,\n150             buf,\n151             self.engine.internal_decoded_len_estimate(b64_len_to_decode),\n152         )\n153         .map_err(|dse| match dse {\n154             DecodeSliceError::DecodeError(de) => {\n155                 match de {\n156                     DecodeError::InvalidByte(offset, byte) => {\n157                         match (byte, self.padding_offset) {\n158                             // if there was padding in a previous block of decoding that happened to\n159                             // be correct, and we now find more padding that happens to be incorrect,\n160                             // to be consistent with non-reader decodes, record the error at the first\n161                             // padding\n162                             (PAD_BYTE, Some(first_pad_offset)) => {\n163                                 DecodeError::InvalidByte(first_pad_offset, PAD_BYTE)\n164                             }\n165                             _ => {\n166                                 DecodeError::InvalidByte(self.input_consumed_len + offset, byte)\n167                             }\n168                         }\n169                     }\n170                     DecodeError::InvalidLength(len) => {\n171                         DecodeError::InvalidLength(self.input_consumed_len + len)\n172                     }\n173                     DecodeError::InvalidLastSymbol(offset, byte) => {\n174                         DecodeError::InvalidLastSymbol(self.input_consumed_len + offset, byte)\n175                     }\n176                     DecodeError::InvalidPadding => DecodeError::InvalidPadding,\n177                 }\n178             }\n179             DecodeSliceError::OutputSliceTooSmall => {\n180                 unreachable!(\"buf is sized correctly in calling code\")\n181             }\n182         })\n183         .map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))?;\n184 \n185     if let Some(offset) = self.padding_offset {\n186         // we've already seen padding\n187         if decode_metadata.decoded_len > 0 {\n188             // we read more after already finding padding; report error at first padding byte\n189             return Err(io::Error::new(\n190                 io::ErrorKind::InvalidData,\n191                 DecodeError::InvalidByte(offset, PAD_BYTE),\n192             ));\n193         }\n194     }\n195 \n196     self.padding_offset = self.padding_offset.or(decode_metadata\n197         .padding_offset\n198         .map(|offset| self.input_consumed_len + offset));\n199     self.input_consumed_len += b64_len_to_decode;\n200     self.b64_offset += b64_len_to_decode;\n201     self.b64_len -= b64_len_to_decode;\n202 \n203     debug_assert!(self.b64_offset + self.b64_len <= BUF_SIZE);\n204 \n205     Ok(decode_metadata.decoded_len)\n206 }\n\n",
  "depend_pt": ""
}