{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/engine/mod.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Encode arbitrary octets as base64 using the provided `Engine`.\n/// Returns a `String`.\n///\n/// # Example\n///\n/// ```rust\n/// use base64::{Engine as _, engine::{self, general_purpose}, alphabet};\n///\n/// let b64 = general_purpose::STANDARD.encode(b\"hello world~\");\n/// println!(\"{}\", b64);\n///\n/// const CUSTOM_ENGINE: engine::GeneralPurpose =\n///     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);\n///\n/// let b64_url = CUSTOM_ENGINE.encode(b\"hello internet~\");\n/// ```\n115 fn encode<T: AsRef<[u8]>>(&self, input: T) -> String {\n116     fn inner<E>(engine: &E, input_bytes: &[u8]) -> String\n117     where\n118         E: Engine + ?Sized,\n119     {\n120         let encoded_size = encoded_len(input_bytes.len(), engine.config().encode_padding())\n121             .expect(\"integer overflow when calculating buffer size\");\n122 \n123         let mut buf = vec![0; encoded_size];\n124 \n125         encode_with_padding(input_bytes, &mut buf[..], engine, encoded_size);\n126 \n127         String::from_utf8(buf).expect(\"Invalid UTF8\")\n128     }\n129 \n130     inner(self, input.as_ref())\n131 }\n\n",
  "depend_pt": ""
}