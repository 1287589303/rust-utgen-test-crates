{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/encode.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calculate the base64 encoded length for a given input length, optionally including any\n/// appropriate padding bytes.\n///\n/// Returns `None` if the encoded length can't be represented in `usize`. This will happen for\n/// input lengths in approximately the top quarter of the range of `usize`.\n 98 pub const fn encoded_len(bytes_len: usize, padding: bool) -> Option<usize> {\n 99     let rem = bytes_len % 3;\n100 \n101     let complete_input_chunks = bytes_len / 3;\n102     // `?` is disallowed in const, and `let Some(_) = _ else` requires 1.65.0, whereas this\n103     // messier syntax works on 1.48\n104     let complete_chunk_output =\n105         if let Some(complete_chunk_output) = complete_input_chunks.checked_mul(4) {\n106             complete_chunk_output\n107         } else {\n108             return None;\n109         };\n110 \n111     if rem > 0 {\n112         if padding {\n113             complete_chunk_output.checked_add(4)\n114         } else {\n115             let encoded_rem = match rem {\n116                 1 => 2,\n117                 // only other possible remainder is 2\n118                 // can't use a separate _ => unreachable!() in const fns in ancient rust versions\n119                 _ => 3,\n120             };\n121             complete_chunk_output.checked_add(encoded_rem)\n122         }\n123     } else {\n124         Some(complete_chunk_output)\n125     }\n126 }\n\n",
  "depend_pt": ""
}