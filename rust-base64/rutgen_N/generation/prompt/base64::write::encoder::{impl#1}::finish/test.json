{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/write/encoder.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Encode all remaining buffered data and write it, including any trailing incomplete input\n/// triples and associated padding.\n///\n/// Once this succeeds, no further writes or calls to this method are allowed.\n///\n/// This may write to the delegate writer multiple times if the delegate writer does not accept\n/// all input provided to its `write` each invocation.\n///\n/// If you don't care about error handling, it is not necessary to call this function, as the\n/// equivalent finalization is done by the Drop impl.\n///\n/// Returns the writer that this was constructed around.\n///\n/// # Errors\n///\n/// The first error that is not of `ErrorKind::Interrupted` will be returned.\n126 pub fn finish(&mut self) -> Result<W> {\n127     // If we could consume self in finish(), we wouldn't have to worry about this case, but\n128     // finish() is retryable in the face of I/O errors, so we can't consume here.\n129     assert!(\n130         self.delegate.is_some(),\n131         \"Encoder has already had finish() called\"\n132     );\n133 \n134     self.write_final_leftovers()?;\n135 \n136     let writer = self.delegate.take().expect(\"Writer must be present\");\n137 \n138     Ok(writer)\n139 }\n\n",
  "depend_pt": ""
}