{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/write/encoder.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Write all buffered encoded output. If this returns `Ok`, `self.output_occupied_len` is `0`.\n///\n/// This is basically `write_all` for the remaining buffered data but without the undesirable\n/// abort-on-`Ok(0)` behavior.\n///\n/// # Errors\n///\n/// Any error emitted by the delegate writer abort the write loop and is returned, unless it's\n/// `Interrupted`, in which case the error is ignored and writes will continue.\n212 fn write_all_encoded_output(&mut self) -> Result<()> {\n213     while self.output_occupied_len > 0 {\n214         let remaining_len = self.output_occupied_len;\n215         match self.write_to_delegate(remaining_len) {\n216             // try again on interrupts ala write_all\n217             Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n218             // other errors return\n219             Err(e) => return Err(e),\n220             // success no-ops because remaining length is already updated\n221             Ok(()) => {}\n222         };\n223     }\n224 \n225     debug_assert_eq!(0, self.output_occupied_len);\n226     Ok(())\n227 }\n\n",
  "depend_pt": ""
}