{
  "name": "base64::engine::Engine::decode",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:244:5:268:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use base64::engine;",
            "use base64::engine::GeneralPurpose;",
            "use base64::engine::general_purpose;",
            "use base64::Engine as _;",
            "use base64::alphabet;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use base64::{Engine as _, alphabet, engine::{self, general_purpose}};",
                "    ",
                "    let engine = general_purpose::STANDARD;",
                "    let input = \"aGVsbG8gd29ybGR+Cg==\";",
                "    let result = engine.decode(input).unwrap();",
                "    assert_eq!(result, b\"hello world\\n\".to_vec());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use base64::{Engine as _, alphabet, engine::{self, GeneralPurpose}};",
                "    ",
                "    let engine = GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);",
                "    let input = \"aGVsbG8gaW50ZXJuZXR-Cg\";",
                "    let result = engine.decode(input).unwrap();",
                "    assert_eq!(result, b\"hello internet\\n\".to_vec());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"DecodeError\")]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use base64::{Engine as _, engine::general_purpose};",
                "",
                "    let engine = general_purpose::STANDARD;",
                "    let input = \"invalid_base64\";",
                "    let _ = engine.decode(input).unwrap(); // This should panic",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}