{
  "name": "base64::write::encoder_string_writer::{impl#0}::into_inner",
  "mod_info": {
    "name": "write::encoder_string_writer",
    "loc": "src/write/mod.rs:3:1:3:27"
  },
  "visible": true,
  "loc": "src/write/encoder_string_writer.rs:67:5:72:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MockEncoder {",
                "        finished: bool,",
                "        str_consumer: String,",
                "    }",
                "",
                "    impl MockEncoder {",
                "        fn finish(&mut self) -> Result<&mut Self, &'static str> {",
                "            if self.finished {",
                "                Ok(self)",
                "            } else {",
                "                self.finished = true;",
                "                Ok(self)",
                "            }",
                "        }",
                "    }",
                "",
                "    struct EncoderStringWriter {",
                "        encoder: MockEncoder,",
                "    }",
                "",
                "    impl EncoderStringWriter {",
                "        pub fn new() -> Self {",
                "            EncoderStringWriter {",
                "                encoder: MockEncoder {",
                "                    finished: false,",
                "                    str_consumer: String::from(\"encoded_data\"),",
                "                },",
                "            }",
                "        }",
                "",
                "        pub fn into_inner(mut self) -> String {",
                "            self.encoder",
                "                .finish()",
                "                .expect(\"Writing to a consumer should never fail\")",
                "                .str_consumer",
                "        }",
                "    }",
                "",
                "    let writer = EncoderStringWriter::new();",
                "    let result = writer.into_inner();",
                "    assert_eq!(result, \"encoded_data\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}