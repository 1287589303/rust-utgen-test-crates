{
  "name": "base64::engine::general_purpose::decode::complete_quads_len",
  "mod_info": {
    "name": "engine::general_purpose::decode",
    "loc": "src/engine/general_purpose/mod.rs:12:1:12:23"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/decode.rs:131:1:163:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let input: &[u8] = b\"QUJDRA==\";",
                "    let input_len_rem = 2;",
                "    let output_len = 12; // enough for 3 complete quads (3 * 4 = 12)",
                "    let decode_table: [u8; 256] = [INVALID_VALUE; 256]; // Initialize with INVALID_VALUE",
                "    decode_table[b'A' as usize] = 0; ",
                "    decode_table[b'Q' as usize] = 1; ",
                "    decode_table[b'J' as usize] = 2; ",
                "    decode_table[b'D' as usize] = 3; ",
                "    decode_table[b'R' as usize] = 4; ",
                "    decode_table[b'A' as usize] = 0; ",
                "    ",
                "    let result = complete_quads_len(input, input_len_rem, output_len, &decode_table);",
                "    assert_eq!(result, Ok(4));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let input: &[u8] = b\"QUJDRA==\";",
                "    let input_len_rem = 2;",
                "    let output_len = 4; // not enough for 3 complete quads (3 * 4 = 12)",
                "    let decode_table: [u8; 256] = [INVALID_VALUE; 256]; ",
                "    decode_table[b'A' as usize] = 0; ",
                "    decode_table[b'Q' as usize] = 1; ",
                "    decode_table[b'J' as usize] = 2; ",
                "    decode_table[b'D' as usize] = 3; ",
                "    decode_table[b'R' as usize] = 4; ",
                "    decode_table[b'A' as usize] = 0; ",
                "",
                "    let result = complete_quads_len(input, input_len_rem, output_len, &decode_table);",
                "    assert_eq!(result, Err(DecodeSliceError::OutputSliceTooSmall));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let input: &[u8] = b\"QUJDRA\\xFF\"; // last byte is invalid (not a pad byte)",
                "    let input_len_rem = 1;",
                "    let output_len = 12; ",
                "    let mut decode_table: [u8; 256] = [INVALID_VALUE; 256]; ",
                "    decode_table[b'A' as usize] = 0; ",
                "    decode_table[b'Q' as usize] = 1; ",
                "    decode_table[b'J' as usize] = 2; ",
                "    decode_table[b'D' as usize] = 3; ",
                "    decode_table[b'R' as usize] = 4; ",
                "",
                "    let result = complete_quads_len(input, input_len_rem, output_len, &decode_table);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let input: &[u8] = b\"\"; // empty input",
                "    let input_len_rem = 0;",
                "    let output_len = 0; ",
                "    let decode_table: [u8; 256] = [INVALID_VALUE; 256]; ",
                "",
                "    let result = complete_quads_len(input, input_len_rem, output_len, &decode_table);",
                "    assert_eq!(result, Ok(0)); // empty input should return 0",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let input: &[u8] = b\"QUJDRA\"; // 3 bytes with no padding",
                "    let input_len_rem = 0; ",
                "    let output_len = 6; // enough for 2 complete quads (2 * 4 = 8)",
                "    let decode_table: [u8; 256] = [INVALID_VALUE; 256]; ",
                "    decode_table[b'A' as usize] = 0; ",
                "    decode_table[b'Q' as usize] = 1; ",
                "    decode_table[b'J' as usize] = 2; ",
                "    decode_table[b'D' as usize] = 3; ",
                "",
                "    let result = complete_quads_len(input, input_len_rem, output_len, &decode_table);",
                "    assert_eq!(result, Ok(4)); // should account for complete quads",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}