{
  "name": "base64::write::encoder::{impl#1}::new",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/write/encoder.rs:98:5:108:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MockWriter {",
                "        data: Vec<u8>,",
                "    }",
                "",
                "    impl std::io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> std::io::Result<usize> {",
                "            self.data.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> std::io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct MockEngine;",
                "",
                "    let mut mock_writer = MockWriter { data: Vec::new() };",
                "    let mock_engine = MockEngine;",
                "",
                "    let encoder = base64::new(&mut mock_writer, &mock_engine);",
                "",
                "    assert!(encoder.delegate.is_some());",
                "    assert_eq!(encoder.extra_input.len(), base64::MIN_ENCODE_CHUNK_SIZE);",
                "    assert_eq!(encoder.output.len(), base64::BUF_SIZE);",
                "    assert_eq!(encoder.output_occupied_len, 0);",
                "    assert_eq!(encoder.extra_input_occupied_len, 0);",
                "    assert!(!encoder.panicked);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}