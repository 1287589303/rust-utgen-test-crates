{
  "name": "base64::encode::add_padding",
  "mod_info": {
    "name": "encode",
    "loc": "src/lib.rs:286:1:286:12"
  },
  "visible": true,
  "loc": "src/encode.rs:133:1:143:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut output = [0u8; 4];",
                "    let result = add_padding(4, &mut output);",
                "    assert_eq!(result, 0);",
                "    assert_eq!(&output[0..4], &[0, 0, 0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut output = [0u8; 4];",
                "    let result = add_padding(3, &mut output);",
                "    assert_eq!(result, 1);",
                "    assert_eq!(&output[0..1], &[PAD_BYTE]);",
                "    assert_eq!(&output[1..4], &[0, 0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut output = [0u8; 4];",
                "    let result = add_padding(2, &mut output);",
                "    assert_eq!(result, 2);",
                "    assert_eq!(&output[0..2], &[PAD_BYTE, PAD_BYTE]);",
                "    assert_eq!(&output[2..4], &[0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut output = [0u8; 4];",
                "    let result = add_padding(1, &mut output);",
                "    assert_eq!(result, 3);",
                "    assert_eq!(&output[0..3], &[PAD_BYTE, PAD_BYTE, PAD_BYTE]);",
                "    assert_eq!(output[3], 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut output = [0u8; 6];",
                "    let result = add_padding(8, &mut output);",
                "    assert_eq!(result, 0);",
                "    assert_eq!(&output[0..6], &[0, 0, 0, 0, 0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}