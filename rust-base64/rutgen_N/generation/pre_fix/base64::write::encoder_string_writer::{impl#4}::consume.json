{
  "name": "base64::write::encoder_string_writer::{impl#4}::consume",
  "mod_info": {
    "name": "write::encoder_string_writer",
    "loc": "src/write/mod.rs:3:1:3:27"
  },
  "visible": true,
  "loc": "src/write/encoder_string_writer.rs:107:5:109:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Default)]",
            "struct EncoderStringWriter {",
            "    value: String,",
            "}",
            "",
            "impl EncoderStringWriter {",
            "    fn push_str(&mut self, buf: &str) {",
            "        self.value.push_str(buf);",
            "    }",
            "",
            "    fn consume(&mut self, buf: &str) {",
            "        self.push_str(buf);",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut writer = EncoderStringWriter::default();",
                "    writer.consume(\"\");",
                "    assert_eq!(writer.value, \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut writer = EncoderStringWriter::default();",
                "    writer.consume(\"Hello, \");",
                "    assert_eq!(writer.value, \"Hello, \");",
                "",
                "    writer.consume(\"world!\");",
                "    assert_eq!(writer.value, \"Hello, world!\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut writer = EncoderStringWriter::default();",
                "    writer.consume(\"First \");",
                "    writer.consume(\"Second \");",
                "    writer.consume(\"Third\");",
                "    assert_eq!(writer.value, \"First Second Third\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut writer = EncoderStringWriter::default();",
                "    let large_string = \"A\".repeat(1000);",
                "    writer.consume(&large_string);",
                "    assert_eq!(writer.value, large_string);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}