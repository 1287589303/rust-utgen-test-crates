{
  "name": "base64::decode::{impl#2}::fmt",
  "mod_info": {
    "name": "decode",
    "loc": "src/lib.rs:293:1:293:12"
  },
  "visible": true,
  "loc": "src/decode.rs:60:5:65:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct DecodeError(String);",
                "    ",
                "    enum MyError {",
                "        DecodeError(DecodeError),",
                "        OutputSliceTooSmall,",
                "    }",
                "",
                "    impl std::fmt::Display for MyError {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
                "            match self {",
                "                Self::DecodeError(e) => write!(f, \"DecodeError: {}\", e.0),",
                "                Self::OutputSliceTooSmall => write!(f, \"Output slice too small\"),",
                "            }",
                "        }",
                "    }",
                "",
                "    let error_instance = MyError::DecodeError(DecodeError(\"Invalid encoding\".to_string()));",
                "    let formatted = format!(\"{}\", error_instance);",
                "    assert_eq!(formatted, \"DecodeError: Invalid encoding\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    enum MyError {",
                "        DecodeError(String),",
                "        OutputSliceTooSmall,",
                "    }",
                "",
                "    impl std::fmt::Display for MyError {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
                "            match self {",
                "                Self::DecodeError(e) => write!(f, \"DecodeError: {}\", e),",
                "                Self::OutputSliceTooSmall => write!(f, \"Output slice too small\"),",
                "            }",
                "        }",
                "    }",
                "",
                "    let error_instance = MyError::OutputSliceTooSmall;",
                "    let formatted = format!(\"{}\", error_instance);",
                "    assert_eq!(formatted, \"Output slice too small\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}