{
  "name": "base64::engine::general_purpose::{impl#0}::new",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/mod.rs:38:5:44:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Alphabet {",
                "        symbols: Vec<u8>,",
                "    }",
                "",
                "    struct GeneralPurposeConfig {",
                "        padding: bool,",
                "    }",
                "",
                "    struct GeneralPurpose {",
                "        encode_table: Vec<u8>,",
                "        decode_table: Vec<u8>,",
                "        config: GeneralPurposeConfig,",
                "    }",
                "",
                "    impl GeneralPurpose {",
                "        pub const fn new(alphabet: &Alphabet, config: GeneralPurposeConfig) -> Self {",
                "            Self {",
                "                encode_table: alphabet.symbols.clone(),",
                "                decode_table: alphabet.symbols.clone(),",
                "                config,",
                "            }",
                "        }",
                "    }",
                "",
                "    let alphabet = Alphabet {",
                "        symbols: b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".to_vec(),",
                "    };",
                "    ",
                "    let config = GeneralPurposeConfig {",
                "        padding: true,",
                "    };",
                "",
                "    let engine = GeneralPurpose::new(&alphabet, config);",
                "    ",
                "    assert_eq!(engine.encode_table.len(), alphabet.symbols.len());",
                "    assert_eq!(engine.decode_table.len(), alphabet.symbols.len());",
                "    assert_eq!(engine.config.padding, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Alphabet {",
                "        symbols: Vec<u8>,",
                "    }",
                "",
                "    struct GeneralPurposeConfig {",
                "        padding: bool,",
                "    }",
                "",
                "    struct GeneralPurpose {",
                "        encode_table: Vec<u8>,",
                "        decode_table: Vec<u8>,",
                "        config: GeneralPurposeConfig,",
                "    }",
                "",
                "    impl GeneralPurpose {",
                "        pub const fn new(alphabet: &Alphabet, config: GeneralPurposeConfig) -> Self {",
                "            Self {",
                "                encode_table: alphabet.symbols.clone(),",
                "                decode_table: alphabet.symbols.clone(),",
                "                config,",
                "            }",
                "        }",
                "    }",
                "",
                "    let empty_alphabet = Alphabet {",
                "        symbols: Vec::new(),",
                "    };",
                "    ",
                "    let config = GeneralPurposeConfig {",
                "        padding: false,",
                "    };",
                "",
                "    let engine = GeneralPurpose::new(&empty_alphabet, config);",
                "    ",
                "    assert_eq!(engine.encode_table.len(), 0);",
                "    assert_eq!(engine.decode_table.len(), 0);",
                "    assert_eq!(engine.config.padding, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}