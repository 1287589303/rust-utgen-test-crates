{
  "name": "base64::engine::general_purpose::{impl#2}::with_encode_padding",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/mod.rs:281:5:286:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Config {",
                "        encode_padding: bool,",
                "    }",
                "    ",
                "    impl Config {",
                "        const fn new(encode_padding: bool) -> Self {",
                "            Self { encode_padding }",
                "        }",
                "",
                "        const fn with_encode_padding(self, padding: bool) -> Self {",
                "            Self {",
                "                encode_padding: padding,",
                "                ..self",
                "            }",
                "        }",
                "    }",
                "",
                "    let config = Config::new(false);",
                "    let updated_config = config.with_encode_padding(true);",
                "    assert_eq!(updated_config.encode_padding, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Config {",
                "        encode_padding: bool,",
                "    }",
                "    ",
                "    impl Config {",
                "        const fn new(encode_padding: bool) -> Self {",
                "            Self { encode_padding }",
                "        }",
                "",
                "        const fn with_encode_padding(self, padding: bool) -> Self {",
                "            Self {",
                "                encode_padding: padding,",
                "                ..self",
                "            }",
                "        }",
                "    }",
                "",
                "    let config = Config::new(true);",
                "    let updated_config = config.with_encode_padding(false);",
                "    assert_eq!(updated_config.encode_padding, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Config {",
                "        encode_padding: bool,",
                "    }",
                "    ",
                "    impl Config {",
                "        const fn new(encode_padding: bool) -> Self {",
                "            Self { encode_padding }",
                "        }",
                "",
                "        const fn with_encode_padding(self, padding: bool) -> Self {",
                "            Self {",
                "                encode_padding: padding,",
                "                ..self",
                "            }",
                "        }",
                "    }",
                "",
                "    let config = Config::new(false);",
                "    let updated_config = config.with_encode_padding(true);",
                "    assert_eq!(updated_config.encode_padding, true);",
                "",
                "    let updated_config_again = updated_config.with_encode_padding(false);",
                "    assert_eq!(updated_config_again.encode_padding, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}