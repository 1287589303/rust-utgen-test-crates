{
  "name": "base64::display::{impl#2}::write_encoded_bytes",
  "mod_info": {
    "name": "display",
    "loc": "src/lib.rs:275:1:275:17"
  },
  "visible": true,
  "loc": "src/display.rs:47:5:52:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug)]",
            "struct MockWriter {",
            "    output: String,",
            "}",
            "",
            "impl MockWriter {",
            "    fn new() -> Self {",
            "        MockWriter {",
            "            output: String::new(),",
            "        }",
            "    }",
            "",
            "    fn write_str(&mut self, s: &str) -> Result<(), std::fmt::Error> {",
            "        self.output.push_str(s);",
            "        Ok(())",
            "    }",
            "}",
            "",
            "struct Base64Display<'a> {",
            "    f: &'a mut MockWriter,",
            "}",
            "",
            "impl<'a> Base64Display<'a> {",
            "    fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), std::fmt::Error> {",
            "        self.f",
            "            .write_str(std::str::from_utf8(encoded).expect(\"base64 data was not utf8\"))",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut writer = MockWriter::new();",
                "    let mut display = Base64Display { f: &mut writer };",
                "    let encoded: &[u8] = b\"SGVsbG8gV29ybGQ=\"; // \"Hello World\" in base64",
                "",
                "    assert!(display.write_encoded_bytes(encoded).is_ok());",
                "    assert_eq!(writer.output, \"SGVsbG8gV29ybGQ=\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut writer = MockWriter::new();",
                "    let mut display = Base64Display { f: &mut writer };",
                "    let encoded: &[u8] = b\"\"; // empty base64",
                "",
                "    assert!(display.write_encoded_bytes(encoded).is_ok());",
                "    assert_eq!(writer.output, \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"base64 data was not utf8\")]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut writer = MockWriter::new();",
                "    let mut display = Base64Display { f: &mut writer };",
                "    let encoded: &[u8] = &[0xff]; // invalid UTF-8 byte",
                "",
                "    display.write_encoded_bytes(encoded).unwrap();",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}