{
  "name": "base64::write::encoder::{impl#1}::into_inner",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/write/encoder.rs:242:5:246:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestWriter {",
                "        content: Vec<u8>,",
                "    }",
                "",
                "    impl TestWriter {",
                "        fn new() -> Self {",
                "            TestWriter { content: Vec::new() }",
                "        }",
                "",
                "        fn write(&mut self, data: &[u8]) {",
                "            self.content.extend_from_slice(data);",
                "        }",
                "    }",
                "",
                "    struct EncoderWriter<W> {",
                "        delegate: Option<W>,",
                "    }",
                "",
                "    impl<W> EncoderWriter<W> {",
                "        fn new(writer: W) -> Self {",
                "            EncoderWriter { delegate: Some(writer) }",
                "        }",
                "",
                "        fn finish(mut self) -> W {",
                "            self.delegate.take().expect(\"Encoder has already been finished\")",
                "        }",
                "",
                "        fn into_inner(mut self) -> W {",
                "            self.delegate",
                "                .take()",
                "                .expect(\"Encoder has already had finish() called\")",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter::new();",
                "    let encoder = EncoderWriter::new(writer);",
                "    ",
                "    let inner_writer = encoder.into_inner();",
                "",
                "    assert!(inner_writer.content.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"Encoder has already had finish() called\")]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestWriter {",
                "        content: Vec<u8>,",
                "    }",
                "",
                "    impl TestWriter {",
                "        fn new() -> Self {",
                "            TestWriter { content: Vec::new() }",
                "        }",
                "    }",
                "",
                "    struct EncoderWriter<W> {",
                "        delegate: Option<W>,",
                "    }",
                "",
                "    impl<W> EncoderWriter<W> {",
                "        fn new(writer: W) -> Self {",
                "            EncoderWriter { delegate: Some(writer) }",
                "        }",
                "",
                "        fn finish(mut self) -> W {",
                "            self.delegate.take().expect(\"Encoder has already been finished\")",
                "        }",
                "",
                "        fn into_inner(mut self) -> W {",
                "            self.delegate",
                "                .take()",
                "                .expect(\"Encoder has already had finish() called\")",
                "        }",
                "    }",
                "",
                "    let writer = TestWriter::new();",
                "    let encoder = EncoderWriter::new(writer);",
                "    let _inner_writer = encoder.finish();",
                "    ",
                "    encoder.into_inner(); // This should panic.",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}