{
  "name": "base64::engine::general_purpose::{impl#1}::internal_encode",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/mod.rs:51:5:168:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Encoder {",
                "        encode_table: [u8; 64],",
                "    }",
                "",
                "    let encoder = Encoder {",
                "        encode_table: b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".to_vec().try_into().unwrap(),",
                "    };",
                "",
                "    let input: &[u8] = &[];",
                "    let mut output = [0u8; 0];",
                "    let result = encoder.internal_encode(input, &mut output);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Encoder {",
                "        encode_table: [u8; 64],",
                "    }",
                "",
                "    let encoder = Encoder {",
                "        encode_table: b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".to_vec().try_into().unwrap(),",
                "    };",
                "",
                "    let input: &[u8] = &[0b00000001];",
                "    let mut output = [0u8; 4];",
                "    let result = encoder.internal_encode(input, &mut output);",
                "    assert_eq!(result, 2);",
                "    assert_eq!(&output[..result], b\"AA==\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Encoder {",
                "        encode_table: [u8; 64],",
                "    }",
                "",
                "    let encoder = Encoder {",
                "        encode_table: b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".to_vec().try_into().unwrap(),",
                "    };",
                "",
                "    let input: &[u8] = &[0b00000001, 0b00000010];",
                "    let mut output = [0u8; 4];",
                "    let result = encoder.internal_encode(input, &mut output);",
                "    assert_eq!(result, 3);",
                "    assert_eq!(&output[..result], b\"AQI=\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Encoder {",
                "        encode_table: [u8; 64],",
                "    }",
                "",
                "    let encoder = Encoder {",
                "        encode_table: b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".to_vec().try_into().unwrap(),",
                "    };",
                "",
                "    let input: &[u8] = &[0b00000001, 0b00000010, 0b00000011];",
                "    let mut output = [0u8; 4];",
                "    let result = encoder.internal_encode(input, &mut output);",
                "    assert_eq!(result, 4);",
                "    assert_eq!(&output[..result], b\"AQID\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Encoder {",
                "        encode_table: [u8; 64],",
                "    }",
                "",
                "    let encoder = Encoder {",
                "        encode_table: b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".to_vec().try_into().unwrap(),",
                "    };",
                "",
                "    let input: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];",
                "    let mut output = [0u8; 16];",
                "    let result = encoder.internal_encode(input, &mut output);",
                "    assert_eq!(result, 16);",
                "    assert_eq!(&output[..result], b\"AAECAwQFBgcICQ==\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}