{
  "name": "base64::chunked_encoder::{impl#2}::write_encoded_bytes",
  "mod_info": {
    "name": "chunked_encoder",
    "loc": "src/lib.rs:274:1:274:21"
  },
  "visible": true,
  "loc": "src/chunked_encoder.rs:66:5:70:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MockEncoder {",
                "        string: String,",
                "    }",
                "",
                "    impl MockEncoder {",
                "        fn new() -> Self {",
                "            MockEncoder {",
                "                string: String::new(),",
                "            }",
                "        }",
                "    }",
                "",
                "    impl base64::WriteEncoded for MockEncoder {",
                "        type Error = std::string::FromUtf8Error;",
                "",
                "        fn write_encoded_bytes(&mut self, s: &[u8]) -> Result<(), Self::Error> {",
                "            self.string.push_str(std::str::from_utf8(s).unwrap());",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut encoder = MockEncoder::new();",
                "    let result = encoder.write_encoded_bytes(b\"Hello, World!\");",
                "    ",
                "    assert!(result.is_ok());",
                "    assert_eq!(encoder.string, \"Hello, World!\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"invalid utf-8 sequence\")]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MockEncoder {",
                "        string: String,",
                "    }",
                "",
                "    impl MockEncoder {",
                "        fn new() -> Self {",
                "            MockEncoder {",
                "                string: String::new(),",
                "            }",
                "        }",
                "    }",
                "",
                "    impl base64::WriteEncoded for MockEncoder {",
                "        type Error = std::string::FromUtf8Error;",
                "",
                "        fn write_encoded_bytes(&mut self, s: &[u8]) -> Result<(), Self::Error> {",
                "            self.string.push_str(std::str::from_utf8(s).unwrap());",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let mut encoder = MockEncoder::new();",
                "    encoder.write_encoded_bytes(&[0, 159, 146, 150]).unwrap(); // Invalid UTF-8",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}