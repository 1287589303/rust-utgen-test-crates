{
  "name": "base64::write::encoder_string_writer::{impl#3}::consume",
  "mod_info": {
    "name": "write::encoder_string_writer",
    "loc": "src/write/mod.rs:3:1:3:27"
  },
  "visible": true,
  "loc": "src/write/encoder_string_writer.rs:100:5:102:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Default)]",
            "struct MockEncoder {",
            "    consumed: String,",
            "}",
            "",
            "impl MockEncoder {",
            "    fn consume(&mut self, buf: &str) {",
            "        self.consumed.push_str(buf);",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut encoder = MockEncoder::default();",
                "    let test_str = \"Hello, World!\";",
                "    ",
                "    encoder.consume(test_str);",
                "    ",
                "    assert_eq!(encoder.consumed, test_str);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut encoder = MockEncoder::default();",
                "    let test_str = \"\";",
                "    ",
                "    encoder.consume(test_str);",
                "    ",
                "    assert_eq!(encoder.consumed, test_str);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let mut encoder = MockEncoder::default();",
                "    encoder.consume(\"First Call, \");",
                "    encoder.consume(\"Second Call.\");",
                "    ",
                "    assert_eq!(encoder.consumed, \"First Call, Second Call.\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}