{
  "name": "base64::write::encoder_string_writer::{impl#5}::write",
  "mod_info": {
    "name": "write::encoder_string_writer",
    "loc": "src/write/mod.rs:3:1:3:27"
  },
  "visible": true,
  "loc": "src/write/encoder_string_writer.rs:120:5:128:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestConsumer {",
                "        output: String,",
                "    }",
                "",
                "    impl TestConsumer {",
                "        fn consume(&mut self, s: &str) {",
                "            self.output.push_str(s);",
                "        }",
                "    }",
                "",
                "    struct EncoderStringWriter {",
                "        str_consumer: TestConsumer,",
                "    }",
                "",
                "    impl EncoderStringWriter {",
                "        fn new() -> Self {",
                "            Self {",
                "                str_consumer: TestConsumer {",
                "                    output: String::new(),",
                "                },",
                "            }",
                "        }",
                "",
                "        fn write(&mut self, buf: &[u8]) -> std::io::Result<usize> {",
                "            let s = std::str::from_utf8(buf).expect(\"Input must be valid UTF-8\");",
                "            self.str_consumer.consume(s);",
                "            Ok(buf.len())",
                "        }",
                "    }",
                "",
                "    let mut writer = EncoderStringWriter::new();",
                "    let input = b\"Valid UTF-8 string\";",
                "    let result = writer.write(input).unwrap();",
                "    ",
                "    assert_eq!(result, input.len());",
                "    assert_eq!(writer.str_consumer.output, \"Valid UTF-8 string\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestConsumer {",
                "        output: String,",
                "    }",
                "",
                "    impl TestConsumer {",
                "        fn consume(&mut self, s: &str) {",
                "            self.output.push_str(s);",
                "        }",
                "    }",
                "",
                "    struct EncoderStringWriter {",
                "        str_consumer: TestConsumer,",
                "    }",
                "",
                "    impl EncoderStringWriter {",
                "        fn new() -> Self {",
                "            Self {",
                "                str_consumer: TestConsumer {",
                "                    output: String::new(),",
                "                },",
                "            }",
                "        }",
                "",
                "        fn write(&mut self, buf: &[u8]) -> std::io::Result<usize> {",
                "            let s = std::str::from_utf8(buf).expect(\"Input must be valid UTF-8\");",
                "            self.str_consumer.consume(s);",
                "            Ok(buf.len())",
                "        }",
                "    }",
                "",
                "    let mut writer = EncoderStringWriter::new();",
                "    let input: &[u8] = &[0xFF]; // Invalid UTF-8 byte",
                "    writer.write(input).unwrap(); // This should panic",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}