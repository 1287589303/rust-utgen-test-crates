{
  "name": "base64::engine::general_purpose::{impl#1}::internal_decoded_len_estimate",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/mod.rs:170:5:172:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug)]",
            "struct GeneralPurposeEstimate {",
            "    length: usize,",
            "}",
            "",
            "impl GeneralPurposeEstimate {",
            "    fn new(length: usize) -> Self {",
            "        GeneralPurposeEstimate { length }",
            "    }",
            "}",
            "",
            "trait EstimateProvider {",
            "    type DecodeEstimate;",
            "",
            "    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;",
            "}",
            "",
            "struct ExampleProvider;",
            "",
            "impl EstimateProvider for ExampleProvider {",
            "    type DecodeEstimate = GeneralPurposeEstimate;",
            "",
            "    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate {",
            "        GeneralPurposeEstimate::new(input_len)",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let provider = ExampleProvider;",
                "    let input_len = 10;",
                "    let estimate = provider.internal_decoded_len_estimate(input_len);",
                "    ",
                "    assert_eq!(estimate.length, input_len);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let provider = ExampleProvider;",
                "    let input_len = 0;",
                "    let estimate = provider.internal_decoded_len_estimate(input_len);",
                "    ",
                "    assert_eq!(estimate.length, input_len);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let provider = ExampleProvider;",
                "    let input_len = usize::MAX;",
                "    let estimate = provider.internal_decoded_len_estimate(input_len);",
                "    ",
                "    assert_eq!(estimate.length, input_len);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}