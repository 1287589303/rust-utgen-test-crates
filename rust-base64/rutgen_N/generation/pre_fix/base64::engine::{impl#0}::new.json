{
  "name": "base64::engine::{impl#0}::new",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:472:5:477:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct {",
                "        decoded_len: usize,",
                "        padding_offset: Option<usize>,",
                "    }",
                "",
                "    impl TestStruct {",
                "        pub(crate) fn new(decoded_bytes: usize, padding_index: Option<usize>) -> Self {",
                "            Self {",
                "                decoded_len: decoded_bytes,",
                "                padding_offset: padding_index,",
                "            }",
                "        }",
                "    }",
                "",
                "    let instance = TestStruct::new(10, Some(2));",
                "    assert_eq!(instance.decoded_len, 10);",
                "    assert_eq!(instance.padding_offset, Some(2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct {",
                "        decoded_len: usize,",
                "        padding_offset: Option<usize>,",
                "    }",
                "",
                "    impl TestStruct {",
                "        pub(crate) fn new(decoded_bytes: usize, padding_index: Option<usize>) -> Self {",
                "            Self {",
                "                decoded_len: decoded_bytes,",
                "                padding_offset: padding_index,",
                "            }",
                "        }",
                "    }",
                "",
                "    let instance = TestStruct::new(5, None);",
                "    assert_eq!(instance.decoded_len, 5);",
                "    assert_eq!(instance.padding_offset, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStruct {",
                "        decoded_len: usize,",
                "        padding_offset: Option<usize>,",
                "    }",
                "",
                "    impl TestStruct {",
                "        pub(crate) fn new(decoded_bytes: usize, padding_index: Option<usize>) -> Self {",
                "            Self {",
                "                decoded_len: decoded_bytes,",
                "                padding_offset: padding_index,",
                "            }",
                "        }",
                "    }",
                "",
                "    let instance = TestStruct::new(0, Some(0));",
                "    assert_eq!(instance.decoded_len, 0);",
                "    assert_eq!(instance.padding_offset, Some(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}