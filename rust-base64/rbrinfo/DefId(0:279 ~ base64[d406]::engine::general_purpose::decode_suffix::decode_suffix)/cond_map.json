{
  "src/engine/general_purpose/decode_suffix.rs:126:28:128:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(u32::from(morsels[0]) << 26)\n        | (u32::from(morsels[1]) << 20)\n        | (u32::from(morsels[2]) << 14)",
          "lhs": "(u32::from(morsels[0]) << 26)\n        | (u32::from(morsels[1]) << 20)",
          "rhs": "(u32::from(morsels[2]) << 14)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:128:11:128:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(u32::from(morsels[2]) << 14)",
          "lhs": "u32::from(morsels[2])",
          "rhs": "14",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:134:39:134:65": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "(leftover_num & mask) != 0",
          "lhs": "(leftover_num & mask)",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:80:12:80:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "morsel == INVALID_VALUE",
          "lhs": "morsel",
          "rhs": "INVALID_VALUE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:123:36:123:63": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "morsels_in_leftover * 6 / 8",
          "lhs": "morsels_in_leftover * 6",
          "rhs": "8",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:137:13:137:50": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_index + morsels_in_leftover - 1",
          "lhs": "input_index + morsels_in_leftover",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:90:9:90:25": [
    {
      "Bool": {
        "Other": "input.is_empty()"
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:98:16:98:68": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ne",
          "expr": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "lhs": "(padding_bytes_count + morsels_in_leftover) % 4",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:133:26:133:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(leftover_bytes_to_append * 8)",
          "lhs": "leftover_bytes_to_append",
          "rhs": "8",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:126:28:126:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(u32::from(morsels[0]) << 26)",
          "lhs": "u32::from(morsels[0])",
          "rhs": "26",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:20:19:20:51": [
    {
      "Bool": {
        "Binary": {
          "kind": "Le",
          "expr": "(input.len() - input_index) <= 4",
          "lhs": "(input.len() - input_index)",
          "rhs": "4",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:98:16:98:63": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(padding_bytes_count + morsels_in_leftover) % 4",
          "lhs": "(padding_bytes_count + morsels_in_leftover)",
          "rhs": "4",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:129:11:129:39": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(u32::from(morsels[3]) << 8)",
          "lhs": "u32::from(morsels[3])",
          "rhs": "8",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:94:11:94:23": [
    {
      "Match": {
        "match_source": "src/engine/general_purpose/decode_suffix.rs:94:11:94:23",
        "match_str": "padding_mode",
        "match_kind": {
          "Enum": [
            "Indifferent",
            "RequireCanonical",
            "RequireNone"
          ]
        },
        "arms": {
          "src/engine/general_purpose/decode_suffix.rs:96:9:96:44": {
            "pat": {
              "pat_str": "DecodePaddingMode::RequireCanonical",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "src/engine/general_purpose/decode_suffix.rs:96:48:101:10"
          },
          "src/engine/general_purpose/decode_suffix.rs:102:9:102:39": {
            "pat": {
              "pat_str": "DecodePaddingMode::RequireNone",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "src/engine/general_purpose/decode_suffix.rs:102:43:108:10"
          },
          "src/engine/general_purpose/decode_suffix.rs:95:9:95:39": {
            "pat": {
              "pat_str": "DecodePaddingMode::Indifferent",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "src/engine/general_purpose/decode_suffix.rs:95:43:95:97"
          }
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:134:39:134:60": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(leftover_num & mask)",
          "lhs": "leftover_num",
          "rhs": "mask",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:81:49:81:77": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_index + leftover_index",
          "lhs": "input_index",
          "rhs": "leftover_index",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:146:23:146:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(leftover_num >> 24)",
          "lhs": "leftover_num",
          "rhs": "24",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:69:12:69:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "padding_bytes_count > 0",
          "lhs": "padding_bytes_count",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:157:18:157:52": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_index + first_padding_offset",
          "lhs": "input_index",
          "rhs": "first_padding_offset",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:20:19:20:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(input.len() - input_index)",
          "lhs": "input.len()",
          "rhs": "input_index",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:90:29:90:52": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "morsels_in_leftover < 2",
          "lhs": "morsels_in_leftover",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:126:28:127:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(u32::from(morsels[0]) << 26)\n        | (u32::from(morsels[1]) << 20)",
          "lhs": "(u32::from(morsels[0]) << 26)",
          "rhs": "(u32::from(morsels[1]) << 20)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:51:45:51:64": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "leftover_index == 1",
          "lhs": "leftover_index",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:71:42:71:76": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_index + first_padding_offset",
          "lhs": "input_index",
          "rhs": "first_padding_offset",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:51:21:51:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "leftover_index == 0",
          "lhs": "leftover_index",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:31:33:31:72": [
    {
      "For": {
        "iter_var": "(leftover_index, &b)",
        "iter_range": "input[input_index..].iter().enumerate()"
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:126:28:129:39": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(u32::from(morsels[0]) << 26)\n        | (u32::from(morsels[1]) << 20)\n        | (u32::from(morsels[2]) << 14)\n        | (u32::from(morsels[3]) << 8)",
          "lhs": "(u32::from(morsels[0]) << 26)\n        | (u32::from(morsels[1]) << 20)\n        | (u32::from(morsels[2]) << 14)",
          "rhs": "(u32::from(morsels[3]) << 8)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:148:10:150:59": [
    {
      "Try": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?"
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:91:47:91:80": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_index + morsels_in_leftover",
          "lhs": "input_index",
          "rhs": "morsels_in_leftover",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:57:16:57:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "padding_bytes_count == 0",
          "lhs": "padding_bytes_count",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:53:41:53:69": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_index + leftover_index",
          "lhs": "input_index",
          "rhs": "leftover_index",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:133:16:133:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "!0_u32 >> (leftover_bytes_to_append * 8)",
          "lhs": "!0_u32",
          "rhs": "(leftover_bytes_to_append * 8)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:103:16:103:39": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "padding_bytes_count > 0",
          "lhs": "padding_bytes_count",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:123:36:123:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "morsels_in_leftover * 6",
          "lhs": "morsels_in_leftover",
          "rhs": "6",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:134:9:134:35": [
    {
      "Bool": {
        "Other": "decode_allow_trailing_bits"
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:46:16:46:34": [
    {
      "Bool": {
        "Binary": {
          "kind": "Lt",
          "expr": "leftover_index < 2",
          "lhs": "leftover_index",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12:316:42": [
    {
      "Bool": {
        "Other": "$crate::cfg!(debug_assertions)"
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:156:12:156:35": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "padding_bytes_count > 0",
          "lhs": "padding_bytes_count",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:51:68:51:92": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "padding_bytes_count == 0",
          "lhs": "padding_bytes_count",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:98:16:98:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(padding_bytes_count + morsels_in_leftover)",
          "lhs": "padding_bytes_count",
          "rhs": "morsels_in_leftover",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:127:11:127:40": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(u32::from(morsels[1]) << 20)",
          "lhs": "u32::from(morsels[1])",
          "rhs": "20",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:145:14:145:41": [
    {
      "For": {
        "iter_var": "_",
        "iter_range": "0..leftover_bytes_to_append"
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:137:13:137:46": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_index + morsels_in_leftover",
          "lhs": "input_index",
          "rhs": "morsels_in_leftover",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode_suffix.rs:33:12:33:25": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "b == PAD_BYTE",
          "lhs": "b",
          "rhs": "PAD_BYTE",
          "cmp_with_int": false
        }
      }
    }
  ]
}