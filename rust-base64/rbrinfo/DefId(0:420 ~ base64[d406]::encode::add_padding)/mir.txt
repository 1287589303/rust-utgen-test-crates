bb0
  0: StorageLive(_3)
    SourceInfo(src/encode.rs:134:9-134:18)
  1: StorageLive(_4)
    SourceInfo(src/encode.rs:134:21-134:52)
  2: StorageLive(_5)
    SourceInfo(src/encode.rs:134:26-134:51)
  3: StorageLive(_6)
    SourceInfo(src/encode.rs:134:27-134:46)
  4: _6 = _1
    SourceInfo(src/encode.rs:134:27-134:46)
  5: _7 = Eq(const 4_usize, const 0_usize)
    SourceInfo(src/encode.rs:134:26-134:51)
  Terminator {
      source_info: SourceInfo(src/encode.rs:134:26-134:51)
      kind: assert(!move _7, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> [success: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: _5 = Rem(move _6, const 4_usize)
    SourceInfo(src/encode.rs:134:26-134:51)
  1: StorageDead(_6)
    SourceInfo(src/encode.rs:134:50-134:51)
  2: _8 = SubWithOverflow(const 4_usize, _5)
    SourceInfo(src/encode.rs:134:21-134:52)
  Terminator {
      source_info: SourceInfo(src/encode.rs:134:21-134:52)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", const 4_usize, move _5) -> [success: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: _4 = move (_8.0: usize)
    SourceInfo(src/encode.rs:134:21-134:52)
  1: StorageDead(_5)
    SourceInfo(src/encode.rs:134:51-134:52)
  2: _9 = Eq(const 4_usize, const 0_usize)
    SourceInfo(src/encode.rs:134:21-134:56)
  Terminator {
      source_info: SourceInfo(src/encode.rs:134:21-134:56)
      kind: assert(!move _9, "attempt to calculate the remainder of `{}` with a divisor of zero", _4) -> [success: bb3, unwind: bb13]
  }
  preds [bb1]
  succs [bb3, bb13]

bb3
  0: _3 = Rem(move _4, const 4_usize)
    SourceInfo(src/encode.rs:134:21-134:56)
  1: StorageDead(_4)
    SourceInfo(src/encode.rs:134:55-134:56)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(src/encode.rs:134:9-134:18)
  3: StorageLive(_10)
    SourceInfo(src/encode.rs:138:5-140:6)
  4: StorageLive(_11)
    SourceInfo(src/encode.rs:138:14-138:26)
  5: StorageLive(_12)
    SourceInfo(src/encode.rs:138:14-138:26)
  6: StorageLive(_13)
    SourceInfo(src/encode.rs:138:17-138:26)
  7: _13 = _3
    SourceInfo(src/encode.rs:138:17-138:26)
  8: _12 = std::ops::Range::<usize> { start: const 0_usize, end: move _13 }
    SourceInfo(src/encode.rs:138:14-138:26)
  9: StorageDead(_13)
    SourceInfo(src/encode.rs:138:25-138:26)
  Terminator {
      source_info: SourceInfo(src/encode.rs:138:14-138:26)
      kind: _11 = <std::ops::Range<usize> as std::iter::IntoIterator>::into_iter(move _12) -> [return: bb4, unwind: bb13]
  }
  preds [bb2]
  succs [bb4, bb13]

bb4
  0: StorageDead(_12)
    SourceInfo(src/encode.rs:138:25-138:26)
  1: PlaceMention(_11)
    SourceInfo(src/encode.rs:138:14-138:26)
  2: StorageLive(_14)
    SourceInfo(src/encode.rs:138:14-138:26)
  3: _14 = move _11
    SourceInfo(src/encode.rs:138:14-138:26)
  Terminator {
      source_info: SourceInfo(src/encode.rs:138:5-140:6)
      kind: goto -> bb5
  }
  preds [bb3]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(src/encode.rs:138:5-140:6)
      kind: falseUnwind -> [real: bb6, unwind: bb13]
  }
  preds [bb4, bb12]
  succs [bb6, bb13]

bb6
  0: StorageLive(_16)
    SourceInfo(src/encode.rs:138:14-138:26)
  1: StorageLive(_17)
    SourceInfo(src/encode.rs:138:14-138:26)
  2: StorageLive(_18)
    SourceInfo(src/encode.rs:138:14-138:26)
  3: StorageLive(_19)
    SourceInfo(src/encode.rs:138:14-138:26)
  4: _19 = &mut _14
    SourceInfo(src/encode.rs:138:14-138:26)
  5: _18 = &mut (*_19)
    SourceInfo(src/encode.rs:138:14-138:26)
  Terminator {
      source_info: SourceInfo(src/encode.rs:138:14-138:26)
      kind: _17 = <std::ops::Range<usize> as std::iter::Iterator>::next(move _18) -> [return: bb7, unwind: bb13]
  }
  preds [bb5]
  succs [bb7, bb13]

bb7
  0: StorageDead(_18)
    SourceInfo(src/encode.rs:138:25-138:26)
  1: PlaceMention(_17)
    SourceInfo(src/encode.rs:138:14-138:26)
  2: _20 = discriminant(_17)
    SourceInfo(src/encode.rs:138:14-138:26)
  Terminator {
      source_info: SourceInfo(src/encode.rs:138:14-138:26)
      kind: switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9, bb10]

bb8
  0: FakeRead(ForMatchedPlace(None), _17)
    SourceInfo(src/encode.rs:138:14-138:26)
  Terminator {
      source_info: SourceInfo(src/encode.rs:138:14-138:26)
      kind: unreachable
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/encode.rs:138:5-140:6)
      kind: falseEdge -> [real: bb11, imaginary: bb10]
  }
  preds [bb7]
  succs [bb10, bb11]

bb10
  0: StorageLive(_22)
    SourceInfo(src/encode.rs:138:9-138:10)
  1: _22 = ((_17 as Some).0: usize)
    SourceInfo(src/encode.rs:138:9-138:10)
  2: StorageLive(_23)
    SourceInfo(src/encode.rs:139:16-139:17)
  3: _23 = _22
    SourceInfo(src/encode.rs:139:16-139:17)
  4: _24 = Len((*_2))
    SourceInfo(src/encode.rs:139:9-139:18)
  5: _25 = Lt(_23, _24)
    SourceInfo(src/encode.rs:139:9-139:18)
  Terminator {
      source_info: SourceInfo(src/encode.rs:139:9-139:18)
      kind: assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb12, unwind: bb13]
  }
  preds [bb7, bb9]
  succs [bb12, bb13]

bb11
  0: _10 = const ()
    SourceInfo(src/encode.rs:138:5-140:6)
  1: StorageDead(_19)
    SourceInfo(src/encode.rs:140:5-140:6)
  2: StorageDead(_17)
    SourceInfo(src/encode.rs:140:5-140:6)
  3: StorageDead(_16)
    SourceInfo(src/encode.rs:140:5-140:6)
  4: StorageDead(_14)
    SourceInfo(src/encode.rs:140:5-140:6)
  5: StorageDead(_11)
    SourceInfo(src/encode.rs:140:5-140:6)
  6: StorageDead(_10)
    SourceInfo(src/encode.rs:140:5-140:6)
  7: _0 = _3
    SourceInfo(src/encode.rs:142:5-142:14)
  8: StorageDead(_3)
    SourceInfo(src/encode.rs:143:1-143:2)
  Terminator {
      source_info: SourceInfo(src/encode.rs:143:2-143:2)
      kind: return
  }
  preds [bb9]
  succs []

bb12
  0: (*_2)[_23] = const PAD_BYTE
    SourceInfo(src/encode.rs:139:9-139:29)
  1: StorageDead(_23)
    SourceInfo(src/encode.rs:139:29-139:30)
  2: _16 = const ()
    SourceInfo(src/encode.rs:138:27-140:6)
  3: StorageDead(_22)
    SourceInfo(src/encode.rs:140:5-140:6)
  4: StorageDead(_19)
    SourceInfo(src/encode.rs:140:5-140:6)
  5: StorageDead(_17)
    SourceInfo(src/encode.rs:140:5-140:6)
  6: StorageDead(_16)
    SourceInfo(src/encode.rs:140:5-140:6)
  7: _15 = const ()
    SourceInfo(src/encode.rs:138:5-140:6)
  Terminator {
      source_info: SourceInfo(src/encode.rs:138:5-140:6)
      kind: goto -> bb5
  }
  preds [bb10]
  succs [bb5]

bb13
  Terminator {
      source_info: SourceInfo(src/encode.rs:133:1-143:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb5, bb6, bb10]
  succs []

