{
  "name": "base64::engine::Engine::encode",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:115:5:131:6",
  "doc": "/// Encode arbitrary octets as base64 using the provided `Engine`.\n/// Returns a `String`.\n///\n/// # Example\n///\n/// ```rust\n/// use base64::{Engine as _, engine::{self, general_purpose}, alphabet};\n///\n/// let b64 = general_purpose::STANDARD.encode(b\"hello world~\");\n/// println!(\"{}\", b64);\n///\n/// const CUSTOM_ENGINE: engine::GeneralPurpose =\n///     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);\n///\n/// let b64_url = CUSTOM_ENGINE.encode(b\"hello internet~\");\n/// ```\n",
  "code": [
    "fn encode<T: AsRef<[u8]>>(&self, input: T) -> String {",
    "    fn inner<E>(engine: &E, input_bytes: &[u8]) -> String",
    "    where",
    "        E: Engine + ?Sized,",
    "    {",
    "        let encoded_size = encoded_len(input_bytes.len(), engine.config().encode_padding())",
    "            .expect(\"integer overflow when calculating buffer size\");",
    "",
    "        let mut buf = vec![0; encoded_size];",
    "",
    "        encode_with_padding(input_bytes, &mut buf[..], engine, encoded_size);",
    "",
    "        String::from_utf8(buf).expect(\"Invalid UTF8\")",
    "    }",
    "",
    "    inner(self, input.as_ref())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}