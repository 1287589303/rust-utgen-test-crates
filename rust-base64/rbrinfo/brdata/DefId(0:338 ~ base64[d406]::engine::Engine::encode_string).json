{
  "name": "base64::engine::Engine::encode_string",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:155:5:168:6",
  "doc": "/// Encode arbitrary octets as base64 into a supplied `String`.\n/// Writes into the supplied `String`, which may allocate if its internal buffer isn't big enough.\n///\n/// # Example\n///\n/// ```rust\n/// use base64::{Engine as _, engine::{self, general_purpose}, alphabet};\n/// const CUSTOM_ENGINE: engine::GeneralPurpose =\n///     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);\n///\n/// fn main() {\n///     let mut buf = String::new();\n///     general_purpose::STANDARD.encode_string(b\"hello world~\", &mut buf);\n///     println!(\"{}\", buf);\n///\n///     buf.clear();\n///     CUSTOM_ENGINE.encode_string(b\"hello internet~\", &mut buf);\n///     println!(\"{}\", buf);\n/// }\n/// ```\n",
  "code": [
    "fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String) {",
    "    fn inner<E>(engine: &E, input_bytes: &[u8], output_buf: &mut String)",
    "    where",
    "        E: Engine + ?Sized,",
    "    {",
    "        let mut sink = chunked_encoder::StringSink::new(output_buf);",
    "",
    "        chunked_encoder::ChunkedEncoder::new(engine)",
    "            .encode(input_bytes, &mut sink)",
    "            .expect(\"Writing to a String shouldn't fail\");",
    "    }",
    "",
    "    inner(self, input.as_ref(), output_buf);",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}