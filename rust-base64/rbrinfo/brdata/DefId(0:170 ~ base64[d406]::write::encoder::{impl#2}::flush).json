{
  "name": "base64::write::encoder::{impl#2}::flush",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/write/encoder.rs:393:5:399:6",
  "doc": "/// Because this is usually treated as OK to call multiple times, it will *not* flush any\n/// incomplete chunks of input or write padding.\n/// # Errors\n///\n/// The first error that is not of [`ErrorKind::Interrupted`] will be returned.\n",
  "code": [
    "fn flush(&mut self) -> Result<()> {",
    "    self.write_all_encoded_output()?;",
    "    self.delegate",
    "        .as_mut()",
    "        .expect(\"Writer must be present\")",
    "        .flush()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.write_all_encoded_output()?",
          "norm": null,
          "value": "Err/None",
          "line": 394,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.write_all_encoded_output()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 394,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}