{
  "name": "base64::engine::Engine::decode_vec",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:302:5:339:6",
  "doc": "/// Decode the `input` into the supplied `buffer`.\n///\n/// Writes into the supplied `Vec`, which may allocate if its internal buffer isn't big enough.\n/// Returns a `Result` containing an empty tuple, aka `()`.\n///\n/// # Example\n///\n/// ```rust\n/// use base64::{Engine as _, alphabet, engine::{self, general_purpose}};\n/// const CUSTOM_ENGINE: engine::GeneralPurpose =\n///     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::PAD);\n///\n/// fn main() {\n///     use base64::Engine;\n///     let mut buffer = Vec::<u8>::new();\n///     // with the default engine\n///     general_purpose::STANDARD\n///         .decode_vec(\"aGVsbG8gd29ybGR+Cg==\", &mut buffer,).unwrap();\n///     println!(\"{:?}\", buffer);\n///\n///     buffer.clear();\n///\n///     // with a custom engine\n///     CUSTOM_ENGINE.decode_vec(\n///         \"aGVsbG8gaW50ZXJuZXR-Cg==\",\n///         &mut buffer,\n///     ).unwrap();\n///     println!(\"{:?}\", buffer);\n/// }\n/// ```\n",
  "code": [
    "fn decode_vec<T: AsRef<[u8]>>(",
    "    &self,",
    "    input: T,",
    "    buffer: &mut Vec<u8>,",
    ") -> Result<(), DecodeError> {",
    "    fn inner<E>(engine: &E, input_bytes: &[u8], buffer: &mut Vec<u8>) -> Result<(), DecodeError>",
    "    where",
    "        E: Engine + ?Sized,",
    "    {",
    "        let starting_output_len = buffer.len();",
    "        let estimate = engine.internal_decoded_len_estimate(input_bytes.len());",
    "",
    "        let total_len_estimate = estimate",
    "            .decoded_len_estimate()",
    "            .checked_add(starting_output_len)",
    "            .expect(\"Overflow when calculating output buffer length\");",
    "",
    "        buffer.resize(total_len_estimate, 0);",
    "",
    "        let buffer_slice = &mut buffer.as_mut_slice()[starting_output_len..];",
    "",
    "        let bytes_written = engine",
    "            .internal_decode(input_bytes, buffer_slice, estimate)",
    "            .map_err(|e| match e {",
    "                DecodeSliceError::DecodeError(e) => e,",
    "                DecodeSliceError::OutputSliceTooSmall => {",
    "                    unreachable!(\"Vec is sized conservatively\")",
    "                }",
    "            })?",
    "            .decoded_len;",
    "",
    "        buffer.truncate(starting_output_len + bytes_written);",
    "",
    "        Ok(())",
    "    }",
    "",
    "    inner(self, input.as_ref(), buffer)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}