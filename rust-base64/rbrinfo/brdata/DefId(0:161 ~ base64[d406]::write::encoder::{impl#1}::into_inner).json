{
  "name": "base64::write::encoder::{impl#1}::into_inner",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/write/encoder.rs:242:5:246:6",
  "doc": "/// Unwraps this `EncoderWriter`, returning the base writer it writes base64 encoded output\n/// to.\n///\n/// Normally this method should not be needed, since `finish()` returns the inner writer if\n/// it completes successfully. That will also ensure all data has been flushed, which the\n/// `into_inner()` function does *not* do.\n///\n/// Calling this method after `finish()` has completed successfully will panic, since the\n/// writer has already been returned.\n///\n/// This method may be useful if the writer implements additional APIs beyond the `Write`\n/// trait. Note that the inner writer might be in an error state or have an incomplete\n/// base64 string written to it.\n",
  "code": [
    "pub fn into_inner(mut self) -> W {",
    "    self.delegate",
    "        .take()",
    "        .expect(\"Encoder has already had finish() called\")",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}