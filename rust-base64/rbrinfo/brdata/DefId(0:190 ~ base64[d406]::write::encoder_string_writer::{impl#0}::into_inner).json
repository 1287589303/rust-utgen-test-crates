{
  "name": "base64::write::encoder_string_writer::{impl#0}::into_inner",
  "mod_info": {
    "name": "write::encoder_string_writer",
    "loc": "src/write/mod.rs:3:1:3:27"
  },
  "visible": true,
  "loc": "src/write/encoder_string_writer.rs:67:5:72:6",
  "doc": "/// Encode all remaining buffered data, including any trailing incomplete input triples and\n/// associated padding.\n///\n/// Returns the base64-encoded form of the accumulated written data.\n",
  "code": [
    "pub fn into_inner(mut self) -> S {",
    "    self.encoder",
    "        .finish()",
    "        .expect(\"Writing to a consumer should never fail\")",
    "        .str_consumer",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.encoder\n            .finish()\n            .expect(\"Writing to a consumer should never fail\")\n            .str_consumer",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}