{
  "name": "base64::chunked_encoder::{impl#0}::encode",
  "mod_info": {
    "name": "chunked_encoder",
    "loc": "src/lib.rs:274:1:274:21"
  },
  "visible": true,
  "loc": "src/chunked_encoder.rs:28:5:46:6",
  "doc": "",
  "code": [
    "pub fn encode<S: Sink>(&self, bytes: &[u8], sink: &mut S) -> Result<(), S::Error> {",
    "    const BUF_SIZE: usize = 1024;",
    "    const CHUNK_SIZE: usize = BUF_SIZE / 4 * 3;",
    "",
    "    let mut buf = [0; BUF_SIZE];",
    "    for chunk in bytes.chunks(CHUNK_SIZE) {",
    "        let mut len = self.engine.internal_encode(chunk, &mut buf);",
    "        if chunk.len() != CHUNK_SIZE && self.engine.config().encode_padding() {",
    "            // Final, potentially partial, chunk.",
    "            // Only need to consider if padding is needed on a partial chunk since full chunk",
    "            // is a multiple of 3, which therefore won't be padded.",
    "            // Pad output to multiple of four bytes if required by config.",
    "            len += add_padding(len, &mut buf[len..]);",
    "        }",
    "        sink.write_encoded_bytes(&buf[..len])?;",
    "    }",
    "",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 3,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "chunk in bytes.chunks(CHUNK_SIZE)",
          "norm": null,
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "chunk.len() != CHUNK_SIZE",
          "norm": "CHUNK_SIZE != chunk.len()",
          "value": "true",
          "line": 35,
          "bound": null
        },
        {
          "cond": "self.engine.config().encode_padding()",
          "norm": null,
          "value": "true",
          "line": 35,
          "bound": null
        },
        {
          "cond": "sink.write_encoded_bytes(&buf[..len])?",
          "norm": null,
          "value": "Err/None",
          "line": 42,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        27,
        29,
        30,
        32,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "chunk in bytes.chunks(CHUNK_SIZE)",
          "norm": null,
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "chunk.len() != CHUNK_SIZE",
          "norm": "CHUNK_SIZE != chunk.len()",
          "value": "true",
          "line": 35,
          "bound": null
        },
        {
          "cond": "self.engine.config().encode_padding()",
          "norm": null,
          "value": "true",
          "line": 35,
          "bound": null
        },
        {
          "cond": "sink.write_encoded_bytes(&buf[..len])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 42,
          "bound": null
        },
        {
          "cond": "chunk in bytes.chunks(CHUNK_SIZE)",
          "norm": null,
          "value": "false",
          "line": 33,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        28,
        31,
        3,
        4,
        5,
        7,
        9,
        34
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "chunk in bytes.chunks(CHUNK_SIZE)",
          "norm": null,
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "chunk.len() != CHUNK_SIZE",
          "norm": "CHUNK_SIZE != chunk.len()",
          "value": "true",
          "line": 35,
          "bound": null
        },
        {
          "cond": "self.engine.config().encode_padding()",
          "norm": null,
          "value": "false",
          "line": 35,
          "bound": null
        },
        {
          "cond": "sink.write_encoded_bytes(&buf[..len])?",
          "norm": null,
          "value": "Err/None",
          "line": 42,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        14,
        19,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        30,
        32,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "chunk in bytes.chunks(CHUNK_SIZE)",
          "norm": null,
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "chunk.len() != CHUNK_SIZE",
          "norm": "CHUNK_SIZE != chunk.len()",
          "value": "true",
          "line": 35,
          "bound": null
        },
        {
          "cond": "self.engine.config().encode_padding()",
          "norm": null,
          "value": "false",
          "line": 35,
          "bound": null
        },
        {
          "cond": "sink.write_encoded_bytes(&buf[..len])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 42,
          "bound": null
        },
        {
          "cond": "chunk in bytes.chunks(CHUNK_SIZE)",
          "norm": null,
          "value": "false",
          "line": 33,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        13,
        14,
        19,
        21,
        22,
        23,
        24,
        25,
        28,
        31,
        3,
        4,
        5,
        7,
        9,
        34
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "chunk in bytes.chunks(CHUNK_SIZE)",
          "norm": null,
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "chunk.len() != CHUNK_SIZE",
          "norm": "CHUNK_SIZE != chunk.len()",
          "value": "false",
          "line": 35,
          "bound": null
        },
        {
          "cond": "sink.write_encoded_bytes(&buf[..len])?",
          "norm": null,
          "value": "Err/None",
          "line": 42,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        30,
        32,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "chunk in bytes.chunks(CHUNK_SIZE)",
          "norm": null,
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "chunk.len() != CHUNK_SIZE",
          "norm": "CHUNK_SIZE != chunk.len()",
          "value": "false",
          "line": 35,
          "bound": null
        },
        {
          "cond": "sink.write_encoded_bytes(&buf[..len])?",
          "norm": null,
          "value": "Ok/Some",
          "line": 42,
          "bound": null
        },
        {
          "cond": "chunk in bytes.chunks(CHUNK_SIZE)",
          "norm": null,
          "value": "false",
          "line": 33,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        31,
        3,
        4,
        5,
        7,
        9,
        34
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "chunk in bytes.chunks(CHUNK_SIZE)",
          "norm": null,
          "value": "false",
          "line": 33,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        34
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}