{
  "name": "base64::engine::general_purpose::decode::complete_quads_len",
  "mod_info": {
    "name": "engine::general_purpose::decode",
    "loc": "src/engine/general_purpose/mod.rs:12:1:12:23"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/decode.rs:131:1:163:2",
  "doc": "/// Returns the length of complete quads, except for the last one, even if it is complete.\n///\n/// Returns an error if the output len is not big enough for decoding those complete quads, or if\n/// the input % 4 == 1, and that last byte is an invalid value other than a pad byte.\n///\n/// - `input` is the base64 input\n/// - `input_len_rem` is input len % 4\n/// - `output_len` is the length of the output slice\n",
  "code": [
    "pub(crate) fn complete_quads_len(",
    "    input: &[u8],",
    "    input_len_rem: usize,",
    "    output_len: usize,",
    "    decode_table: &[u8; 256],",
    ") -> Result<usize, DecodeSliceError> {",
    "    debug_assert!(input.len() % 4 == input_len_rem);",
    "",
    "    // detect a trailing invalid byte, like a newline, as a user convenience",
    "    if input_len_rem == 1 {",
    "        let last_byte = input[input.len() - 1];",
    "        // exclude pad bytes; might be part of padding that extends from earlier in the input",
    "        if last_byte != PAD_BYTE && decode_table[usize::from(last_byte)] == INVALID_VALUE {",
    "            return Err(DecodeError::InvalidByte(input.len() - 1, last_byte).into());",
    "        }",
    "    };",
    "",
    "    // skip last quad, even if it's complete, as it may have padding",
    "    let input_complete_nonterminal_quads_len = input",
    "        .len()",
    "        .saturating_sub(input_len_rem)",
    "        // if rem was 0, subtract 4 to avoid padding",
    "        .saturating_sub(usize::from(input_len_rem == 0) * 4);",
    "    debug_assert!(",
    "        input.is_empty() || (1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))",
    "    );",
    "",
    "    // check that everything except the last quad handled by decode_suffix will fit",
    "    if output_len < input_complete_nonterminal_quads_len / 4 * 3 {",
    "        return Err(DecodeSliceError::OutputSliceTooSmall);",
    "    };",
    "    Ok(input_complete_nonterminal_quads_len)",
    "}"
  ],
  "size": {
    "chain": 17,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "decode_table[usize::from(last_byte)] == INVALID_VALUE",
          "norm": "INVALID_VALUE == decode_table[usize::from(last_byte)]",
          "value": "true",
          "line": 143,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(input.len() - 1, last_byte).into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "decode_table[usize::from(last_byte)] == INVALID_VALUE",
          "norm": "INVALID_VALUE == decode_table[usize::from(last_byte)]",
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Err(DecodeSliceError::OutputSliceTooSmall)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        39,
        41,
        42,
        43,
        44,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "decode_table[usize::from(last_byte)] == INVALID_VALUE",
          "norm": "INVALID_VALUE == decode_table[usize::from(last_byte)]",
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "false",
          "line": 159,
          "bound": "output_len == input_complete_nonterminal_quads_len / 4 * 3"
        }
      ],
      "ret": "Ok(input_complete_nonterminal_quads_len)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        39,
        41,
        42,
        43,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "decode_table[usize::from(last_byte)] == INVALID_VALUE",
          "norm": "INVALID_VALUE == decode_table[usize::from(last_byte)]",
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        },
        {
          "cond": "(1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Err(DecodeSliceError::OutputSliceTooSmall)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "decode_table[usize::from(last_byte)] == INVALID_VALUE",
          "norm": "INVALID_VALUE == decode_table[usize::from(last_byte)]",
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        },
        {
          "cond": "(1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "false",
          "line": 159,
          "bound": "output_len == input_complete_nonterminal_quads_len / 4 * 3"
        }
      ],
      "ret": "Ok(input_complete_nonterminal_quads_len)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        45,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "true",
          "line": 143,
          "bound": null
        },
        {
          "cond": "decode_table[usize::from(last_byte)] == INVALID_VALUE",
          "norm": "INVALID_VALUE == decode_table[usize::from(last_byte)]",
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        },
        {
          "cond": "(1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        19,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        38,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Err(DecodeSliceError::OutputSliceTooSmall)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        39,
        41,
        42,
        43,
        44,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "false",
          "line": 159,
          "bound": "output_len == input_complete_nonterminal_quads_len / 4 * 3"
        }
      ],
      "ret": "Ok(input_complete_nonterminal_quads_len)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        39,
        41,
        42,
        43,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        },
        {
          "cond": "(1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Err(DecodeSliceError::OutputSliceTooSmall)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        },
        {
          "cond": "(1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "false",
          "line": 159,
          "bound": "output_len == input_complete_nonterminal_quads_len / 4 * 3"
        }
      ],
      "ret": "Ok(input_complete_nonterminal_quads_len)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "last_byte != PAD_BYTE",
          "norm": "PAD_BYTE != last_byte",
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        },
        {
          "cond": "(1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        20,
        21,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        38,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "true",
          "line": 140,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Err(DecodeSliceError::OutputSliceTooSmall)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        39,
        41,
        42,
        43,
        44,
        46
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "true",
          "line": 140,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "false",
          "line": 159,
          "bound": "output_len == input_complete_nonterminal_quads_len / 4 * 3"
        }
      ],
      "ret": "Ok(input_complete_nonterminal_quads_len)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        39,
        41,
        42,
        43,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "true",
          "line": 140,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        },
        {
          "cond": "(1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Err(DecodeSliceError::OutputSliceTooSmall)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "true",
          "line": 140,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        },
        {
          "cond": "(1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))",
          "norm": null,
          "value": "true",
          "line": 155,
          "bound": null
        },
        {
          "cond": "output_len < input_complete_nonterminal_quads_len / 4 * 3",
          "norm": "input_complete_nonterminal_quads_len / 4 * 3 > output_len",
          "value": "false",
          "line": 159,
          "bound": "output_len == input_complete_nonterminal_quads_len / 4 * 3"
        }
      ],
      "ret": "Ok(input_complete_nonterminal_quads_len)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        45,
        46
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_len_rem == 1",
          "norm": "1 == input_len_rem",
          "value": "true",
          "line": 140,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        },
        {
          "cond": "(1..=4).contains(&(input.len() - input_complete_nonterminal_quads_len))",
          "norm": null,
          "value": "false",
          "line": 155,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        38,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "input.len() % 4 == input_len_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        47
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}