{
  "name": "base64::engine::general_purpose::{impl#1}::internal_encode",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/mod.rs:51:5:168:6",
  "doc": "",
  "code": [
    "fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize {",
    "    let mut input_index: usize = 0;",
    "",
    "    const BLOCKS_PER_FAST_LOOP: usize = 4;",
    "    const LOW_SIX_BITS: u64 = 0x3F;",
    "",
    "    // we read 8 bytes at a time (u64) but only actually consume 6 of those bytes. Thus, we need",
    "    // 2 trailing bytes to be available to read..",
    "    let last_fast_index = input.len().saturating_sub(BLOCKS_PER_FAST_LOOP * 6 + 2);",
    "    let mut output_index = 0;",
    "",
    "    if last_fast_index > 0 {",
    "        while input_index <= last_fast_index {",
    "            // Major performance wins from letting the optimizer do the bounds check once, mostly",
    "            // on the output side",
    "            let input_chunk =",
    "                &input[input_index..(input_index + (BLOCKS_PER_FAST_LOOP * 6 + 2))];",
    "            let output_chunk =",
    "                &mut output[output_index..(output_index + BLOCKS_PER_FAST_LOOP * 8)];",
    "",
    "            // Hand-unrolling for 32 vs 16 or 8 bytes produces yields performance about equivalent",
    "            // to unsafe pointer code on a Xeon E5-1650v3. 64 byte unrolling was slightly better for",
    "            // large inputs but significantly worse for 50-byte input, unsurprisingly. I suspect",
    "            // that it's a not uncommon use case to encode smallish chunks of data (e.g. a 64-byte",
    "            // SHA-512 digest), so it would be nice if that fit in the unrolled loop at least once.",
    "            // Plus, single-digit percentage performance differences might well be quite different",
    "            // on different hardware.",
    "",
    "            let input_u64 = read_u64(&input_chunk[0..]);",
    "",
    "            output_chunk[0] = self.encode_table[((input_u64 >> 58) & LOW_SIX_BITS) as usize];",
    "            output_chunk[1] = self.encode_table[((input_u64 >> 52) & LOW_SIX_BITS) as usize];",
    "            output_chunk[2] = self.encode_table[((input_u64 >> 46) & LOW_SIX_BITS) as usize];",
    "            output_chunk[3] = self.encode_table[((input_u64 >> 40) & LOW_SIX_BITS) as usize];",
    "            output_chunk[4] = self.encode_table[((input_u64 >> 34) & LOW_SIX_BITS) as usize];",
    "            output_chunk[5] = self.encode_table[((input_u64 >> 28) & LOW_SIX_BITS) as usize];",
    "            output_chunk[6] = self.encode_table[((input_u64 >> 22) & LOW_SIX_BITS) as usize];",
    "            output_chunk[7] = self.encode_table[((input_u64 >> 16) & LOW_SIX_BITS) as usize];",
    "",
    "            let input_u64 = read_u64(&input_chunk[6..]);",
    "",
    "            output_chunk[8] = self.encode_table[((input_u64 >> 58) & LOW_SIX_BITS) as usize];",
    "            output_chunk[9] = self.encode_table[((input_u64 >> 52) & LOW_SIX_BITS) as usize];",
    "            output_chunk[10] = self.encode_table[((input_u64 >> 46) & LOW_SIX_BITS) as usize];",
    "            output_chunk[11] = self.encode_table[((input_u64 >> 40) & LOW_SIX_BITS) as usize];",
    "            output_chunk[12] = self.encode_table[((input_u64 >> 34) & LOW_SIX_BITS) as usize];",
    "            output_chunk[13] = self.encode_table[((input_u64 >> 28) & LOW_SIX_BITS) as usize];",
    "            output_chunk[14] = self.encode_table[((input_u64 >> 22) & LOW_SIX_BITS) as usize];",
    "            output_chunk[15] = self.encode_table[((input_u64 >> 16) & LOW_SIX_BITS) as usize];",
    "",
    "            let input_u64 = read_u64(&input_chunk[12..]);",
    "",
    "            output_chunk[16] = self.encode_table[((input_u64 >> 58) & LOW_SIX_BITS) as usize];",
    "            output_chunk[17] = self.encode_table[((input_u64 >> 52) & LOW_SIX_BITS) as usize];",
    "            output_chunk[18] = self.encode_table[((input_u64 >> 46) & LOW_SIX_BITS) as usize];",
    "            output_chunk[19] = self.encode_table[((input_u64 >> 40) & LOW_SIX_BITS) as usize];",
    "            output_chunk[20] = self.encode_table[((input_u64 >> 34) & LOW_SIX_BITS) as usize];",
    "            output_chunk[21] = self.encode_table[((input_u64 >> 28) & LOW_SIX_BITS) as usize];",
    "            output_chunk[22] = self.encode_table[((input_u64 >> 22) & LOW_SIX_BITS) as usize];",
    "            output_chunk[23] = self.encode_table[((input_u64 >> 16) & LOW_SIX_BITS) as usize];",
    "",
    "            let input_u64 = read_u64(&input_chunk[18..]);",
    "",
    "            output_chunk[24] = self.encode_table[((input_u64 >> 58) & LOW_SIX_BITS) as usize];",
    "            output_chunk[25] = self.encode_table[((input_u64 >> 52) & LOW_SIX_BITS) as usize];",
    "            output_chunk[26] = self.encode_table[((input_u64 >> 46) & LOW_SIX_BITS) as usize];",
    "            output_chunk[27] = self.encode_table[((input_u64 >> 40) & LOW_SIX_BITS) as usize];",
    "            output_chunk[28] = self.encode_table[((input_u64 >> 34) & LOW_SIX_BITS) as usize];",
    "            output_chunk[29] = self.encode_table[((input_u64 >> 28) & LOW_SIX_BITS) as usize];",
    "            output_chunk[30] = self.encode_table[((input_u64 >> 22) & LOW_SIX_BITS) as usize];",
    "            output_chunk[31] = self.encode_table[((input_u64 >> 16) & LOW_SIX_BITS) as usize];",
    "",
    "            output_index += BLOCKS_PER_FAST_LOOP * 8;",
    "            input_index += BLOCKS_PER_FAST_LOOP * 6;",
    "        }",
    "    }",
    "",
    "    // Encode what's left after the fast loop.",
    "",
    "    const LOW_SIX_BITS_U8: u8 = 0x3F;",
    "",
    "    let rem = input.len() % 3;",
    "    let start_of_rem = input.len() - rem;",
    "",
    "    // start at the first index not handled by fast loop, which may be 0.",
    "",
    "    while input_index < start_of_rem {",
    "        let input_chunk = &input[input_index..(input_index + 3)];",
    "        let output_chunk = &mut output[output_index..(output_index + 4)];",
    "",
    "        output_chunk[0] = self.encode_table[(input_chunk[0] >> 2) as usize];",
    "        output_chunk[1] = self.encode_table",
    "            [((input_chunk[0] << 4 | input_chunk[1] >> 4) & LOW_SIX_BITS_U8) as usize];",
    "        output_chunk[2] = self.encode_table",
    "            [((input_chunk[1] << 2 | input_chunk[2] >> 6) & LOW_SIX_BITS_U8) as usize];",
    "        output_chunk[3] = self.encode_table[(input_chunk[2] & LOW_SIX_BITS_U8) as usize];",
    "",
    "        input_index += 3;",
    "        output_index += 4;",
    "    }",
    "",
    "    if rem == 2 {",
    "        output[output_index] = self.encode_table[(input[start_of_rem] >> 2) as usize];",
    "        output[output_index + 1] =",
    "            self.encode_table[((input[start_of_rem] << 4 | input[start_of_rem + 1] >> 4)",
    "                & LOW_SIX_BITS_U8) as usize];",
    "        output[output_index + 2] =",
    "            self.encode_table[((input[start_of_rem + 1] << 2) & LOW_SIX_BITS_U8) as usize];",
    "        output_index += 3;",
    "    } else if rem == 1 {",
    "        output[output_index] = self.encode_table[(input[start_of_rem] >> 2) as usize];",
    "        output[output_index + 1] =",
    "            self.encode_table[((input[start_of_rem] << 4) & LOW_SIX_BITS_U8) as usize];",
    "        output_index += 2;",
    "    }",
    "",
    "    output_index",
    "}"
  ],
  "size": {
    "chain": 18,
    "contra": 12,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": "input_index == last_fast_index"
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "false",
          "line": 152,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        131,
        132,
        159,
        160,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": "input_index == last_fast_index"
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "false",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        131,
        132,
        159,
        161,
        181,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": "input_index == last_fast_index"
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "true",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        131,
        132,
        159,
        161,
        182,
        193,
        194
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": "input_index == last_fast_index"
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "false",
          "line": 152,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        159,
        160,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": "input_index == last_fast_index"
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "false",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        159,
        161,
        181,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "true",
          "line": 63,
          "bound": "input_index == last_fast_index"
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "true",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        159,
        161,
        182,
        193,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "false",
          "line": 152,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        131,
        132,
        159,
        160,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "false",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        131,
        132,
        159,
        161,
        181,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "true",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        131,
        132,
        159,
        161,
        182,
        193,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "false",
          "line": 152,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        159,
        160,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        194
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "false",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        159,
        161,
        181,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "true",
          "line": 62,
          "bound": null
        },
        {
          "cond": "input_index <= last_fast_index",
          "norm": null,
          "value": "false",
          "line": 63,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "true",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        124,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        159,
        161,
        182,
        193,
        194
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "false",
          "line": 62,
          "bound": "last_fast_index == 0"
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "false",
          "line": 152,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        131,
        132,
        159,
        160,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "false",
          "line": 62,
          "bound": "last_fast_index == 0"
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "false",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        131,
        132,
        159,
        161,
        181,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "false",
          "line": 62,
          "bound": "last_fast_index == 0"
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "true",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        131,
        132,
        159,
        161,
        182,
        193,
        194
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "false",
          "line": 62,
          "bound": "last_fast_index == 0"
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "false",
          "line": 152,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        159,
        160,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        194
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "false",
          "line": 62,
          "bound": "last_fast_index == 0"
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "false",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        159,
        161,
        181,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "last_fast_index > 0",
          "norm": "0 < last_fast_index",
          "value": "false",
          "line": 62,
          "bound": "last_fast_index == 0"
        },
        {
          "cond": "input_index < start_of_rem",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": "input_index == start_of_rem"
        },
        {
          "cond": "rem == 2",
          "norm": "2 == rem",
          "value": "true",
          "line": 152,
          "bound": null
        },
        {
          "cond": "rem == 1",
          "norm": "1 == rem",
          "value": "true",
          "line": 160,
          "bound": null
        }
      ],
      "ret": "output_index",
      "path": [
        0,
        1,
        2,
        3,
        4,
        125,
        126,
        127,
        128,
        129,
        130,
        131,
        132,
        159,
        161,
        182,
        193,
        194
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}