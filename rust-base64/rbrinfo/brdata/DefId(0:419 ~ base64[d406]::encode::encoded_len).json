{
  "name": "base64::encode::encoded_len",
  "mod_info": {
    "name": "encode",
    "loc": "src/lib.rs:286:1:286:12"
  },
  "visible": true,
  "loc": "src/encode.rs:98:1:126:2",
  "doc": "/// Calculate the base64 encoded length for a given input length, optionally including any\n/// appropriate padding bytes.\n///\n/// Returns `None` if the encoded length can't be represented in `usize`. This will happen for\n/// input lengths in approximately the top quarter of the range of `usize`.\n",
  "code": [
    "pub const fn encoded_len(bytes_len: usize, padding: bool) -> Option<usize> {",
    "    let rem = bytes_len % 3;",
    "",
    "    let complete_input_chunks = bytes_len / 3;",
    "    // `?` is disallowed in const, and `let Some(_) = _ else` requires 1.65.0, whereas this",
    "    // messier syntax works on 1.48",
    "    let complete_chunk_output =",
    "        if let Some(complete_chunk_output) = complete_input_chunks.checked_mul(4) {",
    "            complete_chunk_output",
    "        } else {",
    "            return None;",
    "        };",
    "",
    "    if rem > 0 {",
    "        if padding {",
    "            complete_chunk_output.checked_add(4)",
    "        } else {",
    "            let encoded_rem = match rem {",
    "                1 => 2,",
    "                // only other possible remainder is 2",
    "                // can't use a separate _ => unreachable!() in const fns in ancient rust versions",
    "                _ => 3,",
    "            };",
    "            complete_chunk_output.checked_add(encoded_rem)",
    "        }",
    "    } else {",
    "        Some(complete_chunk_output)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(complete_chunk_output) = complete_input_chunks.checked_mul(4)",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        6,
        19
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(complete_chunk_output) = complete_input_chunks.checked_mul(4)",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "rem > 0",
          "norm": "0 < rem",
          "value": "true",
          "line": 111,
          "bound": null
        },
        {
          "cond": "padding",
          "norm": null,
          "value": "true",
          "line": 112,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(complete_chunk_output) = complete_input_chunks.checked_mul(4)",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "rem > 0",
          "norm": "0 < rem",
          "value": "true",
          "line": 111,
          "bound": null
        },
        {
          "cond": "padding",
          "norm": null,
          "value": "false",
          "line": 112,
          "bound": null
        },
        {
          "cond": "rem matches 1",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "rem matches _",
          "norm": null,
          "value": "true",
          "line": 119,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        11,
        12,
        15,
        16,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(complete_chunk_output) = complete_input_chunks.checked_mul(4)",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "rem > 0",
          "norm": "0 < rem",
          "value": "true",
          "line": 111,
          "bound": null
        },
        {
          "cond": "padding",
          "norm": null,
          "value": "false",
          "line": 112,
          "bound": null
        },
        {
          "cond": "rem matches 1",
          "norm": null,
          "value": "true",
          "line": 116,
          "bound": null
        },
        {
          "cond": "rem matches 1",
          "norm": null,
          "value": "true",
          "line": 115,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        11,
        13,
        14,
        15,
        16,
        17,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(complete_chunk_output) = complete_input_chunks.checked_mul(4)",
          "norm": null,
          "value": "true",
          "line": 105,
          "bound": null
        },
        {
          "cond": "rem > 0",
          "norm": "0 < rem",
          "value": "false",
          "line": 111,
          "bound": "rem == 0"
        }
      ],
      "ret": "Some(complete_chunk_output)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}