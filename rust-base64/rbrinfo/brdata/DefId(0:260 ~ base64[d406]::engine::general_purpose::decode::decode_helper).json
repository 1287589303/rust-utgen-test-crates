{
  "name": "base64::engine::general_purpose::decode::decode_helper",
  "mod_info": {
    "name": "engine::general_purpose::decode",
    "loc": "src/engine/general_purpose/mod.rs:12:1:12:23"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/decode.rs:35:1:121:2",
  "doc": "/// Helper to avoid duplicating `num_chunks` calculation, which is costly on short inputs.\n/// Returns the decode metadata, or an error.\n",
  "code": [
    "pub(crate) fn decode_helper(",
    "    input: &[u8],",
    "    estimate: &GeneralPurposeEstimate,",
    "    output: &mut [u8],",
    "    decode_table: &[u8; 256],",
    "    decode_allow_trailing_bits: bool,",
    "    padding_mode: DecodePaddingMode,",
    ") -> Result<DecodeMetadata, DecodeSliceError> {",
    "    let input_complete_nonterminal_quads_len =",
    "        complete_quads_len(input, estimate.rem, output.len(), decode_table)?;",
    "",
    "    const UNROLLED_INPUT_CHUNK_SIZE: usize = 32;",
    "    const UNROLLED_OUTPUT_CHUNK_SIZE: usize = UNROLLED_INPUT_CHUNK_SIZE / 4 * 3;",
    "",
    "    let input_complete_quads_after_unrolled_chunks_len =",
    "        input_complete_nonterminal_quads_len % UNROLLED_INPUT_CHUNK_SIZE;",
    "",
    "    let input_unrolled_loop_len =",
    "        input_complete_nonterminal_quads_len - input_complete_quads_after_unrolled_chunks_len;",
    "",
    "    // chunks of 32 bytes",
    "    for (chunk_index, chunk) in input[..input_unrolled_loop_len]",
    "        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)",
    "        .enumerate()",
    "    {",
    "        let input_index = chunk_index * UNROLLED_INPUT_CHUNK_SIZE;",
    "        let chunk_output = &mut output[chunk_index * UNROLLED_OUTPUT_CHUNK_SIZE",
    "            ..(chunk_index + 1) * UNROLLED_OUTPUT_CHUNK_SIZE];",
    "",
    "        decode_chunk_8(",
    "            &chunk[0..8],",
    "            input_index,",
    "            decode_table,",
    "            &mut chunk_output[0..6],",
    "        )?;",
    "        decode_chunk_8(",
    "            &chunk[8..16],",
    "            input_index + 8,",
    "            decode_table,",
    "            &mut chunk_output[6..12],",
    "        )?;",
    "        decode_chunk_8(",
    "            &chunk[16..24],",
    "            input_index + 16,",
    "            decode_table,",
    "            &mut chunk_output[12..18],",
    "        )?;",
    "        decode_chunk_8(",
    "            &chunk[24..32],",
    "            input_index + 24,",
    "            decode_table,",
    "            &mut chunk_output[18..24],",
    "        )?;",
    "    }",
    "",
    "    // remaining quads, except for the last possibly partial one, as it may have padding",
    "    let output_unrolled_loop_len = input_unrolled_loop_len / 4 * 3;",
    "    let output_complete_quad_len = input_complete_nonterminal_quads_len / 4 * 3;",
    "    {",
    "        let output_after_unroll = &mut output[output_unrolled_loop_len..output_complete_quad_len];",
    "",
    "        for (chunk_index, chunk) in input",
    "            [input_unrolled_loop_len..input_complete_nonterminal_quads_len]",
    "            .chunks_exact(4)",
    "            .enumerate()",
    "        {",
    "            let chunk_output = &mut output_after_unroll[chunk_index * 3..chunk_index * 3 + 3];",
    "",
    "            decode_chunk_4(",
    "                chunk,",
    "                input_unrolled_loop_len + chunk_index * 4,",
    "                decode_table,",
    "                chunk_output,",
    "            )?;",
    "        }",
    "    }",
    "",
    "    super::decode_suffix::decode_suffix(",
    "        input,",
    "        input_complete_nonterminal_quads_len,",
    "        output,",
    "        output_complete_quad_len,",
    "        decode_table,",
    "        decode_allow_trailing_bits,",
    "        padding_mode,",
    "    )",
    "}"
  ],
  "size": {
    "chain": 11,
    "contra": 4,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Err/None",
          "line": 44,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        98,
        99
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 44,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "true",
          "line": 56,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[0..8],\n            input_index,\n            decode_table,\n            &mut chunk_output[0..6],\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 64,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        32,
        34,
        35,
        96,
        97,
        98,
        99
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 44,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "true",
          "line": 56,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[0..8],\n            input_index,\n            decode_table,\n            &mut chunk_output[0..6],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 64,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[8..16],\n            input_index + 8,\n            decode_table,\n            &mut chunk_output[6..12],\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 70,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        42,
        44,
        45,
        96,
        97,
        98,
        99
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 44,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "true",
          "line": 56,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[0..8],\n            input_index,\n            decode_table,\n            &mut chunk_output[0..6],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 64,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[8..16],\n            input_index + 8,\n            decode_table,\n            &mut chunk_output[6..12],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 70,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[16..24],\n            input_index + 16,\n            decode_table,\n            &mut chunk_output[12..18],\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 76,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        52,
        54,
        55,
        96,
        97,
        98,
        99
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 44,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "true",
          "line": 56,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[0..8],\n            input_index,\n            decode_table,\n            &mut chunk_output[0..6],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 64,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[8..16],\n            input_index + 8,\n            decode_table,\n            &mut chunk_output[6..12],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 70,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[16..24],\n            input_index + 16,\n            decode_table,\n            &mut chunk_output[12..18],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 76,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[24..32],\n            input_index + 24,\n            decode_table,\n            &mut chunk_output[18..24],\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 82,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        60,
        62,
        64,
        65,
        96,
        97,
        98,
        99
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 44,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "true",
          "line": 56,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[0..8],\n            input_index,\n            decode_table,\n            &mut chunk_output[0..6],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 64,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[8..16],\n            input_index + 8,\n            decode_table,\n            &mut chunk_output[6..12],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 70,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[16..24],\n            input_index + 16,\n            decode_table,\n            &mut chunk_output[12..18],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 76,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[24..32],\n            input_index + 24,\n            decode_table,\n            &mut chunk_output[18..24],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 82,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "false",
          "line": 56,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input\n            [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()",
          "norm": null,
          "value": "true",
          "line": 96,
          "bound": null
        },
        {
          "cond": "decode_chunk_4(\n                chunk,\n                input_unrolled_loop_len + chunk_index * 4,\n                decode_table,\n                chunk_output,\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        60,
        63,
        15,
        16,
        17,
        19,
        21,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        94,
        97,
        98,
        99
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 44,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "true",
          "line": 56,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[0..8],\n            input_index,\n            decode_table,\n            &mut chunk_output[0..6],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 64,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[8..16],\n            input_index + 8,\n            decode_table,\n            &mut chunk_output[6..12],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 70,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[16..24],\n            input_index + 16,\n            decode_table,\n            &mut chunk_output[12..18],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 76,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[24..32],\n            input_index + 24,\n            decode_table,\n            &mut chunk_output[18..24],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 82,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "false",
          "line": 56,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input\n            [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()",
          "norm": null,
          "value": "true",
          "line": 96,
          "bound": null
        },
        {
          "cond": "decode_chunk_4(\n                chunk,\n                input_unrolled_loop_len + chunk_index * 4,\n                decode_table,\n                chunk_output,\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 103,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input\n            [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()",
          "norm": null,
          "value": "false",
          "line": 96,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        60,
        63,
        15,
        16,
        17,
        19,
        21,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        75,
        76,
        77,
        79,
        81,
        95,
        99
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 44,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "true",
          "line": 56,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[0..8],\n            input_index,\n            decode_table,\n            &mut chunk_output[0..6],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 64,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[8..16],\n            input_index + 8,\n            decode_table,\n            &mut chunk_output[6..12],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 70,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[16..24],\n            input_index + 16,\n            decode_table,\n            &mut chunk_output[12..18],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 76,
          "bound": null
        },
        {
          "cond": "decode_chunk_8(\n            &chunk[24..32],\n            input_index + 24,\n            decode_table,\n            &mut chunk_output[18..24],\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 82,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "false",
          "line": 56,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input\n            [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()",
          "norm": null,
          "value": "false",
          "line": 96,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        33,
        36,
        37,
        38,
        39,
        40,
        43,
        46,
        47,
        48,
        49,
        50,
        53,
        56,
        57,
        58,
        59,
        60,
        63,
        15,
        16,
        17,
        19,
        21,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        79,
        81,
        95,
        99
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 44,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "false",
          "line": 56,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input\n            [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()",
          "norm": null,
          "value": "true",
          "line": 96,
          "bound": null
        },
        {
          "cond": "decode_chunk_4(\n                chunk,\n                input_unrolled_loop_len + chunk_index * 4,\n                decode_table,\n                chunk_output,\n            )?",
          "norm": null,
          "value": "Err/None",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        91,
        93,
        94,
        97,
        98,
        99
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 44,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "false",
          "line": 56,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input\n            [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()",
          "norm": null,
          "value": "true",
          "line": 96,
          "bound": null
        },
        {
          "cond": "decode_chunk_4(\n                chunk,\n                input_unrolled_loop_len + chunk_index * 4,\n                decode_table,\n                chunk_output,\n            )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 103,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input\n            [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()",
          "norm": null,
          "value": "false",
          "line": 96,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        80,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        92,
        75,
        76,
        77,
        79,
        81,
        95,
        99
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 44,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()",
          "norm": null,
          "value": "false",
          "line": 56,
          "bound": null
        },
        {
          "cond": "(chunk_index, chunk) in input\n            [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()",
          "norm": null,
          "value": "false",
          "line": 96,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        79,
        81,
        95,
        99
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}