{
  "name": "base64::engine::general_purpose::{impl#2}::with_encode_padding",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/mod.rs:281:5:286:6",
  "doc": "/// Create a new config based on `self` with an updated `padding` setting.\n///\n/// If `padding` is `true`, encoding will append either 1 or 2 `=` padding characters as needed\n/// to produce an output whose length is a multiple of 4.\n///\n/// Padding is not needed for correct decoding and only serves to waste bytes, but it's in the\n/// [spec](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2).\n///\n/// For new applications, consider not using padding if the decoders you're using don't require\n/// padding to be present.\n",
  "code": [
    "pub const fn with_encode_padding(self, padding: bool) -> Self {",
    "    Self {",
    "        encode_padding: padding,",
    "        ..self",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Self {\n            encode_padding: padding,\n            ..self\n        }",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}