{
  "name": "base64::engine::general_purpose::{impl#2}::with_decode_padding_mode",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/mod.rs:317:5:322:6",
  "doc": "/// Create a new config based on `self` with an updated `decode_padding_mode` setting.\n///\n/// Padding is not useful in terms of representing encoded data -- it makes no difference to\n/// the decoder if padding is present or not, so if you have some un-padded input to decode, it\n/// is perfectly fine to use `DecodePaddingMode::Indifferent` to prevent errors from being\n/// emitted.\n///\n/// However, since in practice\n/// [people who learned nothing from BER vs DER seem to expect base64 to have one canonical encoding](https://eprint.iacr.org/2022/361),\n/// the default setting is the stricter `DecodePaddingMode::RequireCanonicalPadding`.\n///\n/// Or, if \"canonical\" in your circumstance means _no_ padding rather than padding to the\n/// next multiple of four, there's `DecodePaddingMode::RequireNoPadding`.\n",
  "code": [
    "pub const fn with_decode_padding_mode(self, mode: DecodePaddingMode) -> Self {",
    "    Self {",
    "        decode_padding_mode: mode,",
    "        ..self",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Self {\n            decode_padding_mode: mode,\n            ..self\n        }",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}