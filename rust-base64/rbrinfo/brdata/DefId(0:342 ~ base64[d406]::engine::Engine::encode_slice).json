{
  "name": "base64::engine::Engine::encode_slice",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:194:5:222:6",
  "doc": "/// Encode arbitrary octets as base64 into a supplied slice.\n/// Writes into the supplied output buffer.\n///\n/// This is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident\n/// or statically-allocated buffer).\n///\n/// # Example\n///\n/// use base64::{Engine as _, engine::general_purpose};\n/// let s = b\"hello internet!\";\n/// let mut buf = Vec::new();\n/// // make sure we'll have a slice big enough for base64 + padding\n/// buf.resize(s.len() * 4 / 3 + 4, 0);\n///\n/// let bytes_written = general_purpose::STANDARD.encode_slice(s, &mut buf).unwrap();\n///\n/// // shorten our vec down to just what was written\n/// buf.truncate(bytes_written);\n///\n/// assert_eq!(s, general_purpose::STANDARD.decode(&buf).unwrap().as_slice());\n/// ```\n",
  "code": [
    "fn encode_slice<T: AsRef<[u8]>>(",
    "    &self,",
    "    input: T,",
    "    output_buf: &mut [u8],",
    ") -> Result<usize, EncodeSliceError> {",
    "    fn inner<E>(",
    "        engine: &E,",
    "        input_bytes: &[u8],",
    "        output_buf: &mut [u8],",
    "    ) -> Result<usize, EncodeSliceError>",
    "    where",
    "        E: Engine + ?Sized,",
    "    {",
    "        let encoded_size = encoded_len(input_bytes.len(), engine.config().encode_padding())",
    "            .expect(\"usize overflow when calculating buffer size\");",
    "",
    "        if output_buf.len() < encoded_size {",
    "            return Err(EncodeSliceError::OutputSliceTooSmall);",
    "        }",
    "",
    "        let b64_output = &mut output_buf[0..encoded_size];",
    "",
    "        encode_with_padding(input_bytes, b64_output, engine, encoded_size);",
    "",
    "        Ok(encoded_size)",
    "    }",
    "",
    "    inner(self, input.as_ref(), output_buf)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}