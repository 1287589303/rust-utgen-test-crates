{
  "name": "base64::write::encoder::{impl#1}::finish",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/write/encoder.rs:126:5:139:6",
  "doc": "/// Encode all remaining buffered data and write it, including any trailing incomplete input\n/// triples and associated padding.\n///\n/// Once this succeeds, no further writes or calls to this method are allowed.\n///\n/// This may write to the delegate writer multiple times if the delegate writer does not accept\n/// all input provided to its `write` each invocation.\n///\n/// If you don't care about error handling, it is not necessary to call this function, as the\n/// equivalent finalization is done by the Drop impl.\n///\n/// Returns the writer that this was constructed around.\n///\n/// # Errors\n///\n/// The first error that is not of `ErrorKind::Interrupted` will be returned.\n",
  "code": [
    "pub fn finish(&mut self) -> Result<W> {",
    "    // If we could consume self in finish(), we wouldn't have to worry about this case, but",
    "    // finish() is retryable in the face of I/O errors, so we can't consume here.",
    "    assert!(",
    "        self.delegate.is_some(),",
    "        \"Encoder has already had finish() called\"",
    "    );",
    "",
    "    self.write_final_leftovers()?;",
    "",
    "    let writer = self.delegate.take().expect(\"Writer must be present\");",
    "",
    "    Ok(writer)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 130,
          "bound": null
        },
        {
          "cond": "self.write_final_leftovers()?",
          "norm": null,
          "value": "Err/None",
          "line": 134,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        9,
        10,
        16,
        17,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 130,
          "bound": null
        },
        {
          "cond": "self.write_final_leftovers()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Ok(writer)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "false",
          "line": 130,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        25
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}