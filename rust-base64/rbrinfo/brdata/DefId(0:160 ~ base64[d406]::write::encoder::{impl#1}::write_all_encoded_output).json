{
  "name": "base64::write::encoder::{impl#1}::write_all_encoded_output",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": false,
  "loc": "src/write/encoder.rs:212:5:227:6",
  "doc": "/// Write all buffered encoded output. If this returns `Ok`, `self.output_occupied_len` is `0`.\n///\n/// This is basically `write_all` for the remaining buffered data but without the undesirable\n/// abort-on-`Ok(0)` behavior.\n///\n/// # Errors\n///\n/// Any error emitted by the delegate writer abort the write loop and is returned, unless it's\n/// `Interrupted`, in which case the error is ignored and writes will continue.\n",
  "code": [
    "fn write_all_encoded_output(&mut self) -> Result<()> {",
    "    while self.output_occupied_len > 0 {",
    "        let remaining_len = self.output_occupied_len;",
    "        match self.write_to_delegate(remaining_len) {",
    "            // try again on interrupts ala write_all",
    "            Err(ref e) if e.kind() == ErrorKind::Interrupted => {}",
    "            // other errors return",
    "            Err(e) => return Err(e),",
    "            // success no-ops because remaining length is already updated",
    "            Ok(()) => {}",
    "        };",
    "    }",
    "",
    "    debug_assert_eq!(0, self.output_occupied_len);",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 4,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "self.write_to_delegate(remaining_len) matches Err(e) or Err(ref e)",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.write_to_delegate(remaining_len) matches Err(ref e)",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        },
        {
          "cond": "e.kind() == ErrorKind::Interrupted",
          "norm": "ErrorKind::Interrupted == e.kind()",
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 213,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        9,
        10,
        11,
        12,
        16,
        17,
        1,
        2,
        18,
        19,
        21,
        23,
        26
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "self.write_to_delegate(remaining_len) matches Err(e) or Err(ref e)",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.write_to_delegate(remaining_len) matches Err(ref e)",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        },
        {
          "cond": "e.kind() == ErrorKind::Interrupted",
          "norm": "ErrorKind::Interrupted == e.kind()",
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 213,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        9,
        10,
        11,
        12,
        16,
        17,
        1,
        2,
        18,
        19,
        22,
        29
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "self.write_to_delegate(remaining_len) matches Err(e) or Err(ref e)",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.write_to_delegate(remaining_len) matches Err(ref e)",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        },
        {
          "cond": "e.kind() == ErrorKind::Interrupted",
          "norm": "ErrorKind::Interrupted == e.kind()",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "self.write_to_delegate(remaining_len) matches Err(e)",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        }
      ],
      "ret": "Err(e)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        9,
        10,
        11,
        13,
        7,
        14,
        15,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "self.write_to_delegate(remaining_len) matches Ok(())",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 213,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        8,
        16,
        17,
        1,
        2,
        18,
        19,
        21,
        23,
        26
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "true",
          "line": 213,
          "bound": null
        },
        {
          "cond": "self.write_to_delegate(remaining_len) matches Ok(())",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 213,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        8,
        16,
        17,
        1,
        2,
        18,
        19,
        22,
        29
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 213,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        18,
        19,
        21,
        23,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 213,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        18,
        19,
        22,
        29
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}