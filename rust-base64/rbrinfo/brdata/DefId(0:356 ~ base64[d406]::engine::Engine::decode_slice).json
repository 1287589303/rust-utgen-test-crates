{
  "name": "base64::engine::Engine::decode_slice",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:353:5:376:6",
  "doc": "/// Decode the input into the provided output slice.\n///\n/// Returns the number of bytes written to the slice, or an error if `output` is smaller than\n/// the estimated decoded length.\n///\n/// This will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).\n///\n/// See [`crate::decoded_len_estimate`] for calculating buffer sizes.\n///\n/// See [`Engine::decode_slice_unchecked`] for a version that panics instead of returning an error\n/// if the output buffer is too small.\n",
  "code": [
    "fn decode_slice<T: AsRef<[u8]>>(",
    "    &self,",
    "    input: T,",
    "    output: &mut [u8],",
    ") -> Result<usize, DecodeSliceError> {",
    "    fn inner<E>(",
    "        engine: &E,",
    "        input_bytes: &[u8],",
    "        output: &mut [u8],",
    "    ) -> Result<usize, DecodeSliceError>",
    "    where",
    "        E: Engine + ?Sized,",
    "    {",
    "        engine",
    "            .internal_decode(",
    "                input_bytes,",
    "                output,",
    "                engine.internal_decoded_len_estimate(input_bytes.len()),",
    "            )",
    "            .map(|dm| dm.decoded_len)",
    "    }",
    "",
    "    inner(self, input.as_ref(), output)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}