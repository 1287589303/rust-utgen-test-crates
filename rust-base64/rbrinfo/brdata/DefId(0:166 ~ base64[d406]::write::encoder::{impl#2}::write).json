{
  "name": "base64::write::encoder::{impl#2}::write",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/write/encoder.rs:266:5:386:6",
  "doc": "/// Encode input and then write to the delegate writer.\n///\n/// Under non-error circumstances, this returns `Ok` with the value being the number of bytes\n/// of `input` consumed. The value may be `0`, which interacts poorly with `write_all`, which\n/// interprets `Ok(0)` as an error, despite it being allowed by the contract of `write`. See\n/// <https://github.com/rust-lang/rust/issues/56889> for more on that.\n///\n/// If the previous call to `write` provided more (encoded) data than the delegate writer could\n/// accept in a single call to its `write`, the remaining data is buffered. As long as buffered\n/// data is present, subsequent calls to `write` will try to write the remaining buffered data\n/// to the delegate and return either `Ok(0)` -- and therefore not consume any of `input` -- or\n/// an error.\n///\n/// # Errors\n///\n/// Any errors emitted by the delegate writer are returned.\n",
  "code": [
    "fn write(&mut self, input: &[u8]) -> Result<usize> {",
    "    assert!(",
    "        self.delegate.is_some(),",
    "        \"Cannot write more after calling finish()\"",
    "    );",
    "",
    "    if input.is_empty() {",
    "        return Ok(0);",
    "    }",
    "",
    "    // The contract of `Write::write` places some constraints on this implementation:",
    "    // - a call to `write()` represents at most one call to a wrapped `Write`, so we can't",
    "    // iterate over the input and encode multiple chunks.",
    "    // - Errors mean that \"no bytes were written to this writer\", so we need to reset the",
    "    // internal state to what it was before the error occurred",
    "",
    "    // before reading any input, write any leftover encoded output from last time",
    "    if self.output_occupied_len > 0 {",
    "        let current_len = self.output_occupied_len;",
    "        return self",
    "            .write_to_delegate(current_len)",
    "            // did not read any input",
    "            .map(|()| 0);",
    "    }",
    "",
    "    debug_assert_eq!(0, self.output_occupied_len);",
    "",
    "    // how many bytes, if any, were read into `extra` to create a triple to encode",
    "    let mut extra_input_read_len = 0;",
    "    let mut input = input;",
    "",
    "    let orig_extra_len = self.extra_input_occupied_len;",
    "",
    "    let mut encoded_size = 0;",
    "    // always a multiple of MIN_ENCODE_CHUNK_SIZE",
    "    let mut max_input_len = MAX_INPUT_LEN;",
    "",
    "    // process leftover un-encoded input from last write",
    "    if self.extra_input_occupied_len > 0 {",
    "        debug_assert!(self.extra_input_occupied_len < 3);",
    "        if input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE {",
    "            // Fill up `extra`, encode that into `output`, and consume as much of the rest of",
    "            // `input` as possible.",
    "            // We could write just the encoding of `extra` by itself but then we'd have to",
    "            // return after writing only 4 bytes, which is inefficient if the underlying writer",
    "            // would make a syscall.",
    "            extra_input_read_len = MIN_ENCODE_CHUNK_SIZE - self.extra_input_occupied_len;",
    "            debug_assert!(extra_input_read_len > 0);",
    "            // overwrite only bytes that weren't already used. If we need to rollback extra_len",
    "            // (when the subsequent write errors), the old leading bytes will still be there.",
    "            self.extra_input[self.extra_input_occupied_len..MIN_ENCODE_CHUNK_SIZE]",
    "                .copy_from_slice(&input[0..extra_input_read_len]);",
    "",
    "            let len = self.engine.internal_encode(",
    "                &self.extra_input[0..MIN_ENCODE_CHUNK_SIZE],",
    "                &mut self.output[..],",
    "            );",
    "            debug_assert_eq!(4, len);",
    "",
    "            input = &input[extra_input_read_len..];",
    "",
    "            // consider extra to be used up, since we encoded it",
    "            self.extra_input_occupied_len = 0;",
    "            // don't clobber where we just encoded to",
    "            encoded_size = 4;",
    "            // and don't read more than can be encoded",
    "            max_input_len = MAX_INPUT_LEN - MIN_ENCODE_CHUNK_SIZE;",
    "",
    "        // fall through to normal encoding",
    "        } else {",
    "            // `extra` and `input` are non empty, but `|extra| + |input| < 3`, so there must be",
    "            // 1 byte in each.",
    "            debug_assert_eq!(1, input.len());",
    "            debug_assert_eq!(1, self.extra_input_occupied_len);",
    "",
    "            self.extra_input[self.extra_input_occupied_len] = input[0];",
    "            self.extra_input_occupied_len += 1;",
    "            return Ok(1);",
    "        };",
    "    } else if input.len() < MIN_ENCODE_CHUNK_SIZE {",
    "        // `extra` is empty, and `input` fits inside it",
    "        self.extra_input[0..input.len()].copy_from_slice(input);",
    "        self.extra_input_occupied_len = input.len();",
    "        return Ok(input.len());",
    "    };",
    "",
    "    // either 0 or 1 complete chunks encoded from extra",
    "    debug_assert!(encoded_size == 0 || encoded_size == 4);",
    "    debug_assert!(",
    "        // didn't encode extra input",
    "        MAX_INPUT_LEN == max_input_len",
    "            // encoded one triple",
    "            || MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
    "    );",
    "",
    "    // encode complete triples only",
    "    let input_complete_chunks_len = input.len() - (input.len() % MIN_ENCODE_CHUNK_SIZE);",
    "    let input_chunks_to_encode_len = cmp::min(input_complete_chunks_len, max_input_len);",
    "    debug_assert_eq!(0, max_input_len % MIN_ENCODE_CHUNK_SIZE);",
    "    debug_assert_eq!(0, input_chunks_to_encode_len % MIN_ENCODE_CHUNK_SIZE);",
    "",
    "    encoded_size += self.engine.internal_encode(",
    "        &input[..(input_chunks_to_encode_len)],",
    "        &mut self.output[encoded_size..],",
    "    );",
    "",
    "    // not updating `self.output_occupied_len` here because if the below write fails, it should",
    "    // \"never take place\" -- the buffer contents we encoded are ignored and perhaps retried",
    "    // later, if the consumer chooses.",
    "",
    "    self.write_to_delegate(encoded_size)",
    "        // no matter whether we wrote the full encoded buffer or not, we consumed the same",
    "        // input",
    "        .map(|()| extra_input_read_len + input_chunks_to_encode_len)",
    "        .map_err(|e| {",
    "            // in case we filled and encoded `extra`, reset extra_len",
    "            self.extra_input_occupied_len = orig_extra_len;",
    "",
    "            e",
    "        })",
    "}"
  ],
  "size": {
    "chain": 41,
    "contra": 19,
    "min_set": 12
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 272,
          "bound": null
        }
      ],
      "ret": "Ok(0)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        111
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "true",
          "line": 283,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        9,
        10,
        111
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        70,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        99,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        111
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        70,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        100,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        70,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        94,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        70,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        99,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        111
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        70,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        100,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        70,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        94,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "false",
          "line": 358,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        70,
        74,
        76,
        77,
        79,
        80,
        82,
        115
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        99,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        111
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        100,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        94,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        99,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        111
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        100,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        94,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "false",
          "line": 358,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        79,
        80,
        82,
        115
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        41,
        42,
        43,
        68,
        69,
        71,
        73,
        115
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "true",
          "line": 306,
          "bound": "input.len() + self.extra_input_occupied_len == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "extra_input_read_len > 0",
          "norm": "0 < extra_input_read_len",
          "value": "false",
          "line": 313,
          "bound": "extra_input_read_len == 0"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        115
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "false",
          "line": 306,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "Ok(1)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        44,
        45,
        46,
        47,
        50,
        51,
        52,
        55,
        56,
        57,
        58,
        110,
        111
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "false",
          "line": 306,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        44,
        45,
        46,
        47,
        50,
        51,
        53,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "true",
          "line": 305,
          "bound": null
        },
        {
          "cond": "input.len() + self.extra_input_occupied_len >= MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE <= input.len() + self.extra_input_occupied_len",
          "value": "false",
          "line": 306,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        18,
        21,
        22,
        23,
        44,
        45,
        46,
        48,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len < 3",
          "norm": "3 > self.extra_input_occupied_len",
          "value": "false",
          "line": 305,
          "bound": "self.extra_input_occupied_len == 3"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        16,
        17,
        19,
        115
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "true",
          "line": 345,
          "bound": null
        }
      ],
      "ret": "Ok(input.len())",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        110,
        111
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        70,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        99,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        111
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        70,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        100,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        70,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        94,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        70,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        99,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        111
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        70,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        100,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        70,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        94,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "false",
          "line": 358,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        70,
        74,
        76,
        77,
        79,
        80,
        82,
        115
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        99,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        111
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        100,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "true",
          "line": 356,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        78,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        94,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        99,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        111
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        96,
        97,
        98,
        100,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "true",
          "line": 358,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        79,
        80,
        81,
        83,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        94,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "false",
          "line": 353,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len",
          "norm": null,
          "value": "false",
          "line": 356,
          "bound": null
        },
        {
          "cond": "MAX_INPUT_LEN == max_input_len + MIN_ENCODE_CHUNK_SIZE",
          "norm": null,
          "value": "false",
          "line": 358,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        71,
        72,
        74,
        76,
        77,
        79,
        80,
        82,
        115
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 304,
          "bound": "self.extra_input_occupied_len == 0"
        },
        {
          "cond": "input.len() < MIN_ENCODE_CHUNK_SIZE",
          "norm": "MIN_ENCODE_CHUNK_SIZE > input.len()",
          "value": "false",
          "line": 345,
          "bound": "input.len() == MIN_ENCODE_CHUNK_SIZE"
        },
        {
          "cond": "encoded_size == 0",
          "norm": "0 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        },
        {
          "cond": "encoded_size == 4",
          "norm": "4 == encoded_size",
          "value": "true",
          "line": 353,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        13,
        15,
        59,
        60,
        67,
        68,
        69,
        71,
        73,
        115
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "true",
          "line": 268,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 272,
          "bound": null
        },
        {
          "cond": "self.output_occupied_len > 0",
          "norm": "0 < self.output_occupied_len",
          "value": "false",
          "line": 283,
          "bound": "self.output_occupied_len == 0"
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        11,
        14,
        115
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "self.delegate.is_some()",
          "norm": null,
          "value": "false",
          "line": 268,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        115
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}