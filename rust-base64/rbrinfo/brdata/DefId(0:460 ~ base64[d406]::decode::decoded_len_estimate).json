{
  "name": "base64::decode::decoded_len_estimate",
  "mod_info": {
    "name": "decode",
    "loc": "src/lib.rs:293:1:293:12"
  },
  "visible": true,
  "loc": "src/decode.rs:150:1:154:2",
  "doc": "/// Returns a conservative estimate of the decoded size of `encoded_len` base64 symbols (rounded up\n/// to the next group of 3 decoded bytes).\n///\n/// The resulting length will be a safe choice for the size of a decode buffer, but may have up to\n/// 2 trailing bytes that won't end up being needed.\n///\n/// # Examples\n///\n/// ```\n/// use base64::decoded_len_estimate;\n///\n/// assert_eq!(3, decoded_len_estimate(1));\n/// assert_eq!(3, decoded_len_estimate(2));\n/// assert_eq!(3, decoded_len_estimate(3));\n/// assert_eq!(3, decoded_len_estimate(4));\n/// // start of the next quad of encoded symbols\n/// assert_eq!(6, decoded_len_estimate(5));\n/// ```\n",
  "code": [
    "pub fn decoded_len_estimate(encoded_len: usize) -> usize {",
    "    STANDARD",
    "        .internal_decoded_len_estimate(encoded_len)",
    "        .decoded_len_estimate()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}