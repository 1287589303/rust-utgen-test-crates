{
  "name": "base64::engine::Engine::decode",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:244:5:268:6",
  "doc": "/// Decode the input into a new `Vec`.\n///\n/// # Example\n///\n/// ```rust\n/// use base64::{Engine as _, alphabet, engine::{self, general_purpose}};\n///\n/// let bytes = general_purpose::STANDARD\n///     .decode(\"aGVsbG8gd29ybGR+Cg==\").unwrap();\n/// println!(\"{:?}\", bytes);\n///\n/// // custom engine setup\n/// let bytes_url = engine::GeneralPurpose::new(\n///              &alphabet::URL_SAFE,\n///              general_purpose::NO_PAD)\n///     .decode(\"aGVsbG8gaW50ZXJuZXR-Cg\").unwrap();\n/// println!(\"{:?}\", bytes_url);\n/// ```\n",
  "code": [
    "fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {",
    "    fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>",
    "    where",
    "        E: Engine + ?Sized,",
    "    {",
    "        let estimate = engine.internal_decoded_len_estimate(input_bytes.len());",
    "        let mut buffer = vec![0; estimate.decoded_len_estimate()];",
    "",
    "        let bytes_written = engine",
    "            .internal_decode(input_bytes, &mut buffer, estimate)",
    "            .map_err(|e| match e {",
    "                DecodeSliceError::DecodeError(e) => e,",
    "                DecodeSliceError::OutputSliceTooSmall => {",
    "                    unreachable!(\"Vec is sized conservatively\")",
    "                }",
    "            })?",
    "            .decoded_len;",
    "",
    "        buffer.truncate(bytes_written);",
    "",
    "        Ok(buffer)",
    "    }",
    "",
    "    inner(self, input.as_ref())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}