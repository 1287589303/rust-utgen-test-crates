{
  "name": "base64::encode::encode_with_padding",
  "mod_info": {
    "name": "encode",
    "loc": "src/lib.rs:286:1:286:12"
  },
  "visible": true,
  "loc": "src/encode.rs:69:1:90:2",
  "doc": "/// B64-encode and pad (if configured).\n///\n/// This helper exists to avoid recalculating `encoded_size`, which is relatively expensive on short\n/// inputs.\n///\n/// `encoded_size` is the encoded size calculated for `input`.\n///\n/// `output` must be of size `encoded_size`.\n///\n/// All bytes in `output` will be written to since it is exactly the size of the output.\n",
  "code": [
    "pub(crate) fn encode_with_padding<E: Engine + ?Sized>(",
    "    input: &[u8],",
    "    output: &mut [u8],",
    "    engine: &E,",
    "    expected_encoded_size: usize,",
    ") {",
    "    debug_assert_eq!(expected_encoded_size, output.len());",
    "",
    "    let b64_bytes_written = engine.internal_encode(input, output);",
    "",
    "    let padding_bytes = if engine.config().encode_padding() {",
    "        add_padding(b64_bytes_written, &mut output[b64_bytes_written..])",
    "    } else {",
    "        0",
    "    };",
    "",
    "    let encoded_bytes = b64_bytes_written",
    "        .checked_add(padding_bytes)",
    "        .expect(\"usize overflow when calculating b64 length\");",
    "",
    "    debug_assert_eq!(expected_encoded_size, encoded_bytes);",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "engine.config().encode_padding()",
          "norm": null,
          "value": "true",
          "line": 79,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "engine.config().encode_padding()",
          "norm": null,
          "value": "true",
          "line": 79,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        19,
        22
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "engine.config().encode_padding()",
          "norm": null,
          "value": "false",
          "line": 79,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        17,
        18,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        },
        {
          "cond": "engine.config().encode_padding()",
          "norm": null,
          "value": "false",
          "line": 79,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        17,
        19,
        22
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}