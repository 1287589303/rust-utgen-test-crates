{
  "name": "base64::write::encoder::{impl#1}::write_final_leftovers",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": false,
  "loc": "src/write/encoder.rs:142:5:169:6",
  "doc": "/// Write any remaining buffered data to the delegate writer.\n",
  "code": [
    "fn write_final_leftovers(&mut self) -> Result<()> {",
    "    if self.delegate.is_none() {",
    "        // finish() has already successfully called this, and we are now in drop() with a None",
    "        // writer, so just no-op",
    "        return Ok(());",
    "    }",
    "",
    "    self.write_all_encoded_output()?;",
    "",
    "    if self.extra_input_occupied_len > 0 {",
    "        let encoded_len = self",
    "            .engine",
    "            .encode_slice(",
    "                &self.extra_input[..self.extra_input_occupied_len],",
    "                &mut self.output[..],",
    "            )",
    "            .expect(\"buffer is large enough\");",
    "",
    "        self.output_occupied_len = encoded_len;",
    "",
    "        self.write_all_encoded_output()?;",
    "",
    "        // write succeeded, do not write the encoding of extra again if finish() is retried",
    "        self.extra_input_occupied_len = 0;",
    "    }",
    "",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.delegate.is_none()",
          "norm": null,
          "value": "true",
          "line": 143,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.delegate.is_none()",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "self.write_all_encoded_output()?",
          "norm": null,
          "value": "Err/None",
          "line": 149,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        7,
        9,
        10,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.delegate.is_none()",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "self.write_all_encoded_output()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 149,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 151,
          "bound": null
        },
        {
          "cond": "self.write_all_encoded_output()?",
          "norm": null,
          "value": "Err/None",
          "line": 162,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        23,
        27,
        28,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.delegate.is_none()",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "self.write_all_encoded_output()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 149,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "true",
          "line": 151,
          "bound": null
        },
        {
          "cond": "self.write_all_encoded_output()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 162,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        24,
        26,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.delegate.is_none()",
          "norm": null,
          "value": "false",
          "line": 143,
          "bound": null
        },
        {
          "cond": "self.write_all_encoded_output()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 149,
          "bound": null
        },
        {
          "cond": "self.extra_input_occupied_len > 0",
          "norm": "0 < self.extra_input_occupied_len",
          "value": "false",
          "line": 151,
          "bound": "self.extra_input_occupied_len == 0"
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        8,
        11,
        25,
        26,
        31
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}