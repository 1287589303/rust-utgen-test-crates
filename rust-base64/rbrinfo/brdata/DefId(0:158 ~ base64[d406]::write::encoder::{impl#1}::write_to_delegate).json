{
  "name": "base64::write::encoder::{impl#1}::write_to_delegate",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": false,
  "loc": "src/write/encoder.rs:179:5:201:6",
  "doc": "/// Write as much of the encoded output to the delegate writer as it will accept, and store the\n/// leftovers to be attempted at the next `write()` call. Updates `self.output_occupied_len`.\n///\n/// # Errors\n///\n/// Errors from the delegate writer are returned. In the case of an error,\n/// `self.output_occupied_len` will not be updated, as errors from `write` are specified to mean\n/// that no write took place.\n",
  "code": [
    "fn write_to_delegate(&mut self, current_output_len: usize) -> Result<()> {",
    "    self.panicked = true;",
    "    let res = self",
    "        .delegate",
    "        .as_mut()",
    "        .expect(\"Writer must be present\")",
    "        .write(&self.output[..current_output_len]);",
    "    self.panicked = false;",
    "",
    "    res.map(|consumed| {",
    "        debug_assert!(consumed <= current_output_len);",
    "",
    "        if consumed < current_output_len {",
    "            self.output_occupied_len = current_output_len.checked_sub(consumed).unwrap();",
    "            // If we're blocking on I/O, the minor inefficiency of copying bytes to the",
    "            // start of the buffer is the least of our concerns...",
    "            // TODO Rotate moves more than we need to; copy_within now stable.",
    "            self.output.rotate_left(consumed);",
    "        } else {",
    "            self.output_occupied_len = 0;",
    "        }",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}