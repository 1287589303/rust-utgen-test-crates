{
  "name": "base64::engine::general_purpose::decode_suffix::decode_suffix",
  "mod_info": {
    "name": "engine::general_purpose::decode_suffix",
    "loc": "src/engine/general_purpose/mod.rs:13:1:13:30"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/decode_suffix.rs:11:1:162:2",
  "doc": "/// Decode the last 0-4 bytes, checking for trailing set bits and padding per the provided\n/// parameters.\n///\n/// Returns the decode metadata representing the total number of bytes decoded, including the ones\n/// indicated as already written by `output_index`.\n",
  "code": [
    "pub(crate) fn decode_suffix(",
    "    input: &[u8],",
    "    input_index: usize,",
    "    output: &mut [u8],",
    "    mut output_index: usize,",
    "    decode_table: &[u8; 256],",
    "    decode_allow_trailing_bits: bool,",
    "    padding_mode: DecodePaddingMode,",
    ") -> Result<DecodeMetadata, DecodeSliceError> {",
    "    debug_assert!((input.len() - input_index) <= 4);",
    "",
    "    // Decode any leftovers that might not be a complete input chunk of 4 bytes.",
    "    // Use a u32 as a stack-resident 4 byte buffer.",
    "    let mut morsels_in_leftover = 0;",
    "    let mut padding_bytes_count = 0;",
    "    // offset from input_index",
    "    let mut first_padding_offset: usize = 0;",
    "    let mut last_symbol = 0_u8;",
    "    let mut morsels = [0_u8; 4];",
    "",
    "    for (leftover_index, &b) in input[input_index..].iter().enumerate() {",
    "        // '=' padding",
    "        if b == PAD_BYTE {",
    "            // There can be bad padding bytes in a few ways:",
    "            // 1 - Padding with non-padding characters after it",
    "            // 2 - Padding after zero or one characters in the current quad (should only",
    "            //     be after 2 or 3 chars)",
    "            // 3 - More than two characters of padding. If 3 or 4 padding chars",
    "            //     are in the same quad, that implies it will be caught by #2.",
    "            //     If it spreads from one quad to another, it will be an invalid byte",
    "            //     in the first quad.",
    "            // 4 - Non-canonical padding -- 1 byte when it should be 2, etc.",
    "            //     Per config, non-canonical but still functional non- or partially-padded base64",
    "            //     may be treated as an error condition.",
    "",
    "            if leftover_index < 2 {",
    "                // Check for error #2.",
    "                // Either the previous byte was padding, in which case we would have already hit",
    "                // this case, or it wasn't, in which case this is the first such error.",
    "                debug_assert!(",
    "                    leftover_index == 0 || (leftover_index == 1 && padding_bytes_count == 0)",
    "                );",
    "                let bad_padding_index = input_index + leftover_index;",
    "                return Err(DecodeError::InvalidByte(bad_padding_index, b).into());",
    "            }",
    "",
    "            if padding_bytes_count == 0 {",
    "                first_padding_offset = leftover_index;",
    "            }",
    "",
    "            padding_bytes_count += 1;",
    "            continue;",
    "        }",
    "",
    "        // Check for case #1.",
    "        // To make '=' handling consistent with the main loop, don't allow",
    "        // non-suffix '=' in trailing chunk either. Report error as first",
    "        // erroneous padding.",
    "        if padding_bytes_count > 0 {",
    "            return Err(",
    "                DecodeError::InvalidByte(input_index + first_padding_offset, PAD_BYTE).into(),",
    "            );",
    "        }",
    "",
    "        last_symbol = b;",
    "",
    "        // can use up to 8 * 6 = 48 bits of the u64, if last chunk has no padding.",
    "        // Pack the leftovers from left to right.",
    "        let morsel = decode_table[b as usize];",
    "        if morsel == INVALID_VALUE {",
    "            return Err(DecodeError::InvalidByte(input_index + leftover_index, b).into());",
    "        }",
    "",
    "        morsels[morsels_in_leftover] = morsel;",
    "        morsels_in_leftover += 1;",
    "    }",
    "",
    "    // If there was 1 trailing byte, and it was valid, and we got to this point without hitting",
    "    // an invalid byte, now we can report invalid length",
    "    if !input.is_empty() && morsels_in_leftover < 2 {",
    "        return Err(DecodeError::InvalidLength(input_index + morsels_in_leftover).into());",
    "    }",
    "",
    "    match padding_mode {",
    "        DecodePaddingMode::Indifferent => { /* everything we care about was already checked */ }",
    "        DecodePaddingMode::RequireCanonical => {",
    "            // allow empty input",
    "            if (padding_bytes_count + morsels_in_leftover) % 4 != 0 {",
    "                return Err(DecodeError::InvalidPadding.into());",
    "            }",
    "        }",
    "        DecodePaddingMode::RequireNone => {",
    "            if padding_bytes_count > 0 {",
    "                // check at the end to make sure we let the cases of padding that should be InvalidByte",
    "                // get hit",
    "                return Err(DecodeError::InvalidPadding.into());",
    "            }",
    "        }",
    "    }",
    "",
    "    // When encoding 1 trailing byte (e.g. 0xFF), 2 base64 bytes (\"/w\") are needed.",
    "    // / is the symbol for 63 (0x3F, bottom 6 bits all set) and w is 48 (0x30, top 2 bits",
    "    // of bottom 6 bits set).",
    "    // When decoding two symbols back to one trailing byte, any final symbol higher than",
    "    // w would still decode to the original byte because we only care about the top two",
    "    // bits in the bottom 6, but would be a non-canonical encoding. So, we calculate a",
    "    // mask based on how many bits are used for just the canonical encoding, and optionally",
    "    // error if any other bits are set. In the example of one encoded byte -> 2 symbols,",
    "    // 2 symbols can technically encode 12 bits, but the last 4 are non-canonical, and",
    "    // useless since there are no more symbols to provide the necessary 4 additional bits",
    "    // to finish the second original byte.",
    "",
    "    let leftover_bytes_to_append = morsels_in_leftover * 6 / 8;",
    "    // Put the up to 6 complete bytes as the high bytes.",
    "    // Gain a couple percent speedup from nudging these ORs to use more ILP with a two-way split.",
    "    let mut leftover_num = (u32::from(morsels[0]) << 26)",
    "        | (u32::from(morsels[1]) << 20)",
    "        | (u32::from(morsels[2]) << 14)",
    "        | (u32::from(morsels[3]) << 8);",
    "",
    "    // if there are bits set outside the bits we care about, last symbol encodes trailing bits that",
    "    // will not be included in the output",
    "    let mask = !0_u32 >> (leftover_bytes_to_append * 8);",
    "    if !decode_allow_trailing_bits && (leftover_num & mask) != 0 {",
    "        // last morsel is at `morsels_in_leftover` - 1",
    "        return Err(DecodeError::InvalidLastSymbol(",
    "            input_index + morsels_in_leftover - 1,",
    "            last_symbol,",
    "        )",
    "        .into());",
    "    }",
    "",
    "    // Strangely, this approach benchmarks better than writing bytes one at a time,",
    "    // or copy_from_slice into output.",
    "    for _ in 0..leftover_bytes_to_append {",
    "        let hi_byte = (leftover_num >> 24) as u8;",
    "        leftover_num <<= 8;",
    "        *output",
    "            .get_mut(output_index)",
    "            .ok_or(DecodeSliceError::OutputSliceTooSmall)? = hi_byte;",
    "        output_index += 1;",
    "    }",
    "",
    "    Ok(DecodeMetadata::new(",
    "        output_index,",
    "        if padding_bytes_count > 0 {",
    "            Some(input_index + first_padding_offset)",
    "        } else {",
    "            None",
    "        },",
    "    ))",
    "}"
  ],
  "size": {
    "chain": 291,
    "contra": 237,
    "min_set": 17
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "true",
          "line": 46,
          "bound": null
        },
        {
          "cond": "leftover_index == 0",
          "norm": "0 == leftover_index",
          "value": "false",
          "line": 51,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(bad_padding_index, b).into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        22,
        29,
        31,
        32,
        33,
        123,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "true",
          "line": 46,
          "bound": null
        },
        {
          "cond": "leftover_index == 0",
          "norm": "0 == leftover_index",
          "value": "true",
          "line": 51,
          "bound": null
        },
        {
          "cond": "leftover_index == 1",
          "norm": "1 == leftover_index",
          "value": "false",
          "line": 51,
          "bound": null
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 51,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(bad_padding_index, b).into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        23,
        24,
        25,
        29,
        31,
        32,
        33,
        123,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "true",
          "line": 46,
          "bound": null
        },
        {
          "cond": "leftover_index == 0",
          "norm": "0 == leftover_index",
          "value": "true",
          "line": 51,
          "bound": null
        },
        {
          "cond": "leftover_index == 1",
          "norm": "1 == leftover_index",
          "value": "false",
          "line": 51,
          "bound": null
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 51,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        23,
        24,
        26,
        28,
        126
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "true",
          "line": 46,
          "bound": null
        },
        {
          "cond": "leftover_index == 0",
          "norm": "0 == leftover_index",
          "value": "true",
          "line": 51,
          "bound": null
        },
        {
          "cond": "leftover_index == 1",
          "norm": "1 == leftover_index",
          "value": "true",
          "line": 51,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        20,
        21,
        23,
        27,
        28,
        126
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        70,
        71,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        67,
        68,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLength(input_index + morsels_in_leftover).into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        54,
        55,
        56,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        70,
        71,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        67,
        68,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "false",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        35,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        70,
        71,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        67,
        68,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 94,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 95,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 96,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 97,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 98,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 99,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 100,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 101,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 102,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 103,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 104,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 105,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 106,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 107,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 108,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 109,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 110,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 111,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLength(input_index + morsels_in_leftover).into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        54,
        55,
        56,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 112,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        70,
        71,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 113,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 114,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 115,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 116,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 117,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 118,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 119,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 120,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 121,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 122,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 123,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 124,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        67,
        68,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 125,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 126,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 127,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 128,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 129,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 130,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 131,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 132,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 133,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 134,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 135,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 136,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 137,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 138,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 139,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 140,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 141,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 142,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 143,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 144,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 145,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 146,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "true",
          "line": 33,
          "bound": null
        },
        {
          "cond": "leftover_index < 2",
          "norm": "2 > leftover_index",
          "value": "false",
          "line": 46,
          "bound": "leftover_index == 2"
        },
        {
          "cond": "padding_bytes_count == 0",
          "norm": "0 == padding_bytes_count",
          "value": "true",
          "line": 57,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        19,
        34,
        36,
        37,
        38,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 147,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 69,
          "bound": null
        }
      ],
      "ret": "Err(\n                DecodeError::InvalidByte(input_index + first_padding_offset, PAD_BYTE).into(),\n            )",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        40,
        42,
        43,
        123,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 148,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "true",
          "line": 80,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(input_index + leftover_index, b).into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        45,
        46,
        47,
        123,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 149,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        70,
        71,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 150,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 151,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 152,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 153,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 154,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 155,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 156,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 157,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 158,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 159,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 160,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 161,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        67,
        68,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 162,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 163,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 164,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 165,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 166,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 167,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 168,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 169,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 170,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 171,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 172,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 173,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 174,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 175,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 176,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 177,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 178,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 179,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 180,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 181,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 182,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 183,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 184,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLength(input_index + morsels_in_leftover).into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        54,
        55,
        56,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 185,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        70,
        71,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 186,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 187,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 188,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 189,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 190,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 191,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 192,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 193,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 194,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 195,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 196,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 197,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        67,
        68,
        122,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 198,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 199,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 200,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 201,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 202,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 203,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 204,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 205,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 206,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 207,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 208,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 209,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 210,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 211,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 212,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 213,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 214,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 215,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 216,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 217,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 218,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 219,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 31,
          "bound": null
        },
        {
          "cond": "b == PAD_BYTE",
          "norm": "PAD_BYTE == b",
          "value": "false",
          "line": 33,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 69,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 80,
          "bound": null
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        17,
        39,
        41,
        44,
        48,
        49,
        50,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 220,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        70,
        71,
        122,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 221,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 222,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 223,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 224,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 225,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 226,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 227,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 228,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 229,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 230,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 231,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 232,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        67,
        68,
        122,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 233,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 234,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 235,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 236,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 237,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 238,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 239,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 240,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 241,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 242,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 243,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 244,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 245,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 246,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 247,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 248,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 249,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 250,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 251,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 252,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 253,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 254,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        52,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 255,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLength(input_index + morsels_in_leftover).into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        54,
        55,
        56,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 256,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 103,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        70,
        71,
        122,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 257,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 258,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 259,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 260,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 261,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 262,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 263,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 264,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 265,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 266,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 267,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireNone",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 103,
          "bound": "padding_bytes_count == 0"
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        62,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 268,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "true",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidPadding.into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        67,
        68,
        122,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 269,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 270,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 271,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 272,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 273,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 274,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 275,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 276,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 277,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 278,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 279,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::RequireCanonical",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "(padding_bytes_count + morsels_in_leftover) % 4 != 0",
          "norm": null,
          "value": "false",
          "line": 98,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        61,
        64,
        65,
        66,
        69,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 280,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 281,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 282,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 283,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 284,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 285,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "true",
          "line": 134,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidLastSymbol(\n            input_index + morsels_in_leftover - 1,\n            last_symbol,\n        )\n        .into())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 286,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Err/None",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        111,
        113,
        114,
        121,
        124,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 287,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 288,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "output\n            .get_mut(output_index)\n            .ok_or(DecodeSliceError::OutputSliceTooSmall)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 148,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        107,
        108,
        109,
        112,
        115,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 289,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "true",
          "line": 156,
          "bound": null
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        116,
        118,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 290,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "true",
          "line": 20,
          "bound": "(input.len() - input_index) == 4"
        },
        {
          "cond": "(leftover_index, &b) in input[input_index..].iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 31,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "morsels_in_leftover < 2",
          "norm": "2 > morsels_in_leftover",
          "value": "false",
          "line": 90,
          "bound": "morsels_in_leftover == 2"
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "padding_mode matches DecodePaddingMode::Indifferent",
          "norm": null,
          "value": "true",
          "line": 94,
          "bound": null
        },
        {
          "cond": "decode_allow_trailing_bits",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "(leftover_num & mask) != 0",
          "norm": null,
          "value": "false",
          "line": 134,
          "bound": null
        },
        {
          "cond": "_ in 0..leftover_bytes_to_append",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "padding_bytes_count > 0",
          "norm": "0 < padding_bytes_count",
          "value": "false",
          "line": 156,
          "bound": "padding_bytes_count == 0"
        }
      ],
      "ret": "Ok(DecodeMetadata::new(\n        output_index,\n        if padding_bytes_count > 0 {\n            Some(input_index + first_padding_offset)\n        } else {\n            None\n        },\n    ))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        18,
        51,
        53,
        57,
        58,
        60,
        63,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        117,
        119,
        120,
        125
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 291,
      "conds": [
        {
          "cond": "(input.len() - input_index) <= 4",
          "norm": null,
          "value": "false",
          "line": 20,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        126
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}