{
  "name": "base64::engine::general_purpose::decode::decode_chunk_8",
  "mod_info": {
    "name": "engine::general_purpose::decode",
    "loc": "src/engine/general_purpose/mod.rs:12:1:12:23"
  },
  "visible": false,
  "loc": "src/engine/general_purpose/decode.rs:174:1:252:2",
  "doc": "/// Decode 8 bytes of input into 6 bytes of output.\n///\n/// `input` is the 8 bytes to decode.\n/// `index_at_start_of_input` is the offset in the overall input (used for reporting errors\n/// accurately)\n/// `decode_table` is the lookup table for the particular base64 alphabet.\n/// `output` will have its first 6 bytes overwritten\n",
  "code": [
    "fn decode_chunk_8(",
    "    input: &[u8],",
    "    index_at_start_of_input: usize,",
    "    decode_table: &[u8; 256],",
    "    output: &mut [u8],",
    ") -> Result<(), DecodeError> {",
    "    let morsel = decode_table[usize::from(input[0])];",
    "    if morsel == INVALID_VALUE {",
    "        return Err(DecodeError::InvalidByte(index_at_start_of_input, input[0]));",
    "    }",
    "    let mut accum = u64::from(morsel) << 58;",
    "",
    "    let morsel = decode_table[usize::from(input[1])];",
    "    if morsel == INVALID_VALUE {",
    "        return Err(DecodeError::InvalidByte(",
    "            index_at_start_of_input + 1,",
    "            input[1],",
    "        ));",
    "    }",
    "    accum |= u64::from(morsel) << 52;",
    "",
    "    let morsel = decode_table[usize::from(input[2])];",
    "    if morsel == INVALID_VALUE {",
    "        return Err(DecodeError::InvalidByte(",
    "            index_at_start_of_input + 2,",
    "            input[2],",
    "        ));",
    "    }",
    "    accum |= u64::from(morsel) << 46;",
    "",
    "    let morsel = decode_table[usize::from(input[3])];",
    "    if morsel == INVALID_VALUE {",
    "        return Err(DecodeError::InvalidByte(",
    "            index_at_start_of_input + 3,",
    "            input[3],",
    "        ));",
    "    }",
    "    accum |= u64::from(morsel) << 40;",
    "",
    "    let morsel = decode_table[usize::from(input[4])];",
    "    if morsel == INVALID_VALUE {",
    "        return Err(DecodeError::InvalidByte(",
    "            index_at_start_of_input + 4,",
    "            input[4],",
    "        ));",
    "    }",
    "    accum |= u64::from(morsel) << 34;",
    "",
    "    let morsel = decode_table[usize::from(input[5])];",
    "    if morsel == INVALID_VALUE {",
    "        return Err(DecodeError::InvalidByte(",
    "            index_at_start_of_input + 5,",
    "            input[5],",
    "        ));",
    "    }",
    "    accum |= u64::from(morsel) << 28;",
    "",
    "    let morsel = decode_table[usize::from(input[6])];",
    "    if morsel == INVALID_VALUE {",
    "        return Err(DecodeError::InvalidByte(",
    "            index_at_start_of_input + 6,",
    "            input[6],",
    "        ));",
    "    }",
    "    accum |= u64::from(morsel) << 22;",
    "",
    "    let morsel = decode_table[usize::from(input[7])];",
    "    if morsel == INVALID_VALUE {",
    "        return Err(DecodeError::InvalidByte(",
    "            index_at_start_of_input + 7,",
    "            input[7],",
    "        ));",
    "    }",
    "    accum |= u64::from(morsel) << 16;",
    "",
    "    output[..6].copy_from_slice(&accum.to_be_bytes()[..6]);",
    "",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 9,
    "contra": 0,
    "min_set": 9
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "true",
          "line": 181,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(index_at_start_of_input, input[0]))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 181,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(\n            index_at_start_of_input + 1,\n            input[1],\n        ))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        81,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 181,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "true",
          "line": 196,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(\n            index_at_start_of_input + 2,\n            input[2],\n        ))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        80,
        81,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 181,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 196,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "true",
          "line": 205,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(\n            index_at_start_of_input + 3,\n            input[3],\n        ))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        15,
        16,
        17,
        18,
        19,
        20,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        79,
        80,
        81,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 181,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 196,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 205,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "true",
          "line": 214,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(\n            index_at_start_of_input + 4,\n            input[4],\n        ))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        15,
        16,
        17,
        18,
        19,
        20,
        24,
        25,
        26,
        27,
        28,
        29,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        78,
        79,
        80,
        81,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 181,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 196,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 205,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 214,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "true",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(\n            index_at_start_of_input + 5,\n            input[5],\n        ))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        15,
        16,
        17,
        18,
        19,
        20,
        24,
        25,
        26,
        27,
        28,
        29,
        33,
        34,
        35,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        77,
        78,
        79,
        80,
        81,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 181,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 196,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 205,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 214,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 223,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "true",
          "line": 232,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(\n            index_at_start_of_input + 6,\n            input[6],\n        ))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        15,
        16,
        17,
        18,
        19,
        20,
        24,
        25,
        26,
        27,
        28,
        29,
        33,
        34,
        35,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 181,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 196,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 205,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 214,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 223,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "true",
          "line": 241,
          "bound": null
        }
      ],
      "ret": "Err(DecodeError::InvalidByte(\n            index_at_start_of_input + 7,\n            input[7],\n        ))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        15,
        16,
        17,
        18,
        19,
        20,
        24,
        25,
        26,
        27,
        28,
        29,
        33,
        34,
        35,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 181,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 196,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 205,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 214,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 223,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 232,
          "bound": null
        },
        {
          "cond": "morsel == INVALID_VALUE",
          "norm": "INVALID_VALUE == morsel",
          "value": "false",
          "line": 241,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        15,
        16,
        17,
        18,
        19,
        20,
        24,
        25,
        26,
        27,
        28,
        29,
        33,
        34,
        35,
        36,
        37,
        38,
        42,
        43,
        44,
        45,
        46,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        60,
        61,
        62,
        63,
        64,
        65,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        83
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}