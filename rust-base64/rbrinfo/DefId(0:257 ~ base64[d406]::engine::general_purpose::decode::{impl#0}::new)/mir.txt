bb0
  0: StorageLive(_2)
    SourceInfo(src/engine/general_purpose/decode.rs:15:13-15:16)
  1: StorageLive(_3)
    SourceInfo(src/engine/general_purpose/decode.rs:15:19-15:30)
  2: _3 = _1
    SourceInfo(src/engine/general_purpose/decode.rs:15:19-15:30)
  3: _4 = Eq(const 4_usize, const 0_usize)
    SourceInfo(src/engine/general_purpose/decode.rs:15:19-15:34)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/decode.rs:15:19-15:34)
      kind: assert(!move _4, "attempt to calculate the remainder of `{}` with a divisor of zero", _3) -> [success: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: _2 = Rem(move _3, const 4_usize)
    SourceInfo(src/engine/general_purpose/decode.rs:15:19-15:34)
  1: StorageDead(_3)
    SourceInfo(src/engine/general_purpose/decode.rs:15:33-15:34)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(src/engine/general_purpose/decode.rs:15:13-15:16)
  3: StorageLive(_5)
    SourceInfo(src/engine/general_purpose/decode.rs:17:13-17:16)
  4: _5 = _2
    SourceInfo(src/engine/general_purpose/decode.rs:17:13-17:16)
  5: StorageLive(_6)
    SourceInfo(src/engine/general_purpose/decode.rs:18:39-18:83)
  6: StorageLive(_7)
    SourceInfo(src/engine/general_purpose/decode.rs:18:39-18:79)
  7: StorageLive(_8)
    SourceInfo(src/engine/general_purpose/decode.rs:18:40-18:55)
  8: StorageLive(_9)
    SourceInfo(src/engine/general_purpose/decode.rs:18:40-18:51)
  9: _9 = _1
    SourceInfo(src/engine/general_purpose/decode.rs:18:40-18:51)
  10: _10 = Eq(const 4_usize, const 0_usize)
    SourceInfo(src/engine/general_purpose/decode.rs:18:40-18:55)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/decode.rs:18:40-18:55)
      kind: assert(!move _10, "attempt to divide `{}` by zero", _9) -> [success: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _8 = Div(move _9, const 4_usize)
    SourceInfo(src/engine/general_purpose/decode.rs:18:40-18:55)
  1: StorageDead(_9)
    SourceInfo(src/engine/general_purpose/decode.rs:18:54-18:55)
  2: StorageLive(_11)
    SourceInfo(src/engine/general_purpose/decode.rs:18:58-18:78)
  3: StorageLive(_12)
    SourceInfo(src/engine/general_purpose/decode.rs:18:70-18:77)
  4: StorageLive(_13)
    SourceInfo(src/engine/general_purpose/decode.rs:18:70-18:73)
  5: _13 = _2
    SourceInfo(src/engine/general_purpose/decode.rs:18:70-18:73)
  6: _12 = Gt(move _13, const 0_usize)
    SourceInfo(src/engine/general_purpose/decode.rs:18:70-18:77)
  7: StorageDead(_13)
    SourceInfo(src/engine/general_purpose/decode.rs:18:76-18:77)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/decode.rs:18:58-18:78)
      kind: _11 = <usize as std::convert::From<bool>>::from(move _12) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_12)
    SourceInfo(src/engine/general_purpose/decode.rs:18:77-18:78)
  1: _14 = AddWithOverflow(_8, _11)
    SourceInfo(src/engine/general_purpose/decode.rs:18:39-18:79)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/decode.rs:18:39-18:79)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _11) -> [success: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: _7 = move (_14.0: usize)
    SourceInfo(src/engine/general_purpose/decode.rs:18:39-18:79)
  1: StorageDead(_11)
    SourceInfo(src/engine/general_purpose/decode.rs:18:78-18:79)
  2: StorageDead(_8)
    SourceInfo(src/engine/general_purpose/decode.rs:18:78-18:79)
  3: _15 = MulWithOverflow(_7, const 3_usize)
    SourceInfo(src/engine/general_purpose/decode.rs:18:39-18:83)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/decode.rs:18:39-18:83)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, const 3_usize) -> [success: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: _6 = move (_15.0: usize)
    SourceInfo(src/engine/general_purpose/decode.rs:18:39-18:83)
  1: StorageDead(_7)
    SourceInfo(src/engine/general_purpose/decode.rs:18:82-18:83)
  2: _0 = engine::general_purpose::decode::GeneralPurposeEstimate { rem: move _5, conservative_decoded_len: move _6 }
    SourceInfo(src/engine/general_purpose/decode.rs:16:9-19:10)
  3: StorageDead(_6)
    SourceInfo(src/engine/general_purpose/decode.rs:19:9-19:10)
  4: StorageDead(_5)
    SourceInfo(src/engine/general_purpose/decode.rs:19:9-19:10)
  5: StorageDead(_2)
    SourceInfo(src/engine/general_purpose/decode.rs:20:5-20:6)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/decode.rs:20:6-20:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/decode.rs:14:5-20:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

