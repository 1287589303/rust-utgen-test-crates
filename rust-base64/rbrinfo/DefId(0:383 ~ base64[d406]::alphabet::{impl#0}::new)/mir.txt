bb0
  0: StorageLive(_2)
    SourceInfo(src/alphabet.rs:80:13-80:18)
  1: StorageLive(_3)
    SourceInfo(src/alphabet.rs:80:21-80:29)
  2: _3 = &(*_1)
    SourceInfo(src/alphabet.rs:80:21-80:29)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:80:21-80:40)
      kind: _2 = core::str::<impl str>::as_bytes(move _3) -> [return: bb1, unwind: bb33]
  }
  preds []
  succs [bb1, bb33]

bb1
  0: StorageDead(_3)
    SourceInfo(src/alphabet.rs:80:39-80:40)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(src/alphabet.rs:80:13-80:18)
  2: StorageLive(_4)
    SourceInfo(src/alphabet.rs:81:9-83:10)
  3: StorageLive(_5)
    SourceInfo(src/alphabet.rs:81:12-81:40)
  4: StorageLive(_6)
    SourceInfo(src/alphabet.rs:81:12-81:23)
  5: StorageLive(_7)
    SourceInfo(src/alphabet.rs:81:12-81:17)
  6: _7 = &(*_2)
    SourceInfo(src/alphabet.rs:81:12-81:17)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:81:12-81:23)
      kind: _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb2, unwind: bb33]
  }
  preds [bb0]
  succs [bb2, bb33]

bb2
  0: StorageDead(_7)
    SourceInfo(src/alphabet.rs:81:22-81:23)
  1: _5 = Ne(move _6, const alphabet::ALPHABET_SIZE)
    SourceInfo(src/alphabet.rs:81:12-81:40)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:81:12-81:40)
      kind: switchInt(move _5) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_6)
    SourceInfo(src/alphabet.rs:81:39-81:40)
  1: StorageLive(_9)
    SourceInfo(src/alphabet.rs:82:24-82:57)
  2: _9 = alphabet::ParseAlphabetError::InvalidLength
    SourceInfo(src/alphabet.rs:82:24-82:57)
  3: _0 = std::result::Result::<alphabet::Alphabet, alphabet::ParseAlphabetError>::Err(move _9)
    SourceInfo(src/alphabet.rs:82:20-82:58)
  4: StorageDead(_9)
    SourceInfo(src/alphabet.rs:82:57-82:58)
  5: StorageDead(_5)
    SourceInfo(src/alphabet.rs:83:9-83:10)
  6: StorageDead(_4)
    SourceInfo(src/alphabet.rs:83:9-83:10)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb31
  }
  preds [bb2]
  succs [bb31]

bb4
  0: StorageDead(_6)
    SourceInfo(src/alphabet.rs:81:39-81:40)
  1: _4 = const ()
    SourceInfo(src/alphabet.rs:83:10-83:10)
  2: StorageDead(_5)
    SourceInfo(src/alphabet.rs:83:9-83:10)
  3: StorageDead(_4)
    SourceInfo(src/alphabet.rs:83:9-83:10)
  4: StorageLive(_10)
    SourceInfo(src/alphabet.rs:85:9-122:10)
  5: StorageLive(_11)
    SourceInfo(src/alphabet.rs:86:17-86:26)
  6: _11 = const 0_usize
    SourceInfo(src/alphabet.rs:86:29-86:30)
  7: FakeRead(ForLet(None), _11)
    SourceInfo(src/alphabet.rs:86:17-86:26)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:87:13-121:14)
      kind: goto -> bb5
  }
  preds [bb2]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:87:13-121:14)
      kind: falseUnwind -> [real: bb6, unwind: bb33]
  }
  preds [bb4, bb27]
  succs [bb6, bb33]

bb6
  0: StorageLive(_13)
    SourceInfo(src/alphabet.rs:87:19-87:40)
  1: StorageLive(_14)
    SourceInfo(src/alphabet.rs:87:19-87:24)
  2: _14 = _11
    SourceInfo(src/alphabet.rs:87:19-87:24)
  3: _13 = Lt(move _14, const alphabet::ALPHABET_SIZE)
    SourceInfo(src/alphabet.rs:87:19-87:40)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:87:19-87:40)
      kind: switchInt(move _13) -> [0: bb28, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb28]

bb7
  0: StorageDead(_14)
    SourceInfo(src/alphabet.rs:87:39-87:40)
  1: StorageLive(_15)
    SourceInfo(src/alphabet.rs:88:21-88:25)
  2: StorageLive(_16)
    SourceInfo(src/alphabet.rs:88:34-88:39)
  3: _16 = _11
    SourceInfo(src/alphabet.rs:88:34-88:39)
  4: _17 = Len((*_2))
    SourceInfo(src/alphabet.rs:88:28-88:40)
  5: _18 = Lt(_16, _17)
    SourceInfo(src/alphabet.rs:88:28-88:40)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:88:28-88:40)
      kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb8, unwind: bb33]
  }
  preds [bb6]
  succs [bb8, bb33]

bb8
  0: _15 = (*_2)[_16]
    SourceInfo(src/alphabet.rs:88:28-88:40)
  1: FakeRead(ForLet(None), _15)
    SourceInfo(src/alphabet.rs:88:21-88:25)
  2: StorageDead(_16)
    SourceInfo(src/alphabet.rs:88:40-88:41)
  3: StorageLive(_19)
    SourceInfo(src/alphabet.rs:92:17-94:18)
  4: StorageLive(_20)
    SourceInfo(src/alphabet.rs:92:22-92:35)
  5: StorageLive(_21)
    SourceInfo(src/alphabet.rs:92:22-92:26)
  6: _21 = _15
    SourceInfo(src/alphabet.rs:92:22-92:26)
  7: _20 = Ge(move _21, const 32_u8)
    SourceInfo(src/alphabet.rs:92:22-92:35)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:92:22-92:35)
      kind: switchInt(move _20) -> [0: bb12, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb12]

bb9
  0: StorageDead(_21)
    SourceInfo(src/alphabet.rs:92:34-92:35)
  1: StorageLive(_22)
    SourceInfo(src/alphabet.rs:92:39-92:53)
  2: StorageLive(_23)
    SourceInfo(src/alphabet.rs:92:39-92:43)
  3: _23 = _15
    SourceInfo(src/alphabet.rs:92:39-92:43)
  4: _22 = Le(move _23, const 126_u8)
    SourceInfo(src/alphabet.rs:92:39-92:53)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:92:39-92:53)
      kind: switchInt(move _22) -> [0: bb11, otherwise: bb10]
  }
  preds [bb8]
  succs [bb10, bb11]

bb10
  0: StorageDead(_23)
    SourceInfo(src/alphabet.rs:92:52-92:53)
  1: _19 = const ()
    SourceInfo(src/alphabet.rs:94:18-94:18)
  2: StorageDead(_22)
    SourceInfo(src/alphabet.rs:94:17-94:18)
  3: StorageDead(_20)
    SourceInfo(src/alphabet.rs:94:17-94:18)
  4: StorageDead(_19)
    SourceInfo(src/alphabet.rs:94:17-94:18)
  5: StorageLive(_27)
    SourceInfo(src/alphabet.rs:96:17-98:18)
  6: StorageLive(_28)
    SourceInfo(src/alphabet.rs:96:20-96:36)
  7: StorageLive(_29)
    SourceInfo(src/alphabet.rs:96:20-96:24)
  8: _29 = _15
    SourceInfo(src/alphabet.rs:96:20-96:24)
  9: _28 = Eq(move _29, const PAD_BYTE)
    SourceInfo(src/alphabet.rs:96:20-96:36)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:96:20-96:36)
      kind: switchInt(move _28) -> [0: bb15, otherwise: bb14]
  }
  preds [bb9]
  succs [bb14, bb15]

bb11
  0: StorageDead(_23)
    SourceInfo(src/alphabet.rs:92:52-92:53)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb13
  }
  preds [bb9]
  succs [bb13]

bb12
  0: StorageDead(_21)
    SourceInfo(src/alphabet.rs:92:34-92:35)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb13
  }
  preds [bb8]
  succs [bb13]

bb13
  0: StorageLive(_25)
    SourceInfo(src/alphabet.rs:93:32-93:73)
  1: StorageLive(_26)
    SourceInfo(src/alphabet.rs:93:68-93:72)
  2: _26 = _15
    SourceInfo(src/alphabet.rs:93:68-93:72)
  3: _25 = alphabet::ParseAlphabetError::UnprintableByte(move _26)
    SourceInfo(src/alphabet.rs:93:32-93:73)
  4: StorageDead(_26)
    SourceInfo(src/alphabet.rs:93:72-93:73)
  5: _0 = std::result::Result::<alphabet::Alphabet, alphabet::ParseAlphabetError>::Err(move _25)
    SourceInfo(src/alphabet.rs:93:28-93:74)
  6: StorageDead(_25)
    SourceInfo(src/alphabet.rs:93:73-93:74)
  7: StorageDead(_22)
    SourceInfo(src/alphabet.rs:94:17-94:18)
  8: StorageDead(_20)
    SourceInfo(src/alphabet.rs:94:17-94:18)
  9: StorageDead(_19)
    SourceInfo(src/alphabet.rs:94:17-94:18)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb30
  }
  preds [bb11, bb12]
  succs [bb30]

bb14
  0: StorageDead(_29)
    SourceInfo(src/alphabet.rs:96:35-96:36)
  1: StorageLive(_31)
    SourceInfo(src/alphabet.rs:97:32-97:70)
  2: StorageLive(_32)
    SourceInfo(src/alphabet.rs:97:65-97:69)
  3: _32 = _15
    SourceInfo(src/alphabet.rs:97:65-97:69)
  4: _31 = alphabet::ParseAlphabetError::ReservedByte(move _32)
    SourceInfo(src/alphabet.rs:97:32-97:70)
  5: StorageDead(_32)
    SourceInfo(src/alphabet.rs:97:69-97:70)
  6: _0 = std::result::Result::<alphabet::Alphabet, alphabet::ParseAlphabetError>::Err(move _31)
    SourceInfo(src/alphabet.rs:97:28-97:71)
  7: StorageDead(_31)
    SourceInfo(src/alphabet.rs:97:70-97:71)
  8: StorageDead(_28)
    SourceInfo(src/alphabet.rs:98:17-98:18)
  9: StorageDead(_27)
    SourceInfo(src/alphabet.rs:98:17-98:18)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb30
  }
  preds [bb10]
  succs [bb30]

bb15
  0: StorageDead(_29)
    SourceInfo(src/alphabet.rs:96:35-96:36)
  1: _27 = const ()
    SourceInfo(src/alphabet.rs:98:18-98:18)
  2: StorageDead(_28)
    SourceInfo(src/alphabet.rs:98:17-98:18)
  3: StorageDead(_27)
    SourceInfo(src/alphabet.rs:98:17-98:18)
  4: StorageLive(_33)
    SourceInfo(src/alphabet.rs:104:21-104:36)
  5: _33 = const 0_usize
    SourceInfo(src/alphabet.rs:104:39-104:40)
  6: FakeRead(ForLet(None), _33)
    SourceInfo(src/alphabet.rs:104:21-104:36)
  7: StorageLive(_34)
    SourceInfo(src/alphabet.rs:105:17-118:18)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:105:17-118:18)
      kind: goto -> bb16
  }
  preds [bb10]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:105:17-118:18)
      kind: falseUnwind -> [real: bb17, unwind: bb33]
  }
  preds [bb15, bb20, bb25]
  succs [bb17, bb33]

bb17
  0: StorageLive(_35)
    SourceInfo(src/alphabet.rs:105:23-105:50)
  1: StorageLive(_36)
    SourceInfo(src/alphabet.rs:105:23-105:34)
  2: _36 = _33
    SourceInfo(src/alphabet.rs:105:23-105:34)
  3: _35 = Lt(move _36, const alphabet::ALPHABET_SIZE)
    SourceInfo(src/alphabet.rs:105:23-105:50)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:105:23-105:50)
      kind: switchInt(move _35) -> [0: bb26, otherwise: bb18]
  }
  preds [bb16]
  succs [bb18, bb26]

bb18
  0: StorageDead(_36)
    SourceInfo(src/alphabet.rs:105:49-105:50)
  1: StorageLive(_37)
    SourceInfo(src/alphabet.rs:106:21-109:22)
  2: StorageLive(_38)
    SourceInfo(src/alphabet.rs:106:24-106:44)
  3: StorageLive(_39)
    SourceInfo(src/alphabet.rs:106:24-106:35)
  4: _39 = _33
    SourceInfo(src/alphabet.rs:106:24-106:35)
  5: StorageLive(_40)
    SourceInfo(src/alphabet.rs:106:39-106:44)
  6: _40 = _11
    SourceInfo(src/alphabet.rs:106:39-106:44)
  7: _38 = Eq(move _39, move _40)
    SourceInfo(src/alphabet.rs:106:24-106:44)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:106:24-106:44)
      kind: switchInt(move _38) -> [0: bb21, otherwise: bb19]
  }
  preds [bb17]
  succs [bb19, bb21]

bb19
  0: StorageDead(_40)
    SourceInfo(src/alphabet.rs:106:43-106:44)
  1: StorageDead(_39)
    SourceInfo(src/alphabet.rs:106:43-106:44)
  2: _42 = AddWithOverflow(_33, const 1_usize)
    SourceInfo(src/alphabet.rs:107:25-107:41)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:107:25-107:41)
      kind: assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", _33, const 1_usize) -> [success: bb20, unwind: bb33]
  }
  preds [bb18]
  succs [bb20, bb33]

bb20
  0: _33 = move (_42.0: usize)
    SourceInfo(src/alphabet.rs:107:25-107:41)
  1: StorageDead(_38)
    SourceInfo(src/alphabet.rs:109:21-109:22)
  2: StorageDead(_37)
    SourceInfo(src/alphabet.rs:109:21-109:22)
  3: StorageDead(_35)
    SourceInfo(src/alphabet.rs:118:17-118:18)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb16
  }
  preds [bb19]
  succs [bb16]

bb21
  0: StorageDead(_40)
    SourceInfo(src/alphabet.rs:106:43-106:44)
  1: StorageDead(_39)
    SourceInfo(src/alphabet.rs:106:43-106:44)
  2: _37 = const ()
    SourceInfo(src/alphabet.rs:109:22-109:22)
  3: StorageDead(_38)
    SourceInfo(src/alphabet.rs:109:21-109:22)
  4: StorageDead(_37)
    SourceInfo(src/alphabet.rs:109:21-109:22)
  5: StorageLive(_43)
    SourceInfo(src/alphabet.rs:111:25-111:35)
  6: StorageLive(_44)
    SourceInfo(src/alphabet.rs:111:44-111:55)
  7: _44 = _33
    SourceInfo(src/alphabet.rs:111:44-111:55)
  8: _45 = Len((*_2))
    SourceInfo(src/alphabet.rs:111:38-111:56)
  9: _46 = Lt(_44, _45)
    SourceInfo(src/alphabet.rs:111:38-111:56)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:111:38-111:56)
      kind: assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> [success: bb22, unwind: bb33]
  }
  preds [bb18]
  succs [bb22, bb33]

bb22
  0: _43 = (*_2)[_44]
    SourceInfo(src/alphabet.rs:111:38-111:56)
  1: FakeRead(ForLet(None), _43)
    SourceInfo(src/alphabet.rs:111:25-111:35)
  2: StorageDead(_44)
    SourceInfo(src/alphabet.rs:111:56-111:57)
  3: StorageLive(_47)
    SourceInfo(src/alphabet.rs:113:21-115:22)
  4: StorageLive(_48)
    SourceInfo(src/alphabet.rs:113:24-113:42)
  5: StorageLive(_49)
    SourceInfo(src/alphabet.rs:113:24-113:28)
  6: _49 = _15
    SourceInfo(src/alphabet.rs:113:24-113:28)
  7: StorageLive(_50)
    SourceInfo(src/alphabet.rs:113:32-113:42)
  8: _50 = _43
    SourceInfo(src/alphabet.rs:113:32-113:42)
  9: _48 = Eq(move _49, move _50)
    SourceInfo(src/alphabet.rs:113:24-113:42)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:113:24-113:42)
      kind: switchInt(move _48) -> [0: bb24, otherwise: bb23]
  }
  preds [bb21]
  succs [bb23, bb24]

bb23
  0: StorageDead(_50)
    SourceInfo(src/alphabet.rs:113:41-113:42)
  1: StorageDead(_49)
    SourceInfo(src/alphabet.rs:113:41-113:42)
  2: StorageLive(_52)
    SourceInfo(src/alphabet.rs:114:36-114:76)
  3: StorageLive(_53)
    SourceInfo(src/alphabet.rs:114:71-114:75)
  4: _53 = _15
    SourceInfo(src/alphabet.rs:114:71-114:75)
  5: _52 = alphabet::ParseAlphabetError::DuplicatedByte(move _53)
    SourceInfo(src/alphabet.rs:114:36-114:76)
  6: StorageDead(_53)
    SourceInfo(src/alphabet.rs:114:75-114:76)
  7: _0 = std::result::Result::<alphabet::Alphabet, alphabet::ParseAlphabetError>::Err(move _52)
    SourceInfo(src/alphabet.rs:114:32-114:77)
  8: StorageDead(_52)
    SourceInfo(src/alphabet.rs:114:76-114:77)
  9: StorageDead(_48)
    SourceInfo(src/alphabet.rs:115:21-115:22)
  10: StorageDead(_47)
    SourceInfo(src/alphabet.rs:115:21-115:22)
  11: StorageDead(_43)
    SourceInfo(src/alphabet.rs:118:17-118:18)
  12: StorageDead(_35)
    SourceInfo(src/alphabet.rs:118:17-118:18)
  13: StorageDead(_34)
    SourceInfo(src/alphabet.rs:118:17-118:18)
  14: StorageDead(_33)
    SourceInfo(src/alphabet.rs:121:13-121:14)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb30
  }
  preds [bb22]
  succs [bb30]

bb24
  0: StorageDead(_50)
    SourceInfo(src/alphabet.rs:113:41-113:42)
  1: StorageDead(_49)
    SourceInfo(src/alphabet.rs:113:41-113:42)
  2: _47 = const ()
    SourceInfo(src/alphabet.rs:115:22-115:22)
  3: StorageDead(_48)
    SourceInfo(src/alphabet.rs:115:21-115:22)
  4: StorageDead(_47)
    SourceInfo(src/alphabet.rs:115:21-115:22)
  5: _54 = AddWithOverflow(_33, const 1_usize)
    SourceInfo(src/alphabet.rs:117:21-117:37)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:117:21-117:37)
      kind: assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", _33, const 1_usize) -> [success: bb25, unwind: bb33]
  }
  preds [bb22]
  succs [bb25, bb33]

bb25
  0: _33 = move (_54.0: usize)
    SourceInfo(src/alphabet.rs:117:21-117:37)
  1: _12 = const ()
    SourceInfo(src/alphabet.rs:105:51-118:18)
  2: StorageDead(_43)
    SourceInfo(src/alphabet.rs:118:17-118:18)
  3: StorageDead(_35)
    SourceInfo(src/alphabet.rs:118:17-118:18)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:105:17-118:18)
      kind: goto -> bb16
  }
  preds [bb24]
  succs [bb16]

bb26
  0: StorageDead(_36)
    SourceInfo(src/alphabet.rs:105:49-105:50)
  1: StorageLive(_56)
    SourceInfo(src/alphabet.rs:105:17-118:18)
  2: _34 = const ()
    SourceInfo(src/alphabet.rs:105:17-118:18)
  3: StorageDead(_56)
    SourceInfo(src/alphabet.rs:118:17-118:18)
  4: StorageDead(_35)
    SourceInfo(src/alphabet.rs:118:17-118:18)
  5: StorageDead(_34)
    SourceInfo(src/alphabet.rs:118:17-118:18)
  6: _58 = AddWithOverflow(_11, const 1_usize)
    SourceInfo(src/alphabet.rs:120:17-120:27)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:120:17-120:27)
      kind: assert(!move (_58.1: bool), "attempt to compute `{} + {}`, which would overflow", _11, const 1_usize) -> [success: bb27, unwind: bb33]
  }
  preds [bb17]
  succs [bb27, bb33]

bb27
  0: _11 = move (_58.0: usize)
    SourceInfo(src/alphabet.rs:120:17-120:27)
  1: _12 = const ()
    SourceInfo(src/alphabet.rs:87:41-121:14)
  2: StorageDead(_33)
    SourceInfo(src/alphabet.rs:121:13-121:14)
  3: StorageDead(_15)
    SourceInfo(src/alphabet.rs:121:13-121:14)
  4: StorageDead(_13)
    SourceInfo(src/alphabet.rs:121:13-121:14)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:87:13-121:14)
      kind: goto -> bb5
  }
  preds [bb26]
  succs [bb5]

bb28
  0: StorageDead(_14)
    SourceInfo(src/alphabet.rs:87:39-87:40)
  1: StorageLive(_60)
    SourceInfo(src/alphabet.rs:87:13-121:14)
  2: _10 = const ()
    SourceInfo(src/alphabet.rs:87:13-121:14)
  3: StorageDead(_60)
    SourceInfo(src/alphabet.rs:121:13-121:14)
  4: StorageDead(_13)
    SourceInfo(src/alphabet.rs:121:13-121:14)
  5: StorageDead(_11)
    SourceInfo(src/alphabet.rs:122:9-122:10)
  6: StorageDead(_10)
    SourceInfo(src/alphabet.rs:122:9-122:10)
  7: StorageLive(_62)
    SourceInfo(src/alphabet.rs:124:12-124:46)
  8: StorageLive(_63)
    SourceInfo(src/alphabet.rs:124:37-124:45)
  9: _63 = &(*_1)
    SourceInfo(src/alphabet.rs:124:37-124:45)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:124:12-124:46)
      kind: _62 = alphabet::Alphabet::from_str_unchecked(move _63) -> [return: bb29, unwind: bb33]
  }
  preds [bb6]
  succs [bb29, bb33]

bb29
  0: StorageDead(_63)
    SourceInfo(src/alphabet.rs:124:45-124:46)
  1: _0 = std::result::Result::<alphabet::Alphabet, alphabet::ParseAlphabetError>::Ok(move _62)
    SourceInfo(src/alphabet.rs:124:9-124:47)
  2: StorageDead(_62)
    SourceInfo(src/alphabet.rs:124:46-124:47)
  3: StorageDead(_2)
    SourceInfo(src/alphabet.rs:125:5-125:6)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:125:6-125:6)
      kind: goto -> bb32
  }
  preds [bb28]
  succs [bb32]

bb30
  0: StorageDead(_15)
    SourceInfo(src/alphabet.rs:121:13-121:14)
  1: StorageDead(_13)
    SourceInfo(src/alphabet.rs:121:13-121:14)
  2: StorageDead(_11)
    SourceInfo(src/alphabet.rs:122:9-122:10)
  3: StorageDead(_10)
    SourceInfo(src/alphabet.rs:122:9-122:10)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb31
  }
  preds [bb13, bb14, bb23]
  succs [bb31]

bb31
  0: StorageDead(_2)
    SourceInfo(src/alphabet.rs:125:5-125:6)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:125:6-125:6)
      kind: goto -> bb32
  }
  preds [bb3, bb30]
  succs [bb32]

bb32
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:125:6-125:6)
      kind: return
  }
  preds [bb29, bb31]
  succs []

bb33
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:79:5-125:6)
      kind: resume
  }
  preds [bb0, bb1, bb5, bb7, bb16, bb19, bb21, bb24, bb26, bb28]
  succs []

