bb0
  0: StorageLive(_4)
    SourceInfo(src/chunked_encoder.rs:32:13-32:20)
  1: _4 = [const 0_u8; 1024]
    SourceInfo(src/chunked_encoder.rs:32:23-32:36)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(src/chunked_encoder.rs:32:13-32:20)
  3: StorageLive(_5)
    SourceInfo(src/chunked_encoder.rs:33:9-43:10)
  4: StorageLive(_6)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  5: StorageLive(_7)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  6: StorageLive(_8)
    SourceInfo(src/chunked_encoder.rs:33:22-33:27)
  7: _8 = &(*_2)
    SourceInfo(src/chunked_encoder.rs:33:22-33:27)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:33:22-33:46)
      kind: _7 = core::slice::<impl [u8]>::chunks(move _8, const chunked_encoder::ChunkedEncoder::<'e, E>::encode::CHUNK_SIZE) -> [return: bb1, unwind: bb39]
  }
  preds []
  succs [bb1, bb39]

bb1
  0: StorageDead(_8)
    SourceInfo(src/chunked_encoder.rs:33:45-33:46)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:33:22-33:46)
      kind: _6 = <std::slice::Chunks<'_, u8> as std::iter::IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb39]
  }
  preds [bb0]
  succs [bb2, bb39]

bb2
  0: StorageDead(_7)
    SourceInfo(src/chunked_encoder.rs:33:45-33:46)
  1: PlaceMention(_6)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  2: StorageLive(_9)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  3: _9 = move _6
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:33:9-43:10)
      kind: goto -> bb3
  }
  preds [bb1]
  succs [bb3]

bb3
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:33:9-43:10)
      kind: falseUnwind -> [real: bb4, unwind: bb39]
  }
  preds [bb2, bb31]
  succs [bb4, bb39]

bb4
  0: StorageLive(_11)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  1: StorageLive(_12)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  2: StorageLive(_13)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  3: StorageLive(_14)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  4: _14 = &mut _9
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  5: _13 = &mut (*_14)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:33:22-33:46)
      kind: _12 = <std::slice::Chunks<'_, u8> as std::iter::Iterator>::next(move _13) -> [return: bb5, unwind: bb39]
  }
  preds [bb3]
  succs [bb5, bb39]

bb5
  0: StorageDead(_13)
    SourceInfo(src/chunked_encoder.rs:33:45-33:46)
  1: PlaceMention(_12)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  2: _15 = discriminant(_12)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:33:22-33:46)
      kind: switchInt(move _15) -> [0: bb7, 1: bb8, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb7, bb8]

bb6
  0: FakeRead(ForMatchedPlace(None), _12)
    SourceInfo(src/chunked_encoder.rs:33:22-33:46)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:33:22-33:46)
      kind: unreachable
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:33:9-43:10)
      kind: falseEdge -> [real: bb9, imaginary: bb8]
  }
  preds [bb5]
  succs [bb8, bb9]

bb8
  0: StorageLive(_17)
    SourceInfo(src/chunked_encoder.rs:33:13-33:18)
  1: _17 = ((_12 as Some).0: &[u8])
    SourceInfo(src/chunked_encoder.rs:33:13-33:18)
  2: StorageLive(_18)
    SourceInfo(src/chunked_encoder.rs:34:17-34:24)
  3: StorageLive(_19)
    SourceInfo(src/chunked_encoder.rs:34:27-34:38)
  4: _19 = &(*((*_1).0: &E))
    SourceInfo(src/chunked_encoder.rs:34:27-34:38)
  5: StorageLive(_20)
    SourceInfo(src/chunked_encoder.rs:34:55-34:60)
  6: _20 = &(*_17)
    SourceInfo(src/chunked_encoder.rs:34:55-34:60)
  7: StorageLive(_21)
    SourceInfo(src/chunked_encoder.rs:34:62-34:70)
  8: StorageLive(_22)
    SourceInfo(src/chunked_encoder.rs:34:62-34:70)
  9: StorageLive(_23)
    SourceInfo(src/chunked_encoder.rs:34:62-34:70)
  10: _23 = &mut _4
    SourceInfo(src/chunked_encoder.rs:34:62-34:70)
  11: _22 = &mut (*_23)
    SourceInfo(src/chunked_encoder.rs:34:62-34:70)
  12: _21 = move _22 as &mut [u8] (PointerCoercion(Unsize))
    SourceInfo(src/chunked_encoder.rs:34:62-34:70)
  13: StorageDead(_22)
    SourceInfo(src/chunked_encoder.rs:34:69-34:70)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:34:27-34:71)
      kind: _18 = <E as engine::Engine>::internal_encode(move _19, move _20, move _21) -> [return: bb10, unwind: bb39]
  }
  preds [bb5, bb7]
  succs [bb10, bb39]

bb9
  0: _5 = const ()
    SourceInfo(src/chunked_encoder.rs:33:9-43:10)
  1: StorageDead(_14)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  2: StorageDead(_12)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  3: StorageDead(_11)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  4: StorageDead(_9)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  5: StorageDead(_6)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  6: StorageDead(_5)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  7: StorageLive(_56)
    SourceInfo(src/chunked_encoder.rs:45:12-45:14)
  8: _56 = ()
    SourceInfo(src/chunked_encoder.rs:45:12-45:14)
  9: _0 = std::result::Result::<(), <S as chunked_encoder::Sink>::Error>::Ok(move _56)
    SourceInfo(src/chunked_encoder.rs:45:9-45:15)
  10: StorageDead(_56)
    SourceInfo(src/chunked_encoder.rs:45:14-45:15)
  11: StorageDead(_4)
    SourceInfo(src/chunked_encoder.rs:46:5-46:6)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:46:6-46:6)
      kind: goto -> bb34
  }
  preds [bb7]
  succs [bb34]

bb10
  0: StorageDead(_21)
    SourceInfo(src/chunked_encoder.rs:34:70-34:71)
  1: StorageDead(_20)
    SourceInfo(src/chunked_encoder.rs:34:70-34:71)
  2: StorageDead(_19)
    SourceInfo(src/chunked_encoder.rs:34:70-34:71)
  3: FakeRead(ForLet(None), _18)
    SourceInfo(src/chunked_encoder.rs:34:17-34:24)
  4: StorageDead(_23)
    SourceInfo(src/chunked_encoder.rs:34:71-34:72)
  5: StorageLive(_24)
    SourceInfo(src/chunked_encoder.rs:35:13-41:14)
  6: StorageLive(_25)
    SourceInfo(src/chunked_encoder.rs:35:16-35:41)
  7: StorageLive(_26)
    SourceInfo(src/chunked_encoder.rs:35:16-35:27)
  8: StorageLive(_27)
    SourceInfo(src/chunked_encoder.rs:35:16-35:21)
  9: _27 = &(*_17)
    SourceInfo(src/chunked_encoder.rs:35:16-35:21)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:35:16-35:27)
      kind: _26 = core::slice::<impl [u8]>::len(move _27) -> [return: bb11, unwind: bb39]
  }
  preds [bb8]
  succs [bb11, bb39]

bb11
  0: StorageDead(_27)
    SourceInfo(src/chunked_encoder.rs:35:26-35:27)
  1: _25 = Ne(move _26, const chunked_encoder::ChunkedEncoder::<'e, E>::encode::CHUNK_SIZE)
    SourceInfo(src/chunked_encoder.rs:35:16-35:41)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:35:16-35:41)
      kind: switchInt(move _25) -> [0: bb20, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb20]

bb12
  0: StorageDead(_26)
    SourceInfo(src/chunked_encoder.rs:35:40-35:41)
  1: StorageLive(_28)
    SourceInfo(src/chunked_encoder.rs:35:45-35:82)
  2: StorageLive(_29)
    SourceInfo(src/chunked_encoder.rs:35:45-35:65)
  3: StorageLive(_30)
    SourceInfo(src/chunked_encoder.rs:35:45-35:65)
  4: StorageLive(_31)
    SourceInfo(src/chunked_encoder.rs:35:45-35:56)
  5: _31 = &(*((*_1).0: &E))
    SourceInfo(src/chunked_encoder.rs:35:45-35:56)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:35:45-35:65)
      kind: _30 = <E as engine::Engine>::config(move _31) -> [return: bb13, unwind: bb39]
  }
  preds [bb11]
  succs [bb13, bb39]

bb13
  0: _29 = &(*_30)
    SourceInfo(src/chunked_encoder.rs:35:45-35:65)
  1: StorageDead(_31)
    SourceInfo(src/chunked_encoder.rs:35:64-35:65)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:35:45-35:82)
      kind: _28 = <<E as engine::Engine>::Config as engine::Config>::encode_padding(move _29) -> [return: bb14, unwind: bb39]
  }
  preds [bb12]
  succs [bb14, bb39]

bb14
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:35:45-35:82)
      kind: switchInt(move _28) -> [0: bb19, otherwise: bb15]
  }
  preds [bb13]
  succs [bb15, bb19]

bb15
  0: StorageDead(_30)
    SourceInfo(src/chunked_encoder.rs:35:81-35:82)
  1: StorageDead(_29)
    SourceInfo(src/chunked_encoder.rs:35:81-35:82)
  2: StorageLive(_32)
    SourceInfo(src/chunked_encoder.rs:40:24-40:57)
  3: StorageLive(_33)
    SourceInfo(src/chunked_encoder.rs:40:36-40:39)
  4: _33 = _18
    SourceInfo(src/chunked_encoder.rs:40:36-40:39)
  5: StorageLive(_34)
    SourceInfo(src/chunked_encoder.rs:40:41-40:56)
  6: StorageLive(_35)
    SourceInfo(src/chunked_encoder.rs:40:41-40:56)
  7: StorageLive(_36)
    SourceInfo(src/chunked_encoder.rs:40:49-40:56)
  8: StorageLive(_37)
    SourceInfo(src/chunked_encoder.rs:40:46-40:49)
  9: _37 = &mut _4
    SourceInfo(src/chunked_encoder.rs:40:46-40:49)
  10: StorageLive(_38)
    SourceInfo(src/chunked_encoder.rs:40:50-40:55)
  11: StorageLive(_39)
    SourceInfo(src/chunked_encoder.rs:40:50-40:53)
  12: _39 = _18
    SourceInfo(src/chunked_encoder.rs:40:50-40:53)
  13: _38 = std::ops::RangeFrom::<usize> { start: move _39 }
    SourceInfo(src/chunked_encoder.rs:40:50-40:55)
  14: StorageDead(_39)
    SourceInfo(src/chunked_encoder.rs:40:54-40:55)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:40:49-40:56)
      kind: _36 = <[u8; 1024] as std::ops::IndexMut<std::ops::RangeFrom<usize>>>::index_mut(move _37, move _38) -> [return: bb16, unwind: bb39]
  }
  preds [bb14]
  succs [bb16, bb39]

bb16
  0: StorageDead(_38)
    SourceInfo(src/chunked_encoder.rs:40:55-40:56)
  1: StorageDead(_37)
    SourceInfo(src/chunked_encoder.rs:40:55-40:56)
  2: _35 = &mut (*_36)
    SourceInfo(src/chunked_encoder.rs:40:41-40:56)
  3: _34 = &mut (*_35)
    SourceInfo(src/chunked_encoder.rs:40:41-40:56)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:40:24-40:57)
      kind: _32 = encode::add_padding(move _33, move _34) -> [return: bb17, unwind: bb39]
  }
  preds [bb15]
  succs [bb17, bb39]

bb17
  0: StorageDead(_34)
    SourceInfo(src/chunked_encoder.rs:40:56-40:57)
  1: StorageDead(_33)
    SourceInfo(src/chunked_encoder.rs:40:56-40:57)
  2: _40 = AddWithOverflow(_18, _32)
    SourceInfo(src/chunked_encoder.rs:40:17-40:57)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:40:17-40:57)
      kind: assert(!move (_40.1: bool), "attempt to compute `{} + {}`, which would overflow", _18, move _32) -> [success: bb18, unwind: bb39]
  }
  preds [bb16]
  succs [bb18, bb39]

bb18
  0: _18 = move (_40.0: usize)
    SourceInfo(src/chunked_encoder.rs:40:17-40:57)
  1: StorageDead(_32)
    SourceInfo(src/chunked_encoder.rs:40:56-40:57)
  2: StorageDead(_36)
    SourceInfo(src/chunked_encoder.rs:40:57-40:58)
  3: StorageDead(_35)
    SourceInfo(src/chunked_encoder.rs:40:57-40:58)
  4: _24 = const ()
    SourceInfo(src/chunked_encoder.rs:35:83-41:14)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:35:13-41:14)
      kind: goto -> bb22
  }
  preds [bb17]
  succs [bb22]

bb19
  0: StorageDead(_30)
    SourceInfo(src/chunked_encoder.rs:35:81-35:82)
  1: StorageDead(_29)
    SourceInfo(src/chunked_encoder.rs:35:81-35:82)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb21
  }
  preds [bb14]
  succs [bb21]

bb20
  0: StorageDead(_26)
    SourceInfo(src/chunked_encoder.rs:35:40-35:41)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb21
  }
  preds [bb11]
  succs [bb21]

bb21
  0: _24 = const ()
    SourceInfo(src/chunked_encoder.rs:41:14-41:14)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:35:13-41:14)
      kind: goto -> bb22
  }
  preds [bb19, bb20]
  succs [bb22]

bb22
  0: StorageDead(_28)
    SourceInfo(src/chunked_encoder.rs:41:13-41:14)
  1: StorageDead(_25)
    SourceInfo(src/chunked_encoder.rs:41:13-41:14)
  2: StorageDead(_24)
    SourceInfo(src/chunked_encoder.rs:41:13-41:14)
  3: StorageLive(_41)
    SourceInfo(src/chunked_encoder.rs:42:13-42:51)
  4: StorageLive(_42)
    SourceInfo(src/chunked_encoder.rs:42:13-42:51)
  5: StorageLive(_43)
    SourceInfo(src/chunked_encoder.rs:42:13-42:50)
  6: StorageLive(_44)
    SourceInfo(src/chunked_encoder.rs:42:13-42:17)
  7: _44 = &mut (*_3)
    SourceInfo(src/chunked_encoder.rs:42:13-42:17)
  8: StorageLive(_45)
    SourceInfo(src/chunked_encoder.rs:42:38-42:49)
  9: StorageLive(_46)
    SourceInfo(src/chunked_encoder.rs:42:38-42:49)
  10: StorageLive(_47)
    SourceInfo(src/chunked_encoder.rs:42:42-42:49)
  11: StorageLive(_48)
    SourceInfo(src/chunked_encoder.rs:42:39-42:42)
  12: _48 = &_4
    SourceInfo(src/chunked_encoder.rs:42:39-42:42)
  13: StorageLive(_49)
    SourceInfo(src/chunked_encoder.rs:42:43-42:48)
  14: StorageLive(_50)
    SourceInfo(src/chunked_encoder.rs:42:45-42:48)
  15: _50 = _18
    SourceInfo(src/chunked_encoder.rs:42:45-42:48)
  16: _49 = std::ops::RangeTo::<usize> { end: move _50 }
    SourceInfo(src/chunked_encoder.rs:42:43-42:48)
  17: StorageDead(_50)
    SourceInfo(src/chunked_encoder.rs:42:47-42:48)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:42-42:49)
      kind: _47 = <[u8; 1024] as std::ops::Index<std::ops::RangeTo<usize>>>::index(move _48, move _49) -> [return: bb23, unwind: bb39]
  }
  preds [bb18, bb21]
  succs [bb23, bb39]

bb23
  0: StorageDead(_49)
    SourceInfo(src/chunked_encoder.rs:42:48-42:49)
  1: StorageDead(_48)
    SourceInfo(src/chunked_encoder.rs:42:48-42:49)
  2: _46 = &(*_47)
    SourceInfo(src/chunked_encoder.rs:42:38-42:49)
  3: _45 = &(*_46)
    SourceInfo(src/chunked_encoder.rs:42:38-42:49)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:13-42:50)
      kind: _43 = <S as chunked_encoder::Sink>::write_encoded_bytes(move _44, move _45) -> [return: bb24, unwind: bb39]
  }
  preds [bb22]
  succs [bb24, bb39]

bb24
  0: StorageDead(_45)
    SourceInfo(src/chunked_encoder.rs:42:49-42:50)
  1: StorageDead(_44)
    SourceInfo(src/chunked_encoder.rs:42:49-42:50)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:13-42:51)
      kind: _42 = <std::result::Result<(), <S as chunked_encoder::Sink>::Error> as std::ops::Try>::branch(move _43) -> [return: bb25, unwind: bb38]
  }
  preds [bb23]
  succs [bb25, bb38]

bb25
  0: StorageDead(_43)
    SourceInfo(src/chunked_encoder.rs:42:50-42:51)
  1: PlaceMention(_42)
    SourceInfo(src/chunked_encoder.rs:42:13-42:51)
  2: _51 = discriminant(_42)
    SourceInfo(src/chunked_encoder.rs:42:13-42:51)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:13-42:51)
      kind: switchInt(move _51) -> [0: bb28, 1: bb27, otherwise: bb26]
  }
  preds [bb24]
  succs [bb26, bb27, bb28]

bb26
  0: FakeRead(ForMatchedPlace(None), _42)
    SourceInfo(src/chunked_encoder.rs:42:13-42:51)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:13-42:51)
      kind: unreachable
  }
  preds [bb25]
  succs []

bb27
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:50-42:51)
      kind: falseEdge -> [real: bb29, imaginary: bb28]
  }
  preds [bb25]
  succs [bb28, bb29]

bb28
  0: StorageLive(_55)
    SourceInfo(src/chunked_encoder.rs:42:13-42:51)
  1: _55 = ((_42 as Continue).0: ())
    SourceInfo(src/chunked_encoder.rs:42:13-42:51)
  2: _41 = _55
    SourceInfo(src/chunked_encoder.rs:42:13-42:51)
  3: StorageDead(_55)
    SourceInfo(src/chunked_encoder.rs:42:50-42:51)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:51-42:52)
      kind: drop(_42) -> [return: bb31, unwind: bb39]
  }
  preds [bb25, bb27]
  succs [bb31, bb39]

bb29
  0: StorageLive(_52)
    SourceInfo(src/chunked_encoder.rs:42:50-42:51)
  1: _52 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, <S as chunked_encoder::Sink>::Error>)
    SourceInfo(src/chunked_encoder.rs:42:50-42:51)
  2: StorageLive(_54)
    SourceInfo(src/chunked_encoder.rs:42:50-42:51)
  3: _54 = move _52
    SourceInfo(src/chunked_encoder.rs:42:50-42:51)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:13-42:51)
      kind: _0 = <std::result::Result<(), <S as chunked_encoder::Sink>::Error> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, <S as chunked_encoder::Sink>::Error>>>::from_residual(move _54) -> [return: bb30, unwind: bb35]
  }
  preds [bb27]
  succs [bb30, bb35]

bb30
  0: StorageDead(_54)
    SourceInfo(src/chunked_encoder.rs:42:50-42:51)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:50-42:51)
      kind: drop(_52) -> [return: bb32, unwind: bb37]
  }
  preds [bb29]
  succs [bb32, bb37]

bb31
  0: StorageDead(_47)
    SourceInfo(src/chunked_encoder.rs:42:51-42:52)
  1: StorageDead(_46)
    SourceInfo(src/chunked_encoder.rs:42:51-42:52)
  2: StorageDead(_42)
    SourceInfo(src/chunked_encoder.rs:42:51-42:52)
  3: StorageDead(_41)
    SourceInfo(src/chunked_encoder.rs:42:51-42:52)
  4: _11 = const ()
    SourceInfo(src/chunked_encoder.rs:33:47-43:10)
  5: StorageDead(_18)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  6: StorageDead(_17)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  7: StorageDead(_14)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  8: StorageDead(_12)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  9: StorageDead(_11)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  10: _10 = const ()
    SourceInfo(src/chunked_encoder.rs:33:9-43:10)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:33:9-43:10)
      kind: goto -> bb3
  }
  preds [bb28]
  succs [bb3]

bb32
  0: StorageDead(_52)
    SourceInfo(src/chunked_encoder.rs:42:50-42:51)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:51-42:52)
      kind: drop(_42) -> [return: bb33, unwind: bb39]
  }
  preds [bb30]
  succs [bb33, bb39]

bb33
  0: StorageDead(_47)
    SourceInfo(src/chunked_encoder.rs:42:51-42:52)
  1: StorageDead(_46)
    SourceInfo(src/chunked_encoder.rs:42:51-42:52)
  2: StorageDead(_42)
    SourceInfo(src/chunked_encoder.rs:42:51-42:52)
  3: StorageDead(_41)
    SourceInfo(src/chunked_encoder.rs:42:51-42:52)
  4: StorageDead(_18)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  5: StorageDead(_17)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  6: StorageDead(_14)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  7: StorageDead(_12)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  8: StorageDead(_11)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  9: StorageDead(_9)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  10: StorageDead(_6)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  11: StorageDead(_5)
    SourceInfo(src/chunked_encoder.rs:43:9-43:10)
  12: StorageDead(_4)
    SourceInfo(src/chunked_encoder.rs:46:5-46:6)
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:46:6-46:6)
      kind: goto -> bb34
  }
  preds [bb32]
  succs [bb34]

bb34
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:46:6-46:6)
      kind: return
  }
  preds [bb9, bb33]
  succs []

bb35
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:50-42:51)
      kind: drop(_54) -> [return: bb36, unwind terminate(cleanup)]
  }
  preds [bb29]
  succs [bb36]

bb36
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:50-42:51)
      kind: drop(_52) -> [return: bb37, unwind terminate(cleanup)]
  }
  preds [bb35]
  succs [bb37]

bb37
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:51-42:52)
      kind: drop(_42) -> [return: bb39, unwind terminate(cleanup)]
  }
  preds [bb30, bb36]
  succs [bb39]

bb38
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:42:50-42:51)
      kind: drop(_43) -> [return: bb39, unwind terminate(cleanup)]
  }
  preds [bb24]
  succs [bb39]

bb39
  Terminator {
      source_info: SourceInfo(src/chunked_encoder.rs:28:5-46:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4, bb8, bb10, bb12, bb13, bb15, bb16, bb17, bb22, bb23, bb28, bb32, bb37, bb38]
  succs []

