bb0
  0: StorageLive(_3)
    SourceInfo(src/encode.rs:99:9-99:12)
  1: StorageLive(_4)
    SourceInfo(src/encode.rs:99:15-99:24)
  2: _4 = _1
    SourceInfo(src/encode.rs:99:15-99:24)
  3: _5 = Eq(const 3_usize, const 0_usize)
    SourceInfo(src/encode.rs:99:15-99:28)
  Terminator {
      source_info: SourceInfo(src/encode.rs:99:15-99:28)
      kind: assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", _4) -> [success: bb1, unwind: bb20]
  }
  preds []
  succs [bb1, bb20]

bb1
  0: _3 = Rem(move _4, const 3_usize)
    SourceInfo(src/encode.rs:99:15-99:28)
  1: StorageDead(_4)
    SourceInfo(src/encode.rs:99:27-99:28)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(src/encode.rs:99:9-99:12)
  3: StorageLive(_6)
    SourceInfo(src/encode.rs:101:9-101:30)
  4: StorageLive(_7)
    SourceInfo(src/encode.rs:101:33-101:42)
  5: _7 = _1
    SourceInfo(src/encode.rs:101:33-101:42)
  6: _8 = Eq(const 3_usize, const 0_usize)
    SourceInfo(src/encode.rs:101:33-101:46)
  Terminator {
      source_info: SourceInfo(src/encode.rs:101:33-101:46)
      kind: assert(!move _8, "attempt to divide `{}` by zero", _7) -> [success: bb2, unwind: bb20]
  }
  preds [bb0]
  succs [bb2, bb20]

bb2
  0: _6 = Div(move _7, const 3_usize)
    SourceInfo(src/encode.rs:101:33-101:46)
  1: StorageDead(_7)
    SourceInfo(src/encode.rs:101:45-101:46)
  2: FakeRead(ForLet(None), _6)
    SourceInfo(src/encode.rs:101:9-101:30)
  3: StorageLive(_9)
    SourceInfo(src/encode.rs:104:9-104:30)
  4: StorageLive(_10)
    SourceInfo(src/encode.rs:105:46-105:82)
  5: StorageLive(_11)
    SourceInfo(src/encode.rs:105:46-105:67)
  6: _11 = _6
    SourceInfo(src/encode.rs:105:46-105:67)
  Terminator {
      source_info: SourceInfo(src/encode.rs:105:46-105:82)
      kind: _10 = core::num::<impl usize>::checked_mul(move _11, const 4_usize) -> [return: bb3, unwind: bb20]
  }
  preds [bb1]
  succs [bb3, bb20]

bb3
  0: StorageDead(_11)
    SourceInfo(src/encode.rs:105:81-105:82)
  1: PlaceMention(_10)
    SourceInfo(src/encode.rs:105:46-105:82)
  2: _12 = discriminant(_10)
    SourceInfo(src/encode.rs:105:46-105:82)
  Terminator {
      source_info: SourceInfo(src/encode.rs:105:16-105:43)
      kind: switchInt(move _12) -> [1: bb4, otherwise: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  Terminator {
      source_info: SourceInfo(src/encode.rs:105:16-105:43)
      kind: falseEdge -> [real: bb5, imaginary: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageLive(_13)
    SourceInfo(src/encode.rs:105:21-105:42)
  1: _13 = ((_10 as Some).0: usize)
    SourceInfo(src/encode.rs:105:21-105:42)
  2: _9 = _13
    SourceInfo(src/encode.rs:106:13-106:34)
  3: StorageDead(_13)
    SourceInfo(src/encode.rs:107:9-107:10)
  4: FakeRead(ForLet(None), _9)
    SourceInfo(src/encode.rs:104:9-104:30)
  5: StorageDead(_10)
    SourceInfo(src/encode.rs:109:10-109:11)
  6: StorageLive(_15)
    SourceInfo(src/encode.rs:111:8-111:15)
  7: StorageLive(_16)
    SourceInfo(src/encode.rs:111:8-111:11)
  8: _16 = _3
    SourceInfo(src/encode.rs:111:8-111:11)
  9: _15 = Gt(move _16, const 0_usize)
    SourceInfo(src/encode.rs:111:8-111:15)
  Terminator {
      source_info: SourceInfo(src/encode.rs:111:8-111:15)
      kind: switchInt(move _15) -> [0: bb8, otherwise: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb6
  0: _0 = std::option::Option::<usize>::None
    SourceInfo(src/encode.rs:108:20-108:24)
  1: StorageDead(_10)
    SourceInfo(src/encode.rs:109:10-109:11)
  2: StorageDead(_9)
    SourceInfo(src/encode.rs:126:1-126:2)
  3: StorageDead(_6)
    SourceInfo(src/encode.rs:126:1-126:2)
  4: StorageDead(_3)
    SourceInfo(src/encode.rs:126:1-126:2)
  Terminator {
      source_info: SourceInfo(src/encode.rs:126:2-126:2)
      kind: goto -> bb19
  }
  preds [bb3, bb4]
  succs [bb19]

bb7
  0: StorageDead(_16)
    SourceInfo(src/encode.rs:111:14-111:15)
  1: StorageLive(_17)
    SourceInfo(src/encode.rs:112:12-112:19)
  2: _17 = _2
    SourceInfo(src/encode.rs:112:12-112:19)
  Terminator {
      source_info: SourceInfo(src/encode.rs:112:12-112:19)
      kind: switchInt(move _17) -> [0: bb11, otherwise: bb9]
  }
  preds [bb5]
  succs [bb9, bb11]

bb8
  0: StorageDead(_16)
    SourceInfo(src/encode.rs:111:14-111:15)
  1: StorageLive(_22)
    SourceInfo(src/encode.rs:124:14-124:35)
  2: _22 = _9
    SourceInfo(src/encode.rs:124:14-124:35)
  3: _0 = std::option::Option::<usize>::Some(move _22)
    SourceInfo(src/encode.rs:124:9-124:36)
  4: StorageDead(_22)
    SourceInfo(src/encode.rs:124:35-124:36)
  Terminator {
      source_info: SourceInfo(src/encode.rs:111:5-125:6)
      kind: goto -> bb18
  }
  preds [bb5]
  succs [bb18]

bb9
  0: StorageLive(_18)
    SourceInfo(src/encode.rs:113:13-113:34)
  1: _18 = _9
    SourceInfo(src/encode.rs:113:13-113:34)
  Terminator {
      source_info: SourceInfo(src/encode.rs:113:13-113:49)
      kind: _0 = core::num::<impl usize>::checked_add(move _18, const 4_usize) -> [return: bb10, unwind: bb20]
  }
  preds [bb7]
  succs [bb10, bb20]

bb10
  0: StorageDead(_18)
    SourceInfo(src/encode.rs:113:48-113:49)
  Terminator {
      source_info: SourceInfo(src/encode.rs:112:9-122:10)
      kind: goto -> bb17
  }
  preds [bb9]
  succs [bb17]

bb11
  0: StorageLive(_19)
    SourceInfo(src/encode.rs:115:17-115:28)
  1: PlaceMention(_3)
    SourceInfo(src/encode.rs:115:37-115:40)
  Terminator {
      source_info: SourceInfo(src/encode.rs:115:31-115:40)
      kind: switchInt(_3) -> [1: bb13, otherwise: bb12]
  }
  preds [bb7]
  succs [bb12, bb13]

bb12
  0: _19 = const 3_usize
    SourceInfo(src/encode.rs:119:22-119:23)
  Terminator {
      source_info: SourceInfo(src/encode.rs:119:22-119:23)
      kind: goto -> bb15
  }
  preds [bb11, bb13]
  succs [bb15]

bb13
  Terminator {
      source_info: SourceInfo(src/encode.rs:116:17-116:18)
      kind: falseEdge -> [real: bb14, imaginary: bb12]
  }
  preds [bb11]
  succs [bb12, bb14]

bb14
  0: _19 = const 2_usize
    SourceInfo(src/encode.rs:116:22-116:23)
  Terminator {
      source_info: SourceInfo(src/encode.rs:116:22-116:23)
      kind: goto -> bb15
  }
  preds [bb13]
  succs [bb15]

bb15
  0: FakeRead(ForLet(None), _19)
    SourceInfo(src/encode.rs:115:17-115:28)
  1: StorageLive(_20)
    SourceInfo(src/encode.rs:121:13-121:34)
  2: _20 = _9
    SourceInfo(src/encode.rs:121:13-121:34)
  3: StorageLive(_21)
    SourceInfo(src/encode.rs:121:47-121:58)
  4: _21 = _19
    SourceInfo(src/encode.rs:121:47-121:58)
  Terminator {
      source_info: SourceInfo(src/encode.rs:121:13-121:59)
      kind: _0 = core::num::<impl usize>::checked_add(move _20, move _21) -> [return: bb16, unwind: bb20]
  }
  preds [bb12, bb14]
  succs [bb16, bb20]

bb16
  0: StorageDead(_21)
    SourceInfo(src/encode.rs:121:58-121:59)
  1: StorageDead(_20)
    SourceInfo(src/encode.rs:121:58-121:59)
  2: StorageDead(_19)
    SourceInfo(src/encode.rs:122:9-122:10)
  Terminator {
      source_info: SourceInfo(src/encode.rs:112:9-122:10)
      kind: goto -> bb17
  }
  preds [bb15]
  succs [bb17]

bb17
  0: StorageDead(_17)
    SourceInfo(src/encode.rs:122:9-122:10)
  Terminator {
      source_info: SourceInfo(src/encode.rs:111:5-125:6)
      kind: goto -> bb18
  }
  preds [bb10, bb16]
  succs [bb18]

bb18
  0: StorageDead(_15)
    SourceInfo(src/encode.rs:125:5-125:6)
  1: StorageDead(_9)
    SourceInfo(src/encode.rs:126:1-126:2)
  2: StorageDead(_6)
    SourceInfo(src/encode.rs:126:1-126:2)
  3: StorageDead(_3)
    SourceInfo(src/encode.rs:126:1-126:2)
  Terminator {
      source_info: SourceInfo(src/encode.rs:126:2-126:2)
      kind: goto -> bb19
  }
  preds [bb8, bb17]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(src/encode.rs:126:2-126:2)
      kind: return
  }
  preds [bb6, bb18]
  succs []

bb20
  Terminator {
      source_info: SourceInfo(src/encode.rs:98:1-126:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb9, bb15]
  succs []

