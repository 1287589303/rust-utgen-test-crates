bb0
  0: StorageLive(_4)
    SourceInfo(src/engine/general_purpose/mod.rs:52:13-52:28)
  1: _4 = const 0_usize
    SourceInfo(src/engine/general_purpose/mod.rs:52:38-52:39)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(src/engine/general_purpose/mod.rs:52:13-52:28)
  3: AscribeUserType(_4, o, UserTypeProjection { base: UserType(1), projs: [] })
    SourceInfo(src/engine/general_purpose/mod.rs:52:30-52:35)
  4: StorageLive(_5)
    SourceInfo(src/engine/general_purpose/mod.rs:59:13-59:28)
  5: StorageLive(_6)
    SourceInfo(src/engine/general_purpose/mod.rs:59:31-59:42)
  6: StorageLive(_7)
    SourceInfo(src/engine/general_purpose/mod.rs:59:31-59:36)
  7: _7 = &(*_2)
    SourceInfo(src/engine/general_purpose/mod.rs:59:31-59:36)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:59:31-59:42)
      kind: _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb1, unwind: bb195]
  }
  preds []
  succs [bb1, bb195]

bb1
  0: StorageDead(_7)
    SourceInfo(src/engine/general_purpose/mod.rs:59:41-59:42)
  1: StorageLive(_8)
    SourceInfo(src/engine/general_purpose/mod.rs:59:58-59:86)
  2: StorageLive(_9)
    SourceInfo(src/engine/general_purpose/mod.rs:59:58-59:82)
  3: _10 = MulWithOverflow(const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:59:58-59:82)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:59:58-59:82)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize) -> [success: bb2, unwind: bb195]
  }
  preds [bb0]
  succs [bb2, bb195]

bb2
  0: _9 = move (_10.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:59:58-59:82)
  1: _11 = AddWithOverflow(_9, const 2_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:59:58-59:86)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:59:58-59:86)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 2_usize) -> [success: bb3, unwind: bb195]
  }
  preds [bb1]
  succs [bb3, bb195]

bb3
  0: _8 = move (_11.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:59:58-59:86)
  1: StorageDead(_9)
    SourceInfo(src/engine/general_purpose/mod.rs:59:85-59:86)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:59:31-59:87)
      kind: _5 = core::num::<impl usize>::saturating_sub(move _6, move _8) -> [return: bb4, unwind: bb195]
  }
  preds [bb2]
  succs [bb4, bb195]

bb4
  0: StorageDead(_8)
    SourceInfo(src/engine/general_purpose/mod.rs:59:86-59:87)
  1: StorageDead(_6)
    SourceInfo(src/engine/general_purpose/mod.rs:59:86-59:87)
  2: FakeRead(ForLet(None), _5)
    SourceInfo(src/engine/general_purpose/mod.rs:59:13-59:28)
  3: StorageLive(_12)
    SourceInfo(src/engine/general_purpose/mod.rs:60:13-60:29)
  4: _12 = const 0_usize
    SourceInfo(src/engine/general_purpose/mod.rs:60:32-60:33)
  5: FakeRead(ForLet(None), _12)
    SourceInfo(src/engine/general_purpose/mod.rs:60:13-60:29)
  6: StorageLive(_13)
    SourceInfo(src/engine/general_purpose/mod.rs:62:9-126:10)
  7: StorageLive(_14)
    SourceInfo(src/engine/general_purpose/mod.rs:62:12-62:31)
  8: StorageLive(_15)
    SourceInfo(src/engine/general_purpose/mod.rs:62:12-62:27)
  9: _15 = _5
    SourceInfo(src/engine/general_purpose/mod.rs:62:12-62:27)
  10: _14 = Gt(move _15, const 0_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:62:12-62:31)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:62:12-62:31)
      kind: switchInt(move _14) -> [0: bb125, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb125]

bb5
  0: StorageDead(_15)
    SourceInfo(src/engine/general_purpose/mod.rs:62:30-62:31)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:63:13-125:14)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:63:13-125:14)
      kind: falseUnwind -> [real: bb7, unwind: bb195]
  }
  preds [bb5, bb123]
  succs [bb7, bb195]

bb7
  0: StorageLive(_17)
    SourceInfo(src/engine/general_purpose/mod.rs:63:19-63:49)
  1: StorageLive(_18)
    SourceInfo(src/engine/general_purpose/mod.rs:63:19-63:30)
  2: _18 = _4
    SourceInfo(src/engine/general_purpose/mod.rs:63:19-63:30)
  3: StorageLive(_19)
    SourceInfo(src/engine/general_purpose/mod.rs:63:34-63:49)
  4: _19 = _5
    SourceInfo(src/engine/general_purpose/mod.rs:63:34-63:49)
  5: _17 = Le(move _18, move _19)
    SourceInfo(src/engine/general_purpose/mod.rs:63:19-63:49)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:63:19-63:49)
      kind: switchInt(move _17) -> [0: bb124, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb124]

bb8
  0: StorageDead(_19)
    SourceInfo(src/engine/general_purpose/mod.rs:63:48-63:49)
  1: StorageDead(_18)
    SourceInfo(src/engine/general_purpose/mod.rs:63:48-63:49)
  2: StorageLive(_20)
    SourceInfo(src/engine/general_purpose/mod.rs:66:21-66:32)
  3: StorageLive(_21)
    SourceInfo(src/engine/general_purpose/mod.rs:67:27-67:88)
  4: StorageLive(_22)
    SourceInfo(src/engine/general_purpose/mod.rs:67:22-67:27)
  5: _22 = &(*_2)
    SourceInfo(src/engine/general_purpose/mod.rs:67:22-67:27)
  6: StorageLive(_23)
    SourceInfo(src/engine/general_purpose/mod.rs:67:28-67:87)
  7: StorageLive(_24)
    SourceInfo(src/engine/general_purpose/mod.rs:67:28-67:39)
  8: _24 = _4
    SourceInfo(src/engine/general_purpose/mod.rs:67:28-67:39)
  9: StorageLive(_25)
    SourceInfo(src/engine/general_purpose/mod.rs:67:41-67:87)
  10: StorageLive(_26)
    SourceInfo(src/engine/general_purpose/mod.rs:67:42-67:53)
  11: _26 = _4
    SourceInfo(src/engine/general_purpose/mod.rs:67:42-67:53)
  12: StorageLive(_27)
    SourceInfo(src/engine/general_purpose/mod.rs:67:56-67:86)
  13: StorageLive(_28)
    SourceInfo(src/engine/general_purpose/mod.rs:67:57-67:81)
  14: _29 = MulWithOverflow(const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:67:57-67:81)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:67:57-67:81)
      kind: assert(!move (_29.1: bool), "attempt to compute `{} * {}`, which would overflow", const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize) -> [success: bb9, unwind: bb195]
  }
  preds [bb7]
  succs [bb9, bb195]

bb9
  0: _28 = move (_29.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:67:57-67:81)
  1: _30 = AddWithOverflow(_28, const 2_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:67:56-67:86)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:67:56-67:86)
      kind: assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", move _28, const 2_usize) -> [success: bb10, unwind: bb195]
  }
  preds [bb8]
  succs [bb10, bb195]

bb10
  0: _27 = move (_30.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:67:56-67:86)
  1: StorageDead(_28)
    SourceInfo(src/engine/general_purpose/mod.rs:67:85-67:86)
  2: _31 = AddWithOverflow(_26, _27)
    SourceInfo(src/engine/general_purpose/mod.rs:67:41-67:87)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:67:41-67:87)
      kind: assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", move _26, move _27) -> [success: bb11, unwind: bb195]
  }
  preds [bb9]
  succs [bb11, bb195]

bb11
  0: _25 = move (_31.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:67:41-67:87)
  1: StorageDead(_27)
    SourceInfo(src/engine/general_purpose/mod.rs:67:86-67:87)
  2: StorageDead(_26)
    SourceInfo(src/engine/general_purpose/mod.rs:67:86-67:87)
  3: _23 = std::ops::Range::<usize> { start: move _24, end: move _25 }
    SourceInfo(src/engine/general_purpose/mod.rs:67:28-67:87)
  4: StorageDead(_25)
    SourceInfo(src/engine/general_purpose/mod.rs:67:86-67:87)
  5: StorageDead(_24)
    SourceInfo(src/engine/general_purpose/mod.rs:67:86-67:87)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:67:27-67:88)
      kind: _21 = <[u8] as std::ops::Index<std::ops::Range<usize>>>::index(move _22, move _23) -> [return: bb12, unwind: bb195]
  }
  preds [bb10]
  succs [bb12, bb195]

bb12
  0: StorageDead(_23)
    SourceInfo(src/engine/general_purpose/mod.rs:67:87-67:88)
  1: StorageDead(_22)
    SourceInfo(src/engine/general_purpose/mod.rs:67:87-67:88)
  2: _20 = &(*_21)
    SourceInfo(src/engine/general_purpose/mod.rs:67:21-67:88)
  3: FakeRead(ForLet(None), _20)
    SourceInfo(src/engine/general_purpose/mod.rs:66:21-66:32)
  4: StorageLive(_32)
    SourceInfo(src/engine/general_purpose/mod.rs:68:21-68:33)
  5: StorageLive(_33)
    SourceInfo(src/engine/general_purpose/mod.rs:69:32-69:89)
  6: StorageLive(_34)
    SourceInfo(src/engine/general_purpose/mod.rs:69:26-69:32)
  7: _34 = &mut (*_3)
    SourceInfo(src/engine/general_purpose/mod.rs:69:26-69:32)
  8: StorageLive(_35)
    SourceInfo(src/engine/general_purpose/mod.rs:69:33-69:88)
  9: StorageLive(_36)
    SourceInfo(src/engine/general_purpose/mod.rs:69:33-69:45)
  10: _36 = _12
    SourceInfo(src/engine/general_purpose/mod.rs:69:33-69:45)
  11: StorageLive(_37)
    SourceInfo(src/engine/general_purpose/mod.rs:69:47-69:88)
  12: StorageLive(_38)
    SourceInfo(src/engine/general_purpose/mod.rs:69:48-69:60)
  13: _38 = _12
    SourceInfo(src/engine/general_purpose/mod.rs:69:48-69:60)
  14: StorageLive(_39)
    SourceInfo(src/engine/general_purpose/mod.rs:69:63-69:87)
  15: _40 = MulWithOverflow(const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 8_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:69:63-69:87)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:69:63-69:87)
      kind: assert(!move (_40.1: bool), "attempt to compute `{} * {}`, which would overflow", const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 8_usize) -> [success: bb13, unwind: bb195]
  }
  preds [bb11]
  succs [bb13, bb195]

bb13
  0: _39 = move (_40.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:69:63-69:87)
  1: _41 = AddWithOverflow(_38, _39)
    SourceInfo(src/engine/general_purpose/mod.rs:69:47-69:88)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:69:47-69:88)
      kind: assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, move _39) -> [success: bb14, unwind: bb195]
  }
  preds [bb12]
  succs [bb14, bb195]

bb14
  0: _37 = move (_41.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:69:47-69:88)
  1: StorageDead(_39)
    SourceInfo(src/engine/general_purpose/mod.rs:69:87-69:88)
  2: StorageDead(_38)
    SourceInfo(src/engine/general_purpose/mod.rs:69:87-69:88)
  3: _35 = std::ops::Range::<usize> { start: move _36, end: move _37 }
    SourceInfo(src/engine/general_purpose/mod.rs:69:33-69:88)
  4: StorageDead(_37)
    SourceInfo(src/engine/general_purpose/mod.rs:69:87-69:88)
  5: StorageDead(_36)
    SourceInfo(src/engine/general_purpose/mod.rs:69:87-69:88)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:69:32-69:89)
      kind: _33 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _34, move _35) -> [return: bb15, unwind: bb195]
  }
  preds [bb13]
  succs [bb15, bb195]

bb15
  0: StorageDead(_35)
    SourceInfo(src/engine/general_purpose/mod.rs:69:88-69:89)
  1: StorageDead(_34)
    SourceInfo(src/engine/general_purpose/mod.rs:69:88-69:89)
  2: _32 = &mut (*_33)
    SourceInfo(src/engine/general_purpose/mod.rs:69:21-69:89)
  3: FakeRead(ForLet(None), _32)
    SourceInfo(src/engine/general_purpose/mod.rs:68:21-68:33)
  4: StorageLive(_42)
    SourceInfo(src/engine/general_purpose/mod.rs:79:21-79:30)
  5: StorageLive(_43)
    SourceInfo(src/engine/general_purpose/mod.rs:79:42-79:59)
  6: StorageLive(_44)
    SourceInfo(src/engine/general_purpose/mod.rs:79:42-79:59)
  7: StorageLive(_45)
    SourceInfo(src/engine/general_purpose/mod.rs:79:54-79:59)
  8: StorageLive(_46)
    SourceInfo(src/engine/general_purpose/mod.rs:79:43-79:54)
  9: _46 = &(*_20)
    SourceInfo(src/engine/general_purpose/mod.rs:79:43-79:54)
  10: StorageLive(_47)
    SourceInfo(src/engine/general_purpose/mod.rs:79:55-79:58)
  11: _47 = std::ops::RangeFrom::<usize> { start: const 0_usize }
    SourceInfo(src/engine/general_purpose/mod.rs:79:55-79:58)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:79:54-79:59)
      kind: _45 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _46, move _47) -> [return: bb16, unwind: bb195]
  }
  preds [bb14]
  succs [bb16, bb195]

bb16
  0: StorageDead(_47)
    SourceInfo(src/engine/general_purpose/mod.rs:79:58-79:59)
  1: StorageDead(_46)
    SourceInfo(src/engine/general_purpose/mod.rs:79:58-79:59)
  2: _44 = &(*_45)
    SourceInfo(src/engine/general_purpose/mod.rs:79:42-79:59)
  3: _43 = &(*_44)
    SourceInfo(src/engine/general_purpose/mod.rs:79:42-79:59)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:79:33-79:60)
      kind: _42 = engine::general_purpose::read_u64(move _43) -> [return: bb17, unwind: bb195]
  }
  preds [bb15]
  succs [bb17, bb195]

bb17
  0: StorageDead(_43)
    SourceInfo(src/engine/general_purpose/mod.rs:79:59-79:60)
  1: FakeRead(ForLet(None), _42)
    SourceInfo(src/engine/general_purpose/mod.rs:79:21-79:30)
  2: StorageDead(_45)
    SourceInfo(src/engine/general_purpose/mod.rs:79:60-79:61)
  3: StorageDead(_44)
    SourceInfo(src/engine/general_purpose/mod.rs:79:60-79:61)
  4: StorageLive(_48)
    SourceInfo(src/engine/general_purpose/mod.rs:81:35-81:97)
  5: StorageLive(_49)
    SourceInfo(src/engine/general_purpose/mod.rs:81:53-81:96)
  6: StorageLive(_50)
    SourceInfo(src/engine/general_purpose/mod.rs:81:53-81:87)
  7: StorageLive(_51)
    SourceInfo(src/engine/general_purpose/mod.rs:81:54-81:71)
  8: StorageLive(_52)
    SourceInfo(src/engine/general_purpose/mod.rs:81:55-81:64)
  9: _52 = _42
    SourceInfo(src/engine/general_purpose/mod.rs:81:55-81:64)
  10: _53 = const 58_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:81:54-81:71)
  11: _54 = Lt(move _53, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:81:54-81:71)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:81:54-81:71)
      kind: assert(move _54, "attempt to shift right by `{}`, which would overflow", const 58_i32) -> [success: bb18, unwind: bb195]
  }
  preds [bb16]
  succs [bb18, bb195]

bb18
  0: _51 = Shr(move _52, const 58_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:81:54-81:71)
  1: StorageDead(_52)
    SourceInfo(src/engine/general_purpose/mod.rs:81:70-81:71)
  2: _50 = BitAnd(move _51, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:81:53-81:87)
  3: StorageDead(_51)
    SourceInfo(src/engine/general_purpose/mod.rs:81:86-81:87)
  4: _49 = move _50 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:81:53-81:96)
  5: StorageDead(_50)
    SourceInfo(src/engine/general_purpose/mod.rs:81:95-81:96)
  6: _55 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:81:35-81:97)
  7: _56 = Lt(_49, _55)
    SourceInfo(src/engine/general_purpose/mod.rs:81:35-81:97)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:81:35-81:97)
      kind: assert(move _56, "index out of bounds: the length is {} but the index is {}", move _55, _49) -> [success: bb19, unwind: bb195]
  }
  preds [bb17]
  succs [bb19, bb195]

bb19
  0: _48 = ((*_1).0: [u8; 64])[_49]
    SourceInfo(src/engine/general_purpose/mod.rs:81:35-81:97)
  1: StorageLive(_57)
    SourceInfo(src/engine/general_purpose/mod.rs:81:30-81:31)
  2: _57 = const 0_usize
    SourceInfo(src/engine/general_purpose/mod.rs:81:30-81:31)
  3: _58 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:81:17-81:32)
  4: _59 = Lt(_57, _58)
    SourceInfo(src/engine/general_purpose/mod.rs:81:17-81:32)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:81:17-81:32)
      kind: assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> [success: bb20, unwind: bb195]
  }
  preds [bb18]
  succs [bb20, bb195]

bb20
  0: (*_32)[_57] = move _48
    SourceInfo(src/engine/general_purpose/mod.rs:81:17-81:97)
  1: StorageDead(_48)
    SourceInfo(src/engine/general_purpose/mod.rs:81:96-81:97)
  2: StorageDead(_57)
    SourceInfo(src/engine/general_purpose/mod.rs:81:97-81:98)
  3: StorageDead(_49)
    SourceInfo(src/engine/general_purpose/mod.rs:81:97-81:98)
  4: StorageLive(_60)
    SourceInfo(src/engine/general_purpose/mod.rs:82:35-82:97)
  5: StorageLive(_61)
    SourceInfo(src/engine/general_purpose/mod.rs:82:53-82:96)
  6: StorageLive(_62)
    SourceInfo(src/engine/general_purpose/mod.rs:82:53-82:87)
  7: StorageLive(_63)
    SourceInfo(src/engine/general_purpose/mod.rs:82:54-82:71)
  8: StorageLive(_64)
    SourceInfo(src/engine/general_purpose/mod.rs:82:55-82:64)
  9: _64 = _42
    SourceInfo(src/engine/general_purpose/mod.rs:82:55-82:64)
  10: _65 = const 52_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:82:54-82:71)
  11: _66 = Lt(move _65, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:82:54-82:71)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:82:54-82:71)
      kind: assert(move _66, "attempt to shift right by `{}`, which would overflow", const 52_i32) -> [success: bb21, unwind: bb195]
  }
  preds [bb19]
  succs [bb21, bb195]

bb21
  0: _63 = Shr(move _64, const 52_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:82:54-82:71)
  1: StorageDead(_64)
    SourceInfo(src/engine/general_purpose/mod.rs:82:70-82:71)
  2: _62 = BitAnd(move _63, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:82:53-82:87)
  3: StorageDead(_63)
    SourceInfo(src/engine/general_purpose/mod.rs:82:86-82:87)
  4: _61 = move _62 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:82:53-82:96)
  5: StorageDead(_62)
    SourceInfo(src/engine/general_purpose/mod.rs:82:95-82:96)
  6: _67 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:82:35-82:97)
  7: _68 = Lt(_61, _67)
    SourceInfo(src/engine/general_purpose/mod.rs:82:35-82:97)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:82:35-82:97)
      kind: assert(move _68, "index out of bounds: the length is {} but the index is {}", move _67, _61) -> [success: bb22, unwind: bb195]
  }
  preds [bb20]
  succs [bb22, bb195]

bb22
  0: _60 = ((*_1).0: [u8; 64])[_61]
    SourceInfo(src/engine/general_purpose/mod.rs:82:35-82:97)
  1: StorageLive(_69)
    SourceInfo(src/engine/general_purpose/mod.rs:82:30-82:31)
  2: _69 = const 1_usize
    SourceInfo(src/engine/general_purpose/mod.rs:82:30-82:31)
  3: _70 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:82:17-82:32)
  4: _71 = Lt(_69, _70)
    SourceInfo(src/engine/general_purpose/mod.rs:82:17-82:32)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:82:17-82:32)
      kind: assert(move _71, "index out of bounds: the length is {} but the index is {}", move _70, _69) -> [success: bb23, unwind: bb195]
  }
  preds [bb21]
  succs [bb23, bb195]

bb23
  0: (*_32)[_69] = move _60
    SourceInfo(src/engine/general_purpose/mod.rs:82:17-82:97)
  1: StorageDead(_60)
    SourceInfo(src/engine/general_purpose/mod.rs:82:96-82:97)
  2: StorageDead(_69)
    SourceInfo(src/engine/general_purpose/mod.rs:82:97-82:98)
  3: StorageDead(_61)
    SourceInfo(src/engine/general_purpose/mod.rs:82:97-82:98)
  4: StorageLive(_72)
    SourceInfo(src/engine/general_purpose/mod.rs:83:35-83:97)
  5: StorageLive(_73)
    SourceInfo(src/engine/general_purpose/mod.rs:83:53-83:96)
  6: StorageLive(_74)
    SourceInfo(src/engine/general_purpose/mod.rs:83:53-83:87)
  7: StorageLive(_75)
    SourceInfo(src/engine/general_purpose/mod.rs:83:54-83:71)
  8: StorageLive(_76)
    SourceInfo(src/engine/general_purpose/mod.rs:83:55-83:64)
  9: _76 = _42
    SourceInfo(src/engine/general_purpose/mod.rs:83:55-83:64)
  10: _77 = const 46_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:83:54-83:71)
  11: _78 = Lt(move _77, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:83:54-83:71)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:83:54-83:71)
      kind: assert(move _78, "attempt to shift right by `{}`, which would overflow", const 46_i32) -> [success: bb24, unwind: bb195]
  }
  preds [bb22]
  succs [bb24, bb195]

bb24
  0: _75 = Shr(move _76, const 46_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:83:54-83:71)
  1: StorageDead(_76)
    SourceInfo(src/engine/general_purpose/mod.rs:83:70-83:71)
  2: _74 = BitAnd(move _75, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:83:53-83:87)
  3: StorageDead(_75)
    SourceInfo(src/engine/general_purpose/mod.rs:83:86-83:87)
  4: _73 = move _74 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:83:53-83:96)
  5: StorageDead(_74)
    SourceInfo(src/engine/general_purpose/mod.rs:83:95-83:96)
  6: _79 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:83:35-83:97)
  7: _80 = Lt(_73, _79)
    SourceInfo(src/engine/general_purpose/mod.rs:83:35-83:97)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:83:35-83:97)
      kind: assert(move _80, "index out of bounds: the length is {} but the index is {}", move _79, _73) -> [success: bb25, unwind: bb195]
  }
  preds [bb23]
  succs [bb25, bb195]

bb25
  0: _72 = ((*_1).0: [u8; 64])[_73]
    SourceInfo(src/engine/general_purpose/mod.rs:83:35-83:97)
  1: StorageLive(_81)
    SourceInfo(src/engine/general_purpose/mod.rs:83:30-83:31)
  2: _81 = const 2_usize
    SourceInfo(src/engine/general_purpose/mod.rs:83:30-83:31)
  3: _82 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:83:17-83:32)
  4: _83 = Lt(_81, _82)
    SourceInfo(src/engine/general_purpose/mod.rs:83:17-83:32)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:83:17-83:32)
      kind: assert(move _83, "index out of bounds: the length is {} but the index is {}", move _82, _81) -> [success: bb26, unwind: bb195]
  }
  preds [bb24]
  succs [bb26, bb195]

bb26
  0: (*_32)[_81] = move _72
    SourceInfo(src/engine/general_purpose/mod.rs:83:17-83:97)
  1: StorageDead(_72)
    SourceInfo(src/engine/general_purpose/mod.rs:83:96-83:97)
  2: StorageDead(_81)
    SourceInfo(src/engine/general_purpose/mod.rs:83:97-83:98)
  3: StorageDead(_73)
    SourceInfo(src/engine/general_purpose/mod.rs:83:97-83:98)
  4: StorageLive(_84)
    SourceInfo(src/engine/general_purpose/mod.rs:84:35-84:97)
  5: StorageLive(_85)
    SourceInfo(src/engine/general_purpose/mod.rs:84:53-84:96)
  6: StorageLive(_86)
    SourceInfo(src/engine/general_purpose/mod.rs:84:53-84:87)
  7: StorageLive(_87)
    SourceInfo(src/engine/general_purpose/mod.rs:84:54-84:71)
  8: StorageLive(_88)
    SourceInfo(src/engine/general_purpose/mod.rs:84:55-84:64)
  9: _88 = _42
    SourceInfo(src/engine/general_purpose/mod.rs:84:55-84:64)
  10: _89 = const 40_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:84:54-84:71)
  11: _90 = Lt(move _89, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:84:54-84:71)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:84:54-84:71)
      kind: assert(move _90, "attempt to shift right by `{}`, which would overflow", const 40_i32) -> [success: bb27, unwind: bb195]
  }
  preds [bb25]
  succs [bb27, bb195]

bb27
  0: _87 = Shr(move _88, const 40_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:84:54-84:71)
  1: StorageDead(_88)
    SourceInfo(src/engine/general_purpose/mod.rs:84:70-84:71)
  2: _86 = BitAnd(move _87, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:84:53-84:87)
  3: StorageDead(_87)
    SourceInfo(src/engine/general_purpose/mod.rs:84:86-84:87)
  4: _85 = move _86 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:84:53-84:96)
  5: StorageDead(_86)
    SourceInfo(src/engine/general_purpose/mod.rs:84:95-84:96)
  6: _91 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:84:35-84:97)
  7: _92 = Lt(_85, _91)
    SourceInfo(src/engine/general_purpose/mod.rs:84:35-84:97)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:84:35-84:97)
      kind: assert(move _92, "index out of bounds: the length is {} but the index is {}", move _91, _85) -> [success: bb28, unwind: bb195]
  }
  preds [bb26]
  succs [bb28, bb195]

bb28
  0: _84 = ((*_1).0: [u8; 64])[_85]
    SourceInfo(src/engine/general_purpose/mod.rs:84:35-84:97)
  1: StorageLive(_93)
    SourceInfo(src/engine/general_purpose/mod.rs:84:30-84:31)
  2: _93 = const 3_usize
    SourceInfo(src/engine/general_purpose/mod.rs:84:30-84:31)
  3: _94 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:84:17-84:32)
  4: _95 = Lt(_93, _94)
    SourceInfo(src/engine/general_purpose/mod.rs:84:17-84:32)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:84:17-84:32)
      kind: assert(move _95, "index out of bounds: the length is {} but the index is {}", move _94, _93) -> [success: bb29, unwind: bb195]
  }
  preds [bb27]
  succs [bb29, bb195]

bb29
  0: (*_32)[_93] = move _84
    SourceInfo(src/engine/general_purpose/mod.rs:84:17-84:97)
  1: StorageDead(_84)
    SourceInfo(src/engine/general_purpose/mod.rs:84:96-84:97)
  2: StorageDead(_93)
    SourceInfo(src/engine/general_purpose/mod.rs:84:97-84:98)
  3: StorageDead(_85)
    SourceInfo(src/engine/general_purpose/mod.rs:84:97-84:98)
  4: StorageLive(_96)
    SourceInfo(src/engine/general_purpose/mod.rs:85:35-85:97)
  5: StorageLive(_97)
    SourceInfo(src/engine/general_purpose/mod.rs:85:53-85:96)
  6: StorageLive(_98)
    SourceInfo(src/engine/general_purpose/mod.rs:85:53-85:87)
  7: StorageLive(_99)
    SourceInfo(src/engine/general_purpose/mod.rs:85:54-85:71)
  8: StorageLive(_100)
    SourceInfo(src/engine/general_purpose/mod.rs:85:55-85:64)
  9: _100 = _42
    SourceInfo(src/engine/general_purpose/mod.rs:85:55-85:64)
  10: _101 = const 34_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:85:54-85:71)
  11: _102 = Lt(move _101, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:85:54-85:71)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:85:54-85:71)
      kind: assert(move _102, "attempt to shift right by `{}`, which would overflow", const 34_i32) -> [success: bb30, unwind: bb195]
  }
  preds [bb28]
  succs [bb30, bb195]

bb30
  0: _99 = Shr(move _100, const 34_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:85:54-85:71)
  1: StorageDead(_100)
    SourceInfo(src/engine/general_purpose/mod.rs:85:70-85:71)
  2: _98 = BitAnd(move _99, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:85:53-85:87)
  3: StorageDead(_99)
    SourceInfo(src/engine/general_purpose/mod.rs:85:86-85:87)
  4: _97 = move _98 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:85:53-85:96)
  5: StorageDead(_98)
    SourceInfo(src/engine/general_purpose/mod.rs:85:95-85:96)
  6: _103 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:85:35-85:97)
  7: _104 = Lt(_97, _103)
    SourceInfo(src/engine/general_purpose/mod.rs:85:35-85:97)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:85:35-85:97)
      kind: assert(move _104, "index out of bounds: the length is {} but the index is {}", move _103, _97) -> [success: bb31, unwind: bb195]
  }
  preds [bb29]
  succs [bb31, bb195]

bb31
  0: _96 = ((*_1).0: [u8; 64])[_97]
    SourceInfo(src/engine/general_purpose/mod.rs:85:35-85:97)
  1: StorageLive(_105)
    SourceInfo(src/engine/general_purpose/mod.rs:85:30-85:31)
  2: _105 = const 4_usize
    SourceInfo(src/engine/general_purpose/mod.rs:85:30-85:31)
  3: _106 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:85:17-85:32)
  4: _107 = Lt(_105, _106)
    SourceInfo(src/engine/general_purpose/mod.rs:85:17-85:32)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:85:17-85:32)
      kind: assert(move _107, "index out of bounds: the length is {} but the index is {}", move _106, _105) -> [success: bb32, unwind: bb195]
  }
  preds [bb30]
  succs [bb32, bb195]

bb32
  0: (*_32)[_105] = move _96
    SourceInfo(src/engine/general_purpose/mod.rs:85:17-85:97)
  1: StorageDead(_96)
    SourceInfo(src/engine/general_purpose/mod.rs:85:96-85:97)
  2: StorageDead(_105)
    SourceInfo(src/engine/general_purpose/mod.rs:85:97-85:98)
  3: StorageDead(_97)
    SourceInfo(src/engine/general_purpose/mod.rs:85:97-85:98)
  4: StorageLive(_108)
    SourceInfo(src/engine/general_purpose/mod.rs:86:35-86:97)
  5: StorageLive(_109)
    SourceInfo(src/engine/general_purpose/mod.rs:86:53-86:96)
  6: StorageLive(_110)
    SourceInfo(src/engine/general_purpose/mod.rs:86:53-86:87)
  7: StorageLive(_111)
    SourceInfo(src/engine/general_purpose/mod.rs:86:54-86:71)
  8: StorageLive(_112)
    SourceInfo(src/engine/general_purpose/mod.rs:86:55-86:64)
  9: _112 = _42
    SourceInfo(src/engine/general_purpose/mod.rs:86:55-86:64)
  10: _113 = const 28_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:86:54-86:71)
  11: _114 = Lt(move _113, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:86:54-86:71)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:86:54-86:71)
      kind: assert(move _114, "attempt to shift right by `{}`, which would overflow", const 28_i32) -> [success: bb33, unwind: bb195]
  }
  preds [bb31]
  succs [bb33, bb195]

bb33
  0: _111 = Shr(move _112, const 28_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:86:54-86:71)
  1: StorageDead(_112)
    SourceInfo(src/engine/general_purpose/mod.rs:86:70-86:71)
  2: _110 = BitAnd(move _111, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:86:53-86:87)
  3: StorageDead(_111)
    SourceInfo(src/engine/general_purpose/mod.rs:86:86-86:87)
  4: _109 = move _110 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:86:53-86:96)
  5: StorageDead(_110)
    SourceInfo(src/engine/general_purpose/mod.rs:86:95-86:96)
  6: _115 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:86:35-86:97)
  7: _116 = Lt(_109, _115)
    SourceInfo(src/engine/general_purpose/mod.rs:86:35-86:97)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:86:35-86:97)
      kind: assert(move _116, "index out of bounds: the length is {} but the index is {}", move _115, _109) -> [success: bb34, unwind: bb195]
  }
  preds [bb32]
  succs [bb34, bb195]

bb34
  0: _108 = ((*_1).0: [u8; 64])[_109]
    SourceInfo(src/engine/general_purpose/mod.rs:86:35-86:97)
  1: StorageLive(_117)
    SourceInfo(src/engine/general_purpose/mod.rs:86:30-86:31)
  2: _117 = const 5_usize
    SourceInfo(src/engine/general_purpose/mod.rs:86:30-86:31)
  3: _118 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:86:17-86:32)
  4: _119 = Lt(_117, _118)
    SourceInfo(src/engine/general_purpose/mod.rs:86:17-86:32)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:86:17-86:32)
      kind: assert(move _119, "index out of bounds: the length is {} but the index is {}", move _118, _117) -> [success: bb35, unwind: bb195]
  }
  preds [bb33]
  succs [bb35, bb195]

bb35
  0: (*_32)[_117] = move _108
    SourceInfo(src/engine/general_purpose/mod.rs:86:17-86:97)
  1: StorageDead(_108)
    SourceInfo(src/engine/general_purpose/mod.rs:86:96-86:97)
  2: StorageDead(_117)
    SourceInfo(src/engine/general_purpose/mod.rs:86:97-86:98)
  3: StorageDead(_109)
    SourceInfo(src/engine/general_purpose/mod.rs:86:97-86:98)
  4: StorageLive(_120)
    SourceInfo(src/engine/general_purpose/mod.rs:87:35-87:97)
  5: StorageLive(_121)
    SourceInfo(src/engine/general_purpose/mod.rs:87:53-87:96)
  6: StorageLive(_122)
    SourceInfo(src/engine/general_purpose/mod.rs:87:53-87:87)
  7: StorageLive(_123)
    SourceInfo(src/engine/general_purpose/mod.rs:87:54-87:71)
  8: StorageLive(_124)
    SourceInfo(src/engine/general_purpose/mod.rs:87:55-87:64)
  9: _124 = _42
    SourceInfo(src/engine/general_purpose/mod.rs:87:55-87:64)
  10: _125 = const 22_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:87:54-87:71)
  11: _126 = Lt(move _125, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:87:54-87:71)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:87:54-87:71)
      kind: assert(move _126, "attempt to shift right by `{}`, which would overflow", const 22_i32) -> [success: bb36, unwind: bb195]
  }
  preds [bb34]
  succs [bb36, bb195]

bb36
  0: _123 = Shr(move _124, const 22_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:87:54-87:71)
  1: StorageDead(_124)
    SourceInfo(src/engine/general_purpose/mod.rs:87:70-87:71)
  2: _122 = BitAnd(move _123, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:87:53-87:87)
  3: StorageDead(_123)
    SourceInfo(src/engine/general_purpose/mod.rs:87:86-87:87)
  4: _121 = move _122 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:87:53-87:96)
  5: StorageDead(_122)
    SourceInfo(src/engine/general_purpose/mod.rs:87:95-87:96)
  6: _127 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:87:35-87:97)
  7: _128 = Lt(_121, _127)
    SourceInfo(src/engine/general_purpose/mod.rs:87:35-87:97)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:87:35-87:97)
      kind: assert(move _128, "index out of bounds: the length is {} but the index is {}", move _127, _121) -> [success: bb37, unwind: bb195]
  }
  preds [bb35]
  succs [bb37, bb195]

bb37
  0: _120 = ((*_1).0: [u8; 64])[_121]
    SourceInfo(src/engine/general_purpose/mod.rs:87:35-87:97)
  1: StorageLive(_129)
    SourceInfo(src/engine/general_purpose/mod.rs:87:30-87:31)
  2: _129 = const 6_usize
    SourceInfo(src/engine/general_purpose/mod.rs:87:30-87:31)
  3: _130 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:87:17-87:32)
  4: _131 = Lt(_129, _130)
    SourceInfo(src/engine/general_purpose/mod.rs:87:17-87:32)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:87:17-87:32)
      kind: assert(move _131, "index out of bounds: the length is {} but the index is {}", move _130, _129) -> [success: bb38, unwind: bb195]
  }
  preds [bb36]
  succs [bb38, bb195]

bb38
  0: (*_32)[_129] = move _120
    SourceInfo(src/engine/general_purpose/mod.rs:87:17-87:97)
  1: StorageDead(_120)
    SourceInfo(src/engine/general_purpose/mod.rs:87:96-87:97)
  2: StorageDead(_129)
    SourceInfo(src/engine/general_purpose/mod.rs:87:97-87:98)
  3: StorageDead(_121)
    SourceInfo(src/engine/general_purpose/mod.rs:87:97-87:98)
  4: StorageLive(_132)
    SourceInfo(src/engine/general_purpose/mod.rs:88:35-88:97)
  5: StorageLive(_133)
    SourceInfo(src/engine/general_purpose/mod.rs:88:53-88:96)
  6: StorageLive(_134)
    SourceInfo(src/engine/general_purpose/mod.rs:88:53-88:87)
  7: StorageLive(_135)
    SourceInfo(src/engine/general_purpose/mod.rs:88:54-88:71)
  8: StorageLive(_136)
    SourceInfo(src/engine/general_purpose/mod.rs:88:55-88:64)
  9: _136 = _42
    SourceInfo(src/engine/general_purpose/mod.rs:88:55-88:64)
  10: _137 = const 16_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:88:54-88:71)
  11: _138 = Lt(move _137, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:88:54-88:71)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:88:54-88:71)
      kind: assert(move _138, "attempt to shift right by `{}`, which would overflow", const 16_i32) -> [success: bb39, unwind: bb195]
  }
  preds [bb37]
  succs [bb39, bb195]

bb39
  0: _135 = Shr(move _136, const 16_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:88:54-88:71)
  1: StorageDead(_136)
    SourceInfo(src/engine/general_purpose/mod.rs:88:70-88:71)
  2: _134 = BitAnd(move _135, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:88:53-88:87)
  3: StorageDead(_135)
    SourceInfo(src/engine/general_purpose/mod.rs:88:86-88:87)
  4: _133 = move _134 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:88:53-88:96)
  5: StorageDead(_134)
    SourceInfo(src/engine/general_purpose/mod.rs:88:95-88:96)
  6: _139 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:88:35-88:97)
  7: _140 = Lt(_133, _139)
    SourceInfo(src/engine/general_purpose/mod.rs:88:35-88:97)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:88:35-88:97)
      kind: assert(move _140, "index out of bounds: the length is {} but the index is {}", move _139, _133) -> [success: bb40, unwind: bb195]
  }
  preds [bb38]
  succs [bb40, bb195]

bb40
  0: _132 = ((*_1).0: [u8; 64])[_133]
    SourceInfo(src/engine/general_purpose/mod.rs:88:35-88:97)
  1: StorageLive(_141)
    SourceInfo(src/engine/general_purpose/mod.rs:88:30-88:31)
  2: _141 = const 7_usize
    SourceInfo(src/engine/general_purpose/mod.rs:88:30-88:31)
  3: _142 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:88:17-88:32)
  4: _143 = Lt(_141, _142)
    SourceInfo(src/engine/general_purpose/mod.rs:88:17-88:32)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:88:17-88:32)
      kind: assert(move _143, "index out of bounds: the length is {} but the index is {}", move _142, _141) -> [success: bb41, unwind: bb195]
  }
  preds [bb39]
  succs [bb41, bb195]

bb41
  0: (*_32)[_141] = move _132
    SourceInfo(src/engine/general_purpose/mod.rs:88:17-88:97)
  1: StorageDead(_132)
    SourceInfo(src/engine/general_purpose/mod.rs:88:96-88:97)
  2: StorageDead(_141)
    SourceInfo(src/engine/general_purpose/mod.rs:88:97-88:98)
  3: StorageDead(_133)
    SourceInfo(src/engine/general_purpose/mod.rs:88:97-88:98)
  4: StorageLive(_144)
    SourceInfo(src/engine/general_purpose/mod.rs:90:21-90:30)
  5: StorageLive(_145)
    SourceInfo(src/engine/general_purpose/mod.rs:90:42-90:59)
  6: StorageLive(_146)
    SourceInfo(src/engine/general_purpose/mod.rs:90:42-90:59)
  7: StorageLive(_147)
    SourceInfo(src/engine/general_purpose/mod.rs:90:54-90:59)
  8: StorageLive(_148)
    SourceInfo(src/engine/general_purpose/mod.rs:90:43-90:54)
  9: _148 = &(*_20)
    SourceInfo(src/engine/general_purpose/mod.rs:90:43-90:54)
  10: StorageLive(_149)
    SourceInfo(src/engine/general_purpose/mod.rs:90:55-90:58)
  11: _149 = std::ops::RangeFrom::<usize> { start: const 6_usize }
    SourceInfo(src/engine/general_purpose/mod.rs:90:55-90:58)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:90:54-90:59)
      kind: _147 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _148, move _149) -> [return: bb42, unwind: bb195]
  }
  preds [bb40]
  succs [bb42, bb195]

bb42
  0: StorageDead(_149)
    SourceInfo(src/engine/general_purpose/mod.rs:90:58-90:59)
  1: StorageDead(_148)
    SourceInfo(src/engine/general_purpose/mod.rs:90:58-90:59)
  2: _146 = &(*_147)
    SourceInfo(src/engine/general_purpose/mod.rs:90:42-90:59)
  3: _145 = &(*_146)
    SourceInfo(src/engine/general_purpose/mod.rs:90:42-90:59)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:90:33-90:60)
      kind: _144 = engine::general_purpose::read_u64(move _145) -> [return: bb43, unwind: bb195]
  }
  preds [bb41]
  succs [bb43, bb195]

bb43
  0: StorageDead(_145)
    SourceInfo(src/engine/general_purpose/mod.rs:90:59-90:60)
  1: FakeRead(ForLet(None), _144)
    SourceInfo(src/engine/general_purpose/mod.rs:90:21-90:30)
  2: StorageDead(_147)
    SourceInfo(src/engine/general_purpose/mod.rs:90:60-90:61)
  3: StorageDead(_146)
    SourceInfo(src/engine/general_purpose/mod.rs:90:60-90:61)
  4: StorageLive(_150)
    SourceInfo(src/engine/general_purpose/mod.rs:92:35-92:97)
  5: StorageLive(_151)
    SourceInfo(src/engine/general_purpose/mod.rs:92:53-92:96)
  6: StorageLive(_152)
    SourceInfo(src/engine/general_purpose/mod.rs:92:53-92:87)
  7: StorageLive(_153)
    SourceInfo(src/engine/general_purpose/mod.rs:92:54-92:71)
  8: StorageLive(_154)
    SourceInfo(src/engine/general_purpose/mod.rs:92:55-92:64)
  9: _154 = _144
    SourceInfo(src/engine/general_purpose/mod.rs:92:55-92:64)
  10: _155 = const 58_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:92:54-92:71)
  11: _156 = Lt(move _155, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:92:54-92:71)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:92:54-92:71)
      kind: assert(move _156, "attempt to shift right by `{}`, which would overflow", const 58_i32) -> [success: bb44, unwind: bb195]
  }
  preds [bb42]
  succs [bb44, bb195]

bb44
  0: _153 = Shr(move _154, const 58_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:92:54-92:71)
  1: StorageDead(_154)
    SourceInfo(src/engine/general_purpose/mod.rs:92:70-92:71)
  2: _152 = BitAnd(move _153, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:92:53-92:87)
  3: StorageDead(_153)
    SourceInfo(src/engine/general_purpose/mod.rs:92:86-92:87)
  4: _151 = move _152 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:92:53-92:96)
  5: StorageDead(_152)
    SourceInfo(src/engine/general_purpose/mod.rs:92:95-92:96)
  6: _157 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:92:35-92:97)
  7: _158 = Lt(_151, _157)
    SourceInfo(src/engine/general_purpose/mod.rs:92:35-92:97)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:92:35-92:97)
      kind: assert(move _158, "index out of bounds: the length is {} but the index is {}", move _157, _151) -> [success: bb45, unwind: bb195]
  }
  preds [bb43]
  succs [bb45, bb195]

bb45
  0: _150 = ((*_1).0: [u8; 64])[_151]
    SourceInfo(src/engine/general_purpose/mod.rs:92:35-92:97)
  1: StorageLive(_159)
    SourceInfo(src/engine/general_purpose/mod.rs:92:30-92:31)
  2: _159 = const 8_usize
    SourceInfo(src/engine/general_purpose/mod.rs:92:30-92:31)
  3: _160 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:92:17-92:32)
  4: _161 = Lt(_159, _160)
    SourceInfo(src/engine/general_purpose/mod.rs:92:17-92:32)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:92:17-92:32)
      kind: assert(move _161, "index out of bounds: the length is {} but the index is {}", move _160, _159) -> [success: bb46, unwind: bb195]
  }
  preds [bb44]
  succs [bb46, bb195]

bb46
  0: (*_32)[_159] = move _150
    SourceInfo(src/engine/general_purpose/mod.rs:92:17-92:97)
  1: StorageDead(_150)
    SourceInfo(src/engine/general_purpose/mod.rs:92:96-92:97)
  2: StorageDead(_159)
    SourceInfo(src/engine/general_purpose/mod.rs:92:97-92:98)
  3: StorageDead(_151)
    SourceInfo(src/engine/general_purpose/mod.rs:92:97-92:98)
  4: StorageLive(_162)
    SourceInfo(src/engine/general_purpose/mod.rs:93:35-93:97)
  5: StorageLive(_163)
    SourceInfo(src/engine/general_purpose/mod.rs:93:53-93:96)
  6: StorageLive(_164)
    SourceInfo(src/engine/general_purpose/mod.rs:93:53-93:87)
  7: StorageLive(_165)
    SourceInfo(src/engine/general_purpose/mod.rs:93:54-93:71)
  8: StorageLive(_166)
    SourceInfo(src/engine/general_purpose/mod.rs:93:55-93:64)
  9: _166 = _144
    SourceInfo(src/engine/general_purpose/mod.rs:93:55-93:64)
  10: _167 = const 52_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:93:54-93:71)
  11: _168 = Lt(move _167, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:93:54-93:71)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:93:54-93:71)
      kind: assert(move _168, "attempt to shift right by `{}`, which would overflow", const 52_i32) -> [success: bb47, unwind: bb195]
  }
  preds [bb45]
  succs [bb47, bb195]

bb47
  0: _165 = Shr(move _166, const 52_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:93:54-93:71)
  1: StorageDead(_166)
    SourceInfo(src/engine/general_purpose/mod.rs:93:70-93:71)
  2: _164 = BitAnd(move _165, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:93:53-93:87)
  3: StorageDead(_165)
    SourceInfo(src/engine/general_purpose/mod.rs:93:86-93:87)
  4: _163 = move _164 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:93:53-93:96)
  5: StorageDead(_164)
    SourceInfo(src/engine/general_purpose/mod.rs:93:95-93:96)
  6: _169 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:93:35-93:97)
  7: _170 = Lt(_163, _169)
    SourceInfo(src/engine/general_purpose/mod.rs:93:35-93:97)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:93:35-93:97)
      kind: assert(move _170, "index out of bounds: the length is {} but the index is {}", move _169, _163) -> [success: bb48, unwind: bb195]
  }
  preds [bb46]
  succs [bb48, bb195]

bb48
  0: _162 = ((*_1).0: [u8; 64])[_163]
    SourceInfo(src/engine/general_purpose/mod.rs:93:35-93:97)
  1: StorageLive(_171)
    SourceInfo(src/engine/general_purpose/mod.rs:93:30-93:31)
  2: _171 = const 9_usize
    SourceInfo(src/engine/general_purpose/mod.rs:93:30-93:31)
  3: _172 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:93:17-93:32)
  4: _173 = Lt(_171, _172)
    SourceInfo(src/engine/general_purpose/mod.rs:93:17-93:32)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:93:17-93:32)
      kind: assert(move _173, "index out of bounds: the length is {} but the index is {}", move _172, _171) -> [success: bb49, unwind: bb195]
  }
  preds [bb47]
  succs [bb49, bb195]

bb49
  0: (*_32)[_171] = move _162
    SourceInfo(src/engine/general_purpose/mod.rs:93:17-93:97)
  1: StorageDead(_162)
    SourceInfo(src/engine/general_purpose/mod.rs:93:96-93:97)
  2: StorageDead(_171)
    SourceInfo(src/engine/general_purpose/mod.rs:93:97-93:98)
  3: StorageDead(_163)
    SourceInfo(src/engine/general_purpose/mod.rs:93:97-93:98)
  4: StorageLive(_174)
    SourceInfo(src/engine/general_purpose/mod.rs:94:36-94:98)
  5: StorageLive(_175)
    SourceInfo(src/engine/general_purpose/mod.rs:94:54-94:97)
  6: StorageLive(_176)
    SourceInfo(src/engine/general_purpose/mod.rs:94:54-94:88)
  7: StorageLive(_177)
    SourceInfo(src/engine/general_purpose/mod.rs:94:55-94:72)
  8: StorageLive(_178)
    SourceInfo(src/engine/general_purpose/mod.rs:94:56-94:65)
  9: _178 = _144
    SourceInfo(src/engine/general_purpose/mod.rs:94:56-94:65)
  10: _179 = const 46_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:94:55-94:72)
  11: _180 = Lt(move _179, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:94:55-94:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:94:55-94:72)
      kind: assert(move _180, "attempt to shift right by `{}`, which would overflow", const 46_i32) -> [success: bb50, unwind: bb195]
  }
  preds [bb48]
  succs [bb50, bb195]

bb50
  0: _177 = Shr(move _178, const 46_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:94:55-94:72)
  1: StorageDead(_178)
    SourceInfo(src/engine/general_purpose/mod.rs:94:71-94:72)
  2: _176 = BitAnd(move _177, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:94:54-94:88)
  3: StorageDead(_177)
    SourceInfo(src/engine/general_purpose/mod.rs:94:87-94:88)
  4: _175 = move _176 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:94:54-94:97)
  5: StorageDead(_176)
    SourceInfo(src/engine/general_purpose/mod.rs:94:96-94:97)
  6: _181 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:94:36-94:98)
  7: _182 = Lt(_175, _181)
    SourceInfo(src/engine/general_purpose/mod.rs:94:36-94:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:94:36-94:98)
      kind: assert(move _182, "index out of bounds: the length is {} but the index is {}", move _181, _175) -> [success: bb51, unwind: bb195]
  }
  preds [bb49]
  succs [bb51, bb195]

bb51
  0: _174 = ((*_1).0: [u8; 64])[_175]
    SourceInfo(src/engine/general_purpose/mod.rs:94:36-94:98)
  1: StorageLive(_183)
    SourceInfo(src/engine/general_purpose/mod.rs:94:30-94:32)
  2: _183 = const 10_usize
    SourceInfo(src/engine/general_purpose/mod.rs:94:30-94:32)
  3: _184 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:94:17-94:33)
  4: _185 = Lt(_183, _184)
    SourceInfo(src/engine/general_purpose/mod.rs:94:17-94:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:94:17-94:33)
      kind: assert(move _185, "index out of bounds: the length is {} but the index is {}", move _184, _183) -> [success: bb52, unwind: bb195]
  }
  preds [bb50]
  succs [bb52, bb195]

bb52
  0: (*_32)[_183] = move _174
    SourceInfo(src/engine/general_purpose/mod.rs:94:17-94:98)
  1: StorageDead(_174)
    SourceInfo(src/engine/general_purpose/mod.rs:94:97-94:98)
  2: StorageDead(_183)
    SourceInfo(src/engine/general_purpose/mod.rs:94:98-94:99)
  3: StorageDead(_175)
    SourceInfo(src/engine/general_purpose/mod.rs:94:98-94:99)
  4: StorageLive(_186)
    SourceInfo(src/engine/general_purpose/mod.rs:95:36-95:98)
  5: StorageLive(_187)
    SourceInfo(src/engine/general_purpose/mod.rs:95:54-95:97)
  6: StorageLive(_188)
    SourceInfo(src/engine/general_purpose/mod.rs:95:54-95:88)
  7: StorageLive(_189)
    SourceInfo(src/engine/general_purpose/mod.rs:95:55-95:72)
  8: StorageLive(_190)
    SourceInfo(src/engine/general_purpose/mod.rs:95:56-95:65)
  9: _190 = _144
    SourceInfo(src/engine/general_purpose/mod.rs:95:56-95:65)
  10: _191 = const 40_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:95:55-95:72)
  11: _192 = Lt(move _191, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:95:55-95:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:95:55-95:72)
      kind: assert(move _192, "attempt to shift right by `{}`, which would overflow", const 40_i32) -> [success: bb53, unwind: bb195]
  }
  preds [bb51]
  succs [bb53, bb195]

bb53
  0: _189 = Shr(move _190, const 40_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:95:55-95:72)
  1: StorageDead(_190)
    SourceInfo(src/engine/general_purpose/mod.rs:95:71-95:72)
  2: _188 = BitAnd(move _189, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:95:54-95:88)
  3: StorageDead(_189)
    SourceInfo(src/engine/general_purpose/mod.rs:95:87-95:88)
  4: _187 = move _188 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:95:54-95:97)
  5: StorageDead(_188)
    SourceInfo(src/engine/general_purpose/mod.rs:95:96-95:97)
  6: _193 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:95:36-95:98)
  7: _194 = Lt(_187, _193)
    SourceInfo(src/engine/general_purpose/mod.rs:95:36-95:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:95:36-95:98)
      kind: assert(move _194, "index out of bounds: the length is {} but the index is {}", move _193, _187) -> [success: bb54, unwind: bb195]
  }
  preds [bb52]
  succs [bb54, bb195]

bb54
  0: _186 = ((*_1).0: [u8; 64])[_187]
    SourceInfo(src/engine/general_purpose/mod.rs:95:36-95:98)
  1: StorageLive(_195)
    SourceInfo(src/engine/general_purpose/mod.rs:95:30-95:32)
  2: _195 = const 11_usize
    SourceInfo(src/engine/general_purpose/mod.rs:95:30-95:32)
  3: _196 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:95:17-95:33)
  4: _197 = Lt(_195, _196)
    SourceInfo(src/engine/general_purpose/mod.rs:95:17-95:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:95:17-95:33)
      kind: assert(move _197, "index out of bounds: the length is {} but the index is {}", move _196, _195) -> [success: bb55, unwind: bb195]
  }
  preds [bb53]
  succs [bb55, bb195]

bb55
  0: (*_32)[_195] = move _186
    SourceInfo(src/engine/general_purpose/mod.rs:95:17-95:98)
  1: StorageDead(_186)
    SourceInfo(src/engine/general_purpose/mod.rs:95:97-95:98)
  2: StorageDead(_195)
    SourceInfo(src/engine/general_purpose/mod.rs:95:98-95:99)
  3: StorageDead(_187)
    SourceInfo(src/engine/general_purpose/mod.rs:95:98-95:99)
  4: StorageLive(_198)
    SourceInfo(src/engine/general_purpose/mod.rs:96:36-96:98)
  5: StorageLive(_199)
    SourceInfo(src/engine/general_purpose/mod.rs:96:54-96:97)
  6: StorageLive(_200)
    SourceInfo(src/engine/general_purpose/mod.rs:96:54-96:88)
  7: StorageLive(_201)
    SourceInfo(src/engine/general_purpose/mod.rs:96:55-96:72)
  8: StorageLive(_202)
    SourceInfo(src/engine/general_purpose/mod.rs:96:56-96:65)
  9: _202 = _144
    SourceInfo(src/engine/general_purpose/mod.rs:96:56-96:65)
  10: _203 = const 34_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:96:55-96:72)
  11: _204 = Lt(move _203, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:96:55-96:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:96:55-96:72)
      kind: assert(move _204, "attempt to shift right by `{}`, which would overflow", const 34_i32) -> [success: bb56, unwind: bb195]
  }
  preds [bb54]
  succs [bb56, bb195]

bb56
  0: _201 = Shr(move _202, const 34_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:96:55-96:72)
  1: StorageDead(_202)
    SourceInfo(src/engine/general_purpose/mod.rs:96:71-96:72)
  2: _200 = BitAnd(move _201, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:96:54-96:88)
  3: StorageDead(_201)
    SourceInfo(src/engine/general_purpose/mod.rs:96:87-96:88)
  4: _199 = move _200 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:96:54-96:97)
  5: StorageDead(_200)
    SourceInfo(src/engine/general_purpose/mod.rs:96:96-96:97)
  6: _205 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:96:36-96:98)
  7: _206 = Lt(_199, _205)
    SourceInfo(src/engine/general_purpose/mod.rs:96:36-96:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:96:36-96:98)
      kind: assert(move _206, "index out of bounds: the length is {} but the index is {}", move _205, _199) -> [success: bb57, unwind: bb195]
  }
  preds [bb55]
  succs [bb57, bb195]

bb57
  0: _198 = ((*_1).0: [u8; 64])[_199]
    SourceInfo(src/engine/general_purpose/mod.rs:96:36-96:98)
  1: StorageLive(_207)
    SourceInfo(src/engine/general_purpose/mod.rs:96:30-96:32)
  2: _207 = const 12_usize
    SourceInfo(src/engine/general_purpose/mod.rs:96:30-96:32)
  3: _208 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:96:17-96:33)
  4: _209 = Lt(_207, _208)
    SourceInfo(src/engine/general_purpose/mod.rs:96:17-96:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:96:17-96:33)
      kind: assert(move _209, "index out of bounds: the length is {} but the index is {}", move _208, _207) -> [success: bb58, unwind: bb195]
  }
  preds [bb56]
  succs [bb58, bb195]

bb58
  0: (*_32)[_207] = move _198
    SourceInfo(src/engine/general_purpose/mod.rs:96:17-96:98)
  1: StorageDead(_198)
    SourceInfo(src/engine/general_purpose/mod.rs:96:97-96:98)
  2: StorageDead(_207)
    SourceInfo(src/engine/general_purpose/mod.rs:96:98-96:99)
  3: StorageDead(_199)
    SourceInfo(src/engine/general_purpose/mod.rs:96:98-96:99)
  4: StorageLive(_210)
    SourceInfo(src/engine/general_purpose/mod.rs:97:36-97:98)
  5: StorageLive(_211)
    SourceInfo(src/engine/general_purpose/mod.rs:97:54-97:97)
  6: StorageLive(_212)
    SourceInfo(src/engine/general_purpose/mod.rs:97:54-97:88)
  7: StorageLive(_213)
    SourceInfo(src/engine/general_purpose/mod.rs:97:55-97:72)
  8: StorageLive(_214)
    SourceInfo(src/engine/general_purpose/mod.rs:97:56-97:65)
  9: _214 = _144
    SourceInfo(src/engine/general_purpose/mod.rs:97:56-97:65)
  10: _215 = const 28_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:97:55-97:72)
  11: _216 = Lt(move _215, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:97:55-97:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:97:55-97:72)
      kind: assert(move _216, "attempt to shift right by `{}`, which would overflow", const 28_i32) -> [success: bb59, unwind: bb195]
  }
  preds [bb57]
  succs [bb59, bb195]

bb59
  0: _213 = Shr(move _214, const 28_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:97:55-97:72)
  1: StorageDead(_214)
    SourceInfo(src/engine/general_purpose/mod.rs:97:71-97:72)
  2: _212 = BitAnd(move _213, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:97:54-97:88)
  3: StorageDead(_213)
    SourceInfo(src/engine/general_purpose/mod.rs:97:87-97:88)
  4: _211 = move _212 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:97:54-97:97)
  5: StorageDead(_212)
    SourceInfo(src/engine/general_purpose/mod.rs:97:96-97:97)
  6: _217 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:97:36-97:98)
  7: _218 = Lt(_211, _217)
    SourceInfo(src/engine/general_purpose/mod.rs:97:36-97:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:97:36-97:98)
      kind: assert(move _218, "index out of bounds: the length is {} but the index is {}", move _217, _211) -> [success: bb60, unwind: bb195]
  }
  preds [bb58]
  succs [bb60, bb195]

bb60
  0: _210 = ((*_1).0: [u8; 64])[_211]
    SourceInfo(src/engine/general_purpose/mod.rs:97:36-97:98)
  1: StorageLive(_219)
    SourceInfo(src/engine/general_purpose/mod.rs:97:30-97:32)
  2: _219 = const 13_usize
    SourceInfo(src/engine/general_purpose/mod.rs:97:30-97:32)
  3: _220 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:97:17-97:33)
  4: _221 = Lt(_219, _220)
    SourceInfo(src/engine/general_purpose/mod.rs:97:17-97:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:97:17-97:33)
      kind: assert(move _221, "index out of bounds: the length is {} but the index is {}", move _220, _219) -> [success: bb61, unwind: bb195]
  }
  preds [bb59]
  succs [bb61, bb195]

bb61
  0: (*_32)[_219] = move _210
    SourceInfo(src/engine/general_purpose/mod.rs:97:17-97:98)
  1: StorageDead(_210)
    SourceInfo(src/engine/general_purpose/mod.rs:97:97-97:98)
  2: StorageDead(_219)
    SourceInfo(src/engine/general_purpose/mod.rs:97:98-97:99)
  3: StorageDead(_211)
    SourceInfo(src/engine/general_purpose/mod.rs:97:98-97:99)
  4: StorageLive(_222)
    SourceInfo(src/engine/general_purpose/mod.rs:98:36-98:98)
  5: StorageLive(_223)
    SourceInfo(src/engine/general_purpose/mod.rs:98:54-98:97)
  6: StorageLive(_224)
    SourceInfo(src/engine/general_purpose/mod.rs:98:54-98:88)
  7: StorageLive(_225)
    SourceInfo(src/engine/general_purpose/mod.rs:98:55-98:72)
  8: StorageLive(_226)
    SourceInfo(src/engine/general_purpose/mod.rs:98:56-98:65)
  9: _226 = _144
    SourceInfo(src/engine/general_purpose/mod.rs:98:56-98:65)
  10: _227 = const 22_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:98:55-98:72)
  11: _228 = Lt(move _227, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:98:55-98:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:98:55-98:72)
      kind: assert(move _228, "attempt to shift right by `{}`, which would overflow", const 22_i32) -> [success: bb62, unwind: bb195]
  }
  preds [bb60]
  succs [bb62, bb195]

bb62
  0: _225 = Shr(move _226, const 22_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:98:55-98:72)
  1: StorageDead(_226)
    SourceInfo(src/engine/general_purpose/mod.rs:98:71-98:72)
  2: _224 = BitAnd(move _225, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:98:54-98:88)
  3: StorageDead(_225)
    SourceInfo(src/engine/general_purpose/mod.rs:98:87-98:88)
  4: _223 = move _224 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:98:54-98:97)
  5: StorageDead(_224)
    SourceInfo(src/engine/general_purpose/mod.rs:98:96-98:97)
  6: _229 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:98:36-98:98)
  7: _230 = Lt(_223, _229)
    SourceInfo(src/engine/general_purpose/mod.rs:98:36-98:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:98:36-98:98)
      kind: assert(move _230, "index out of bounds: the length is {} but the index is {}", move _229, _223) -> [success: bb63, unwind: bb195]
  }
  preds [bb61]
  succs [bb63, bb195]

bb63
  0: _222 = ((*_1).0: [u8; 64])[_223]
    SourceInfo(src/engine/general_purpose/mod.rs:98:36-98:98)
  1: StorageLive(_231)
    SourceInfo(src/engine/general_purpose/mod.rs:98:30-98:32)
  2: _231 = const 14_usize
    SourceInfo(src/engine/general_purpose/mod.rs:98:30-98:32)
  3: _232 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:98:17-98:33)
  4: _233 = Lt(_231, _232)
    SourceInfo(src/engine/general_purpose/mod.rs:98:17-98:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:98:17-98:33)
      kind: assert(move _233, "index out of bounds: the length is {} but the index is {}", move _232, _231) -> [success: bb64, unwind: bb195]
  }
  preds [bb62]
  succs [bb64, bb195]

bb64
  0: (*_32)[_231] = move _222
    SourceInfo(src/engine/general_purpose/mod.rs:98:17-98:98)
  1: StorageDead(_222)
    SourceInfo(src/engine/general_purpose/mod.rs:98:97-98:98)
  2: StorageDead(_231)
    SourceInfo(src/engine/general_purpose/mod.rs:98:98-98:99)
  3: StorageDead(_223)
    SourceInfo(src/engine/general_purpose/mod.rs:98:98-98:99)
  4: StorageLive(_234)
    SourceInfo(src/engine/general_purpose/mod.rs:99:36-99:98)
  5: StorageLive(_235)
    SourceInfo(src/engine/general_purpose/mod.rs:99:54-99:97)
  6: StorageLive(_236)
    SourceInfo(src/engine/general_purpose/mod.rs:99:54-99:88)
  7: StorageLive(_237)
    SourceInfo(src/engine/general_purpose/mod.rs:99:55-99:72)
  8: StorageLive(_238)
    SourceInfo(src/engine/general_purpose/mod.rs:99:56-99:65)
  9: _238 = _144
    SourceInfo(src/engine/general_purpose/mod.rs:99:56-99:65)
  10: _239 = const 16_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:99:55-99:72)
  11: _240 = Lt(move _239, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:99:55-99:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:99:55-99:72)
      kind: assert(move _240, "attempt to shift right by `{}`, which would overflow", const 16_i32) -> [success: bb65, unwind: bb195]
  }
  preds [bb63]
  succs [bb65, bb195]

bb65
  0: _237 = Shr(move _238, const 16_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:99:55-99:72)
  1: StorageDead(_238)
    SourceInfo(src/engine/general_purpose/mod.rs:99:71-99:72)
  2: _236 = BitAnd(move _237, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:99:54-99:88)
  3: StorageDead(_237)
    SourceInfo(src/engine/general_purpose/mod.rs:99:87-99:88)
  4: _235 = move _236 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:99:54-99:97)
  5: StorageDead(_236)
    SourceInfo(src/engine/general_purpose/mod.rs:99:96-99:97)
  6: _241 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:99:36-99:98)
  7: _242 = Lt(_235, _241)
    SourceInfo(src/engine/general_purpose/mod.rs:99:36-99:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:99:36-99:98)
      kind: assert(move _242, "index out of bounds: the length is {} but the index is {}", move _241, _235) -> [success: bb66, unwind: bb195]
  }
  preds [bb64]
  succs [bb66, bb195]

bb66
  0: _234 = ((*_1).0: [u8; 64])[_235]
    SourceInfo(src/engine/general_purpose/mod.rs:99:36-99:98)
  1: StorageLive(_243)
    SourceInfo(src/engine/general_purpose/mod.rs:99:30-99:32)
  2: _243 = const 15_usize
    SourceInfo(src/engine/general_purpose/mod.rs:99:30-99:32)
  3: _244 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:99:17-99:33)
  4: _245 = Lt(_243, _244)
    SourceInfo(src/engine/general_purpose/mod.rs:99:17-99:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:99:17-99:33)
      kind: assert(move _245, "index out of bounds: the length is {} but the index is {}", move _244, _243) -> [success: bb67, unwind: bb195]
  }
  preds [bb65]
  succs [bb67, bb195]

bb67
  0: (*_32)[_243] = move _234
    SourceInfo(src/engine/general_purpose/mod.rs:99:17-99:98)
  1: StorageDead(_234)
    SourceInfo(src/engine/general_purpose/mod.rs:99:97-99:98)
  2: StorageDead(_243)
    SourceInfo(src/engine/general_purpose/mod.rs:99:98-99:99)
  3: StorageDead(_235)
    SourceInfo(src/engine/general_purpose/mod.rs:99:98-99:99)
  4: StorageLive(_246)
    SourceInfo(src/engine/general_purpose/mod.rs:101:21-101:30)
  5: StorageLive(_247)
    SourceInfo(src/engine/general_purpose/mod.rs:101:42-101:60)
  6: StorageLive(_248)
    SourceInfo(src/engine/general_purpose/mod.rs:101:42-101:60)
  7: StorageLive(_249)
    SourceInfo(src/engine/general_purpose/mod.rs:101:54-101:60)
  8: StorageLive(_250)
    SourceInfo(src/engine/general_purpose/mod.rs:101:43-101:54)
  9: _250 = &(*_20)
    SourceInfo(src/engine/general_purpose/mod.rs:101:43-101:54)
  10: StorageLive(_251)
    SourceInfo(src/engine/general_purpose/mod.rs:101:55-101:59)
  11: _251 = std::ops::RangeFrom::<usize> { start: const 12_usize }
    SourceInfo(src/engine/general_purpose/mod.rs:101:55-101:59)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:101:54-101:60)
      kind: _249 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _250, move _251) -> [return: bb68, unwind: bb195]
  }
  preds [bb66]
  succs [bb68, bb195]

bb68
  0: StorageDead(_251)
    SourceInfo(src/engine/general_purpose/mod.rs:101:59-101:60)
  1: StorageDead(_250)
    SourceInfo(src/engine/general_purpose/mod.rs:101:59-101:60)
  2: _248 = &(*_249)
    SourceInfo(src/engine/general_purpose/mod.rs:101:42-101:60)
  3: _247 = &(*_248)
    SourceInfo(src/engine/general_purpose/mod.rs:101:42-101:60)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:101:33-101:61)
      kind: _246 = engine::general_purpose::read_u64(move _247) -> [return: bb69, unwind: bb195]
  }
  preds [bb67]
  succs [bb69, bb195]

bb69
  0: StorageDead(_247)
    SourceInfo(src/engine/general_purpose/mod.rs:101:60-101:61)
  1: FakeRead(ForLet(None), _246)
    SourceInfo(src/engine/general_purpose/mod.rs:101:21-101:30)
  2: StorageDead(_249)
    SourceInfo(src/engine/general_purpose/mod.rs:101:61-101:62)
  3: StorageDead(_248)
    SourceInfo(src/engine/general_purpose/mod.rs:101:61-101:62)
  4: StorageLive(_252)
    SourceInfo(src/engine/general_purpose/mod.rs:103:36-103:98)
  5: StorageLive(_253)
    SourceInfo(src/engine/general_purpose/mod.rs:103:54-103:97)
  6: StorageLive(_254)
    SourceInfo(src/engine/general_purpose/mod.rs:103:54-103:88)
  7: StorageLive(_255)
    SourceInfo(src/engine/general_purpose/mod.rs:103:55-103:72)
  8: StorageLive(_256)
    SourceInfo(src/engine/general_purpose/mod.rs:103:56-103:65)
  9: _256 = _246
    SourceInfo(src/engine/general_purpose/mod.rs:103:56-103:65)
  10: _257 = const 58_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:103:55-103:72)
  11: _258 = Lt(move _257, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:103:55-103:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:103:55-103:72)
      kind: assert(move _258, "attempt to shift right by `{}`, which would overflow", const 58_i32) -> [success: bb70, unwind: bb195]
  }
  preds [bb68]
  succs [bb70, bb195]

bb70
  0: _255 = Shr(move _256, const 58_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:103:55-103:72)
  1: StorageDead(_256)
    SourceInfo(src/engine/general_purpose/mod.rs:103:71-103:72)
  2: _254 = BitAnd(move _255, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:103:54-103:88)
  3: StorageDead(_255)
    SourceInfo(src/engine/general_purpose/mod.rs:103:87-103:88)
  4: _253 = move _254 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:103:54-103:97)
  5: StorageDead(_254)
    SourceInfo(src/engine/general_purpose/mod.rs:103:96-103:97)
  6: _259 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:103:36-103:98)
  7: _260 = Lt(_253, _259)
    SourceInfo(src/engine/general_purpose/mod.rs:103:36-103:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:103:36-103:98)
      kind: assert(move _260, "index out of bounds: the length is {} but the index is {}", move _259, _253) -> [success: bb71, unwind: bb195]
  }
  preds [bb69]
  succs [bb71, bb195]

bb71
  0: _252 = ((*_1).0: [u8; 64])[_253]
    SourceInfo(src/engine/general_purpose/mod.rs:103:36-103:98)
  1: StorageLive(_261)
    SourceInfo(src/engine/general_purpose/mod.rs:103:30-103:32)
  2: _261 = const 16_usize
    SourceInfo(src/engine/general_purpose/mod.rs:103:30-103:32)
  3: _262 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:103:17-103:33)
  4: _263 = Lt(_261, _262)
    SourceInfo(src/engine/general_purpose/mod.rs:103:17-103:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:103:17-103:33)
      kind: assert(move _263, "index out of bounds: the length is {} but the index is {}", move _262, _261) -> [success: bb72, unwind: bb195]
  }
  preds [bb70]
  succs [bb72, bb195]

bb72
  0: (*_32)[_261] = move _252
    SourceInfo(src/engine/general_purpose/mod.rs:103:17-103:98)
  1: StorageDead(_252)
    SourceInfo(src/engine/general_purpose/mod.rs:103:97-103:98)
  2: StorageDead(_261)
    SourceInfo(src/engine/general_purpose/mod.rs:103:98-103:99)
  3: StorageDead(_253)
    SourceInfo(src/engine/general_purpose/mod.rs:103:98-103:99)
  4: StorageLive(_264)
    SourceInfo(src/engine/general_purpose/mod.rs:104:36-104:98)
  5: StorageLive(_265)
    SourceInfo(src/engine/general_purpose/mod.rs:104:54-104:97)
  6: StorageLive(_266)
    SourceInfo(src/engine/general_purpose/mod.rs:104:54-104:88)
  7: StorageLive(_267)
    SourceInfo(src/engine/general_purpose/mod.rs:104:55-104:72)
  8: StorageLive(_268)
    SourceInfo(src/engine/general_purpose/mod.rs:104:56-104:65)
  9: _268 = _246
    SourceInfo(src/engine/general_purpose/mod.rs:104:56-104:65)
  10: _269 = const 52_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:104:55-104:72)
  11: _270 = Lt(move _269, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:104:55-104:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:104:55-104:72)
      kind: assert(move _270, "attempt to shift right by `{}`, which would overflow", const 52_i32) -> [success: bb73, unwind: bb195]
  }
  preds [bb71]
  succs [bb73, bb195]

bb73
  0: _267 = Shr(move _268, const 52_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:104:55-104:72)
  1: StorageDead(_268)
    SourceInfo(src/engine/general_purpose/mod.rs:104:71-104:72)
  2: _266 = BitAnd(move _267, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:104:54-104:88)
  3: StorageDead(_267)
    SourceInfo(src/engine/general_purpose/mod.rs:104:87-104:88)
  4: _265 = move _266 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:104:54-104:97)
  5: StorageDead(_266)
    SourceInfo(src/engine/general_purpose/mod.rs:104:96-104:97)
  6: _271 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:104:36-104:98)
  7: _272 = Lt(_265, _271)
    SourceInfo(src/engine/general_purpose/mod.rs:104:36-104:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:104:36-104:98)
      kind: assert(move _272, "index out of bounds: the length is {} but the index is {}", move _271, _265) -> [success: bb74, unwind: bb195]
  }
  preds [bb72]
  succs [bb74, bb195]

bb74
  0: _264 = ((*_1).0: [u8; 64])[_265]
    SourceInfo(src/engine/general_purpose/mod.rs:104:36-104:98)
  1: StorageLive(_273)
    SourceInfo(src/engine/general_purpose/mod.rs:104:30-104:32)
  2: _273 = const 17_usize
    SourceInfo(src/engine/general_purpose/mod.rs:104:30-104:32)
  3: _274 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:104:17-104:33)
  4: _275 = Lt(_273, _274)
    SourceInfo(src/engine/general_purpose/mod.rs:104:17-104:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:104:17-104:33)
      kind: assert(move _275, "index out of bounds: the length is {} but the index is {}", move _274, _273) -> [success: bb75, unwind: bb195]
  }
  preds [bb73]
  succs [bb75, bb195]

bb75
  0: (*_32)[_273] = move _264
    SourceInfo(src/engine/general_purpose/mod.rs:104:17-104:98)
  1: StorageDead(_264)
    SourceInfo(src/engine/general_purpose/mod.rs:104:97-104:98)
  2: StorageDead(_273)
    SourceInfo(src/engine/general_purpose/mod.rs:104:98-104:99)
  3: StorageDead(_265)
    SourceInfo(src/engine/general_purpose/mod.rs:104:98-104:99)
  4: StorageLive(_276)
    SourceInfo(src/engine/general_purpose/mod.rs:105:36-105:98)
  5: StorageLive(_277)
    SourceInfo(src/engine/general_purpose/mod.rs:105:54-105:97)
  6: StorageLive(_278)
    SourceInfo(src/engine/general_purpose/mod.rs:105:54-105:88)
  7: StorageLive(_279)
    SourceInfo(src/engine/general_purpose/mod.rs:105:55-105:72)
  8: StorageLive(_280)
    SourceInfo(src/engine/general_purpose/mod.rs:105:56-105:65)
  9: _280 = _246
    SourceInfo(src/engine/general_purpose/mod.rs:105:56-105:65)
  10: _281 = const 46_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:105:55-105:72)
  11: _282 = Lt(move _281, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:105:55-105:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:105:55-105:72)
      kind: assert(move _282, "attempt to shift right by `{}`, which would overflow", const 46_i32) -> [success: bb76, unwind: bb195]
  }
  preds [bb74]
  succs [bb76, bb195]

bb76
  0: _279 = Shr(move _280, const 46_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:105:55-105:72)
  1: StorageDead(_280)
    SourceInfo(src/engine/general_purpose/mod.rs:105:71-105:72)
  2: _278 = BitAnd(move _279, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:105:54-105:88)
  3: StorageDead(_279)
    SourceInfo(src/engine/general_purpose/mod.rs:105:87-105:88)
  4: _277 = move _278 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:105:54-105:97)
  5: StorageDead(_278)
    SourceInfo(src/engine/general_purpose/mod.rs:105:96-105:97)
  6: _283 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:105:36-105:98)
  7: _284 = Lt(_277, _283)
    SourceInfo(src/engine/general_purpose/mod.rs:105:36-105:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:105:36-105:98)
      kind: assert(move _284, "index out of bounds: the length is {} but the index is {}", move _283, _277) -> [success: bb77, unwind: bb195]
  }
  preds [bb75]
  succs [bb77, bb195]

bb77
  0: _276 = ((*_1).0: [u8; 64])[_277]
    SourceInfo(src/engine/general_purpose/mod.rs:105:36-105:98)
  1: StorageLive(_285)
    SourceInfo(src/engine/general_purpose/mod.rs:105:30-105:32)
  2: _285 = const 18_usize
    SourceInfo(src/engine/general_purpose/mod.rs:105:30-105:32)
  3: _286 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:105:17-105:33)
  4: _287 = Lt(_285, _286)
    SourceInfo(src/engine/general_purpose/mod.rs:105:17-105:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:105:17-105:33)
      kind: assert(move _287, "index out of bounds: the length is {} but the index is {}", move _286, _285) -> [success: bb78, unwind: bb195]
  }
  preds [bb76]
  succs [bb78, bb195]

bb78
  0: (*_32)[_285] = move _276
    SourceInfo(src/engine/general_purpose/mod.rs:105:17-105:98)
  1: StorageDead(_276)
    SourceInfo(src/engine/general_purpose/mod.rs:105:97-105:98)
  2: StorageDead(_285)
    SourceInfo(src/engine/general_purpose/mod.rs:105:98-105:99)
  3: StorageDead(_277)
    SourceInfo(src/engine/general_purpose/mod.rs:105:98-105:99)
  4: StorageLive(_288)
    SourceInfo(src/engine/general_purpose/mod.rs:106:36-106:98)
  5: StorageLive(_289)
    SourceInfo(src/engine/general_purpose/mod.rs:106:54-106:97)
  6: StorageLive(_290)
    SourceInfo(src/engine/general_purpose/mod.rs:106:54-106:88)
  7: StorageLive(_291)
    SourceInfo(src/engine/general_purpose/mod.rs:106:55-106:72)
  8: StorageLive(_292)
    SourceInfo(src/engine/general_purpose/mod.rs:106:56-106:65)
  9: _292 = _246
    SourceInfo(src/engine/general_purpose/mod.rs:106:56-106:65)
  10: _293 = const 40_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:106:55-106:72)
  11: _294 = Lt(move _293, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:106:55-106:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:106:55-106:72)
      kind: assert(move _294, "attempt to shift right by `{}`, which would overflow", const 40_i32) -> [success: bb79, unwind: bb195]
  }
  preds [bb77]
  succs [bb79, bb195]

bb79
  0: _291 = Shr(move _292, const 40_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:106:55-106:72)
  1: StorageDead(_292)
    SourceInfo(src/engine/general_purpose/mod.rs:106:71-106:72)
  2: _290 = BitAnd(move _291, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:106:54-106:88)
  3: StorageDead(_291)
    SourceInfo(src/engine/general_purpose/mod.rs:106:87-106:88)
  4: _289 = move _290 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:106:54-106:97)
  5: StorageDead(_290)
    SourceInfo(src/engine/general_purpose/mod.rs:106:96-106:97)
  6: _295 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:106:36-106:98)
  7: _296 = Lt(_289, _295)
    SourceInfo(src/engine/general_purpose/mod.rs:106:36-106:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:106:36-106:98)
      kind: assert(move _296, "index out of bounds: the length is {} but the index is {}", move _295, _289) -> [success: bb80, unwind: bb195]
  }
  preds [bb78]
  succs [bb80, bb195]

bb80
  0: _288 = ((*_1).0: [u8; 64])[_289]
    SourceInfo(src/engine/general_purpose/mod.rs:106:36-106:98)
  1: StorageLive(_297)
    SourceInfo(src/engine/general_purpose/mod.rs:106:30-106:32)
  2: _297 = const 19_usize
    SourceInfo(src/engine/general_purpose/mod.rs:106:30-106:32)
  3: _298 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:106:17-106:33)
  4: _299 = Lt(_297, _298)
    SourceInfo(src/engine/general_purpose/mod.rs:106:17-106:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:106:17-106:33)
      kind: assert(move _299, "index out of bounds: the length is {} but the index is {}", move _298, _297) -> [success: bb81, unwind: bb195]
  }
  preds [bb79]
  succs [bb81, bb195]

bb81
  0: (*_32)[_297] = move _288
    SourceInfo(src/engine/general_purpose/mod.rs:106:17-106:98)
  1: StorageDead(_288)
    SourceInfo(src/engine/general_purpose/mod.rs:106:97-106:98)
  2: StorageDead(_297)
    SourceInfo(src/engine/general_purpose/mod.rs:106:98-106:99)
  3: StorageDead(_289)
    SourceInfo(src/engine/general_purpose/mod.rs:106:98-106:99)
  4: StorageLive(_300)
    SourceInfo(src/engine/general_purpose/mod.rs:107:36-107:98)
  5: StorageLive(_301)
    SourceInfo(src/engine/general_purpose/mod.rs:107:54-107:97)
  6: StorageLive(_302)
    SourceInfo(src/engine/general_purpose/mod.rs:107:54-107:88)
  7: StorageLive(_303)
    SourceInfo(src/engine/general_purpose/mod.rs:107:55-107:72)
  8: StorageLive(_304)
    SourceInfo(src/engine/general_purpose/mod.rs:107:56-107:65)
  9: _304 = _246
    SourceInfo(src/engine/general_purpose/mod.rs:107:56-107:65)
  10: _305 = const 34_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:107:55-107:72)
  11: _306 = Lt(move _305, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:107:55-107:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:107:55-107:72)
      kind: assert(move _306, "attempt to shift right by `{}`, which would overflow", const 34_i32) -> [success: bb82, unwind: bb195]
  }
  preds [bb80]
  succs [bb82, bb195]

bb82
  0: _303 = Shr(move _304, const 34_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:107:55-107:72)
  1: StorageDead(_304)
    SourceInfo(src/engine/general_purpose/mod.rs:107:71-107:72)
  2: _302 = BitAnd(move _303, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:107:54-107:88)
  3: StorageDead(_303)
    SourceInfo(src/engine/general_purpose/mod.rs:107:87-107:88)
  4: _301 = move _302 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:107:54-107:97)
  5: StorageDead(_302)
    SourceInfo(src/engine/general_purpose/mod.rs:107:96-107:97)
  6: _307 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:107:36-107:98)
  7: _308 = Lt(_301, _307)
    SourceInfo(src/engine/general_purpose/mod.rs:107:36-107:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:107:36-107:98)
      kind: assert(move _308, "index out of bounds: the length is {} but the index is {}", move _307, _301) -> [success: bb83, unwind: bb195]
  }
  preds [bb81]
  succs [bb83, bb195]

bb83
  0: _300 = ((*_1).0: [u8; 64])[_301]
    SourceInfo(src/engine/general_purpose/mod.rs:107:36-107:98)
  1: StorageLive(_309)
    SourceInfo(src/engine/general_purpose/mod.rs:107:30-107:32)
  2: _309 = const 20_usize
    SourceInfo(src/engine/general_purpose/mod.rs:107:30-107:32)
  3: _310 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:107:17-107:33)
  4: _311 = Lt(_309, _310)
    SourceInfo(src/engine/general_purpose/mod.rs:107:17-107:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:107:17-107:33)
      kind: assert(move _311, "index out of bounds: the length is {} but the index is {}", move _310, _309) -> [success: bb84, unwind: bb195]
  }
  preds [bb82]
  succs [bb84, bb195]

bb84
  0: (*_32)[_309] = move _300
    SourceInfo(src/engine/general_purpose/mod.rs:107:17-107:98)
  1: StorageDead(_300)
    SourceInfo(src/engine/general_purpose/mod.rs:107:97-107:98)
  2: StorageDead(_309)
    SourceInfo(src/engine/general_purpose/mod.rs:107:98-107:99)
  3: StorageDead(_301)
    SourceInfo(src/engine/general_purpose/mod.rs:107:98-107:99)
  4: StorageLive(_312)
    SourceInfo(src/engine/general_purpose/mod.rs:108:36-108:98)
  5: StorageLive(_313)
    SourceInfo(src/engine/general_purpose/mod.rs:108:54-108:97)
  6: StorageLive(_314)
    SourceInfo(src/engine/general_purpose/mod.rs:108:54-108:88)
  7: StorageLive(_315)
    SourceInfo(src/engine/general_purpose/mod.rs:108:55-108:72)
  8: StorageLive(_316)
    SourceInfo(src/engine/general_purpose/mod.rs:108:56-108:65)
  9: _316 = _246
    SourceInfo(src/engine/general_purpose/mod.rs:108:56-108:65)
  10: _317 = const 28_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:108:55-108:72)
  11: _318 = Lt(move _317, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:108:55-108:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:108:55-108:72)
      kind: assert(move _318, "attempt to shift right by `{}`, which would overflow", const 28_i32) -> [success: bb85, unwind: bb195]
  }
  preds [bb83]
  succs [bb85, bb195]

bb85
  0: _315 = Shr(move _316, const 28_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:108:55-108:72)
  1: StorageDead(_316)
    SourceInfo(src/engine/general_purpose/mod.rs:108:71-108:72)
  2: _314 = BitAnd(move _315, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:108:54-108:88)
  3: StorageDead(_315)
    SourceInfo(src/engine/general_purpose/mod.rs:108:87-108:88)
  4: _313 = move _314 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:108:54-108:97)
  5: StorageDead(_314)
    SourceInfo(src/engine/general_purpose/mod.rs:108:96-108:97)
  6: _319 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:108:36-108:98)
  7: _320 = Lt(_313, _319)
    SourceInfo(src/engine/general_purpose/mod.rs:108:36-108:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:108:36-108:98)
      kind: assert(move _320, "index out of bounds: the length is {} but the index is {}", move _319, _313) -> [success: bb86, unwind: bb195]
  }
  preds [bb84]
  succs [bb86, bb195]

bb86
  0: _312 = ((*_1).0: [u8; 64])[_313]
    SourceInfo(src/engine/general_purpose/mod.rs:108:36-108:98)
  1: StorageLive(_321)
    SourceInfo(src/engine/general_purpose/mod.rs:108:30-108:32)
  2: _321 = const 21_usize
    SourceInfo(src/engine/general_purpose/mod.rs:108:30-108:32)
  3: _322 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:108:17-108:33)
  4: _323 = Lt(_321, _322)
    SourceInfo(src/engine/general_purpose/mod.rs:108:17-108:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:108:17-108:33)
      kind: assert(move _323, "index out of bounds: the length is {} but the index is {}", move _322, _321) -> [success: bb87, unwind: bb195]
  }
  preds [bb85]
  succs [bb87, bb195]

bb87
  0: (*_32)[_321] = move _312
    SourceInfo(src/engine/general_purpose/mod.rs:108:17-108:98)
  1: StorageDead(_312)
    SourceInfo(src/engine/general_purpose/mod.rs:108:97-108:98)
  2: StorageDead(_321)
    SourceInfo(src/engine/general_purpose/mod.rs:108:98-108:99)
  3: StorageDead(_313)
    SourceInfo(src/engine/general_purpose/mod.rs:108:98-108:99)
  4: StorageLive(_324)
    SourceInfo(src/engine/general_purpose/mod.rs:109:36-109:98)
  5: StorageLive(_325)
    SourceInfo(src/engine/general_purpose/mod.rs:109:54-109:97)
  6: StorageLive(_326)
    SourceInfo(src/engine/general_purpose/mod.rs:109:54-109:88)
  7: StorageLive(_327)
    SourceInfo(src/engine/general_purpose/mod.rs:109:55-109:72)
  8: StorageLive(_328)
    SourceInfo(src/engine/general_purpose/mod.rs:109:56-109:65)
  9: _328 = _246
    SourceInfo(src/engine/general_purpose/mod.rs:109:56-109:65)
  10: _329 = const 22_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:109:55-109:72)
  11: _330 = Lt(move _329, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:109:55-109:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:109:55-109:72)
      kind: assert(move _330, "attempt to shift right by `{}`, which would overflow", const 22_i32) -> [success: bb88, unwind: bb195]
  }
  preds [bb86]
  succs [bb88, bb195]

bb88
  0: _327 = Shr(move _328, const 22_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:109:55-109:72)
  1: StorageDead(_328)
    SourceInfo(src/engine/general_purpose/mod.rs:109:71-109:72)
  2: _326 = BitAnd(move _327, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:109:54-109:88)
  3: StorageDead(_327)
    SourceInfo(src/engine/general_purpose/mod.rs:109:87-109:88)
  4: _325 = move _326 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:109:54-109:97)
  5: StorageDead(_326)
    SourceInfo(src/engine/general_purpose/mod.rs:109:96-109:97)
  6: _331 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:109:36-109:98)
  7: _332 = Lt(_325, _331)
    SourceInfo(src/engine/general_purpose/mod.rs:109:36-109:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:109:36-109:98)
      kind: assert(move _332, "index out of bounds: the length is {} but the index is {}", move _331, _325) -> [success: bb89, unwind: bb195]
  }
  preds [bb87]
  succs [bb89, bb195]

bb89
  0: _324 = ((*_1).0: [u8; 64])[_325]
    SourceInfo(src/engine/general_purpose/mod.rs:109:36-109:98)
  1: StorageLive(_333)
    SourceInfo(src/engine/general_purpose/mod.rs:109:30-109:32)
  2: _333 = const 22_usize
    SourceInfo(src/engine/general_purpose/mod.rs:109:30-109:32)
  3: _334 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:109:17-109:33)
  4: _335 = Lt(_333, _334)
    SourceInfo(src/engine/general_purpose/mod.rs:109:17-109:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:109:17-109:33)
      kind: assert(move _335, "index out of bounds: the length is {} but the index is {}", move _334, _333) -> [success: bb90, unwind: bb195]
  }
  preds [bb88]
  succs [bb90, bb195]

bb90
  0: (*_32)[_333] = move _324
    SourceInfo(src/engine/general_purpose/mod.rs:109:17-109:98)
  1: StorageDead(_324)
    SourceInfo(src/engine/general_purpose/mod.rs:109:97-109:98)
  2: StorageDead(_333)
    SourceInfo(src/engine/general_purpose/mod.rs:109:98-109:99)
  3: StorageDead(_325)
    SourceInfo(src/engine/general_purpose/mod.rs:109:98-109:99)
  4: StorageLive(_336)
    SourceInfo(src/engine/general_purpose/mod.rs:110:36-110:98)
  5: StorageLive(_337)
    SourceInfo(src/engine/general_purpose/mod.rs:110:54-110:97)
  6: StorageLive(_338)
    SourceInfo(src/engine/general_purpose/mod.rs:110:54-110:88)
  7: StorageLive(_339)
    SourceInfo(src/engine/general_purpose/mod.rs:110:55-110:72)
  8: StorageLive(_340)
    SourceInfo(src/engine/general_purpose/mod.rs:110:56-110:65)
  9: _340 = _246
    SourceInfo(src/engine/general_purpose/mod.rs:110:56-110:65)
  10: _341 = const 16_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:110:55-110:72)
  11: _342 = Lt(move _341, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:110:55-110:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:110:55-110:72)
      kind: assert(move _342, "attempt to shift right by `{}`, which would overflow", const 16_i32) -> [success: bb91, unwind: bb195]
  }
  preds [bb89]
  succs [bb91, bb195]

bb91
  0: _339 = Shr(move _340, const 16_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:110:55-110:72)
  1: StorageDead(_340)
    SourceInfo(src/engine/general_purpose/mod.rs:110:71-110:72)
  2: _338 = BitAnd(move _339, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:110:54-110:88)
  3: StorageDead(_339)
    SourceInfo(src/engine/general_purpose/mod.rs:110:87-110:88)
  4: _337 = move _338 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:110:54-110:97)
  5: StorageDead(_338)
    SourceInfo(src/engine/general_purpose/mod.rs:110:96-110:97)
  6: _343 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:110:36-110:98)
  7: _344 = Lt(_337, _343)
    SourceInfo(src/engine/general_purpose/mod.rs:110:36-110:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:110:36-110:98)
      kind: assert(move _344, "index out of bounds: the length is {} but the index is {}", move _343, _337) -> [success: bb92, unwind: bb195]
  }
  preds [bb90]
  succs [bb92, bb195]

bb92
  0: _336 = ((*_1).0: [u8; 64])[_337]
    SourceInfo(src/engine/general_purpose/mod.rs:110:36-110:98)
  1: StorageLive(_345)
    SourceInfo(src/engine/general_purpose/mod.rs:110:30-110:32)
  2: _345 = const 23_usize
    SourceInfo(src/engine/general_purpose/mod.rs:110:30-110:32)
  3: _346 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:110:17-110:33)
  4: _347 = Lt(_345, _346)
    SourceInfo(src/engine/general_purpose/mod.rs:110:17-110:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:110:17-110:33)
      kind: assert(move _347, "index out of bounds: the length is {} but the index is {}", move _346, _345) -> [success: bb93, unwind: bb195]
  }
  preds [bb91]
  succs [bb93, bb195]

bb93
  0: (*_32)[_345] = move _336
    SourceInfo(src/engine/general_purpose/mod.rs:110:17-110:98)
  1: StorageDead(_336)
    SourceInfo(src/engine/general_purpose/mod.rs:110:97-110:98)
  2: StorageDead(_345)
    SourceInfo(src/engine/general_purpose/mod.rs:110:98-110:99)
  3: StorageDead(_337)
    SourceInfo(src/engine/general_purpose/mod.rs:110:98-110:99)
  4: StorageLive(_348)
    SourceInfo(src/engine/general_purpose/mod.rs:112:21-112:30)
  5: StorageLive(_349)
    SourceInfo(src/engine/general_purpose/mod.rs:112:42-112:60)
  6: StorageLive(_350)
    SourceInfo(src/engine/general_purpose/mod.rs:112:42-112:60)
  7: StorageLive(_351)
    SourceInfo(src/engine/general_purpose/mod.rs:112:54-112:60)
  8: StorageLive(_352)
    SourceInfo(src/engine/general_purpose/mod.rs:112:43-112:54)
  9: _352 = &(*_20)
    SourceInfo(src/engine/general_purpose/mod.rs:112:43-112:54)
  10: StorageLive(_353)
    SourceInfo(src/engine/general_purpose/mod.rs:112:55-112:59)
  11: _353 = std::ops::RangeFrom::<usize> { start: const 18_usize }
    SourceInfo(src/engine/general_purpose/mod.rs:112:55-112:59)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:112:54-112:60)
      kind: _351 = <[u8] as std::ops::Index<std::ops::RangeFrom<usize>>>::index(move _352, move _353) -> [return: bb94, unwind: bb195]
  }
  preds [bb92]
  succs [bb94, bb195]

bb94
  0: StorageDead(_353)
    SourceInfo(src/engine/general_purpose/mod.rs:112:59-112:60)
  1: StorageDead(_352)
    SourceInfo(src/engine/general_purpose/mod.rs:112:59-112:60)
  2: _350 = &(*_351)
    SourceInfo(src/engine/general_purpose/mod.rs:112:42-112:60)
  3: _349 = &(*_350)
    SourceInfo(src/engine/general_purpose/mod.rs:112:42-112:60)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:112:33-112:61)
      kind: _348 = engine::general_purpose::read_u64(move _349) -> [return: bb95, unwind: bb195]
  }
  preds [bb93]
  succs [bb95, bb195]

bb95
  0: StorageDead(_349)
    SourceInfo(src/engine/general_purpose/mod.rs:112:60-112:61)
  1: FakeRead(ForLet(None), _348)
    SourceInfo(src/engine/general_purpose/mod.rs:112:21-112:30)
  2: StorageDead(_351)
    SourceInfo(src/engine/general_purpose/mod.rs:112:61-112:62)
  3: StorageDead(_350)
    SourceInfo(src/engine/general_purpose/mod.rs:112:61-112:62)
  4: StorageLive(_354)
    SourceInfo(src/engine/general_purpose/mod.rs:114:36-114:98)
  5: StorageLive(_355)
    SourceInfo(src/engine/general_purpose/mod.rs:114:54-114:97)
  6: StorageLive(_356)
    SourceInfo(src/engine/general_purpose/mod.rs:114:54-114:88)
  7: StorageLive(_357)
    SourceInfo(src/engine/general_purpose/mod.rs:114:55-114:72)
  8: StorageLive(_358)
    SourceInfo(src/engine/general_purpose/mod.rs:114:56-114:65)
  9: _358 = _348
    SourceInfo(src/engine/general_purpose/mod.rs:114:56-114:65)
  10: _359 = const 58_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:114:55-114:72)
  11: _360 = Lt(move _359, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:114:55-114:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:114:55-114:72)
      kind: assert(move _360, "attempt to shift right by `{}`, which would overflow", const 58_i32) -> [success: bb96, unwind: bb195]
  }
  preds [bb94]
  succs [bb96, bb195]

bb96
  0: _357 = Shr(move _358, const 58_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:114:55-114:72)
  1: StorageDead(_358)
    SourceInfo(src/engine/general_purpose/mod.rs:114:71-114:72)
  2: _356 = BitAnd(move _357, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:114:54-114:88)
  3: StorageDead(_357)
    SourceInfo(src/engine/general_purpose/mod.rs:114:87-114:88)
  4: _355 = move _356 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:114:54-114:97)
  5: StorageDead(_356)
    SourceInfo(src/engine/general_purpose/mod.rs:114:96-114:97)
  6: _361 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:114:36-114:98)
  7: _362 = Lt(_355, _361)
    SourceInfo(src/engine/general_purpose/mod.rs:114:36-114:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:114:36-114:98)
      kind: assert(move _362, "index out of bounds: the length is {} but the index is {}", move _361, _355) -> [success: bb97, unwind: bb195]
  }
  preds [bb95]
  succs [bb97, bb195]

bb97
  0: _354 = ((*_1).0: [u8; 64])[_355]
    SourceInfo(src/engine/general_purpose/mod.rs:114:36-114:98)
  1: StorageLive(_363)
    SourceInfo(src/engine/general_purpose/mod.rs:114:30-114:32)
  2: _363 = const 24_usize
    SourceInfo(src/engine/general_purpose/mod.rs:114:30-114:32)
  3: _364 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:114:17-114:33)
  4: _365 = Lt(_363, _364)
    SourceInfo(src/engine/general_purpose/mod.rs:114:17-114:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:114:17-114:33)
      kind: assert(move _365, "index out of bounds: the length is {} but the index is {}", move _364, _363) -> [success: bb98, unwind: bb195]
  }
  preds [bb96]
  succs [bb98, bb195]

bb98
  0: (*_32)[_363] = move _354
    SourceInfo(src/engine/general_purpose/mod.rs:114:17-114:98)
  1: StorageDead(_354)
    SourceInfo(src/engine/general_purpose/mod.rs:114:97-114:98)
  2: StorageDead(_363)
    SourceInfo(src/engine/general_purpose/mod.rs:114:98-114:99)
  3: StorageDead(_355)
    SourceInfo(src/engine/general_purpose/mod.rs:114:98-114:99)
  4: StorageLive(_366)
    SourceInfo(src/engine/general_purpose/mod.rs:115:36-115:98)
  5: StorageLive(_367)
    SourceInfo(src/engine/general_purpose/mod.rs:115:54-115:97)
  6: StorageLive(_368)
    SourceInfo(src/engine/general_purpose/mod.rs:115:54-115:88)
  7: StorageLive(_369)
    SourceInfo(src/engine/general_purpose/mod.rs:115:55-115:72)
  8: StorageLive(_370)
    SourceInfo(src/engine/general_purpose/mod.rs:115:56-115:65)
  9: _370 = _348
    SourceInfo(src/engine/general_purpose/mod.rs:115:56-115:65)
  10: _371 = const 52_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:115:55-115:72)
  11: _372 = Lt(move _371, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:115:55-115:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:115:55-115:72)
      kind: assert(move _372, "attempt to shift right by `{}`, which would overflow", const 52_i32) -> [success: bb99, unwind: bb195]
  }
  preds [bb97]
  succs [bb99, bb195]

bb99
  0: _369 = Shr(move _370, const 52_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:115:55-115:72)
  1: StorageDead(_370)
    SourceInfo(src/engine/general_purpose/mod.rs:115:71-115:72)
  2: _368 = BitAnd(move _369, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:115:54-115:88)
  3: StorageDead(_369)
    SourceInfo(src/engine/general_purpose/mod.rs:115:87-115:88)
  4: _367 = move _368 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:115:54-115:97)
  5: StorageDead(_368)
    SourceInfo(src/engine/general_purpose/mod.rs:115:96-115:97)
  6: _373 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:115:36-115:98)
  7: _374 = Lt(_367, _373)
    SourceInfo(src/engine/general_purpose/mod.rs:115:36-115:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:115:36-115:98)
      kind: assert(move _374, "index out of bounds: the length is {} but the index is {}", move _373, _367) -> [success: bb100, unwind: bb195]
  }
  preds [bb98]
  succs [bb100, bb195]

bb100
  0: _366 = ((*_1).0: [u8; 64])[_367]
    SourceInfo(src/engine/general_purpose/mod.rs:115:36-115:98)
  1: StorageLive(_375)
    SourceInfo(src/engine/general_purpose/mod.rs:115:30-115:32)
  2: _375 = const 25_usize
    SourceInfo(src/engine/general_purpose/mod.rs:115:30-115:32)
  3: _376 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:115:17-115:33)
  4: _377 = Lt(_375, _376)
    SourceInfo(src/engine/general_purpose/mod.rs:115:17-115:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:115:17-115:33)
      kind: assert(move _377, "index out of bounds: the length is {} but the index is {}", move _376, _375) -> [success: bb101, unwind: bb195]
  }
  preds [bb99]
  succs [bb101, bb195]

bb101
  0: (*_32)[_375] = move _366
    SourceInfo(src/engine/general_purpose/mod.rs:115:17-115:98)
  1: StorageDead(_366)
    SourceInfo(src/engine/general_purpose/mod.rs:115:97-115:98)
  2: StorageDead(_375)
    SourceInfo(src/engine/general_purpose/mod.rs:115:98-115:99)
  3: StorageDead(_367)
    SourceInfo(src/engine/general_purpose/mod.rs:115:98-115:99)
  4: StorageLive(_378)
    SourceInfo(src/engine/general_purpose/mod.rs:116:36-116:98)
  5: StorageLive(_379)
    SourceInfo(src/engine/general_purpose/mod.rs:116:54-116:97)
  6: StorageLive(_380)
    SourceInfo(src/engine/general_purpose/mod.rs:116:54-116:88)
  7: StorageLive(_381)
    SourceInfo(src/engine/general_purpose/mod.rs:116:55-116:72)
  8: StorageLive(_382)
    SourceInfo(src/engine/general_purpose/mod.rs:116:56-116:65)
  9: _382 = _348
    SourceInfo(src/engine/general_purpose/mod.rs:116:56-116:65)
  10: _383 = const 46_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:116:55-116:72)
  11: _384 = Lt(move _383, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:116:55-116:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:116:55-116:72)
      kind: assert(move _384, "attempt to shift right by `{}`, which would overflow", const 46_i32) -> [success: bb102, unwind: bb195]
  }
  preds [bb100]
  succs [bb102, bb195]

bb102
  0: _381 = Shr(move _382, const 46_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:116:55-116:72)
  1: StorageDead(_382)
    SourceInfo(src/engine/general_purpose/mod.rs:116:71-116:72)
  2: _380 = BitAnd(move _381, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:116:54-116:88)
  3: StorageDead(_381)
    SourceInfo(src/engine/general_purpose/mod.rs:116:87-116:88)
  4: _379 = move _380 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:116:54-116:97)
  5: StorageDead(_380)
    SourceInfo(src/engine/general_purpose/mod.rs:116:96-116:97)
  6: _385 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:116:36-116:98)
  7: _386 = Lt(_379, _385)
    SourceInfo(src/engine/general_purpose/mod.rs:116:36-116:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:116:36-116:98)
      kind: assert(move _386, "index out of bounds: the length is {} but the index is {}", move _385, _379) -> [success: bb103, unwind: bb195]
  }
  preds [bb101]
  succs [bb103, bb195]

bb103
  0: _378 = ((*_1).0: [u8; 64])[_379]
    SourceInfo(src/engine/general_purpose/mod.rs:116:36-116:98)
  1: StorageLive(_387)
    SourceInfo(src/engine/general_purpose/mod.rs:116:30-116:32)
  2: _387 = const 26_usize
    SourceInfo(src/engine/general_purpose/mod.rs:116:30-116:32)
  3: _388 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:116:17-116:33)
  4: _389 = Lt(_387, _388)
    SourceInfo(src/engine/general_purpose/mod.rs:116:17-116:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:116:17-116:33)
      kind: assert(move _389, "index out of bounds: the length is {} but the index is {}", move _388, _387) -> [success: bb104, unwind: bb195]
  }
  preds [bb102]
  succs [bb104, bb195]

bb104
  0: (*_32)[_387] = move _378
    SourceInfo(src/engine/general_purpose/mod.rs:116:17-116:98)
  1: StorageDead(_378)
    SourceInfo(src/engine/general_purpose/mod.rs:116:97-116:98)
  2: StorageDead(_387)
    SourceInfo(src/engine/general_purpose/mod.rs:116:98-116:99)
  3: StorageDead(_379)
    SourceInfo(src/engine/general_purpose/mod.rs:116:98-116:99)
  4: StorageLive(_390)
    SourceInfo(src/engine/general_purpose/mod.rs:117:36-117:98)
  5: StorageLive(_391)
    SourceInfo(src/engine/general_purpose/mod.rs:117:54-117:97)
  6: StorageLive(_392)
    SourceInfo(src/engine/general_purpose/mod.rs:117:54-117:88)
  7: StorageLive(_393)
    SourceInfo(src/engine/general_purpose/mod.rs:117:55-117:72)
  8: StorageLive(_394)
    SourceInfo(src/engine/general_purpose/mod.rs:117:56-117:65)
  9: _394 = _348
    SourceInfo(src/engine/general_purpose/mod.rs:117:56-117:65)
  10: _395 = const 40_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:117:55-117:72)
  11: _396 = Lt(move _395, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:117:55-117:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:117:55-117:72)
      kind: assert(move _396, "attempt to shift right by `{}`, which would overflow", const 40_i32) -> [success: bb105, unwind: bb195]
  }
  preds [bb103]
  succs [bb105, bb195]

bb105
  0: _393 = Shr(move _394, const 40_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:117:55-117:72)
  1: StorageDead(_394)
    SourceInfo(src/engine/general_purpose/mod.rs:117:71-117:72)
  2: _392 = BitAnd(move _393, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:117:54-117:88)
  3: StorageDead(_393)
    SourceInfo(src/engine/general_purpose/mod.rs:117:87-117:88)
  4: _391 = move _392 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:117:54-117:97)
  5: StorageDead(_392)
    SourceInfo(src/engine/general_purpose/mod.rs:117:96-117:97)
  6: _397 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:117:36-117:98)
  7: _398 = Lt(_391, _397)
    SourceInfo(src/engine/general_purpose/mod.rs:117:36-117:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:117:36-117:98)
      kind: assert(move _398, "index out of bounds: the length is {} but the index is {}", move _397, _391) -> [success: bb106, unwind: bb195]
  }
  preds [bb104]
  succs [bb106, bb195]

bb106
  0: _390 = ((*_1).0: [u8; 64])[_391]
    SourceInfo(src/engine/general_purpose/mod.rs:117:36-117:98)
  1: StorageLive(_399)
    SourceInfo(src/engine/general_purpose/mod.rs:117:30-117:32)
  2: _399 = const 27_usize
    SourceInfo(src/engine/general_purpose/mod.rs:117:30-117:32)
  3: _400 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:117:17-117:33)
  4: _401 = Lt(_399, _400)
    SourceInfo(src/engine/general_purpose/mod.rs:117:17-117:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:117:17-117:33)
      kind: assert(move _401, "index out of bounds: the length is {} but the index is {}", move _400, _399) -> [success: bb107, unwind: bb195]
  }
  preds [bb105]
  succs [bb107, bb195]

bb107
  0: (*_32)[_399] = move _390
    SourceInfo(src/engine/general_purpose/mod.rs:117:17-117:98)
  1: StorageDead(_390)
    SourceInfo(src/engine/general_purpose/mod.rs:117:97-117:98)
  2: StorageDead(_399)
    SourceInfo(src/engine/general_purpose/mod.rs:117:98-117:99)
  3: StorageDead(_391)
    SourceInfo(src/engine/general_purpose/mod.rs:117:98-117:99)
  4: StorageLive(_402)
    SourceInfo(src/engine/general_purpose/mod.rs:118:36-118:98)
  5: StorageLive(_403)
    SourceInfo(src/engine/general_purpose/mod.rs:118:54-118:97)
  6: StorageLive(_404)
    SourceInfo(src/engine/general_purpose/mod.rs:118:54-118:88)
  7: StorageLive(_405)
    SourceInfo(src/engine/general_purpose/mod.rs:118:55-118:72)
  8: StorageLive(_406)
    SourceInfo(src/engine/general_purpose/mod.rs:118:56-118:65)
  9: _406 = _348
    SourceInfo(src/engine/general_purpose/mod.rs:118:56-118:65)
  10: _407 = const 34_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:118:55-118:72)
  11: _408 = Lt(move _407, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:118:55-118:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:118:55-118:72)
      kind: assert(move _408, "attempt to shift right by `{}`, which would overflow", const 34_i32) -> [success: bb108, unwind: bb195]
  }
  preds [bb106]
  succs [bb108, bb195]

bb108
  0: _405 = Shr(move _406, const 34_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:118:55-118:72)
  1: StorageDead(_406)
    SourceInfo(src/engine/general_purpose/mod.rs:118:71-118:72)
  2: _404 = BitAnd(move _405, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:118:54-118:88)
  3: StorageDead(_405)
    SourceInfo(src/engine/general_purpose/mod.rs:118:87-118:88)
  4: _403 = move _404 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:118:54-118:97)
  5: StorageDead(_404)
    SourceInfo(src/engine/general_purpose/mod.rs:118:96-118:97)
  6: _409 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:118:36-118:98)
  7: _410 = Lt(_403, _409)
    SourceInfo(src/engine/general_purpose/mod.rs:118:36-118:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:118:36-118:98)
      kind: assert(move _410, "index out of bounds: the length is {} but the index is {}", move _409, _403) -> [success: bb109, unwind: bb195]
  }
  preds [bb107]
  succs [bb109, bb195]

bb109
  0: _402 = ((*_1).0: [u8; 64])[_403]
    SourceInfo(src/engine/general_purpose/mod.rs:118:36-118:98)
  1: StorageLive(_411)
    SourceInfo(src/engine/general_purpose/mod.rs:118:30-118:32)
  2: _411 = const 28_usize
    SourceInfo(src/engine/general_purpose/mod.rs:118:30-118:32)
  3: _412 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:118:17-118:33)
  4: _413 = Lt(_411, _412)
    SourceInfo(src/engine/general_purpose/mod.rs:118:17-118:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:118:17-118:33)
      kind: assert(move _413, "index out of bounds: the length is {} but the index is {}", move _412, _411) -> [success: bb110, unwind: bb195]
  }
  preds [bb108]
  succs [bb110, bb195]

bb110
  0: (*_32)[_411] = move _402
    SourceInfo(src/engine/general_purpose/mod.rs:118:17-118:98)
  1: StorageDead(_402)
    SourceInfo(src/engine/general_purpose/mod.rs:118:97-118:98)
  2: StorageDead(_411)
    SourceInfo(src/engine/general_purpose/mod.rs:118:98-118:99)
  3: StorageDead(_403)
    SourceInfo(src/engine/general_purpose/mod.rs:118:98-118:99)
  4: StorageLive(_414)
    SourceInfo(src/engine/general_purpose/mod.rs:119:36-119:98)
  5: StorageLive(_415)
    SourceInfo(src/engine/general_purpose/mod.rs:119:54-119:97)
  6: StorageLive(_416)
    SourceInfo(src/engine/general_purpose/mod.rs:119:54-119:88)
  7: StorageLive(_417)
    SourceInfo(src/engine/general_purpose/mod.rs:119:55-119:72)
  8: StorageLive(_418)
    SourceInfo(src/engine/general_purpose/mod.rs:119:56-119:65)
  9: _418 = _348
    SourceInfo(src/engine/general_purpose/mod.rs:119:56-119:65)
  10: _419 = const 28_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:119:55-119:72)
  11: _420 = Lt(move _419, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:119:55-119:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:119:55-119:72)
      kind: assert(move _420, "attempt to shift right by `{}`, which would overflow", const 28_i32) -> [success: bb111, unwind: bb195]
  }
  preds [bb109]
  succs [bb111, bb195]

bb111
  0: _417 = Shr(move _418, const 28_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:119:55-119:72)
  1: StorageDead(_418)
    SourceInfo(src/engine/general_purpose/mod.rs:119:71-119:72)
  2: _416 = BitAnd(move _417, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:119:54-119:88)
  3: StorageDead(_417)
    SourceInfo(src/engine/general_purpose/mod.rs:119:87-119:88)
  4: _415 = move _416 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:119:54-119:97)
  5: StorageDead(_416)
    SourceInfo(src/engine/general_purpose/mod.rs:119:96-119:97)
  6: _421 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:119:36-119:98)
  7: _422 = Lt(_415, _421)
    SourceInfo(src/engine/general_purpose/mod.rs:119:36-119:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:119:36-119:98)
      kind: assert(move _422, "index out of bounds: the length is {} but the index is {}", move _421, _415) -> [success: bb112, unwind: bb195]
  }
  preds [bb110]
  succs [bb112, bb195]

bb112
  0: _414 = ((*_1).0: [u8; 64])[_415]
    SourceInfo(src/engine/general_purpose/mod.rs:119:36-119:98)
  1: StorageLive(_423)
    SourceInfo(src/engine/general_purpose/mod.rs:119:30-119:32)
  2: _423 = const 29_usize
    SourceInfo(src/engine/general_purpose/mod.rs:119:30-119:32)
  3: _424 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:119:17-119:33)
  4: _425 = Lt(_423, _424)
    SourceInfo(src/engine/general_purpose/mod.rs:119:17-119:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:119:17-119:33)
      kind: assert(move _425, "index out of bounds: the length is {} but the index is {}", move _424, _423) -> [success: bb113, unwind: bb195]
  }
  preds [bb111]
  succs [bb113, bb195]

bb113
  0: (*_32)[_423] = move _414
    SourceInfo(src/engine/general_purpose/mod.rs:119:17-119:98)
  1: StorageDead(_414)
    SourceInfo(src/engine/general_purpose/mod.rs:119:97-119:98)
  2: StorageDead(_423)
    SourceInfo(src/engine/general_purpose/mod.rs:119:98-119:99)
  3: StorageDead(_415)
    SourceInfo(src/engine/general_purpose/mod.rs:119:98-119:99)
  4: StorageLive(_426)
    SourceInfo(src/engine/general_purpose/mod.rs:120:36-120:98)
  5: StorageLive(_427)
    SourceInfo(src/engine/general_purpose/mod.rs:120:54-120:97)
  6: StorageLive(_428)
    SourceInfo(src/engine/general_purpose/mod.rs:120:54-120:88)
  7: StorageLive(_429)
    SourceInfo(src/engine/general_purpose/mod.rs:120:55-120:72)
  8: StorageLive(_430)
    SourceInfo(src/engine/general_purpose/mod.rs:120:56-120:65)
  9: _430 = _348
    SourceInfo(src/engine/general_purpose/mod.rs:120:56-120:65)
  10: _431 = const 22_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:120:55-120:72)
  11: _432 = Lt(move _431, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:120:55-120:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:120:55-120:72)
      kind: assert(move _432, "attempt to shift right by `{}`, which would overflow", const 22_i32) -> [success: bb114, unwind: bb195]
  }
  preds [bb112]
  succs [bb114, bb195]

bb114
  0: _429 = Shr(move _430, const 22_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:120:55-120:72)
  1: StorageDead(_430)
    SourceInfo(src/engine/general_purpose/mod.rs:120:71-120:72)
  2: _428 = BitAnd(move _429, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:120:54-120:88)
  3: StorageDead(_429)
    SourceInfo(src/engine/general_purpose/mod.rs:120:87-120:88)
  4: _427 = move _428 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:120:54-120:97)
  5: StorageDead(_428)
    SourceInfo(src/engine/general_purpose/mod.rs:120:96-120:97)
  6: _433 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:120:36-120:98)
  7: _434 = Lt(_427, _433)
    SourceInfo(src/engine/general_purpose/mod.rs:120:36-120:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:120:36-120:98)
      kind: assert(move _434, "index out of bounds: the length is {} but the index is {}", move _433, _427) -> [success: bb115, unwind: bb195]
  }
  preds [bb113]
  succs [bb115, bb195]

bb115
  0: _426 = ((*_1).0: [u8; 64])[_427]
    SourceInfo(src/engine/general_purpose/mod.rs:120:36-120:98)
  1: StorageLive(_435)
    SourceInfo(src/engine/general_purpose/mod.rs:120:30-120:32)
  2: _435 = const 30_usize
    SourceInfo(src/engine/general_purpose/mod.rs:120:30-120:32)
  3: _436 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:120:17-120:33)
  4: _437 = Lt(_435, _436)
    SourceInfo(src/engine/general_purpose/mod.rs:120:17-120:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:120:17-120:33)
      kind: assert(move _437, "index out of bounds: the length is {} but the index is {}", move _436, _435) -> [success: bb116, unwind: bb195]
  }
  preds [bb114]
  succs [bb116, bb195]

bb116
  0: (*_32)[_435] = move _426
    SourceInfo(src/engine/general_purpose/mod.rs:120:17-120:98)
  1: StorageDead(_426)
    SourceInfo(src/engine/general_purpose/mod.rs:120:97-120:98)
  2: StorageDead(_435)
    SourceInfo(src/engine/general_purpose/mod.rs:120:98-120:99)
  3: StorageDead(_427)
    SourceInfo(src/engine/general_purpose/mod.rs:120:98-120:99)
  4: StorageLive(_438)
    SourceInfo(src/engine/general_purpose/mod.rs:121:36-121:98)
  5: StorageLive(_439)
    SourceInfo(src/engine/general_purpose/mod.rs:121:54-121:97)
  6: StorageLive(_440)
    SourceInfo(src/engine/general_purpose/mod.rs:121:54-121:88)
  7: StorageLive(_441)
    SourceInfo(src/engine/general_purpose/mod.rs:121:55-121:72)
  8: StorageLive(_442)
    SourceInfo(src/engine/general_purpose/mod.rs:121:56-121:65)
  9: _442 = _348
    SourceInfo(src/engine/general_purpose/mod.rs:121:56-121:65)
  10: _443 = const 16_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:121:55-121:72)
  11: _444 = Lt(move _443, const 64_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:121:55-121:72)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:121:55-121:72)
      kind: assert(move _444, "attempt to shift right by `{}`, which would overflow", const 16_i32) -> [success: bb117, unwind: bb195]
  }
  preds [bb115]
  succs [bb117, bb195]

bb117
  0: _441 = Shr(move _442, const 16_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:121:55-121:72)
  1: StorageDead(_442)
    SourceInfo(src/engine/general_purpose/mod.rs:121:71-121:72)
  2: _440 = BitAnd(move _441, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS)
    SourceInfo(src/engine/general_purpose/mod.rs:121:54-121:88)
  3: StorageDead(_441)
    SourceInfo(src/engine/general_purpose/mod.rs:121:87-121:88)
  4: _439 = move _440 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:121:54-121:97)
  5: StorageDead(_440)
    SourceInfo(src/engine/general_purpose/mod.rs:121:96-121:97)
  6: _445 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:121:36-121:98)
  7: _446 = Lt(_439, _445)
    SourceInfo(src/engine/general_purpose/mod.rs:121:36-121:98)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:121:36-121:98)
      kind: assert(move _446, "index out of bounds: the length is {} but the index is {}", move _445, _439) -> [success: bb118, unwind: bb195]
  }
  preds [bb116]
  succs [bb118, bb195]

bb118
  0: _438 = ((*_1).0: [u8; 64])[_439]
    SourceInfo(src/engine/general_purpose/mod.rs:121:36-121:98)
  1: StorageLive(_447)
    SourceInfo(src/engine/general_purpose/mod.rs:121:30-121:32)
  2: _447 = const 31_usize
    SourceInfo(src/engine/general_purpose/mod.rs:121:30-121:32)
  3: _448 = Len((*_32))
    SourceInfo(src/engine/general_purpose/mod.rs:121:17-121:33)
  4: _449 = Lt(_447, _448)
    SourceInfo(src/engine/general_purpose/mod.rs:121:17-121:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:121:17-121:33)
      kind: assert(move _449, "index out of bounds: the length is {} but the index is {}", move _448, _447) -> [success: bb119, unwind: bb195]
  }
  preds [bb117]
  succs [bb119, bb195]

bb119
  0: (*_32)[_447] = move _438
    SourceInfo(src/engine/general_purpose/mod.rs:121:17-121:98)
  1: StorageDead(_438)
    SourceInfo(src/engine/general_purpose/mod.rs:121:97-121:98)
  2: StorageDead(_447)
    SourceInfo(src/engine/general_purpose/mod.rs:121:98-121:99)
  3: StorageDead(_439)
    SourceInfo(src/engine/general_purpose/mod.rs:121:98-121:99)
  4: StorageLive(_450)
    SourceInfo(src/engine/general_purpose/mod.rs:123:33-123:57)
  5: _451 = MulWithOverflow(const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 8_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:123:33-123:57)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:123:33-123:57)
      kind: assert(!move (_451.1: bool), "attempt to compute `{} * {}`, which would overflow", const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 8_usize) -> [success: bb120, unwind: bb195]
  }
  preds [bb118]
  succs [bb120, bb195]

bb120
  0: _450 = move (_451.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:123:33-123:57)
  1: _452 = AddWithOverflow(_12, _450)
    SourceInfo(src/engine/general_purpose/mod.rs:123:17-123:57)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:123:17-123:57)
      kind: assert(!move (_452.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, move _450) -> [success: bb121, unwind: bb195]
  }
  preds [bb119]
  succs [bb121, bb195]

bb121
  0: _12 = move (_452.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:123:17-123:57)
  1: StorageDead(_450)
    SourceInfo(src/engine/general_purpose/mod.rs:123:56-123:57)
  2: StorageLive(_453)
    SourceInfo(src/engine/general_purpose/mod.rs:124:32-124:56)
  3: _454 = MulWithOverflow(const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:124:32-124:56)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:124:32-124:56)
      kind: assert(!move (_454.1: bool), "attempt to compute `{} * {}`, which would overflow", const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::BLOCKS_PER_FAST_LOOP, const 6_usize) -> [success: bb122, unwind: bb195]
  }
  preds [bb120]
  succs [bb122, bb195]

bb122
  0: _453 = move (_454.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:124:32-124:56)
  1: _455 = AddWithOverflow(_4, _453)
    SourceInfo(src/engine/general_purpose/mod.rs:124:17-124:56)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:124:17-124:56)
      kind: assert(!move (_455.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, move _453) -> [success: bb123, unwind: bb195]
  }
  preds [bb121]
  succs [bb123, bb195]

bb123
  0: _4 = move (_455.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:124:17-124:56)
  1: StorageDead(_453)
    SourceInfo(src/engine/general_purpose/mod.rs:124:55-124:56)
  2: _16 = const ()
    SourceInfo(src/engine/general_purpose/mod.rs:63:50-125:14)
  3: StorageDead(_348)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  4: StorageDead(_246)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  5: StorageDead(_144)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  6: StorageDead(_42)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  7: StorageDead(_33)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  8: StorageDead(_32)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  9: StorageDead(_21)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  10: StorageDead(_20)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  11: StorageDead(_17)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:63:13-125:14)
      kind: goto -> bb6
  }
  preds [bb122]
  succs [bb6]

bb124
  0: StorageDead(_19)
    SourceInfo(src/engine/general_purpose/mod.rs:63:48-63:49)
  1: StorageDead(_18)
    SourceInfo(src/engine/general_purpose/mod.rs:63:48-63:49)
  2: StorageLive(_457)
    SourceInfo(src/engine/general_purpose/mod.rs:63:13-125:14)
  3: _13 = const ()
    SourceInfo(src/engine/general_purpose/mod.rs:63:13-125:14)
  4: StorageDead(_457)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  5: StorageDead(_17)
    SourceInfo(src/engine/general_purpose/mod.rs:125:13-125:14)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:62:9-126:10)
      kind: goto -> bb126
  }
  preds [bb7]
  succs [bb126]

bb125
  0: StorageDead(_15)
    SourceInfo(src/engine/general_purpose/mod.rs:62:30-62:31)
  1: _13 = const ()
    SourceInfo(src/engine/general_purpose/mod.rs:126:10-126:10)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:62:9-126:10)
      kind: goto -> bb126
  }
  preds [bb4]
  succs [bb126]

bb126
  0: StorageDead(_14)
    SourceInfo(src/engine/general_purpose/mod.rs:126:9-126:10)
  1: StorageDead(_13)
    SourceInfo(src/engine/general_purpose/mod.rs:126:9-126:10)
  2: StorageLive(_459)
    SourceInfo(src/engine/general_purpose/mod.rs:132:13-132:16)
  3: StorageLive(_460)
    SourceInfo(src/engine/general_purpose/mod.rs:132:19-132:30)
  4: StorageLive(_461)
    SourceInfo(src/engine/general_purpose/mod.rs:132:19-132:24)
  5: _461 = &(*_2)
    SourceInfo(src/engine/general_purpose/mod.rs:132:19-132:24)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:132:19-132:30)
      kind: _460 = core::slice::<impl [u8]>::len(move _461) -> [return: bb127, unwind: bb195]
  }
  preds [bb124, bb125]
  succs [bb127, bb195]

bb127
  0: StorageDead(_461)
    SourceInfo(src/engine/general_purpose/mod.rs:132:29-132:30)
  1: _462 = Eq(const 3_usize, const 0_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:132:19-132:34)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:132:19-132:34)
      kind: assert(!move _462, "attempt to calculate the remainder of `{}` with a divisor of zero", _460) -> [success: bb128, unwind: bb195]
  }
  preds [bb126]
  succs [bb128, bb195]

bb128
  0: _459 = Rem(move _460, const 3_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:132:19-132:34)
  1: StorageDead(_460)
    SourceInfo(src/engine/general_purpose/mod.rs:132:33-132:34)
  2: FakeRead(ForLet(None), _459)
    SourceInfo(src/engine/general_purpose/mod.rs:132:13-132:16)
  3: StorageLive(_463)
    SourceInfo(src/engine/general_purpose/mod.rs:133:13-133:25)
  4: StorageLive(_464)
    SourceInfo(src/engine/general_purpose/mod.rs:133:28-133:39)
  5: StorageLive(_465)
    SourceInfo(src/engine/general_purpose/mod.rs:133:28-133:33)
  6: _465 = &(*_2)
    SourceInfo(src/engine/general_purpose/mod.rs:133:28-133:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:133:28-133:39)
      kind: _464 = core::slice::<impl [u8]>::len(move _465) -> [return: bb129, unwind: bb195]
  }
  preds [bb127]
  succs [bb129, bb195]

bb129
  0: StorageDead(_465)
    SourceInfo(src/engine/general_purpose/mod.rs:133:38-133:39)
  1: StorageLive(_466)
    SourceInfo(src/engine/general_purpose/mod.rs:133:42-133:45)
  2: _466 = _459
    SourceInfo(src/engine/general_purpose/mod.rs:133:42-133:45)
  3: _467 = SubWithOverflow(_464, _466)
    SourceInfo(src/engine/general_purpose/mod.rs:133:28-133:45)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:133:28-133:45)
      kind: assert(!move (_467.1: bool), "attempt to compute `{} - {}`, which would overflow", move _464, move _466) -> [success: bb130, unwind: bb195]
  }
  preds [bb128]
  succs [bb130, bb195]

bb130
  0: _463 = move (_467.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:133:28-133:45)
  1: StorageDead(_466)
    SourceInfo(src/engine/general_purpose/mod.rs:133:44-133:45)
  2: StorageDead(_464)
    SourceInfo(src/engine/general_purpose/mod.rs:133:44-133:45)
  3: FakeRead(ForLet(None), _463)
    SourceInfo(src/engine/general_purpose/mod.rs:133:13-133:25)
  4: StorageLive(_468)
    SourceInfo(src/engine/general_purpose/mod.rs:137:9-150:10)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:137:9-150:10)
      kind: goto -> bb131
  }
  preds [bb129]
  succs [bb131]

bb131
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:137:9-150:10)
      kind: falseUnwind -> [real: bb132, unwind: bb195]
  }
  preds [bb130, bb158]
  succs [bb132, bb195]

bb132
  0: StorageLive(_469)
    SourceInfo(src/engine/general_purpose/mod.rs:137:15-137:41)
  1: StorageLive(_470)
    SourceInfo(src/engine/general_purpose/mod.rs:137:15-137:26)
  2: _470 = _4
    SourceInfo(src/engine/general_purpose/mod.rs:137:15-137:26)
  3: StorageLive(_471)
    SourceInfo(src/engine/general_purpose/mod.rs:137:29-137:41)
  4: _471 = _463
    SourceInfo(src/engine/general_purpose/mod.rs:137:29-137:41)
  5: _469 = Lt(move _470, move _471)
    SourceInfo(src/engine/general_purpose/mod.rs:137:15-137:41)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:137:15-137:41)
      kind: switchInt(move _469) -> [0: bb159, otherwise: bb133]
  }
  preds [bb131]
  succs [bb133, bb159]

bb133
  0: StorageDead(_471)
    SourceInfo(src/engine/general_purpose/mod.rs:137:40-137:41)
  1: StorageDead(_470)
    SourceInfo(src/engine/general_purpose/mod.rs:137:40-137:41)
  2: StorageLive(_472)
    SourceInfo(src/engine/general_purpose/mod.rs:138:17-138:28)
  3: StorageLive(_473)
    SourceInfo(src/engine/general_purpose/mod.rs:138:37-138:69)
  4: StorageLive(_474)
    SourceInfo(src/engine/general_purpose/mod.rs:138:32-138:37)
  5: _474 = &(*_2)
    SourceInfo(src/engine/general_purpose/mod.rs:138:32-138:37)
  6: StorageLive(_475)
    SourceInfo(src/engine/general_purpose/mod.rs:138:38-138:68)
  7: StorageLive(_476)
    SourceInfo(src/engine/general_purpose/mod.rs:138:38-138:49)
  8: _476 = _4
    SourceInfo(src/engine/general_purpose/mod.rs:138:38-138:49)
  9: StorageLive(_477)
    SourceInfo(src/engine/general_purpose/mod.rs:138:51-138:68)
  10: StorageLive(_478)
    SourceInfo(src/engine/general_purpose/mod.rs:138:52-138:63)
  11: _478 = _4
    SourceInfo(src/engine/general_purpose/mod.rs:138:52-138:63)
  12: _479 = AddWithOverflow(_478, const 3_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:138:51-138:68)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:138:51-138:68)
      kind: assert(!move (_479.1: bool), "attempt to compute `{} + {}`, which would overflow", move _478, const 3_usize) -> [success: bb134, unwind: bb195]
  }
  preds [bb132]
  succs [bb134, bb195]

bb134
  0: _477 = move (_479.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:138:51-138:68)
  1: StorageDead(_478)
    SourceInfo(src/engine/general_purpose/mod.rs:138:67-138:68)
  2: _475 = std::ops::Range::<usize> { start: move _476, end: move _477 }
    SourceInfo(src/engine/general_purpose/mod.rs:138:38-138:68)
  3: StorageDead(_477)
    SourceInfo(src/engine/general_purpose/mod.rs:138:67-138:68)
  4: StorageDead(_476)
    SourceInfo(src/engine/general_purpose/mod.rs:138:67-138:68)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:138:37-138:69)
      kind: _473 = <[u8] as std::ops::Index<std::ops::Range<usize>>>::index(move _474, move _475) -> [return: bb135, unwind: bb195]
  }
  preds [bb133]
  succs [bb135, bb195]

bb135
  0: StorageDead(_475)
    SourceInfo(src/engine/general_purpose/mod.rs:138:68-138:69)
  1: StorageDead(_474)
    SourceInfo(src/engine/general_purpose/mod.rs:138:68-138:69)
  2: _472 = &(*_473)
    SourceInfo(src/engine/general_purpose/mod.rs:138:31-138:69)
  3: FakeRead(ForLet(None), _472)
    SourceInfo(src/engine/general_purpose/mod.rs:138:17-138:28)
  4: StorageLive(_480)
    SourceInfo(src/engine/general_purpose/mod.rs:139:17-139:29)
  5: StorageLive(_481)
    SourceInfo(src/engine/general_purpose/mod.rs:139:43-139:77)
  6: StorageLive(_482)
    SourceInfo(src/engine/general_purpose/mod.rs:139:37-139:43)
  7: _482 = &mut (*_3)
    SourceInfo(src/engine/general_purpose/mod.rs:139:37-139:43)
  8: StorageLive(_483)
    SourceInfo(src/engine/general_purpose/mod.rs:139:44-139:76)
  9: StorageLive(_484)
    SourceInfo(src/engine/general_purpose/mod.rs:139:44-139:56)
  10: _484 = _12
    SourceInfo(src/engine/general_purpose/mod.rs:139:44-139:56)
  11: StorageLive(_485)
    SourceInfo(src/engine/general_purpose/mod.rs:139:58-139:76)
  12: StorageLive(_486)
    SourceInfo(src/engine/general_purpose/mod.rs:139:59-139:71)
  13: _486 = _12
    SourceInfo(src/engine/general_purpose/mod.rs:139:59-139:71)
  14: _487 = AddWithOverflow(_486, const 4_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:139:58-139:76)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:139:58-139:76)
      kind: assert(!move (_487.1: bool), "attempt to compute `{} + {}`, which would overflow", move _486, const 4_usize) -> [success: bb136, unwind: bb195]
  }
  preds [bb134]
  succs [bb136, bb195]

bb136
  0: _485 = move (_487.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:139:58-139:76)
  1: StorageDead(_486)
    SourceInfo(src/engine/general_purpose/mod.rs:139:75-139:76)
  2: _483 = std::ops::Range::<usize> { start: move _484, end: move _485 }
    SourceInfo(src/engine/general_purpose/mod.rs:139:44-139:76)
  3: StorageDead(_485)
    SourceInfo(src/engine/general_purpose/mod.rs:139:75-139:76)
  4: StorageDead(_484)
    SourceInfo(src/engine/general_purpose/mod.rs:139:75-139:76)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:139:43-139:77)
      kind: _481 = <[u8] as std::ops::IndexMut<std::ops::Range<usize>>>::index_mut(move _482, move _483) -> [return: bb137, unwind: bb195]
  }
  preds [bb135]
  succs [bb137, bb195]

bb137
  0: StorageDead(_483)
    SourceInfo(src/engine/general_purpose/mod.rs:139:76-139:77)
  1: StorageDead(_482)
    SourceInfo(src/engine/general_purpose/mod.rs:139:76-139:77)
  2: _480 = &mut (*_481)
    SourceInfo(src/engine/general_purpose/mod.rs:139:32-139:77)
  3: FakeRead(ForLet(None), _480)
    SourceInfo(src/engine/general_purpose/mod.rs:139:17-139:29)
  4: StorageLive(_488)
    SourceInfo(src/engine/general_purpose/mod.rs:141:31-141:80)
  5: StorageLive(_489)
    SourceInfo(src/engine/general_purpose/mod.rs:141:49-141:79)
  6: StorageLive(_490)
    SourceInfo(src/engine/general_purpose/mod.rs:141:49-141:70)
  7: StorageLive(_491)
    SourceInfo(src/engine/general_purpose/mod.rs:141:50-141:64)
  8: StorageLive(_492)
    SourceInfo(src/engine/general_purpose/mod.rs:141:62-141:63)
  9: _492 = const 0_usize
    SourceInfo(src/engine/general_purpose/mod.rs:141:62-141:63)
  10: _493 = Len((*_472))
    SourceInfo(src/engine/general_purpose/mod.rs:141:50-141:64)
  11: _494 = Lt(_492, _493)
    SourceInfo(src/engine/general_purpose/mod.rs:141:50-141:64)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:141:50-141:64)
      kind: assert(move _494, "index out of bounds: the length is {} but the index is {}", move _493, _492) -> [success: bb138, unwind: bb195]
  }
  preds [bb136]
  succs [bb138, bb195]

bb138
  0: _491 = (*_472)[_492]
    SourceInfo(src/engine/general_purpose/mod.rs:141:50-141:64)
  1: _495 = const 2_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:141:49-141:70)
  2: _496 = Lt(move _495, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:141:49-141:70)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:141:49-141:70)
      kind: assert(move _496, "attempt to shift right by `{}`, which would overflow", const 2_i32) -> [success: bb139, unwind: bb195]
  }
  preds [bb137]
  succs [bb139, bb195]

bb139
  0: _490 = Shr(move _491, const 2_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:141:49-141:70)
  1: StorageDead(_491)
    SourceInfo(src/engine/general_purpose/mod.rs:141:69-141:70)
  2: _489 = move _490 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:141:49-141:79)
  3: StorageDead(_490)
    SourceInfo(src/engine/general_purpose/mod.rs:141:78-141:79)
  4: _497 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:141:31-141:80)
  5: _498 = Lt(_489, _497)
    SourceInfo(src/engine/general_purpose/mod.rs:141:31-141:80)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:141:31-141:80)
      kind: assert(move _498, "index out of bounds: the length is {} but the index is {}", move _497, _489) -> [success: bb140, unwind: bb195]
  }
  preds [bb138]
  succs [bb140, bb195]

bb140
  0: _488 = ((*_1).0: [u8; 64])[_489]
    SourceInfo(src/engine/general_purpose/mod.rs:141:31-141:80)
  1: StorageLive(_499)
    SourceInfo(src/engine/general_purpose/mod.rs:141:26-141:27)
  2: _499 = const 0_usize
    SourceInfo(src/engine/general_purpose/mod.rs:141:26-141:27)
  3: _500 = Len((*_480))
    SourceInfo(src/engine/general_purpose/mod.rs:141:13-141:28)
  4: _501 = Lt(_499, _500)
    SourceInfo(src/engine/general_purpose/mod.rs:141:13-141:28)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:141:13-141:28)
      kind: assert(move _501, "index out of bounds: the length is {} but the index is {}", move _500, _499) -> [success: bb141, unwind: bb195]
  }
  preds [bb139]
  succs [bb141, bb195]

bb141
  0: (*_480)[_499] = move _488
    SourceInfo(src/engine/general_purpose/mod.rs:141:13-141:80)
  1: StorageDead(_488)
    SourceInfo(src/engine/general_purpose/mod.rs:141:79-141:80)
  2: StorageDead(_499)
    SourceInfo(src/engine/general_purpose/mod.rs:141:80-141:81)
  3: StorageDead(_492)
    SourceInfo(src/engine/general_purpose/mod.rs:141:80-141:81)
  4: StorageDead(_489)
    SourceInfo(src/engine/general_purpose/mod.rs:141:80-141:81)
  5: StorageLive(_502)
    SourceInfo(src/engine/general_purpose/mod.rs:142:31-143:91)
  6: StorageLive(_503)
    SourceInfo(src/engine/general_purpose/mod.rs:143:18-143:90)
  7: StorageLive(_504)
    SourceInfo(src/engine/general_purpose/mod.rs:143:18-143:81)
  8: StorageLive(_505)
    SourceInfo(src/engine/general_purpose/mod.rs:143:19-143:62)
  9: StorageLive(_506)
    SourceInfo(src/engine/general_purpose/mod.rs:143:20-143:39)
  10: StorageLive(_507)
    SourceInfo(src/engine/general_purpose/mod.rs:143:20-143:34)
  11: StorageLive(_508)
    SourceInfo(src/engine/general_purpose/mod.rs:143:32-143:33)
  12: _508 = const 0_usize
    SourceInfo(src/engine/general_purpose/mod.rs:143:32-143:33)
  13: _509 = Len((*_472))
    SourceInfo(src/engine/general_purpose/mod.rs:143:20-143:34)
  14: _510 = Lt(_508, _509)
    SourceInfo(src/engine/general_purpose/mod.rs:143:20-143:34)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:143:20-143:34)
      kind: assert(move _510, "index out of bounds: the length is {} but the index is {}", move _509, _508) -> [success: bb142, unwind: bb195]
  }
  preds [bb140]
  succs [bb142, bb195]

bb142
  0: _507 = (*_472)[_508]
    SourceInfo(src/engine/general_purpose/mod.rs:143:20-143:34)
  1: _511 = const 4_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:143:20-143:39)
  2: _512 = Lt(move _511, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:143:20-143:39)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:143:20-143:39)
      kind: assert(move _512, "attempt to shift left by `{}`, which would overflow", const 4_i32) -> [success: bb143, unwind: bb195]
  }
  preds [bb141]
  succs [bb143, bb195]

bb143
  0: _506 = Shl(move _507, const 4_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:143:20-143:39)
  1: StorageDead(_507)
    SourceInfo(src/engine/general_purpose/mod.rs:143:38-143:39)
  2: StorageLive(_513)
    SourceInfo(src/engine/general_purpose/mod.rs:143:42-143:61)
  3: StorageLive(_514)
    SourceInfo(src/engine/general_purpose/mod.rs:143:42-143:56)
  4: StorageLive(_515)
    SourceInfo(src/engine/general_purpose/mod.rs:143:54-143:55)
  5: _515 = const 1_usize
    SourceInfo(src/engine/general_purpose/mod.rs:143:54-143:55)
  6: _516 = Len((*_472))
    SourceInfo(src/engine/general_purpose/mod.rs:143:42-143:56)
  7: _517 = Lt(_515, _516)
    SourceInfo(src/engine/general_purpose/mod.rs:143:42-143:56)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:143:42-143:56)
      kind: assert(move _517, "index out of bounds: the length is {} but the index is {}", move _516, _515) -> [success: bb144, unwind: bb195]
  }
  preds [bb142]
  succs [bb144, bb195]

bb144
  0: _514 = (*_472)[_515]
    SourceInfo(src/engine/general_purpose/mod.rs:143:42-143:56)
  1: _518 = const 4_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:143:42-143:61)
  2: _519 = Lt(move _518, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:143:42-143:61)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:143:42-143:61)
      kind: assert(move _519, "attempt to shift right by `{}`, which would overflow", const 4_i32) -> [success: bb145, unwind: bb195]
  }
  preds [bb143]
  succs [bb145, bb195]

bb145
  0: _513 = Shr(move _514, const 4_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:143:42-143:61)
  1: StorageDead(_514)
    SourceInfo(src/engine/general_purpose/mod.rs:143:60-143:61)
  2: _505 = BitOr(move _506, move _513)
    SourceInfo(src/engine/general_purpose/mod.rs:143:19-143:62)
  3: StorageDead(_513)
    SourceInfo(src/engine/general_purpose/mod.rs:143:61-143:62)
  4: StorageDead(_506)
    SourceInfo(src/engine/general_purpose/mod.rs:143:61-143:62)
  5: _504 = BitAnd(move _505, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8)
    SourceInfo(src/engine/general_purpose/mod.rs:143:18-143:81)
  6: StorageDead(_505)
    SourceInfo(src/engine/general_purpose/mod.rs:143:80-143:81)
  7: _503 = move _504 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:143:18-143:90)
  8: StorageDead(_504)
    SourceInfo(src/engine/general_purpose/mod.rs:143:89-143:90)
  9: _520 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:142:31-143:91)
  10: _521 = Lt(_503, _520)
    SourceInfo(src/engine/general_purpose/mod.rs:142:31-143:91)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:142:31-143:91)
      kind: assert(move _521, "index out of bounds: the length is {} but the index is {}", move _520, _503) -> [success: bb146, unwind: bb195]
  }
  preds [bb144]
  succs [bb146, bb195]

bb146
  0: _502 = ((*_1).0: [u8; 64])[_503]
    SourceInfo(src/engine/general_purpose/mod.rs:142:31-143:91)
  1: StorageLive(_522)
    SourceInfo(src/engine/general_purpose/mod.rs:142:26-142:27)
  2: _522 = const 1_usize
    SourceInfo(src/engine/general_purpose/mod.rs:142:26-142:27)
  3: _523 = Len((*_480))
    SourceInfo(src/engine/general_purpose/mod.rs:142:13-142:28)
  4: _524 = Lt(_522, _523)
    SourceInfo(src/engine/general_purpose/mod.rs:142:13-142:28)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:142:13-142:28)
      kind: assert(move _524, "index out of bounds: the length is {} but the index is {}", move _523, _522) -> [success: bb147, unwind: bb195]
  }
  preds [bb145]
  succs [bb147, bb195]

bb147
  0: (*_480)[_522] = move _502
    SourceInfo(src/engine/general_purpose/mod.rs:142:13-143:91)
  1: StorageDead(_502)
    SourceInfo(src/engine/general_purpose/mod.rs:143:90-143:91)
  2: StorageDead(_522)
    SourceInfo(src/engine/general_purpose/mod.rs:143:91-143:92)
  3: StorageDead(_515)
    SourceInfo(src/engine/general_purpose/mod.rs:143:91-143:92)
  4: StorageDead(_508)
    SourceInfo(src/engine/general_purpose/mod.rs:143:91-143:92)
  5: StorageDead(_503)
    SourceInfo(src/engine/general_purpose/mod.rs:143:91-143:92)
  6: StorageLive(_525)
    SourceInfo(src/engine/general_purpose/mod.rs:144:31-145:91)
  7: StorageLive(_526)
    SourceInfo(src/engine/general_purpose/mod.rs:145:18-145:90)
  8: StorageLive(_527)
    SourceInfo(src/engine/general_purpose/mod.rs:145:18-145:81)
  9: StorageLive(_528)
    SourceInfo(src/engine/general_purpose/mod.rs:145:19-145:62)
  10: StorageLive(_529)
    SourceInfo(src/engine/general_purpose/mod.rs:145:20-145:39)
  11: StorageLive(_530)
    SourceInfo(src/engine/general_purpose/mod.rs:145:20-145:34)
  12: StorageLive(_531)
    SourceInfo(src/engine/general_purpose/mod.rs:145:32-145:33)
  13: _531 = const 1_usize
    SourceInfo(src/engine/general_purpose/mod.rs:145:32-145:33)
  14: _532 = Len((*_472))
    SourceInfo(src/engine/general_purpose/mod.rs:145:20-145:34)
  15: _533 = Lt(_531, _532)
    SourceInfo(src/engine/general_purpose/mod.rs:145:20-145:34)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:145:20-145:34)
      kind: assert(move _533, "index out of bounds: the length is {} but the index is {}", move _532, _531) -> [success: bb148, unwind: bb195]
  }
  preds [bb146]
  succs [bb148, bb195]

bb148
  0: _530 = (*_472)[_531]
    SourceInfo(src/engine/general_purpose/mod.rs:145:20-145:34)
  1: _534 = const 2_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:145:20-145:39)
  2: _535 = Lt(move _534, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:145:20-145:39)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:145:20-145:39)
      kind: assert(move _535, "attempt to shift left by `{}`, which would overflow", const 2_i32) -> [success: bb149, unwind: bb195]
  }
  preds [bb147]
  succs [bb149, bb195]

bb149
  0: _529 = Shl(move _530, const 2_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:145:20-145:39)
  1: StorageDead(_530)
    SourceInfo(src/engine/general_purpose/mod.rs:145:38-145:39)
  2: StorageLive(_536)
    SourceInfo(src/engine/general_purpose/mod.rs:145:42-145:61)
  3: StorageLive(_537)
    SourceInfo(src/engine/general_purpose/mod.rs:145:42-145:56)
  4: StorageLive(_538)
    SourceInfo(src/engine/general_purpose/mod.rs:145:54-145:55)
  5: _538 = const 2_usize
    SourceInfo(src/engine/general_purpose/mod.rs:145:54-145:55)
  6: _539 = Len((*_472))
    SourceInfo(src/engine/general_purpose/mod.rs:145:42-145:56)
  7: _540 = Lt(_538, _539)
    SourceInfo(src/engine/general_purpose/mod.rs:145:42-145:56)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:145:42-145:56)
      kind: assert(move _540, "index out of bounds: the length is {} but the index is {}", move _539, _538) -> [success: bb150, unwind: bb195]
  }
  preds [bb148]
  succs [bb150, bb195]

bb150
  0: _537 = (*_472)[_538]
    SourceInfo(src/engine/general_purpose/mod.rs:145:42-145:56)
  1: _541 = const 6_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:145:42-145:61)
  2: _542 = Lt(move _541, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:145:42-145:61)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:145:42-145:61)
      kind: assert(move _542, "attempt to shift right by `{}`, which would overflow", const 6_i32) -> [success: bb151, unwind: bb195]
  }
  preds [bb149]
  succs [bb151, bb195]

bb151
  0: _536 = Shr(move _537, const 6_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:145:42-145:61)
  1: StorageDead(_537)
    SourceInfo(src/engine/general_purpose/mod.rs:145:60-145:61)
  2: _528 = BitOr(move _529, move _536)
    SourceInfo(src/engine/general_purpose/mod.rs:145:19-145:62)
  3: StorageDead(_536)
    SourceInfo(src/engine/general_purpose/mod.rs:145:61-145:62)
  4: StorageDead(_529)
    SourceInfo(src/engine/general_purpose/mod.rs:145:61-145:62)
  5: _527 = BitAnd(move _528, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8)
    SourceInfo(src/engine/general_purpose/mod.rs:145:18-145:81)
  6: StorageDead(_528)
    SourceInfo(src/engine/general_purpose/mod.rs:145:80-145:81)
  7: _526 = move _527 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:145:18-145:90)
  8: StorageDead(_527)
    SourceInfo(src/engine/general_purpose/mod.rs:145:89-145:90)
  9: _543 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:144:31-145:91)
  10: _544 = Lt(_526, _543)
    SourceInfo(src/engine/general_purpose/mod.rs:144:31-145:91)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:144:31-145:91)
      kind: assert(move _544, "index out of bounds: the length is {} but the index is {}", move _543, _526) -> [success: bb152, unwind: bb195]
  }
  preds [bb150]
  succs [bb152, bb195]

bb152
  0: _525 = ((*_1).0: [u8; 64])[_526]
    SourceInfo(src/engine/general_purpose/mod.rs:144:31-145:91)
  1: StorageLive(_545)
    SourceInfo(src/engine/general_purpose/mod.rs:144:26-144:27)
  2: _545 = const 2_usize
    SourceInfo(src/engine/general_purpose/mod.rs:144:26-144:27)
  3: _546 = Len((*_480))
    SourceInfo(src/engine/general_purpose/mod.rs:144:13-144:28)
  4: _547 = Lt(_545, _546)
    SourceInfo(src/engine/general_purpose/mod.rs:144:13-144:28)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:144:13-144:28)
      kind: assert(move _547, "index out of bounds: the length is {} but the index is {}", move _546, _545) -> [success: bb153, unwind: bb195]
  }
  preds [bb151]
  succs [bb153, bb195]

bb153
  0: (*_480)[_545] = move _525
    SourceInfo(src/engine/general_purpose/mod.rs:144:13-145:91)
  1: StorageDead(_525)
    SourceInfo(src/engine/general_purpose/mod.rs:145:90-145:91)
  2: StorageDead(_545)
    SourceInfo(src/engine/general_purpose/mod.rs:145:91-145:92)
  3: StorageDead(_538)
    SourceInfo(src/engine/general_purpose/mod.rs:145:91-145:92)
  4: StorageDead(_531)
    SourceInfo(src/engine/general_purpose/mod.rs:145:91-145:92)
  5: StorageDead(_526)
    SourceInfo(src/engine/general_purpose/mod.rs:145:91-145:92)
  6: StorageLive(_548)
    SourceInfo(src/engine/general_purpose/mod.rs:146:31-146:93)
  7: StorageLive(_549)
    SourceInfo(src/engine/general_purpose/mod.rs:146:49-146:92)
  8: StorageLive(_550)
    SourceInfo(src/engine/general_purpose/mod.rs:146:49-146:83)
  9: StorageLive(_551)
    SourceInfo(src/engine/general_purpose/mod.rs:146:50-146:64)
  10: StorageLive(_552)
    SourceInfo(src/engine/general_purpose/mod.rs:146:62-146:63)
  11: _552 = const 2_usize
    SourceInfo(src/engine/general_purpose/mod.rs:146:62-146:63)
  12: _553 = Len((*_472))
    SourceInfo(src/engine/general_purpose/mod.rs:146:50-146:64)
  13: _554 = Lt(_552, _553)
    SourceInfo(src/engine/general_purpose/mod.rs:146:50-146:64)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:146:50-146:64)
      kind: assert(move _554, "index out of bounds: the length is {} but the index is {}", move _553, _552) -> [success: bb154, unwind: bb195]
  }
  preds [bb152]
  succs [bb154, bb195]

bb154
  0: _551 = (*_472)[_552]
    SourceInfo(src/engine/general_purpose/mod.rs:146:50-146:64)
  1: _550 = BitAnd(move _551, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8)
    SourceInfo(src/engine/general_purpose/mod.rs:146:49-146:83)
  2: StorageDead(_551)
    SourceInfo(src/engine/general_purpose/mod.rs:146:82-146:83)
  3: _549 = move _550 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:146:49-146:92)
  4: StorageDead(_550)
    SourceInfo(src/engine/general_purpose/mod.rs:146:91-146:92)
  5: _555 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:146:31-146:93)
  6: _556 = Lt(_549, _555)
    SourceInfo(src/engine/general_purpose/mod.rs:146:31-146:93)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:146:31-146:93)
      kind: assert(move _556, "index out of bounds: the length is {} but the index is {}", move _555, _549) -> [success: bb155, unwind: bb195]
  }
  preds [bb153]
  succs [bb155, bb195]

bb155
  0: _548 = ((*_1).0: [u8; 64])[_549]
    SourceInfo(src/engine/general_purpose/mod.rs:146:31-146:93)
  1: StorageLive(_557)
    SourceInfo(src/engine/general_purpose/mod.rs:146:26-146:27)
  2: _557 = const 3_usize
    SourceInfo(src/engine/general_purpose/mod.rs:146:26-146:27)
  3: _558 = Len((*_480))
    SourceInfo(src/engine/general_purpose/mod.rs:146:13-146:28)
  4: _559 = Lt(_557, _558)
    SourceInfo(src/engine/general_purpose/mod.rs:146:13-146:28)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:146:13-146:28)
      kind: assert(move _559, "index out of bounds: the length is {} but the index is {}", move _558, _557) -> [success: bb156, unwind: bb195]
  }
  preds [bb154]
  succs [bb156, bb195]

bb156
  0: (*_480)[_557] = move _548
    SourceInfo(src/engine/general_purpose/mod.rs:146:13-146:93)
  1: StorageDead(_548)
    SourceInfo(src/engine/general_purpose/mod.rs:146:92-146:93)
  2: StorageDead(_557)
    SourceInfo(src/engine/general_purpose/mod.rs:146:93-146:94)
  3: StorageDead(_552)
    SourceInfo(src/engine/general_purpose/mod.rs:146:93-146:94)
  4: StorageDead(_549)
    SourceInfo(src/engine/general_purpose/mod.rs:146:93-146:94)
  5: _560 = AddWithOverflow(_4, const 3_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:148:13-148:29)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:148:13-148:29)
      kind: assert(!move (_560.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 3_usize) -> [success: bb157, unwind: bb195]
  }
  preds [bb155]
  succs [bb157, bb195]

bb157
  0: _4 = move (_560.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:148:13-148:29)
  1: _561 = AddWithOverflow(_12, const 4_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:149:13-149:30)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:149:13-149:30)
      kind: assert(!move (_561.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 4_usize) -> [success: bb158, unwind: bb195]
  }
  preds [bb156]
  succs [bb158, bb195]

bb158
  0: _12 = move (_561.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:149:13-149:30)
  1: _16 = const ()
    SourceInfo(src/engine/general_purpose/mod.rs:137:42-150:10)
  2: StorageDead(_481)
    SourceInfo(src/engine/general_purpose/mod.rs:150:9-150:10)
  3: StorageDead(_480)
    SourceInfo(src/engine/general_purpose/mod.rs:150:9-150:10)
  4: StorageDead(_473)
    SourceInfo(src/engine/general_purpose/mod.rs:150:9-150:10)
  5: StorageDead(_472)
    SourceInfo(src/engine/general_purpose/mod.rs:150:9-150:10)
  6: StorageDead(_469)
    SourceInfo(src/engine/general_purpose/mod.rs:150:9-150:10)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:137:9-150:10)
      kind: goto -> bb131
  }
  preds [bb157]
  succs [bb131]

bb159
  0: StorageDead(_471)
    SourceInfo(src/engine/general_purpose/mod.rs:137:40-137:41)
  1: StorageDead(_470)
    SourceInfo(src/engine/general_purpose/mod.rs:137:40-137:41)
  2: StorageLive(_563)
    SourceInfo(src/engine/general_purpose/mod.rs:137:9-150:10)
  3: _468 = const ()
    SourceInfo(src/engine/general_purpose/mod.rs:137:9-150:10)
  4: StorageDead(_563)
    SourceInfo(src/engine/general_purpose/mod.rs:150:9-150:10)
  5: StorageDead(_469)
    SourceInfo(src/engine/general_purpose/mod.rs:150:9-150:10)
  6: StorageDead(_468)
    SourceInfo(src/engine/general_purpose/mod.rs:150:9-150:10)
  7: StorageLive(_565)
    SourceInfo(src/engine/general_purpose/mod.rs:152:9-165:10)
  8: StorageLive(_566)
    SourceInfo(src/engine/general_purpose/mod.rs:152:12-152:20)
  9: StorageLive(_567)
    SourceInfo(src/engine/general_purpose/mod.rs:152:12-152:15)
  10: _567 = _459
    SourceInfo(src/engine/general_purpose/mod.rs:152:12-152:15)
  11: _566 = Eq(move _567, const 2_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:152:12-152:20)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:152:12-152:20)
      kind: switchInt(move _566) -> [0: bb161, otherwise: bb160]
  }
  preds [bb132]
  succs [bb160, bb161]

bb160
  0: StorageDead(_567)
    SourceInfo(src/engine/general_purpose/mod.rs:152:19-152:20)
  1: StorageLive(_568)
    SourceInfo(src/engine/general_purpose/mod.rs:153:36-153:90)
  2: StorageLive(_569)
    SourceInfo(src/engine/general_purpose/mod.rs:153:54-153:89)
  3: StorageLive(_570)
    SourceInfo(src/engine/general_purpose/mod.rs:153:54-153:80)
  4: StorageLive(_571)
    SourceInfo(src/engine/general_purpose/mod.rs:153:55-153:74)
  5: StorageLive(_572)
    SourceInfo(src/engine/general_purpose/mod.rs:153:61-153:73)
  6: _572 = _463
    SourceInfo(src/engine/general_purpose/mod.rs:153:61-153:73)
  7: _573 = Len((*_2))
    SourceInfo(src/engine/general_purpose/mod.rs:153:55-153:74)
  8: _574 = Lt(_572, _573)
    SourceInfo(src/engine/general_purpose/mod.rs:153:55-153:74)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:153:55-153:74)
      kind: assert(move _574, "index out of bounds: the length is {} but the index is {}", move _573, _572) -> [success: bb162, unwind: bb195]
  }
  preds [bb159]
  succs [bb162, bb195]

bb161
  0: StorageDead(_567)
    SourceInfo(src/engine/general_purpose/mod.rs:152:19-152:20)
  1: StorageLive(_629)
    SourceInfo(src/engine/general_purpose/mod.rs:160:19-160:27)
  2: StorageLive(_630)
    SourceInfo(src/engine/general_purpose/mod.rs:160:19-160:22)
  3: _630 = _459
    SourceInfo(src/engine/general_purpose/mod.rs:160:19-160:22)
  4: _629 = Eq(move _630, const 1_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:160:19-160:27)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:160:19-160:27)
      kind: switchInt(move _629) -> [0: bb182, otherwise: bb181]
  }
  preds [bb159]
  succs [bb181, bb182]

bb162
  0: _571 = (*_2)[_572]
    SourceInfo(src/engine/general_purpose/mod.rs:153:55-153:74)
  1: _575 = const 2_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:153:54-153:80)
  2: _576 = Lt(move _575, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:153:54-153:80)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:153:54-153:80)
      kind: assert(move _576, "attempt to shift right by `{}`, which would overflow", const 2_i32) -> [success: bb163, unwind: bb195]
  }
  preds [bb160]
  succs [bb163, bb195]

bb163
  0: _570 = Shr(move _571, const 2_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:153:54-153:80)
  1: StorageDead(_571)
    SourceInfo(src/engine/general_purpose/mod.rs:153:79-153:80)
  2: _569 = move _570 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:153:54-153:89)
  3: StorageDead(_570)
    SourceInfo(src/engine/general_purpose/mod.rs:153:88-153:89)
  4: _577 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:153:36-153:90)
  5: _578 = Lt(_569, _577)
    SourceInfo(src/engine/general_purpose/mod.rs:153:36-153:90)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:153:36-153:90)
      kind: assert(move _578, "index out of bounds: the length is {} but the index is {}", move _577, _569) -> [success: bb164, unwind: bb195]
  }
  preds [bb162]
  succs [bb164, bb195]

bb164
  0: _568 = ((*_1).0: [u8; 64])[_569]
    SourceInfo(src/engine/general_purpose/mod.rs:153:36-153:90)
  1: StorageLive(_579)
    SourceInfo(src/engine/general_purpose/mod.rs:153:20-153:32)
  2: _579 = _12
    SourceInfo(src/engine/general_purpose/mod.rs:153:20-153:32)
  3: _580 = Len((*_3))
    SourceInfo(src/engine/general_purpose/mod.rs:153:13-153:33)
  4: _581 = Lt(_579, _580)
    SourceInfo(src/engine/general_purpose/mod.rs:153:13-153:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:153:13-153:33)
      kind: assert(move _581, "index out of bounds: the length is {} but the index is {}", move _580, _579) -> [success: bb165, unwind: bb195]
  }
  preds [bb163]
  succs [bb165, bb195]

bb165
  0: (*_3)[_579] = move _568
    SourceInfo(src/engine/general_purpose/mod.rs:153:13-153:90)
  1: StorageDead(_568)
    SourceInfo(src/engine/general_purpose/mod.rs:153:89-153:90)
  2: StorageDead(_579)
    SourceInfo(src/engine/general_purpose/mod.rs:153:90-153:91)
  3: StorageDead(_572)
    SourceInfo(src/engine/general_purpose/mod.rs:153:90-153:91)
  4: StorageDead(_569)
    SourceInfo(src/engine/general_purpose/mod.rs:153:90-153:91)
  5: StorageLive(_582)
    SourceInfo(src/engine/general_purpose/mod.rs:155:17-156:49)
  6: StorageLive(_583)
    SourceInfo(src/engine/general_purpose/mod.rs:155:35-156:48)
  7: StorageLive(_584)
    SourceInfo(src/engine/general_purpose/mod.rs:155:35-156:39)
  8: StorageLive(_585)
    SourceInfo(src/engine/general_purpose/mod.rs:155:36-155:93)
  9: StorageLive(_586)
    SourceInfo(src/engine/general_purpose/mod.rs:155:37-155:61)
  10: StorageLive(_587)
    SourceInfo(src/engine/general_purpose/mod.rs:155:37-155:56)
  11: StorageLive(_588)
    SourceInfo(src/engine/general_purpose/mod.rs:155:43-155:55)
  12: _588 = _463
    SourceInfo(src/engine/general_purpose/mod.rs:155:43-155:55)
  13: _589 = Len((*_2))
    SourceInfo(src/engine/general_purpose/mod.rs:155:37-155:56)
  14: _590 = Lt(_588, _589)
    SourceInfo(src/engine/general_purpose/mod.rs:155:37-155:56)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:155:37-155:56)
      kind: assert(move _590, "index out of bounds: the length is {} but the index is {}", move _589, _588) -> [success: bb166, unwind: bb195]
  }
  preds [bb164]
  succs [bb166, bb195]

bb166
  0: _587 = (*_2)[_588]
    SourceInfo(src/engine/general_purpose/mod.rs:155:37-155:56)
  1: _591 = const 4_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:155:37-155:61)
  2: _592 = Lt(move _591, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:155:37-155:61)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:155:37-155:61)
      kind: assert(move _592, "attempt to shift left by `{}`, which would overflow", const 4_i32) -> [success: bb167, unwind: bb195]
  }
  preds [bb165]
  succs [bb167, bb195]

bb167
  0: _586 = Shl(move _587, const 4_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:155:37-155:61)
  1: StorageDead(_587)
    SourceInfo(src/engine/general_purpose/mod.rs:155:60-155:61)
  2: StorageLive(_593)
    SourceInfo(src/engine/general_purpose/mod.rs:155:64-155:92)
  3: StorageLive(_594)
    SourceInfo(src/engine/general_purpose/mod.rs:155:64-155:87)
  4: StorageLive(_595)
    SourceInfo(src/engine/general_purpose/mod.rs:155:70-155:86)
  5: StorageLive(_596)
    SourceInfo(src/engine/general_purpose/mod.rs:155:70-155:82)
  6: _596 = _463
    SourceInfo(src/engine/general_purpose/mod.rs:155:70-155:82)
  7: _597 = AddWithOverflow(_596, const 1_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:155:70-155:86)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:155:70-155:86)
      kind: assert(!move (_597.1: bool), "attempt to compute `{} + {}`, which would overflow", move _596, const 1_usize) -> [success: bb168, unwind: bb195]
  }
  preds [bb166]
  succs [bb168, bb195]

bb168
  0: _595 = move (_597.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:155:70-155:86)
  1: StorageDead(_596)
    SourceInfo(src/engine/general_purpose/mod.rs:155:85-155:86)
  2: _598 = Len((*_2))
    SourceInfo(src/engine/general_purpose/mod.rs:155:64-155:87)
  3: _599 = Lt(_595, _598)
    SourceInfo(src/engine/general_purpose/mod.rs:155:64-155:87)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:155:64-155:87)
      kind: assert(move _599, "index out of bounds: the length is {} but the index is {}", move _598, _595) -> [success: bb169, unwind: bb195]
  }
  preds [bb167]
  succs [bb169, bb195]

bb169
  0: _594 = (*_2)[_595]
    SourceInfo(src/engine/general_purpose/mod.rs:155:64-155:87)
  1: _600 = const 4_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:155:64-155:92)
  2: _601 = Lt(move _600, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:155:64-155:92)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:155:64-155:92)
      kind: assert(move _601, "attempt to shift right by `{}`, which would overflow", const 4_i32) -> [success: bb170, unwind: bb195]
  }
  preds [bb168]
  succs [bb170, bb195]

bb170
  0: _593 = Shr(move _594, const 4_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:155:64-155:92)
  1: StorageDead(_594)
    SourceInfo(src/engine/general_purpose/mod.rs:155:91-155:92)
  2: _585 = BitOr(move _586, move _593)
    SourceInfo(src/engine/general_purpose/mod.rs:155:36-155:93)
  3: StorageDead(_593)
    SourceInfo(src/engine/general_purpose/mod.rs:155:92-155:93)
  4: StorageDead(_586)
    SourceInfo(src/engine/general_purpose/mod.rs:155:92-155:93)
  5: _584 = BitAnd(move _585, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8)
    SourceInfo(src/engine/general_purpose/mod.rs:155:35-156:39)
  6: StorageDead(_585)
    SourceInfo(src/engine/general_purpose/mod.rs:156:38-156:39)
  7: _583 = move _584 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:155:35-156:48)
  8: StorageDead(_584)
    SourceInfo(src/engine/general_purpose/mod.rs:156:47-156:48)
  9: _602 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:155:17-156:49)
  10: _603 = Lt(_583, _602)
    SourceInfo(src/engine/general_purpose/mod.rs:155:17-156:49)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:155:17-156:49)
      kind: assert(move _603, "index out of bounds: the length is {} but the index is {}", move _602, _583) -> [success: bb171, unwind: bb195]
  }
  preds [bb169]
  succs [bb171, bb195]

bb171
  0: _582 = ((*_1).0: [u8; 64])[_583]
    SourceInfo(src/engine/general_purpose/mod.rs:155:17-156:49)
  1: StorageLive(_604)
    SourceInfo(src/engine/general_purpose/mod.rs:154:20-154:36)
  2: StorageLive(_605)
    SourceInfo(src/engine/general_purpose/mod.rs:154:20-154:32)
  3: _605 = _12
    SourceInfo(src/engine/general_purpose/mod.rs:154:20-154:32)
  4: _606 = AddWithOverflow(_605, const 1_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:154:20-154:36)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:154:20-154:36)
      kind: assert(!move (_606.1: bool), "attempt to compute `{} + {}`, which would overflow", move _605, const 1_usize) -> [success: bb172, unwind: bb195]
  }
  preds [bb170]
  succs [bb172, bb195]

bb172
  0: _604 = move (_606.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:154:20-154:36)
  1: StorageDead(_605)
    SourceInfo(src/engine/general_purpose/mod.rs:154:35-154:36)
  2: _607 = Len((*_3))
    SourceInfo(src/engine/general_purpose/mod.rs:154:13-154:37)
  3: _608 = Lt(_604, _607)
    SourceInfo(src/engine/general_purpose/mod.rs:154:13-154:37)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:154:13-154:37)
      kind: assert(move _608, "index out of bounds: the length is {} but the index is {}", move _607, _604) -> [success: bb173, unwind: bb195]
  }
  preds [bb171]
  succs [bb173, bb195]

bb173
  0: (*_3)[_604] = move _582
    SourceInfo(src/engine/general_purpose/mod.rs:154:13-156:49)
  1: StorageDead(_582)
    SourceInfo(src/engine/general_purpose/mod.rs:156:48-156:49)
  2: StorageDead(_604)
    SourceInfo(src/engine/general_purpose/mod.rs:156:49-156:50)
  3: StorageDead(_595)
    SourceInfo(src/engine/general_purpose/mod.rs:156:49-156:50)
  4: StorageDead(_588)
    SourceInfo(src/engine/general_purpose/mod.rs:156:49-156:50)
  5: StorageDead(_583)
    SourceInfo(src/engine/general_purpose/mod.rs:156:49-156:50)
  6: StorageLive(_609)
    SourceInfo(src/engine/general_purpose/mod.rs:158:17-158:95)
  7: StorageLive(_610)
    SourceInfo(src/engine/general_purpose/mod.rs:158:35-158:94)
  8: StorageLive(_611)
    SourceInfo(src/engine/general_purpose/mod.rs:158:35-158:85)
  9: StorageLive(_612)
    SourceInfo(src/engine/general_purpose/mod.rs:158:36-158:66)
  10: StorageLive(_613)
    SourceInfo(src/engine/general_purpose/mod.rs:158:37-158:60)
  11: StorageLive(_614)
    SourceInfo(src/engine/general_purpose/mod.rs:158:43-158:59)
  12: StorageLive(_615)
    SourceInfo(src/engine/general_purpose/mod.rs:158:43-158:55)
  13: _615 = _463
    SourceInfo(src/engine/general_purpose/mod.rs:158:43-158:55)
  14: _616 = AddWithOverflow(_615, const 1_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:158:43-158:59)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:158:43-158:59)
      kind: assert(!move (_616.1: bool), "attempt to compute `{} + {}`, which would overflow", move _615, const 1_usize) -> [success: bb174, unwind: bb195]
  }
  preds [bb172]
  succs [bb174, bb195]

bb174
  0: _614 = move (_616.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:158:43-158:59)
  1: StorageDead(_615)
    SourceInfo(src/engine/general_purpose/mod.rs:158:58-158:59)
  2: _617 = Len((*_2))
    SourceInfo(src/engine/general_purpose/mod.rs:158:37-158:60)
  3: _618 = Lt(_614, _617)
    SourceInfo(src/engine/general_purpose/mod.rs:158:37-158:60)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:158:37-158:60)
      kind: assert(move _618, "index out of bounds: the length is {} but the index is {}", move _617, _614) -> [success: bb175, unwind: bb195]
  }
  preds [bb173]
  succs [bb175, bb195]

bb175
  0: _613 = (*_2)[_614]
    SourceInfo(src/engine/general_purpose/mod.rs:158:37-158:60)
  1: _619 = const 2_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:158:36-158:66)
  2: _620 = Lt(move _619, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:158:36-158:66)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:158:36-158:66)
      kind: assert(move _620, "attempt to shift left by `{}`, which would overflow", const 2_i32) -> [success: bb176, unwind: bb195]
  }
  preds [bb174]
  succs [bb176, bb195]

bb176
  0: _612 = Shl(move _613, const 2_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:158:36-158:66)
  1: StorageDead(_613)
    SourceInfo(src/engine/general_purpose/mod.rs:158:65-158:66)
  2: _611 = BitAnd(move _612, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8)
    SourceInfo(src/engine/general_purpose/mod.rs:158:35-158:85)
  3: StorageDead(_612)
    SourceInfo(src/engine/general_purpose/mod.rs:158:84-158:85)
  4: _610 = move _611 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:158:35-158:94)
  5: StorageDead(_611)
    SourceInfo(src/engine/general_purpose/mod.rs:158:93-158:94)
  6: _621 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:158:17-158:95)
  7: _622 = Lt(_610, _621)
    SourceInfo(src/engine/general_purpose/mod.rs:158:17-158:95)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:158:17-158:95)
      kind: assert(move _622, "index out of bounds: the length is {} but the index is {}", move _621, _610) -> [success: bb177, unwind: bb195]
  }
  preds [bb175]
  succs [bb177, bb195]

bb177
  0: _609 = ((*_1).0: [u8; 64])[_610]
    SourceInfo(src/engine/general_purpose/mod.rs:158:17-158:95)
  1: StorageLive(_623)
    SourceInfo(src/engine/general_purpose/mod.rs:157:20-157:36)
  2: StorageLive(_624)
    SourceInfo(src/engine/general_purpose/mod.rs:157:20-157:32)
  3: _624 = _12
    SourceInfo(src/engine/general_purpose/mod.rs:157:20-157:32)
  4: _625 = AddWithOverflow(_624, const 2_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:157:20-157:36)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:157:20-157:36)
      kind: assert(!move (_625.1: bool), "attempt to compute `{} + {}`, which would overflow", move _624, const 2_usize) -> [success: bb178, unwind: bb195]
  }
  preds [bb176]
  succs [bb178, bb195]

bb178
  0: _623 = move (_625.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:157:20-157:36)
  1: StorageDead(_624)
    SourceInfo(src/engine/general_purpose/mod.rs:157:35-157:36)
  2: _626 = Len((*_3))
    SourceInfo(src/engine/general_purpose/mod.rs:157:13-157:37)
  3: _627 = Lt(_623, _626)
    SourceInfo(src/engine/general_purpose/mod.rs:157:13-157:37)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:157:13-157:37)
      kind: assert(move _627, "index out of bounds: the length is {} but the index is {}", move _626, _623) -> [success: bb179, unwind: bb195]
  }
  preds [bb177]
  succs [bb179, bb195]

bb179
  0: (*_3)[_623] = move _609
    SourceInfo(src/engine/general_purpose/mod.rs:157:13-158:95)
  1: StorageDead(_609)
    SourceInfo(src/engine/general_purpose/mod.rs:158:94-158:95)
  2: StorageDead(_623)
    SourceInfo(src/engine/general_purpose/mod.rs:158:95-158:96)
  3: StorageDead(_614)
    SourceInfo(src/engine/general_purpose/mod.rs:158:95-158:96)
  4: StorageDead(_610)
    SourceInfo(src/engine/general_purpose/mod.rs:158:95-158:96)
  5: _628 = AddWithOverflow(_12, const 3_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:159:13-159:30)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:159:13-159:30)
      kind: assert(!move (_628.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 3_usize) -> [success: bb180, unwind: bb195]
  }
  preds [bb178]
  succs [bb180, bb195]

bb180
  0: _12 = move (_628.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:159:13-159:30)
  1: _565 = const ()
    SourceInfo(src/engine/general_purpose/mod.rs:152:21-160:10)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:152:9-165:10)
      kind: goto -> bb194
  }
  preds [bb179]
  succs [bb194]

bb181
  0: StorageDead(_630)
    SourceInfo(src/engine/general_purpose/mod.rs:160:26-160:27)
  1: StorageLive(_631)
    SourceInfo(src/engine/general_purpose/mod.rs:161:36-161:90)
  2: StorageLive(_632)
    SourceInfo(src/engine/general_purpose/mod.rs:161:54-161:89)
  3: StorageLive(_633)
    SourceInfo(src/engine/general_purpose/mod.rs:161:54-161:80)
  4: StorageLive(_634)
    SourceInfo(src/engine/general_purpose/mod.rs:161:55-161:74)
  5: StorageLive(_635)
    SourceInfo(src/engine/general_purpose/mod.rs:161:61-161:73)
  6: _635 = _463
    SourceInfo(src/engine/general_purpose/mod.rs:161:61-161:73)
  7: _636 = Len((*_2))
    SourceInfo(src/engine/general_purpose/mod.rs:161:55-161:74)
  8: _637 = Lt(_635, _636)
    SourceInfo(src/engine/general_purpose/mod.rs:161:55-161:74)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:161:55-161:74)
      kind: assert(move _637, "index out of bounds: the length is {} but the index is {}", move _636, _635) -> [success: bb183, unwind: bb195]
  }
  preds [bb161]
  succs [bb183, bb195]

bb182
  0: StorageDead(_630)
    SourceInfo(src/engine/general_purpose/mod.rs:160:26-160:27)
  1: _565 = const ()
    SourceInfo(src/engine/general_purpose/mod.rs:165:10-165:10)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:160:16-165:10)
      kind: goto -> bb193
  }
  preds [bb161]
  succs [bb193]

bb183
  0: _634 = (*_2)[_635]
    SourceInfo(src/engine/general_purpose/mod.rs:161:55-161:74)
  1: _638 = const 2_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:161:54-161:80)
  2: _639 = Lt(move _638, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:161:54-161:80)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:161:54-161:80)
      kind: assert(move _639, "attempt to shift right by `{}`, which would overflow", const 2_i32) -> [success: bb184, unwind: bb195]
  }
  preds [bb181]
  succs [bb184, bb195]

bb184
  0: _633 = Shr(move _634, const 2_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:161:54-161:80)
  1: StorageDead(_634)
    SourceInfo(src/engine/general_purpose/mod.rs:161:79-161:80)
  2: _632 = move _633 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:161:54-161:89)
  3: StorageDead(_633)
    SourceInfo(src/engine/general_purpose/mod.rs:161:88-161:89)
  4: _640 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:161:36-161:90)
  5: _641 = Lt(_632, _640)
    SourceInfo(src/engine/general_purpose/mod.rs:161:36-161:90)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:161:36-161:90)
      kind: assert(move _641, "index out of bounds: the length is {} but the index is {}", move _640, _632) -> [success: bb185, unwind: bb195]
  }
  preds [bb183]
  succs [bb185, bb195]

bb185
  0: _631 = ((*_1).0: [u8; 64])[_632]
    SourceInfo(src/engine/general_purpose/mod.rs:161:36-161:90)
  1: StorageLive(_642)
    SourceInfo(src/engine/general_purpose/mod.rs:161:20-161:32)
  2: _642 = _12
    SourceInfo(src/engine/general_purpose/mod.rs:161:20-161:32)
  3: _643 = Len((*_3))
    SourceInfo(src/engine/general_purpose/mod.rs:161:13-161:33)
  4: _644 = Lt(_642, _643)
    SourceInfo(src/engine/general_purpose/mod.rs:161:13-161:33)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:161:13-161:33)
      kind: assert(move _644, "index out of bounds: the length is {} but the index is {}", move _643, _642) -> [success: bb186, unwind: bb195]
  }
  preds [bb184]
  succs [bb186, bb195]

bb186
  0: (*_3)[_642] = move _631
    SourceInfo(src/engine/general_purpose/mod.rs:161:13-161:90)
  1: StorageDead(_631)
    SourceInfo(src/engine/general_purpose/mod.rs:161:89-161:90)
  2: StorageDead(_642)
    SourceInfo(src/engine/general_purpose/mod.rs:161:90-161:91)
  3: StorageDead(_635)
    SourceInfo(src/engine/general_purpose/mod.rs:161:90-161:91)
  4: StorageDead(_632)
    SourceInfo(src/engine/general_purpose/mod.rs:161:90-161:91)
  5: StorageLive(_645)
    SourceInfo(src/engine/general_purpose/mod.rs:163:17-163:91)
  6: StorageLive(_646)
    SourceInfo(src/engine/general_purpose/mod.rs:163:35-163:90)
  7: StorageLive(_647)
    SourceInfo(src/engine/general_purpose/mod.rs:163:35-163:81)
  8: StorageLive(_648)
    SourceInfo(src/engine/general_purpose/mod.rs:163:36-163:62)
  9: StorageLive(_649)
    SourceInfo(src/engine/general_purpose/mod.rs:163:37-163:56)
  10: StorageLive(_650)
    SourceInfo(src/engine/general_purpose/mod.rs:163:43-163:55)
  11: _650 = _463
    SourceInfo(src/engine/general_purpose/mod.rs:163:43-163:55)
  12: _651 = Len((*_2))
    SourceInfo(src/engine/general_purpose/mod.rs:163:37-163:56)
  13: _652 = Lt(_650, _651)
    SourceInfo(src/engine/general_purpose/mod.rs:163:37-163:56)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:163:37-163:56)
      kind: assert(move _652, "index out of bounds: the length is {} but the index is {}", move _651, _650) -> [success: bb187, unwind: bb195]
  }
  preds [bb185]
  succs [bb187, bb195]

bb187
  0: _649 = (*_2)[_650]
    SourceInfo(src/engine/general_purpose/mod.rs:163:37-163:56)
  1: _653 = const 4_i32 as u32 (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:163:36-163:62)
  2: _654 = Lt(move _653, const 8_u32)
    SourceInfo(src/engine/general_purpose/mod.rs:163:36-163:62)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:163:36-163:62)
      kind: assert(move _654, "attempt to shift left by `{}`, which would overflow", const 4_i32) -> [success: bb188, unwind: bb195]
  }
  preds [bb186]
  succs [bb188, bb195]

bb188
  0: _648 = Shl(move _649, const 4_i32)
    SourceInfo(src/engine/general_purpose/mod.rs:163:36-163:62)
  1: StorageDead(_649)
    SourceInfo(src/engine/general_purpose/mod.rs:163:61-163:62)
  2: _647 = BitAnd(move _648, const <engine::general_purpose::GeneralPurpose as engine::Engine>::internal_encode::LOW_SIX_BITS_U8)
    SourceInfo(src/engine/general_purpose/mod.rs:163:35-163:81)
  3: StorageDead(_648)
    SourceInfo(src/engine/general_purpose/mod.rs:163:80-163:81)
  4: _646 = move _647 as usize (IntToInt)
    SourceInfo(src/engine/general_purpose/mod.rs:163:35-163:90)
  5: StorageDead(_647)
    SourceInfo(src/engine/general_purpose/mod.rs:163:89-163:90)
  6: _655 = Len(((*_1).0: [u8; 64]))
    SourceInfo(src/engine/general_purpose/mod.rs:163:17-163:91)
  7: _656 = Lt(_646, _655)
    SourceInfo(src/engine/general_purpose/mod.rs:163:17-163:91)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:163:17-163:91)
      kind: assert(move _656, "index out of bounds: the length is {} but the index is {}", move _655, _646) -> [success: bb189, unwind: bb195]
  }
  preds [bb187]
  succs [bb189, bb195]

bb189
  0: _645 = ((*_1).0: [u8; 64])[_646]
    SourceInfo(src/engine/general_purpose/mod.rs:163:17-163:91)
  1: StorageLive(_657)
    SourceInfo(src/engine/general_purpose/mod.rs:162:20-162:36)
  2: StorageLive(_658)
    SourceInfo(src/engine/general_purpose/mod.rs:162:20-162:32)
  3: _658 = _12
    SourceInfo(src/engine/general_purpose/mod.rs:162:20-162:32)
  4: _659 = AddWithOverflow(_658, const 1_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:162:20-162:36)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:162:20-162:36)
      kind: assert(!move (_659.1: bool), "attempt to compute `{} + {}`, which would overflow", move _658, const 1_usize) -> [success: bb190, unwind: bb195]
  }
  preds [bb188]
  succs [bb190, bb195]

bb190
  0: _657 = move (_659.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:162:20-162:36)
  1: StorageDead(_658)
    SourceInfo(src/engine/general_purpose/mod.rs:162:35-162:36)
  2: _660 = Len((*_3))
    SourceInfo(src/engine/general_purpose/mod.rs:162:13-162:37)
  3: _661 = Lt(_657, _660)
    SourceInfo(src/engine/general_purpose/mod.rs:162:13-162:37)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:162:13-162:37)
      kind: assert(move _661, "index out of bounds: the length is {} but the index is {}", move _660, _657) -> [success: bb191, unwind: bb195]
  }
  preds [bb189]
  succs [bb191, bb195]

bb191
  0: (*_3)[_657] = move _645
    SourceInfo(src/engine/general_purpose/mod.rs:162:13-163:91)
  1: StorageDead(_645)
    SourceInfo(src/engine/general_purpose/mod.rs:163:90-163:91)
  2: StorageDead(_657)
    SourceInfo(src/engine/general_purpose/mod.rs:163:91-163:92)
  3: StorageDead(_650)
    SourceInfo(src/engine/general_purpose/mod.rs:163:91-163:92)
  4: StorageDead(_646)
    SourceInfo(src/engine/general_purpose/mod.rs:163:91-163:92)
  5: _662 = AddWithOverflow(_12, const 2_usize)
    SourceInfo(src/engine/general_purpose/mod.rs:164:13-164:30)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:164:13-164:30)
      kind: assert(!move (_662.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const 2_usize) -> [success: bb192, unwind: bb195]
  }
  preds [bb190]
  succs [bb192, bb195]

bb192
  0: _12 = move (_662.0: usize)
    SourceInfo(src/engine/general_purpose/mod.rs:164:13-164:30)
  1: _565 = const ()
    SourceInfo(src/engine/general_purpose/mod.rs:160:28-165:10)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:160:16-165:10)
      kind: goto -> bb193
  }
  preds [bb191]
  succs [bb193]

bb193
  0: StorageDead(_629)
    SourceInfo(src/engine/general_purpose/mod.rs:165:9-165:10)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:152:9-165:10)
      kind: goto -> bb194
  }
  preds [bb182, bb192]
  succs [bb194]

bb194
  0: StorageDead(_566)
    SourceInfo(src/engine/general_purpose/mod.rs:165:9-165:10)
  1: StorageDead(_565)
    SourceInfo(src/engine/general_purpose/mod.rs:165:9-165:10)
  2: _0 = _12
    SourceInfo(src/engine/general_purpose/mod.rs:167:9-167:21)
  3: StorageDead(_463)
    SourceInfo(src/engine/general_purpose/mod.rs:168:5-168:6)
  4: StorageDead(_459)
    SourceInfo(src/engine/general_purpose/mod.rs:168:5-168:6)
  5: StorageDead(_12)
    SourceInfo(src/engine/general_purpose/mod.rs:168:5-168:6)
  6: StorageDead(_5)
    SourceInfo(src/engine/general_purpose/mod.rs:168:5-168:6)
  7: StorageDead(_4)
    SourceInfo(src/engine/general_purpose/mod.rs:168:5-168:6)
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:168:6-168:6)
      kind: return
  }
  preds [bb180, bb193]
  succs []

bb195
  Terminator {
      source_info: SourceInfo(src/engine/general_purpose/mod.rs:51:5-168:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb6, bb8, bb9, bb10, bb11, bb12, bb13, bb14, bb15, bb16, bb17, bb18, bb19, bb20, bb21, bb22, bb23, bb24, bb25, bb26, bb27, bb28, bb29, bb30, bb31, bb32, bb33, bb34, bb35, bb36, bb37, bb38, bb39, bb40, bb41, bb42, bb43, bb44, bb45, bb46, bb47, bb48, bb49, bb50, bb51, bb52, bb53, bb54, bb55, bb56, bb57, bb58, bb59, bb60, bb61, bb62, bb63, bb64, bb65, bb66, bb67, bb68, bb69, bb70, bb71, bb72, bb73, bb74, bb75, bb76, bb77, bb78, bb79, bb80, bb81, bb82, bb83, bb84, bb85, bb86, bb87, bb88, bb89, bb90, bb91, bb92, bb93, bb94, bb95, bb96, bb97, bb98, bb99, bb100, bb101, bb102, bb103, bb104, bb105, bb106, bb107, bb108, bb109, bb110, bb111, bb112, bb113, bb114, bb115, bb116, bb117, bb118, bb119, bb120, bb121, bb122, bb126, bb127, bb128, bb129, bb131, bb133, bb134, bb135, bb136, bb137, bb138, bb139, bb140, bb141, bb142, bb143, bb144, bb145, bb146, bb147, bb148, bb149, bb150, bb151, bb152, bb153, bb154, bb155, bb156, bb157, bb160, bb162, bb163, bb164, bb165, bb166, bb167, bb168, bb169, bb170, bb171, bb172, bb173, bb174, bb175, bb176, bb177, bb178, bb179, bb181, bb183, bb184, bb185, bb186, bb187, bb188, bb189, bb190, bb191]
  succs []

