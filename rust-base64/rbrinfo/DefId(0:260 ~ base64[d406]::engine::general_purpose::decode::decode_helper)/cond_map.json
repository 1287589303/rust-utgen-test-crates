{
  "src/engine/general_purpose/decode.rs:92:36:92:80": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_complete_nonterminal_quads_len / 4 * 3",
          "lhs": "input_complete_nonterminal_quads_len / 4",
          "rhs": "3",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:78:13:78:29": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_index + 16",
          "lhs": "input_index",
          "rhs": "16",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:70:9:75:11": [
    {
      "Try": "decode_chunk_8(\n            &chunk[8..16],\n            input_index + 8,\n            decode_table,\n            &mut chunk_output[6..12],\n        )?"
    }
  ],
  "src/engine/general_purpose/decode.rs:84:13:84:29": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_index + 24",
          "lhs": "input_index",
          "rhs": "24",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:82:9:87:11": [
    {
      "Try": "decode_chunk_8(\n            &chunk[24..32],\n            input_index + 24,\n            decode_table,\n            &mut chunk_output[18..24],\n        )?"
    }
  ],
  "src/engine/general_purpose/decode.rs:103:13:108:15": [
    {
      "Try": "decode_chunk_4(\n                chunk,\n                input_unrolled_loop_len + chunk_index * 4,\n                decode_table,\n                chunk_output,\n            )?"
    }
  ],
  "src/engine/general_purpose/decode.rs:60:27:60:66": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chunk_index * UNROLLED_INPUT_CHUNK_SIZE",
          "lhs": "chunk_index",
          "rhs": "UNROLLED_INPUT_CHUNK_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:91:36:91:63": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_unrolled_loop_len / 4",
          "lhs": "input_unrolled_loop_len",
          "rhs": "4",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:64:9:69:11": [
    {
      "Try": "decode_chunk_8(\n            &chunk[0..8],\n            input_index,\n            decode_table,\n            &mut chunk_output[0..6],\n        )?"
    }
  ],
  "src/engine/general_purpose/decode.rs:56:33:58:21": [
    {
      "For": {
        "iter_var": "(chunk_index, chunk)",
        "iter_range": "input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()"
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:101:74:101:89": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chunk_index * 3",
          "lhs": "chunk_index",
          "rhs": "3",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:91:36:91:67": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_unrolled_loop_len / 4 * 3",
          "lhs": "input_unrolled_loop_len / 4",
          "rhs": "3",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:92:36:92:76": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_complete_nonterminal_quads_len / 4",
          "lhs": "input_complete_nonterminal_quads_len",
          "rhs": "4",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:101:74:101:93": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chunk_index * 3 + 3",
          "lhs": "chunk_index * 3",
          "rhs": "3",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:44:9:44:77": [
    {
      "Try": "complete_quads_len(input, estimate.rem, output.len(), decode_table)?"
    }
  ],
  "src/engine/general_purpose/decode.rs:101:57:101:72": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chunk_index * 3",
          "lhs": "chunk_index",
          "rhs": "3",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:53:9:53:94": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_complete_nonterminal_quads_len - input_complete_quads_after_unrolled_chunks_len",
          "lhs": "input_complete_nonterminal_quads_len",
          "rhs": "input_complete_quads_after_unrolled_chunks_len",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:50:9:50:73": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_complete_nonterminal_quads_len % UNROLLED_INPUT_CHUNK_SIZE",
          "lhs": "input_complete_nonterminal_quads_len",
          "rhs": "UNROLLED_INPUT_CHUNK_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:76:9:81:11": [
    {
      "Try": "decode_chunk_8(\n            &chunk[16..24],\n            input_index + 16,\n            decode_table,\n            &mut chunk_output[12..18],\n        )?"
    }
  ],
  "src/engine/general_purpose/decode.rs:62:15:62:61": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(chunk_index + 1) * UNROLLED_OUTPUT_CHUNK_SIZE",
          "lhs": "(chunk_index + 1)",
          "rhs": "UNROLLED_OUTPUT_CHUNK_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:105:43:105:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chunk_index * 4",
          "lhs": "chunk_index",
          "rhs": "4",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:96:37:99:25": [
    {
      "For": {
        "iter_var": "(chunk_index, chunk)",
        "iter_range": "input\n            [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()"
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:62:15:62:32": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "(chunk_index + 1)",
          "lhs": "chunk_index",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:105:17:105:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_unrolled_loop_len + chunk_index * 4",
          "lhs": "input_unrolled_loop_len",
          "rhs": "chunk_index * 4",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:61:40:61:80": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "chunk_index * UNROLLED_OUTPUT_CHUNK_SIZE",
          "lhs": "chunk_index",
          "rhs": "UNROLLED_OUTPUT_CHUNK_SIZE",
          "cmp_with_int": false
        }
      }
    }
  ],
  "src/engine/general_purpose/decode.rs:72:13:72:28": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "input_index + 8",
          "lhs": "input_index",
          "rhs": "8",
          "cmp_with_int": true
        }
      }
    }
  ]
}