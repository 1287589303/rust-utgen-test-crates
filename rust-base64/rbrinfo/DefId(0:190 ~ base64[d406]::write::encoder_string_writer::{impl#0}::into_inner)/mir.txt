bb0
  0: StorageLive(_2)
    SourceInfo(src/write/encoder_string_writer.rs:68:9-70:63)
  1: StorageLive(_3)
    SourceInfo(src/write/encoder_string_writer.rs:68:9-69:22)
  2: StorageLive(_4)
    SourceInfo(src/write/encoder_string_writer.rs:68:9-68:21)
  3: _4 = &mut (_1.0: write::encoder::EncoderWriter<'_, E, write::encoder_string_writer::Utf8SingleCodeUnitWriter<S>>)
    SourceInfo(src/write/encoder_string_writer.rs:68:9-68:21)
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:68:9-69:22)
      kind: _3 = write::encoder::EncoderWriter::<'_, E, write::encoder_string_writer::Utf8SingleCodeUnitWriter<S>>::finish(move _4) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_4)
    SourceInfo(src/write/encoder_string_writer.rs:69:21-69:22)
  1: StorageLive(_5)
    SourceInfo(src/write/encoder_string_writer.rs:70:21-70:62)
  2: StorageLive(_6)
    SourceInfo(src/write/encoder_string_writer.rs:70:21-70:62)
  3: _6 = const "Writing to a consumer should never fail"
    SourceInfo(src/write/encoder_string_writer.rs:70:21-70:62)
  4: _5 = &(*_6)
    SourceInfo(src/write/encoder_string_writer.rs:70:21-70:62)
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:68:9-70:63)
      kind: _2 = std::result::Result::<write::encoder_string_writer::Utf8SingleCodeUnitWriter<S>, std::io::Error>::expect(move _3, move _5) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_5)
    SourceInfo(src/write/encoder_string_writer.rs:70:62-70:63)
  1: StorageDead(_3)
    SourceInfo(src/write/encoder_string_writer.rs:70:62-70:63)
  2: _0 = move (_2.0: S)
    SourceInfo(src/write/encoder_string_writer.rs:68:9-71:26)
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:72:5-72:6)
      kind: drop(_2) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_6)
    SourceInfo(src/write/encoder_string_writer.rs:72:5-72:6)
  1: StorageDead(_2)
    SourceInfo(src/write/encoder_string_writer.rs:72:5-72:6)
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:72:5-72:6)
      kind: drop(_1) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:72:6-72:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:70:62-70:63)
      kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:72:5-72:6)
      kind: drop(_1) -> [return: bb7, unwind terminate(cleanup)]
  }
  preds [bb0, bb2, bb5]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:67:5-72:6)
      kind: resume
  }
  preds [bb3, bb6]
  succs []

