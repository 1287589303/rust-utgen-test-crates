bb0
  0: StorageLive(_4)
    SourceInfo(src/encode.rs:43:5-43:44)
  1: StorageLive(_5)
    SourceInfo(src/encode.rs:43:5-43:11)
  2: _5 = &(*_3)
    SourceInfo(src/encode.rs:43:5-43:11)
  3: StorageLive(_6)
    SourceInfo(src/encode.rs:43:26-43:31)
  4: _6 = move _1
    SourceInfo(src/encode.rs:43:26-43:31)
  5: StorageLive(_7)
    SourceInfo(src/encode.rs:43:33-43:43)
  6: _7 = &mut (*_2)
    SourceInfo(src/encode.rs:43:33-43:43)
  Terminator {
      source_info: SourceInfo(src/encode.rs:43:5-43:44)
      kind: _4 = <E as engine::Engine>::encode_string::<T>(move _5, move _6, move _7) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_7)
    SourceInfo(src/encode.rs:43:43-43:44)
  1: StorageDead(_6)
    SourceInfo(src/encode.rs:43:43-43:44)
  2: StorageDead(_5)
    SourceInfo(src/encode.rs:43:43-43:44)
  3: StorageDead(_4)
    SourceInfo(src/encode.rs:43:44-43:45)
  4: _0 = const ()
    SourceInfo(src/encode.rs:42:3-44:2)
  Terminator {
      source_info: SourceInfo(src/encode.rs:44:1-44:2)
      kind: drop(_1) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  Terminator {
      source_info: SourceInfo(src/encode.rs:44:2-44:2)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/encode.rs:43:43-43:44)
      kind: drop(_6) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(src/encode.rs:44:1-44:2)
      kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(src/encode.rs:38:1-44:2)
      kind: resume
  }
  preds [bb1, bb4]
  succs []

