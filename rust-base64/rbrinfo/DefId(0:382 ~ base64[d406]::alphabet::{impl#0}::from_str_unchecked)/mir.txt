bb0
  0: StorageLive(_2)
    SourceInfo(src/alphabet.rs:63:13-63:24)
  1: _2 = [const 0_u8; 64]
    SourceInfo(src/alphabet.rs:63:27-63:48)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(src/alphabet.rs:63:13-63:24)
  3: StorageLive(_3)
    SourceInfo(src/alphabet.rs:64:13-64:25)
  4: StorageLive(_4)
    SourceInfo(src/alphabet.rs:64:28-64:36)
  5: _4 = &(*_1)
    SourceInfo(src/alphabet.rs:64:28-64:36)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:64:28-64:47)
      kind: _3 = core::str::<impl str>::as_bytes(move _4) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: StorageDead(_4)
    SourceInfo(src/alphabet.rs:64:46-64:47)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(src/alphabet.rs:64:13-64:25)
  2: StorageLive(_5)
    SourceInfo(src/alphabet.rs:67:13-67:22)
  3: _5 = const 0_usize
    SourceInfo(src/alphabet.rs:67:25-67:26)
  4: FakeRead(ForLet(None), _5)
    SourceInfo(src/alphabet.rs:67:13-67:22)
  5: StorageLive(_6)
    SourceInfo(src/alphabet.rs:68:9-71:10)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:68:9-71:10)
      kind: goto -> bb2
  }
  preds [bb0]
  succs [bb2]

bb2
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:68:9-71:10)
      kind: falseUnwind -> [real: bb3, unwind: bb9]
  }
  preds [bb1, bb7]
  succs [bb3, bb9]

bb3
  0: StorageLive(_8)
    SourceInfo(src/alphabet.rs:68:15-68:36)
  1: StorageLive(_9)
    SourceInfo(src/alphabet.rs:68:15-68:20)
  2: _9 = _5
    SourceInfo(src/alphabet.rs:68:15-68:20)
  3: _8 = Lt(move _9, const alphabet::ALPHABET_SIZE)
    SourceInfo(src/alphabet.rs:68:15-68:36)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:68:15-68:36)
      kind: switchInt(move _8) -> [0: bb8, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_9)
    SourceInfo(src/alphabet.rs:68:35-68:36)
  1: StorageLive(_10)
    SourceInfo(src/alphabet.rs:69:30-69:49)
  2: StorageLive(_11)
    SourceInfo(src/alphabet.rs:69:43-69:48)
  3: _11 = _5
    SourceInfo(src/alphabet.rs:69:43-69:48)
  4: _12 = Len((*_3))
    SourceInfo(src/alphabet.rs:69:30-69:49)
  5: _13 = Lt(_11, _12)
    SourceInfo(src/alphabet.rs:69:30-69:49)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:69:30-69:49)
      kind: assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> [success: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: _10 = (*_3)[_11]
    SourceInfo(src/alphabet.rs:69:30-69:49)
  1: StorageLive(_14)
    SourceInfo(src/alphabet.rs:69:21-69:26)
  2: _14 = _5
    SourceInfo(src/alphabet.rs:69:21-69:26)
  3: _15 = Len(_2)
    SourceInfo(src/alphabet.rs:69:13-69:27)
  4: _16 = Lt(_14, _15)
    SourceInfo(src/alphabet.rs:69:13-69:27)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:69:13-69:27)
      kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> [success: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: _2[_14] = move _10
    SourceInfo(src/alphabet.rs:69:13-69:49)
  1: StorageDead(_10)
    SourceInfo(src/alphabet.rs:69:48-69:49)
  2: StorageDead(_14)
    SourceInfo(src/alphabet.rs:69:49-69:50)
  3: StorageDead(_11)
    SourceInfo(src/alphabet.rs:69:49-69:50)
  4: _17 = AddWithOverflow(_5, const 1_usize)
    SourceInfo(src/alphabet.rs:70:13-70:23)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:70:13-70:23)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", _5, const 1_usize) -> [success: bb7, unwind: bb9]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: _5 = move (_17.0: usize)
    SourceInfo(src/alphabet.rs:70:13-70:23)
  1: _7 = const ()
    SourceInfo(src/alphabet.rs:68:37-71:10)
  2: StorageDead(_8)
    SourceInfo(src/alphabet.rs:71:9-71:10)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:68:9-71:10)
      kind: goto -> bb2
  }
  preds [bb6]
  succs [bb2]

bb8
  0: StorageDead(_9)
    SourceInfo(src/alphabet.rs:68:35-68:36)
  1: StorageLive(_19)
    SourceInfo(src/alphabet.rs:68:9-71:10)
  2: _6 = const ()
    SourceInfo(src/alphabet.rs:68:9-71:10)
  3: StorageDead(_19)
    SourceInfo(src/alphabet.rs:71:9-71:10)
  4: StorageDead(_8)
    SourceInfo(src/alphabet.rs:71:9-71:10)
  5: StorageDead(_6)
    SourceInfo(src/alphabet.rs:71:9-71:10)
  6: StorageLive(_21)
    SourceInfo(src/alphabet.rs:73:16-73:23)
  7: _21 = _2
    SourceInfo(src/alphabet.rs:73:16-73:23)
  8: _0 = alphabet::Alphabet { symbols: move _21 }
    SourceInfo(src/alphabet.rs:73:9-73:25)
  9: StorageDead(_21)
    SourceInfo(src/alphabet.rs:73:24-73:25)
  10: StorageDead(_5)
    SourceInfo(src/alphabet.rs:74:5-74:6)
  11: StorageDead(_3)
    SourceInfo(src/alphabet.rs:74:5-74:6)
  12: StorageDead(_2)
    SourceInfo(src/alphabet.rs:74:5-74:6)
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:74:6-74:6)
      kind: return
  }
  preds [bb3]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/alphabet.rs:62:5-74:6)
      kind: resume
  }
  preds [bb0, bb2, bb4, bb5, bb6]
  succs []

