bb0
  0: StorageLive(_3)
    SourceInfo(src/display.rs:35:13-35:21)
  1: StorageLive(_4)
    SourceInfo(src/display.rs:35:43-35:52)
  2: _4 = &mut (*_2)
    SourceInfo(src/display.rs:35:43-35:52)
  3: _3 = display::FormatterSink::<'_, '_> { f: move _4 }
    SourceInfo(src/display.rs:35:24-35:54)
  4: StorageDead(_4)
    SourceInfo(src/display.rs:35:53-35:54)
  5: FakeRead(ForLet(None), _3)
    SourceInfo(src/display.rs:35:13-35:21)
  6: StorageLive(_5)
    SourceInfo(src/display.rs:36:9-36:29)
  7: _5 = &((*_1).1: chunked_encoder::ChunkedEncoder<'_, E>)
    SourceInfo(src/display.rs:36:9-36:29)
  8: StorageLive(_6)
    SourceInfo(src/display.rs:36:37-36:47)
  9: _6 = &(*((*_1).0: &[u8]))
    SourceInfo(src/display.rs:36:37-36:47)
  10: StorageLive(_7)
    SourceInfo(src/display.rs:36:49-36:58)
  11: StorageLive(_8)
    SourceInfo(src/display.rs:36:49-36:58)
  12: _8 = &mut _3
    SourceInfo(src/display.rs:36:49-36:58)
  13: _7 = &mut (*_8)
    SourceInfo(src/display.rs:36:49-36:58)
  Terminator {
      source_info: SourceInfo(src/display.rs:36:9-36:59)
      kind: _0 = chunked_encoder::ChunkedEncoder::<'_, E>::encode::<display::FormatterSink<'_, '_>>(move _5, move _6, move _7) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_7)
    SourceInfo(src/display.rs:36:58-36:59)
  1: StorageDead(_6)
    SourceInfo(src/display.rs:36:58-36:59)
  2: StorageDead(_5)
    SourceInfo(src/display.rs:36:58-36:59)
  3: StorageDead(_3)
    SourceInfo(src/display.rs:37:5-37:6)
  4: StorageDead(_8)
    SourceInfo(src/display.rs:37:5-37:6)
  Terminator {
      source_info: SourceInfo(src/display.rs:37:6-37:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/display.rs:34:5-37:6)
      kind: resume
  }
  preds [bb0]
  succs []

