bb0
  0: StorageLive(_3)
    SourceInfo(src/write/encoder_string_writer.rs:123:13-123:14)
  1: StorageLive(_4)
    SourceInfo(src/write/encoder_string_writer.rs:123:17-123:41)
  2: StorageLive(_5)
    SourceInfo(src/write/encoder_string_writer.rs:123:37-123:40)
  3: _5 = &(*_2)
    SourceInfo(src/write/encoder_string_writer.rs:123:37-123:40)
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:123:17-123:41)
      kind: _4 = std::str::from_utf8(move _5) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_5)
    SourceInfo(src/write/encoder_string_writer.rs:123:40-123:41)
  1: StorageLive(_6)
    SourceInfo(src/write/encoder_string_writer.rs:123:49-123:76)
  2: StorageLive(_7)
    SourceInfo(src/write/encoder_string_writer.rs:123:49-123:76)
  3: _7 = const "Input must be valid UTF-8"
    SourceInfo(src/write/encoder_string_writer.rs:123:49-123:76)
  4: _6 = &(*_7)
    SourceInfo(src/write/encoder_string_writer.rs:123:49-123:76)
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:123:17-123:77)
      kind: _3 = std::result::Result::<&str, std::str::Utf8Error>::expect(move _4, move _6) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_6)
    SourceInfo(src/write/encoder_string_writer.rs:123:76-123:77)
  1: StorageDead(_4)
    SourceInfo(src/write/encoder_string_writer.rs:123:76-123:77)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(src/write/encoder_string_writer.rs:123:13-123:14)
  3: StorageDead(_7)
    SourceInfo(src/write/encoder_string_writer.rs:123:77-123:78)
  4: StorageLive(_8)
    SourceInfo(src/write/encoder_string_writer.rs:125:9-125:37)
  5: StorageLive(_9)
    SourceInfo(src/write/encoder_string_writer.rs:125:9-125:26)
  6: _9 = &mut ((*_1).0: S)
    SourceInfo(src/write/encoder_string_writer.rs:125:9-125:26)
  7: StorageLive(_10)
    SourceInfo(src/write/encoder_string_writer.rs:125:35-125:36)
  8: _10 = &(*_3)
    SourceInfo(src/write/encoder_string_writer.rs:125:35-125:36)
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:125:9-125:37)
      kind: _8 = <S as write::encoder_string_writer::StrConsumer>::consume(move _9, move _10) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_10)
    SourceInfo(src/write/encoder_string_writer.rs:125:36-125:37)
  1: StorageDead(_9)
    SourceInfo(src/write/encoder_string_writer.rs:125:36-125:37)
  2: StorageDead(_8)
    SourceInfo(src/write/encoder_string_writer.rs:125:37-125:38)
  3: StorageLive(_11)
    SourceInfo(src/write/encoder_string_writer.rs:127:12-127:21)
  4: StorageLive(_12)
    SourceInfo(src/write/encoder_string_writer.rs:127:12-127:15)
  5: _12 = &(*_2)
    SourceInfo(src/write/encoder_string_writer.rs:127:12-127:15)
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:127:12-127:21)
      kind: _11 = core::slice::<impl [u8]>::len(move _12) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_12)
    SourceInfo(src/write/encoder_string_writer.rs:127:20-127:21)
  1: _0 = std::result::Result::<usize, std::io::Error>::Ok(move _11)
    SourceInfo(src/write/encoder_string_writer.rs:127:9-127:22)
  2: StorageDead(_11)
    SourceInfo(src/write/encoder_string_writer.rs:127:21-127:22)
  3: StorageDead(_3)
    SourceInfo(src/write/encoder_string_writer.rs:128:5-128:6)
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:128:6-128:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(src/write/encoder_string_writer.rs:120:5-128:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

