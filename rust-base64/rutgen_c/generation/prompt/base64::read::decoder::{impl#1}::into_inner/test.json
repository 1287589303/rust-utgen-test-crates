{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read/decoder.rs\n// crate name is base64\nuse crate::{engine::Engine, DecodeError, DecodeSliceError, PAD_BYTE};\nuse std::{cmp, fmt, io};\npub(crate) const BUF_SIZE: usize = 1024;\nconst BASE64_CHUNK_SIZE: usize = 4;\nconst DECODED_CHUNK_SIZE: usize = 3;\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\npub struct DecoderReader<'e, E: Engine, R: io::Read> {\n    engine: &'e E,\n    /// Where b64 data is read from\n    inner: R,\n    /// Holds b64 data read from the delegate reader.\n    b64_buffer: [u8; BUF_SIZE],\n    /// The start of the pending buffered data in `b64_buffer`.\n    b64_offset: usize,\n    /// The amount of buffered b64 data after `b64_offset` in `b64_len`.\n    b64_len: usize,\n    /// Since the caller may provide us with a buffer of size 1 or 2 that's too small to copy a\n    /// decoded chunk in to, we have to be able to hang on to a few decoded bytes.\n    /// Technically we only need to hold 2 bytes, but then we'd need a separate temporary buffer to\n    /// decode 3 bytes into and then juggle copying one byte into the provided read buf and the rest\n    /// into here, which seems like a lot of complexity for 1 extra byte of storage.\n    decoded_chunk_buffer: [u8; DECODED_CHUNK_SIZE],\n    /// Index of start of decoded data in `decoded_chunk_buffer`\n    decoded_offset: usize,\n    /// Length of decoded data after `decoded_offset` in `decoded_chunk_buffer`\n    decoded_len: usize,\n    /// Input length consumed so far.\n    /// Used to provide accurate offsets in errors\n    input_consumed_len: usize,\n    /// offset of previously seen padding, if any\n    padding_offset: Option<usize>,\n}\nimpl<'e, E: Engine, R: io::Read> DecoderReader<'e, E, R> {\n    pub fn new(reader: R, engine: &'e E) -> Self {\n        DecoderReader {\n            engine,\n            inner: reader,\n            b64_buffer: [0; BUF_SIZE],\n            b64_offset: 0,\n            b64_len: 0,\n            decoded_chunk_buffer: [0; DECODED_CHUNK_SIZE],\n            decoded_offset: 0,\n            decoded_len: 0,\n            input_consumed_len: 0,\n            padding_offset: None,\n        }\n    }\n    fn flush_decoded_buf(&mut self, buf: &mut [u8]) -> io::Result<usize> {}\n    fn read_from_delegate(&mut self) -> io::Result<usize> {}\n    fn decode_to_buf(\n        &mut self,\n        b64_len_to_decode: usize,\n        buf: &mut [u8],\n    ) -> io::Result<usize> {}\n    pub fn into_inner(self) -> R {\n        self.inner\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Unwraps this `DecoderReader`, returning the base reader which it reads base64 encoded\n/// input from.\n///\n/// Because `DecoderReader` performs internal buffering, the state of the inner reader is\n/// unspecified. This function is mainly provided because the inner reader type may provide\n/// additional functionality beyond the `Read` implementation which may still be useful.\n214 pub fn into_inner(self) -> R {\n215     self.inner\n216 }\n\n",
  "depend_pt": ""
}