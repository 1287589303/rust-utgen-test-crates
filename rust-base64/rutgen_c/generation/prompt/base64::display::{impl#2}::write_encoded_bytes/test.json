{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/display.rs\n// crate name is base64\nuse super::chunked_encoder::ChunkedEncoder;\nuse crate::engine::Engine;\nuse core::fmt::{Display, Formatter};\nuse core::{fmt, str};\npub trait Sink {\n    type Error;\n    fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error>;\n}\nstruct FormatterSink<'a, 'b: 'a> {\n    f: &'a mut Formatter<'b>,\n}\nimpl<'a, 'b: 'a> super::chunked_encoder::Sink for FormatterSink<'a, 'b> {\n    type Error = fmt::Error;\n    fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error> {\n        self.f.write_str(str::from_utf8(encoded).expect(\"base64 data was not utf8\"))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n47 fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error> {\n48     // Avoid unsafe. If max performance is needed, write your own display wrapper that uses\n49     // unsafe here to gain about 10-15%.\n50     self.f\n51         .write_str(str::from_utf8(encoded).expect(\"base64 data was not utf8\"))\n52 }\n\n",
  "depend_pt": ""
}