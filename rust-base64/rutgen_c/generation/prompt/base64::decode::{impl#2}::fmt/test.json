{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/decode.rs\n// crate name is base64\nuse crate::engine::{general_purpose::STANDARD, DecodeEstimate, Engine};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\nuse core::fmt;\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeSliceError {\n    /// A [`DecodeError`] occurred\n    DecodeError(DecodeError),\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeError {\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    ///\n    /// Padding characters (`=`) interspersed in the encoded form are invalid, as they may only\n    /// be present as the last 0-2 bytes of input.\n    ///\n    /// This error may also indicate that extraneous trailing input bytes are present, causing\n    /// otherwise valid padding to no longer be the last bytes of input.\n    InvalidByte(usize, u8),\n    /// The length of the input, as measured in valid base64 symbols, is invalid.\n    /// There must be 2-4 symbols in the last input quad.\n    InvalidLength(usize),\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike [`DecodeError::InvalidByte`], which reports symbols that aren't in the alphabet,\n    /// this error is for symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n    /// The nature of the padding was not as configured: absent or incorrect when it must be\n    /// canonical, or present when it must be absent, etc.\n    InvalidPadding,\n}\nimpl fmt::Display for DecodeSliceError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        match self {\n            Self::DecodeError(e) => write!(f, \"DecodeError: {}\", e),\n            Self::OutputSliceTooSmall => write!(f, \"Output slice too small\"),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n60 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n61     match self {\n62         Self::DecodeError(e) => write!(f, \"DecodeError: {}\", e),\n63         Self::OutputSliceTooSmall => write!(f, \"Output slice too small\"),\n64     }\n65 }\n\n",
  "depend_pt": ""
}