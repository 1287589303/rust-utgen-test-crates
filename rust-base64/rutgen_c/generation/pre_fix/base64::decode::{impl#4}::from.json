{
  "name": "base64::decode::{impl#4}::from",
  "mod_info": {
    "name": "decode",
    "loc": "src/lib.rs:293:1:293:12"
  },
  "visible": true,
  "loc": "src/decode.rs:79:5:81:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    // Arrange",
                "    let error = DecodeError::InvalidByte(3, b'A');",
                "",
                "    // Act",
                "    let result = DecodeSliceError::from(error);",
                "",
                "    // Assert",
                "    assert_eq!(result, DecodeSliceError::DecodeError(DecodeError::InvalidByte(3, b'A')));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    // Arrange",
                "    let error = DecodeError::InvalidLength(5);",
                "",
                "    // Act",
                "    let result = DecodeSliceError::from(error);",
                "",
                "    // Assert",
                "    assert_eq!(result, DecodeSliceError::DecodeError(DecodeError::InvalidLength(5)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    // Arrange",
                "    let error = DecodeError::InvalidLastSymbol(2, b'B');",
                "",
                "    // Act",
                "    let result = DecodeSliceError::from(error);",
                "",
                "    // Assert",
                "    assert_eq!(result, DecodeSliceError::DecodeError(DecodeError::InvalidLastSymbol(2, b'B')));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    // Arrange",
                "    let error = DecodeError::InvalidPadding;",
                "",
                "    // Act",
                "    let result = DecodeSliceError::from(error);",
                "",
                "    // Assert",
                "    assert_eq!(result, DecodeSliceError::DecodeError(DecodeError::InvalidPadding));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}