{
  "name": "base64::alphabet::{impl#0}::new",
  "mod_info": {
    "name": "alphabet",
    "loc": "src/lib.rs:284:1:284:18"
  },
  "visible": true,
  "loc": "src/alphabet.rs:79:5:125:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = Alphabet::new(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = Alphabet::new(\"short\");",
                "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = Alphabet::new(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[\\n]\");",
                "    if let Err(ParseAlphabetError::UnprintableByte(byte)) = result {",
                "        assert_eq!(byte, b'\\n');",
                "    } else {",
                "        panic!(\"Expected UnprintableByte error\");",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = Alphabet::new(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+=/\");",
                "    if let Err(ParseAlphabetError::ReservedByte(byte)) = result {",
                "        assert_eq!(byte, b'=');",
                "    } else {",
                "        panic!(\"Expected ReservedByte error\");",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let result = Alphabet::new(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");",
                "    assert!(result.is_ok()); // Base alphabet is okay",
                "    let result_with_duplicate = Alphabet::new(\"ABCDEFGHIZJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789+/\");",
                "    if let Err(ParseAlphabetError::DuplicatedByte(byte)) = result_with_duplicate {",
                "        assert_eq!(byte, b'I');",
                "    } else {",
                "        panic!(\"Expected DuplicatedByte error\");",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}