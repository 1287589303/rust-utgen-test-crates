{
  "name": "base64::engine::general_purpose::decode::{impl#0}::new",
  "mod_info": {
    "name": "engine::general_purpose::decode",
    "loc": "src/engine/general_purpose/mod.rs:12:1:12:23"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/decode.rs:14:5:20:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let estimate = GeneralPurposeEstimate::new(0);",
                "    assert_eq!(estimate.rem, 0);",
                "    assert_eq!(estimate.conservative_decoded_len, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let estimate = GeneralPurposeEstimate::new(8);",
                "    assert_eq!(estimate.rem, 0);",
                "    assert_eq!(estimate.conservative_decoded_len, 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let estimate = GeneralPurposeEstimate::new(5);",
                "    assert_eq!(estimate.rem, 1);",
                "    assert_eq!(estimate.conservative_decoded_len, 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let estimate = GeneralPurposeEstimate::new(6);",
                "    assert_eq!(estimate.rem, 2);",
                "    assert_eq!(estimate.conservative_decoded_len, 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let estimate = GeneralPurposeEstimate::new(7);",
                "    assert_eq!(estimate.rem, 3);",
                "    assert_eq!(estimate.conservative_decoded_len, 9);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let estimate = GeneralPurposeEstimate::new(100);",
                "    assert_eq!(estimate.rem, 0);",
                "    assert_eq!(estimate.conservative_decoded_len, 75);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}