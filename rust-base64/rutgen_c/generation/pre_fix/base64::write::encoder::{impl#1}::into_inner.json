{
  "name": "base64::write::encoder::{impl#1}::into_inner",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/write/encoder.rs:242:5:246:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MockEngine;",
                "    struct MockWriter {",
                "        data: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.data.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let engine = MockEngine;",
                "    let writer = MockWriter { data: Vec::new() };",
                "    ",
                "    let encoder_writer = EncoderWriter::new(writer, &engine);",
                "    let inner_writer = encoder_writer.into_inner();",
                "    ",
                "    assert!(inner_writer.data.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"Encoder has already had finish() called\")]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct MockEngine;",
                "    struct MockWriter {",
                "        data: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.data.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let engine = MockEngine;",
                "    let mut writer = MockWriter { data: Vec::new() };",
                "    ",
                "    let mut encoder_writer = EncoderWriter::new(writer, &engine);",
                "    encoder_writer.finish().unwrap();",
                "    ",
                "    let _inner_writer = encoder_writer.into_inner(); // Call to finish before this line",
                "    // The panic should occur on the next call to into_inner",
                "    let _inner_writer_again = encoder_writer.into_inner();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}