{
  "name": "base64::decode::{impl#0}::fmt",
  "mod_info": {
    "name": "decode",
    "loc": "src/lib.rs:293:1:293:12"
  },
  "visible": true,
  "loc": "src/decode.rs:33:5:44:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let error = DecodeError::InvalidByte(5, b'A');",
                "    let result = format!(\"{}\", error);",
                "    assert_eq!(result, \"Invalid symbol 65, offset 5.\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let error = DecodeError::InvalidLength(3);",
                "    let result = format!(\"{}\", error);",
                "    assert_eq!(result, \"Invalid input length: 3\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let error = DecodeError::InvalidLastSymbol(4, b'Z');",
                "    let result = format!(\"{}\", error);",
                "    assert_eq!(result, \"Invalid last symbol 90, offset 4.\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let error = DecodeError::InvalidPadding;",
                "    let result = format!(\"{}\", error);",
                "    assert_eq!(result, \"Invalid padding\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}