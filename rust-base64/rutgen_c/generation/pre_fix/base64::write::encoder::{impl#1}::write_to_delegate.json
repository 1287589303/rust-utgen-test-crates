{
  "name": "base64::write::encoder::{impl#1}::write_to_delegate",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": false,
  "loc": "src/write/encoder.rs:179:5:201:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate { 0 }",
                "        fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<(), io::Error> {",
                "            Ok(())",
                "        }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let mut output_buf = [0u8; BUF_SIZE];",
                "    let mut writer = vec![]; // emulate a zero-capacity writer",
                "    let mut encoder = EncoderWriter::new(&mut writer, &engine);",
                "    encoder.output_occupied_len = 0;",
                "",
                "    let result = encoder.write_to_delegate(0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(encoder.output_occupied_len, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate { 0 }",
                "        fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<(), io::Error> {",
                "            Ok(())",
                "        }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "",
                "    struct MockWriter {",
                "        written: Vec<u8>,",
                "        fail_at: Option<usize>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            if let Some(fail_at) = self.fail_at {",
                "                if self.written.len() >= fail_at {",
                "                    return Err(io::Error::new(ErrorKind::Other, \"mock failure\"));",
                "                }",
                "            }",
                "            self.written.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let mut output_buf = [0u8; BUF_SIZE];",
                "    let extra_input = [0u8; MIN_ENCODE_CHUNK_SIZE];",
                "    let mut writer = MockWriter { written: Vec::new(), fail_at: None };",
                "    let mut encoder = EncoderWriter::new(writer, &engine);",
                "    encoder.output[0..4].copy_from_slice(&[1, 2, 3, 4]); // simulate encoded output",
                "    encoder.output_occupied_len = 4;",
                "",
                "    let result = encoder.write_to_delegate(4);",
                "    assert!(result.is_ok());",
                "    assert_eq!(encoder.output[0..4], [0, 0, 0, 0]);",
                "    assert_eq!(encoder.output_occupied_len, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate { 0 }",
                "        fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<(), io::Error> {",
                "            Ok(())",
                "        }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "",
                "    struct MockWriter {",
                "        written: Vec<u8>,",
                "    }",
                "",
                "    impl io::Write for MockWriter {",
                "        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {",
                "            self.written.extend_from_slice(buf);",
                "            Ok(buf.len())",
                "        }",
                "",
                "        fn flush(&mut self) -> io::Result<()> {",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let mut writer = MockWriter { written: Vec::new() };",
                "    let mut encoder = EncoderWriter::new(writer, &engine);",
                "    encoder.output[0..4].copy_from_slice(&[1, 2, 3, 4]); // simulate encoded output",
                "    encoder.output_occupied_len = 4;",
                "",
                "    let result = encoder.write_to_delegate(4);",
                "    assert!(result.is_ok());",
                "    assert_eq!(encoder.output_occupied_len, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"Writer must be present\")]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate { 0 }",
                "        fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<(), io::Error> {",
                "            Ok(())",
                "        }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let mut encoder = EncoderWriter::new(None, &engine); // no writer",
                "    encoder.output_occupied_len = 4;",
                "",
                "    let _ = encoder.write_to_delegate(4);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}