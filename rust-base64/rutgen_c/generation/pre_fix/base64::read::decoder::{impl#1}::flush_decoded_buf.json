{
  "name": "base64::read::decoder::{impl#1}::flush_decoded_buf",
  "mod_info": {
    "name": "read::decoder",
    "loc": "src/read/mod.rs:2:1:2:13"
  },
  "visible": false,
  "loc": "src/read/decoder.rs:96:5:114:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _: &[u8], _: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate {",
                "            input_len / 4 * 3 // rough estimate",
                "        }",
                "        fn internal_decode(&self, _: &[u8], _: &mut [u8], _: Self::DecodeEstimate) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            Ok(DecodeMetadata { ..Default::default() }) // placeholder",
                "        }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let mut decoder = DecoderReader::new(io::empty(), &engine);",
                "    decoder.decoded_len = 3;",
                "    decoder.decoded_offset = 0;",
                "    decoder.decoded_chunk_buffer[0] = 1;",
                "    decoder.decoded_chunk_buffer[1] = 2;",
                "    decoder.decoded_chunk_buffer[2] = 3;",
                "",
                "    let mut output_buf = [0u8; 3];",
                "    let result = decoder.flush_decoded_buf(&mut output_buf).unwrap();",
                "",
                "    assert_eq!(result, 3);",
                "    assert_eq!(&output_buf, &[1, 2, 3]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _: &[u8], _: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate {",
                "            input_len / 4 * 3",
                "        }",
                "        fn internal_decode(&self, _: &[u8], _: &mut [u8], _: Self::DecodeEstimate) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            Ok(DecodeMetadata { ..Default::default() }) // placeholder",
                "        }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let mut decoder = DecoderReader::new(io::empty(), &engine);",
                "    decoder.decoded_len = 5;",
                "    decoder.decoded_offset = 0;",
                "    decoder.decoded_chunk_buffer[..5].copy_from_slice(&[10, 20, 30, 40, 50]);",
                "",
                "    let mut output_buf = [0u8; 3];",
                "    let result = decoder.flush_decoded_buf(&mut output_buf).unwrap();",
                "",
                "    assert_eq!(result, 3);",
                "    assert_eq!(&output_buf, &[10, 20, 30]);",
                "    assert_eq!(decoder.decoded_offset, 3);",
                "    assert_eq!(decoder.decoded_len, 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _: &[u8], _: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate {",
                "            input_len / 4 * 3",
                "        }",
                "        fn internal_decode(&self, _: &[u8], _: &mut [u8], _: Self::DecodeEstimate) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            Ok(DecodeMetadata { ..Default::default() }) // placeholder",
                "        }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let mut decoder = DecoderReader::new(io::empty(), &engine);",
                "    decoder.decoded_len = 3;",
                "    decoder.decoded_offset = 0;",
                "",
                "    let mut output_buf = []; // empty buffer",
                "    decoder.flush_decoded_buf(&mut output_buf);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestEngine;",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _: &[u8], _: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate {",
                "            input_len / 4 * 3",
                "        }",
                "        fn internal_decode(&self, _: &[u8], _: &mut [u8], _: Self::DecodeEstimate) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            Ok(DecodeMetadata { ..Default::default() }) // placeholder",
                "        }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "",
                "    let engine = TestEngine;",
                "    let mut decoder = DecoderReader::new(io::empty(), &engine);",
                "    decoder.decoded_len = 0; // no decoded data",
                "",
                "    let mut output_buf = [0u8; 3];",
                "    decoder.flush_decoded_buf(&mut output_buf);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}