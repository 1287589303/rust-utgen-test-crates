{
  "name": "base64::alphabet::{impl#0}::from_str_unchecked",
  "mod_info": {
    "name": "alphabet",
    "loc": "src/lib.rs:284:1:284:18"
  },
  "visible": false,
  "loc": "src/alphabet.rs:62:5:74:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let valid_alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
                "    let alphabet = Alphabet::from_str_unchecked(valid_alphabet);",
                "    assert_eq!(alphabet.symbols, valid_alphabet.as_bytes());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let valid_alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/\";",
                "    let alphabet = Alphabet::from_str_unchecked(valid_alphabet);",
                "    assert_eq!(alphabet.symbols, valid_alphabet.as_bytes());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let invalid_alphabet = \"short\";",
                "    let _alphabet = Alphabet::from_str_unchecked(invalid_alphabet);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let invalid_alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; // contains PAD_BYTE which is typically the `=` character",
                "    let _alphabet = Alphabet::from_str_unchecked(invalid_alphabet);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let valid_alphabet = \"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]_^`abcdefghijklmnopqrstuvwxyz{|}~\";",
                "    let alphabet = Alphabet::from_str_unchecked(valid_alphabet);",
                "    assert_eq!(alphabet.symbols, valid_alphabet.as_bytes());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}