{
  "name": "base64::decode::decode",
  "mod_info": {
    "name": "decode",
    "loc": "src/lib.rs:293:1:293:12"
  },
  "visible": true,
  "loc": "src/decode.rs:89:1:91:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let input = \"SGVsbG8sIFdvcmxkIQ==\"; // \"Hello, World!\" in base64",
                "    let result = decode(input).unwrap();",
                "    assert_eq!(result, b\"Hello, World!\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let input = \"SGVsbG8sIFdvcmxkIQ@==\"; // Invalid character '@'",
                "    match decode(input) {",
                "        Err(DecodeError::InvalidByte(21, b'@')) => (),",
                "        _ => panic!(\"Expected InvalidByte error\"),",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let input = \"SGVsbG8sIFdvcmxk\"; // Padding is incorrect",
                "    match decode(input) {",
                "        Err(DecodeError::InvalidLength(16)) => (),",
                "        _ => panic!(\"Expected InvalidLength error\"),",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let input = \"SGVsbG8sIFdvcmxkIQA=\"; // \"Hello, World!\" with invalid last symbol 'A'",
                "    match decode(input) {",
                "        Err(DecodeError::InvalidLastSymbol(18, b'A')) => (),",
                "        _ => panic!(\"Expected InvalidLastSymbol error\"),",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let input = \"SGVsbG8sIFdvcmxkIQ\"; // Missing padding",
                "    match decode(input) {",
                "        Err(DecodeError::InvalidPadding) => (),",
                "        _ => panic!(\"Expected InvalidPadding error\"),",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}