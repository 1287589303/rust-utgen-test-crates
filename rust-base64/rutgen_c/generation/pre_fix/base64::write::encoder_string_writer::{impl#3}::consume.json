{
  "name": "base64::write::encoder_string_writer::{impl#3}::consume",
  "mod_info": {
    "name": "write::encoder_string_writer",
    "loc": "src/write/mod.rs:3:1:3:27"
  },
  "visible": true,
  "loc": "src/write/encoder_string_writer.rs:100:5:102:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStrConsumer {",
                "        data: String,",
                "    }",
                "    ",
                "    impl StrConsumer for TestStrConsumer {",
                "        fn consume(&mut self, buf: &str) {",
                "            self.data.push_str(buf);",
                "        }",
                "    }",
                "",
                "    let mut consumer = TestStrConsumer { data: String::new() };",
                "    consumer.consume(\"Hello\");",
                "    assert_eq!(consumer.data, \"Hello\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStrConsumer {",
                "        data: String,",
                "    }",
                "",
                "    impl StrConsumer for TestStrConsumer {",
                "        fn consume(&mut self, buf: &str) {",
                "            self.data.push_str(buf);",
                "        }",
                "    }",
                "",
                "    let mut consumer = TestStrConsumer { data: String::from(\"World\") };",
                "    consumer.consume(\"!\");",
                "    assert_eq!(consumer.data, \"World!\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStrConsumer {",
                "        data: String,",
                "    }",
                "",
                "    impl StrConsumer for TestStrConsumer {",
                "        fn consume(&mut self, buf: &str) {",
                "            self.data.push_str(buf);",
                "        }",
                "    }",
                "",
                "    let mut consumer = TestStrConsumer { data: String::new() };",
                "    consumer.consume(\"This \");",
                "    consumer.consume(\"is a \");",
                "    consumer.consume(\"test.\");",
                "    assert_eq!(consumer.data, \"This is a test.\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestStrConsumer {",
                "        data: String,",
                "    }",
                "",
                "    impl StrConsumer for TestStrConsumer {",
                "        fn consume(&mut self, buf: &str) {",
                "            self.data.push_str(buf);",
                "        }",
                "    }",
                "",
                "    let mut consumer = TestStrConsumer { data: String::from(\"Initial \") };",
                "    consumer.consume(\"\");",
                "    assert_eq!(consumer.data, \"Initial \");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}