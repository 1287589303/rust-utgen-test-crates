{
  "name": "base64::engine::general_purpose::decode::complete_quads_len",
  "mod_info": {
    "name": "engine::general_purpose::decode",
    "loc": "src/engine/general_purpose/mod.rs:12:1:12:23"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/decode.rs:131:1:163:2",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let decode_table: [u8; 256] = {",
                "        let mut table = [INVALID_VALUE; 256];",
                "        // Initialize valid base64 characters",
                "        for (i, c) in b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".iter().enumerate() {",
                "            table[*c as usize] = i as u8;",
                "        }",
                "        table[b'=' as usize] = 0; // padding character",
                "        table",
                "    };",
                "",
                "    let input = b\"QUJDRA==\"; // \"ABC\" with padding",
                "    let input_len_rem = input.len() % 4;",
                "    let output_len = 3; // enough to decode \"ABC\"",
                "    ",
                "    let result = complete_quads_len(input, input_len_rem, output_len, &decode_table);",
                "    assert_eq!(result, Ok(4)); // The length of complete quads (ABC)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let decode_table: [u8; 256] = {",
                "        let mut table = [INVALID_VALUE; 256];",
                "        // Initialize valid base64 characters",
                "        for (i, c) in b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".iter().enumerate() {",
                "            table[*c as usize] = i as u8;",
                "        }",
                "        table[b'=' as usize] = 0; // padding character",
                "        table",
                "    };",
                "",
                "    let input = b\"QUJDRA!\\0\"; // Invalid character '!'",
                "    let input_len_rem = input.len() % 4;",
                "    let output_len = 3;",
                "    ",
                "    let result = complete_quads_len(input, input_len_rem, output_len, &decode_table);",
                "    assert_eq!(result, Err(DecodeSliceError::DecodeError(DecodeError::InvalidByte(6, b'!'))));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let decode_table: [u8; 256] = {",
                "        let mut table = [INVALID_VALUE; 256];",
                "        // Initialize valid base64 characters",
                "        for (i, c) in b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".iter().enumerate() {",
                "            table[*c as usize] = i as u8;",
                "        }",
                "        table[b'=' as usize] = 0; // padding character",
                "        table",
                "    };",
                "",
                "    let input = b\"QUJDRA==\"; // \"ABC\" with padding",
                "    let input_len_rem = input.len() % 4;",
                "    let output_len = 2; // not enough to decode \"ABC\"",
                "    ",
                "    let result = complete_quads_len(input, input_len_rem, output_len, &decode_table);",
                "    assert_eq!(result, Err(DecodeSliceError::OutputSliceTooSmall));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let decode_table: [u8; 256] = {",
                "        let mut table = [INVALID_VALUE; 256];",
                "        // Initialize valid base64 characters",
                "        for (i, c) in b\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".iter().enumerate() {",
                "            table[*c as usize] = i as u8;",
                "        }",
                "        table[b'=' as usize] = 0; // padding character",
                "        table",
                "    };",
                "",
                "    let input = b\"QUJD\"; // \"ABCD\" without padding",
                "    let input_len_rem = input.len() % 4;",
                "    let output_len = 4; // enough for \"ABCD\"",
                "    ",
                "    let result = complete_quads_len(input, input_len_rem, output_len, &decode_table);",
                "    assert_eq!(result, Ok(4)); // The length of complete quads (ABCD)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}