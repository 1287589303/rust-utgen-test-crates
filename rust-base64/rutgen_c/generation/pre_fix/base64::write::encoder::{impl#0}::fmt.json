{
  "name": "base64::write::encoder::{impl#0}::fmt",
  "mod_info": {
    "name": "write::encoder",
    "loc": "src/write/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/write/encoder.rs:84:5:93:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use std::fmt::Formatter;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use std::fmt::Formatter;",
                "",
                "    struct DummyEngine;",
                "    ",
                "    impl Engine for DummyEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize {",
                "            0",
                "        }",
                "",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate {",
                "            0",
                "        }",
                "",
                "        fn internal_decode(",
                "            &self,",
                "            _input: &[u8],",
                "            _output: &mut [u8],",
                "            _decode_estimate: Self::DecodeEstimate,",
                "        ) -> Result<DecodeMetadata, DecodeSliceError> {",
                "            Err(DecodeSliceError::new())",
                "        }",
                "",
                "        fn config(&self) -> &Self::Config {",
                "            &()",
                "        }",
                "        ",
                "        #[cfg(any(feature = \"alloc\", test))]",
                "        #[inline]",
                "        fn encode<T: AsRef<[u8]>>(&self, _input: T) -> String {",
                "            String::new()",
                "        }",
                "        ",
                "        #[cfg(any(feature = \"alloc\", test))]",
                "        #[inline]",
                "        fn encode_string<T: AsRef<[u8]>>(&self, _input: T, _output_buf: &mut String) {",
                "        }",
                "",
                "        #[cfg(any(feature = \"alloc\", test))]",
                "        #[inline]",
                "        fn decode<T: AsRef<[u8]>>(&self, _input: T) -> Result<Vec<u8>, DecodeError> {",
                "            Ok(vec![])",
                "        }",
                "",
                "        #[inline]",
                "        fn decode_slice<T: AsRef<[u8]>>(",
                "            &self,",
                "            _input: T,",
                "            _output: &mut [u8],",
                "        ) -> Result<usize, DecodeSliceError> {",
                "            Ok(0)",
                "        }",
                "",
                "        #[inline]",
                "        fn decode_slice_unchecked<T: AsRef<[u8]>>(",
                "            &self,",
                "            _input: T,",
                "            _output: &mut [u8],",
                "        ) -> Result<usize, DecodeError> {",
                "            Ok(0)",
                "        }",
                "    }",
                "",
                "    let engine = DummyEngine;",
                "    let writer = Vec::new();",
                "    let extra_input: [u8; MIN_ENCODE_CHUNK_SIZE] = [1, 2, 3];",
                "    let output: [u8; BUF_SIZE] = [4; BUF_SIZE];",
                "    let encoder_writer = EncoderWriter {",
                "        engine: &engine,",
                "        delegate: Some(writer),",
                "        extra_input,",
                "        extra_input_occupied_len: 3,",
                "        output,",
                "        output_occupied_len: 5,",
                "        panicked: false,",
                "    };",
                "",
                "    let mut buffer = String::new();",
                "    let result = encoder_writer.fmt(&mut Formatter::new(&mut buffer));",
                "    ",
                "    assert!(result.is_ok());",
                "    assert!(buffer.contains(\"extra_input: [1, 2, 3]\"));",
                "    assert!(buffer.contains(\"extra_input_occupied_len:3\"));",
                "    assert!(buffer.contains(\"output[..5]: [4, 4, 4, 4, 4]\"));",
                "    assert!(buffer.contains(\"output_occupied_len: 5\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}