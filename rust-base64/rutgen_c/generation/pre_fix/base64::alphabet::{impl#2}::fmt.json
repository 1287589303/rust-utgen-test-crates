{
  "name": "base64::alphabet::{impl#2}::fmt",
  "mod_info": {
    "name": "alphabet",
    "loc": "src/lib.rs:284:1:284:18"
  },
  "visible": true,
  "loc": "src/alphabet.rs:156:5:163:6",
  "fn_tests": [
    {
      "chain_id": 0,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let error = ParseAlphabetError::InvalidLength;",
                "    let mut output = String::new();",
                "    let result = write!(&mut output, \"{}\", error);",
                "    assert!(result.is_ok());",
                "    assert_eq!(output, \"Invalid length - must be 64 bytes\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let error = ParseAlphabetError::DuplicatedByte(0xFF);",
                "    let mut output = String::new();",
                "    let result = write!(&mut output, \"{}\", error);",
                "    assert!(result.is_ok());",
                "    assert_eq!(output, \"Duplicated byte: 0xff\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let error = ParseAlphabetError::UnprintableByte(0x01);",
                "    let mut output = String::new();",
                "    let result = write!(&mut output, \"{}\", error);",
                "    assert!(result.is_ok());",
                "    assert_eq!(output, \"Unprintable byte: 0x01\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let error = ParseAlphabetError::ReservedByte(b'=');",
                "    let mut output = String::new();",
                "    let result = write!(&mut output, \"{}\", error);",
                "    assert!(result.is_ok());",
                "    assert_eq!(output, \"Reserved byte: 0x3d\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}