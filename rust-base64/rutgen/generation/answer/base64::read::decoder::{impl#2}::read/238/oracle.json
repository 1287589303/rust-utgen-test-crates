[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEngine;",
          "    impl Engine for TestEngine {",
          "        type Config = ();",
          "        type DecodeEstimate = usize;",
          "",
          "        fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize { 0 }",
          "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate { input_len * 3 / 4 }",
          "        fn internal_decode(&self, input: &[u8], output: &mut [u8], decode_estimate: Self::DecodeEstimate) -> Result<base64::DecodeMetadata, DecodeSliceError> { ",
          "            Ok(base64::DecodeMetadata { decoded_len: 3, padding_offset: None }) ",
          "        }",
          "        fn config(&self) -> &Self::Config { &() }",
          "    }",
          "",
          "    let engine = TestEngine;",
          "    let input_data = b\"QUJDREVGRw==\"; // \"ABCDEFG\" in base64",
          "    let cursor = std::io::Cursor::new(input_data);",
          "    let mut decoder_reader = DecoderReader::new(cursor, &engine);",
          "    ",
          "    let mut buf = [0u8; 4]; // non-empty buffer",
          "    decoder_reader.b64_len = BUF_SIZE; // ensure b64_len is at its maximum",
          "    decoder_reader.b64_offset = BUF_SIZE; // set b64_offset to BUF_SIZE",
          "    decoder_reader.decoded_len = 0; // ensure decoded_len is 0",
          "    decoder_reader.decoded_offset = DECODED_CHUNK_SIZE; // force the precondition",
          "",
          "    let _result = decoder_reader.read(&mut buf);",
          "}"
        ],
        "oracle": [
          "    assert!(buf.len() > 0); // buf is not empty",
          "    assert_eq!(decoder_reader.b64_offset, BUF_SIZE); // self.b64_offset == BUF_SIZE",
          "    assert_eq!(decoder_reader.b64_offset + decoder_reader.b64_len, BUF_SIZE); // self.b64_offset + self.b64_len == BUF_SIZE",
          "    assert!(decoder_reader.b64_len == BUF_SIZE); // self.b64_len == BUF_SIZE",
          "    assert!(decoder_reader.decoded_len == 0); // self.decoded_len == 0",
          "    assert!(decoder_reader.decoded_offset > DECODED_CHUNK_SIZE); // self.decoded_offset > DECODED_CHUNK_SIZE"
        ],
        "code": [
          "{",
          "    struct TestEngine;",
          "    impl Engine for TestEngine {",
          "        type Config = ();",
          "        type DecodeEstimate = usize;",
          "",
          "        fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize { 0 }",
          "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate { input_len * 3 / 4 }",
          "        fn internal_decode(&self, input: &[u8], output: &mut [u8], decode_estimate: Self::DecodeEstimate) -> Result<base64::DecodeMetadata, DecodeSliceError> { ",
          "            Ok(base64::DecodeMetadata { decoded_len: 3, padding_offset: None }) ",
          "        }",
          "        fn config(&self) -> &Self::Config { &() }",
          "    }",
          "",
          "    let engine = TestEngine;",
          "    let input_data = b\"QUJDREVGRw==\"; // \"ABCDEFG\" in base64",
          "    let cursor = std::io::Cursor::new(input_data);",
          "    let mut decoder_reader = DecoderReader::new(cursor, &engine);",
          "    ",
          "    let mut buf = [0u8; 4]; // non-empty buffer",
          "    decoder_reader.b64_len = BUF_SIZE; // ensure b64_len is at its maximum",
          "    decoder_reader.b64_offset = BUF_SIZE; // set b64_offset to BUF_SIZE",
          "    decoder_reader.decoded_len = 0; // ensure decoded_len is 0",
          "    decoder_reader.decoded_offset = DECODED_CHUNK_SIZE; // force the precondition",
          "",
          "    let _result = decoder_reader.read(&mut buf);",
          "    assert!(buf.len() > 0); // buf is not empty",
          "    assert_eq!(decoder_reader.b64_offset, BUF_SIZE); // self.b64_offset == BUF_SIZE",
          "    assert_eq!(decoder_reader.b64_offset + decoder_reader.b64_len, BUF_SIZE); // self.b64_offset + self.b64_len == BUF_SIZE",
          "    assert!(decoder_reader.b64_len == BUF_SIZE); // self.b64_len == BUF_SIZE",
          "    assert!(decoder_reader.decoded_len == 0); // self.decoded_len == 0",
          "    assert!(decoder_reader.decoded_offset > DECODED_CHUNK_SIZE); // self.decoded_offset > DECODED_CHUNK_SIZE",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEngine;",
          "    impl Engine for TestEngine {",
          "        type Config = ();",
          "        type DecodeEstimate = usize;",
          "",
          "        fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize { 0 }",
          "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate { input_len * 3 / 4 }",
          "        fn internal_decode(&self, input: &[u8], output: &mut [u8], decode_estimate: Self::DecodeEstimate) -> Result<base64::DecodeMetadata, DecodeSliceError> { ",
          "            Ok(base64::DecodeMetadata { decoded_len: 2, padding_offset: None }) ",
          "        }",
          "        fn config(&self) -> &Self::Config { &() }",
          "    }",
          "",
          "    let engine = TestEngine;",
          "    let input_data = b\"QUJD\"; // \"ABC\" in base64",
          "    let cursor = std::io::Cursor::new(input_data);",
          "    let mut decoder_reader = DecoderReader::new(cursor, &engine);",
          "    ",
          "    let mut buf = [0u8; 4]; // non-empty buffer",
          "    decoder_reader.b64_len = BUF_SIZE; // ensure b64_len is at its maximum",
          "    decoder_reader.b64_offset = BUF_SIZE; // set b64_offset to BUF_SIZE",
          "    decoder_reader.decoded_len = 0; // ensure decoded_len is 0",
          "    decoder_reader.decoded_offset = DECODED_CHUNK_SIZE; // force the precondition",
          "",
          "    let _result = decoder_reader.read(&mut buf);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.unwrap(), 2);",
          "    assert_eq!(buf[..2], b\"AB\");",
          "    assert_eq!(decoder_reader.b64_len, BUF_SIZE);",
          "    assert_eq!(decoder_reader.b64_offset, BUF_SIZE);",
          "    assert_eq!(decoder_reader.decoded_len, 0);",
          "    assert_eq!(decoder_reader.decoded_offset, DECODED_CHUNK_SIZE);",
          "    assert!(decoder_reader.padding_offset.is_none());"
        ],
        "code": [
          "{",
          "    struct TestEngine;",
          "    impl Engine for TestEngine {",
          "        type Config = ();",
          "        type DecodeEstimate = usize;",
          "",
          "        fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize { 0 }",
          "        fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate { input_len * 3 / 4 }",
          "        fn internal_decode(&self, input: &[u8], output: &mut [u8], decode_estimate: Self::DecodeEstimate) -> Result<base64::DecodeMetadata, DecodeSliceError> { ",
          "            Ok(base64::DecodeMetadata { decoded_len: 2, padding_offset: None }) ",
          "        }",
          "        fn config(&self) -> &Self::Config { &() }",
          "    }",
          "",
          "    let engine = TestEngine;",
          "    let input_data = b\"QUJD\"; // \"ABC\" in base64",
          "    let cursor = std::io::Cursor::new(input_data);",
          "    let mut decoder_reader = DecoderReader::new(cursor, &engine);",
          "    ",
          "    let mut buf = [0u8; 4]; // non-empty buffer",
          "    decoder_reader.b64_len = BUF_SIZE; // ensure b64_len is at its maximum",
          "    decoder_reader.b64_offset = BUF_SIZE; // set b64_offset to BUF_SIZE",
          "    decoder_reader.decoded_len = 0; // ensure decoded_len is 0",
          "    decoder_reader.decoded_offset = DECODED_CHUNK_SIZE; // force the precondition",
          "",
          "    let _result = decoder_reader.read(&mut buf);",
          "    assert_eq!(_result.unwrap(), 2);",
          "    assert_eq!(buf[..2], b\"AB\");",
          "    assert_eq!(decoder_reader.b64_len, BUF_SIZE);",
          "    assert_eq!(decoder_reader.b64_offset, BUF_SIZE);",
          "    assert_eq!(decoder_reader.decoded_len, 0);",
          "    assert_eq!(decoder_reader.decoded_offset, DECODED_CHUNK_SIZE);",
          "    assert!(decoder_reader.padding_offset.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]