[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[0, 1, 2, 3];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 3] = [0; 3];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [0; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::Indifferent;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_, Ok(DecodeMetadata::new(3, None)));",
          "    assert!(matches!(decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode), Ok(_)));",
          "    assert_eq!(output, [0, 1, 2]);",
          "    assert!(output.len() <= 3);",
          "    assert!(input.len() - input_index <= 4);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[0, 1, 2, 3];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 3] = [0; 3];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [0; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::Indifferent;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "    assert_eq!(_, Ok(DecodeMetadata::new(3, None)));",
          "    assert!(matches!(decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode), Ok(_)));",
          "    assert_eq!(output, [0, 1, 2]);",
          "    assert!(output.len() <= 3);",
          "    assert!(input.len() - input_index <= 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[0, 1, 2, PAD_BYTE];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 3] = [0; 3];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [0; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::Indifferent;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decode_suffix(&[0, 1, 2, PAD_BYTE], 0, &mut [0; 3], 0, &[0; 256], false, DecodePaddingMode::Indifferent), Ok(DecodeMetadata::new(3, None)));"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[0, 1, 2, PAD_BYTE];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 3] = [0; 3];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [0; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::Indifferent;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "    assert_eq!(decode_suffix(&[0, 1, 2, PAD_BYTE], 0, &mut [0; 3], 0, &[0; 256], false, DecodePaddingMode::Indifferent), Ok(DecodeMetadata::new(3, None)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[0, 1, PAD_BYTE, PAD_BYTE];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 3] = [0; 3];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [0; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::Indifferent;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_, Ok(DecodeMetadata::new(3, None)));",
          "    assert!(matches!(_, DecodeSliceError::OutputSliceTooSmall));",
          "    assert_eq!(padding_bytes_count, 0);",
          "    assert_eq!(morsels_in_leftover, 2);",
          "    assert!(input.is_empty() == false);",
          "    assert_eq!(leftover_index, 2);",
          "    assert!(b == PAD_BYTE);",
          "    assert_eq!(decode_allow_trailing_bits, false);",
          "    assert_eq!((leftover_num & mask), 0);",
          "    assert!(padding_mode == DecodePaddingMode::Indifferent);",
          "    assert!(padding_bytes_count > 0 == false);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[0, 1, PAD_BYTE, PAD_BYTE];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 3] = [0; 3];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [0; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::Indifferent;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "    assert_eq!(_, Ok(DecodeMetadata::new(3, None)));",
          "    assert!(matches!(_, DecodeSliceError::OutputSliceTooSmall));",
          "    assert_eq!(padding_bytes_count, 0);",
          "    assert_eq!(morsels_in_leftover, 2);",
          "    assert!(input.is_empty() == false);",
          "    assert_eq!(leftover_index, 2);",
          "    assert!(b == PAD_BYTE);",
          "    assert_eq!(decode_allow_trailing_bits, false);",
          "    assert_eq!((leftover_num & mask), 0);",
          "    assert!(padding_mode == DecodePaddingMode::Indifferent);",
          "    assert!(padding_bytes_count > 0 == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]