[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = &[b'A', b'B', b'C', b'=', b'=', b'=', b'D'];",
          "    let input_index = 0;",
          "    let mut output = [0u8; 4];",
          "    let output_index = 0;",
          "    let decode_table = [0u8; 256];",
          "    let decode_allow_trailing_bits = false;",
          "    let padding_mode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "}"
        ],
        "oracle": [
          "    let input = &[b'A', b'B', b'C', b'=', b'=', b'=', b'D'];",
          "    let input_index = 0;",
          "    let mut output = [0u8; 4];",
          "    let output_index = 0;",
          "    let decode_table = [0u8; 256];",
          "    let decode_allow_trailing_bits = false;",
          "    let padding_mode = DecodePaddingMode::RequireCanonical;",
          "    let result = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "    assert_eq!(result, Err(DecodeSliceError::DecodeError(DecodeError::InvalidByte(input_index + 2, PAD_BYTE))));"
        ],
        "code": [
          "{",
          "    let input = &[b'A', b'B', b'C', b'=', b'=', b'=', b'D'];",
          "    let input_index = 0;",
          "    let mut output = [0u8; 4];",
          "    let output_index = 0;",
          "    let decode_table = [0u8; 256];",
          "    let decode_allow_trailing_bits = false;",
          "    let padding_mode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "    let input = &[b'A', b'B', b'C', b'=', b'=', b'=', b'D'];",
          "    let input_index = 0;",
          "    let mut output = [0u8; 4];",
          "    let output_index = 0;",
          "    let decode_table = [0u8; 256];",
          "    let decode_allow_trailing_bits = false;",
          "    let padding_mode = DecodePaddingMode::RequireCanonical;",
          "    let result = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "    assert_eq!(result, Err(DecodeSliceError::DecodeError(DecodeError::InvalidByte(input_index + 2, PAD_BYTE))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]