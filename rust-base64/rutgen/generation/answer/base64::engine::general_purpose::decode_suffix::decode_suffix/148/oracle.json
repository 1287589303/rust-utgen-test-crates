[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[0, 1, 2, 255];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 10] = [0; 10];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [INVALID_VALUE; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode = DecodePaddingMode::Indifferent;",
          "",
          "    let _ = decode_suffix(",
          "        input,",
          "        input_index,",
          "        &mut output,",
          "        output_index,",
          "        &decode_table,",
          "        decode_allow_trailing_bits,",
          "        padding_mode,",
          "    );",
          "}"
        ],
        "oracle": [
          "    let input: &[u8] = &[0, 1, 2, 255];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 10] = [0; 10];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [INVALID_VALUE; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode = DecodePaddingMode::Indifferent;",
          "    let result = decode_suffix(",
          "    input,",
          "    input_index,",
          "    &mut output,",
          "    output_index,",
          "    &decode_table,",
          "    decode_allow_trailing_bits,",
          "    padding_mode,",
          "    );",
          "    assert!(result.is_err());",
          "    if let Err(DecodeSliceError::DecodeError(DecodeError::InvalidByte(offset, byte))) = result {",
          "    assert_eq!(offset, input_index + 3);",
          "    assert_eq!(byte, 255);",
          "    } else {",
          "    panic!(\"Expected InvalidByte error\");",
          "    }"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[0, 1, 2, 255];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 10] = [0; 10];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [INVALID_VALUE; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode = DecodePaddingMode::Indifferent;",
          "",
          "    let _ = decode_suffix(",
          "        input,",
          "        input_index,",
          "        &mut output,",
          "        output_index,",
          "        &decode_table,",
          "        decode_allow_trailing_bits,",
          "        padding_mode,",
          "    );",
          "    let input: &[u8] = &[0, 1, 2, 255];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 10] = [0; 10];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [INVALID_VALUE; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode = DecodePaddingMode::Indifferent;",
          "    let result = decode_suffix(",
          "    input,",
          "    input_index,",
          "    &mut output,",
          "    output_index,",
          "    &decode_table,",
          "    decode_allow_trailing_bits,",
          "    padding_mode,",
          "    );",
          "    assert!(result.is_err());",
          "    if let Err(DecodeSliceError::DecodeError(DecodeError::InvalidByte(offset, byte))) = result {",
          "    assert_eq!(offset, input_index + 3);",
          "    assert_eq!(byte, 255);",
          "    } else {",
          "    panic!(\"Expected InvalidByte error\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]