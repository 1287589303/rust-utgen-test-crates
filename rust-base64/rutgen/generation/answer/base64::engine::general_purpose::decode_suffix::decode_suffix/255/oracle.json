[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[0xFF, 0xFF, 0xFF, 0xFF]; // Length is 4",
          "    let input_index = 0;",
          "    let mut output: [u8; 10] = [0; 10]; // Output buffer of arbitrary length",
          "    let output_index = 0;",
          "    ",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        // Set some valid base64 values",
          "        table[b'A' as usize] = 0; // A = 0",
          "        table[b'/' as usize] = 63; // / = 63",
          "        table",
          "    };",
          "    ",
          "    let decode_allow_trailing_bits = false;",
          "    let padding_mode = DecodePaddingMode::Indifferent; // Any value is valid",
          "    ",
          "    let _ = decode_suffix(",
          "        input,",
          "        input_index,",
          "        &mut output,",
          "        output_index,",
          "        &decode_table,",
          "        decode_allow_trailing_bits,",
          "        padding_mode,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decode_suffix(&[0xFF, 0xFF, 0xFF, 0xFF], 0, &mut [0; 10], 0, &decode_table, false, DecodePaddingMode::Indifferent), Err(DecodeError::InvalidLength(4).into()));"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[0xFF, 0xFF, 0xFF, 0xFF]; // Length is 4",
          "    let input_index = 0;",
          "    let mut output: [u8; 10] = [0; 10]; // Output buffer of arbitrary length",
          "    let output_index = 0;",
          "    ",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        // Set some valid base64 values",
          "        table[b'A' as usize] = 0; // A = 0",
          "        table[b'/' as usize] = 63; // / = 63",
          "        table",
          "    };",
          "    ",
          "    let decode_allow_trailing_bits = false;",
          "    let padding_mode = DecodePaddingMode::Indifferent; // Any value is valid",
          "    ",
          "    let _ = decode_suffix(",
          "        input,",
          "        input_index,",
          "        &mut output,",
          "        output_index,",
          "        &decode_table,",
          "        decode_allow_trailing_bits,",
          "        padding_mode,",
          "    );",
          "    assert_eq!(decode_suffix(&[0xFF, 0xFF, 0xFF, 0xFF], 0, &mut [0; 10], 0, &decode_table, false, DecodePaddingMode::Indifferent), Err(DecodeError::InvalidLength(4).into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]