[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"QUJD==\"; // Valid base64 representation, last two equal padding bytes",
          "    let input_index = 0;",
          "    let mut output = [0u8; 4];",
          "    let output_index = 2; // Starting at index 2, makes 2 total bytes to decode",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'Q' as usize] = 16;",
          "        table[b'U' as usize] = 20;",
          "        table[b'J' as usize] = 9;",
          "        table[b'D' as usize] = 3;",
          "        table",
          "    };",
          "    let decode_allow_trailing_bits = false;",
          "    let padding_mode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decode_suffix(b\"QUJD==\", 0, &mut [0u8; 4], 2, &decode_table, false, DecodePaddingMode::RequireCanonical), Err(DecodeError::InvalidPadding.into()));"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"QUJD==\"; // Valid base64 representation, last two equal padding bytes",
          "    let input_index = 0;",
          "    let mut output = [0u8; 4];",
          "    let output_index = 2; // Starting at index 2, makes 2 total bytes to decode",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'Q' as usize] = 16;",
          "        table[b'U' as usize] = 20;",
          "        table[b'J' as usize] = 9;",
          "        table[b'D' as usize] = 3;",
          "        table",
          "    };",
          "    let decode_allow_trailing_bits = false;",
          "    let padding_mode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "    assert_eq!(decode_suffix(b\"QUJD==\", 0, &mut [0u8; 4], 2, &decode_table, false, DecodePaddingMode::RequireCanonical), Err(DecodeError::InvalidPadding.into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]