[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[b'A', b'B', b'C', b'=', b'=', b'=', b'=', b'='];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 10] = [0; 10];",
          "    let output_index: usize = 8;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0;",
          "        table[b'B' as usize] = 1;",
          "        table[b'C' as usize] = 2;",
          "        // ... Fill in valid values for the base64 decode table ...",
          "        table",
          "    };",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::Indifferent;",
          "",
          "    let _ = decode_suffix(",
          "        input,",
          "        input_index,",
          "        &mut output,",
          "        output_index,",
          "        &decode_table,",
          "        decode_allow_trailing_bits,",
          "        padding_mode,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ , Ok(DecodeMetadata::new(10, Some(3)));",
          "    assert!(matches!(_, DecodeSliceError::InvalidByte(3, b'=')));",
          "    assert!(matches!(_, DecodeError::InvalidPadding));",
          "    assert!(matches!(_, DecodeError::InvalidLength(5)));",
          "    assert!(matches!(_, DecodeError::InvalidLastSymbol(1, b'=')));",
          "    assert_eq!(output[..output_index], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0]);",
          "    assert_eq!(padding_bytes_count, 4);",
          "    assert_eq!(morsels_in_leftover, 2);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[b'A', b'B', b'C', b'=', b'=', b'=', b'=', b'='];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 10] = [0; 10];",
          "    let output_index: usize = 8;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0;",
          "        table[b'B' as usize] = 1;",
          "        table[b'C' as usize] = 2;",
          "        // ... Fill in valid values for the base64 decode table ...",
          "        table",
          "    };",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::Indifferent;",
          "",
          "    let _ = decode_suffix(",
          "        input,",
          "        input_index,",
          "        &mut output,",
          "        output_index,",
          "        &decode_table,",
          "        decode_allow_trailing_bits,",
          "        padding_mode,",
          "    );",
          "    assert_eq!(_ , Ok(DecodeMetadata::new(10, Some(3)));",
          "    assert!(matches!(_, DecodeSliceError::InvalidByte(3, b'=')));",
          "    assert!(matches!(_, DecodeError::InvalidPadding));",
          "    assert!(matches!(_, DecodeError::InvalidLength(5)));",
          "    assert!(matches!(_, DecodeError::InvalidLastSymbol(1, b'=')));",
          "    assert_eq!(output[..output_index], [0, 1, 2, 0, 0, 0, 0, 0, 0, 0]);",
          "    assert_eq!(padding_bytes_count, 4);",
          "    assert_eq!(morsels_in_leftover, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]