[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[b'A', b'B', b'C', PAD_BYTE];",
          "    let input_index: usize = 0;",
          "    let mut output: &mut [u8; 10] = &mut [0u8; 10];",
          "    let output_index: usize = 0;",
          "    let decode_table: &[u8; 256] = &[0; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, output, output_index, decode_table, decode_allow_trailing_bits, padding_mode);",
          "}"
        ],
        "oracle": [
          "    let input: &[u8] = &[b'A', b'B', b'C', PAD_BYTE];",
          "    let input_index: usize = 0;",
          "    let mut output: &mut [u8; 10] = &mut [0u8; 10];",
          "    let output_index: usize = 0;",
          "    let decode_table: &[u8; 256] = &[0; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::RequireCanonical;",
          "    ",
          "    let result = decode_suffix(input, input_index, output, output_index, decode_table, decode_allow_trailing_bits, padding_mode);",
          "    assert!(result.is_err());",
          "    if let Err(DecodeSliceError::DecodeError(DecodeError::InvalidByte(bad_index, bad_byte))) = result {",
          "    assert_eq!(bad_index, 3);",
          "    assert_eq!(bad_byte, PAD_BYTE);",
          "    } else {",
          "    panic!(\"Expected InvalidByte error\");",
          "    }"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[b'A', b'B', b'C', PAD_BYTE];",
          "    let input_index: usize = 0;",
          "    let mut output: &mut [u8; 10] = &mut [0u8; 10];",
          "    let output_index: usize = 0;",
          "    let decode_table: &[u8; 256] = &[0; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, output, output_index, decode_table, decode_allow_trailing_bits, padding_mode);",
          "    let input: &[u8] = &[b'A', b'B', b'C', PAD_BYTE];",
          "    let input_index: usize = 0;",
          "    let mut output: &mut [u8; 10] = &mut [0u8; 10];",
          "    let output_index: usize = 0;",
          "    let decode_table: &[u8; 256] = &[0; 256];",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::RequireCanonical;",
          "    ",
          "    let result = decode_suffix(input, input_index, output, output_index, decode_table, decode_allow_trailing_bits, padding_mode);",
          "    assert!(result.is_err());",
          "    if let Err(DecodeSliceError::DecodeError(DecodeError::InvalidByte(bad_index, bad_byte))) = result {",
          "    assert_eq!(bad_index, 3);",
          "    assert_eq!(bad_byte, PAD_BYTE);",
          "    } else {",
          "    panic!(\"Expected InvalidByte error\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]