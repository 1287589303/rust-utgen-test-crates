[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[b'A', b'B', b'C', b'D'];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 3] = [0; 3];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [",
          "        INVALID_VALUE; 256 // Initializing with INVALID_VALUE",
          "    ];",
          "    decode_table[b'A' as usize] = 0;",
          "    decode_table[b'B' as usize] = 1;",
          "    decode_table[b'C' as usize] = 2;",
          "    decode_table[b'D' as usize] = 3;",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decode_suffix(&[b'A', b'B', b'C', b'D'], 0, &mut [0; 3], 0, &decode_table, false, DecodePaddingMode::RequireCanonical), Ok(DecodeMetadata::new(3, None)));",
          "    assert!(matches!(decode_suffix(&[b'A', b'B', b'C', b'D'], 0, &mut [0; 3], 0, &decode_table, false, DecodePaddingMode::RequireCanonical).err(), None));",
          "    assert_eq!(output, [0, 1, 2]);",
          "    assert!(decode_suffix(&[b'A', b'B', b'C', b'D'], 0, &mut [0; 3], 0, &decode_table, false, DecodePaddingMode::RequireCanonical).is_ok());",
          "    assert_eq!(decode_suffix(&[b'A', b'B', b'C', b'D'], 0, &mut [0; 3], 0, &decode_table, false, DecodePaddingMode::RequireCanonical).unwrap().decoded_len, 3);",
          "    assert!(decode_suffix(&[b'A', b'B', b'C', b'D'], 0, &mut [0; 3], 0, &decode_table, false, DecodePaddingMode::RequireCanonical).unwrap().padding_offset.is_none());"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[b'A', b'B', b'C', b'D'];",
          "    let input_index: usize = 0;",
          "    let mut output: [u8; 3] = [0; 3];",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = [",
          "        INVALID_VALUE; 256 // Initializing with INVALID_VALUE",
          "    ];",
          "    decode_table[b'A' as usize] = 0;",
          "    decode_table[b'B' as usize] = 1;",
          "    decode_table[b'C' as usize] = 2;",
          "    decode_table[b'D' as usize] = 3;",
          "    let decode_allow_trailing_bits: bool = false;",
          "    let padding_mode: DecodePaddingMode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "    assert_eq!(decode_suffix(&[b'A', b'B', b'C', b'D'], 0, &mut [0; 3], 0, &decode_table, false, DecodePaddingMode::RequireCanonical), Ok(DecodeMetadata::new(3, None)));",
          "    assert!(matches!(decode_suffix(&[b'A', b'B', b'C', b'D'], 0, &mut [0; 3], 0, &decode_table, false, DecodePaddingMode::RequireCanonical).err(), None));",
          "    assert_eq!(output, [0, 1, 2]);",
          "    assert!(decode_suffix(&[b'A', b'B', b'C', b'D'], 0, &mut [0; 3], 0, &decode_table, false, DecodePaddingMode::RequireCanonical).is_ok());",
          "    assert_eq!(decode_suffix(&[b'A', b'B', b'C', b'D'], 0, &mut [0; 3], 0, &decode_table, false, DecodePaddingMode::RequireCanonical).unwrap().decoded_len, 3);",
          "    assert!(decode_suffix(&[b'A', b'B', b'C', b'D'], 0, &mut [0; 3], 0, &decode_table, false, DecodePaddingMode::RequireCanonical).unwrap().padding_offset.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]