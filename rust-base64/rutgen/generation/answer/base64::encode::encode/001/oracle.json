[
  {
    "uses": [
      "use super::*;"
    ],
    "has_test_mod": true,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[];",
          "    let _ = encode(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(encode(b\"\"), \"\");",
          "    assert_eq!(encode(b\"hello\"), \"aGVsbG8=\");",
          "    assert_eq!(encode(b\"hello world\"), \"aGVsbG8gd29ybGQ=\");",
          "    assert_eq!(encode(b\"base64\"), \"YmFzZTY0\");",
          "    assert_eq!(encode(b\"test123\"), \"dGVzdDEyMw==\");",
          "    assert_eq!(encode(b\"\\0\"), \"AA==\");",
          "    assert_eq!(encode(b\"hello\\x00\"), \"aGVsbGATAA==\");",
          "    assert_eq!(encode(&[1, 2, 3, 4, 5]), \"AQIDBAU=\");",
          "    assert_eq!(encode(&[255, 254, 253]), \"//8=\");"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[];",
          "    let _ = encode(input);",
          "    assert_eq!(encode(b\"\"), \"\");",
          "    assert_eq!(encode(b\"hello\"), \"aGVsbG8=\");",
          "    assert_eq!(encode(b\"hello world\"), \"aGVsbG8gd29ybGQ=\");",
          "    assert_eq!(encode(b\"base64\"), \"YmFzZTY0\");",
          "    assert_eq!(encode(b\"test123\"), \"dGVzdDEyMw==\");",
          "    assert_eq!(encode(b\"\\0\"), \"AA==\");",
          "    assert_eq!(encode(b\"hello\\x00\"), \"aGVsbGATAA==\");",
          "    assert_eq!(encode(&[1, 2, 3, 4, 5]), \"AQIDBAU=\");",
          "    assert_eq!(encode(&[255, 254, 253]), \"//8=\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[0b00000001];",
          "    let _ = encode(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(encode(&[0b00000001]), \"AQ==\");",
          "    assert_eq!(encode(&[0b00000000]), \"AA==\");",
          "    assert_eq!(encode(&[0b11111111]), \"///8=\");",
          "    assert_eq!(encode(&[0b10101010, 0b01010101]), \"qVU=\");",
          "    assert_eq!(encode(&[]), \"\");",
          "    assert_eq!(encode(&[b'T', b'e', b's', b't']), \"VGVzdA==\");",
          "    assert_eq!(encode(&[b'A', b'B', b'C', b'D', b'E', b'F']), \"QUJDREQ=\");"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[0b00000001];",
          "    let _ = encode(input);",
          "    assert_eq!(encode(&[0b00000001]), \"AQ==\");",
          "    assert_eq!(encode(&[0b00000000]), \"AA==\");",
          "    assert_eq!(encode(&[0b11111111]), \"///8=\");",
          "    assert_eq!(encode(&[0b10101010, 0b01010101]), \"qVU=\");",
          "    assert_eq!(encode(&[]), \"\");",
          "    assert_eq!(encode(&[b'T', b'e', b's', b't']), \"VGVzdA==\");",
          "    assert_eq!(encode(&[b'A', b'B', b'C', b'D', b'E', b'F']), \"QUJDREQ=\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[0b00000001, 0b00000010];",
          "    let _ = encode(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(encode(&[0b00000001, 0b00000010]), \"AQI=\");",
          "    assert_eq!(encode(&[0b11111111]), \"/w==\");",
          "    assert_eq!(encode(&[]), \"\");",
          "    assert_eq!(encode(&[0b01010101, 0b01010101, 0b01010101]), \"VVU=\");",
          "    assert_eq!(encode(&[0b00000001]), \"AQ==\");",
          "    assert_eq!(encode(&[0b10101010, 0b01010101]), \"qVU=\");",
          "    assert_eq!(encode(&[0b00110011, 0b11001100]), \"Mw==\");",
          "    assert_eq!(encode(&[0b00010000, 0b11110000, 0b00111111]), \"BASE64==\");"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[0b00000001, 0b00000010];",
          "    let _ = encode(input);",
          "    assert_eq!(encode(&[0b00000001, 0b00000010]), \"AQI=\");",
          "    assert_eq!(encode(&[0b11111111]), \"/w==\");",
          "    assert_eq!(encode(&[]), \"\");",
          "    assert_eq!(encode(&[0b01010101, 0b01010101, 0b01010101]), \"VVU=\");",
          "    assert_eq!(encode(&[0b00000001]), \"AQ==\");",
          "    assert_eq!(encode(&[0b10101010, 0b01010101]), \"qVU=\");",
          "    assert_eq!(encode(&[0b00110011, 0b11001100]), \"Mw==\");",
          "    assert_eq!(encode(&[0b00010000, 0b11110000, 0b00111111]), \"BASE64==\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[0b00000101, 0b00001010, 0b00010001];",
          "    let _ = encode(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(encode(&[0b00000101, 0b00001010, 0b00010001]), \"BQogEQ==\");"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[0b00000101, 0b00001010, 0b00010001];",
          "    let _ = encode(input);",
          "    assert_eq!(encode(&[0b00000101, 0b00001010, 0b00010001]), \"BQogEQ==\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[0xFF, 0xFE, 0xFD, 0xFC];",
          "    let _ = encode(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(encode(&[0xFF, 0xFE, 0xFD, 0xFC]), \"/// Expected base64 output for these values ///\");"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[0xFF, 0xFE, 0xFD, 0xFC];",
          "    let _ = encode(input);",
          "    assert_eq!(encode(&[0xFF, 0xFE, 0xFD, 0xFC]), \"/// Expected base64 output for these values ///\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Vec<u8> = (0..=255).collect();",
          "    let _ = encode(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(encode(vec![0]), \"AA==\");",
          "    assert_eq!(encode(vec![1]), \"AQ==\");",
          "    assert_eq!(encode(vec![255]), \"/w==\");",
          "    assert_eq!(encode(vec![65, 66, 67]), \"QUJD\");",
          "    assert_eq!(encode(b\"Hello, World!\"), \"SGVsbG8sIFdvcmxkIQ==\");",
          "    assert_eq!(encode(vec![]), \"\");"
        ],
        "code": [
          "{",
          "    let input: Vec<u8> = (0..=255).collect();",
          "    let _ = encode(&input);",
          "    assert_eq!(encode(vec![0]), \"AA==\");",
          "    assert_eq!(encode(vec![1]), \"AQ==\");",
          "    assert_eq!(encode(vec![255]), \"/w==\");",
          "    assert_eq!(encode(vec![65, 66, 67]), \"QUJD\");",
          "    assert_eq!(encode(b\"Hello, World!\"), \"SGVsbG8sIFdvcmxkIQ==\");",
          "    assert_eq!(encode(vec![]), \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]