[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(0, 0);",
          "    let mut f = fmt::Formatter::new();",
          "    let _ = error.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"Invalid last symbol 0, offset 0.\")"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(0, 0);",
          "    let mut f = fmt::Formatter::new();",
          "    let _ = error.fmt(&mut f);",
          "    write!(f, \"Invalid last symbol 0, offset 0.\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(usize::MAX, 255);",
          "    let mut f = fmt::Formatter::new();",
          "    let _ = error.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"Invalid last symbol {}, offset {}.\", 255, usize::MAX);",
          "    assert_eq!(format!(\"{}\", error), \"Invalid last symbol 255, offset 4294967295.\");",
          "    assert!(matches!(error, DecodeError::InvalidLastSymbol(usize::MAX, 255)));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(usize::MAX, 255);",
          "    let mut f = fmt::Formatter::new();",
          "    let _ = error.fmt(&mut f);",
          "    write!(f, \"Invalid last symbol {}, offset {}.\", 255, usize::MAX);",
          "    assert_eq!(format!(\"{}\", error), \"Invalid last symbol 255, offset 4294967295.\");",
          "    assert!(matches!(error, DecodeError::InvalidLastSymbol(usize::MAX, 255)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(123, 129);",
          "    let mut f = fmt::Formatter::new();",
          "    let _ = error.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"Invalid last symbol {}, offset {}.\", 129, 123);",
          "    assert_eq!(format!(\"{}\", error), \"Invalid last symbol 129, offset 123.\");",
          "    assert!(matches!(error, DecodeError::InvalidLastSymbol(123, 129)));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(123, 129);",
          "    let mut f = fmt::Formatter::new();",
          "    let _ = error.fmt(&mut f);",
          "    write!(f, \"Invalid last symbol {}, offset {}.\", 129, 123);",
          "    assert_eq!(format!(\"{}\", error), \"Invalid last symbol 129, offset 123.\");",
          "    assert!(matches!(error, DecodeError::InvalidLastSymbol(123, 129)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(5, 250);",
          "    let mut f = fmt::Formatter::new();",
          "    let _ = error.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(f.buffer(), \"Invalid last symbol 250, offset 5.\");",
          "    assert!(f.is_empty() == false);",
          "    assert!(f.has_error() == false);",
          "    assert!(f.overflowed() == false);",
          "    assert!(f.error().is_none());"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(5, 250);",
          "    let mut f = fmt::Formatter::new();",
          "    let _ = error.fmt(&mut f);",
          "    assert_eq!(f.buffer(), \"Invalid last symbol 250, offset 5.\");",
          "    assert!(f.is_empty() == false);",
          "    assert!(f.has_error() == false);",
          "    assert!(f.overflowed() == false);",
          "    assert!(f.error().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(2, 1);",
          "    let mut f = fmt::Formatter::new();",
          "    let _ = error.fmt(&mut f);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(f.to_string(), \"Invalid last symbol 1, offset 2.\");"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(2, 1);",
          "    let mut f = fmt::Formatter::new();",
          "    let _ = error.fmt(&mut f);",
          "    assert_eq!(f.to_string(), \"Invalid last symbol 1, offset 2.\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]