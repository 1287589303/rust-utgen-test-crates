[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let duplicated_byte: u8 = 0x41; // 'A'",
          "    let error = ParseAlphabetError::DuplicatedByte(duplicated_byte);",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x41)), \"Duplicated byte: 0x41\");",
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x42)), \"Duplicated byte: 0x42\");",
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0xFF)), \"Duplicated byte: 0xff\");",
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x00)), \"Duplicated byte: 0x00\");"
        ],
        "code": [
          "{",
          "    let duplicated_byte: u8 = 0x41; // 'A'",
          "    let error = ParseAlphabetError::DuplicatedByte(duplicated_byte);",
          "    let _ = format!(\"{}\", error);",
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x41)), \"Duplicated byte: 0x41\");",
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x42)), \"Duplicated byte: 0x42\");",
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0xFF)), \"Duplicated byte: 0xff\");",
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x00)), \"Duplicated byte: 0x00\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let duplicated_byte: u8 = 0x0A; // Control character (Line Feed)",
          "    let error = ParseAlphabetError::DuplicatedByte(duplicated_byte);",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x0A)), \"Duplicated byte: 0x0a\");"
        ],
        "code": [
          "{",
          "    let duplicated_byte: u8 = 0x0A; // Control character (Line Feed)",
          "    let error = ParseAlphabetError::DuplicatedByte(duplicated_byte);",
          "    let _ = format!(\"{}\", error);",
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x0A)), \"Duplicated byte: 0x0a\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let duplicated_byte: u8 = 0x3F; // '?'",
          "    let error = ParseAlphabetError::DuplicatedByte(duplicated_byte);",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x3F)), \"Duplicated byte: 0x3f\");"
        ],
        "code": [
          "{",
          "    let duplicated_byte: u8 = 0x3F; // '?'",
          "    let error = ParseAlphabetError::DuplicatedByte(duplicated_byte);",
          "    let _ = format!(\"{}\", error);",
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x3F)), \"Duplicated byte: 0x3f\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let duplicated_byte: u8 = 0x7F; // Delete",
          "    let error = ParseAlphabetError::DuplicatedByte(duplicated_byte);",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x7F)), \"Duplicated byte: 0x7f\");",
          "    assert!(matches!(error, ParseAlphabetError::DuplicatedByte(0x7F)));"
        ],
        "code": [
          "{",
          "    let duplicated_byte: u8 = 0x7F; // Delete",
          "    let error = ParseAlphabetError::DuplicatedByte(duplicated_byte);",
          "    let _ = format!(\"{}\", error);",
          "    assert_eq!(format!(\"{}\", ParseAlphabetError::DuplicatedByte(0x7F)), \"Duplicated byte: 0x7f\");",
          "    assert!(matches!(error, ParseAlphabetError::DuplicatedByte(0x7F)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let duplicated_byte: u8 = 0x80; // First byte above valid ASCII range",
          "    let error = ParseAlphabetError::DuplicatedByte(duplicated_byte);",
          "    let _ = format!(\"{}\", error);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"Duplicated byte: {:#04x}\", 0x80)"
        ],
        "code": [
          "{",
          "    let duplicated_byte: u8 = 0x80; // First byte above valid ASCII range",
          "    let error = ParseAlphabetError::DuplicatedByte(duplicated_byte);",
          "    let _ = format!(\"{}\", error);",
          "    write!(f, \"Duplicated byte: {:#04x}\", 0x80)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]