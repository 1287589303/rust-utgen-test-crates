[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEngine {",
          "        config: GeneralPurposeConfig,",
          "    }",
          "    ",
          "    let engine = TestEngine {",
          "        config: GeneralPurposeConfig {",
          "            encode_padding: true,",
          "            decode_allow_trailing_bits: false,",
          "            decode_padding_mode: DecodePaddingMode::RequirePadding,",
          "        },",
          "    };",
          "    let _ = engine.config();",
          "}"
        ],
        "oracle": [
          "    assert!(engine.config().encode_padding);",
          "    assert!(!engine.config().decode_allow_trailing_bits);",
          "    assert_eq!(engine.config().decode_padding_mode, DecodePaddingMode::RequirePadding);"
        ],
        "code": [
          "{",
          "    struct TestEngine {",
          "        config: GeneralPurposeConfig,",
          "    }",
          "    ",
          "    let engine = TestEngine {",
          "        config: GeneralPurposeConfig {",
          "            encode_padding: true,",
          "            decode_allow_trailing_bits: false,",
          "            decode_padding_mode: DecodePaddingMode::RequirePadding,",
          "        },",
          "    };",
          "    let _ = engine.config();",
          "    assert!(engine.config().encode_padding);",
          "    assert!(!engine.config().decode_allow_trailing_bits);",
          "    assert_eq!(engine.config().decode_padding_mode, DecodePaddingMode::RequirePadding);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEngine {",
          "        config: GeneralPurposeConfig,",
          "    }",
          "    ",
          "    let engine = TestEngine {",
          "        config: GeneralPurposeConfig {",
          "            encode_padding: true,",
          "            decode_allow_trailing_bits: false,",
          "            decode_padding_mode: DecodePaddingMode::Indifferent,",
          "        },",
          "    };",
          "    let _ = engine.config();",
          "}"
        ],
        "oracle": [
          "    let engine = TestEngine {",
          "    config: GeneralPurposeConfig {",
          "    encode_padding: true,",
          "    decode_allow_trailing_bits: false,",
          "    decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    },",
          "    };",
          "    assert_eq!(engine.config().encode_padding, true);",
          "    assert_eq!(engine.config().decode_allow_trailing_bits, false);",
          "    assert_eq!(engine.config().decode_padding_mode, DecodePaddingMode::Indifferent);"
        ],
        "code": [
          "{",
          "    struct TestEngine {",
          "        config: GeneralPurposeConfig,",
          "    }",
          "    ",
          "    let engine = TestEngine {",
          "        config: GeneralPurposeConfig {",
          "            encode_padding: true,",
          "            decode_allow_trailing_bits: false,",
          "            decode_padding_mode: DecodePaddingMode::Indifferent,",
          "        },",
          "    };",
          "    let _ = engine.config();",
          "    let engine = TestEngine {",
          "    config: GeneralPurposeConfig {",
          "    encode_padding: true,",
          "    decode_allow_trailing_bits: false,",
          "    decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    },",
          "    };",
          "    assert_eq!(engine.config().encode_padding, true);",
          "    assert_eq!(engine.config().decode_allow_trailing_bits, false);",
          "    assert_eq!(engine.config().decode_padding_mode, DecodePaddingMode::Indifferent);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEngine {",
          "        config: GeneralPurposeConfig,",
          "    }",
          "    ",
          "    let engine = TestEngine {",
          "        config: GeneralPurposeConfig {",
          "            encode_padding: false,",
          "            decode_allow_trailing_bits: false,",
          "            decode_padding_mode: DecodePaddingMode::RequireNone,",
          "        },",
          "    };",
          "    let _ = engine.config();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(engine.config().encode_padding, false);",
          "    assert_eq!(engine.config().decode_allow_trailing_bits, false);",
          "    assert_eq!(engine.config().decode_padding_mode, DecodePaddingMode::RequireNone);"
        ],
        "code": [
          "{",
          "    struct TestEngine {",
          "        config: GeneralPurposeConfig,",
          "    }",
          "    ",
          "    let engine = TestEngine {",
          "        config: GeneralPurposeConfig {",
          "            encode_padding: false,",
          "            decode_allow_trailing_bits: false,",
          "            decode_padding_mode: DecodePaddingMode::RequireNone,",
          "        },",
          "    };",
          "    let _ = engine.config();",
          "    assert_eq!(engine.config().encode_padding, false);",
          "    assert_eq!(engine.config().decode_allow_trailing_bits, false);",
          "    assert_eq!(engine.config().decode_padding_mode, DecodePaddingMode::RequireNone);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEngine {",
          "        config: GeneralPurposeConfig,",
          "    }",
          "    ",
          "    let engine = TestEngine {",
          "        config: GeneralPurposeConfig {",
          "            encode_padding: false,",
          "            decode_allow_trailing_bits: false,",
          "            decode_padding_mode: DecodePaddingMode::Indifferent,",
          "        },",
          "    };",
          "    let _ = engine.config();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(engine.config().encode_padding, false);",
          "    assert_eq!(engine.config().decode_allow_trailing_bits, false);",
          "    assert_eq!(engine.config().decode_padding_mode, DecodePaddingMode::Indifferent);"
        ],
        "code": [
          "{",
          "    struct TestEngine {",
          "        config: GeneralPurposeConfig,",
          "    }",
          "    ",
          "    let engine = TestEngine {",
          "        config: GeneralPurposeConfig {",
          "            encode_padding: false,",
          "            decode_allow_trailing_bits: false,",
          "            decode_padding_mode: DecodePaddingMode::Indifferent,",
          "        },",
          "    };",
          "    let _ = engine.config();",
          "    assert_eq!(engine.config().encode_padding, false);",
          "    assert_eq!(engine.config().decode_allow_trailing_bits, false);",
          "    assert_eq!(engine.config().decode_padding_mode, DecodePaddingMode::Indifferent);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]