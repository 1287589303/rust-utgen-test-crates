[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', b'D', b'!', b'E', b'F', b'G']; // '!' is invalid",
          "    let index_at_start_of_input = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0;",
          "        table[b'B' as usize] = 1;",
          "        table[b'C' as usize] = 2;",
          "        table[b'D' as usize] = 3;",
          "        // '!' is not set, keeping INVALID_VALUE",
          "        table[b'E' as usize] = 4;",
          "        table[b'F' as usize] = 5;",
          "        table[b'G' as usize] = 6;",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(index_at_start_of_input + 4, input[4])));"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', b'D', b'!', b'E', b'F', b'G']; // '!' is invalid",
          "    let index_at_start_of_input = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0;",
          "        table[b'B' as usize] = 1;",
          "        table[b'C' as usize] = 2;",
          "        table[b'D' as usize] = 3;",
          "        // '!' is not set, keeping INVALID_VALUE",
          "        table[b'E' as usize] = 4;",
          "        table[b'F' as usize] = 5;",
          "        table[b'G' as usize] = 6;",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(index_at_start_of_input + 4, input[4])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', b'D', b'$', b'E', b'F', b'G']; // '$' is invalid",
          "    let index_at_start_of_input = 5;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0;",
          "        table[b'B' as usize] = 1;",
          "        table[b'C' as usize] = 2;",
          "        table[b'D' as usize] = 3;",
          "        // '$' is not set, keeping INVALID_VALUE",
          "        table[b'E' as usize] = 4;",
          "        table[b'F' as usize] = 5;",
          "        table[b'G' as usize] = 6;",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(index_at_start_of_input + 4, input[4])));"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', b'D', b'$', b'E', b'F', b'G']; // '$' is invalid",
          "    let index_at_start_of_input = 5;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0;",
          "        table[b'B' as usize] = 1;",
          "        table[b'C' as usize] = 2;",
          "        table[b'D' as usize] = 3;",
          "        // '$' is not set, keeping INVALID_VALUE",
          "        table[b'E' as usize] = 4;",
          "        table[b'F' as usize] = 5;",
          "        table[b'G' as usize] = 6;",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(index_at_start_of_input + 4, input[4])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]