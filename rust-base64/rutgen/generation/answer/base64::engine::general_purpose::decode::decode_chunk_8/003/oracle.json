[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = ['A' as u8, 'B' as u8, '!' as u8, 'D' as u8, 'E' as u8, 'F' as u8, 'G' as u8, 'H' as u8]; // '!' is not a valid base64 character",
          "    let index_at_start_of_input = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table['A' as usize] = 0;",
          "        table['B' as usize] = 1;",
          "        table['C' as usize] = 2;",
          "        table['D' as usize] = 3;",
          "        table['E' as usize] = 4;",
          "        table['F' as usize] = 5;",
          "        table['G' as usize] = 6;",
          "        table['H' as usize] = 7;",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    ",
          "    let result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    // Result should be an Err due to the invalid base64 character at index 2",
          "}"
        ],
        "oracle": [
          "    result.unwrap_err() == DecodeError::InvalidByte(2, input[2])"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = ['A' as u8, 'B' as u8, '!' as u8, 'D' as u8, 'E' as u8, 'F' as u8, 'G' as u8, 'H' as u8]; // '!' is not a valid base64 character",
          "    let index_at_start_of_input = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table['A' as usize] = 0;",
          "        table['B' as usize] = 1;",
          "        table['C' as usize] = 2;",
          "        table['D' as usize] = 3;",
          "        table['E' as usize] = 4;",
          "        table['F' as usize] = 5;",
          "        table['G' as usize] = 6;",
          "        table['H' as usize] = 7;",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    ",
          "    let result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    // Result should be an Err due to the invalid base64 character at index 2",
          "    result.unwrap_err() == DecodeError::InvalidByte(2, input[2])",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = ['A' as u8, 'B' as u8, 'C' as u8, '%' as u8, 'E' as u8, 'F' as u8, 'G' as u8, 'H' as u8]; // '%' is not a valid base64 character",
          "    let index_at_start_of_input = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table['A' as usize] = 0;",
          "        table['B' as usize] = 1;",
          "        table['C' as usize] = 2;",
          "        table['D' as usize] = 3;",
          "        table['E' as usize] = 4;",
          "        table['F' as usize] = 5;",
          "        table['G' as usize] = 6;",
          "        table['H' as usize] = 7;",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    ",
          "    let result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    // Result should be an Err due to the invalid base64 character at index 3",
          "}"
        ],
        "oracle": [
          "    let input: [u8; 8] = ['A' as u8, 'B' as u8, 'C' as u8, '%' as u8, 'E' as u8, 'F' as u8, 'G' as u8, 'H' as u8];",
          "    let index_at_start_of_input = 0;",
          "    let decode_table: [u8; 256] = { let mut table = [INVALID_VALUE; 256]; table['A' as usize] = 0; table['B' as usize] = 1; table['C' as usize] = 2; table['D' as usize] = 3; table['E' as usize] = 4; table['F' as usize] = 5; table['G' as usize] = 6; table['H' as usize] = 7; table };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(result, Err(DecodeError::InvalidByte(2, input[3])));"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = ['A' as u8, 'B' as u8, 'C' as u8, '%' as u8, 'E' as u8, 'F' as u8, 'G' as u8, 'H' as u8]; // '%' is not a valid base64 character",
          "    let index_at_start_of_input = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table['A' as usize] = 0;",
          "        table['B' as usize] = 1;",
          "        table['C' as usize] = 2;",
          "        table['D' as usize] = 3;",
          "        table['E' as usize] = 4;",
          "        table['F' as usize] = 5;",
          "        table['G' as usize] = 6;",
          "        table['H' as usize] = 7;",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    ",
          "    let result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    // Result should be an Err due to the invalid base64 character at index 3",
          "    let input: [u8; 8] = ['A' as u8, 'B' as u8, 'C' as u8, '%' as u8, 'E' as u8, 'F' as u8, 'G' as u8, 'H' as u8];",
          "    let index_at_start_of_input = 0;",
          "    let decode_table: [u8; 256] = { let mut table = [INVALID_VALUE; 256]; table['A' as usize] = 0; table['B' as usize] = 1; table['C' as usize] = 2; table['D' as usize] = 3; table['E' as usize] = 4; table['F' as usize] = 5; table['G' as usize] = 6; table['H' as usize] = 7; table };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(result, Err(DecodeError::InvalidByte(2, input[3])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]