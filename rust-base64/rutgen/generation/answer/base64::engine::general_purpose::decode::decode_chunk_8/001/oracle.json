[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = [0xFF, b'A', b'B', b'C', b'D', b'E', b'F', b'G'];",
          "    let index_at_start_of_input = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(0, 0xFF)));"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = [0xFF, b'A', b'B', b'C', b'D', b'E', b'F', b'G'];",
          "    let index_at_start_of_input = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(0, 0xFF)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = [b'A', 0xFF, b'C', b'D', b'E', b'F', b'G', b'H'];",
          "    let index_at_start_of_input = 1;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(index_at_start_of_input, input[1])));"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = [b'A', 0xFF, b'C', b'D', b'E', b'F', b'G', b'H'];",
          "    let index_at_start_of_input = 1;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(index_at_start_of_input, input[1])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', 0xFF, b'D', b'E', b'F', b'G', b'H'];",
          "    let index_at_start_of_input = 2;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    _err_result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);_",
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(index_at_start_of_input, input[0])));"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', 0xFF, b'D', b'E', b'F', b'G', b'H'];",
          "    let index_at_start_of_input = 2;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    _err_result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);_",
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(index_at_start_of_input, input[0])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', 0xFF, b'E', b'F', b'G', b'H'];",
          "    let index_at_start_of_input = 3;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    _err_result = Err(DecodeError::InvalidByte(index_at_start_of_input, input[0]));",
          "    assert_eq!(_result, _err_result);"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', 0xFF, b'E', b'F', b'G', b'H'];",
          "    let index_at_start_of_input = 3;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    _err_result = Err(DecodeError::InvalidByte(index_at_start_of_input, input[0]));",
          "    assert_eq!(_result, _err_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', b'D', 0xFF, b'F', b'G', b'H'];",
          "    let index_at_start_of_input = 4;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(index_at_start_of_input, input[4])));"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', b'D', 0xFF, b'F', b'G', b'H'];",
          "    let index_at_start_of_input = 4;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(index_at_start_of_input, input[4])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', b'D', b'E', 0xFF, b'G', b'H'];",
          "    let index_at_start_of_input = 5;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(5, 0xFF)));"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', b'D', b'E', 0xFF, b'G', b'H'];",
          "    let index_at_start_of_input = 5;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'G' as usize] = 6; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(5, 0xFF)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', b'D', b'E', b'F', 0xFF, b'H'];",
          "    let index_at_start_of_input = 6;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    Err(DecodeError::InvalidByte(6, 255))"
        ],
        "code": [
          "{",
          "    let input: [u8; 8] = [b'A', b'B', b'C', b'D', b'E', b'F', 0xFF, b'H'];",
          "    let index_at_start_of_input = 6;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [0; 256];",
          "        table[0xFF] = INVALID_VALUE;",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table[b'D' as usize] = 3; // valid",
          "        table[b'E' as usize] = 4; // valid",
          "        table[b'F' as usize] = 5; // valid",
          "        table[b'H' as usize] = 7; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 6] = [0; 6];",
          "    let _result = decode_chunk_8(&input, index_at_start_of_input, &decode_table, &mut output);",
          "    Err(DecodeError::InvalidByte(6, 255))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]