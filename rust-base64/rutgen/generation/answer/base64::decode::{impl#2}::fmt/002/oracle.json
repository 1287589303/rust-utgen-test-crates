[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeSliceError::DecodeError(DecodeError::InvalidByte(0, 255));",
          "    let mut formatter = fmt::Formatter::new();",
          "    error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let error = DecodeSliceError::DecodeError(DecodeError::InvalidByte(0, 255));",
          "    let mut formatter = fmt::Formatter::new();",
          "    assert_eq!(error.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"DecodeError: InvalidByte(0, 255)\");"
        ],
        "code": [
          "{",
          "    let error = DecodeSliceError::DecodeError(DecodeError::InvalidByte(0, 255));",
          "    let mut formatter = fmt::Formatter::new();",
          "    error.fmt(&mut formatter);",
          "    let error = DecodeSliceError::DecodeError(DecodeError::InvalidByte(0, 255));",
          "    let mut formatter = fmt::Formatter::new();",
          "    assert_eq!(error.fmt(&mut formatter).is_ok(), true);",
          "    assert_eq!(formatter.to_string(), \"DecodeError: InvalidByte(0, 255)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeSliceError::DecodeError(DecodeError::InvalidLength(1));",
          "    let mut formatter = fmt::Formatter::new();",
          "    error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.output(), \"DecodeError: InvalidLength(1)\");"
        ],
        "code": [
          "{",
          "    let error = DecodeSliceError::DecodeError(DecodeError::InvalidLength(1));",
          "    let mut formatter = fmt::Formatter::new();",
          "    error.fmt(&mut formatter);",
          "    assert_eq!(formatter.output(), \"DecodeError: InvalidLength(1)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeSliceError::DecodeError(DecodeError::InvalidLastSymbol(2, 128));",
          "    let mut formatter = fmt::Formatter::new();",
          "    error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer().contains(\"DecodeError: InvalidLastSymbol(2, 128)\"), true);",
          "    assert_eq!(formatter.buffer().len() > 0, true);",
          "    assert_eq!(formatter.buffer().contains(\"Output slice too small\"), false);"
        ],
        "code": [
          "{",
          "    let error = DecodeSliceError::DecodeError(DecodeError::InvalidLastSymbol(2, 128));",
          "    let mut formatter = fmt::Formatter::new();",
          "    error.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer().contains(\"DecodeError: InvalidLastSymbol(2, 128)\"), true);",
          "    assert_eq!(formatter.buffer().len() > 0, true);",
          "    assert_eq!(formatter.buffer().contains(\"Output slice too small\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeSliceError::DecodeError(DecodeError::InvalidPadding);",
          "    let mut formatter = fmt::Formatter::new();",
          "    error.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"DecodeError: InvalidPadding\") == Ok(())",
          "    write!(f, \"DecodeError: {}\", e) == Ok(()) where e is DecodeError::InvalidPadding",
          "    self is DecodeSliceError::DecodeError(DecodeError::InvalidPadding)",
          "    format!(\"{}\", error) == \"DecodeError: InvalidPadding\""
        ],
        "code": [
          "{",
          "    let error = DecodeSliceError::DecodeError(DecodeError::InvalidPadding);",
          "    let mut formatter = fmt::Formatter::new();",
          "    error.fmt(&mut formatter);",
          "    write!(f, \"DecodeError: InvalidPadding\") == Ok(())",
          "    write!(f, \"DecodeError: {}\", e) == Ok(()) where e is DecodeError::InvalidPadding",
          "    self is DecodeSliceError::DecodeError(DecodeError::InvalidPadding)",
          "    format!(\"{}\", error) == \"DecodeError: InvalidPadding\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]