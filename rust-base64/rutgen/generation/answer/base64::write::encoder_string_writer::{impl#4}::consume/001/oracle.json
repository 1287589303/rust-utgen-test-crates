[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut consumer = String::new();",
          "    let input = \"\";",
          "    consumer.consume(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(consumer, \"\");",
          "    consumer.consume(\"test\");",
          "    assert_eq!(consumer, \"test\");",
          "    consumer.consume(\"123\");",
          "    assert_eq!(consumer, \"test123\");",
          "    consumer.consume(\" \");",
          "    assert_eq!(consumer, \"test123 \");",
          "    consumer.consume(\"\\n\");",
          "    assert_eq!(consumer, \"test123 \\n\");",
          "    consumer.consume(\"longer string example\");",
          "    assert_eq!(consumer, \"test123 \\nlonger string example\");"
        ],
        "code": [
          "{",
          "    let mut consumer = String::new();",
          "    let input = \"\";",
          "    consumer.consume(input);",
          "    assert_eq!(consumer, \"\");",
          "    consumer.consume(\"test\");",
          "    assert_eq!(consumer, \"test\");",
          "    consumer.consume(\"123\");",
          "    assert_eq!(consumer, \"test123\");",
          "    consumer.consume(\" \");",
          "    assert_eq!(consumer, \"test123 \");",
          "    consumer.consume(\"\\n\");",
          "    assert_eq!(consumer, \"test123 \\n\");",
          "    consumer.consume(\"longer string example\");",
          "    assert_eq!(consumer, \"test123 \\nlonger string example\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut consumer = String::new();",
          "    let input = \"a\";",
          "    consumer.consume(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(consumer, \"a\");"
        ],
        "code": [
          "{",
          "    let mut consumer = String::new();",
          "    let input = \"a\";",
          "    consumer.consume(input);",
          "    assert_eq!(consumer, \"a\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut consumer = String::new();",
          "    let input = \"a\".repeat(usize::MAX); // Note: Actual max length for String is implementation specific; ensure it fits!",
          "    consumer.consume(&input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(consumer.len(), input.len());",
          "    assert_eq!(consumer, input);",
          "    assert!(consumer.capacity() >= input.len());"
        ],
        "code": [
          "{",
          "    let mut consumer = String::new();",
          "    let input = \"a\".repeat(usize::MAX); // Note: Actual max length for String is implementation specific; ensure it fits!",
          "    consumer.consume(&input);",
          "    assert_eq!(consumer.len(), input.len());",
          "    assert_eq!(consumer, input);",
          "    assert!(consumer.capacity() >= input.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut consumer = String::new();",
          "    let input = \"!@#$%^&*()\";",
          "    consumer.consume(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(consumer, \"!@#$%^&*()\");"
        ],
        "code": [
          "{",
          "    let mut consumer = String::new();",
          "    let input = \"!@#$%^&*()\";",
          "    consumer.consume(input);",
          "    assert_eq!(consumer, \"!@#$%^&*()\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut consumer = String::new();",
          "    let input = \"\\n\\n\";",
          "    consumer.consume(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(consumer, \"\\n\\n\");"
        ],
        "code": [
          "{",
          "    let mut consumer = String::new();",
          "    let input = \"\\n\\n\";",
          "    consumer.consume(input);",
          "    assert_eq!(consumer, \"\\n\\n\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]