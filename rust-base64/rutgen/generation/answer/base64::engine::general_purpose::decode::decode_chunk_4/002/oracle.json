[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[b'A', INVALID_VALUE, b'B', b'C'];",
          "    let index_at_start_of_input: usize = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 3] = [0; 3];",
          "",
          "    let _result = decode_chunk_4(input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(1, INVALID_VALUE)));"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[b'A', INVALID_VALUE, b'B', b'C'];",
          "    let index_at_start_of_input: usize = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 3] = [0; 3];",
          "",
          "    let _result = decode_chunk_4(input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(_result, Err(DecodeError::InvalidByte(1, INVALID_VALUE)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = &[b'A', b'B', b'C', INVALID_VALUE];",
          "    let index_at_start_of_input: usize = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 3] = [0; 3];",
          "",
          "    let _result = decode_chunk_4(input, index_at_start_of_input, &decode_table, &mut output);",
          "}"
        ],
        "oracle": [
          "    let input: &[u8] = &[b'A', b'B', b'C', INVALID_VALUE];",
          "    let index_at_start_of_input: usize = 0;",
          "    let decode_table: [u8; 256] = {",
          "    let mut table = [INVALID_VALUE; 256];",
          "    table[b'A' as usize] = 0;",
          "    table[b'B' as usize] = 1;",
          "    table[b'C' as usize] = 2;",
          "    table",
          "    };",
          "    let mut output: [u8; 3] = [0; 3];",
          "    let result = decode_chunk_4(input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(result, Err(DecodeError::InvalidByte(3, INVALID_VALUE)));"
        ],
        "code": [
          "{",
          "    let input: &[u8] = &[b'A', b'B', b'C', INVALID_VALUE];",
          "    let index_at_start_of_input: usize = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0; // valid",
          "        table[b'B' as usize] = 1; // valid",
          "        table[b'C' as usize] = 2; // valid",
          "        table",
          "    };",
          "    let mut output: [u8; 3] = [0; 3];",
          "",
          "    let _result = decode_chunk_4(input, index_at_start_of_input, &decode_table, &mut output);",
          "    let input: &[u8] = &[b'A', b'B', b'C', INVALID_VALUE];",
          "    let index_at_start_of_input: usize = 0;",
          "    let decode_table: [u8; 256] = {",
          "    let mut table = [INVALID_VALUE; 256];",
          "    table[b'A' as usize] = 0;",
          "    table[b'B' as usize] = 1;",
          "    table[b'C' as usize] = 2;",
          "    table",
          "    };",
          "    let mut output: [u8; 3] = [0; 3];",
          "    let result = decode_chunk_4(input, index_at_start_of_input, &decode_table, &mut output);",
          "    assert_eq!(result, Err(DecodeError::InvalidByte(3, INVALID_VALUE)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]