[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));"
        ],
        "code": [
          "{",
          "    let alphabet = \"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let expected = Alphabet::from_str_unchecked(\" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\");",
          "    assert_eq!(result.unwrap(), expected);"
        ],
        "code": [
          "{",
          "    let alphabet = \" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert!(result.is_ok());",
          "    let expected = Alphabet::from_str_unchecked(\" !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\");",
          "    assert_eq!(result.unwrap(), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\")));"
        ],
        "code": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+!\"; // Duplicate +",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; // Valid input",
          "    assert_eq!(Alphabet::new(alphabet), Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\"; // Valid input",
          "    assert_eq!(Alphabet::new(alphabet), Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+@\"; // Invalid, duplicated @",
          "    assert_eq!(Alphabet::new(alphabet), Err(ParseAlphabetError::DuplicatedByte(b'@')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOabcdefghijklmnopqrstuvwxyz0123456789+/-\"; // Invalid, not 64 bytes",
          "    assert_eq!(Alphabet::new(alphabet), Err(ParseAlphabetError::InvalidLength));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOQRSTUVWXYZ12345678901234567890\"; // Invalid, not printable",
          "    assert_eq!(Alphabet::new(alphabet), Err(ParseAlphabetError::UnprintableByte(b' ')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+=!\"; // Invalid, contains '='",
          "    assert_eq!(Alphabet::new(alphabet), Err(ParseAlphabetError::ReservedByte(b'=')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOABCDEFGHIJKLMOPQRSTUVWXYZ0123456789\"; // Invalid, duplicate A",
          "    assert_eq!(Alphabet::new(alphabet), Err(ParseAlphabetError::DuplicatedByte(b'A')));"
        ],
        "code": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+!\"; // Duplicate +",
          "    let result = Alphabet::new(alphabet);",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; // Valid input",
          "    assert_eq!(Alphabet::new(alphabet), Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\"; // Valid input",
          "    assert_eq!(Alphabet::new(alphabet), Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+@\"; // Invalid, duplicated @",
          "    assert_eq!(Alphabet::new(alphabet), Err(ParseAlphabetError::DuplicatedByte(b'@')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOabcdefghijklmnopqrstuvwxyz0123456789+/-\"; // Invalid, not 64 bytes",
          "    assert_eq!(Alphabet::new(alphabet), Err(ParseAlphabetError::InvalidLength));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOQRSTUVWXYZ12345678901234567890\"; // Invalid, not printable",
          "    assert_eq!(Alphabet::new(alphabet), Err(ParseAlphabetError::UnprintableByte(b' ')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+=!\"; // Invalid, contains '='",
          "    assert_eq!(Alphabet::new(alphabet), Err(ParseAlphabetError::ReservedByte(b'=')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOABCDEFGHIJKLMOPQRSTUVWXYZ0123456789\"; // Invalid, duplicate A",
          "    assert_eq!(Alphabet::new(alphabet), Err(ParseAlphabetError::DuplicatedByte(b'A')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\\x00\"; // Null character",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789+/\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::DuplicatedByte(b'a')));",
          "    ",
          "    let alphabet = \"ABCD\" + \"EFGH\" + \"IJKL\" + \"MNOP\" + \"QRST\" + \"UVWX\" + \"YZ\" + \"0123456789+/\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLmnopqrstuvwxyz0123456789+=/\"; // Includes '='",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::ReservedByte(b'=')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLmnopqrstuvwxyz0123456789_!#%&'()\"; // Unprintable",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::UnprintableByte(b'!')));"
        ],
        "code": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\\x00\"; // Null character",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789+/\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::DuplicatedByte(b'a')));",
          "    ",
          "    let alphabet = \"ABCD\" + \"EFGH\" + \"IJKL\" + \"MNOP\" + \"QRST\" + \"UVWX\" + \"YZ\" + \"0123456789+/\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLmnopqrstuvwxyz0123456789+=/\"; // Includes '='",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::ReservedByte(b'=')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLmnopqrstuvwxyz0123456789_!#%&'()\"; // Unprintable",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::UnprintableByte(b'!')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=\"; // Padding character '='",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
          "    assert_eq!(result, Err(ParseAlphabetError::UnprintableByte(61)));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\"; // No duplicates and valid printable ASCII",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\" ; // Valid case",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    let alphabet = \"AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL\"; // Duplicated symbols",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::DuplicatedByte(b'A')));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!\"; // Valid case with different ASCII symbols",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"; // Valid case without \"=\"",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+ \"; // Trailing space is unprintable",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::UnprintableByte(b' ')));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,./\"; // Valid but with unprintable character",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::UnprintableByte(b',')));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#\"; // Valid case",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));"
        ],
        "code": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=\"; // Padding character '='",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
          "    assert_eq!(result, Err(ParseAlphabetError::UnprintableByte(61)));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\"; // No duplicates and valid printable ASCII",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\" ; // Valid case",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    let alphabet = \"AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL\"; // Duplicated symbols",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::DuplicatedByte(b'A')));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!\"; // Valid case with different ASCII symbols",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"; // Valid case without \"=\"",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+ \"; // Trailing space is unprintable",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::UnprintableByte(b' ')));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,./\"; // Valid but with unprintable character",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::UnprintableByte(b',')));",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#\"; // Valid case",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234\"; // Only 60 characters",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; // Valid 64 characters",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/-\"; // Contains reserved byte '/'",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::ReservedByte('/')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+AB\"; // Contains duplicated byte 'A'",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::DuplicatedByte(b'A')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+@\"; // Contains unprintable byte '@'",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::UnprintableByte(b'@')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\"; // Contains '='+ which is reserved",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::ReservedByte(b'+')));",
          "    ",
          "    let alphabet = \"   \"; // Only 3 characters which are printable but not 64",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/-\"; // Duplicated and reserved bytes",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::ReservedByte(b'/')));"
        ],
        "code": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234\"; // Only 60 characters",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; // Valid 64 characters",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(alphabet)));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/-\"; // Contains reserved byte '/'",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::ReservedByte('/')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+AB\"; // Contains duplicated byte 'A'",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::DuplicatedByte(b'A')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+@\"; // Contains unprintable byte '@'",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::UnprintableByte(b'@')));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\"; // Contains '='+ which is reserved",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::ReservedByte(b'+')));",
          "    ",
          "    let alphabet = \"   \"; // Only 3 characters which are printable but not 64",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::InvalidLength));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/-\"; // Duplicated and reserved bytes",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Err(ParseAlphabetError::ReservedByte(b'/')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/?\"; // 65 characters",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    result.unwrap_err();",
          "    assert_eq!(result.unwrap_err(), ParseAlphabetError::InvalidLength);",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+!\"; // 64 unique printable ASCII bytes",
          "    let result = Alphabet::new(alphabet);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().as_str(), alphabet);",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+0\"; // duplicate byte '0'",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result.unwrap_err(), ParseAlphabetError::DuplicatedByte(b'0'));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+=\"; // includes '='",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result.unwrap_err(), ParseAlphabetError::ReservedByte(b'='));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567!\"; // unprintable byte '!' at the end",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result.unwrap_err(), ParseAlphabetError::UnprintableByte(b'!'));"
        ],
        "code": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/?\"; // 65 characters",
          "    let result = Alphabet::new(alphabet);",
          "    result.unwrap_err();",
          "    assert_eq!(result.unwrap_err(), ParseAlphabetError::InvalidLength);",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+!\"; // 64 unique printable ASCII bytes",
          "    let result = Alphabet::new(alphabet);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().as_str(), alphabet);",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+0\"; // duplicate byte '0'",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result.unwrap_err(), ParseAlphabetError::DuplicatedByte(b'0'));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+=\"; // includes '='",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result.unwrap_err(), ParseAlphabetError::ReservedByte(b'='));",
          "    ",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567!\"; // unprintable byte '!' at the end",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result.unwrap_err(), ParseAlphabetError::UnprintableByte(b'!'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]