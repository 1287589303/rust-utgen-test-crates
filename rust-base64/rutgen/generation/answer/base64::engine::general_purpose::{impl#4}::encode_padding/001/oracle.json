[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig {",
          "        encode_padding: true,",
          "        decode_allow_trailing_bits: false,",
          "        decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result = config.encode_padding();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig {",
          "        encode_padding: true,",
          "        decode_allow_trailing_bits: false,",
          "        decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result = config.encode_padding();",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig {",
          "        encode_padding: true,",
          "        decode_allow_trailing_bits: false,",
          "        decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result = config.encode_padding();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let config = GeneralPurposeConfig {",
          "    encode_padding: false,",
          "    decode_allow_trailing_bits: false,",
          "    decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result = config.encode_padding();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig {",
          "        encode_padding: true,",
          "        decode_allow_trailing_bits: false,",
          "        decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result = config.encode_padding();",
          "    assert_eq!(result, true);",
          "    let config = GeneralPurposeConfig {",
          "    encode_padding: false,",
          "    decode_allow_trailing_bits: false,",
          "    decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result = config.encode_padding();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig {",
          "        encode_padding: false,",
          "        decode_allow_trailing_bits: false,",
          "        decode_padding_mode: DecodePaddingMode::RequireNone,",
          "    };",
          "    let result = config.encode_padding();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(result == config.encode_padding);",
          "    ",
          "    let config_with_padding = GeneralPurposeConfig {",
          "    encode_padding: true,",
          "    decode_allow_trailing_bits: false,",
          "    decode_padding_mode: DecodePaddingMode::RequireCanonical,",
          "    };",
          "    let result_with_padding = config_with_padding.encode_padding();",
          "    assert_eq!(result_with_padding, true);",
          "    assert!(result_with_padding == config_with_padding.encode_padding);",
          "    ",
          "    let config_indifferent = GeneralPurposeConfig {",
          "    encode_padding: false,",
          "    decode_allow_trailing_bits: false,",
          "    decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result_indifferent = config_indifferent.encode_padding();",
          "    assert_eq!(result_indifferent, false);",
          "    assert!(result_indifferent == config_indifferent.encode_padding);",
          "    ",
          "    let config_with_encode_padding = GeneralPurposeConfig {",
          "    encode_padding: true,",
          "    decode_allow_trailing_bits: true,",
          "    decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result_with_encode_padding = config_with_encode_padding.encode_padding();",
          "    assert_eq!(result_with_encode_padding, true);",
          "    assert!(result_with_encode_padding == config_with_encode_padding.encode_padding);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig {",
          "        encode_padding: false,",
          "        decode_allow_trailing_bits: false,",
          "        decode_padding_mode: DecodePaddingMode::RequireNone,",
          "    };",
          "    let result = config.encode_padding();",
          "    assert_eq!(result, false);",
          "    assert!(result == config.encode_padding);",
          "    ",
          "    let config_with_padding = GeneralPurposeConfig {",
          "    encode_padding: true,",
          "    decode_allow_trailing_bits: false,",
          "    decode_padding_mode: DecodePaddingMode::RequireCanonical,",
          "    };",
          "    let result_with_padding = config_with_padding.encode_padding();",
          "    assert_eq!(result_with_padding, true);",
          "    assert!(result_with_padding == config_with_padding.encode_padding);",
          "    ",
          "    let config_indifferent = GeneralPurposeConfig {",
          "    encode_padding: false,",
          "    decode_allow_trailing_bits: false,",
          "    decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result_indifferent = config_indifferent.encode_padding();",
          "    assert_eq!(result_indifferent, false);",
          "    assert!(result_indifferent == config_indifferent.encode_padding);",
          "    ",
          "    let config_with_encode_padding = GeneralPurposeConfig {",
          "    encode_padding: true,",
          "    decode_allow_trailing_bits: true,",
          "    decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result_with_encode_padding = config_with_encode_padding.encode_padding();",
          "    assert_eq!(result_with_encode_padding, true);",
          "    assert!(result_with_encode_padding == config_with_encode_padding.encode_padding);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig {",
          "        encode_padding: false,",
          "        decode_allow_trailing_bits: false,",
          "        decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result = config.encode_padding();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let config_with_padding = GeneralPurposeConfig {",
          "    encode_padding: true,",
          "    decode_allow_trailing_bits: false,",
          "    decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result_with_padding = config_with_padding.encode_padding();",
          "    assert_eq!(result_with_padding, true);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig {",
          "        encode_padding: false,",
          "        decode_allow_trailing_bits: false,",
          "        decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result = config.encode_padding();",
          "    assert_eq!(result, false);",
          "    let config_with_padding = GeneralPurposeConfig {",
          "    encode_padding: true,",
          "    decode_allow_trailing_bits: false,",
          "    decode_padding_mode: DecodePaddingMode::Indifferent,",
          "    };",
          "    let result_with_padding = config_with_padding.encode_padding();",
          "    assert_eq!(result_with_padding, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]