{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/read/decoder.rs\n// crate name is base64\nuse crate::{engine::Engine, DecodeError, DecodeSliceError, PAD_BYTE};\nuse std::{cmp, fmt, io};\npub(crate) const BUF_SIZE: usize = 1024;\nconst BASE64_CHUNK_SIZE: usize = 4;\nconst DECODED_CHUNK_SIZE: usize = 3;\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\npub struct DecoderReader<'e, E: Engine, R: io::Read> {\n    engine: &'e E,\n    /// Where b64 data is read from\n    inner: R,\n    /// Holds b64 data read from the delegate reader.\n    b64_buffer: [u8; BUF_SIZE],\n    /// The start of the pending buffered data in `b64_buffer`.\n    b64_offset: usize,\n    /// The amount of buffered b64 data after `b64_offset` in `b64_len`.\n    b64_len: usize,\n    /// Since the caller may provide us with a buffer of size 1 or 2 that's too small to copy a\n    /// decoded chunk in to, we have to be able to hang on to a few decoded bytes.\n    /// Technically we only need to hold 2 bytes, but then we'd need a separate temporary buffer to\n    /// decode 3 bytes into and then juggle copying one byte into the provided read buf and the rest\n    /// into here, which seems like a lot of complexity for 1 extra byte of storage.\n    decoded_chunk_buffer: [u8; DECODED_CHUNK_SIZE],\n    /// Index of start of decoded data in `decoded_chunk_buffer`\n    decoded_offset: usize,\n    /// Length of decoded data after `decoded_offset` in `decoded_chunk_buffer`\n    decoded_len: usize,\n    /// Input length consumed so far.\n    /// Used to provide accurate offsets in errors\n    input_consumed_len: usize,\n    /// offset of previously seen padding, if any\n    padding_offset: Option<usize>,\n}\n#[derive(PartialEq, Eq, Debug)]\npub struct DecodeMetadata {\n    /// Number of decoded bytes output\n    pub(crate) decoded_len: usize,\n    /// Offset of the first padding byte in the input, if any\n    pub(crate) padding_offset: Option<usize>,\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeError {\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    ///\n    /// Padding characters (`=`) interspersed in the encoded form are invalid, as they may only\n    /// be present as the last 0-2 bytes of input.\n    ///\n    /// This error may also indicate that extraneous trailing input bytes are present, causing\n    /// otherwise valid padding to no longer be the last bytes of input.\n    InvalidByte(usize, u8),\n    /// The length of the input, as measured in valid base64 symbols, is invalid.\n    /// There must be 2-4 symbols in the last input quad.\n    InvalidLength(usize),\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike [`DecodeError::InvalidByte`], which reports symbols that aren't in the alphabet,\n    /// this error is for symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n    /// The nature of the padding was not as configured: absent or incorrect when it must be\n    /// canonical, or present when it must be absent, etc.\n    InvalidPadding,\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeSliceError {\n    /// A [`DecodeError`] occurred\n    DecodeError(DecodeError),\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\nimpl<'e, E: Engine, R: io::Read> DecoderReader<'e, E, R> {\n    pub fn new(reader: R, engine: &'e E) -> Self {\n        DecoderReader {\n            engine,\n            inner: reader,\n            b64_buffer: [0; BUF_SIZE],\n            b64_offset: 0,\n            b64_len: 0,\n            decoded_chunk_buffer: [0; DECODED_CHUNK_SIZE],\n            decoded_offset: 0,\n            decoded_len: 0,\n            input_consumed_len: 0,\n            padding_offset: None,\n        }\n    }\n    fn flush_decoded_buf(&mut self, buf: &mut [u8]) -> io::Result<usize> {}\n    fn read_from_delegate(&mut self) -> io::Result<usize> {}\n    fn decode_to_buf(\n        &mut self,\n        b64_len_to_decode: usize,\n        buf: &mut [u8],\n    ) -> io::Result<usize> {\n        debug_assert!(self.b64_len >= b64_len_to_decode);\n        debug_assert!(self.b64_offset + self.b64_len <= BUF_SIZE);\n        debug_assert!(! buf.is_empty());\n        let b64_to_decode = &self\n            .b64_buffer[self.b64_offset..self.b64_offset + b64_len_to_decode];\n        let decode_metadata = self\n            .engine\n            .internal_decode(\n                b64_to_decode,\n                buf,\n                self.engine.internal_decoded_len_estimate(b64_len_to_decode),\n            )\n            .map_err(|dse| match dse {\n                DecodeSliceError::DecodeError(de) => {\n                    match de {\n                        DecodeError::InvalidByte(offset, byte) => {\n                            match (byte, self.padding_offset) {\n                                (PAD_BYTE, Some(first_pad_offset)) => {\n                                    DecodeError::InvalidByte(first_pad_offset, PAD_BYTE)\n                                }\n                                _ => {\n                                    DecodeError::InvalidByte(\n                                        self.input_consumed_len + offset,\n                                        byte,\n                                    )\n                                }\n                            }\n                        }\n                        DecodeError::InvalidLength(len) => {\n                            DecodeError::InvalidLength(self.input_consumed_len + len)\n                        }\n                        DecodeError::InvalidLastSymbol(offset, byte) => {\n                            DecodeError::InvalidLastSymbol(\n                                self.input_consumed_len + offset,\n                                byte,\n                            )\n                        }\n                        DecodeError::InvalidPadding => DecodeError::InvalidPadding,\n                    }\n                }\n                DecodeSliceError::OutputSliceTooSmall => {\n                    unreachable!(\"buf is sized correctly in calling code\")\n                }\n            })\n            .map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))?;\n        if let Some(offset) = self.padding_offset {\n            if decode_metadata.decoded_len > 0 {\n                return Err(\n                    io::Error::new(\n                        io::ErrorKind::InvalidData,\n                        DecodeError::InvalidByte(offset, PAD_BYTE),\n                    ),\n                );\n            }\n        }\n        self.padding_offset = self\n            .padding_offset\n            .or(\n                decode_metadata\n                    .padding_offset\n                    .map(|offset| self.input_consumed_len + offset),\n            );\n        self.input_consumed_len += b64_len_to_decode;\n        self.b64_offset += b64_len_to_decode;\n        self.b64_len -= b64_len_to_decode;\n        debug_assert!(self.b64_offset + self.b64_len <= BUF_SIZE);\n        Ok(decode_metadata.decoded_len)\n    }\n    pub fn into_inner(self) -> R {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the requested number of bytes from the b64 buffer into the provided buffer. It's the\n/// caller's responsibility to choose the number of b64 bytes to decode correctly.\n///\n/// Returns a Result with the number of decoded bytes written to `buf`.\n///\n/// # Panics\n///\n/// panics if `buf` is too small\n140 fn decode_to_buf(&mut self, b64_len_to_decode: usize, buf: &mut [u8]) -> io::Result<usize> {\n141     debug_assert!(self.b64_len >= b64_len_to_decode);\n142     debug_assert!(self.b64_offset + self.b64_len <= BUF_SIZE);\n143     debug_assert!(!buf.is_empty());\n144 \n145     let b64_to_decode = &self.b64_buffer[self.b64_offset..self.b64_offset + b64_len_to_decode];\n146     let decode_metadata = self\n147         .engine\n148         .internal_decode(\n149             b64_to_decode,\n150             buf,\n151             self.engine.internal_decoded_len_estimate(b64_len_to_decode),\n152         )\n153         .map_err(|dse| match dse {\n154             DecodeSliceError::DecodeError(de) => {\n155                 match de {\n156                     DecodeError::InvalidByte(offset, byte) => {\n157                         match (byte, self.padding_offset) {\n158                             // if there was padding in a previous block of decoding that happened to\n159                             // be correct, and we now find more padding that happens to be incorrect,\n160                             // to be consistent with non-reader decodes, record the error at the first\n161                             // padding\n162                             (PAD_BYTE, Some(first_pad_offset)) => {\n163                                 DecodeError::InvalidByte(first_pad_offset, PAD_BYTE)\n164                             }\n165                             _ => {\n166                                 DecodeError::InvalidByte(self.input_consumed_len + offset, byte)\n167                             }\n168                         }\n169                     }\n170                     DecodeError::InvalidLength(len) => {\n171                         DecodeError::InvalidLength(self.input_consumed_len + len)\n172                     }\n173                     DecodeError::InvalidLastSymbol(offset, byte) => {\n174                         DecodeError::InvalidLastSymbol(self.input_consumed_len + offset, byte)\n175                     }\n176                     DecodeError::InvalidPadding => DecodeError::InvalidPadding,\n177                 }\n178             }\n179             DecodeSliceError::OutputSliceTooSmall => {\n180                 unreachable!(\"buf is sized correctly in calling code\")\n181             }\n182         })\n183         .map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))?;\n184 \n185     if let Some(offset) = self.padding_offset {\n186         // we've already seen padding\n187         if decode_metadata.decoded_len > 0 {\n188             // we read more after already finding padding; report error at first padding byte\n189             return Err(io::Error::new(\n190                 io::ErrorKind::InvalidData,\n191                 DecodeError::InvalidByte(offset, PAD_BYTE),\n192             ));\n193         }\n194     }\n195 \n196     self.padding_offset = self.padding_offset.or(decode_metadata\n197         .padding_offset\n198         .map(|offset| self.input_consumed_len + offset));\n199     self.input_consumed_len += b64_len_to_decode;\n200     self.b64_offset += b64_len_to_decode;\n201     self.b64_len -= b64_len_to_decode;\n202 \n203     debug_assert!(self.b64_offset + self.b64_len <= BUF_SIZE);\n204 \n205     Ok(decode_metadata.decoded_len)\n206 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}