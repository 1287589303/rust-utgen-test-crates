{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/encode.rs\n// crate name is base64\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::string::String;\nuse core::fmt;\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\n#[cfg(any(feature = \"alloc\", test))]\nuse crate::engine::general_purpose::STANDARD;\nuse crate::engine::{Config, Engine};\nuse crate::PAD_BYTE;\n#[must_use]\npub const fn encoded_len(bytes_len: usize, padding: bool) -> Option<usize> {\n    let rem = bytes_len % 3;\n    let complete_input_chunks = bytes_len / 3;\n    let complete_chunk_output = if let Some(complete_chunk_output) = complete_input_chunks\n        .checked_mul(4)\n    {\n        complete_chunk_output\n    } else {\n        return None;\n    };\n    if rem > 0 {\n        if padding {\n            complete_chunk_output.checked_add(4)\n        } else {\n            let encoded_rem = match rem {\n                1 => 2,\n                _ => 3,\n            };\n            complete_chunk_output.checked_add(encoded_rem)\n        }\n    } else {\n        Some(complete_chunk_output)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calculate the base64 encoded length for a given input length, optionally including any\n/// appropriate padding bytes.\n///\n/// Returns `None` if the encoded length can't be represented in `usize`. This will happen for\n/// input lengths in approximately the top quarter of the range of `usize`.\n 98 pub const fn encoded_len(bytes_len: usize, padding: bool) -> Option<usize> {\n 99     let rem = bytes_len % 3;\n100 \n101     let complete_input_chunks = bytes_len / 3;\n102     // `?` is disallowed in const, and `let Some(_) = _ else` requires 1.65.0, whereas this\n103     // messier syntax works on 1.48\n104     let complete_chunk_output =\n105         if let Some(complete_chunk_output) = complete_input_chunks.checked_mul(4) {\n106             complete_chunk_output\n107         } else {\n108             return None;\n109         };\n110 \n111     if rem > 0 {\n112         if padding {\n113             complete_chunk_output.checked_add(4)\n114         } else {\n115             let encoded_rem = match rem {\n116                 1 => 2,\n117                 // only other possible remainder is 2\n118                 // can't use a separate _ => unreachable!() in const fns in ancient rust versions\n119                 _ => 3,\n120             };\n121             complete_chunk_output.checked_add(encoded_rem)\n122         }\n123     } else {\n124         Some(complete_chunk_output)\n125     }\n126 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}