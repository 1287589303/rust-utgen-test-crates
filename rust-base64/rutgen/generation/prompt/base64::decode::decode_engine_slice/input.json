{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/decode.rs\n// crate name is base64\nuse crate::engine::{general_purpose::STANDARD, DecodeEstimate, Engine};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\nuse core::fmt;\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeSliceError {\n    /// A [`DecodeError`] occurred\n    DecodeError(DecodeError),\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\n#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode_slice\")]\npub fn decode_engine_slice<E: Engine, T: AsRef<[u8]>>(\n    input: T,\n    output: &mut [u8],\n    engine: &E,\n) -> Result<usize, DecodeSliceError> {\n    engine.decode_slice(input, output)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the input into the provided output slice.\n///\n/// See [`Engine::decode_slice`].\n123 pub fn decode_engine_slice<E: Engine, T: AsRef<[u8]>>(\n124     input: T,\n125     output: &mut [u8],\n126     engine: &E,\n127 ) -> Result<usize, DecodeSliceError> {\n128     engine.decode_slice(input, output)\n129 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}