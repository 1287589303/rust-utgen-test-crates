{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/decode.rs\n// crate name is base64\nuse crate::engine::{general_purpose::STANDARD, DecodeEstimate, Engine};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\nuse core::fmt;\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeSliceError {\n    /// A [`DecodeError`] occurred\n    DecodeError(DecodeError),\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\n#[deprecated(since = \"0.21.0\", note = \"Use Engine::decode_slice\")]\npub fn decode_engine_slice<E: Engine, T: AsRef<[u8]>>(\n    input: T,\n    output: &mut [u8],\n    engine: &E,\n) -> Result<usize, DecodeSliceError> {\n    engine.decode_slice(input, output)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the input into the provided output slice.\n///\n/// See [`Engine::decode_slice`].\n123 pub fn decode_engine_slice<E: Engine, T: AsRef<[u8]>>(\n124     input: T,\n125     output: &mut [u8],\n126     engine: &E,\n127 ) -> Result<usize, DecodeSliceError> {\n128     engine.decode_slice(input, output)\n129 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}