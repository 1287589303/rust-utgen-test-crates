{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/display.rs\n// crate name is base64\nuse super::chunked_encoder::ChunkedEncoder;\nuse crate::engine::Engine;\nuse core::fmt::{Display, Formatter};\nuse core::{fmt, str};\npub trait Sink {\n    type Error;\n    fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error>;\n}\nstruct FormatterSink<'a, 'b: 'a> {\n    f: &'a mut Formatter<'b>,\n}\nimpl<'a, 'b: 'a> super::chunked_encoder::Sink for FormatterSink<'a, 'b> {\n    type Error = fmt::Error;\n    fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error> {\n        self.f.write_str(str::from_utf8(encoded).expect(\"base64 data was not utf8\"))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n47 fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error> {\n48     // Avoid unsafe. If max performance is needed, write your own display wrapper that uses\n49     // unsafe here to gain about 10-15%.\n50     self.f\n51         .write_str(str::from_utf8(encoded).expect(\"base64 data was not utf8\"))\n52 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}