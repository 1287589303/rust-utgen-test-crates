{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/display.rs\n// crate name is base64\nuse super::chunked_encoder::ChunkedEncoder;\nuse crate::engine::Engine;\nuse core::fmt::{Display, Formatter};\nuse core::{fmt, str};\npub trait Sink {\n    type Error;\n    fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error>;\n}\nstruct FormatterSink<'a, 'b: 'a> {\n    f: &'a mut Formatter<'b>,\n}\nimpl<'a, 'b: 'a> super::chunked_encoder::Sink for FormatterSink<'a, 'b> {\n    type Error = fmt::Error;\n    fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error> {\n        self.f.write_str(str::from_utf8(encoded).expect(\"base64 data was not utf8\"))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n47 fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error> {\n48     // Avoid unsafe. If max performance is needed, write your own display wrapper that uses\n49     // unsafe here to gain about 10-15%.\n50     self.f\n51         .write_str(str::from_utf8(encoded).expect(\"base64 data was not utf8\"))\n52 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}