{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/alphabet.rs\n// crate name is base64\nuse crate::PAD_BYTE;\nuse core::{convert, fmt};\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\nconst ALPHABET_SIZE: usize = 64;\npub const STANDARD: Alphabet = Alphabet::from_str_unchecked(\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n);\npub const URL_SAFE: Alphabet = Alphabet::from_str_unchecked(\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n);\npub const CRYPT: Alphabet = Alphabet::from_str_unchecked(\n    \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n);\npub const BCRYPT: Alphabet = Alphabet::from_str_unchecked(\n    \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n);\npub const IMAP_MUTF7: Alphabet = Alphabet::from_str_unchecked(\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+,\",\n);\npub const BIN_HEX: Alphabet = Alphabet::from_str_unchecked(\n    \"!\\\"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr\",\n);\n#[derive(Debug, Eq, PartialEq)]\npub enum ParseAlphabetError {\n    /// Alphabets must be 64 ASCII bytes\n    InvalidLength,\n    /// All bytes must be unique\n    DuplicatedByte(u8),\n    /// All bytes must be printable (in the range `[32, 126]`).\n    UnprintableByte(u8),\n    /// `=` cannot be used\n    ReservedByte(u8),\n}\nimpl fmt::Display for ParseAlphabetError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        match self {\n            Self::InvalidLength => write!(f, \"Invalid length - must be 64 bytes\"),\n            Self::DuplicatedByte(b) => write!(f, \"Duplicated byte: {:#04x}\", b),\n            Self::UnprintableByte(b) => write!(f, \"Unprintable byte: {:#04x}\", b),\n            Self::ReservedByte(b) => write!(f, \"Reserved byte: {:#04x}\", b),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n156 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n157     match self {\n158         Self::InvalidLength => write!(f, \"Invalid length - must be 64 bytes\"),\n159         Self::DuplicatedByte(b) => write!(f, \"Duplicated byte: {:#04x}\", b),\n160         Self::UnprintableByte(b) => write!(f, \"Unprintable byte: {:#04x}\", b),\n161         Self::ReservedByte(b) => write!(f, \"Reserved byte: {:#04x}\", b),\n162     }\n163 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}