{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/display.rs\n// crate name is base64\nuse super::chunked_encoder::ChunkedEncoder;\nuse crate::engine::Engine;\nuse core::fmt::{Display, Formatter};\nuse core::{fmt, str};\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\npub struct Base64Display<'a, 'e, E: Engine> {\n    bytes: &'a [u8],\n    chunked_encoder: ChunkedEncoder<'e, E>,\n}\nstruct FormatterSink<'a, 'b: 'a> {\n    f: &'a mut Formatter<'b>,\n}\npub struct ChunkedEncoder<'e, E: Engine + ?Sized> {\n    engine: &'e E,\n}\nimpl<'a, 'e, E: Engine> Display for Base64Display<'a, 'e, E> {\n    fn fmt(&self, formatter: &mut Formatter) -> Result<(), fmt::Error> {\n        let mut sink = FormatterSink { f: formatter };\n        self.chunked_encoder.encode(self.bytes, &mut sink)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n34 fn fmt(&self, formatter: &mut Formatter) -> Result<(), fmt::Error> {\n35     let mut sink = FormatterSink { f: formatter };\n36     self.chunked_encoder.encode(self.bytes, &mut sink)\n37 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}