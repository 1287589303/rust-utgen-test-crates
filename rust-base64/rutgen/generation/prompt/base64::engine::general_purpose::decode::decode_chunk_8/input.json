{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/general_purpose/decode.rs\n// crate name is base64\nuse crate::{\n    engine::{\n        general_purpose::INVALID_VALUE, DecodeEstimate, DecodeMetadata, DecodePaddingMode,\n    },\n    DecodeError, DecodeSliceError, PAD_BYTE,\n};\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeError {\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    ///\n    /// Padding characters (`=`) interspersed in the encoded form are invalid, as they may only\n    /// be present as the last 0-2 bytes of input.\n    ///\n    /// This error may also indicate that extraneous trailing input bytes are present, causing\n    /// otherwise valid padding to no longer be the last bytes of input.\n    InvalidByte(usize, u8),\n    /// The length of the input, as measured in valid base64 symbols, is invalid.\n    /// There must be 2-4 symbols in the last input quad.\n    InvalidLength(usize),\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike [`DecodeError::InvalidByte`], which reports symbols that aren't in the alphabet,\n    /// this error is for symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n    /// The nature of the padding was not as configured: absent or incorrect when it must be\n    /// canonical, or present when it must be absent, etc.\n    InvalidPadding,\n}\n#[inline(always)]\nfn decode_chunk_8(\n    input: &[u8],\n    index_at_start_of_input: usize,\n    decode_table: &[u8; 256],\n    output: &mut [u8],\n) -> Result<(), DecodeError> {\n    let morsel = decode_table[usize::from(input[0])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input, input[0]));\n    }\n    let mut accum = u64::from(morsel) << 58;\n    let morsel = decode_table[usize::from(input[1])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 1, input[1]));\n    }\n    accum |= u64::from(morsel) << 52;\n    let morsel = decode_table[usize::from(input[2])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 2, input[2]));\n    }\n    accum |= u64::from(morsel) << 46;\n    let morsel = decode_table[usize::from(input[3])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 3, input[3]));\n    }\n    accum |= u64::from(morsel) << 40;\n    let morsel = decode_table[usize::from(input[4])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 4, input[4]));\n    }\n    accum |= u64::from(morsel) << 34;\n    let morsel = decode_table[usize::from(input[5])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 5, input[5]));\n    }\n    accum |= u64::from(morsel) << 28;\n    let morsel = decode_table[usize::from(input[6])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 6, input[6]));\n    }\n    accum |= u64::from(morsel) << 22;\n    let morsel = decode_table[usize::from(input[7])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 7, input[7]));\n    }\n    accum |= u64::from(morsel) << 16;\n    output[..6].copy_from_slice(&accum.to_be_bytes()[..6]);\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode 8 bytes of input into 6 bytes of output.\n///\n/// `input` is the 8 bytes to decode.\n/// `index_at_start_of_input` is the offset in the overall input (used for reporting errors\n/// accurately)\n/// `decode_table` is the lookup table for the particular base64 alphabet.\n/// `output` will have its first 6 bytes overwritten\n174 fn decode_chunk_8(\n175     input: &[u8],\n176     index_at_start_of_input: usize,\n177     decode_table: &[u8; 256],\n178     output: &mut [u8],\n179 ) -> Result<(), DecodeError> {\n180     let morsel = decode_table[usize::from(input[0])];\n181     if morsel == INVALID_VALUE {\n182         return Err(DecodeError::InvalidByte(index_at_start_of_input, input[0]));\n183     }\n184     let mut accum = u64::from(morsel) << 58;\n185 \n186     let morsel = decode_table[usize::from(input[1])];\n187     if morsel == INVALID_VALUE {\n188         return Err(DecodeError::InvalidByte(\n189             index_at_start_of_input + 1,\n190             input[1],\n191         ));\n192     }\n193     accum |= u64::from(morsel) << 52;\n194 \n195     let morsel = decode_table[usize::from(input[2])];\n196     if morsel == INVALID_VALUE {\n197         return Err(DecodeError::InvalidByte(\n198             index_at_start_of_input + 2,\n199             input[2],\n200         ));\n201     }\n202     accum |= u64::from(morsel) << 46;\n203 \n204     let morsel = decode_table[usize::from(input[3])];\n205     if morsel == INVALID_VALUE {\n206         return Err(DecodeError::InvalidByte(\n207             index_at_start_of_input + 3,\n208             input[3],\n209         ));\n210     }\n211     accum |= u64::from(morsel) << 40;\n212 \n213     let morsel = decode_table[usize::from(input[4])];\n214     if morsel == INVALID_VALUE {\n215         return Err(DecodeError::InvalidByte(\n216             index_at_start_of_input + 4,\n217             input[4],\n218         ));\n219     }\n220     accum |= u64::from(morsel) << 34;\n221 \n222     let morsel = decode_table[usize::from(input[5])];\n223     if morsel == INVALID_VALUE {\n224         return Err(DecodeError::InvalidByte(\n225             index_at_start_of_input + 5,\n226             input[5],\n227         ));\n228     }\n229     accum |= u64::from(morsel) << 28;\n230 \n231     let morsel = decode_table[usize::from(input[6])];\n232     if morsel == INVALID_VALUE {\n233         return Err(DecodeError::InvalidByte(\n234             index_at_start_of_input + 6,\n235             input[6],\n236         ));\n237     }\n238     accum |= u64::from(morsel) << 22;\n239 \n240     let morsel = decode_table[usize::from(input[7])];\n241     if morsel == INVALID_VALUE {\n242         return Err(DecodeError::InvalidByte(\n243             index_at_start_of_input + 7,\n244             input[7],\n245         ));\n246     }\n247     accum |= u64::from(morsel) << 16;\n248 \n249     output[..6].copy_from_slice(&accum.to_be_bytes()[..6]);\n250 \n251     Ok(())\n252 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}