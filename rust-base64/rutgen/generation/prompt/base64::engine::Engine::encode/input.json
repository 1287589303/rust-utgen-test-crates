{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/mod.rs\n// crate name is base64\n#[cfg(any(feature = \"alloc\", test))]\nuse crate::chunked_encoder;\nuse crate::{\n    encode::{encode_with_padding, EncodeSliceError},\n    encoded_len, DecodeError, DecodeSliceError,\n};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::{string::String, vec};\npub use general_purpose::{GeneralPurpose, GeneralPurposeConfig};\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> String\n        where\n            E: Engine + ?Sized,\n        {\n            let encoded_size = encoded_len(\n                    input_bytes.len(),\n                    engine.config().encode_padding(),\n                )\n                .expect(\"integer overflow when calculating buffer size\");\n            let mut buf = vec![0; encoded_size];\n            encode_with_padding(input_bytes, &mut buf[..], engine, encoded_size);\n            String::from_utf8(buf).expect(\"Invalid UTF8\")\n        }\n        inner(self, input.as_ref())\n    }\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\nfn inner<E>(engine: &E, input_bytes: &[u8]) -> String\nwhere\n    E: Engine + ?Sized,\n{\n    let encoded_size = encoded_len(input_bytes.len(), engine.config().encode_padding())\n        .expect(\"integer overflow when calculating buffer size\");\n    let mut buf = vec![0; encoded_size];\n    encode_with_padding(input_bytes, &mut buf[..], engine, encoded_size);\n    String::from_utf8(buf).expect(\"Invalid UTF8\")\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Encode arbitrary octets as base64 using the provided `Engine`.\n/// Returns a `String`.\n///\n/// # Example\n///\n/// ```rust\n/// use base64::{Engine as _, engine::{self, general_purpose}, alphabet};\n///\n/// let b64 = general_purpose::STANDARD.encode(b\"hello world~\");\n/// println!(\"{}\", b64);\n///\n/// const CUSTOM_ENGINE: engine::GeneralPurpose =\n///     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);\n///\n/// let b64_url = CUSTOM_ENGINE.encode(b\"hello internet~\");\n/// ```\n115 fn encode<T: AsRef<[u8]>>(&self, input: T) -> String {\n116     fn inner<E>(engine: &E, input_bytes: &[u8]) -> String\n117     where\n118         E: Engine + ?Sized,\n119     {\n120         let encoded_size = encoded_len(input_bytes.len(), engine.config().encode_padding())\n121             .expect(\"integer overflow when calculating buffer size\");\n122 \n123         let mut buf = vec![0; encoded_size];\n124 \n125         encode_with_padding(input_bytes, &mut buf[..], engine, encoded_size);\n126 \n127         String::from_utf8(buf).expect(\"Invalid UTF8\")\n128     }\n129 \n130     inner(self, input.as_ref())\n131 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}