{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/display.rs\n// crate name is base64\nuse super::chunked_encoder::ChunkedEncoder;\nuse crate::engine::Engine;\nuse core::fmt::{Display, Formatter};\nuse core::{fmt, str};\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\npub struct Base64Display<'a, 'e, E: Engine> {\n    bytes: &'a [u8],\n    chunked_encoder: ChunkedEncoder<'e, E>,\n}\npub struct ChunkedEncoder<'e, E: Engine + ?Sized> {\n    engine: &'e E,\n}\nimpl<'a, 'e, E: Engine> Base64Display<'a, 'e, E> {\n    pub fn new(bytes: &'a [u8], engine: &'e E) -> Base64Display<'a, 'e, E> {\n        Base64Display {\n            bytes,\n            chunked_encoder: ChunkedEncoder::new(engine),\n        }\n    }\n}\nimpl<'e, E: Engine + ?Sized> ChunkedEncoder<'e, E> {\n    pub fn new(engine: &'e E) -> ChunkedEncoder<'e, E> {\n        ChunkedEncoder { engine }\n    }\n    pub fn encode<S: Sink>(&self, bytes: &[u8], sink: &mut S) -> Result<(), S::Error> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a `Base64Display` with the provided engine.\n25 pub fn new(bytes: &'a [u8], engine: &'e E) -> Base64Display<'a, 'e, E> {\n26     Base64Display {\n27         bytes,\n28         chunked_encoder: ChunkedEncoder::new(engine),\n29     }\n30 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}