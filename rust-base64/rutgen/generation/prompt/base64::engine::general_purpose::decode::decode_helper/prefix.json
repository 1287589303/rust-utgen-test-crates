{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/general_purpose/decode.rs\n// crate name is base64\nuse crate::{\n    engine::{\n        general_purpose::INVALID_VALUE, DecodeEstimate, DecodeMetadata, DecodePaddingMode,\n    },\n    DecodeError, DecodeSliceError, PAD_BYTE,\n};\n#[derive(PartialEq, Eq, Debug)]\npub struct DecodeMetadata {\n    /// Number of decoded bytes output\n    pub(crate) decoded_len: usize,\n    /// Offset of the first padding byte in the input, if any\n    pub(crate) padding_offset: Option<usize>,\n}\npub struct GeneralPurposeEstimate {\n    /// input len % 4\n    rem: usize,\n    conservative_decoded_len: usize,\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeError {\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    ///\n    /// Padding characters (`=`) interspersed in the encoded form are invalid, as they may only\n    /// be present as the last 0-2 bytes of input.\n    ///\n    /// This error may also indicate that extraneous trailing input bytes are present, causing\n    /// otherwise valid padding to no longer be the last bytes of input.\n    InvalidByte(usize, u8),\n    /// The length of the input, as measured in valid base64 symbols, is invalid.\n    /// There must be 2-4 symbols in the last input quad.\n    InvalidLength(usize),\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike [`DecodeError::InvalidByte`], which reports symbols that aren't in the alphabet,\n    /// this error is for symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n    /// The nature of the padding was not as configured: absent or incorrect when it must be\n    /// canonical, or present when it must be absent, etc.\n    InvalidPadding,\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum DecodePaddingMode {\n    /// Canonical padding is allowed, but any fewer padding bytes than that is also allowed.\n    Indifferent,\n    /// Padding must be canonical (0, 1, or 2 `=` as needed to produce a 4 byte suffix).\n    RequireCanonical,\n    /// Padding must be absent -- for when you want predictable padding, without any wasted bytes.\n    RequireNone,\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeSliceError {\n    /// A [`DecodeError`] occurred\n    DecodeError(DecodeError),\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\n#[inline]\npub(crate) fn decode_helper(\n    input: &[u8],\n    estimate: &GeneralPurposeEstimate,\n    output: &mut [u8],\n    decode_table: &[u8; 256],\n    decode_allow_trailing_bits: bool,\n    padding_mode: DecodePaddingMode,\n) -> Result<DecodeMetadata, DecodeSliceError> {\n    let input_complete_nonterminal_quads_len = complete_quads_len(\n        input,\n        estimate.rem,\n        output.len(),\n        decode_table,\n    )?;\n    const UNROLLED_INPUT_CHUNK_SIZE: usize = 32;\n    const UNROLLED_OUTPUT_CHUNK_SIZE: usize = UNROLLED_INPUT_CHUNK_SIZE / 4 * 3;\n    let input_complete_quads_after_unrolled_chunks_len = input_complete_nonterminal_quads_len\n        % UNROLLED_INPUT_CHUNK_SIZE;\n    let input_unrolled_loop_len = input_complete_nonterminal_quads_len\n        - input_complete_quads_after_unrolled_chunks_len;\n    for (chunk_index, chunk) in input[..input_unrolled_loop_len]\n        .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n        .enumerate()\n    {\n        let input_index = chunk_index * UNROLLED_INPUT_CHUNK_SIZE;\n        let chunk_output = &mut output[chunk_index\n            * UNROLLED_OUTPUT_CHUNK_SIZE..(chunk_index + 1)\n            * UNROLLED_OUTPUT_CHUNK_SIZE];\n        decode_chunk_8(\n            &chunk[0..8],\n            input_index,\n            decode_table,\n            &mut chunk_output[0..6],\n        )?;\n        decode_chunk_8(\n            &chunk[8..16],\n            input_index + 8,\n            decode_table,\n            &mut chunk_output[6..12],\n        )?;\n        decode_chunk_8(\n            &chunk[16..24],\n            input_index + 16,\n            decode_table,\n            &mut chunk_output[12..18],\n        )?;\n        decode_chunk_8(\n            &chunk[24..32],\n            input_index + 24,\n            decode_table,\n            &mut chunk_output[18..24],\n        )?;\n    }\n    let output_unrolled_loop_len = input_unrolled_loop_len / 4 * 3;\n    let output_complete_quad_len = input_complete_nonterminal_quads_len / 4 * 3;\n    {\n        let output_after_unroll = &mut output[output_unrolled_loop_len..output_complete_quad_len];\n        for (chunk_index, chunk) in input[input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n            .chunks_exact(4)\n            .enumerate()\n        {\n            let chunk_output = &mut output_after_unroll[chunk_index\n                * 3..chunk_index * 3 + 3];\n            decode_chunk_4(\n                chunk,\n                input_unrolled_loop_len + chunk_index * 4,\n                decode_table,\n                chunk_output,\n            )?;\n        }\n    }\n    super::decode_suffix::decode_suffix(\n        input,\n        input_complete_nonterminal_quads_len,\n        output,\n        output_complete_quad_len,\n        decode_table,\n        decode_allow_trailing_bits,\n        padding_mode,\n    )\n}\n#[inline(always)]\nfn decode_chunk_8(\n    input: &[u8],\n    index_at_start_of_input: usize,\n    decode_table: &[u8; 256],\n    output: &mut [u8],\n) -> Result<(), DecodeError> {\n    let morsel = decode_table[usize::from(input[0])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input, input[0]));\n    }\n    let mut accum = u64::from(morsel) << 58;\n    let morsel = decode_table[usize::from(input[1])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 1, input[1]));\n    }\n    accum |= u64::from(morsel) << 52;\n    let morsel = decode_table[usize::from(input[2])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 2, input[2]));\n    }\n    accum |= u64::from(morsel) << 46;\n    let morsel = decode_table[usize::from(input[3])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 3, input[3]));\n    }\n    accum |= u64::from(morsel) << 40;\n    let morsel = decode_table[usize::from(input[4])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 4, input[4]));\n    }\n    accum |= u64::from(morsel) << 34;\n    let morsel = decode_table[usize::from(input[5])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 5, input[5]));\n    }\n    accum |= u64::from(morsel) << 28;\n    let morsel = decode_table[usize::from(input[6])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 6, input[6]));\n    }\n    accum |= u64::from(morsel) << 22;\n    let morsel = decode_table[usize::from(input[7])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 7, input[7]));\n    }\n    accum |= u64::from(morsel) << 16;\n    output[..6].copy_from_slice(&accum.to_be_bytes()[..6]);\n    Ok(())\n}\n#[inline(always)]\nfn decode_chunk_4(\n    input: &[u8],\n    index_at_start_of_input: usize,\n    decode_table: &[u8; 256],\n    output: &mut [u8],\n) -> Result<(), DecodeError> {\n    let morsel = decode_table[usize::from(input[0])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input, input[0]));\n    }\n    let mut accum = u32::from(morsel) << 26;\n    let morsel = decode_table[usize::from(input[1])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 1, input[1]));\n    }\n    accum |= u32::from(morsel) << 20;\n    let morsel = decode_table[usize::from(input[2])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 2, input[2]));\n    }\n    accum |= u32::from(morsel) << 14;\n    let morsel = decode_table[usize::from(input[3])];\n    if morsel == INVALID_VALUE {\n        return Err(DecodeError::InvalidByte(index_at_start_of_input + 3, input[3]));\n    }\n    accum |= u32::from(morsel) << 8;\n    output[..3].copy_from_slice(&accum.to_be_bytes()[..3]);\n    Ok(())\n}\npub(crate) fn decode_suffix(\n    input: &[u8],\n    input_index: usize,\n    output: &mut [u8],\n    mut output_index: usize,\n    decode_table: &[u8; 256],\n    decode_allow_trailing_bits: bool,\n    padding_mode: DecodePaddingMode,\n) -> Result<DecodeMetadata, DecodeSliceError> {\n    debug_assert!((input.len() - input_index) <= 4);\n    let mut morsels_in_leftover = 0;\n    let mut padding_bytes_count = 0;\n    let mut first_padding_offset: usize = 0;\n    let mut last_symbol = 0_u8;\n    let mut morsels = [0_u8; 4];\n    for (leftover_index, &b) in input[input_index..].iter().enumerate() {\n        if b == PAD_BYTE {\n            if leftover_index < 2 {\n                debug_assert!(\n                    leftover_index == 0 || (leftover_index == 1 && padding_bytes_count ==\n                    0)\n                );\n                let bad_padding_index = input_index + leftover_index;\n                return Err(DecodeError::InvalidByte(bad_padding_index, b).into());\n            }\n            if padding_bytes_count == 0 {\n                first_padding_offset = leftover_index;\n            }\n            padding_bytes_count += 1;\n            continue;\n        }\n        if padding_bytes_count > 0 {\n            return Err(\n                DecodeError::InvalidByte(input_index + first_padding_offset, PAD_BYTE)\n                    .into(),\n            );\n        }\n        last_symbol = b;\n        let morsel = decode_table[b as usize];\n        if morsel == INVALID_VALUE {\n            return Err(DecodeError::InvalidByte(input_index + leftover_index, b).into());\n        }\n        morsels[morsels_in_leftover] = morsel;\n        morsels_in_leftover += 1;\n    }\n    if !input.is_empty() && morsels_in_leftover < 2 {\n        return Err(DecodeError::InvalidLength(input_index + morsels_in_leftover).into());\n    }\n    match padding_mode {\n        DecodePaddingMode::Indifferent => {}\n        DecodePaddingMode::RequireCanonical => {\n            if (padding_bytes_count + morsels_in_leftover) % 4 != 0 {\n                return Err(DecodeError::InvalidPadding.into());\n            }\n        }\n        DecodePaddingMode::RequireNone => {\n            if padding_bytes_count > 0 {\n                return Err(DecodeError::InvalidPadding.into());\n            }\n        }\n    }\n    let leftover_bytes_to_append = morsels_in_leftover * 6 / 8;\n    let mut leftover_num = (u32::from(morsels[0]) << 26) | (u32::from(morsels[1]) << 20)\n        | (u32::from(morsels[2]) << 14) | (u32::from(morsels[3]) << 8);\n    let mask = !0_u32 >> (leftover_bytes_to_append * 8);\n    if !decode_allow_trailing_bits && (leftover_num & mask) != 0 {\n        return Err(\n            DecodeError::InvalidLastSymbol(\n                    input_index + morsels_in_leftover - 1,\n                    last_symbol,\n                )\n                .into(),\n        );\n    }\n    for _ in 0..leftover_bytes_to_append {\n        let hi_byte = (leftover_num >> 24) as u8;\n        leftover_num <<= 8;\n        *output.get_mut(output_index).ok_or(DecodeSliceError::OutputSliceTooSmall)? = hi_byte;\n        output_index += 1;\n    }\n    Ok(\n        DecodeMetadata::new(\n            output_index,\n            if padding_bytes_count > 0 {\n                Some(input_index + first_padding_offset)\n            } else {\n                None\n            },\n        ),\n    )\n}\npub(crate) fn complete_quads_len(\n    input: &[u8],\n    input_len_rem: usize,\n    output_len: usize,\n    decode_table: &[u8; 256],\n) -> Result<usize, DecodeSliceError> {\n    debug_assert!(input.len() % 4 == input_len_rem);\n    if input_len_rem == 1 {\n        let last_byte = input[input.len() - 1];\n        if last_byte != PAD_BYTE && decode_table[usize::from(last_byte)] == INVALID_VALUE\n        {\n            return Err(DecodeError::InvalidByte(input.len() - 1, last_byte).into());\n        }\n    }\n    let input_complete_nonterminal_quads_len = input\n        .len()\n        .saturating_sub(input_len_rem)\n        .saturating_sub(usize::from(input_len_rem == 0) * 4);\n    debug_assert!(\n        input.is_empty() || (1..= 4).contains(& (input.len() -\n        input_complete_nonterminal_quads_len))\n    );\n    if output_len < input_complete_nonterminal_quads_len / 4 * 3 {\n        return Err(DecodeSliceError::OutputSliceTooSmall);\n    }\n    Ok(input_complete_nonterminal_quads_len)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Helper to avoid duplicating `num_chunks` calculation, which is costly on short inputs.\n/// Returns the decode metadata, or an error.\n 35 pub(crate) fn decode_helper(\n 36     input: &[u8],\n 37     estimate: &GeneralPurposeEstimate,\n 38     output: &mut [u8],\n 39     decode_table: &[u8; 256],\n 40     decode_allow_trailing_bits: bool,\n 41     padding_mode: DecodePaddingMode,\n 42 ) -> Result<DecodeMetadata, DecodeSliceError> {\n 43     let input_complete_nonterminal_quads_len =\n 44         complete_quads_len(input, estimate.rem, output.len(), decode_table)?;\n 45 \n 46     const UNROLLED_INPUT_CHUNK_SIZE: usize = 32;\n 47     const UNROLLED_OUTPUT_CHUNK_SIZE: usize = UNROLLED_INPUT_CHUNK_SIZE / 4 * 3;\n 48 \n 49     let input_complete_quads_after_unrolled_chunks_len =\n 50         input_complete_nonterminal_quads_len % UNROLLED_INPUT_CHUNK_SIZE;\n 51 \n 52     let input_unrolled_loop_len =\n 53         input_complete_nonterminal_quads_len - input_complete_quads_after_unrolled_chunks_len;\n 54 \n 55     // chunks of 32 bytes\n 56     for (chunk_index, chunk) in input[..input_unrolled_loop_len]\n 57         .chunks_exact(UNROLLED_INPUT_CHUNK_SIZE)\n 58         .enumerate()\n 59     {\n 60         let input_index = chunk_index * UNROLLED_INPUT_CHUNK_SIZE;\n 61         let chunk_output = &mut output[chunk_index * UNROLLED_OUTPUT_CHUNK_SIZE\n 62             ..(chunk_index + 1) * UNROLLED_OUTPUT_CHUNK_SIZE];\n 63 \n 64         decode_chunk_8(\n 65             &chunk[0..8],\n 66             input_index,\n 67             decode_table,\n 68             &mut chunk_output[0..6],\n 69         )?;\n 70         decode_chunk_8(\n 71             &chunk[8..16],\n 72             input_index + 8,\n 73             decode_table,\n 74             &mut chunk_output[6..12],\n 75         )?;\n 76         decode_chunk_8(\n 77             &chunk[16..24],\n 78             input_index + 16,\n 79             decode_table,\n 80             &mut chunk_output[12..18],\n 81         )?;\n 82         decode_chunk_8(\n 83             &chunk[24..32],\n 84             input_index + 24,\n 85             decode_table,\n 86             &mut chunk_output[18..24],\n 87         )?;\n 88     }\n 89 \n 90     // remaining quads, except for the last possibly partial one, as it may have padding\n 91     let output_unrolled_loop_len = input_unrolled_loop_len / 4 * 3;\n 92     let output_complete_quad_len = input_complete_nonterminal_quads_len / 4 * 3;\n 93     {\n 94         let output_after_unroll = &mut output[output_unrolled_loop_len..output_complete_quad_len];\n 95 \n 96         for (chunk_index, chunk) in input\n 97             [input_unrolled_loop_len..input_complete_nonterminal_quads_len]\n 98             .chunks_exact(4)\n 99             .enumerate()\n100         {\n101             let chunk_output = &mut output_after_unroll[chunk_index * 3..chunk_index * 3 + 3];\n102 \n103             decode_chunk_4(\n104                 chunk,\n105                 input_unrolled_loop_len + chunk_index * 4,\n106                 decode_table,\n107                 chunk_output,\n108             )?;\n109         }\n110     }\n111 \n112     super::decode_suffix::decode_suffix(\n113         input,\n114         input_complete_nonterminal_quads_len,\n115         output,\n116         output_complete_quad_len,\n117         decode_table,\n118         decode_allow_trailing_bits,\n119         padding_mode,\n120     )\n121 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}