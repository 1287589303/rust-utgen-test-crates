{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/write/encoder.rs\n// crate name is base64\nuse crate::engine::Engine;\nuse std::{cmp, fmt, io, io::{ErrorKind, Result}};\npub(crate) const BUF_SIZE: usize = 1024;\nconst MAX_INPUT_LEN: usize = BUF_SIZE / 4 * 3;\nconst MIN_ENCODE_CHUNK_SIZE: usize = 3;\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\npub struct EncoderWriter<'e, E: Engine, W: io::Write> {\n    engine: &'e E,\n    /// Where encoded data is written to. It's an Option as it's None immediately before Drop is\n    /// called so that `finish()` can return the underlying writer. None implies that `finish()` has\n    /// been called successfully.\n    delegate: Option<W>,\n    /// Holds a partial chunk, if any, after the last `write()`, so that we may then fill the chunk\n    /// with the next `write()`, encode it, then proceed with the rest of the input normally.\n    extra_input: [u8; MIN_ENCODE_CHUNK_SIZE],\n    /// How much of `extra` is occupied, in `[0, MIN_ENCODE_CHUNK_SIZE]`.\n    extra_input_occupied_len: usize,\n    /// Buffer to encode into. May hold leftover encoded bytes from a previous write call that the underlying writer\n    /// did not write last time.\n    output: [u8; BUF_SIZE],\n    /// How much of `output` is occupied with encoded data that couldn't be written last time\n    output_occupied_len: usize,\n    /// panic safety: don't write again in destructor if writer panicked while we were writing to it\n    panicked: bool,\n}\nimpl<'e, E: Engine, W: io::Write> EncoderWriter<'e, E, W> {\n    pub fn new(delegate: W, engine: &'e E) -> EncoderWriter<'e, E, W> {}\n    pub fn finish(&mut self) -> Result<W> {}\n    fn write_final_leftovers(&mut self) -> Result<()> {}\n    fn write_to_delegate(&mut self, current_output_len: usize) -> Result<()> {\n        self.panicked = true;\n        let res = self\n            .delegate\n            .as_mut()\n            .expect(\"Writer must be present\")\n            .write(&self.output[..current_output_len]);\n        self.panicked = false;\n        res.map(|consumed| {\n            debug_assert!(consumed <= current_output_len);\n            if consumed < current_output_len {\n                self.output_occupied_len = current_output_len\n                    .checked_sub(consumed)\n                    .unwrap();\n                self.output.rotate_left(consumed);\n            } else {\n                self.output_occupied_len = 0;\n            }\n        })\n    }\n    fn write_all_encoded_output(&mut self) -> Result<()> {}\n    pub fn into_inner(mut self) -> W {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Write as much of the encoded output to the delegate writer as it will accept, and store the\n/// leftovers to be attempted at the next `write()` call. Updates `self.output_occupied_len`.\n///\n/// # Errors\n///\n/// Errors from the delegate writer are returned. In the case of an error,\n/// `self.output_occupied_len` will not be updated, as errors from `write` are specified to mean\n/// that no write took place.\n179 fn write_to_delegate(&mut self, current_output_len: usize) -> Result<()> {\n180     self.panicked = true;\n181     let res = self\n182         .delegate\n183         .as_mut()\n184         .expect(\"Writer must be present\")\n185         .write(&self.output[..current_output_len]);\n186     self.panicked = false;\n187 \n188     res.map(|consumed| {\n189         debug_assert!(consumed <= current_output_len);\n190 \n191         if consumed < current_output_len {\n192             self.output_occupied_len = current_output_len.checked_sub(consumed).unwrap();\n193             // If we're blocking on I/O, the minor inefficiency of copying bytes to the\n194             // start of the buffer is the least of our concerns...\n195             // TODO Rotate moves more than we need to; copy_within now stable.\n196             self.output.rotate_left(consumed);\n197         } else {\n198             self.output_occupied_len = 0;\n199         }\n200     })\n201 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}