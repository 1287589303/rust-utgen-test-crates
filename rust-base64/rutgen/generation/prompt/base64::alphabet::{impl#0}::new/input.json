{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/alphabet.rs\n// crate name is base64\nuse crate::PAD_BYTE;\nuse core::{convert, fmt};\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\nconst ALPHABET_SIZE: usize = 64;\npub const STANDARD: Alphabet = Alphabet::from_str_unchecked(\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n);\npub const URL_SAFE: Alphabet = Alphabet::from_str_unchecked(\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n);\npub const CRYPT: Alphabet = Alphabet::from_str_unchecked(\n    \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n);\npub const BCRYPT: Alphabet = Alphabet::from_str_unchecked(\n    \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n);\npub const IMAP_MUTF7: Alphabet = Alphabet::from_str_unchecked(\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+,\",\n);\npub const BIN_HEX: Alphabet = Alphabet::from_str_unchecked(\n    \"!\\\"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr\",\n);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Alphabet {\n    pub(crate) symbols: [u8; ALPHABET_SIZE],\n}\n#[derive(Debug, Eq, PartialEq)]\npub enum ParseAlphabetError {\n    /// Alphabets must be 64 ASCII bytes\n    InvalidLength,\n    /// All bytes must be unique\n    DuplicatedByte(u8),\n    /// All bytes must be printable (in the range `[32, 126]`).\n    UnprintableByte(u8),\n    /// `=` cannot be used\n    ReservedByte(u8),\n}\nimpl Alphabet {\n    const fn from_str_unchecked(alphabet: &str) -> Self {\n        let mut symbols = [0_u8; ALPHABET_SIZE];\n        let source_bytes = alphabet.as_bytes();\n        let mut index = 0;\n        while index < ALPHABET_SIZE {\n            symbols[index] = source_bytes[index];\n            index += 1;\n        }\n        Self { symbols }\n    }\n    pub const fn new(alphabet: &str) -> Result<Self, ParseAlphabetError> {\n        let bytes = alphabet.as_bytes();\n        if bytes.len() != ALPHABET_SIZE {\n            return Err(ParseAlphabetError::InvalidLength);\n        }\n        {\n            let mut index = 0;\n            while index < ALPHABET_SIZE {\n                let byte = bytes[index];\n                if !(byte >= 32_u8 && byte <= 126_u8) {\n                    return Err(ParseAlphabetError::UnprintableByte(byte));\n                }\n                if byte == PAD_BYTE {\n                    return Err(ParseAlphabetError::ReservedByte(byte));\n                }\n                let mut probe_index = 0;\n                while probe_index < ALPHABET_SIZE {\n                    if probe_index == index {\n                        probe_index += 1;\n                        continue;\n                    }\n                    let probe_byte = bytes[probe_index];\n                    if byte == probe_byte {\n                        return Err(ParseAlphabetError::DuplicatedByte(byte));\n                    }\n                    probe_index += 1;\n                }\n                index += 1;\n            }\n        }\n        Ok(Self::from_str_unchecked(alphabet))\n    }\n    #[must_use]\n    pub fn as_str(&self) -> &str {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create an `Alphabet` from a string of 64 unique printable ASCII bytes.\n///\n/// The `=` byte is not allowed as it is used for padding.\n 79 pub const fn new(alphabet: &str) -> Result<Self, ParseAlphabetError> {\n 80     let bytes = alphabet.as_bytes();\n 81     if bytes.len() != ALPHABET_SIZE {\n 82         return Err(ParseAlphabetError::InvalidLength);\n 83     }\n 84 \n 85     {\n 86         let mut index = 0;\n 87         while index < ALPHABET_SIZE {\n 88             let byte = bytes[index];\n 89 \n 90             // must be ascii printable. 127 (DEL) is commonly considered printable\n 91             // for some reason but clearly unsuitable for base64.\n 92             if !(byte >= 32_u8 && byte <= 126_u8) {\n 93                 return Err(ParseAlphabetError::UnprintableByte(byte));\n 94             }\n 95             // = is assumed to be padding, so cannot be used as a symbol\n 96             if byte == PAD_BYTE {\n 97                 return Err(ParseAlphabetError::ReservedByte(byte));\n 98             }\n 99 \n100             // Check for duplicates while staying within what const allows.\n101             // It's n^2, but only over 64 hot bytes, and only once, so it's likely in the single digit\n102             // microsecond range.\n103 \n104             let mut probe_index = 0;\n105             while probe_index < ALPHABET_SIZE {\n106                 if probe_index == index {\n107                     probe_index += 1;\n108                     continue;\n109                 }\n110 \n111                 let probe_byte = bytes[probe_index];\n112 \n113                 if byte == probe_byte {\n114                     return Err(ParseAlphabetError::DuplicatedByte(byte));\n115                 }\n116 \n117                 probe_index += 1;\n118             }\n119 \n120             index += 1;\n121         }\n122     }\n123 \n124     Ok(Self::from_str_unchecked(alphabet))\n125 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}