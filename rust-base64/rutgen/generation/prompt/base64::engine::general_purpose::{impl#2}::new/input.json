{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/general_purpose/mod.rs\n// crate name is base64\nuse crate::{\n    alphabet, alphabet::Alphabet, engine::{Config, DecodeMetadata, DecodePaddingMode},\n    DecodeSliceError,\n};\nuse core::convert::TryInto;\npub use decode::GeneralPurposeEstimate;\npub(crate) const INVALID_VALUE: u8 = 255;\npub const STANDARD: GeneralPurpose = GeneralPurpose::new(&alphabet::STANDARD, PAD);\npub const STANDARD_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::STANDARD,\n    PAD_INDIFFERENT,\n);\npub const STANDARD_NO_PAD: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::STANDARD,\n    NO_PAD,\n);\npub const STANDARD_NO_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::STANDARD,\n    NO_PAD_INDIFFERENT,\n);\npub const URL_SAFE: GeneralPurpose = GeneralPurpose::new(&alphabet::URL_SAFE, PAD);\npub const URL_SAFE_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::URL_SAFE,\n    PAD_INDIFFERENT,\n);\npub const URL_SAFE_NO_PAD: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::URL_SAFE,\n    NO_PAD,\n);\npub const URL_SAFE_NO_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::URL_SAFE,\n    NO_PAD_INDIFFERENT,\n);\npub const PAD: GeneralPurposeConfig = GeneralPurposeConfig::new();\npub const PAD_INDIFFERENT: GeneralPurposeConfig = GeneralPurposeConfig::new()\n    .with_encode_padding(true)\n    .with_decode_padding_mode(DecodePaddingMode::Indifferent);\npub const NO_PAD: GeneralPurposeConfig = GeneralPurposeConfig::new()\n    .with_encode_padding(false)\n    .with_decode_padding_mode(DecodePaddingMode::RequireNone);\npub const NO_PAD_INDIFFERENT: GeneralPurposeConfig = GeneralPurposeConfig::new()\n    .with_encode_padding(false)\n    .with_decode_padding_mode(DecodePaddingMode::Indifferent);\npub trait Config {\n    fn encode_padding(&self) -> bool;\n}\n#[derive(Clone, Copy, Debug)]\npub struct GeneralPurposeConfig {\n    encode_padding: bool,\n    decode_allow_trailing_bits: bool,\n    decode_padding_mode: DecodePaddingMode,\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum DecodePaddingMode {\n    /// Canonical padding is allowed, but any fewer padding bytes than that is also allowed.\n    Indifferent,\n    /// Padding must be canonical (0, 1, or 2 `=` as needed to produce a 4 byte suffix).\n    RequireCanonical,\n    /// Padding must be absent -- for when you want predictable padding, without any wasted bytes.\n    RequireNone,\n}\nimpl GeneralPurposeConfig {\n    #[must_use]\n    pub const fn new() -> Self {\n        Self {\n            encode_padding: true,\n            decode_allow_trailing_bits: false,\n            decode_padding_mode: DecodePaddingMode::RequireCanonical,\n        }\n    }\n    #[must_use]\n    pub const fn with_encode_padding(self, padding: bool) -> Self {\n        Self {\n            encode_padding: padding,\n            ..self\n        }\n    }\n    #[must_use]\n    pub const fn with_decode_allow_trailing_bits(self, allow: bool) -> Self {\n        Self {\n            decode_allow_trailing_bits: allow,\n            ..self\n        }\n    }\n    #[must_use]\n    pub const fn with_decode_padding_mode(self, mode: DecodePaddingMode) -> Self {\n        Self {\n            decode_padding_mode: mode,\n            ..self\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new config with `padding` = `true`, `decode_allow_trailing_bits` = `false`, and\n/// `decode_padding_mode = DecodePaddingMode::RequireCanonicalPadding`.\n///\n/// This probably matches most people's expectations, but consider disabling padding to save\n/// a few bytes unless you specifically need it for compatibility with some legacy system.\n261 pub const fn new() -> Self {\n262     Self {\n263         // RFC states that padding must be applied by default\n264         encode_padding: true,\n265         decode_allow_trailing_bits: false,\n266         decode_padding_mode: DecodePaddingMode::RequireCanonical,\n267     }\n268 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}