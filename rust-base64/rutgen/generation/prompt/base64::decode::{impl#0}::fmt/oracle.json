{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/decode.rs\n// crate name is base64\nuse crate::engine::{general_purpose::STANDARD, DecodeEstimate, Engine};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\nuse core::fmt;\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeError {\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    ///\n    /// Padding characters (`=`) interspersed in the encoded form are invalid, as they may only\n    /// be present as the last 0-2 bytes of input.\n    ///\n    /// This error may also indicate that extraneous trailing input bytes are present, causing\n    /// otherwise valid padding to no longer be the last bytes of input.\n    InvalidByte(usize, u8),\n    /// The length of the input, as measured in valid base64 symbols, is invalid.\n    /// There must be 2-4 symbols in the last input quad.\n    InvalidLength(usize),\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike [`DecodeError::InvalidByte`], which reports symbols that aren't in the alphabet,\n    /// this error is for symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n    /// The nature of the padding was not as configured: absent or incorrect when it must be\n    /// canonical, or present when it must be absent, etc.\n    InvalidPadding,\n}\nimpl fmt::Display for DecodeError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match *self {\n            Self::InvalidByte(index, byte) => {\n                write!(f, \"Invalid symbol {}, offset {}.\", byte, index)\n            }\n            Self::InvalidLength(len) => write!(f, \"Invalid input length: {}\", len),\n            Self::InvalidLastSymbol(index, byte) => {\n                write!(f, \"Invalid last symbol {}, offset {}.\", byte, index)\n            }\n            Self::InvalidPadding => write!(f, \"Invalid padding\"),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n33 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n34     match *self {\n35         Self::InvalidByte(index, byte) => {\n36             write!(f, \"Invalid symbol {}, offset {}.\", byte, index)\n37         }\n38         Self::InvalidLength(len) => write!(f, \"Invalid input length: {}\", len),\n39         Self::InvalidLastSymbol(index, byte) => {\n40             write!(f, \"Invalid last symbol {}, offset {}.\", byte, index)\n41         }\n42         Self::InvalidPadding => write!(f, \"Invalid padding\"),\n43     }\n44 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}