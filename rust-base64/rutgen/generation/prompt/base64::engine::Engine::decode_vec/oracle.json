{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/mod.rs\n// crate name is base64\n#[cfg(any(feature = \"alloc\", test))]\nuse crate::chunked_encoder;\nuse crate::{\n    encode::{encode_with_padding, EncodeSliceError},\n    encoded_len, DecodeError, DecodeSliceError,\n};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::{string::String, vec};\npub use general_purpose::{GeneralPurpose, GeneralPurposeConfig};\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError> {\n        fn inner<E>(\n            engine: &E,\n            input_bytes: &[u8],\n            buffer: &mut Vec<u8>,\n        ) -> Result<(), DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let starting_output_len = buffer.len();\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let total_len_estimate = estimate\n                .decoded_len_estimate()\n                .checked_add(starting_output_len)\n                .expect(\"Overflow when calculating output buffer length\");\n            buffer.resize(total_len_estimate, 0);\n            let buffer_slice = &mut buffer.as_mut_slice()[starting_output_len..];\n            let bytes_written = engine\n                .internal_decode(input_bytes, buffer_slice, estimate)\n                .map_err(|e| match e {\n                    DecodeSliceError::DecodeError(e) => e,\n                    DecodeSliceError::OutputSliceTooSmall => {\n                        unreachable!(\"Vec is sized conservatively\")\n                    }\n                })?\n                .decoded_len;\n            buffer.truncate(starting_output_len + bytes_written);\n            Ok(())\n        }\n        inner(self, input.as_ref(), buffer)\n    }\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeError {\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    ///\n    /// Padding characters (`=`) interspersed in the encoded form are invalid, as they may only\n    /// be present as the last 0-2 bytes of input.\n    ///\n    /// This error may also indicate that extraneous trailing input bytes are present, causing\n    /// otherwise valid padding to no longer be the last bytes of input.\n    InvalidByte(usize, u8),\n    /// The length of the input, as measured in valid base64 symbols, is invalid.\n    /// There must be 2-4 symbols in the last input quad.\n    InvalidLength(usize),\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike [`DecodeError::InvalidByte`], which reports symbols that aren't in the alphabet,\n    /// this error is for symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n    /// The nature of the padding was not as configured: absent or incorrect when it must be\n    /// canonical, or present when it must be absent, etc.\n    InvalidPadding,\n}\nfn inner<E>(\n    engine: &E,\n    input_bytes: &[u8],\n    buffer: &mut Vec<u8>,\n) -> Result<(), DecodeError>\nwhere\n    E: Engine + ?Sized,\n{\n    let starting_output_len = buffer.len();\n    let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n    let total_len_estimate = estimate\n        .decoded_len_estimate()\n        .checked_add(starting_output_len)\n        .expect(\"Overflow when calculating output buffer length\");\n    buffer.resize(total_len_estimate, 0);\n    let buffer_slice = &mut buffer.as_mut_slice()[starting_output_len..];\n    let bytes_written = engine\n        .internal_decode(input_bytes, buffer_slice, estimate)\n        .map_err(|e| match e {\n            DecodeSliceError::DecodeError(e) => e,\n            DecodeSliceError::OutputSliceTooSmall => {\n                unreachable!(\"Vec is sized conservatively\")\n            }\n        })?\n        .decoded_len;\n    buffer.truncate(starting_output_len + bytes_written);\n    Ok(())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the `input` into the supplied `buffer`.\n///\n/// Writes into the supplied `Vec`, which may allocate if its internal buffer isn't big enough.\n/// Returns a `Result` containing an empty tuple, aka `()`.\n///\n/// # Example\n///\n/// ```rust\n/// use base64::{Engine as _, alphabet, engine::{self, general_purpose}};\n/// const CUSTOM_ENGINE: engine::GeneralPurpose =\n///     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::PAD);\n///\n/// fn main() {\n///     use base64::Engine;\n///     let mut buffer = Vec::<u8>::new();\n///     // with the default engine\n///     general_purpose::STANDARD\n///         .decode_vec(\"aGVsbG8gd29ybGR+Cg==\", &mut buffer,).unwrap();\n///     println!(\"{:?}\", buffer);\n///\n///     buffer.clear();\n///\n///     // with a custom engine\n///     CUSTOM_ENGINE.decode_vec(\n///         \"aGVsbG8gaW50ZXJuZXR-Cg==\",\n///         &mut buffer,\n///     ).unwrap();\n///     println!(\"{:?}\", buffer);\n/// }\n/// ```\n302 fn decode_vec<T: AsRef<[u8]>>(\n303     &self,\n304     input: T,\n305     buffer: &mut Vec<u8>,\n306 ) -> Result<(), DecodeError> {\n307     fn inner<E>(engine: &E, input_bytes: &[u8], buffer: &mut Vec<u8>) -> Result<(), DecodeError>\n308     where\n309         E: Engine + ?Sized,\n310     {\n311         let starting_output_len = buffer.len();\n312         let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n313 \n314         let total_len_estimate = estimate\n315             .decoded_len_estimate()\n316             .checked_add(starting_output_len)\n317             .expect(\"Overflow when calculating output buffer length\");\n318 \n319         buffer.resize(total_len_estimate, 0);\n320 \n321         let buffer_slice = &mut buffer.as_mut_slice()[starting_output_len..];\n322 \n323         let bytes_written = engine\n324             .internal_decode(input_bytes, buffer_slice, estimate)\n325             .map_err(|e| match e {\n326                 DecodeSliceError::DecodeError(e) => e,\n327                 DecodeSliceError::OutputSliceTooSmall => {\n328                     unreachable!(\"Vec is sized conservatively\")\n329                 }\n330             })?\n331             .decoded_len;\n332 \n333         buffer.truncate(starting_output_len + bytes_written);\n334 \n335         Ok(())\n336     }\n337 \n338     inner(self, input.as_ref(), buffer)\n339 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}