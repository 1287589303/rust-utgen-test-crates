{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/general_purpose/decode_suffix.rs\n// crate name is base64\nuse crate::{\n    engine::{general_purpose::INVALID_VALUE, DecodeMetadata, DecodePaddingMode},\n    DecodeError, DecodeSliceError, PAD_BYTE,\n};\n#[derive(PartialEq, Eq, Debug)]\npub struct DecodeMetadata {\n    /// Number of decoded bytes output\n    pub(crate) decoded_len: usize,\n    /// Offset of the first padding byte in the input, if any\n    pub(crate) padding_offset: Option<usize>,\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum DecodePaddingMode {\n    /// Canonical padding is allowed, but any fewer padding bytes than that is also allowed.\n    Indifferent,\n    /// Padding must be canonical (0, 1, or 2 `=` as needed to produce a 4 byte suffix).\n    RequireCanonical,\n    /// Padding must be absent -- for when you want predictable padding, without any wasted bytes.\n    RequireNone,\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeSliceError {\n    /// A [`DecodeError`] occurred\n    DecodeError(DecodeError),\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeError {\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    ///\n    /// Padding characters (`=`) interspersed in the encoded form are invalid, as they may only\n    /// be present as the last 0-2 bytes of input.\n    ///\n    /// This error may also indicate that extraneous trailing input bytes are present, causing\n    /// otherwise valid padding to no longer be the last bytes of input.\n    InvalidByte(usize, u8),\n    /// The length of the input, as measured in valid base64 symbols, is invalid.\n    /// There must be 2-4 symbols in the last input quad.\n    InvalidLength(usize),\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike [`DecodeError::InvalidByte`], which reports symbols that aren't in the alphabet,\n    /// this error is for symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n    /// The nature of the padding was not as configured: absent or incorrect when it must be\n    /// canonical, or present when it must be absent, etc.\n    InvalidPadding,\n}\nimpl DecodeMetadata {\n    pub(crate) fn new(decoded_bytes: usize, padding_index: Option<usize>) -> Self {\n        Self {\n            decoded_len: decoded_bytes,\n            padding_offset: padding_index,\n        }\n    }\n}\npub(crate) fn decode_suffix(\n    input: &[u8],\n    input_index: usize,\n    output: &mut [u8],\n    mut output_index: usize,\n    decode_table: &[u8; 256],\n    decode_allow_trailing_bits: bool,\n    padding_mode: DecodePaddingMode,\n) -> Result<DecodeMetadata, DecodeSliceError> {\n    debug_assert!((input.len() - input_index) <= 4);\n    let mut morsels_in_leftover = 0;\n    let mut padding_bytes_count = 0;\n    let mut first_padding_offset: usize = 0;\n    let mut last_symbol = 0_u8;\n    let mut morsels = [0_u8; 4];\n    for (leftover_index, &b) in input[input_index..].iter().enumerate() {\n        if b == PAD_BYTE {\n            if leftover_index < 2 {\n                debug_assert!(\n                    leftover_index == 0 || (leftover_index == 1 && padding_bytes_count ==\n                    0)\n                );\n                let bad_padding_index = input_index + leftover_index;\n                return Err(DecodeError::InvalidByte(bad_padding_index, b).into());\n            }\n            if padding_bytes_count == 0 {\n                first_padding_offset = leftover_index;\n            }\n            padding_bytes_count += 1;\n            continue;\n        }\n        if padding_bytes_count > 0 {\n            return Err(\n                DecodeError::InvalidByte(input_index + first_padding_offset, PAD_BYTE)\n                    .into(),\n            );\n        }\n        last_symbol = b;\n        let morsel = decode_table[b as usize];\n        if morsel == INVALID_VALUE {\n            return Err(DecodeError::InvalidByte(input_index + leftover_index, b).into());\n        }\n        morsels[morsels_in_leftover] = morsel;\n        morsels_in_leftover += 1;\n    }\n    if !input.is_empty() && morsels_in_leftover < 2 {\n        return Err(DecodeError::InvalidLength(input_index + morsels_in_leftover).into());\n    }\n    match padding_mode {\n        DecodePaddingMode::Indifferent => {}\n        DecodePaddingMode::RequireCanonical => {\n            if (padding_bytes_count + morsels_in_leftover) % 4 != 0 {\n                return Err(DecodeError::InvalidPadding.into());\n            }\n        }\n        DecodePaddingMode::RequireNone => {\n            if padding_bytes_count > 0 {\n                return Err(DecodeError::InvalidPadding.into());\n            }\n        }\n    }\n    let leftover_bytes_to_append = morsels_in_leftover * 6 / 8;\n    let mut leftover_num = (u32::from(morsels[0]) << 26) | (u32::from(morsels[1]) << 20)\n        | (u32::from(morsels[2]) << 14) | (u32::from(morsels[3]) << 8);\n    let mask = !0_u32 >> (leftover_bytes_to_append * 8);\n    if !decode_allow_trailing_bits && (leftover_num & mask) != 0 {\n        return Err(\n            DecodeError::InvalidLastSymbol(\n                    input_index + morsels_in_leftover - 1,\n                    last_symbol,\n                )\n                .into(),\n        );\n    }\n    for _ in 0..leftover_bytes_to_append {\n        let hi_byte = (leftover_num >> 24) as u8;\n        leftover_num <<= 8;\n        *output.get_mut(output_index).ok_or(DecodeSliceError::OutputSliceTooSmall)? = hi_byte;\n        output_index += 1;\n    }\n    Ok(\n        DecodeMetadata::new(\n            output_index,\n            if padding_bytes_count > 0 {\n                Some(input_index + first_padding_offset)\n            } else {\n                None\n            },\n        ),\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the last 0-4 bytes, checking for trailing set bits and padding per the provided\n/// parameters.\n///\n/// Returns the decode metadata representing the total number of bytes decoded, including the ones\n/// indicated as already written by `output_index`.\n 11 pub(crate) fn decode_suffix(\n 12     input: &[u8],\n 13     input_index: usize,\n 14     output: &mut [u8],\n 15     mut output_index: usize,\n 16     decode_table: &[u8; 256],\n 17     decode_allow_trailing_bits: bool,\n 18     padding_mode: DecodePaddingMode,\n 19 ) -> Result<DecodeMetadata, DecodeSliceError> {\n 20     debug_assert!((input.len() - input_index) <= 4);\n 21 \n 22     // Decode any leftovers that might not be a complete input chunk of 4 bytes.\n 23     // Use a u32 as a stack-resident 4 byte buffer.\n 24     let mut morsels_in_leftover = 0;\n 25     let mut padding_bytes_count = 0;\n 26     // offset from input_index\n 27     let mut first_padding_offset: usize = 0;\n 28     let mut last_symbol = 0_u8;\n 29     let mut morsels = [0_u8; 4];\n 30 \n 31     for (leftover_index, &b) in input[input_index..].iter().enumerate() {\n 32         // '=' padding\n 33         if b == PAD_BYTE {\n 34             // There can be bad padding bytes in a few ways:\n 35             // 1 - Padding with non-padding characters after it\n 36             // 2 - Padding after zero or one characters in the current quad (should only\n 37             //     be after 2 or 3 chars)\n 38             // 3 - More than two characters of padding. If 3 or 4 padding chars\n 39             //     are in the same quad, that implies it will be caught by #2.\n 40             //     If it spreads from one quad to another, it will be an invalid byte\n 41             //     in the first quad.\n 42             // 4 - Non-canonical padding -- 1 byte when it should be 2, etc.\n 43             //     Per config, non-canonical but still functional non- or partially-padded base64\n 44             //     may be treated as an error condition.\n 45 \n 46             if leftover_index < 2 {\n 47                 // Check for error #2.\n 48                 // Either the previous byte was padding, in which case we would have already hit\n 49                 // this case, or it wasn't, in which case this is the first such error.\n 50                 debug_assert!(\n 51                     leftover_index == 0 || (leftover_index == 1 && padding_bytes_count == 0)\n 52                 );\n 53                 let bad_padding_index = input_index + leftover_index;\n 54                 return Err(DecodeError::InvalidByte(bad_padding_index, b).into());\n 55             }\n 56 \n 57             if padding_bytes_count == 0 {\n 58                 first_padding_offset = leftover_index;\n 59             }\n 60 \n 61             padding_bytes_count += 1;\n 62             continue;\n 63         }\n 64 \n 65         // Check for case #1.\n 66         // To make '=' handling consistent with the main loop, don't allow\n 67         // non-suffix '=' in trailing chunk either. Report error as first\n 68         // erroneous padding.\n 69         if padding_bytes_count > 0 {\n 70             return Err(\n 71                 DecodeError::InvalidByte(input_index + first_padding_offset, PAD_BYTE).into(),\n 72             );\n 73         }\n 74 \n 75         last_symbol = b;\n 76 \n 77         // can use up to 8 * 6 = 48 bits of the u64, if last chunk has no padding.\n 78         // Pack the leftovers from left to right.\n 79         let morsel = decode_table[b as usize];\n 80         if morsel == INVALID_VALUE {\n 81             return Err(DecodeError::InvalidByte(input_index + leftover_index, b).into());\n 82         }\n 83 \n 84         morsels[morsels_in_leftover] = morsel;\n 85         morsels_in_leftover += 1;\n 86     }\n 87 \n 88     // If there was 1 trailing byte, and it was valid, and we got to this point without hitting\n 89     // an invalid byte, now we can report invalid length\n 90     if !input.is_empty() && morsels_in_leftover < 2 {\n 91         return Err(DecodeError::InvalidLength(input_index + morsels_in_leftover).into());\n 92     }\n 93 \n 94     match padding_mode {\n 95         DecodePaddingMode::Indifferent => { /* everything we care about was already checked */ }\n 96         DecodePaddingMode::RequireCanonical => {\n 97             // allow empty input\n 98             if (padding_bytes_count + morsels_in_leftover) % 4 != 0 {\n 99                 return Err(DecodeError::InvalidPadding.into());\n100             }\n101         }\n102         DecodePaddingMode::RequireNone => {\n103             if padding_bytes_count > 0 {\n104                 // check at the end to make sure we let the cases of padding that should be InvalidByte\n105                 // get hit\n106                 return Err(DecodeError::InvalidPadding.into());\n107             }\n108         }\n109     }\n110 \n111     // When encoding 1 trailing byte (e.g. 0xFF), 2 base64 bytes (\"/w\") are needed.\n112     // / is the symbol for 63 (0x3F, bottom 6 bits all set) and w is 48 (0x30, top 2 bits\n113     // of bottom 6 bits set).\n114     // When decoding two symbols back to one trailing byte, any final symbol higher than\n115     // w would still decode to the original byte because we only care about the top two\n116     // bits in the bottom 6, but would be a non-canonical encoding. So, we calculate a\n117     // mask based on how many bits are used for just the canonical encoding, and optionally\n118     // error if any other bits are set. In the example of one encoded byte -> 2 symbols,\n119     // 2 symbols can technically encode 12 bits, but the last 4 are non-canonical, and\n120     // useless since there are no more symbols to provide the necessary 4 additional bits\n121     // to finish the second original byte.\n122 \n123     let leftover_bytes_to_append = morsels_in_leftover * 6 / 8;\n124     // Put the up to 6 complete bytes as the high bytes.\n125     // Gain a couple percent speedup from nudging these ORs to use more ILP with a two-way split.\n126     let mut leftover_num = (u32::from(morsels[0]) << 26)\n127         | (u32::from(morsels[1]) << 20)\n128         | (u32::from(morsels[2]) << 14)\n129         | (u32::from(morsels[3]) << 8);\n130 \n131     // if there are bits set outside the bits we care about, last symbol encodes trailing bits that\n132     // will not be included in the output\n133     let mask = !0_u32 >> (leftover_bytes_to_append * 8);\n134     if !decode_allow_trailing_bits && (leftover_num & mask) != 0 {\n135         // last morsel is at `morsels_in_leftover` - 1\n136         return Err(DecodeError::InvalidLastSymbol(\n137             input_index + morsels_in_leftover - 1,\n138             last_symbol,\n139         )\n140         .into());\n141     }\n142 \n143     // Strangely, this approach benchmarks better than writing bytes one at a time,\n144     // or copy_from_slice into output.\n145     for _ in 0..leftover_bytes_to_append {\n146         let hi_byte = (leftover_num >> 24) as u8;\n147         leftover_num <<= 8;\n148         *output\n149             .get_mut(output_index)\n150             .ok_or(DecodeSliceError::OutputSliceTooSmall)? = hi_byte;\n151         output_index += 1;\n152     }\n153 \n154     Ok(DecodeMetadata::new(\n155         output_index,\n156         if padding_bytes_count > 0 {\n157             Some(input_index + first_padding_offset)\n158         } else {\n159             None\n160         },\n161     ))\n162 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}