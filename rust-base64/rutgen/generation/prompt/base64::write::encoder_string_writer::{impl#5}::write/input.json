{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/write/encoder_string_writer.rs\n// crate name is base64\nuse super::encoder::EncoderWriter;\nuse crate::engine::Engine;\nuse std::io;\npub trait StrConsumer {\n    fn consume(&mut self, buf: &str);\n}\nstruct Utf8SingleCodeUnitWriter<S: StrConsumer> {\n    str_consumer: S,\n}\nimpl<S: StrConsumer> io::Write for Utf8SingleCodeUnitWriter<S> {\n    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n        let s = std::str::from_utf8(buf).expect(\"Input must be valid UTF-8\");\n        self.str_consumer.consume(s);\n        Ok(buf.len())\n    }\n    fn flush(&mut self) -> io::Result<()> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n120 fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n121     // Because we expect all input to be valid utf-8 individual bytes, we can encode any buffer\n122     // length\n123     let s = std::str::from_utf8(buf).expect(\"Input must be valid UTF-8\");\n124 \n125     self.str_consumer.consume(s);\n126 \n127     Ok(buf.len())\n128 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}