{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/encode.rs\n// crate name is base64\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::string::String;\nuse core::fmt;\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\n#[cfg(any(feature = \"alloc\", test))]\nuse crate::engine::general_purpose::STANDARD;\nuse crate::engine::{Config, Engine};\nuse crate::PAD_BYTE;\npub(crate) fn encode_with_padding<E: Engine + ?Sized>(\n    input: &[u8],\n    output: &mut [u8],\n    engine: &E,\n    expected_encoded_size: usize,\n) {\n    debug_assert_eq!(expected_encoded_size, output.len());\n    let b64_bytes_written = engine.internal_encode(input, output);\n    let padding_bytes = if engine.config().encode_padding() {\n        add_padding(b64_bytes_written, &mut output[b64_bytes_written..])\n    } else {\n        0\n    };\n    let encoded_bytes = b64_bytes_written\n        .checked_add(padding_bytes)\n        .expect(\"usize overflow when calculating b64 length\");\n    debug_assert_eq!(expected_encoded_size, encoded_bytes);\n}\npub(crate) fn add_padding(unpadded_output_len: usize, output: &mut [u8]) -> usize {\n    let pad_bytes = (4 - (unpadded_output_len % 4)) % 4;\n    #[allow(clippy::needless_range_loop)]\n    for i in 0..pad_bytes {\n        output[i] = PAD_BYTE;\n    }\n    pad_bytes\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// B64-encode and pad (if configured).\n///\n/// This helper exists to avoid recalculating `encoded_size`, which is relatively expensive on short\n/// inputs.\n///\n/// `encoded_size` is the encoded size calculated for `input`.\n///\n/// `output` must be of size `encoded_size`.\n///\n/// All bytes in `output` will be written to since it is exactly the size of the output.\n69 pub(crate) fn encode_with_padding<E: Engine + ?Sized>(\n70     input: &[u8],\n71     output: &mut [u8],\n72     engine: &E,\n73     expected_encoded_size: usize,\n74 ) {\n75     debug_assert_eq!(expected_encoded_size, output.len());\n76 \n77     let b64_bytes_written = engine.internal_encode(input, output);\n78 \n79     let padding_bytes = if engine.config().encode_padding() {\n80         add_padding(b64_bytes_written, &mut output[b64_bytes_written..])\n81     } else {\n82         0\n83     };\n84 \n85     let encoded_bytes = b64_bytes_written\n86         .checked_add(padding_bytes)\n87         .expect(\"usize overflow when calculating b64 length\");\n88 \n89     debug_assert_eq!(expected_encoded_size, encoded_bytes);\n90 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}