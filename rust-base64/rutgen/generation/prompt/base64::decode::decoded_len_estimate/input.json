{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/decode.rs\n// crate name is base64\nuse crate::engine::{general_purpose::STANDARD, DecodeEstimate, Engine};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\nuse core::fmt;\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\npub trait DecodeEstimate {\n    fn decoded_len_estimate(&self) -> usize;\n}\npub struct GeneralPurposeEstimate {\n    /// input len % 4\n    rem: usize,\n    conservative_decoded_len: usize,\n}\n#[derive(Debug, Clone)]\npub struct GeneralPurpose {\n    encode_table: [u8; 64],\n    decode_table: [u8; 256],\n    config: GeneralPurposeConfig,\n}\n#[must_use]\npub fn decoded_len_estimate(encoded_len: usize) -> usize {\n    STANDARD.internal_decoded_len_estimate(encoded_len).decoded_len_estimate()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a conservative estimate of the decoded size of `encoded_len` base64 symbols (rounded up\n/// to the next group of 3 decoded bytes).\n///\n/// The resulting length will be a safe choice for the size of a decode buffer, but may have up to\n/// 2 trailing bytes that won't end up being needed.\n///\n/// # Examples\n///\n/// ```\n/// use base64::decoded_len_estimate;\n///\n/// assert_eq!(3, decoded_len_estimate(1));\n/// assert_eq!(3, decoded_len_estimate(2));\n/// assert_eq!(3, decoded_len_estimate(3));\n/// assert_eq!(3, decoded_len_estimate(4));\n/// // start of the next quad of encoded symbols\n/// assert_eq!(6, decoded_len_estimate(5));\n/// ```\n150 pub fn decoded_len_estimate(encoded_len: usize) -> usize {\n151     STANDARD\n152         .internal_decoded_len_estimate(encoded_len)\n153         .decoded_len_estimate()\n154 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}