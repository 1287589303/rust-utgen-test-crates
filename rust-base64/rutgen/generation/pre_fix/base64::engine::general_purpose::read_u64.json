{
  "name": "base64::engine::general_purpose::read_u64",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": false,
  "loc": "src/engine/general_purpose/mod.rs:231:1:233:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions: Input slice `s` must be a byte slice with exactly 8 bytes in length, containing valid u8 values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = &[0, 0, 0, 0, 0, 0, 0, 1];",
                "    let _result = read_u64(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 0, 1]), 1);",
                "    assert_eq!(read_u64(&[255, 255, 255, 255, 255, 255, 255, 255]), 18446744073709551615);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u64(&[1, 0, 0, 0, 0, 0, 0, 0]), 72057594037927936);",
                "    assert_eq!(read_u64(&[0, 1, 0, 0, 0, 0, 0, 0]), 256);",
                "    assert_eq!(read_u64(&[0, 0, 1, 0, 0, 0, 0, 0]), 65536);",
                "    assert_eq!(read_u64(&[0, 0, 0, 1, 0, 0, 0, 0]), 16777216);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 1, 0, 0, 0]), 4294967296);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 1, 0, 0]), 1099511627776);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 1, 0]), 281474976710656);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 0, 255]), 255);"
              ],
              "code": [
                "{",
                "    let input: &[u8] = &[0, 0, 0, 0, 0, 0, 0, 1];",
                "    let _result = read_u64(input);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 0, 1]), 1);",
                "    assert_eq!(read_u64(&[255, 255, 255, 255, 255, 255, 255, 255]), 18446744073709551615);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u64(&[1, 0, 0, 0, 0, 0, 0, 0]), 72057594037927936);",
                "    assert_eq!(read_u64(&[0, 1, 0, 0, 0, 0, 0, 0]), 256);",
                "    assert_eq!(read_u64(&[0, 0, 1, 0, 0, 0, 0, 0]), 65536);",
                "    assert_eq!(read_u64(&[0, 0, 0, 1, 0, 0, 0, 0]), 16777216);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 1, 0, 0, 0]), 4294967296);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 1, 0, 0]), 1099511627776);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 1, 0]), 281474976710656);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 0, 255]), 255);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = &[255, 255, 255, 255, 255, 255, 255, 255];",
                "    let _result = read_u64(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, 0xFFFFFFFFFFFFFFFF);"
              ],
              "code": [
                "{",
                "    let input: &[u8] = &[255, 255, 255, 255, 255, 255, 255, 255];",
                "    let _result = read_u64(input);",
                "    assert_eq!(_result, 0xFFFFFFFFFFFFFFFF);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let input: &[u8] = &[0, 0, 0, 0, 0, 0, 0];",
                "    let _result = read_u64(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 0, 1]), 1);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 1, 0]), 256);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 1, 0, 0]), 65536);",
                "    assert_eq!(read_u64(&[0, 0, 0, 1, 0, 0, 0, 0]), 16777216);",
                "    assert_eq!(read_u64(&[1, 0, 0, 0, 0, 0, 0, 0]), 72057594037927936);",
                "    assert!(std::panic::catch_unwind(|| read_u64(&[0, 0, 0, 0, 0, 0]))).is_err();",
                "    assert!(std::panic::catch_unwind(|| read_u64(&[0, 0, 0, 0, 0, 0, 0]))).is_err();"
              ],
              "code": [
                "{",
                "    let input: &[u8] = &[0, 0, 0, 0, 0, 0, 0];",
                "    let _result = read_u64(input);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 0, 1]), 1);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 0, 1, 0]), 256);",
                "    assert_eq!(read_u64(&[0, 0, 0, 0, 0, 1, 0, 0]), 65536);",
                "    assert_eq!(read_u64(&[0, 0, 0, 1, 0, 0, 0, 0]), 16777216);",
                "    assert_eq!(read_u64(&[1, 0, 0, 0, 0, 0, 0, 0]), 72057594037927936);",
                "    assert!(std::panic::catch_unwind(|| read_u64(&[0, 0, 0, 0, 0, 0]))).is_err();",
                "    assert!(std::panic::catch_unwind(|| read_u64(&[0, 0, 0, 0, 0, 0, 0]))).is_err();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let input: &[u8] = &[0, 0, 0, 0, 0, 0, 0, 0, 1];",
                "    let _result = read_u64(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| read_u64(&[0, 0, 0, 0, 0, 0, 0, 0, 1])).is_err(), true);"
              ],
              "code": [
                "{",
                "    let input: &[u8] = &[0, 0, 0, 0, 0, 0, 0, 0, 1];",
                "    let _result = read_u64(input);",
                "    assert_eq!(std::panic::catch_unwind(|| read_u64(&[0, 0, 0, 0, 0, 0, 0, 0, 1])).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let input: &[u8] = &[];",
                "    let _result = read_u64(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| read_u64(&[])).is_err(), true);"
              ],
              "code": [
                "{",
                "    let input: &[u8] = &[];",
                "    let _result = read_u64(input);",
                "    assert_eq!(std::panic::catch_unwind(|| read_u64(&[])).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}