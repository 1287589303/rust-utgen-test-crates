{
  "name": "base64::alphabet::{impl#1}::try_from",
  "mod_info": {
    "name": "alphabet",
    "loc": "src/lib.rs:284:1:284:18"
  },
  "visible": true,
  "loc": "src/alphabet.rs:137:5:139:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Base64;",
                "    impl Base64 {",
                "        fn new(value: &str) -> Result<Self, String> {",
                "            if value.is_empty() {",
                "                return Err(\"Empty string\".to_string());",
                "            }",
                "            Ok(Base64)",
                "        }",
                "",
                "        type Error = String;",
                "",
                "        fn try_from(value: &str) -> Result<Self, Self::Error> {",
                "            Self::new(value)",
                "        }",
                "    }",
                "",
                "    let result = Base64::try_from(\"test_value\");",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Base64;",
                "    impl Base64 {",
                "        fn new(value: &str) -> Result<Self, String> {",
                "            if value.is_empty() {",
                "                return Err(\"Empty string\".to_string());",
                "            }",
                "            Ok(Base64)",
                "        }",
                "",
                "        type Error = String;",
                "",
                "        fn try_from(value: &str) -> Result<Self, Self::Error> {",
                "            Self::new(value)",
                "        }",
                "    }",
                "",
                "    let result = Base64::try_from(\"\");",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap(), \"Empty string\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}