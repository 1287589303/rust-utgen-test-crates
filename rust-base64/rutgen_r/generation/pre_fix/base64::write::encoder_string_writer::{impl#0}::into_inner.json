{
  "name": "base64::write::encoder_string_writer::{impl#0}::into_inner",
  "mod_info": {
    "name": "write::encoder_string_writer",
    "loc": "src/write/mod.rs:3:1:3:27"
  },
  "visible": true,
  "loc": "src/write/encoder_string_writer.rs:67:5:72:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.encoder\n            .finish()\n            .expect(\"Writing to a consumer should never fail\")\n            .str_consumer\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Encoder {",
                "        finished: bool,",
                "        str_consumer: String,",
                "    }",
                "",
                "    impl Encoder {",
                "        fn finish(self) -> Result<Self, &'static str> {",
                "            if self.finished {",
                "                Ok(self)",
                "            } else {",
                "                Err(\"Not finished\")",
                "            }",
                "        }",
                "    }",
                "",
                "    struct StringWriter {",
                "        encoder: Encoder,",
                "    }",
                "",
                "    impl StringWriter {",
                "        fn new() -> StringWriter {",
                "            StringWriter {",
                "                encoder: Encoder {",
                "                    finished: true,",
                "                    str_consumer: String::new(),",
                "                },",
                "            }",
                "        }",
                "",
                "        fn into_inner(mut self) -> Encoder {",
                "            self.encoder",
                "                .finish()",
                "                .expect(\"Writing to a consumer should never fail\")",
                "        }",
                "    }",
                "",
                "    let writer = StringWriter::new();",
                "    let encoder = writer.into_inner();",
                "    assert_eq!(encoder.str_consumer, \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Encoder {",
                "        finished: bool,",
                "        str_consumer: String,",
                "    }",
                "",
                "    impl Encoder {",
                "        fn finish(self) -> Result<Self, &'static str> {",
                "            if self.finished {",
                "                Ok(self)",
                "            } else {",
                "                Err(\"Not finished\")",
                "            }",
                "        }",
                "    }",
                "",
                "    struct StringWriter {",
                "        encoder: Encoder,",
                "    }",
                "",
                "    impl StringWriter {",
                "        fn new(data: String) -> StringWriter {",
                "            StringWriter {",
                "                encoder: Encoder {",
                "                    finished: true,",
                "                    str_consumer: data,",
                "                },",
                "            }",
                "        }",
                "",
                "        fn into_inner(mut self) -> Encoder {",
                "            self.encoder",
                "                .finish()",
                "                .expect(\"Writing to a consumer should never fail\")",
                "        }",
                "    }",
                "",
                "    let writer = StringWriter::new(\"Hello, World!\".to_string());",
                "    let encoder = writer.into_inner();",
                "    assert_eq!(encoder.str_consumer, \"Hello, World!\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}