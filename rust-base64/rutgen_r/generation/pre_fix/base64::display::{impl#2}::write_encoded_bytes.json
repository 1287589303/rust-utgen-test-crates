{
  "name": "base64::display::{impl#2}::write_encoded_bytes",
  "mod_info": {
    "name": "display",
    "loc": "src/lib.rs:275:1:275:17"
  },
  "visible": true,
  "loc": "src/display.rs:47:5:52:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl TestWriter {",
                "        fn new() -> Self {",
                "            TestWriter { output: String::new() }",
                "        }",
                "",
                "        fn write_str(&mut self, s: &str) -> Result<(), std::fmt::Error> {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct Encoder {",
                "        f: TestWriter,",
                "    }",
                "",
                "    impl Encoder {",
                "        type Error = std::fmt::Error;",
                "",
                "        fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error> {",
                "            self.f.write_str(std::str::from_utf8(encoded).expect(\"base64 data was not utf8\"))",
                "        }",
                "    }",
                "",
                "    let mut encoder = Encoder { f: TestWriter::new() };",
                "    let encoded_data = b\"Hello, World!\";",
                "    let result = encoder.write_encoded_bytes(encoded_data);",
                "    assert!(result.is_ok());",
                "    assert_eq!(encoder.f.output, \"Hello, World!\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"base64 data was not utf8\")]"
              ],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestWriter {",
                "        output: String,",
                "    }",
                "",
                "    impl TestWriter {",
                "        fn new() -> Self {",
                "            TestWriter { output: String::new() }",
                "        }",
                "",
                "        fn write_str(&mut self, s: &str) -> Result<(), std::fmt::Error> {",
                "            self.output.push_str(s);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    struct Encoder {",
                "        f: TestWriter,",
                "    }",
                "",
                "    impl Encoder {",
                "        type Error = std::fmt::Error;",
                "",
                "        fn write_encoded_bytes(&mut self, encoded: &[u8]) -> Result<(), Self::Error> {",
                "            self.f.write_str(std::str::from_utf8(encoded).expect(\"base64 data was not utf8\"))",
                "        }",
                "    }",
                "",
                "    let mut encoder = Encoder { f: TestWriter::new() };",
                "    let invalid_encoded_data = &[0xFF, 0xFE]; // Invalid UTF-8 bytes",
                "    encoder.write_encoded_bytes(invalid_encoded_data).unwrap();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}