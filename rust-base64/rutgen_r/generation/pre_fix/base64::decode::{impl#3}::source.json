{
  "name": "base64::decode::{impl#3}::source",
  "mod_info": {
    "name": "decode",
    "loc": "src/lib.rs:293:1:293:12"
  },
  "visible": true,
  "loc": "src/decode.rs:70:5:75:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches DecodeSliceError::OutputSliceTooSmall at line 71 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct DecodeSliceError {",
                "        kind: DecodeSliceErrorKind,",
                "    }",
                "",
                "    enum DecodeSliceErrorKind {",
                "        DecodeError(Box<dyn std::error::Error>),",
                "        OutputSliceTooSmall,",
                "    }",
                "",
                "    impl DecodeSliceError {",
                "        fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {",
                "            match self.kind {",
                "                DecodeSliceErrorKind::DecodeError(ref e) => Some(e.as_ref()),",
                "                DecodeSliceErrorKind::OutputSliceTooSmall => None,",
                "            }",
                "        }",
                "    }",
                "",
                "    let error_instance = DecodeSliceError {",
                "        kind: DecodeSliceErrorKind::OutputSliceTooSmall,",
                "    };",
                "",
                "    assert_eq!(error_instance.source(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches DecodeSliceError::DecodeError(e) at line 71 is true\n",
        "precondition: self matches DecodeSliceError::DecodeError(e) at line 71 is true\n",
        "expected return value/type: Some(e)\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug)]",
            "enum DecodeSliceError {",
            "    DecodeError(Box<dyn std::error::Error + 'static>),",
            "    OutputSliceTooSmall,",
            "}",
            "",
            "impl DecodeSliceError {",
            "    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {",
            "        match self {",
            "            DecodeSliceError::DecodeError(e) => Some(e),",
            "            DecodeSliceError::OutputSliceTooSmall => None,",
            "        }",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct TestError;",
                "",
                "    impl std::fmt::Debug for TestError {",
                "        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {",
                "            write!(f, \"TestError\")",
                "        }",
                "    }",
                "",
                "    impl std::error::Error for TestError {}",
                "",
                "    let error: Box<dyn std::error::Error> = Box::new(TestError);",
                "    let decode_error = DecodeSliceError::DecodeError(error);",
                "    let result = decode_error.source();",
                "",
                "    assert!(result.is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}