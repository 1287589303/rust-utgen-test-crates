{
  "name": "base64::engine::Engine::decode_vec",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:302:5:339:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use base64::engine;",
            "use base64::engine::general_purpose;",
            "use base64::Engine as _;",
            "use base64::alphabet;"
          ],
          "has_test_mod": false,
          "common": [
            "#[should_panic]",
            "fn test_decode_vec_invalid_input() {",
            "",
            "    let mut buffer = Vec::new();",
            "    let _ = general_purpose::STANDARD.decode_vec(\"invalid_base64\", &mut buffer).unwrap();",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use base64::{Engine as _, engine::general_purpose};",
                "",
                "    let mut buffer = Vec::new();",
                "    let result = general_purpose::STANDARD.decode_vec(\"aGVsbG8gd29ybGR+Cg==\", &mut buffer);",
                "    assert!(result.is_ok());",
                "    assert_eq!(buffer, b\"hello world\\n\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use base64::{Engine as _, alphabet, engine::{self, general_purpose}};",
                "    ",
                "    const CUSTOM_ENGINE: engine::GeneralPurpose = ",
                "        engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::PAD);",
                "",
                "    let mut buffer = Vec::new();",
                "    let result = CUSTOM_ENGINE.decode_vec(\"aGVsbG8gaW50ZXJuZXR-Cg==\", &mut buffer);",
                "    assert!(result.is_ok());",
                "    assert_eq!(buffer, b\"hello internet\\n\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use base64::{Engine as _, engine::general_purpose};",
                "",
                "    let mut buffer = Vec::new();",
                "    let result = general_purpose::STANDARD.decode_vec(\"\", &mut buffer);",
                "    assert!(result.is_ok());",
                "    assert_eq!(buffer.is_empty(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}