{
  "name": "base64::engine::general_purpose::{impl#2}::new",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/mod.rs:261:5:268:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            // RFC states that padding must be applied by default\n            encode_padding: true,\n            decode_allow_trailing_bits: false,\n            decode_padding_mode: DecodePaddingMode::RequireCanonical,\n        }\n"
      ],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    struct Config {",
                "        encode_padding: bool,",
                "        decode_allow_trailing_bits: bool,",
                "        decode_padding_mode: DecodePaddingMode,",
                "    }",
                "",
                "    enum DecodePaddingMode {",
                "        RequireCanonical,",
                "    }",
                "",
                "    impl Config {",
                "        pub const fn new() -> Self {",
                "            Self {",
                "                encode_padding: true,",
                "                decode_allow_trailing_bits: false,",
                "                decode_padding_mode: DecodePaddingMode::RequireCanonical,",
                "            }",
                "        }",
                "    }",
                "",
                "    let config = Config::new();",
                "    assert_eq!(config.encode_padding, true);",
                "    assert_eq!(config.decode_allow_trailing_bits, false);",
                "    match config.decode_padding_mode {",
                "        DecodePaddingMode::RequireCanonical => {}",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}