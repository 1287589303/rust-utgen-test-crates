{
  "name": "base64::engine::Engine::encode_string",
  "mod_info": {
    "name": "engine",
    "loc": "src/lib.rs:281:1:281:16"
  },
  "visible": true,
  "loc": "src/engine/mod.rs:155:5:168:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [
            "use base64::engine::general_purpose;",
            "use base64::alphabet;",
            "use base64::Engine as _;",
            "use base64::engine;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use base64::{Engine as _, engine::{self, general_purpose}};",
                "",
                "    let mut output_buf = String::new();",
                "    general_purpose::STANDARD.encode_string(b\"test\", &mut output_buf);",
                "    ",
                "    assert_eq!(output_buf, \"dGVzdA==\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use base64::{Engine as _, engine::{self, general_purpose}, alphabet};",
                "",
                "    const CUSTOM_ENGINE: engine::GeneralPurpose =",
                "        engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);",
                "",
                "    let mut output_buf = String::new();",
                "    CUSTOM_ENGINE.encode_string(b\"test url\", &mut output_buf);",
                "    ",
                "    assert_eq!(output_buf, \"dGVzdCB1cmw\"); // base64 encoded URL-safe",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use base64::{Engine as _, engine::{self, general_purpose}};",
                "",
                "    let mut output_buf = String::new();",
                "    general_purpose::STANDARD.encode_string(b\"\", &mut output_buf);",
                "    ",
                "    assert_eq!(output_buf, \"\"); // empty input should produce empty output",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    use base64::{Engine as _, engine::{self, general_purpose}};",
                "",
                "    let mut output_buf = String::new();",
                "    general_purpose::STANDARD.encode_string(b\"hello, world!\", &mut output_buf);",
                "    ",
                "    assert_eq!(output_buf, \"aGVsbG8sIHdvcmxkIQ==\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}