{
  "name": "base64::read::decoder::{impl#0}::fmt",
  "mod_info": {
    "name": "read::decoder",
    "loc": "src/read/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/read/decoder.rs:63:5:73:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[derive(Debug)]",
            "struct DecoderReader {",
            "    b64_offset: usize,",
            "    b64_len: usize,",
            "    decoded_chunk_buffer: Vec<u8>,",
            "    decoded_offset: usize,",
            "    decoded_len: usize,",
            "    input_consumed_len: usize,",
            "    padding_offset: usize,",
            "}",
            "",
            "impl DecoderReader {",
            "    fn new(",
            "        b64_offset: usize,",
            "        b64_len: usize,",
            "        decoded_chunk_buffer: Vec<u8>,",
            "        decoded_offset: usize,",
            "        decoded_len: usize,",
            "        input_consumed_len: usize,",
            "        padding_offset: usize,",
            "    ) -> Self {",
            "        Self {",
            "            b64_offset,",
            "            b64_len,",
            "            decoded_chunk_buffer,",
            "            decoded_offset,",
            "            decoded_len,",
            "            input_consumed_len,",
            "            padding_offset,",
            "        }",
            "    }",
            "}"
          ],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let decoder = DecoderReader::new(0, 0, Vec::new(), 0, 0, 0, 0);",
                "    let result = format!(\"{:?}\", decoder);",
                "    assert!(result.contains(\"b64_offset: 0\"));",
                "    assert!(result.contains(\"b64_len: 0\"));",
                "    assert!(result.contains(\"decoded_chunk_buffer: []\"));",
                "    assert!(result.contains(\"decoded_offset: 0\"));",
                "    assert!(result.contains(\"decoded_len: 0\"));",
                "    assert!(result.contains(\"input_consumed_len: 0\"));",
                "    assert!(result.contains(\"padding_offset: 0\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let buffer = vec![1, 2, 3];",
                "    let decoder = DecoderReader::new(10, 5, buffer.clone(), 1, 3, 2, 0);",
                "    let result = format!(\"{:?}\", decoder);",
                "    assert!(result.contains(\"b64_offset: 10\"));",
                "    assert!(result.contains(\"b64_len: 5\"));",
                "    assert!(result.contains(\"decoded_chunk_buffer: [1, 2, 3]\"));",
                "    assert!(result.contains(\"decoded_offset: 1\"));",
                "    assert!(result.contains(\"decoded_len: 3\"));",
                "    assert!(result.contains(\"input_consumed_len: 2\"));",
                "    assert!(result.contains(\"padding_offset: 0\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [],
              "oracle": [],
              "code": [
                "{",
                "    let buffer = vec![255, 254, 253];",
                "    let decoder = DecoderReader::new(20, 10, buffer.clone(), 2, 10, 10, 1);",
                "    let result = format!(\"{:?}\", decoder);",
                "    assert!(result.contains(\"b64_offset: 20\"));",
                "    assert!(result.contains(\"b64_len: 10\"));",
                "    assert!(result.contains(\"decoded_chunk_buffer: [255, 254, 253]\"));",
                "    assert!(result.contains(\"decoded_offset: 2\"));",
                "    assert!(result.contains(\"decoded_len: 10\"));",
                "    assert!(result.contains(\"input_consumed_len: 10\"));",
                "    assert!(result.contains(\"padding_offset: 1\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}