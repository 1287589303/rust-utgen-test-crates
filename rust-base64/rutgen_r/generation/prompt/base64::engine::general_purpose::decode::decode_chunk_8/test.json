{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/engine/general_purpose/decode.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode 8 bytes of input into 6 bytes of output.\n///\n/// `input` is the 8 bytes to decode.\n/// `index_at_start_of_input` is the offset in the overall input (used for reporting errors\n/// accurately)\n/// `decode_table` is the lookup table for the particular base64 alphabet.\n/// `output` will have its first 6 bytes overwritten\n174 fn decode_chunk_8(\n175     input: &[u8],\n176     index_at_start_of_input: usize,\n177     decode_table: &[u8; 256],\n178     output: &mut [u8],\n179 ) -> Result<(), DecodeError> {\n180     let morsel = decode_table[usize::from(input[0])];\n181     if morsel == INVALID_VALUE {\n182         return Err(DecodeError::InvalidByte(index_at_start_of_input, input[0]));\n183     }\n184     let mut accum = u64::from(morsel) << 58;\n185 \n186     let morsel = decode_table[usize::from(input[1])];\n187     if morsel == INVALID_VALUE {\n188         return Err(DecodeError::InvalidByte(\n189             index_at_start_of_input + 1,\n190             input[1],\n191         ));\n192     }\n193     accum |= u64::from(morsel) << 52;\n194 \n195     let morsel = decode_table[usize::from(input[2])];\n196     if morsel == INVALID_VALUE {\n197         return Err(DecodeError::InvalidByte(\n198             index_at_start_of_input + 2,\n199             input[2],\n200         ));\n201     }\n202     accum |= u64::from(morsel) << 46;\n203 \n204     let morsel = decode_table[usize::from(input[3])];\n205     if morsel == INVALID_VALUE {\n206         return Err(DecodeError::InvalidByte(\n207             index_at_start_of_input + 3,\n208             input[3],\n209         ));\n210     }\n211     accum |= u64::from(morsel) << 40;\n212 \n213     let morsel = decode_table[usize::from(input[4])];\n214     if morsel == INVALID_VALUE {\n215         return Err(DecodeError::InvalidByte(\n216             index_at_start_of_input + 4,\n217             input[4],\n218         ));\n219     }\n220     accum |= u64::from(morsel) << 34;\n221 \n222     let morsel = decode_table[usize::from(input[5])];\n223     if morsel == INVALID_VALUE {\n224         return Err(DecodeError::InvalidByte(\n225             index_at_start_of_input + 5,\n226             input[5],\n227         ));\n228     }\n229     accum |= u64::from(morsel) << 28;\n230 \n231     let morsel = decode_table[usize::from(input[6])];\n232     if morsel == INVALID_VALUE {\n233         return Err(DecodeError::InvalidByte(\n234             index_at_start_of_input + 6,\n235             input[6],\n236         ));\n237     }\n238     accum |= u64::from(morsel) << 22;\n239 \n240     let morsel = decode_table[usize::from(input[7])];\n241     if morsel == INVALID_VALUE {\n242         return Err(DecodeError::InvalidByte(\n243             index_at_start_of_input + 7,\n244             input[7],\n245         ));\n246     }\n247     accum |= u64::from(morsel) << 16;\n248 \n249     output[..6].copy_from_slice(&accum.to_be_bytes()[..6]);\n250 \n251     Ok(())\n252 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}