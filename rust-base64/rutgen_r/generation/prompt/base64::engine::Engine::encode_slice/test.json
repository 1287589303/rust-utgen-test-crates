{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/engine/mod.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Encode arbitrary octets as base64 into a supplied slice.\n/// Writes into the supplied output buffer.\n///\n/// This is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident\n/// or statically-allocated buffer).\n///\n/// # Example\n///\n/// use base64::{Engine as _, engine::general_purpose};\n/// let s = b\"hello internet!\";\n/// let mut buf = Vec::new();\n/// // make sure we'll have a slice big enough for base64 + padding\n/// buf.resize(s.len() * 4 / 3 + 4, 0);\n///\n/// let bytes_written = general_purpose::STANDARD.encode_slice(s, &mut buf).unwrap();\n///\n/// // shorten our vec down to just what was written\n/// buf.truncate(bytes_written);\n///\n/// assert_eq!(s, general_purpose::STANDARD.decode(&buf).unwrap().as_slice());\n/// ```\n194 fn encode_slice<T: AsRef<[u8]>>(\n195     &self,\n196     input: T,\n197     output_buf: &mut [u8],\n198 ) -> Result<usize, EncodeSliceError> {\n199     fn inner<E>(\n200         engine: &E,\n201         input_bytes: &[u8],\n202         output_buf: &mut [u8],\n203     ) -> Result<usize, EncodeSliceError>\n204     where\n205         E: Engine + ?Sized,\n206     {\n207         let encoded_size = encoded_len(input_bytes.len(), engine.config().encode_padding())\n208             .expect(\"usize overflow when calculating buffer size\");\n209 \n210         if output_buf.len() < encoded_size {\n211             return Err(EncodeSliceError::OutputSliceTooSmall);\n212         }\n213 \n214         let b64_output = &mut output_buf[0..encoded_size];\n215 \n216         encode_with_padding(input_bytes, b64_output, engine, encoded_size);\n217 \n218         Ok(encoded_size)\n219     }\n220 \n221     inner(self, input.as_ref(), output_buf)\n222 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}