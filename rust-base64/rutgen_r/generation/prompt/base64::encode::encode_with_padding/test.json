{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/encode.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// B64-encode and pad (if configured).\n///\n/// This helper exists to avoid recalculating `encoded_size`, which is relatively expensive on short\n/// inputs.\n///\n/// `encoded_size` is the encoded size calculated for `input`.\n///\n/// `output` must be of size `encoded_size`.\n///\n/// All bytes in `output` will be written to since it is exactly the size of the output.\n69 pub(crate) fn encode_with_padding<E: Engine + ?Sized>(\n70     input: &[u8],\n71     output: &mut [u8],\n72     engine: &E,\n73     expected_encoded_size: usize,\n74 ) {\n75     debug_assert_eq!(expected_encoded_size, output.len());\n76 \n77     let b64_bytes_written = engine.internal_encode(input, output);\n78 \n79     let padding_bytes = if engine.config().encode_padding() {\n80         add_padding(b64_bytes_written, &mut output[b64_bytes_written..])\n81     } else {\n82         0\n83     };\n84 \n85     let encoded_bytes = b64_bytes_written\n86         .checked_add(padding_bytes)\n87         .expect(\"usize overflow when calculating b64 length\");\n88 \n89     debug_assert_eq!(expected_encoded_size, encoded_bytes);\n90 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}