{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/engine/mod.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the `input` into the supplied `buffer`.\n///\n/// Writes into the supplied `Vec`, which may allocate if its internal buffer isn't big enough.\n/// Returns a `Result` containing an empty tuple, aka `()`.\n///\n/// # Example\n///\n/// ```rust\n/// use base64::{Engine as _, alphabet, engine::{self, general_purpose}};\n/// const CUSTOM_ENGINE: engine::GeneralPurpose =\n///     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::PAD);\n///\n/// fn main() {\n///     use base64::Engine;\n///     let mut buffer = Vec::<u8>::new();\n///     // with the default engine\n///     general_purpose::STANDARD\n///         .decode_vec(\"aGVsbG8gd29ybGR+Cg==\", &mut buffer,).unwrap();\n///     println!(\"{:?}\", buffer);\n///\n///     buffer.clear();\n///\n///     // with a custom engine\n///     CUSTOM_ENGINE.decode_vec(\n///         \"aGVsbG8gaW50ZXJuZXR-Cg==\",\n///         &mut buffer,\n///     ).unwrap();\n///     println!(\"{:?}\", buffer);\n/// }\n/// ```\n302 fn decode_vec<T: AsRef<[u8]>>(\n303     &self,\n304     input: T,\n305     buffer: &mut Vec<u8>,\n306 ) -> Result<(), DecodeError> {\n307     fn inner<E>(engine: &E, input_bytes: &[u8], buffer: &mut Vec<u8>) -> Result<(), DecodeError>\n308     where\n309         E: Engine + ?Sized,\n310     {\n311         let starting_output_len = buffer.len();\n312         let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n313 \n314         let total_len_estimate = estimate\n315             .decoded_len_estimate()\n316             .checked_add(starting_output_len)\n317             .expect(\"Overflow when calculating output buffer length\");\n318 \n319         buffer.resize(total_len_estimate, 0);\n320 \n321         let buffer_slice = &mut buffer.as_mut_slice()[starting_output_len..];\n322 \n323         let bytes_written = engine\n324             .internal_decode(input_bytes, buffer_slice, estimate)\n325             .map_err(|e| match e {\n326                 DecodeSliceError::DecodeError(e) => e,\n327                 DecodeSliceError::OutputSliceTooSmall => {\n328                     unreachable!(\"Vec is sized conservatively\")\n329                 }\n330             })?\n331             .decoded_len;\n332 \n333         buffer.truncate(starting_output_len + bytes_written);\n334 \n335         Ok(())\n336     }\n337 \n338     inner(self, input.as_ref(), buffer)\n339 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}