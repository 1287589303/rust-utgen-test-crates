{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/engine/general_purpose/mod.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new config based on `self` with an updated `decode_allow_trailing_bits` setting.\n///\n/// Most users will not need to configure this. It's useful if you need to decode base64\n/// produced by a buggy encoder that has bits set in the unused space on the last base64\n/// character as per [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).\n/// If invalid trailing bits are present and this is `true`, those bits will\n/// be silently ignored, else `DecodeError::InvalidLastSymbol` will be emitted.\n296 pub const fn with_decode_allow_trailing_bits(self, allow: bool) -> Self {\n297     Self {\n298         decode_allow_trailing_bits: allow,\n299         ..self\n300     }\n301 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}