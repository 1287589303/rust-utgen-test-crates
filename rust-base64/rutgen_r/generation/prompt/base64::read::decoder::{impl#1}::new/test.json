{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/read/decoder.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new decoder that will read from the provided reader `r`.\n78 pub fn new(reader: R, engine: &'e E) -> Self {\n79     DecoderReader {\n80         engine,\n81         inner: reader,\n82         b64_buffer: [0; BUF_SIZE],\n83         b64_offset: 0,\n84         b64_len: 0,\n85         decoded_chunk_buffer: [0; DECODED_CHUNK_SIZE],\n86         decoded_offset: 0,\n87         decoded_len: 0,\n88         input_consumed_len: 0,\n89         padding_offset: None,\n90     }\n91 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}