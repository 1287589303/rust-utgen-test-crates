{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/write/encoder.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Unwraps this `EncoderWriter`, returning the base writer it writes base64 encoded output\n/// to.\n///\n/// Normally this method should not be needed, since `finish()` returns the inner writer if\n/// it completes successfully. That will also ensure all data has been flushed, which the\n/// `into_inner()` function does *not* do.\n///\n/// Calling this method after `finish()` has completed successfully will panic, since the\n/// writer has already been returned.\n///\n/// This method may be useful if the writer implements additional APIs beyond the `Write`\n/// trait. Note that the inner writer might be in an error state or have an incomplete\n/// base64 string written to it.\n242 pub fn into_inner(mut self) -> W {\n243     self.delegate\n244         .take()\n245         .expect(\"Encoder has already had finish() called\")\n246 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}