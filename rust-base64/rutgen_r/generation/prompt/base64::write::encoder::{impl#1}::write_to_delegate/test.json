{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context if exist.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions.\n7. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "// src/write/encoder.rs\n// crate name is base64\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Write as much of the encoded output to the delegate writer as it will accept, and store the\n/// leftovers to be attempted at the next `write()` call. Updates `self.output_occupied_len`.\n///\n/// # Errors\n///\n/// Errors from the delegate writer are returned. In the case of an error,\n/// `self.output_occupied_len` will not be updated, as errors from `write` are specified to mean\n/// that no write took place.\n179 fn write_to_delegate(&mut self, current_output_len: usize) -> Result<()> {\n180     self.panicked = true;\n181     let res = self\n182         .delegate\n183         .as_mut()\n184         .expect(\"Writer must be present\")\n185         .write(&self.output[..current_output_len]);\n186     self.panicked = false;\n187 \n188     res.map(|consumed| {\n189         debug_assert!(consumed <= current_output_len);\n190 \n191         if consumed < current_output_len {\n192             self.output_occupied_len = current_output_len.checked_sub(consumed).unwrap();\n193             // If we're blocking on I/O, the minor inefficiency of copying bytes to the\n194             // start of the buffer is the least of our concerns...\n195             // TODO Rotate moves more than we need to; copy_within now stable.\n196             self.output.rotate_left(consumed);\n197         } else {\n198             self.output_occupied_len = 0;\n199         }\n200     })\n201 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}