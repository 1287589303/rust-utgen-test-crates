[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"QUJD==\"; // Valid base64 input with 2 padding bytes",
          "    let input_index: usize = 0;",
          "    let mut output = [0_u8; 3]; // Enough capacity to hold decoded result",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0; // A = 0",
          "        table[b'Q' as usize] = 16; // Q = 16",
          "        table[b'J' as usize] = 36; // J = 36",
          "        table[b'C' as usize] = 2; // C = 2",
          "        table[b'=' as usize] = PAD_BYTE; // Padding character",
          "        table",
          "    };",
          "    let decode_allow_trailing_bits: bool = true;",
          "    let padding_mode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_decoded_metadata.decoded_len, 3);",
          "    assert_eq!(_decoded_metadata.padding_offset, Some(5));",
          "    assert_eq!(output[0], b'A');",
          "    assert_eq!(output[1], b'B');",
          "    assert_eq!(output[2], b'C');",
          "    assert!(matches!(_decoded_metadata, Ok(DecodeMetadata { decoded_len: _, padding_offset: Some(_) })));",
          "    assert!(output.len() >= 3);",
          "    assert!(input.len() - input_index == 4);",
          "    assert!(padding_bytes_count == 2);",
          "    assert!(leftover_index < 2);",
          "    assert!(leftover_index == 0);",
          "    assert!(padding_bytes_count == 0);"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"QUJD==\"; // Valid base64 input with 2 padding bytes",
          "    let input_index: usize = 0;",
          "    let mut output = [0_u8; 3]; // Enough capacity to hold decoded result",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0; // A = 0",
          "        table[b'Q' as usize] = 16; // Q = 16",
          "        table[b'J' as usize] = 36; // J = 36",
          "        table[b'C' as usize] = 2; // C = 2",
          "        table[b'=' as usize] = PAD_BYTE; // Padding character",
          "        table",
          "    };",
          "    let decode_allow_trailing_bits: bool = true;",
          "    let padding_mode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "    assert_eq!(_decoded_metadata.decoded_len, 3);",
          "    assert_eq!(_decoded_metadata.padding_offset, Some(5));",
          "    assert_eq!(output[0], b'A');",
          "    assert_eq!(output[1], b'B');",
          "    assert_eq!(output[2], b'C');",
          "    assert!(matches!(_decoded_metadata, Ok(DecodeMetadata { decoded_len: _, padding_offset: Some(_) })));",
          "    assert!(output.len() >= 3);",
          "    assert!(input.len() - input_index == 4);",
          "    assert!(padding_bytes_count == 2);",
          "    assert!(leftover_index < 2);",
          "    assert!(leftover_index == 0);",
          "    assert!(padding_bytes_count == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: &[u8] = b\"QUJD\"; // Valid base64 input with no padding",
          "    let input_index: usize = 0;",
          "    let mut output = [0_u8; 3]; // Enough capacity to hold decoded result",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0; // A = 0",
          "        table[b'Q' as usize] = 16; // Q = 16",
          "        table[b'J' as usize] = 36; // J = 36",
          "        table[b'C' as usize] = 2; // C = 2",
          "        table",
          "    };",
          "    let decode_allow_trailing_bits: bool = true;",
          "    let padding_mode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "}"
        ],
        "oracle": [
          "    let input_len_equals_4 = (input.len() - input_index) == 4;",
          "    let leftover_index_0 = leftover_index == 0;",
          "    let padding_bytes_count_is_0 = padding_bytes_count == 0;",
          "    let invalid_byte_error = match decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode) {",
          "    Err(DecodeSliceError::DecodeError(DecodeError::InvalidByte(idx, byte))) if idx == (input_index + leftover_index) && byte == PAD_BYTE => true,",
          "    _ => false,",
          "    };",
          "    let require_canonical_padding_error = match decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, DecodePaddingMode::RequireCanonical) {",
          "    Err(DecodeSliceError::DecodeError(DecodeError::InvalidPadding)) => true,",
          "    _ => false,",
          "    };",
          "    let require_none_padding_error = match decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, DecodePaddingMode::RequireNone) {",
          "    Err(DecodeSliceError::DecodeError(DecodeError::InvalidPadding)) => true,",
          "    _ => false,",
          "    };",
          "    let output_len = output.len();"
        ],
        "code": [
          "{",
          "    let input: &[u8] = b\"QUJD\"; // Valid base64 input with no padding",
          "    let input_index: usize = 0;",
          "    let mut output = [0_u8; 3]; // Enough capacity to hold decoded result",
          "    let output_index: usize = 0;",
          "    let decode_table: [u8; 256] = {",
          "        let mut table = [INVALID_VALUE; 256];",
          "        table[b'A' as usize] = 0; // A = 0",
          "        table[b'Q' as usize] = 16; // Q = 16",
          "        table[b'J' as usize] = 36; // J = 36",
          "        table[b'C' as usize] = 2; // C = 2",
          "        table",
          "    };",
          "    let decode_allow_trailing_bits: bool = true;",
          "    let padding_mode = DecodePaddingMode::RequireCanonical;",
          "",
          "    let _ = decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode);",
          "    let input_len_equals_4 = (input.len() - input_index) == 4;",
          "    let leftover_index_0 = leftover_index == 0;",
          "    let padding_bytes_count_is_0 = padding_bytes_count == 0;",
          "    let invalid_byte_error = match decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, padding_mode) {",
          "    Err(DecodeSliceError::DecodeError(DecodeError::InvalidByte(idx, byte))) if idx == (input_index + leftover_index) && byte == PAD_BYTE => true,",
          "    _ => false,",
          "    };",
          "    let require_canonical_padding_error = match decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, DecodePaddingMode::RequireCanonical) {",
          "    Err(DecodeSliceError::DecodeError(DecodeError::InvalidPadding)) => true,",
          "    _ => false,",
          "    };",
          "    let require_none_padding_error = match decode_suffix(input, input_index, &mut output, output_index, &decode_table, decode_allow_trailing_bits, DecodePaddingMode::RequireNone) {",
          "    Err(DecodeSliceError::DecodeError(DecodeError::InvalidPadding)) => true,",
          "    _ => false,",
          "    };",
          "    let output_len = output.len();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]