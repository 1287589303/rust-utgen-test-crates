[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidByte(0, b'A');",
          "    let result = DecodeSliceError::from(error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, DecodeSliceError::DecodeError(DecodeError::InvalidByte(0, b'A')));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidByte(0, b'A');",
          "    let result = DecodeSliceError::from(error);",
          "    assert_eq!(result, DecodeSliceError::DecodeError(DecodeError::InvalidByte(0, b'A')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidLength(1);",
          "    let result = DecodeSliceError::from(error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, DecodeSliceError::DecodeError(DecodeError::InvalidLength(1)));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidLength(1);",
          "    let result = DecodeSliceError::from(error);",
          "    assert_eq!(result, DecodeSliceError::DecodeError(DecodeError::InvalidLength(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(2, b'B');",
          "    let result = DecodeSliceError::from(error);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, DecodeSliceError::DecodeError(DecodeError::InvalidLastSymbol(2, b'B')));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(2, b'B');",
          "    let result = DecodeSliceError::from(error);",
          "    assert_eq!(result, DecodeSliceError::DecodeError(DecodeError::InvalidLastSymbol(2, b'B')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidPadding;",
          "    let result = DecodeSliceError::from(error);",
          "}"
        ],
        "oracle": [
          "    let error = DecodeError::InvalidPadding;",
          "    let expected = DecodeSliceError::DecodeError(error);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidPadding;",
          "    let result = DecodeSliceError::from(error);",
          "    let error = DecodeError::InvalidPadding;",
          "    let expected = DecodeSliceError::DecodeError(error);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]