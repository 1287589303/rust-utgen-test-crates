[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\")));"
        ],
        "code": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\")));"
        ],
        "code": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    let alphabet = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().symbols, [46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]);"
        ],
        "code": [
          "{",
          "    let alphabet = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
          "    let result = Alphabet::new(alphabet);",
          "    let alphabet = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().symbols, [46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")));"
        ],
        "code": [
          "{",
          "    let alphabet = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+,\";",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+,\")));"
        ],
        "code": [
          "{",
          "    let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+,\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+,\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alphabet = \"!\\\"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr\";",
          "    let result = Alphabet::new(alphabet);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"!\\\"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr\")));",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().symbols.len(), ALPHABET_SIZE);",
          "    assert!(result.unwrap().symbols.iter().all(|&b| (b >= 32 && b <= 126) || b == PAD_BYTE));",
          "    assert!(result.unwrap().symbols.iter().enumerate().all(|(i, &byte)| result.unwrap().symbols.iter().position(|&b| b == byte) == Some(i)));"
        ],
        "code": [
          "{",
          "    let alphabet = \"!\\\"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr\";",
          "    let result = Alphabet::new(alphabet);",
          "    assert_eq!(result, Ok(Alphabet::from_str_unchecked(\"!\\\"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr\")));",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().symbols.len(), ALPHABET_SIZE);",
          "    assert!(result.unwrap().symbols.iter().all(|&b| (b >= 32 && b <= 126) || b == PAD_BYTE));",
          "    assert!(result.unwrap().symbols.iter().enumerate().all(|(i, &byte)| result.unwrap().symbols.iter().position(|&b| b == byte) == Some(i)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]