[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidByte(5, b'@');",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let _result = decode_error.source();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(&error));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidByte(5, b'@');",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let _result = decode_error.source();",
          "    assert_eq!(_result, Some(&error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidLength(3);",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let _result = decode_error.source();",
          "}"
        ],
        "oracle": [
          "    let error = DecodeError::InvalidLength(3);",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let result = decode_error.source();",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&error));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidLength(3);",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let _result = decode_error.source();",
          "    let error = DecodeError::InvalidLength(3);",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let result = decode_error.source();",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(8, b'!');",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let _result = decode_error.source();",
          "}"
        ],
        "oracle": [
          "    let error = DecodeError::InvalidLastSymbol(8, b'!');",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let result = decode_error.source();",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&error));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidLastSymbol(8, b'!');",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let _result = decode_error.source();",
          "    let error = DecodeError::InvalidLastSymbol(8, b'!');",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let result = decode_error.source();",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&error));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let error = DecodeError::InvalidPadding;",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let _result = decode_error.source();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(&DecodeError::InvalidPadding));"
        ],
        "code": [
          "{",
          "    let error = DecodeError::InvalidPadding;",
          "    let decode_error = DecodeSliceError::DecodeError(error);",
          "    let _result = decode_error.source();",
          "    assert_eq!(_result, Some(&DecodeError::InvalidPadding));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]