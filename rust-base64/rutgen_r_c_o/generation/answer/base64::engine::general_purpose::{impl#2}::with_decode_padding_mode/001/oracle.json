[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(true)",
          "        .with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.encode_padding, true);",
          "    assert_eq!(new_config.decode_allow_trailing_bits, false);",
          "    ",
          "    let another_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(another_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(another_config.encode_padding, true);",
          "    assert_eq!(another_config.decode_allow_trailing_bits, false);",
          "    ",
          "    let no_pad_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(no_pad_config.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "    assert_eq!(no_pad_config.encode_padding, true);",
          "    assert_eq!(no_pad_config.decode_allow_trailing_bits, false);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(true)",
          "        .with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.encode_padding, true);",
          "    assert_eq!(new_config.decode_allow_trailing_bits, false);",
          "    ",
          "    let another_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(another_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(another_config.encode_padding, true);",
          "    assert_eq!(another_config.decode_allow_trailing_bits, false);",
          "    ",
          "    let no_pad_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(no_pad_config.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "    assert_eq!(no_pad_config.encode_padding, true);",
          "    assert_eq!(no_pad_config.decode_allow_trailing_bits, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(false)",
          "        .with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    ",
          "    let new_config_indifferent = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config_indifferent.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    ",
          "    let new_config_no_padding = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config_no_padding.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "    ",
          "    let default_config = GeneralPurposeConfig::new();",
          "    assert_eq!(default_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(false)",
          "        .with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    ",
          "    let new_config_indifferent = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config_indifferent.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    ",
          "    let new_config_no_padding = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config_no_padding.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "    ",
          "    let default_config = GeneralPurposeConfig::new();",
          "    assert_eq!(default_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(false)",
          "        .with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "}"
        ],
        "oracle": [
          "    let config = GeneralPurposeConfig::new()",
          "    .with_encode_padding(false)",
          "    .with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert!(new_config.encode_padding);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert!(!new_config.encode_padding);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(false)",
          "        .with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    let config = GeneralPurposeConfig::new()",
          "    .with_encode_padding(false)",
          "    .with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert!(new_config.encode_padding);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert!(!new_config.encode_padding);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(true)",
          "        .with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "}"
        ],
        "oracle": [
          "    let config = GeneralPurposeConfig::new().with_encode_padding(true).with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireNone);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(true)",
          "        .with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    let config = GeneralPurposeConfig::new().with_encode_padding(true).with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(true)",
          "        .with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "}"
        ],
        "oracle": [
          "    let config = GeneralPurposeConfig::new().with_encode_padding(true).with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireNone);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(true)",
          "        .with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    let config = GeneralPurposeConfig::new().with_encode_padding(true).with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    ",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(true)",
          "        .with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "    assert!(new_config.encode_padding);",
          "    assert!(!new_config.decode_allow_trailing_bits);",
          "    assert_ne!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    assert_ne!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(true)",
          "        .with_decode_allow_trailing_bits(false);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "    assert!(new_config.encode_padding);",
          "    assert!(!new_config.decode_allow_trailing_bits);",
          "    assert_ne!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    assert_ne!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(false)",
          "        .with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.encode_padding, false);",
          "    assert_eq!(new_config.decode_allow_trailing_bits, true);",
          "    ",
          "    let new_config_require_canonical = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config_require_canonical.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    ",
          "    let new_config_require_none = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config_require_none.decode_padding_mode, DecodePaddingMode::RequireNone);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(false)",
          "        .with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config.encode_padding, false);",
          "    assert_eq!(new_config.decode_allow_trailing_bits, true);",
          "    ",
          "    let new_config_require_canonical = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config_require_canonical.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    ",
          "    let new_config_require_none = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config_require_none.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(false)",
          "        .with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "}"
        ],
        "oracle": [
          "    let config = GeneralPurposeConfig::new().with_encode_padding(false).with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    ",
          "    let new_config_indifferent = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config_indifferent.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    ",
          "    let new_config_no_padding = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config_no_padding.decode_padding_mode, DecodePaddingMode::RequireNone);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(false)",
          "        .with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    let config = GeneralPurposeConfig::new().with_encode_padding(false).with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireCanonical);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireCanonical);",
          "    ",
          "    let new_config_indifferent = config.with_decode_padding_mode(DecodePaddingMode::Indifferent);",
          "    assert_eq!(new_config_indifferent.decode_padding_mode, DecodePaddingMode::Indifferent);",
          "    ",
          "    let new_config_no_padding = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config_no_padding.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(false)",
          "        .with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config.encode_padding, false);",
          "    assert_eq!(new_config.decode_allow_trailing_bits, true);"
        ],
        "code": [
          "{",
          "    let config = GeneralPurposeConfig::new()",
          "        .with_encode_padding(false)",
          "        .with_decode_allow_trailing_bits(true);",
          "    let new_config = config.with_decode_padding_mode(DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config.decode_padding_mode, DecodePaddingMode::RequireNone);",
          "    assert_eq!(new_config.encode_padding, false);",
          "    assert_eq!(new_config.decode_allow_trailing_bits, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]