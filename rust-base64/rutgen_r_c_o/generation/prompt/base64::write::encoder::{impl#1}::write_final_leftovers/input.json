{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/write/encoder.rs\n// crate name is base64\nuse crate::engine::Engine;\nuse std::{cmp, fmt, io, io::{ErrorKind, Result}};\npub(crate) const BUF_SIZE: usize = 1024;\nconst MAX_INPUT_LEN: usize = BUF_SIZE / 4 * 3;\nconst MIN_ENCODE_CHUNK_SIZE: usize = 3;\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\npub struct EncoderWriter<'e, E: Engine, W: io::Write> {\n    engine: &'e E,\n    /// Where encoded data is written to. It's an Option as it's None immediately before Drop is\n    /// called so that `finish()` can return the underlying writer. None implies that `finish()` has\n    /// been called successfully.\n    delegate: Option<W>,\n    /// Holds a partial chunk, if any, after the last `write()`, so that we may then fill the chunk\n    /// with the next `write()`, encode it, then proceed with the rest of the input normally.\n    extra_input: [u8; MIN_ENCODE_CHUNK_SIZE],\n    /// How much of `extra` is occupied, in `[0, MIN_ENCODE_CHUNK_SIZE]`.\n    extra_input_occupied_len: usize,\n    /// Buffer to encode into. May hold leftover encoded bytes from a previous write call that the underlying writer\n    /// did not write last time.\n    output: [u8; BUF_SIZE],\n    /// How much of `output` is occupied with encoded data that couldn't be written last time\n    output_occupied_len: usize,\n    /// panic safety: don't write again in destructor if writer panicked while we were writing to it\n    panicked: bool,\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum EncodeSliceError {\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\nimpl<'e, E: Engine, W: io::Write> EncoderWriter<'e, E, W> {\n    pub fn new(delegate: W, engine: &'e E) -> EncoderWriter<'e, E, W> {}\n    pub fn finish(&mut self) -> Result<W> {}\n    fn write_final_leftovers(&mut self) -> Result<()> {\n        if self.delegate.is_none() {\n            return Ok(());\n        }\n        self.write_all_encoded_output()?;\n        if self.extra_input_occupied_len > 0 {\n            let encoded_len = self\n                .engine\n                .encode_slice(\n                    &self.extra_input[..self.extra_input_occupied_len],\n                    &mut self.output[..],\n                )\n                .expect(\"buffer is large enough\");\n            self.output_occupied_len = encoded_len;\n            self.write_all_encoded_output()?;\n            self.extra_input_occupied_len = 0;\n        }\n        Ok(())\n    }\n    fn write_to_delegate(&mut self, current_output_len: usize) -> Result<()> {}\n    fn write_all_encoded_output(&mut self) -> Result<()> {\n        while self.output_occupied_len > 0 {\n            let remaining_len = self.output_occupied_len;\n            match self.write_to_delegate(remaining_len) {\n                Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                Err(e) => return Err(e),\n                Ok(()) => {}\n            };\n        }\n        debug_assert_eq!(0, self.output_occupied_len);\n        Ok(())\n    }\n    pub fn into_inner(mut self) -> W {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Write any remaining buffered data to the delegate writer.\n142 fn write_final_leftovers(&mut self) -> Result<()> {\n143     if self.delegate.is_none() {\n144         // finish() has already successfully called this, and we are now in drop() with a None\n145         // writer, so just no-op\n146         return Ok(());\n147     }\n148 \n149     self.write_all_encoded_output()?;\n150 \n151     if self.extra_input_occupied_len > 0 {\n152         let encoded_len = self\n153             .engine\n154             .encode_slice(\n155                 &self.extra_input[..self.extra_input_occupied_len],\n156                 &mut self.output[..],\n157             )\n158             .expect(\"buffer is large enough\");\n159 \n160         self.output_occupied_len = encoded_len;\n161 \n162         self.write_all_encoded_output()?;\n163 \n164         // write succeeded, do not write the encoding of extra again if finish() is retried\n165         self.extra_input_occupied_len = 0;\n166     }\n167 \n168     Ok(())\n169 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}