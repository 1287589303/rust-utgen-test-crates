{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/general_purpose/mod.rs\n// crate name is base64\nuse crate::{\n    alphabet, alphabet::Alphabet, engine::{Config, DecodeMetadata, DecodePaddingMode},\n    DecodeSliceError,\n};\nuse core::convert::TryInto;\npub use decode::GeneralPurposeEstimate;\npub(crate) const INVALID_VALUE: u8 = 255;\npub const STANDARD: GeneralPurpose = GeneralPurpose::new(&alphabet::STANDARD, PAD);\npub const STANDARD_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::STANDARD,\n    PAD_INDIFFERENT,\n);\npub const STANDARD_NO_PAD: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::STANDARD,\n    NO_PAD,\n);\npub const STANDARD_NO_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::STANDARD,\n    NO_PAD_INDIFFERENT,\n);\npub const URL_SAFE: GeneralPurpose = GeneralPurpose::new(&alphabet::URL_SAFE, PAD);\npub const URL_SAFE_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::URL_SAFE,\n    PAD_INDIFFERENT,\n);\npub const URL_SAFE_NO_PAD: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::URL_SAFE,\n    NO_PAD,\n);\npub const URL_SAFE_NO_PAD_INDIFFERENT: GeneralPurpose = GeneralPurpose::new(\n    &alphabet::URL_SAFE,\n    NO_PAD_INDIFFERENT,\n);\npub const PAD: GeneralPurposeConfig = GeneralPurposeConfig::new();\npub const PAD_INDIFFERENT: GeneralPurposeConfig = GeneralPurposeConfig::new()\n    .with_encode_padding(true)\n    .with_decode_padding_mode(DecodePaddingMode::Indifferent);\npub const NO_PAD: GeneralPurposeConfig = GeneralPurposeConfig::new()\n    .with_encode_padding(false)\n    .with_decode_padding_mode(DecodePaddingMode::RequireNone);\npub const NO_PAD_INDIFFERENT: GeneralPurposeConfig = GeneralPurposeConfig::new()\n    .with_encode_padding(false)\n    .with_decode_padding_mode(DecodePaddingMode::Indifferent);\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct Alphabet {\n    pub(crate) symbols: [u8; ALPHABET_SIZE],\n}\npub(crate) const fn decode_table(alphabet: &Alphabet) -> [u8; 256] {\n    let mut decode_table = [INVALID_VALUE; 256];\n    let mut index = 0;\n    while index < 64 {\n        decode_table[alphabet.symbols[index] as usize] = index as u8;\n        index += 1;\n    }\n    decode_table\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a table mapping base64 bytes as the lookup index to either:\n/// - [`INVALID_VALUE`] for bytes that aren't members of the alphabet\n/// - a byte whose lower 6 bits are the value that was encoded into the index byte\n214 pub(crate) const fn decode_table(alphabet: &Alphabet) -> [u8; 256] {\n215     let mut decode_table = [INVALID_VALUE; 256];\n216 \n217     // Since the table is full of `INVALID_VALUE` already, we only need to overwrite\n218     // the parts that are valid.\n219     let mut index = 0;\n220     while index < 64 {\n221         // The index in the alphabet is the 6-bit value we care about.\n222         // Since the index is in 0-63, it is safe to cast to u8.\n223         decode_table[alphabet.symbols[index] as usize] = index as u8;\n224         index += 1;\n225     }\n226 \n227     decode_table\n228 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}