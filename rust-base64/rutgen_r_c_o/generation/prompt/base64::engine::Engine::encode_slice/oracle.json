{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/mod.rs\n// crate name is base64\n#[cfg(any(feature = \"alloc\", test))]\nuse crate::chunked_encoder;\nuse crate::{\n    encode::{encode_with_padding, EncodeSliceError},\n    encoded_len, DecodeError, DecodeSliceError,\n};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::{string::String, vec};\npub use general_purpose::{GeneralPurpose, GeneralPurposeConfig};\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError> {\n        fn inner<E>(\n            engine: &E,\n            input_bytes: &[u8],\n            output_buf: &mut [u8],\n        ) -> Result<usize, EncodeSliceError>\n        where\n            E: Engine + ?Sized,\n        {\n            let encoded_size = encoded_len(\n                    input_bytes.len(),\n                    engine.config().encode_padding(),\n                )\n                .expect(\"usize overflow when calculating buffer size\");\n            if output_buf.len() < encoded_size {\n                return Err(EncodeSliceError::OutputSliceTooSmall);\n            }\n            let b64_output = &mut output_buf[0..encoded_size];\n            encode_with_padding(input_bytes, b64_output, engine, encoded_size);\n            Ok(encoded_size)\n        }\n        inner(self, input.as_ref(), output_buf)\n    }\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum EncodeSliceError {\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\nfn inner<E>(\n    engine: &E,\n    input_bytes: &[u8],\n    output_buf: &mut [u8],\n) -> Result<usize, EncodeSliceError>\nwhere\n    E: Engine + ?Sized,\n{\n    let encoded_size = encoded_len(input_bytes.len(), engine.config().encode_padding())\n        .expect(\"usize overflow when calculating buffer size\");\n    if output_buf.len() < encoded_size {\n        return Err(EncodeSliceError::OutputSliceTooSmall);\n    }\n    let b64_output = &mut output_buf[0..encoded_size];\n    encode_with_padding(input_bytes, b64_output, engine, encoded_size);\n    Ok(encoded_size)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Encode arbitrary octets as base64 into a supplied slice.\n/// Writes into the supplied output buffer.\n///\n/// This is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident\n/// or statically-allocated buffer).\n///\n/// # Example\n///\n/// use base64::{Engine as _, engine::general_purpose};\n/// let s = b\"hello internet!\";\n/// let mut buf = Vec::new();\n/// // make sure we'll have a slice big enough for base64 + padding\n/// buf.resize(s.len() * 4 / 3 + 4, 0);\n///\n/// let bytes_written = general_purpose::STANDARD.encode_slice(s, &mut buf).unwrap();\n///\n/// // shorten our vec down to just what was written\n/// buf.truncate(bytes_written);\n///\n/// assert_eq!(s, general_purpose::STANDARD.decode(&buf).unwrap().as_slice());\n/// ```\n194 fn encode_slice<T: AsRef<[u8]>>(\n195     &self,\n196     input: T,\n197     output_buf: &mut [u8],\n198 ) -> Result<usize, EncodeSliceError> {\n199     fn inner<E>(\n200         engine: &E,\n201         input_bytes: &[u8],\n202         output_buf: &mut [u8],\n203     ) -> Result<usize, EncodeSliceError>\n204     where\n205         E: Engine + ?Sized,\n206     {\n207         let encoded_size = encoded_len(input_bytes.len(), engine.config().encode_padding())\n208             .expect(\"usize overflow when calculating buffer size\");\n209 \n210         if output_buf.len() < encoded_size {\n211             return Err(EncodeSliceError::OutputSliceTooSmall);\n212         }\n213 \n214         let b64_output = &mut output_buf[0..encoded_size];\n215 \n216         encode_with_padding(input_bytes, b64_output, engine, encoded_size);\n217 \n218         Ok(encoded_size)\n219     }\n220 \n221     inner(self, input.as_ref(), output_buf)\n222 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}