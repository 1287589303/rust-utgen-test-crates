{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/encode.rs\n// crate name is base64\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::string::String;\nuse core::fmt;\n#[cfg(any(feature = \"std\", test))]\nuse std::error;\n#[cfg(any(feature = \"alloc\", test))]\nuse crate::engine::general_purpose::STANDARD;\nuse crate::engine::{Config, Engine};\nuse crate::PAD_BYTE;\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum EncodeSliceError {\n    /// The provided slice is too small.\n    OutputSliceTooSmall,\n}\nimpl fmt::Display for EncodeSliceError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        match self {\n            Self::OutputSliceTooSmall => write!(f, \"Output slice too small\"),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n153 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n154     match self {\n155         Self::OutputSliceTooSmall => write!(f, \"Output slice too small\"),\n156     }\n157 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}