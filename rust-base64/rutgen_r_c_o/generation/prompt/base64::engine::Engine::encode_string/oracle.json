{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/mod.rs\n// crate name is base64\n#[cfg(any(feature = \"alloc\", test))]\nuse crate::chunked_encoder;\nuse crate::{\n    encode::{encode_with_padding, EncodeSliceError},\n    encoded_len, DecodeError, DecodeSliceError,\n};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::{string::String, vec};\npub use general_purpose::{GeneralPurpose, GeneralPurposeConfig};\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String) {\n        fn inner<E>(engine: &E, input_bytes: &[u8], output_buf: &mut String)\n        where\n            E: Engine + ?Sized,\n        {\n            let mut sink = chunked_encoder::StringSink::new(output_buf);\n            chunked_encoder::ChunkedEncoder::new(engine)\n                .encode(input_bytes, &mut sink)\n                .expect(\"Writing to a String shouldn't fail\");\n        }\n        inner(self, input.as_ref(), output_buf);\n    }\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\nfn inner<E>(engine: &E, input_bytes: &[u8], output_buf: &mut String)\nwhere\n    E: Engine + ?Sized,\n{\n    let mut sink = chunked_encoder::StringSink::new(output_buf);\n    chunked_encoder::ChunkedEncoder::new(engine)\n        .encode(input_bytes, &mut sink)\n        .expect(\"Writing to a String shouldn't fail\");\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Encode arbitrary octets as base64 into a supplied `String`.\n/// Writes into the supplied `String`, which may allocate if its internal buffer isn't big enough.\n///\n/// # Example\n///\n/// ```rust\n/// use base64::{Engine as _, engine::{self, general_purpose}, alphabet};\n/// const CUSTOM_ENGINE: engine::GeneralPurpose =\n///     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);\n///\n/// fn main() {\n///     let mut buf = String::new();\n///     general_purpose::STANDARD.encode_string(b\"hello world~\", &mut buf);\n///     println!(\"{}\", buf);\n///\n///     buf.clear();\n///     CUSTOM_ENGINE.encode_string(b\"hello internet~\", &mut buf);\n///     println!(\"{}\", buf);\n/// }\n/// ```\n155 fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String) {\n156     fn inner<E>(engine: &E, input_bytes: &[u8], output_buf: &mut String)\n157     where\n158         E: Engine + ?Sized,\n159     {\n160         let mut sink = chunked_encoder::StringSink::new(output_buf);\n161 \n162         chunked_encoder::ChunkedEncoder::new(engine)\n163             .encode(input_bytes, &mut sink)\n164             .expect(\"Writing to a String shouldn't fail\");\n165     }\n166 \n167     inner(self, input.as_ref(), output_buf);\n168 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}