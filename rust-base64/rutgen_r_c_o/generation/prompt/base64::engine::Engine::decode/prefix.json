{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/engine/mod.rs\n// crate name is base64\n#[cfg(any(feature = \"alloc\", test))]\nuse crate::chunked_encoder;\nuse crate::{\n    encode::{encode_with_padding, EncodeSliceError},\n    encoded_len, DecodeError, DecodeSliceError,\n};\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::vec::Vec;\n#[cfg(any(feature = \"alloc\", test))]\nuse alloc::{string::String, vec};\npub use general_purpose::{GeneralPurpose, GeneralPurposeConfig};\npub trait Engine: Send + Sync {\n    type Config: Config;\n    type DecodeEstimate: DecodeEstimate;\n    fn internal_encode(&self, input: &[u8], output: &mut [u8]) -> usize;\n    fn internal_decoded_len_estimate(&self, input_len: usize) -> Self::DecodeEstimate;\n    fn internal_decode(\n        &self,\n        input: &[u8],\n        output: &mut [u8],\n        decode_estimate: Self::DecodeEstimate,\n    ) -> Result<DecodeMetadata, DecodeSliceError>;\n    fn config(&self) -> &Self::Config;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode<T: AsRef<[u8]>>(&self, input: T) -> String;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn encode_string<T: AsRef<[u8]>>(&self, input: T, output_buf: &mut String);\n    #[cfg_attr(feature = \"alloc\", doc = \"```\")]\n    #[cfg_attr(not(feature = \"alloc\"), doc = \"```ignore\")]\n    #[inline]\n    fn encode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output_buf: &mut [u8],\n    ) -> Result<usize, EncodeSliceError>;\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n        fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n        where\n            E: Engine + ?Sized,\n        {\n            let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n            let mut buffer = vec![0; estimate.decoded_len_estimate()];\n            let bytes_written = engine\n                .internal_decode(input_bytes, &mut buffer, estimate)\n                .map_err(|e| match e {\n                    DecodeSliceError::DecodeError(e) => e,\n                    DecodeSliceError::OutputSliceTooSmall => {\n                        unreachable!(\"Vec is sized conservatively\")\n                    }\n                })?\n                .decoded_len;\n            buffer.truncate(bytes_written);\n            Ok(buffer)\n        }\n        inner(self, input.as_ref())\n    }\n    #[cfg(any(feature = \"alloc\", test))]\n    #[inline]\n    fn decode_vec<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        buffer: &mut Vec<u8>,\n    ) -> Result<(), DecodeError>;\n    #[inline]\n    fn decode_slice<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeSliceError>;\n    #[inline]\n    fn decode_slice_unchecked<T: AsRef<[u8]>>(\n        &self,\n        input: T,\n        output: &mut [u8],\n    ) -> Result<usize, DecodeError>;\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub enum DecodeError {\n    /// An invalid byte was found in the input. The offset and offending byte are provided.\n    ///\n    /// Padding characters (`=`) interspersed in the encoded form are invalid, as they may only\n    /// be present as the last 0-2 bytes of input.\n    ///\n    /// This error may also indicate that extraneous trailing input bytes are present, causing\n    /// otherwise valid padding to no longer be the last bytes of input.\n    InvalidByte(usize, u8),\n    /// The length of the input, as measured in valid base64 symbols, is invalid.\n    /// There must be 2-4 symbols in the last input quad.\n    InvalidLength(usize),\n    /// The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n    /// This is indicative of corrupted or truncated Base64.\n    /// Unlike [`DecodeError::InvalidByte`], which reports symbols that aren't in the alphabet,\n    /// this error is for symbols that are in the alphabet but represent nonsensical encodings.\n    InvalidLastSymbol(usize, u8),\n    /// The nature of the padding was not as configured: absent or incorrect when it must be\n    /// canonical, or present when it must be absent, etc.\n    InvalidPadding,\n}\nfn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\nwhere\n    E: Engine + ?Sized,\n{\n    let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n    let mut buffer = vec![0; estimate.decoded_len_estimate()];\n    let bytes_written = engine\n        .internal_decode(input_bytes, &mut buffer, estimate)\n        .map_err(|e| match e {\n            DecodeSliceError::DecodeError(e) => e,\n            DecodeSliceError::OutputSliceTooSmall => {\n                unreachable!(\"Vec is sized conservatively\")\n            }\n        })?\n        .decoded_len;\n    buffer.truncate(bytes_written);\n    Ok(buffer)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the input into a new `Vec`.\n///\n/// # Example\n///\n/// ```rust\n/// use base64::{Engine as _, alphabet, engine::{self, general_purpose}};\n///\n/// let bytes = general_purpose::STANDARD\n///     .decode(\"aGVsbG8gd29ybGR+Cg==\").unwrap();\n/// println!(\"{:?}\", bytes);\n///\n/// // custom engine setup\n/// let bytes_url = engine::GeneralPurpose::new(\n///              &alphabet::URL_SAFE,\n///              general_purpose::NO_PAD)\n///     .decode(\"aGVsbG8gaW50ZXJuZXR-Cg\").unwrap();\n/// println!(\"{:?}\", bytes_url);\n/// ```\n244 fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {\n245     fn inner<E>(engine: &E, input_bytes: &[u8]) -> Result<Vec<u8>, DecodeError>\n246     where\n247         E: Engine + ?Sized,\n248     {\n249         let estimate = engine.internal_decoded_len_estimate(input_bytes.len());\n250         let mut buffer = vec![0; estimate.decoded_len_estimate()];\n251 \n252         let bytes_written = engine\n253             .internal_decode(input_bytes, &mut buffer, estimate)\n254             .map_err(|e| match e {\n255                 DecodeSliceError::DecodeError(e) => e,\n256                 DecodeSliceError::OutputSliceTooSmall => {\n257                     unreachable!(\"Vec is sized conservatively\")\n258                 }\n259             })?\n260             .decoded_len;\n261 \n262         buffer.truncate(bytes_written);\n263 \n264         Ok(buffer)\n265     }\n266 \n267     inner(self, input.as_ref())\n268 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}