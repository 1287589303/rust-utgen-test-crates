{
  "name": "base64::engine::general_purpose::{impl#2}::with_decode_allow_trailing_bits",
  "mod_info": {
    "name": "engine::general_purpose",
    "loc": "src/engine/mod.rs:14:1:14:25"
  },
  "visible": true,
  "loc": "src/engine/general_purpose/mod.rs:296:5:301:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            decode_allow_trailing_bits: allow,\n            ..self\n        }\n"
      ],
      "input_infer": "self: GeneralPurposeConfig, allow: bool (true or false)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let original_config = GeneralPurposeConfig::new();",
                "    let updated_config = original_config.with_decode_allow_trailing_bits(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(updated_config.decode_allow_trailing_bits, true);",
                "    assert_eq!(updated_config.encode_padding, original_config.encode_padding);",
                "    assert_eq!(updated_config.decode_padding_mode, original_config.decode_padding_mode);"
              ],
              "code": [
                "{",
                "    let original_config = GeneralPurposeConfig::new();",
                "    let updated_config = original_config.with_decode_allow_trailing_bits(true);",
                "    assert_eq!(updated_config.decode_allow_trailing_bits, true);",
                "    assert_eq!(updated_config.encode_padding, original_config.encode_padding);",
                "    assert_eq!(updated_config.decode_padding_mode, original_config.decode_padding_mode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let original_config = GeneralPurposeConfig::new();",
                "    let updated_config = original_config.with_decode_allow_trailing_bits(false);",
                "}"
              ],
              "oracle": [
                "    let original_config = GeneralPurposeConfig::new();",
                "    let updated_config = original_config.with_decode_allow_trailing_bits(false);",
                "    assert_eq!(updated_config.decode_allow_trailing_bits, false);",
                "    let new_config = original_config.with_decode_allow_trailing_bits(true);",
                "    assert_eq!(new_config.decode_allow_trailing_bits, true);",
                "    let another_updated_config = original_config.with_decode_allow_trailing_bits(false);",
                "    assert_eq!(another_updated_config.decode_allow_trailing_bits, false);",
                "    assert_eq!(another_updated_config.encode_padding, original_config.encode_padding);",
                "    assert_eq!(another_updated_config.decode_padding_mode, original_config.decode_padding_mode);"
              ],
              "code": [
                "{",
                "    let original_config = GeneralPurposeConfig::new();",
                "    let updated_config = original_config.with_decode_allow_trailing_bits(false);",
                "    let original_config = GeneralPurposeConfig::new();",
                "    let updated_config = original_config.with_decode_allow_trailing_bits(false);",
                "    assert_eq!(updated_config.decode_allow_trailing_bits, false);",
                "    let new_config = original_config.with_decode_allow_trailing_bits(true);",
                "    assert_eq!(new_config.decode_allow_trailing_bits, true);",
                "    let another_updated_config = original_config.with_decode_allow_trailing_bits(false);",
                "    assert_eq!(another_updated_config.decode_allow_trailing_bits, false);",
                "    assert_eq!(another_updated_config.encode_padding, original_config.encode_padding);",
                "    assert_eq!(another_updated_config.decode_padding_mode, original_config.decode_padding_mode);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let original_config = GeneralPurposeConfig::new()",
                "        .with_decode_allow_trailing_bits(true);",
                "    let updated_config = original_config.with_decode_allow_trailing_bits(false);",
                "}"
              ],
              "oracle": [
                "    let original_config = GeneralPurposeConfig::new().with_decode_allow_trailing_bits(true);",
                "    let expected_config = GeneralPurposeConfig::new().with_decode_allow_trailing_bits(false);",
                "    assert_eq!(updated_config.decode_allow_trailing_bits, false);",
                "    assert_eq!(updated_config.encode_padding, original_config.encode_padding);",
                "    assert_eq!(updated_config.decode_padding_mode, original_config.decode_padding_mode);",
                "    assert_ne!(updated_config.decode_allow_trailing_bits, original_config.decode_allow_trailing_bits);"
              ],
              "code": [
                "{",
                "    let original_config = GeneralPurposeConfig::new()",
                "        .with_decode_allow_trailing_bits(true);",
                "    let updated_config = original_config.with_decode_allow_trailing_bits(false);",
                "    let original_config = GeneralPurposeConfig::new().with_decode_allow_trailing_bits(true);",
                "    let expected_config = GeneralPurposeConfig::new().with_decode_allow_trailing_bits(false);",
                "    assert_eq!(updated_config.decode_allow_trailing_bits, false);",
                "    assert_eq!(updated_config.encode_padding, original_config.encode_padding);",
                "    assert_eq!(updated_config.decode_padding_mode, original_config.decode_padding_mode);",
                "    assert_ne!(updated_config.decode_allow_trailing_bits, original_config.decode_allow_trailing_bits);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}