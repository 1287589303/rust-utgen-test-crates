{
  "name": "base64::read::decoder::{impl#1}::new",
  "mod_info": {
    "name": "read::decoder",
    "loc": "src/read/mod.rs:2:1:2:13"
  },
  "visible": true,
  "loc": "src/read/decoder.rs:78:5:91:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: DecoderReader {\n            engine,\n            inner: reader,\n            b64_buffer: [0; BUF_SIZE],\n            b64_offset: 0,\n            b64_len: 0,\n            decoded_chunk_buffer: [0; DECODED_CHUNK_SIZE],\n            decoded_offset: 0,\n            decoded_len: 0,\n            input_consumed_len: 0,\n            padding_offset: None,\n        }\n"
      ],
      "input_infer": "reader: any type that implements io::Read; engine: any type that implements Engine\n",
      "answers": [
        {
          "uses": [
            "use std::io::empty;",
            "use std::io::Cursor;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEngine;",
                "    ",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate { 0 }",
                "        fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<(), DecodeSliceError> { Ok(()) }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "    ",
                "    use std::io::Cursor;",
                "    let data = b\"test data\";",
                "    let reader = Cursor::new(data);",
                "    let engine = TestEngine;",
                "",
                "    let decoder = DecoderReader::new(reader, &engine);",
                "}"
              ],
              "oracle": [
                "    let engine = TestEngine;",
                "    let reader = Cursor::new(b\"test data\");",
                "    let decoder = DecoderReader::new(reader, &engine);",
                "    assert_eq!(decoder.engine, &engine);",
                "    assert_eq!(decoder.inner.get_ref(), &b\"test data\"[..]);",
                "    assert_eq!(decoder.b64_buffer, [0; BUF_SIZE]);",
                "    assert_eq!(decoder.b64_offset, 0);",
                "    assert_eq!(decoder.b64_len, 0);",
                "    assert_eq!(decoder.decoded_chunk_buffer, [0; DECODED_CHUNK_SIZE]);",
                "    assert_eq!(decoder.decoded_offset, 0);",
                "    assert_eq!(decoder.decoded_len, 0);",
                "    assert_eq!(decoder.input_consumed_len, 0);",
                "    assert_eq!(decoder.padding_offset, None);"
              ],
              "code": [
                "{",
                "    struct TestEngine;",
                "    ",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate { 0 }",
                "        fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<(), DecodeSliceError> { Ok(()) }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "    ",
                "    use std::io::Cursor;",
                "    let data = b\"test data\";",
                "    let reader = Cursor::new(data);",
                "    let engine = TestEngine;",
                "",
                "    let decoder = DecoderReader::new(reader, &engine);",
                "    let engine = TestEngine;",
                "    let reader = Cursor::new(b\"test data\");",
                "    let decoder = DecoderReader::new(reader, &engine);",
                "    assert_eq!(decoder.engine, &engine);",
                "    assert_eq!(decoder.inner.get_ref(), &b\"test data\"[..]);",
                "    assert_eq!(decoder.b64_buffer, [0; BUF_SIZE]);",
                "    assert_eq!(decoder.b64_offset, 0);",
                "    assert_eq!(decoder.b64_len, 0);",
                "    assert_eq!(decoder.decoded_chunk_buffer, [0; DECODED_CHUNK_SIZE]);",
                "    assert_eq!(decoder.decoded_offset, 0);",
                "    assert_eq!(decoder.decoded_len, 0);",
                "    assert_eq!(decoder.input_consumed_len, 0);",
                "    assert_eq!(decoder.padding_offset, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEngine;",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate { 0 }",
                "        fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<(), DecodeSliceError> { Ok(()) }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "    ",
                "    use std::io::empty;",
                "    let reader = empty();",
                "    let engine = TestEngine;",
                "",
                "    let decoder = DecoderReader::new(reader, &engine);",
                "}"
              ],
              "oracle": [
                "    let decoder = DecoderReader::new(reader, &engine);",
                "    assert_eq!(decoder.engine, &engine);",
                "    assert_eq!(decoder.inner, reader);",
                "    assert_eq!(decoder.b64_buffer, [0; BUF_SIZE]);",
                "    assert_eq!(decoder.b64_offset, 0);",
                "    assert_eq!(decoder.b64_len, 0);",
                "    assert_eq!(decoder.decoded_chunk_buffer, [0; DECODED_CHUNK_SIZE]);",
                "    assert_eq!(decoder.decoded_offset, 0);",
                "    assert_eq!(decoder.decoded_len, 0);",
                "    assert_eq!(decoder.input_consumed_len, 0);",
                "    assert!(decoder.padding_offset.is_none());"
              ],
              "code": [
                "{",
                "    struct TestEngine;",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate { 0 }",
                "        fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<(), DecodeSliceError> { Ok(()) }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "    ",
                "    use std::io::empty;",
                "    let reader = empty();",
                "    let engine = TestEngine;",
                "",
                "    let decoder = DecoderReader::new(reader, &engine);",
                "    let decoder = DecoderReader::new(reader, &engine);",
                "    assert_eq!(decoder.engine, &engine);",
                "    assert_eq!(decoder.inner, reader);",
                "    assert_eq!(decoder.b64_buffer, [0; BUF_SIZE]);",
                "    assert_eq!(decoder.b64_offset, 0);",
                "    assert_eq!(decoder.b64_len, 0);",
                "    assert_eq!(decoder.decoded_chunk_buffer, [0; DECODED_CHUNK_SIZE]);",
                "    assert_eq!(decoder.decoded_offset, 0);",
                "    assert_eq!(decoder.decoded_len, 0);",
                "    assert_eq!(decoder.input_consumed_len, 0);",
                "    assert!(decoder.padding_offset.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEngine;",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate { 0 }",
                "        fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<(), DecodeSliceError> { Ok(()) }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "    ",
                "    use std::io::Cursor;",
                "    let data = vec![0u8; 2048]; // large buffer",
                "    let reader = Cursor::new(data);",
                "    let engine = TestEngine;",
                "",
                "    let decoder = DecoderReader::new(reader, &engine);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(decoder.engine, &engine);",
                "    assert_eq!(decoder.inner.get_ref().len(), 2048);",
                "    assert_eq!(decoder.b64_buffer, [0; BUF_SIZE]);",
                "    assert_eq!(decoder.b64_offset, 0);",
                "    assert_eq!(decoder.b64_len, 0);",
                "    assert_eq!(decoder.decoded_chunk_buffer, [0; DECODED_CHUNK_SIZE]);",
                "    assert_eq!(decoder.decoded_offset, 0);",
                "    assert_eq!(decoder.decoded_len, 0);",
                "    assert_eq!(decoder.input_consumed_len, 0);",
                "    assert_eq!(decoder.padding_offset, None);"
              ],
              "code": [
                "{",
                "    struct TestEngine;",
                "",
                "    impl Engine for TestEngine {",
                "        type Config = ();",
                "        type DecodeEstimate = usize;",
                "",
                "        fn internal_encode(&self, _input: &[u8], _output: &mut [u8]) -> usize { 0 }",
                "        fn internal_decoded_len_estimate(&self, _input_len: usize) -> Self::DecodeEstimate { 0 }",
                "        fn internal_decode(&self, _input: &[u8], _output: &mut [u8], _decode_estimate: Self::DecodeEstimate) -> Result<(), DecodeSliceError> { Ok(()) }",
                "        fn config(&self) -> &Self::Config { &() }",
                "    }",
                "    ",
                "    use std::io::Cursor;",
                "    let data = vec![0u8; 2048]; // large buffer",
                "    let reader = Cursor::new(data);",
                "    let engine = TestEngine;",
                "",
                "    let decoder = DecoderReader::new(reader, &engine);",
                "    assert_eq!(decoder.engine, &engine);",
                "    assert_eq!(decoder.inner.get_ref().len(), 2048);",
                "    assert_eq!(decoder.b64_buffer, [0; BUF_SIZE]);",
                "    assert_eq!(decoder.b64_offset, 0);",
                "    assert_eq!(decoder.b64_len, 0);",
                "    assert_eq!(decoder.decoded_chunk_buffer, [0; DECODED_CHUNK_SIZE]);",
                "    assert_eq!(decoder.decoded_offset, 0);",
                "    assert_eq!(decoder.decoded_len, 0);",
                "    assert_eq!(decoder.input_consumed_len, 0);",
                "    assert_eq!(decoder.padding_offset, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}