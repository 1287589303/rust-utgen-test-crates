bb0
  0: StorageLive(_2)
    SourceInfo(idna/src/uts46.rs:119:5-121:6)
  1: StorageLive(_3)
    SourceInfo(idna/src/uts46.rs:119:8-119:23)
  2: StorageLive(_4)
    SourceInfo(idna/src/uts46.rs:119:8-119:19)
  3: StorageLive(_5)
    SourceInfo(idna/src/uts46.rs:119:8-119:13)
  4: _5 = &(*_1)
    SourceInfo(idna/src/uts46.rs:119:8-119:13)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:119:8-119:19)
      kind: _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb1, unwind: bb16]
  }
  preds []
  succs [bb1, bb16]

bb1
  0: StorageDead(_5)
    SourceInfo(idna/src/uts46.rs:119:18-119:19)
  1: _3 = Lt(move _4, const 4_usize)
    SourceInfo(idna/src/uts46.rs:119:8-119:23)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:119:8-119:23)
      kind: switchInt(move _3) -> [0: bb3, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(idna/src/uts46.rs:119:22-119:23)
  1: _0 = const false
    SourceInfo(idna/src/uts46.rs:120:16-120:21)
  2: StorageDead(_3)
    SourceInfo(idna/src/uts46.rs:121:5-121:6)
  3: StorageDead(_2)
    SourceInfo(idna/src/uts46.rs:121:5-121:6)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:130:2-130:2)
      kind: goto -> bb15
  }
  preds [bb1]
  succs [bb15]

bb3
  0: StorageDead(_4)
    SourceInfo(idna/src/uts46.rs:119:22-119:23)
  1: _2 = const ()
    SourceInfo(idna/src/uts46.rs:121:6-121:6)
  2: StorageDead(_3)
    SourceInfo(idna/src/uts46.rs:121:5-121:6)
  3: StorageDead(_2)
    SourceInfo(idna/src/uts46.rs:121:5-121:6)
  4: StorageLive(_7)
    SourceInfo(idna/src/uts46.rs:124:9-124:10)
  5: StorageLive(_8)
    SourceInfo(idna/src/uts46.rs:124:19-124:20)
  6: _8 = const 0_usize
    SourceInfo(idna/src/uts46.rs:124:19-124:20)
  7: _9 = Len((*_1))
    SourceInfo(idna/src/uts46.rs:124:13-124:21)
  8: _10 = Lt(_8, _9)
    SourceInfo(idna/src/uts46.rs:124:13-124:21)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:124:13-124:21)
      kind: assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb4, unwind: bb16]
  }
  preds [bb1]
  succs [bb4, bb16]

bb4
  0: _7 = (*_1)[_8]
    SourceInfo(idna/src/uts46.rs:124:13-124:21)
  1: FakeRead(ForLet(None), _7)
    SourceInfo(idna/src/uts46.rs:124:9-124:10)
  2: StorageDead(_8)
    SourceInfo(idna/src/uts46.rs:124:21-124:22)
  3: StorageLive(_11)
    SourceInfo(idna/src/uts46.rs:125:9-125:10)
  4: StorageLive(_12)
    SourceInfo(idna/src/uts46.rs:125:19-125:20)
  5: _12 = const 1_usize
    SourceInfo(idna/src/uts46.rs:125:19-125:20)
  6: _13 = Len((*_1))
    SourceInfo(idna/src/uts46.rs:125:13-125:21)
  7: _14 = Lt(_12, _13)
    SourceInfo(idna/src/uts46.rs:125:13-125:21)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:125:13-125:21)
      kind: assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb5, unwind: bb16]
  }
  preds [bb3]
  succs [bb5, bb16]

bb5
  0: _11 = (*_1)[_12]
    SourceInfo(idna/src/uts46.rs:125:13-125:21)
  1: FakeRead(ForLet(None), _11)
    SourceInfo(idna/src/uts46.rs:125:9-125:10)
  2: StorageDead(_12)
    SourceInfo(idna/src/uts46.rs:125:21-125:22)
  3: StorageLive(_15)
    SourceInfo(idna/src/uts46.rs:126:9-126:10)
  4: StorageLive(_16)
    SourceInfo(idna/src/uts46.rs:126:19-126:20)
  5: _16 = const 2_usize
    SourceInfo(idna/src/uts46.rs:126:19-126:20)
  6: _17 = Len((*_1))
    SourceInfo(idna/src/uts46.rs:126:13-126:21)
  7: _18 = Lt(_16, _17)
    SourceInfo(idna/src/uts46.rs:126:13-126:21)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:126:13-126:21)
      kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb6, unwind: bb16]
  }
  preds [bb4]
  succs [bb6, bb16]

bb6
  0: _15 = (*_1)[_16]
    SourceInfo(idna/src/uts46.rs:126:13-126:21)
  1: FakeRead(ForLet(None), _15)
    SourceInfo(idna/src/uts46.rs:126:9-126:10)
  2: StorageDead(_16)
    SourceInfo(idna/src/uts46.rs:126:21-126:22)
  3: StorageLive(_19)
    SourceInfo(idna/src/uts46.rs:127:9-127:10)
  4: StorageLive(_20)
    SourceInfo(idna/src/uts46.rs:127:19-127:20)
  5: _20 = const 3_usize
    SourceInfo(idna/src/uts46.rs:127:19-127:20)
  6: _21 = Len((*_1))
    SourceInfo(idna/src/uts46.rs:127:13-127:21)
  7: _22 = Lt(_20, _21)
    SourceInfo(idna/src/uts46.rs:127:13-127:21)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:127:13-127:21)
      kind: assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb7, unwind: bb16]
  }
  preds [bb5]
  succs [bb7, bb16]

bb7
  0: _19 = (*_1)[_20]
    SourceInfo(idna/src/uts46.rs:127:13-127:21)
  1: FakeRead(ForLet(None), _19)
    SourceInfo(idna/src/uts46.rs:127:9-127:10)
  2: StorageDead(_20)
    SourceInfo(idna/src/uts46.rs:127:21-127:22)
  3: StorageLive(_23)
    SourceInfo(idna/src/uts46.rs:128:9-128:10)
  4: StorageLive(_24)
    SourceInfo(idna/src/uts46.rs:128:13-128:78)
  5: StorageLive(_25)
    SourceInfo(idna/src/uts46.rs:128:13-128:56)
  6: StorageLive(_26)
    SourceInfo(idna/src/uts46.rs:128:13-128:33)
  7: StorageLive(_27)
    SourceInfo(idna/src/uts46.rs:128:14-128:26)
  8: StorageLive(_28)
    SourceInfo(idna/src/uts46.rs:128:24-128:25)
  9: _28 = _19
    SourceInfo(idna/src/uts46.rs:128:24-128:25)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:128:14-128:26)
      kind: _27 = <u32 as core::convert::From<u8>>::from(move _28) -> [return: bb8, unwind: bb16]
  }
  preds [bb6]
  succs [bb8, bb16]

bb8
  0: StorageDead(_28)
    SourceInfo(idna/src/uts46.rs:128:25-128:26)
  1: _29 = const 24_i32 as u32 (IntToInt)
    SourceInfo(idna/src/uts46.rs:128:13-128:33)
  2: _30 = Lt(move _29, const 32_u32)
    SourceInfo(idna/src/uts46.rs:128:13-128:33)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:128:13-128:33)
      kind: assert(move _30, "attempt to shift left by `{}`, which would overflow", const 24_i32) -> [success: bb9, unwind: bb16]
  }
  preds [bb7]
  succs [bb9, bb16]

bb9
  0: _26 = Shl(move _27, const 24_i32)
    SourceInfo(idna/src/uts46.rs:128:13-128:33)
  1: StorageDead(_27)
    SourceInfo(idna/src/uts46.rs:128:32-128:33)
  2: StorageLive(_31)
    SourceInfo(idna/src/uts46.rs:128:36-128:56)
  3: StorageLive(_32)
    SourceInfo(idna/src/uts46.rs:128:37-128:49)
  4: StorageLive(_33)
    SourceInfo(idna/src/uts46.rs:128:47-128:48)
  5: _33 = _15
    SourceInfo(idna/src/uts46.rs:128:47-128:48)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:128:37-128:49)
      kind: _32 = <u32 as core::convert::From<u8>>::from(move _33) -> [return: bb10, unwind: bb16]
  }
  preds [bb8]
  succs [bb10, bb16]

bb10
  0: StorageDead(_33)
    SourceInfo(idna/src/uts46.rs:128:48-128:49)
  1: _34 = const 16_i32 as u32 (IntToInt)
    SourceInfo(idna/src/uts46.rs:128:36-128:56)
  2: _35 = Lt(move _34, const 32_u32)
    SourceInfo(idna/src/uts46.rs:128:36-128:56)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:128:36-128:56)
      kind: assert(move _35, "attempt to shift left by `{}`, which would overflow", const 16_i32) -> [success: bb11, unwind: bb16]
  }
  preds [bb9]
  succs [bb11, bb16]

bb11
  0: _31 = Shl(move _32, const 16_i32)
    SourceInfo(idna/src/uts46.rs:128:36-128:56)
  1: StorageDead(_32)
    SourceInfo(idna/src/uts46.rs:128:55-128:56)
  2: _25 = BitOr(move _26, move _31)
    SourceInfo(idna/src/uts46.rs:128:13-128:56)
  3: StorageDead(_31)
    SourceInfo(idna/src/uts46.rs:128:55-128:56)
  4: StorageDead(_26)
    SourceInfo(idna/src/uts46.rs:128:55-128:56)
  5: StorageLive(_36)
    SourceInfo(idna/src/uts46.rs:128:59-128:78)
  6: StorageLive(_37)
    SourceInfo(idna/src/uts46.rs:128:60-128:72)
  7: StorageLive(_38)
    SourceInfo(idna/src/uts46.rs:128:70-128:71)
  8: _38 = _11
    SourceInfo(idna/src/uts46.rs:128:70-128:71)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:128:60-128:72)
      kind: _37 = <u32 as core::convert::From<u8>>::from(move _38) -> [return: bb12, unwind: bb16]
  }
  preds [bb10]
  succs [bb12, bb16]

bb12
  0: StorageDead(_38)
    SourceInfo(idna/src/uts46.rs:128:71-128:72)
  1: _39 = const 8_i32 as u32 (IntToInt)
    SourceInfo(idna/src/uts46.rs:128:59-128:78)
  2: _40 = Lt(move _39, const 32_u32)
    SourceInfo(idna/src/uts46.rs:128:59-128:78)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:128:59-128:78)
      kind: assert(move _40, "attempt to shift left by `{}`, which would overflow", const 8_i32) -> [success: bb13, unwind: bb16]
  }
  preds [bb11]
  succs [bb13, bb16]

bb13
  0: _36 = Shl(move _37, const 8_i32)
    SourceInfo(idna/src/uts46.rs:128:59-128:78)
  1: StorageDead(_37)
    SourceInfo(idna/src/uts46.rs:128:77-128:78)
  2: _24 = BitOr(move _25, move _36)
    SourceInfo(idna/src/uts46.rs:128:13-128:78)
  3: StorageDead(_36)
    SourceInfo(idna/src/uts46.rs:128:77-128:78)
  4: StorageDead(_25)
    SourceInfo(idna/src/uts46.rs:128:77-128:78)
  5: StorageLive(_41)
    SourceInfo(idna/src/uts46.rs:128:81-128:93)
  6: StorageLive(_42)
    SourceInfo(idna/src/uts46.rs:128:91-128:92)
  7: _42 = _7
    SourceInfo(idna/src/uts46.rs:128:91-128:92)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:128:81-128:93)
      kind: _41 = <u32 as core::convert::From<u8>>::from(move _42) -> [return: bb14, unwind: bb16]
  }
  preds [bb12]
  succs [bb14, bb16]

bb14
  0: StorageDead(_42)
    SourceInfo(idna/src/uts46.rs:128:92-128:93)
  1: _23 = BitOr(move _24, move _41)
    SourceInfo(idna/src/uts46.rs:128:13-128:93)
  2: StorageDead(_41)
    SourceInfo(idna/src/uts46.rs:128:92-128:93)
  3: StorageDead(_24)
    SourceInfo(idna/src/uts46.rs:128:92-128:93)
  4: FakeRead(ForLet(None), _23)
    SourceInfo(idna/src/uts46.rs:128:9-128:10)
  5: StorageLive(_43)
    SourceInfo(idna/src/uts46.rs:129:5-129:31)
  6: StorageLive(_44)
    SourceInfo(idna/src/uts46.rs:129:6-129:7)
  7: _44 = _23
    SourceInfo(idna/src/uts46.rs:129:6-129:7)
  8: _43 = BitAnd(move _44, const uts46::PUNYCODE_PREFIX_MASK)
    SourceInfo(idna/src/uts46.rs:129:5-129:31)
  9: StorageDead(_44)
    SourceInfo(idna/src/uts46.rs:129:30-129:31)
  10: _0 = Eq(move _43, const uts46::PUNYCODE_PREFIX)
    SourceInfo(idna/src/uts46.rs:129:5-129:50)
  11: StorageDead(_43)
    SourceInfo(idna/src/uts46.rs:129:49-129:50)
  12: StorageDead(_23)
    SourceInfo(idna/src/uts46.rs:130:1-130:2)
  13: StorageDead(_19)
    SourceInfo(idna/src/uts46.rs:130:1-130:2)
  14: StorageDead(_15)
    SourceInfo(idna/src/uts46.rs:130:1-130:2)
  15: StorageDead(_11)
    SourceInfo(idna/src/uts46.rs:130:1-130:2)
  16: StorageDead(_7)
    SourceInfo(idna/src/uts46.rs:130:1-130:2)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:130:2-130:2)
      kind: goto -> bb15
  }
  preds [bb13]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:130:2-130:2)
      kind: return
  }
  preds [bb2, bb14]
  succs []

bb16
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:118:1-130:2)
      kind: resume
  }
  preds [bb0, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13]
  succs []

