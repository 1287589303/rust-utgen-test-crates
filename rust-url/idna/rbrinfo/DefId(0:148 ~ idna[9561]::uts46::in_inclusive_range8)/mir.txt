bb0
  0: StorageLive(_4)
    SourceInfo(idna/src/uts46.rs:134:5-134:26)
  1: StorageLive(_5)
    SourceInfo(idna/src/uts46.rs:134:5-134:6)
  2: _5 = _1
    SourceInfo(idna/src/uts46.rs:134:5-134:6)
  3: StorageLive(_6)
    SourceInfo(idna/src/uts46.rs:134:20-134:25)
  4: _6 = _2
    SourceInfo(idna/src/uts46.rs:134:20-134:25)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:134:5-134:26)
      kind: _4 = core::num::<impl u8>::wrapping_sub(move _5, move _6) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_6)
    SourceInfo(idna/src/uts46.rs:134:25-134:26)
  1: StorageDead(_5)
    SourceInfo(idna/src/uts46.rs:134:25-134:26)
  2: StorageLive(_7)
    SourceInfo(idna/src/uts46.rs:134:30-134:43)
  3: StorageLive(_8)
    SourceInfo(idna/src/uts46.rs:134:31-134:34)
  4: _8 = _3
    SourceInfo(idna/src/uts46.rs:134:31-134:34)
  5: StorageLive(_9)
    SourceInfo(idna/src/uts46.rs:134:37-134:42)
  6: _9 = _2
    SourceInfo(idna/src/uts46.rs:134:37-134:42)
  7: _10 = SubWithOverflow(_8, _9)
    SourceInfo(idna/src/uts46.rs:134:30-134:43)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:134:30-134:43)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _8, move _9) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _7 = move (_10.0: u8)
    SourceInfo(idna/src/uts46.rs:134:30-134:43)
  1: StorageDead(_9)
    SourceInfo(idna/src/uts46.rs:134:42-134:43)
  2: StorageDead(_8)
    SourceInfo(idna/src/uts46.rs:134:42-134:43)
  3: _0 = Le(move _4, move _7)
    SourceInfo(idna/src/uts46.rs:134:5-134:43)
  4: StorageDead(_7)
    SourceInfo(idna/src/uts46.rs:134:42-134:43)
  5: StorageDead(_4)
    SourceInfo(idna/src/uts46.rs:134:42-134:43)
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:135:2-135:2)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(idna/src/uts46.rs:133:1-135:2)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

