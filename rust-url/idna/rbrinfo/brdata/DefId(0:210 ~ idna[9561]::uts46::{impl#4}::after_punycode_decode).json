{
  "name": "idna::uts46::{impl#4}::after_punycode_decode",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:1479:5:1522:6",
  "doc": "",
  "code": [
    "fn after_punycode_decode(",
    "    &self,",
    "    domain_buffer: &mut SmallVec<[char; 253]>,",
    "    current_label_start: usize,",
    "    label_buffer: &[char],",
    "    deny_list_deny_dot: u128,",
    "    fail_fast: bool,",
    "    had_errors: &mut bool,",
    ") -> bool {",
    "    for c in self",
    "        .data",
    "        .normalize_validate(label_buffer.iter().copied())",
    "        .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
    "    {",
    "        if c == '\\u{FFFD}' {",
    "            if fail_fast {",
    "                return true;",
    "            }",
    "            *had_errors = true;",
    "        }",
    "        domain_buffer.push(c);",
    "    }",
    "    let normalized = &mut domain_buffer[current_label_start..];",
    "    if let Err(()) =",
    "        normalized",
    "            .iter_mut()",
    "            .zip(label_buffer.iter())",
    "            .try_for_each(|(norm_c, decoded_c)| {",
    "                if *norm_c == *decoded_c {",
    "                    Ok(())",
    "                } else {",
    "                    // Mark the first difference",
    "                    *norm_c = '\\u{FFFD}';",
    "                    Err(())",
    "                }",
    "            })",
    "    {",
    "        if fail_fast {",
    "            return true;",
    "        }",
    "        *had_errors = true;",
    "    }",
    "    false",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 6,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "true",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "false",
          "line": 1493,
          "bound": null
        },
        {
          "cond": "fail_fast",
          "norm": null,
          "value": "true",
          "line": 1494,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        14,
        32,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "true",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "false",
          "line": 1493,
          "bound": null
        },
        {
          "cond": "fail_fast",
          "norm": null,
          "value": "false",
          "line": 1494,
          "bound": null
        },
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "false",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "let Err(()) =\n            normalized\n                .iter_mut()\n                .zip(label_buffer.iter())\n                .try_for_each(|(norm_c, decoded_c)| {\n                    if *norm_c == *decoded_c {\n                        Ok(())\n                    } else {\n                        // Mark the first difference\n                        *norm_c = '\\u{FFFD}';\n                        Err(())\n                    }\n                })",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        15,
        17,
        18,
        6,
        7,
        8,
        10,
        12,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        30,
        31,
        34
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "true",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "false",
          "line": 1493,
          "bound": null
        },
        {
          "cond": "fail_fast",
          "norm": null,
          "value": "false",
          "line": 1494,
          "bound": null
        },
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "false",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "let Err(()) =\n            normalized\n                .iter_mut()\n                .zip(label_buffer.iter())\n                .try_for_each(|(norm_c, decoded_c)| {\n                    if *norm_c == *decoded_c {\n                        Ok(())\n                    } else {\n                        // Mark the first difference\n                        *norm_c = '\\u{FFFD}';\n                        Err(())\n                    }\n                })",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        },
        {
          "cond": "fail_fast",
          "norm": null,
          "value": "true",
          "line": 1516,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        15,
        17,
        18,
        6,
        7,
        8,
        10,
        12,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        34
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "true",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "false",
          "line": 1493,
          "bound": null
        },
        {
          "cond": "fail_fast",
          "norm": null,
          "value": "false",
          "line": 1494,
          "bound": null
        },
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "false",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "let Err(()) =\n            normalized\n                .iter_mut()\n                .zip(label_buffer.iter())\n                .try_for_each(|(norm_c, decoded_c)| {\n                    if *norm_c == *decoded_c {\n                        Ok(())\n                    } else {\n                        // Mark the first difference\n                        *norm_c = '\\u{FFFD}';\n                        Err(())\n                    }\n                })",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        },
        {
          "cond": "fail_fast",
          "norm": null,
          "value": "false",
          "line": 1516,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        15,
        17,
        18,
        6,
        7,
        8,
        10,
        12,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        29,
        31,
        34
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "true",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "true",
          "line": 1493,
          "bound": null
        },
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "false",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "let Err(()) =\n            normalized\n                .iter_mut()\n                .zip(label_buffer.iter())\n                .try_for_each(|(norm_c, decoded_c)| {\n                    if *norm_c == *decoded_c {\n                        Ok(())\n                    } else {\n                        // Mark the first difference\n                        *norm_c = '\\u{FFFD}';\n                        Err(())\n                    }\n                })",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        16,
        17,
        18,
        6,
        7,
        8,
        10,
        12,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        30,
        31,
        34
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "true",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "true",
          "line": 1493,
          "bound": null
        },
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "false",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "let Err(()) =\n            normalized\n                .iter_mut()\n                .zip(label_buffer.iter())\n                .try_for_each(|(norm_c, decoded_c)| {\n                    if *norm_c == *decoded_c {\n                        Ok(())\n                    } else {\n                        // Mark the first difference\n                        *norm_c = '\\u{FFFD}';\n                        Err(())\n                    }\n                })",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        },
        {
          "cond": "fail_fast",
          "norm": null,
          "value": "true",
          "line": 1516,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        16,
        17,
        18,
        6,
        7,
        8,
        10,
        12,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        34
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "true",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "true",
          "line": 1493,
          "bound": null
        },
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "false",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "let Err(()) =\n            normalized\n                .iter_mut()\n                .zip(label_buffer.iter())\n                .try_for_each(|(norm_c, decoded_c)| {\n                    if *norm_c == *decoded_c {\n                        Ok(())\n                    } else {\n                        // Mark the first difference\n                        *norm_c = '\\u{FFFD}';\n                        Err(())\n                    }\n                })",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        },
        {
          "cond": "fail_fast",
          "norm": null,
          "value": "false",
          "line": 1516,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        16,
        17,
        18,
        6,
        7,
        8,
        10,
        12,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        29,
        31,
        34
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "false",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "let Err(()) =\n            normalized\n                .iter_mut()\n                .zip(label_buffer.iter())\n                .try_for_each(|(norm_c, decoded_c)| {\n                    if *norm_c == *decoded_c {\n                        Ok(())\n                    } else {\n                        // Mark the first difference\n                        *norm_c = '\\u{FFFD}';\n                        Err(())\n                    }\n                })",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        30,
        31,
        34
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "false",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "let Err(()) =\n            normalized\n                .iter_mut()\n                .zip(label_buffer.iter())\n                .try_for_each(|(norm_c, decoded_c)| {\n                    if *norm_c == *decoded_c {\n                        Ok(())\n                    } else {\n                        // Mark the first difference\n                        *norm_c = '\\u{FFFD}';\n                        Err(())\n                    }\n                })",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        },
        {
          "cond": "fail_fast",
          "norm": null,
          "value": "true",
          "line": 1516,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        34
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))",
          "norm": null,
          "value": "false",
          "line": 1488,
          "bound": null
        },
        {
          "cond": "let Err(()) =\n            normalized\n                .iter_mut()\n                .zip(label_buffer.iter())\n                .try_for_each(|(norm_c, decoded_c)| {\n                    if *norm_c == *decoded_c {\n                        Ok(())\n                    } else {\n                        // Mark the first difference\n                        *norm_c = '\\u{FFFD}';\n                        Err(())\n                    }\n                })",
          "norm": null,
          "value": "true",
          "line": 1502,
          "bound": null
        },
        {
          "cond": "fail_fast",
          "norm": null,
          "value": "false",
          "line": 1516,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        29,
        31,
        34
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}