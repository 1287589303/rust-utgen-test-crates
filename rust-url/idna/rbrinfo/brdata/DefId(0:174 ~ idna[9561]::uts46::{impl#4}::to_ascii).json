{
  "name": "idna::uts46::{impl#4}::to_ascii",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": true,
  "loc": "idna/src/uts46.rs:527:5:568:6",
  "doc": "/// Performs the [ToASCII](https://www.unicode.org/reports/tr46/#ToASCII) operation\n/// from UTS #46 with the options indicated.\n///\n/// # Arguments\n///\n/// * `domain_name` - The input domain name as UTF-8 bytes. (The UTF-8ness is checked by\n///   this method and input that is not well-formed UTF-8 is treated as an error. If you\n///   already have a `&str`, call `.as_bytes()` on it.)\n/// * `ascii_deny_list` - What ASCII deny list, if any, to apply. The UTS 46\n///   _UseSTD3ASCIIRules_ flag or the WHATWG URL Standard forbidden domain code point\n///   processing is handled via this argument. Most callers are probably the best off\n///   by using [`AsciiDenyList::URL`] here.\n/// * `hyphens` - The UTS 46 _CheckHyphens_ flag. Most callers are probably the best\n///   off by using [`Hyphens::Allow`] here.\n/// * `dns_length` - The UTS 46 _VerifyDNSLength_ flag.\n",
  "code": [
    "pub fn to_ascii<'a>(",
    "    &self,",
    "    domain_name: &'a [u8],",
    "    ascii_deny_list: AsciiDenyList,",
    "    hyphens: Hyphens,",
    "    dns_length: DnsLength,",
    ") -> Result<Cow<'a, str>, crate::Errors> {",
    "    let mut s = String::new();",
    "    match self.process(",
    "        domain_name,",
    "        ascii_deny_list,",
    "        hyphens,",
    "        ErrorPolicy::FailFast,",
    "        |_, _, _| false,",
    "        &mut s,",
    "        None,",
    "    ) {",
    "        // SAFETY: `ProcessingSuccess::Passthrough` asserts that `domain_name` is ASCII.",
    "        Ok(ProcessingSuccess::Passthrough) => {",
    "            let cow = Cow::Borrowed(unsafe { core::str::from_utf8_unchecked(domain_name) });",
    "            if dns_length != DnsLength::Ignore",
    "                && !verify_dns_length(&cow, dns_length == DnsLength::VerifyAllowRootDot)",
    "            {",
    "                Err(crate::Errors::default())",
    "            } else {",
    "                Ok(cow)",
    "            }",
    "        }",
    "        Ok(ProcessingSuccess::WroteToSink) => {",
    "            let cow: Cow<'_, str> = Cow::Owned(s);",
    "            if dns_length != DnsLength::Ignore",
    "                && !verify_dns_length(&cow, dns_length == DnsLength::VerifyAllowRootDot)",
    "            {",
    "                Err(crate::Errors::default())",
    "            } else {",
    "                Ok(cow)",
    "            }",
    "        }",
    "        Err(ProcessingError::ValidityError) => Err(crate::Errors::default()),",
    "        Err(ProcessingError::SinkError) => unreachable!(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        7,
        9,
        46,
        47
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        }
      ],
      "ret": "Err(crate::Errors::default())",
      "path": [
        0,
        1,
        2,
        7,
        8,
        40,
        41,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "dns_length != DnsLength::Ignore",
          "norm": "DnsLength::Ignore != dns_length",
          "value": "true",
          "line": 557,
          "bound": null
        },
        {
          "cond": "verify_dns_length(&cow, dns_length == DnsLength::VerifyAllowRootDot)",
          "norm": null,
          "value": "true",
          "line": 558,
          "bound": null
        }
      ],
      "ret": "Ok(cow)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        36,
        37,
        38,
        39,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "dns_length != DnsLength::Ignore",
          "norm": "DnsLength::Ignore != dns_length",
          "value": "true",
          "line": 557,
          "bound": null
        },
        {
          "cond": "verify_dns_length(&cow, dns_length == DnsLength::VerifyAllowRootDot)",
          "norm": null,
          "value": "false",
          "line": 558,
          "bound": null
        }
      ],
      "ret": "Err(crate::Errors::default())",
      "path": [
        0,
        1,
        2,
        4,
        6,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        33,
        34,
        38,
        39,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "dns_length != DnsLength::Ignore",
          "norm": "DnsLength::Ignore != dns_length",
          "value": "false",
          "line": 557,
          "bound": null
        }
      ],
      "ret": "Ok(cow)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        25,
        26,
        27,
        35,
        36,
        37,
        38,
        39,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "dns_length != DnsLength::Ignore",
          "norm": "DnsLength::Ignore != dns_length",
          "value": "true",
          "line": 547,
          "bound": null
        },
        {
          "cond": "verify_dns_length(&cow, dns_length == DnsLength::VerifyAllowRootDot)",
          "norm": null,
          "value": "true",
          "line": 548,
          "bound": null
        }
      ],
      "ret": "Ok(cow)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        21,
        22,
        23,
        24,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "dns_length != DnsLength::Ignore",
          "norm": "DnsLength::Ignore != dns_length",
          "value": "true",
          "line": 547,
          "bound": null
        },
        {
          "cond": "verify_dns_length(&cow, dns_length == DnsLength::VerifyAllowRootDot)",
          "norm": null,
          "value": "false",
          "line": 548,
          "bound": null
        }
      ],
      "ret": "Err(crate::Errors::default())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        23,
        24,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::FailFast,\n            |_, _, _| false,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough)",
          "norm": null,
          "value": "true",
          "line": 535,
          "bound": null
        },
        {
          "cond": "dns_length != DnsLength::Ignore",
          "norm": "DnsLength::Ignore != dns_length",
          "value": "false",
          "line": 547,
          "bound": null
        }
      ],
      "ret": "Ok(cow)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        10,
        11,
        12,
        20,
        21,
        22,
        23,
        24,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}