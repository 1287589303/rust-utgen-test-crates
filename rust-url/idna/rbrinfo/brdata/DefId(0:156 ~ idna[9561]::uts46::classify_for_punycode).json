{
  "name": "idna::uts46::classify_for_punycode",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:248:1:267:2",
  "doc": "",
  "code": [
    "fn classify_for_punycode(label: &[char]) -> PunycodeClassification {",
    "    let mut iter = label.iter().copied();",
    "    loop {",
    "        if let Some(c) = iter.next() {",
    "            if c.is_ascii() {",
    "                continue;",
    "            }",
    "            if c == '\\u{FFFD}' {",
    "                return PunycodeClassification::Error;",
    "            }",
    "            for c in iter {",
    "                if c == '\\u{FFFD}' {",
    "                    return PunycodeClassification::Error;",
    "                }",
    "            }",
    "            return PunycodeClassification::Unicode;",
    "        }",
    "        return PunycodeClassification::Ascii;",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 1,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(c) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 251,
          "bound": null
        }
      ],
      "ret": "PunycodeClassification::Ascii",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        23,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(c) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "true",
          "line": 252,
          "bound": null
        },
        {
          "cond": "let Some(c) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 251,
          "bound": null
        }
      ],
      "ret": "PunycodeClassification::Ascii",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        3,
        4,
        5,
        23,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(c) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 252,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "false",
          "line": 255,
          "bound": null
        }
      ],
      "ret": "PunycodeClassification::Error",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        11,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(c) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 252,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "true",
          "line": 255,
          "bound": null
        },
        {
          "cond": "c in iter",
          "norm": null,
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "false",
          "line": 259,
          "bound": null
        }
      ],
      "ret": "PunycodeClassification::Error",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        14,
        15,
        16,
        19,
        21,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(c) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 252,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "true",
          "line": 255,
          "bound": null
        },
        {
          "cond": "c in iter",
          "norm": null,
          "value": "true",
          "line": 258,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "true",
          "line": 259,
          "bound": null
        },
        {
          "cond": "c in iter",
          "norm": null,
          "value": "false",
          "line": 258,
          "bound": null
        }
      ],
      "ret": "PunycodeClassification::Unicode",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        14,
        15,
        16,
        19,
        22,
        14,
        15,
        16,
        18,
        20,
        24,
        25
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let Some(c) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 251,
          "bound": null
        },
        {
          "cond": "c.is_ascii()",
          "norm": null,
          "value": "false",
          "line": 252,
          "bound": null
        },
        {
          "cond": "c == '\\u{FFFD}'",
          "norm": "'\\u{FFFD}' == c",
          "value": "true",
          "line": 255,
          "bound": null
        },
        {
          "cond": "c in iter",
          "norm": null,
          "value": "false",
          "line": 258,
          "bound": null
        }
      ],
      "ret": "PunycodeClassification::Unicode",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        14,
        15,
        16,
        18,
        20,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}