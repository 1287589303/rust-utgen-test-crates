{
  "name": "idna::deprecated::{impl#0}::to_unicode",
  "mod_info": {
    "name": "deprecated",
    "loc": "idna/src/lib.rs:56:1:56:16"
  },
  "visible": true,
  "loc": "idna/src/deprecated.rs:109:5:128:6",
  "doc": "/// [UTS 46 ToUnicode](http://www.unicode.org/reports/tr46/#ToUnicode)\n",
  "code": [
    "pub fn to_unicode(&mut self, domain: &str, out: &mut String) -> Result<(), Errors> {",
    "    let mapped = map_transitional(domain, self.config.transitional_processing);",
    "    match Uts46::new().process(",
    "        mapped.as_bytes(),",
    "        self.config.deny_list(),",
    "        self.config.hyphens(),",
    "        ErrorPolicy::MarkErrors,",
    "        |_, _, _| true,",
    "        out,",
    "        None,",
    "    ) {",
    "        Ok(ProcessingSuccess::Passthrough) => {",
    "            out.push_str(&mapped);",
    "            Ok(())",
    "        }",
    "        Ok(ProcessingSuccess::WroteToSink) => Ok(()),",
    "        Err(ProcessingError::ValidityError) => Err(crate::Errors::default()),",
    "        Err(ProcessingError::SinkError) => unreachable!(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        },
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        12,
        14,
        24,
        25,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        },
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        },
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Err(ProcessingError::ValidityError)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        }
      ],
      "ret": "Err(crate::Errors::default())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        12,
        13,
        19,
        20,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        },
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        },
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        18,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        },
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough) or Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        },
        {
          "cond": "Uts46::new().process(\n            mapped.as_bytes(),\n            self.config.deny_list(),\n            self.config.hyphens(),\n            ErrorPolicy::MarkErrors,\n            |_, _, _| true,\n            out,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough)",
          "norm": null,
          "value": "true",
          "line": 111,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        15,
        16,
        17,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}