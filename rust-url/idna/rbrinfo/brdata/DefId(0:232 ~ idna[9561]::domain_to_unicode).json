{
  "name": "idna::domain_to_unicode",
  "mod_info": {
    "name": "",
    "loc": "idna/src/lib.rs:9:1:171:2"
  },
  "visible": true,
  "loc": "idna/src/lib.rs:164:1:171:2",
  "doc": "/// The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm;\n/// version returning `String` and no ASCII deny list (i.e. _UseSTD3ASCIIRules=false_).\n///\n/// This function exists for backward-compatibility. Consider using [`Uts46::to_user_interface`]\n/// or [`Uts46::to_unicode`].\n///\n/// Return the Unicode representation of a domain name,\n/// normalizing characters (upper-case to lower-case and other kinds of equivalence)\n/// and decoding Punycode as necessary.\n///\n/// If the second item of the tuple indicates an error, the first item of the tuple\n/// denotes errors using the REPLACEMENT CHARACTERs in order to be able to illustrate\n/// errors to the user. When the second item of the return tuple signals an error,\n/// the first item of the tuple must not be used in a network protocol.\n",
  "code": [
    "pub fn domain_to_unicode(domain: &str) -> (String, Result<(), Errors>) {",
    "    let (cow, result) = Uts46::new().to_unicode(",
    "        domain.as_bytes(),",
    "        uts46::AsciiDenyList::EMPTY,",
    "        uts46::Hyphens::Allow,",
    "    );",
    "    (cow.into_owned(), result)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(cow.into_owned(), result)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}