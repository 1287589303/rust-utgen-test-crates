{
  "name": "idna::uts46::{impl#4}::to_user_interface",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": true,
  "loc": "idna/src/uts46.rs:647:5:673:6",
  "doc": "/// Performs the [ToUnicode](https://www.unicode.org/reports/tr46/#ToUnicode) operation\n/// from UTS #46 according to options given with some\n/// error-free Unicode labels output according to\n/// [ToASCII](https://www.unicode.org/reports/tr46/#ToASCII) instead as decided by\n/// application policy implemented via the `output_as_unicode` closure. The purpose\n/// is to convert user-visible domains to the Unicode form in general but to render\n/// potentially misleading labels as Punycode.\n///\n/// This is an imperfect security mechanism, because [the Punycode form itself may be\n/// resemble a user-recognizable name](https://www.unicode.org/reports/tr36/#TablePunycodeSpoofing).\n/// However, since this mechanism is common practice, this API provides support for The\n/// the mechanism.\n///\n/// ASCII labels always pass through as ASCII and labels with errors always pass through\n/// as Unicode. For non-erroneous labels that contain at least one non-ASCII character\n/// (implies non-empty), `output_as_unicode` is called with the Unicode form of the label,\n/// the TLD (potentially empty), and a flag indicating whether the domain name as a whole\n/// is a bidi domain name. If the return value is `true`, the label passes through as\n/// Unicode. If the return value is `false`, the label is converted to Punycode.\n///\n/// When there are errors, there is still output, which may be rendered user, even through\n/// the output must not be used in networking protocols. Errors are denoted by\n/// U+FFFD REPLACEMENT CHARACTERs in the output. (That is, if the second item\n/// of the return tuple is `Err`, the first item of the return tuple is guaranteed to contain\n/// at least one U+FFFD.) Labels that contain errors are not converted to Punycode.\n///\n/// # Arguments\n///\n/// * `domain_name` - The input domain name as UTF-8 bytes. (The UTF-8ness is checked by\n///   this method and input that is not well-formed UTF-8 is treated as an error. If you\n///   already have a `&str`, call `.as_bytes()` on it.)\n/// * `ascii_deny_list` - What ASCII deny list, if any, to apply. The UTS 46\n///   _UseSTD3ASCIIRules_ flag or the WHATWG URL Standard forbidden domain code point\n///   processing is handled via this argument. Most callers are probably the best off\n///   by using [`AsciiDenyList::URL`] here.\n/// * `hyphens` - The UTS 46 _CheckHyphens_ flag. Most callers are probably the best\n///   off by using [`Hyphens::Allow`] here.\n/// * `output_as_unicode` - A closure for deciding if a label should be output as Unicode\n///   (as opposed to Punycode). The first argument is the label for which a decision is\n///   needed (always non-empty slice). The second argument is the TLD (potentially empty).\n///   The third argument is `true` iff the domain name as a whole is a bidi domain name.\n///   Only non-erroneous labels that contain at least one non-ASCII character are passed\n///   to the closure as the first argument. The second and third argument values are\n///   guaranteed to remain the same during a single call to `process`, and the closure\n///   may cache computations derived from the second and third argument (hence the\n///   `FnMut` type).\n",
  "code": [
    "pub fn to_user_interface<'a, OutputUnicode: FnMut(&[char], &[char], bool) -> bool>(",
    "    &self,",
    "    domain_name: &'a [u8],",
    "    ascii_deny_list: AsciiDenyList,",
    "    hyphens: Hyphens,",
    "    output_as_unicode: OutputUnicode,",
    ") -> (Cow<'a, str>, Result<(), crate::Errors>) {",
    "    let mut s = String::new();",
    "    match self.process(",
    "        domain_name,",
    "        ascii_deny_list,",
    "        hyphens,",
    "        ErrorPolicy::MarkErrors,",
    "        output_as_unicode,",
    "        &mut s,",
    "        None,",
    "    ) {",
    "        // SAFETY: `ProcessingSuccess::Passthrough` asserts that `domain_name` is ASCII.",
    "        Ok(ProcessingSuccess::Passthrough) => (",
    "            Cow::Borrowed(unsafe { core::str::from_utf8_unchecked(domain_name) }),",
    "            Ok(()),",
    "        ),",
    "        Ok(ProcessingSuccess::WroteToSink) => (Cow::Owned(s), Ok(())),",
    "        Err(ProcessingError::ValidityError) => (Cow::Owned(s), Err(crate::Errors::default())),",
    "        Err(ProcessingError::SinkError) => unreachable!(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        7,
        9,
        26,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::WroteToSink) or Ok(ProcessingSuccess::Passthrough)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        }
      ],
      "ret": "(Cow::Owned(s), Err(crate::Errors::default()))",
      "path": [
        0,
        1,
        2,
        7,
        8,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::WroteToSink) or Ok(ProcessingSuccess::Passthrough)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Err(ProcessingError::ValidityError) or Err(ProcessingError::SinkError)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::WroteToSink)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        }
      ],
      "ret": "(Cow::Owned(s), Ok(()))",
      "path": [
        0,
        1,
        2,
        4,
        6,
        13,
        14,
        15,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::WroteToSink) or Ok(ProcessingSuccess::Passthrough)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::WroteToSink) or Ok(ProcessingSuccess::Passthrough)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        },
        {
          "cond": "self.process(\n            domain_name,\n            ascii_deny_list,\n            hyphens,\n            ErrorPolicy::MarkErrors,\n            output_as_unicode,\n            &mut s,\n            None,\n        ) matches Ok(ProcessingSuccess::Passthrough)",
          "norm": null,
          "value": "true",
          "line": 655,
          "bound": null
        }
      ],
      "ret": "(\n                Cow::Borrowed(unsafe { core::str::from_utf8_unchecked(domain_name) }),\n                Ok(()),\n            )",
      "path": [
        0,
        1,
        2,
        4,
        5,
        10,
        11,
        12,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}