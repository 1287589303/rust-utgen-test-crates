{
  "name": "idna::punycode::adapt",
  "mod_info": {
    "name": "punycode",
    "loc": "idna/src/lib.rs:57:1:57:18"
  },
  "visible": false,
  "loc": "idna/src/punycode.rs:31:1:40:2",
  "doc": "",
  "code": [
    "fn adapt(mut delta: u32, num_points: u32, first_time: bool) -> u32 {",
    "    delta /= if first_time { DAMP } else { 2 };",
    "    delta += delta / num_points;",
    "    let mut k = 0;",
    "    while delta > ((BASE - T_MIN) * T_MAX) / 2 {",
    "        delta /= BASE - T_MIN;",
    "        k += BASE;",
    "    }",
    "    k + (((BASE - T_MIN + 1) * delta) / (delta + SKEW))",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "first_time",
          "norm": null,
          "value": "true",
          "line": 32,
          "bound": null
        },
        {
          "cond": "delta > ((BASE - T_MIN) * T_MAX) / 2",
          "norm": "((BASE - T_MIN) * T_MAX) / 2 < delta",
          "value": "true",
          "line": 35,
          "bound": null
        },
        {
          "cond": "delta > ((BASE - T_MIN) * T_MAX) / 2",
          "norm": "((BASE - T_MIN) * T_MAX) / 2 < delta",
          "value": "false",
          "line": 35,
          "bound": "delta == ((BASE - T_MIN) * T_MAX) / 2"
        }
      ],
      "ret": "k + (((BASE - T_MIN + 1) * delta) / (delta + SKEW))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        7,
        8,
        9,
        10,
        11,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "first_time",
          "norm": null,
          "value": "true",
          "line": 32,
          "bound": null
        },
        {
          "cond": "delta > ((BASE - T_MIN) * T_MAX) / 2",
          "norm": "((BASE - T_MIN) * T_MAX) / 2 < delta",
          "value": "false",
          "line": 35,
          "bound": "delta == ((BASE - T_MIN) * T_MAX) / 2"
        }
      ],
      "ret": "k + (((BASE - T_MIN + 1) * delta) / (delta + SKEW))",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "first_time",
          "norm": null,
          "value": "false",
          "line": 32,
          "bound": null
        },
        {
          "cond": "delta > ((BASE - T_MIN) * T_MAX) / 2",
          "norm": "((BASE - T_MIN) * T_MAX) / 2 < delta",
          "value": "true",
          "line": 35,
          "bound": null
        },
        {
          "cond": "delta > ((BASE - T_MIN) * T_MAX) / 2",
          "norm": "((BASE - T_MIN) * T_MAX) / 2 < delta",
          "value": "false",
          "line": 35,
          "bound": "delta == ((BASE - T_MIN) * T_MAX) / 2"
        }
      ],
      "ret": "k + (((BASE - T_MIN + 1) * delta) / (delta + SKEW))",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        7,
        8,
        9,
        10,
        11,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "first_time",
          "norm": null,
          "value": "false",
          "line": 32,
          "bound": null
        },
        {
          "cond": "delta > ((BASE - T_MIN) * T_MAX) / 2",
          "norm": "((BASE - T_MIN) * T_MAX) / 2 < delta",
          "value": "false",
          "line": 35,
          "bound": "delta == ((BASE - T_MIN) * T_MAX) / 2"
        }
      ],
      "ret": "k + (((BASE - T_MIN + 1) * delta) / (delta + SKEW))",
      "path": [
        0,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        16,
        17,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}