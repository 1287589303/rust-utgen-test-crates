{
  "name": "idna::domain_to_ascii_cow",
  "mod_info": {
    "name": "",
    "loc": "idna/src/lib.rs:9:1:171:2"
  },
  "visible": true,
  "loc": "idna/src/lib.rs:105:1:115:2",
  "doc": "/// The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm;\n/// version returning a `Cow`.\n///\n/// Most applications should be using this function rather than the sibling functions,\n/// and most applications should pass [`AsciiDenyList::URL`] as the second argument.\n/// Passing [`AsciiDenyList::URL`] as the second argument makes this function also\n/// perform the [forbidden domain code point](https://url.spec.whatwg.org/#forbidden-domain-code-point)\n/// check in addition to the [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii)\n/// algorithm.\n///\n/// Returns the ASCII representation a domain name,\n/// normalizing characters (upper-case to lower-case and other kinds of equivalence)\n/// and using Punycode as necessary.\n///\n/// This process may fail.\n///\n/// If you have a `&str` instead of `&[u8]`, just call `.to_bytes()` on it before\n/// passing it to this function. It's still preferable to use this function over\n/// the sibling functions that take `&str`.\n",
  "code": [
    "pub fn domain_to_ascii_cow(",
    "    domain: &[u8],",
    "    ascii_deny_list: AsciiDenyList,",
    ") -> Result<Cow<'_, str>, Errors> {",
    "    Uts46::new().to_ascii(",
    "        domain,",
    "        ascii_deny_list,",
    "        uts46::Hyphens::Allow,",
    "        uts46::DnsLength::Ignore,",
    "    )",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}