{
  "name": "idna::punycode::{impl#5}::next",
  "mod_info": {
    "name": "punycode",
    "loc": "idna/src/lib.rs:57:1:57:18"
  },
  "visible": true,
  "loc": "idna/src/punycode.rs:283:5:304:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Self::Item> {",
    "    loop {",
    "        match self.insertions.get(self.inserted) {",
    "            Some((pos, c)) if *pos == self.position => {",
    "                self.inserted += 1;",
    "                self.position += 1;",
    "                return Some(*c);",
    "            }",
    "            _ => {}",
    "        }",
    "        if let Some(c) = self.base.next() {",
    "            self.position += 1;",
    "            return Some(if C::EXTERNAL_CALLER {",
    "                c.char()",
    "            } else {",
    "                c.char_ascii_lower_case()",
    "            });",
    "        } else if self.inserted >= self.insertions.len() {",
    "            return None;",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 12,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches _",
          "norm": null,
          "value": "true",
          "line": 291,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "self.inserted >= self.insertions.len()",
          "norm": null,
          "value": "true",
          "line": 300,
          "bound": "self.inserted == self.insertions.len()"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        11,
        20,
        21,
        22,
        24,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches _",
          "norm": null,
          "value": "true",
          "line": 291,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "self.inserted >= self.insertions.len()",
          "norm": null,
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "*pos == self.position",
          "norm": null,
          "value": "true",
          "line": 286,
          "bound": null
        }
      ],
      "ret": "Some(*c)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        11,
        20,
        21,
        23,
        1,
        2,
        3,
        5,
        6,
        7,
        9,
        10,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches _",
          "norm": null,
          "value": "true",
          "line": 291,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "self.inserted >= self.insertions.len()",
          "norm": null,
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "*pos == self.position",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 295,
          "bound": null
        }
      ],
      "ret": "Some(if C::EXTERNAL_CALLER {\n                    c.char()\n                } else {\n                    c.char_ascii_lower_case()\n                })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        11,
        20,
        21,
        23,
        1,
        2,
        3,
        5,
        6,
        8,
        4,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        24,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches _",
          "norm": null,
          "value": "true",
          "line": 291,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "self.inserted >= self.insertions.len()",
          "norm": null,
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "*pos == self.position",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 295,
          "bound": null
        }
      ],
      "ret": "Some(if C::EXTERNAL_CALLER {\n                    c.char()\n                } else {\n                    c.char_ascii_lower_case()\n                })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        11,
        20,
        21,
        23,
        1,
        2,
        3,
        5,
        6,
        8,
        4,
        11,
        12,
        13,
        14,
        17,
        18,
        19,
        24,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches _",
          "norm": null,
          "value": "true",
          "line": 291,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 295,
          "bound": null
        }
      ],
      "ret": "Some(if C::EXTERNAL_CALLER {\n                    c.char()\n                } else {\n                    c.char_ascii_lower_case()\n                })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        24,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches _",
          "norm": null,
          "value": "true",
          "line": 291,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 295,
          "bound": null
        }
      ],
      "ret": "Some(if C::EXTERNAL_CALLER {\n                    c.char()\n                } else {\n                    c.char_ascii_lower_case()\n                })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        11,
        12,
        13,
        14,
        17,
        18,
        19,
        24,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "*pos == self.position",
          "norm": null,
          "value": "true",
          "line": 286,
          "bound": null
        }
      ],
      "ret": "Some(*c)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        9,
        10,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "*pos == self.position",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "self.inserted >= self.insertions.len()",
          "norm": null,
          "value": "true",
          "line": 300,
          "bound": "self.inserted == self.insertions.len()"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        8,
        4,
        11,
        20,
        21,
        22,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "*pos == self.position",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "self.inserted >= self.insertions.len()",
          "norm": null,
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches _",
          "norm": null,
          "value": "true",
          "line": 291,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 295,
          "bound": null
        }
      ],
      "ret": "Some(if C::EXTERNAL_CALLER {\n                    c.char()\n                } else {\n                    c.char_ascii_lower_case()\n                })",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        8,
        4,
        11,
        20,
        21,
        23,
        1,
        2,
        3,
        4,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        24,
        25
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "*pos == self.position",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "self.inserted >= self.insertions.len()",
          "norm": null,
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches _",
          "norm": null,
          "value": "true",
          "line": 291,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 295,
          "bound": null
        }
      ],
      "ret": "Some(if C::EXTERNAL_CALLER {\n                    c.char()\n                } else {\n                    c.char_ascii_lower_case()\n                })",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        8,
        4,
        11,
        20,
        21,
        23,
        1,
        2,
        3,
        4,
        11,
        12,
        13,
        14,
        17,
        18,
        19,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "*pos == self.position",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 295,
          "bound": null
        }
      ],
      "ret": "Some(if C::EXTERNAL_CALLER {\n                    c.char()\n                } else {\n                    c.char_ascii_lower_case()\n                })",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        8,
        4,
        11,
        12,
        13,
        14,
        15,
        16,
        19,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "self.insertions.get(self.inserted) matches Some((pos, c))",
          "norm": null,
          "value": "true",
          "line": 285,
          "bound": null
        },
        {
          "cond": "*pos == self.position",
          "norm": null,
          "value": "false",
          "line": 286,
          "bound": null
        },
        {
          "cond": "let Some(c) = self.base.next()",
          "norm": null,
          "value": "true",
          "line": 293,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 295,
          "bound": null
        }
      ],
      "ret": "Some(if C::EXTERNAL_CALLER {\n                    c.char()\n                } else {\n                    c.char_ascii_lower_case()\n                })",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        8,
        4,
        11,
        12,
        13,
        14,
        17,
        18,
        19,
        24,
        25
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}