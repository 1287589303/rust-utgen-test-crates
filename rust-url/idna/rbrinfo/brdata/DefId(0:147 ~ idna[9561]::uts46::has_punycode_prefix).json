{
  "name": "idna::uts46::has_punycode_prefix",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:118:1:130:2",
  "doc": "",
  "code": [
    "fn has_punycode_prefix(slice: &[u8]) -> bool {",
    "    if slice.len() < 4 {",
    "        return false;",
    "    }",
    "    // Sadly, the optimizer doesn't figure out that more idiomatic code",
    "    // should compile to masking on 32-bit value.",
    "    let a = slice[0];",
    "    let b = slice[1];",
    "    let c = slice[2];",
    "    let d = slice[3];",
    "    let u = (u32::from(d) << 24) | (u32::from(c) << 16) | (u32::from(b) << 8) | u32::from(a);",
    "    (u & PUNYCODE_PREFIX_MASK) == PUNYCODE_PREFIX",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "slice.len() < 4",
          "norm": "4 > slice.len()",
          "value": "true",
          "line": 119,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "slice.len() < 4",
          "norm": "4 > slice.len()",
          "value": "false",
          "line": 119,
          "bound": "slice.len() == 4"
        }
      ],
      "ret": "(u & PUNYCODE_PREFIX_MASK) == PUNYCODE_PREFIX",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}