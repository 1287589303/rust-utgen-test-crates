{
  "name": "idna::uts46::split_ascii_fast_path_prefix",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:186:1:202:2",
  "doc": "",
  "code": [
    "fn split_ascii_fast_path_prefix(label: &[u8]) -> (&[u8], &[u8]) {",
    "    if let Some(pos) = label.iter().position(|b| !b.is_ascii()) {",
    "        if pos == 0 {",
    "            // First is non-ASCII",
    "            (&[], label)",
    "        } else {",
    "            // Leave one ASCII character in the suffix",
    "            // in case it's a letter that a combining",
    "            // character combines with.",
    "            let (head, tail) = label.split_at(pos - 1);",
    "            (head, tail)",
    "        }",
    "    } else {",
    "        // All ASCII",
    "        (label, &[])",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(pos) = label.iter().position(|b| !b.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "(label, &[])",
      "path": [
        0,
        1,
        2,
        10,
        11
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(pos) = label.iter().position(|b| !b.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "pos == 0",
          "norm": "0 == pos",
          "value": "false",
          "line": 188,
          "bound": null
        }
      ],
      "ret": "(&[], label)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        9,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(pos) = label.iter().position(|b| !b.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "pos == 0",
          "norm": "0 == pos",
          "value": "true",
          "line": 188,
          "bound": null
        }
      ],
      "ret": "(head, tail)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}