{
  "name": "idna::punycode::decode",
  "mod_info": {
    "name": "punycode",
    "loc": "idna/src/lib.rs:57:1:57:18"
  },
  "visible": true,
  "loc": "idna/src/punycode.rs:62:1:69:2",
  "doc": "/// Convert Punycode to Unicode.\n///\n/// Return None on malformed input or overflow.\n/// Overflow can only happen on inputs that take more than\n/// 63 encoded bytes, the DNS limit on domain name labels.\n",
  "code": [
    "pub fn decode(input: &str) -> Option<Vec<char>> {",
    "    Some(",
    "        Decoder::default()",
    "            .decode::<u8, ExternalCaller>(input.as_bytes())",
    "            .ok()?",
    "            .collect(),",
    "    )",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "Decoder::default()\n            .decode::<u8, ExternalCaller>(input.as_bytes())\n            .ok()?",
          "norm": null,
          "value": "Err/None",
          "line": 64,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "Decoder::default()\n            .decode::<u8, ExternalCaller>(input.as_bytes())\n            .ok()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 64,
          "bound": null
        }
      ],
      "ret": "Some(\n        Decoder::default()\n            .decode::<u8, ExternalCaller>(input.as_bytes())\n            .ok()?\n            .collect(),\n    )",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}