{
  "name": "idna::uts46::{impl#4}::process_inner",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:1031:5:1067:6",
  "doc": "/// The part of `process` that doesn't need to be generic over the sink.\n",
  "code": [
    "fn process_inner<'a>(",
    "    &self,",
    "    domain_name: &'a [u8],",
    "    ascii_deny_list: AsciiDenyList,",
    "    hyphens: Hyphens,",
    "    fail_fast: bool,",
    "    domain_buffer: &mut SmallVec<[char; 253]>,",
    "    already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,",
    ") -> (usize, bool, bool) {",
    "    // Sadly, this even faster-path ASCII tier is needed to avoid regressing",
    "    // performance.",
    "    let mut iter = domain_name.iter();",
    "    let mut most_recent_label_start = iter.clone();",
    "    loop {",
    "        if let Some(&b) = iter.next() {",
    "            if in_inclusive_range8(b, b'a', b'z') {",
    "                continue;",
    "            }",
    "            if b == b'.' {",
    "                most_recent_label_start = iter.clone();",
    "                continue;",
    "            }",
    "            return self.process_innermost(",
    "                domain_name,",
    "                ascii_deny_list,",
    "                hyphens,",
    "                fail_fast,",
    "                domain_buffer,",
    "                already_punycode,",
    "                most_recent_label_start.as_slice(),",
    "            );",
    "        } else {",
    "            // Success! The whole input passes through on the fastest path!",
    "            return (domain_name.len(), false, false);",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(&b) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 1045,
          "bound": null
        }
      ],
      "ret": "(domain_name.len(), false, false)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        16,
        17,
        19
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(&b) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 1045,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 1046,
          "bound": null
        },
        {
          "cond": "let Some(&b) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 1045,
          "bound": null
        }
      ],
      "ret": "(domain_name.len(), false, false)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        18,
        3,
        4,
        5,
        16,
        17,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(&b) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 1045,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 1046,
          "bound": null
        },
        {
          "cond": "b == b'.'",
          "norm": null,
          "value": "false",
          "line": 1049,
          "bound": null
        },
        {
          "cond": "let Some(&b) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 1045,
          "bound": null
        }
      ],
      "ret": "(domain_name.len(), false, false)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        11,
        13,
        18,
        3,
        4,
        5,
        16,
        17,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(&b) = iter.next()",
          "norm": null,
          "value": "true",
          "line": 1045,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 1046,
          "bound": null
        },
        {
          "cond": "b == b'.'",
          "norm": null,
          "value": "true",
          "line": 1049,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        14,
        15,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}