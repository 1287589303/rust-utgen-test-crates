{
  "name": "idna::punycode::encode",
  "mod_info": {
    "name": "punycode",
    "loc": "idna/src/lib.rs:57:1:57:18"
  },
  "visible": true,
  "loc": "idna/src/punycode.rs:336:1:344:2",
  "doc": "/// Convert Unicode to Punycode.\n///\n/// Return None on overflow, which can only happen on inputs that would take more than\n/// 63 encoded bytes, the DNS limit on domain name labels.\n",
  "code": [
    "pub fn encode(input: &[char]) -> Option<String> {",
    "    if input.len() > u32::MAX as usize {",
    "        return None;",
    "    }",
    "    let mut buf = String::with_capacity(input.len());",
    "    encode_into::<_, _, ExternalCaller>(input.iter().copied(), &mut buf)",
    "        .ok()",
    "        .map(|()| buf)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.len() > u32::MAX as usize",
          "norm": null,
          "value": "true",
          "line": 337,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.len() > u32::MAX as usize",
          "norm": null,
          "value": "false",
          "line": 337,
          "bound": "input.len() == u32::MAX as usize"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}