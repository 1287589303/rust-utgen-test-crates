{
  "name": "idna::punycode::{impl#4}::decode",
  "mod_info": {
    "name": "punycode",
    "loc": "idna/src/lib.rs:57:1:57:18"
  },
  "visible": true,
  "loc": "idna/src/punycode.rs:166:5:264:6",
  "doc": "/// Split the input iterator and return a Vec with insertions of encoded characters\n",
  "code": [
    "pub(crate) fn decode<'a, T: PunycodeCodeUnit + Copy, C: PunycodeCaller>(",
    "    &'a mut self,",
    "    input: &'a [T],",
    ") -> Result<Decode<'a, T, C>, ()> {",
    "    self.insertions.clear();",
    "    // Handle \"basic\" (ASCII) code points.",
    "    // They are encoded as-is before the last delimiter, if any.",
    "    let (base, input) = if let Some(position) = input.iter().rposition(|c| c.is_delimiter()) {",
    "        (",
    "            &input[..position],",
    "            if position > 0 {",
    "                &input[position + 1..]",
    "            } else {",
    "                input",
    "            },",
    "        )",
    "    } else {",
    "        (&input[..0], input)",
    "    };",
    "",
    "    if C::EXTERNAL_CALLER && !base.iter().all(|c| c.is_ascii()) {",
    "        return Err(());",
    "    }",
    "",
    "    let base_len = base.len();",
    "    let mut length = base_len as u32;",
    "    let mut code_point = INITIAL_N;",
    "    let mut bias = INITIAL_BIAS;",
    "    let mut i = 0u32;",
    "    let mut iter = input.iter();",
    "    loop {",
    "        let previous_i = i;",
    "        let mut weight = 1;",
    "        let mut k = BASE;",
    "        let mut byte = match iter.next() {",
    "            None => break,",
    "            Some(byte) => byte,",
    "        };",
    "",
    "        // Decode a generalized variable-length integer into delta,",
    "        // which gets added to i.",
    "        loop {",
    "            let digit = if let Some(digit) = byte.digit() {",
    "                digit",
    "            } else {",
    "                return Err(());",
    "            };",
    "            let product = digit.checked_mul(weight).ok_or(())?;",
    "            i = i.checked_add(product).ok_or(())?;",
    "            let t = if k <= bias {",
    "                T_MIN",
    "            } else if k >= bias + T_MAX {",
    "                T_MAX",
    "            } else {",
    "                k - bias",
    "            };",
    "            if digit < t {",
    "                break;",
    "            }",
    "            weight = weight.checked_mul(BASE - t).ok_or(())?;",
    "            k += BASE;",
    "            byte = match iter.next() {",
    "                None => return Err(()), // End of input before the end of this delta",
    "                Some(byte) => byte,",
    "            };",
    "        }",
    "",
    "        bias = adapt(i - previous_i, length + 1, previous_i == 0);",
    "",
    "        // i was supposed to wrap around from length+1 to 0,",
    "        // incrementing code_point each time.",
    "        code_point = code_point.checked_add(i / (length + 1)).ok_or(())?;",
    "        i %= length + 1;",
    "        let c = match char::from_u32(code_point) {",
    "            Some(c) => c,",
    "            None => return Err(()),",
    "        };",
    "",
    "        // Move earlier insertions farther out in the string",
    "        for (idx, _) in &mut self.insertions {",
    "            if *idx >= i as usize {",
    "                *idx += 1;",
    "            }",
    "        }",
    "        self.insertions.push((i as usize, c));",
    "        length += 1;",
    "        i += 1;",
    "    }",
    "",
    "    self.insertions.sort_by_key(|(i, _)| *i);",
    "    Ok(Decode {",
    "        base: base.iter(),",
    "        insertions: &self.insertions,",
    "        inserted: 0,",
    "        position: 0,",
    "        len: base_len + self.insertions.len(),",
    "        phantom: PhantomData::<C>,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 171,
    "contra": 36,
    "min_set": 11
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 213,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        40,
        42,
        43,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 214,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        48,
        50,
        51,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 213,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        40,
        42,
        43,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 214,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        48,
        50,
        51,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        12,
        13,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 213,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        40,
        42,
        43,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 214,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        48,
        50,
        51,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        15,
        16,
        17,
        19,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 213,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        40,
        42,
        43,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 214,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        48,
        50,
        51,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 94,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 95,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 96,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 97,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 98,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 99,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 100,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 101,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 102,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 103,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 104,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 105,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 106,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 107,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 108,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 109,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 110,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 111,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 112,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 113,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 114,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "true",
          "line": 176,
          "bound": null
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 115,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 116,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 213,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        40,
        42,
        43,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 117,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 214,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        48,
        50,
        51,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 118,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 119,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 120,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 121,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 122,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 123,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 124,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 125,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 126,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 127,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 128,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 129,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 130,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 131,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 132,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 133,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 134,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 135,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 136,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 137,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 138,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 139,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 140,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 141,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 142,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 143,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "base.iter().all(|c| c.is_ascii())",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        15,
        16,
        17,
        19,
        122,
        123
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 144,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 145,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 213,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        40,
        42,
        43,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 146,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 214,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        48,
        50,
        51,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 147,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 148,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 149,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 150,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 151,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 152,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 153,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 154,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "true",
          "line": 215,
          "bound": "k == bias"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        52,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 155,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 156,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 157,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 158,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 159,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 160,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 161,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 162,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "true",
          "line": 217,
          "bound": "k == bias + T_MAX"
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        55,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 163,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 237,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        86,
        88,
        89,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 164,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "true",
          "line": 246,
          "bound": "*idx == i as usize"
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        105,
        106,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 165,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "true",
          "line": 245,
          "bound": null
        },
        {
          "cond": "*idx >= i as usize",
          "norm": null,
          "value": "false",
          "line": 246,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        103,
        107,
        108,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 166,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches Some(c)",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        },
        {
          "cond": "(idx, _) in &mut self.insertions",
          "norm": null,
          "value": "false",
          "line": 245,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        94,
        96,
        97,
        98,
        99,
        100,
        102,
        104,
        109,
        110,
        111,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 167,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "true",
          "line": 222,
          "bound": null
        },
        {
          "cond": "code_point.checked_add(i / (length + 1)).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 237,
          "bound": null
        },
        {
          "cond": "char::from_u32(code_point) matches None",
          "norm": null,
          "value": "true",
          "line": 239,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        60,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        87,
        90,
        91,
        92,
        95,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 168,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 225,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        67,
        69,
        70,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 169,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        75,
        30,
        31,
        32,
        35,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 170,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches Some(byte)",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "let Some(digit) = byte.digit()",
          "norm": null,
          "value": "true",
          "line": 208,
          "bound": null
        },
        {
          "cond": "digit.checked_mul(weight).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 213,
          "bound": null
        },
        {
          "cond": "i.checked_add(product).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 214,
          "bound": null
        },
        {
          "cond": "k <= bias",
          "norm": "bias >= k",
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "k >= bias + T_MAX",
          "norm": "bias + T_MAX <= k",
          "value": "false",
          "line": 217,
          "bound": null
        },
        {
          "cond": "digit < t",
          "norm": null,
          "value": "false",
          "line": 222,
          "bound": "digit == t"
        },
        {
          "cond": "weight.checked_mul(BASE - t).ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 225,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        28,
        30,
        31,
        32,
        33,
        34,
        36,
        37,
        38,
        41,
        44,
        45,
        46,
        49,
        53,
        54,
        56,
        57,
        58,
        59,
        61,
        62,
        63,
        64,
        65,
        68,
        71,
        72,
        74,
        76,
        118,
        119,
        120,
        121,
        122,
        123
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 171,
      "conds": [
        {
          "cond": "let Some(position) = input.iter().rposition(|c| c.is_delimiter())",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "position > 0",
          "norm": "0 < position",
          "value": "false",
          "line": 176,
          "bound": "position == 0"
        },
        {
          "cond": "C::EXTERNAL_CALLER",
          "norm": null,
          "value": "false",
          "line": 186,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        },
        {
          "cond": "iter.next() matches None",
          "norm": null,
          "value": "true",
          "line": 200,
          "bound": null
        }
      ],
      "ret": "Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        10,
        11,
        14,
        20,
        21,
        22,
        23,
        24,
        25,
        27,
        29,
        112,
        113,
        114,
        115,
        116,
        117,
        123
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}