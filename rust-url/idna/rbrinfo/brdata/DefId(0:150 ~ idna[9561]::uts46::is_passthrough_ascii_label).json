{
  "name": "idna::uts46::is_passthrough_ascii_label",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:143:1:183:2",
  "doc": "",
  "code": [
    "fn is_passthrough_ascii_label(label: &[u8]) -> bool {",
    "    // XXX if we aren't performing _CheckHyphens_, this could",
    "    // check for \"xn--\" and pass through YouTube CDN node names.",
    "    if label.len() >= 4 && label[2] == b'-' && label[3] == b'-' {",
    "        return false;",
    "    }",
    "    if let Some((&first, tail)) = label.split_first() {",
    "        // We need to check the first and last character",
    "        // more strictly in case this turns out to be a",
    "        // label in a bidi domain name. This has the side",
    "        // effect that this function only accepts labels",
    "        // that also conform to the STD3 rules.",
    "        //",
    "        // XXX: If we are in the fail-fast mode (i.e. we don't need",
    "        // to be able to overwrite anything with U+FFFD), we could",
    "        // merely record that we've seen a digit here and error out",
    "        // if we later discover that the domain name is a bidi",
    "        // domain name.",
    "        if !in_inclusive_range8(first, b'a', b'z') {",
    "            return false;",
    "        }",
    "        for &b in tail {",
    "            // If we used LDH_MASK, we'd have to check",
    "            // the bytes for the ASCII range anyhow.",
    "            if in_inclusive_range8(b, b'a', b'z') {",
    "                continue;",
    "            }",
    "            if in_inclusive_range8(b, b'0', b'9') {",
    "                continue;",
    "            }",
    "            if b == b'-' {",
    "                continue;",
    "            }",
    "            return false;",
    "        }",
    "        label.last() != Some(&b'-')",
    "    } else {",
    "        // empty",
    "        true",
    "    }",
    "}"
  ],
  "size": {
    "chain": 22,
    "contra": 9,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "label[3] == b'-'",
          "norm": "b'-' == label[3]",
          "value": "false",
          "line": 146,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        39
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "label[3] == b'-'",
          "norm": "b'-' == label[3]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        10,
        11,
        36,
        37,
        39
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "label[3] == b'-'",
          "norm": "b'-' == label[3]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 167,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        26,
        33,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "label[3] == b'-'",
          "norm": "b'-' == label[3]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'0', b'9')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        27,
        28,
        29,
        33,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "label[3] == b'-'",
          "norm": "b'-' == label[3]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'0', b'9')",
          "norm": null,
          "value": "false",
          "line": 170,
          "bound": null
        },
        {
          "cond": "b == b'-'",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        27,
        28,
        30,
        31,
        33,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "label[3] == b'-'",
          "norm": "b'-' == label[3]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'0', b'9')",
          "norm": null,
          "value": "false",
          "line": 170,
          "bound": null
        },
        {
          "cond": "b == b'-'",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        27,
        28,
        30,
        32,
        38,
        39
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "label[3] == b'-'",
          "norm": "b'-' == label[3]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "label[3] == b'-'",
          "norm": "b'-' == label[3]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 161,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        10,
        11,
        12,
        13,
        14,
        16,
        38,
        39
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        2,
        3,
        8,
        10,
        11,
        36,
        37,
        39
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 167,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        26,
        33,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'0', b'9')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        27,
        28,
        29,
        33,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'0', b'9')",
          "norm": null,
          "value": "false",
          "line": 170,
          "bound": null
        },
        {
          "cond": "b == b'-'",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        27,
        28,
        30,
        31,
        33,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'0', b'9')",
          "norm": null,
          "value": "false",
          "line": 170,
          "bound": null
        },
        {
          "cond": "b == b'-'",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        27,
        28,
        30,
        32,
        38,
        39
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "true",
          "line": 146,
          "bound": "label.len() == 4"
        },
        {
          "cond": "label[2] == b'-'",
          "norm": "b'-' == label[2]",
          "value": "true",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 161,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        2,
        3,
        8,
        10,
        11,
        12,
        13,
        14,
        16,
        38,
        39
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        9,
        10,
        11,
        36,
        37,
        39
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 167,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        26,
        33,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'0', b'9')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        27,
        28,
        29,
        33,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'0', b'9')",
          "norm": null,
          "value": "false",
          "line": 170,
          "bound": null
        },
        {
          "cond": "b == b'-'",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        27,
        28,
        30,
        31,
        33,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 167,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(b, b'0', b'9')",
          "norm": null,
          "value": "false",
          "line": 170,
          "bound": null
        },
        {
          "cond": "b == b'-'",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        25,
        27,
        28,
        30,
        32,
        38,
        39
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "&b in tail",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        18,
        19,
        20,
        22,
        24,
        34,
        35,
        37,
        39
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "label.len() >= 4",
          "norm": "4 <= label.len()",
          "value": "false",
          "line": 146,
          "bound": null
        },
        {
          "cond": "let Some((&first, tail)) = label.split_first()",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "in_inclusive_range8(first, b'a', b'z')",
          "norm": null,
          "value": "false",
          "line": 161,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        38,
        39
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}