bb0
  0: StorageLive(_4)
    SourceInfo(idna/src/punycode.rs:32:14-32:47)
  1: StorageLive(_5)
    SourceInfo(idna/src/punycode.rs:32:17-32:27)
  2: _5 = _3
    SourceInfo(idna/src/punycode.rs:32:17-32:27)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:32:17-32:27)
      kind: switchInt(move _5) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _4 = const punycode::DAMP
    SourceInfo(idna/src/punycode.rs:32:30-32:34)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:32:14-32:47)
      kind: goto -> bb3
  }
  preds [bb0]
  succs [bb3]

bb2
  0: _4 = const 2_u32
    SourceInfo(idna/src/punycode.rs:32:44-32:45)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:32:14-32:47)
      kind: goto -> bb3
  }
  preds [bb0]
  succs [bb3]

bb3
  0: StorageDead(_5)
    SourceInfo(idna/src/punycode.rs:32:46-32:47)
  1: _6 = Eq(_4, const 0_u32)
    SourceInfo(idna/src/punycode.rs:32:5-32:47)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:32:5-32:47)
      kind: assert(!move _6, "attempt to divide `{}` by zero", _1) -> [success: bb4, unwind: bb23]
  }
  preds [bb1, bb2]
  succs [bb4, bb23]

bb4
  0: _1 = Div(_1, move _4)
    SourceInfo(idna/src/punycode.rs:32:5-32:47)
  1: StorageDead(_4)
    SourceInfo(idna/src/punycode.rs:32:46-32:47)
  2: StorageLive(_7)
    SourceInfo(idna/src/punycode.rs:33:14-33:32)
  3: StorageLive(_8)
    SourceInfo(idna/src/punycode.rs:33:14-33:19)
  4: _8 = _1
    SourceInfo(idna/src/punycode.rs:33:14-33:19)
  5: StorageLive(_9)
    SourceInfo(idna/src/punycode.rs:33:22-33:32)
  6: _9 = _2
    SourceInfo(idna/src/punycode.rs:33:22-33:32)
  7: _10 = Eq(_9, const 0_u32)
    SourceInfo(idna/src/punycode.rs:33:14-33:32)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:33:14-33:32)
      kind: assert(!move _10, "attempt to divide `{}` by zero", _8) -> [success: bb5, unwind: bb23]
  }
  preds [bb3]
  succs [bb5, bb23]

bb5
  0: _7 = Div(move _8, move _9)
    SourceInfo(idna/src/punycode.rs:33:14-33:32)
  1: StorageDead(_9)
    SourceInfo(idna/src/punycode.rs:33:31-33:32)
  2: StorageDead(_8)
    SourceInfo(idna/src/punycode.rs:33:31-33:32)
  3: _11 = AddWithOverflow(_1, _7)
    SourceInfo(idna/src/punycode.rs:33:5-33:32)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:33:5-33:32)
      kind: assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, move _7) -> [success: bb6, unwind: bb23]
  }
  preds [bb4]
  succs [bb6, bb23]

bb6
  0: _1 = move (_11.0: u32)
    SourceInfo(idna/src/punycode.rs:33:5-33:32)
  1: StorageDead(_7)
    SourceInfo(idna/src/punycode.rs:33:31-33:32)
  2: StorageLive(_12)
    SourceInfo(idna/src/punycode.rs:34:9-34:14)
  3: _12 = const 0_u32
    SourceInfo(idna/src/punycode.rs:34:17-34:18)
  4: FakeRead(ForLet(None), _12)
    SourceInfo(idna/src/punycode.rs:34:9-34:14)
  5: StorageLive(_13)
    SourceInfo(idna/src/punycode.rs:35:5-38:6)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:35:5-38:6)
      kind: goto -> bb7
  }
  preds [bb5]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:35:5-38:6)
      kind: falseUnwind -> [real: bb8, unwind: bb23]
  }
  preds [bb6, bb15]
  succs [bb8, bb23]

bb8
  0: StorageLive(_15)
    SourceInfo(idna/src/punycode.rs:35:11-35:47)
  1: StorageLive(_16)
    SourceInfo(idna/src/punycode.rs:35:11-35:16)
  2: _16 = _1
    SourceInfo(idna/src/punycode.rs:35:11-35:16)
  3: StorageLive(_17)
    SourceInfo(idna/src/punycode.rs:35:19-35:47)
  4: StorageLive(_18)
    SourceInfo(idna/src/punycode.rs:35:19-35:43)
  5: StorageLive(_19)
    SourceInfo(idna/src/punycode.rs:35:20-35:34)
  6: _20 = SubWithOverflow(const punycode::BASE, const punycode::T_MIN)
    SourceInfo(idna/src/punycode.rs:35:20-35:34)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:35:20-35:34)
      kind: assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", const punycode::BASE, const punycode::T_MIN) -> [success: bb9, unwind: bb23]
  }
  preds [bb7]
  succs [bb9, bb23]

bb9
  0: _19 = move (_20.0: u32)
    SourceInfo(idna/src/punycode.rs:35:20-35:34)
  1: _21 = MulWithOverflow(_19, const punycode::T_MAX)
    SourceInfo(idna/src/punycode.rs:35:19-35:43)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:35:19-35:43)
      kind: assert(!move (_21.1: bool), "attempt to compute `{} * {}`, which would overflow", move _19, const punycode::T_MAX) -> [success: bb10, unwind: bb23]
  }
  preds [bb8]
  succs [bb10, bb23]

bb10
  0: _18 = move (_21.0: u32)
    SourceInfo(idna/src/punycode.rs:35:19-35:43)
  1: StorageDead(_19)
    SourceInfo(idna/src/punycode.rs:35:42-35:43)
  2: _22 = Eq(const 2_u32, const 0_u32)
    SourceInfo(idna/src/punycode.rs:35:19-35:47)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:35:19-35:47)
      kind: assert(!move _22, "attempt to divide `{}` by zero", _18) -> [success: bb11, unwind: bb23]
  }
  preds [bb9]
  succs [bb11, bb23]

bb11
  0: _17 = Div(move _18, const 2_u32)
    SourceInfo(idna/src/punycode.rs:35:19-35:47)
  1: StorageDead(_18)
    SourceInfo(idna/src/punycode.rs:35:46-35:47)
  2: _15 = Gt(move _16, move _17)
    SourceInfo(idna/src/punycode.rs:35:11-35:47)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:35:11-35:47)
      kind: switchInt(move _15) -> [0: bb16, otherwise: bb12]
  }
  preds [bb10]
  succs [bb12, bb16]

bb12
  0: StorageDead(_17)
    SourceInfo(idna/src/punycode.rs:35:46-35:47)
  1: StorageDead(_16)
    SourceInfo(idna/src/punycode.rs:35:46-35:47)
  2: StorageLive(_23)
    SourceInfo(idna/src/punycode.rs:36:18-36:30)
  3: _24 = SubWithOverflow(const punycode::BASE, const punycode::T_MIN)
    SourceInfo(idna/src/punycode.rs:36:18-36:30)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:36:18-36:30)
      kind: assert(!move (_24.1: bool), "attempt to compute `{} - {}`, which would overflow", const punycode::BASE, const punycode::T_MIN) -> [success: bb13, unwind: bb23]
  }
  preds [bb11]
  succs [bb13, bb23]

bb13
  0: _23 = move (_24.0: u32)
    SourceInfo(idna/src/punycode.rs:36:18-36:30)
  1: _25 = Eq(_23, const 0_u32)
    SourceInfo(idna/src/punycode.rs:36:9-36:30)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:36:9-36:30)
      kind: assert(!move _25, "attempt to divide `{}` by zero", _1) -> [success: bb14, unwind: bb23]
  }
  preds [bb12]
  succs [bb14, bb23]

bb14
  0: _1 = Div(_1, move _23)
    SourceInfo(idna/src/punycode.rs:36:9-36:30)
  1: StorageDead(_23)
    SourceInfo(idna/src/punycode.rs:36:29-36:30)
  2: _26 = AddWithOverflow(_12, const punycode::BASE)
    SourceInfo(idna/src/punycode.rs:37:9-37:18)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:37:9-37:18)
      kind: assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, const punycode::BASE) -> [success: bb15, unwind: bb23]
  }
  preds [bb13]
  succs [bb15, bb23]

bb15
  0: _12 = move (_26.0: u32)
    SourceInfo(idna/src/punycode.rs:37:9-37:18)
  1: _14 = const ()
    SourceInfo(idna/src/punycode.rs:35:48-38:6)
  2: StorageDead(_15)
    SourceInfo(idna/src/punycode.rs:38:5-38:6)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:35:5-38:6)
      kind: goto -> bb7
  }
  preds [bb14]
  succs [bb7]

bb16
  0: StorageDead(_17)
    SourceInfo(idna/src/punycode.rs:35:46-35:47)
  1: StorageDead(_16)
    SourceInfo(idna/src/punycode.rs:35:46-35:47)
  2: StorageLive(_28)
    SourceInfo(idna/src/punycode.rs:35:5-38:6)
  3: _13 = const ()
    SourceInfo(idna/src/punycode.rs:35:5-38:6)
  4: StorageDead(_28)
    SourceInfo(idna/src/punycode.rs:38:5-38:6)
  5: StorageDead(_15)
    SourceInfo(idna/src/punycode.rs:38:5-38:6)
  6: StorageDead(_13)
    SourceInfo(idna/src/punycode.rs:38:5-38:6)
  7: StorageLive(_30)
    SourceInfo(idna/src/punycode.rs:39:5-39:6)
  8: _30 = _12
    SourceInfo(idna/src/punycode.rs:39:5-39:6)
  9: StorageLive(_31)
    SourceInfo(idna/src/punycode.rs:39:9-39:56)
  10: StorageLive(_32)
    SourceInfo(idna/src/punycode.rs:39:10-39:38)
  11: StorageLive(_33)
    SourceInfo(idna/src/punycode.rs:39:11-39:29)
  12: StorageLive(_34)
    SourceInfo(idna/src/punycode.rs:39:12-39:24)
  13: _35 = SubWithOverflow(const punycode::BASE, const punycode::T_MIN)
    SourceInfo(idna/src/punycode.rs:39:12-39:24)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:39:12-39:24)
      kind: assert(!move (_35.1: bool), "attempt to compute `{} - {}`, which would overflow", const punycode::BASE, const punycode::T_MIN) -> [success: bb17, unwind: bb23]
  }
  preds [bb11]
  succs [bb17, bb23]

bb17
  0: _34 = move (_35.0: u32)
    SourceInfo(idna/src/punycode.rs:39:12-39:24)
  1: _36 = AddWithOverflow(_34, const 1_u32)
    SourceInfo(idna/src/punycode.rs:39:11-39:29)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:39:11-39:29)
      kind: assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", move _34, const 1_u32) -> [success: bb18, unwind: bb23]
  }
  preds [bb16]
  succs [bb18, bb23]

bb18
  0: _33 = move (_36.0: u32)
    SourceInfo(idna/src/punycode.rs:39:11-39:29)
  1: StorageDead(_34)
    SourceInfo(idna/src/punycode.rs:39:28-39:29)
  2: StorageLive(_37)
    SourceInfo(idna/src/punycode.rs:39:32-39:37)
  3: _37 = _1
    SourceInfo(idna/src/punycode.rs:39:32-39:37)
  4: _38 = MulWithOverflow(_33, _37)
    SourceInfo(idna/src/punycode.rs:39:10-39:38)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:39:10-39:38)
      kind: assert(!move (_38.1: bool), "attempt to compute `{} * {}`, which would overflow", move _33, move _37) -> [success: bb19, unwind: bb23]
  }
  preds [bb17]
  succs [bb19, bb23]

bb19
  0: _32 = move (_38.0: u32)
    SourceInfo(idna/src/punycode.rs:39:10-39:38)
  1: StorageDead(_37)
    SourceInfo(idna/src/punycode.rs:39:37-39:38)
  2: StorageDead(_33)
    SourceInfo(idna/src/punycode.rs:39:37-39:38)
  3: StorageLive(_39)
    SourceInfo(idna/src/punycode.rs:39:41-39:55)
  4: StorageLive(_40)
    SourceInfo(idna/src/punycode.rs:39:42-39:47)
  5: _40 = _1
    SourceInfo(idna/src/punycode.rs:39:42-39:47)
  6: _41 = AddWithOverflow(_40, const punycode::SKEW)
    SourceInfo(idna/src/punycode.rs:39:41-39:55)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:39:41-39:55)
      kind: assert(!move (_41.1: bool), "attempt to compute `{} + {}`, which would overflow", move _40, const punycode::SKEW) -> [success: bb20, unwind: bb23]
  }
  preds [bb18]
  succs [bb20, bb23]

bb20
  0: _39 = move (_41.0: u32)
    SourceInfo(idna/src/punycode.rs:39:41-39:55)
  1: StorageDead(_40)
    SourceInfo(idna/src/punycode.rs:39:54-39:55)
  2: _42 = Eq(_39, const 0_u32)
    SourceInfo(idna/src/punycode.rs:39:9-39:56)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:39:9-39:56)
      kind: assert(!move _42, "attempt to divide `{}` by zero", _32) -> [success: bb21, unwind: bb23]
  }
  preds [bb19]
  succs [bb21, bb23]

bb21
  0: _31 = Div(move _32, move _39)
    SourceInfo(idna/src/punycode.rs:39:9-39:56)
  1: StorageDead(_39)
    SourceInfo(idna/src/punycode.rs:39:55-39:56)
  2: StorageDead(_32)
    SourceInfo(idna/src/punycode.rs:39:55-39:56)
  3: _43 = AddWithOverflow(_30, _31)
    SourceInfo(idna/src/punycode.rs:39:5-39:56)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:39:5-39:56)
      kind: assert(!move (_43.1: bool), "attempt to compute `{} + {}`, which would overflow", move _30, move _31) -> [success: bb22, unwind: bb23]
  }
  preds [bb20]
  succs [bb22, bb23]

bb22
  0: _0 = move (_43.0: u32)
    SourceInfo(idna/src/punycode.rs:39:5-39:56)
  1: StorageDead(_31)
    SourceInfo(idna/src/punycode.rs:39:55-39:56)
  2: StorageDead(_30)
    SourceInfo(idna/src/punycode.rs:39:55-39:56)
  3: StorageDead(_12)
    SourceInfo(idna/src/punycode.rs:40:1-40:2)
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:40:2-40:2)
      kind: return
  }
  preds [bb21]
  succs []

bb23
  Terminator {
      source_info: SourceInfo(idna/src/punycode.rs:31:1-40:2)
      kind: resume
  }
  preds [bb3, bb4, bb5, bb7, bb8, bb9, bb10, bb12, bb13, bb14, bb16, bb17, bb18, bb19, bb20, bb21]
  succs []

