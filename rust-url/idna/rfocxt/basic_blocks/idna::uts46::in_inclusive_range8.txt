[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = _1,
            StorageLive(_6),
            _6 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:134:5: 134:26 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::num::<impl u8>::wrapping_sub(move _5, move _6) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _3,
            StorageLive(_9),
            _9 = _2,
            _10 = SubWithOverflow(_8, _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:134:30: 134:43 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _8, move _9) -> [success: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = move (_10.0: u8),
            StorageDead(_9),
            StorageDead(_8),
            _0 = Le(move _4, move _7),
            StorageDead(_7),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:135:2: 135:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:133:1: 135:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:133:54: 133:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:133:27: 133:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:133:24: 133:25 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:133:24: 133:25 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:133:24: 133:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:133:38: 133:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:133:31: 133:36 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:133:31: 133:36 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:133:31: 133:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:133:47: 133:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:133:42: 133:45 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:133:42: 133:45 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:133:42: 133:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:134:5: 134:43 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:134:5: 134:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:134:5: 134:43 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:134:5: 134:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:134:5: 134:43 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:134:20: 134:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:134:5: 134:43 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:134:30: 134:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:134:5: 134:43 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:134:31: 134:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:134:5: 134:43 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:134:37: 134:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:134:30: 134:43 (#0),
            scope: scope[0],
        },
    },
]