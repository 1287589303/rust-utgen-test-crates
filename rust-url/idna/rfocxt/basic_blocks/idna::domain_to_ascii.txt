[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:129:25: 129:42 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::str::<impl str>::as_bytes(move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &(*_4),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:129:5: 129:65 (#0),
                    scope: scope[0],
                },
                kind: _2 = domain_to_ascii_cow(move _3, const uts46::AsciiDenyList::EMPTY) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_6),
            _6 = {closure@idna/src/lib.rs:129:70: 129:75},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:129:5: 129:93 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<std::borrow::Cow<'_, str>, Errors>::map::<std::string::String, {closure@idna/src/lib.rs:129:70: 129:75}>(move _2, move _6) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_2),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:130:2: 130:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:129:92: 129:93 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:128:1: 130:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<std::string::String, Errors>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:128:41: 128:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/lib.rs:128:32: 128:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/lib.rs:128:24: 128:30 (#0),
                            ),
                        ),
                        pat_span: idna/src/lib.rs:128:24: 128:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:128:24: 128:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:129:5: 129:93 (#0),
                },
            ),
        ),
        ty: core::result::Result<std::borrow::Cow<'{erased}, str>, Errors>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:129:5: 129:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:129:5: 129:93 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:129:25: 129:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:129:5: 129:93 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:129:25: 129:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:129:5: 129:93 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:129:25: 129:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:129:5: 129:93 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:229 ~ idna[9561]::domain_to_ascii::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((std::borrow::Cow<'{erased}, str>,)) -> std::string::String, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:129:70: 129:92 (#0),
            scope: scope[0],
        },
    },
]