[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/deprecated.rs:243:25: 243:40 (#0),
                    scope: scope[0],
                },
                kind: _3 = deprecated::Idna::new(move _4) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/deprecated.rs:244:45: 244:57 (#0),
                    scope: scope[1],
                },
                kind: _6 = core::str::<impl str>::len(move _7) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/deprecated.rs:244:23: 244:58 (#0),
                    scope: scope[1],
                },
                kind: _5 = std::string::String::with_capacity(move _6) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _3,
            StorageLive(_10),
            _10 = &(*_2),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut _5,
            _11 = &mut (*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/deprecated.rs:245:22: 245:56 (#0),
                    scope: scope[2],
                },
                kind: _8 = deprecated::Idna::to_unicode(move _9, move _10, move _11) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageDead(_12),
            StorageLive(_13),
            _13 = move _5,
            StorageLive(_14),
            _14 = move _8,
            _0 = (move _13, move _14),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/deprecated.rs:246:21: 246:22 (#0),
                    scope: scope[3],
                },
                kind: drop(_13) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/deprecated.rs:247:5: 247:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/deprecated.rs:247:6: 247:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/deprecated.rs:247:5: 247:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/deprecated.rs:242:5: 247:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (std::string::String, core::result::Result<(), Errors>),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:242:46: 242:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: deprecated::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:242:23: 242:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/deprecated.rs:242:37: 242:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/deprecated.rs:242:29: 242:35 (#0),
                            ),
                        ),
                        pat_span: idna/src/deprecated.rs:242:29: 242:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:242:29: 242:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/deprecated.rs:243:25: 243:40 (#0),
                            ),
                        ),
                        pat_span: idna/src/deprecated.rs:243:13: 243:22 (#0),
                    },
                ),
            ),
        ),
        ty: deprecated::Idna,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:243:13: 243:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: deprecated::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:243:35: 243:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/deprecated.rs:244:23: 244:58 (#0),
                            ),
                        ),
                        pat_span: idna/src/deprecated.rs:244:13: 244:20 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:244:13: 244:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:244:45: 244:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:244:45: 244:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/deprecated.rs:245:22: 245:56 (#0),
                            ),
                        ),
                        pat_span: idna/src/deprecated.rs:245:13: 245:19 (#0),
                    },
                ),
            ),
        ),
        ty: core::result::Result<(), Errors>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:245:13: 245:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut deprecated::Idna,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:245:22: 245:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:245:39: 245:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:245:47: 245:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:245:47: 245:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/deprecated.rs:246:9: 246:22 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:246:10: 246:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/deprecated.rs:246:9: 246:22 (#0),
                },
            ),
        ),
        ty: core::result::Result<(), Errors>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/deprecated.rs:246:15: 246:21 (#0),
            scope: scope[0],
        },
    },
]