[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:109:5: 109:17 (#0),
                    scope: scope[0],
                },
                kind: _4 = uts46::Uts46::new() -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &_4,
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            _6 = _2,
            StorageLive(_7),
            _7 = uts46::Hyphens::Allow,
            StorageLive(_8),
            _8 = uts46::DnsLength::Ignore,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:109:5: 114:6 (#0),
                    scope: scope[0],
                },
                kind: _0 = uts46::Uts46::to_ascii(move _3, move _5, move _6, move _7, move _8) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:115:1: 115:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:115:2: 115:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:115:1: 115:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:105:1: 115:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<std::borrow::Cow<'{erased}, str>, Errors>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:108:6: 108:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/lib.rs:106:13: 106:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/lib.rs:106:5: 106:11 (#0),
                            ),
                        ),
                        pat_span: idna/src/lib.rs:106:5: 106:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:106:5: 106:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/lib.rs:107:22: 107:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/lib.rs:107:5: 107:20 (#0),
                            ),
                        ),
                        pat_span: idna/src/lib.rs:107:5: 107:20 (#0),
                    },
                ),
            ),
        ),
        ty: uts46::AsciiDenyList,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:107:5: 107:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:109:5: 114:6 (#0),
                },
            ),
        ),
        ty: &'{erased} uts46::Uts46,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:109:5: 109:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:109:5: 114:6 (#0),
                },
            ),
        ),
        ty: uts46::Uts46,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:109:5: 109:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:109:5: 114:6 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:110:9: 110:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:109:5: 114:6 (#0),
                },
            ),
        ),
        ty: uts46::AsciiDenyList,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:111:9: 111:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:109:5: 114:6 (#0),
                },
            ),
        ),
        ty: uts46::Hyphens,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:112:9: 112:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:109:5: 114:6 (#0),
                },
            ),
        ),
        ty: uts46::DnsLength,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:113:9: 113:33 (#0),
            scope: scope[0],
        },
    },
]