[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: smallvec::SmallVec<[(usize, char); 59]>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:170:9: 170:32 (#0),
                    scope: scope[0],
                },
                kind: _3 = smallvec::SmallVec::<[(usize, char); 59]>::clear(move _4) -> [return: bb1, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:173:53: 173:65 (#0),
                    scope: scope[2],
                },
                kind: _10 = core::slice::<impl [T]>::iter(move _11) -> [return: bb2, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &mut _10,
            StorageDead(_11),
            StorageLive(_12),
            _12 = {closure@idna/src/punycode.rs:173:76: 173:79},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:173:53: 173:97 (#0),
                    scope: scope[2],
                },
                kind: _8 = <core::slice::Iter<'_, T> as core::iter::Iterator>::rposition::<{closure@idna/src/punycode.rs:173:76: 173:79}>(move _9, move _12) -> [return: bb3, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_9),
            PlaceMention(_8),
            _13 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:173:36: 173:50 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _13) -> [1: bb4, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:173:36: 173:50 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = ((_8 as Some).0: usize),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_2),
            StorageLive(_18),
            StorageLive(_19),
            _19 = _14,
            _18 = core::ops::RangeTo::<usize> { end: move _19 },
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:175:23: 175:35 (#0),
                    scope: scope[2],
                },
                kind: _16 = <[T] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _17, move _18) -> [return: bb6, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            _15 = &(*_16),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = _14,
            _21 = Gt(move _22, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:176:20: 176:32 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _21) -> [0: bb10, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &(*_2),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = _14,
            _28 = AddWithOverflow(_27, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:177:28: 177:40 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", move _27, const 1_usize) -> [success: bb8, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = move (_28.0: usize),
            StorageDead(_27),
            _25 = core::ops::RangeFrom::<usize> { start: move _26 },
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:177:27: 177:43 (#0),
                    scope: scope[2],
                },
                kind: _23 = <[T] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _24, move _25) -> [return: bb9, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            _20 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:176:17: 180:18 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageLive(_29),
            _29 = _2,
            _20 = &(*_29),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:176:17: 180:18 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _7 = (move _15, move _20),
            StorageDead(_20),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:173:29: 184:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &(*_2),
            StorageLive(_33),
            _33 = core::ops::RangeTo::<usize> { end: const 0_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:183:20: 183:25 (#0),
                    scope: scope[0],
                },
                kind: _31 = <[T] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _32, move _33) -> [return: bb13, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            _30 = &(*_31),
            StorageLive(_34),
            _34 = _2,
            _7 = (move _30, move _34),
            StorageDead(_34),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:173:29: 184:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            PlaceMention(_7),
            StorageLive(_5),
            _5 = (_7.0: &[T]),
            StorageLive(_6),
            _6 = (_7.1: &[T]),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_35),
            StorageLive(_36),
            _36 = const <C as punycode::PunycodeCaller>::EXTERNAL_CALLER,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:186:12: 186:30 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _36) -> [0: bb20, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:186:35: 186:46 (#0),
                    scope: scope[1],
                },
                kind: _39 = core::slice::<impl [T]>::iter(move _40) -> [return: bb16, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = &mut _39,
            StorageDead(_40),
            StorageLive(_41),
            _41 = {closure@idna/src/punycode.rs:186:51: 186:54},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:186:35: 186:68 (#0),
                    scope: scope[1],
                },
                kind: _37 = <core::slice::Iter<'_, T> as core::iter::Iterator>::all::<{closure@idna/src/punycode.rs:186:51: 186:54}>(move _38, move _41) -> [return: bb17, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:186:35: 186:68 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _37) -> [0: bb19, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_38),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_38),
            StorageDead(_39),
            StorageLive(_43),
            _43 = (),
            _0 = core::result::Result::<punycode::Decode<'_, T, C>, ()>::Err(move _43),
            StorageDead(_43),
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb122,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = const (),
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:190:24: 190:34 (#0),
                    scope: scope[1],
                },
                kind: _44 = core::slice::<impl [T]>::len(move _45) -> [return: bb21, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            FakeRead(ForLet(None), _44),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _44,
            _46 = move _47 as u32 (IntToInt),
            StorageDead(_47),
            FakeRead(ForLet(None), _46),
            StorageLive(_48),
            _48 = const punycode::INITIAL_N,
            FakeRead(ForLet(None), _48),
            StorageLive(_49),
            _49 = const punycode::INITIAL_BIAS,
            FakeRead(ForLet(None), _49),
            StorageLive(_50),
            _50 = const 0_u32,
            FakeRead(ForLet(None), _50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:195:24: 195:36 (#0),
                    scope: scope[7],
                },
                kind: _51 = core::slice::<impl [T]>::iter(move _52) -> [return: bb22, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            FakeRead(ForLet(None), _51),
            StorageLive(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:196:9: 253:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:196:9: 253:10 (#0),
                    scope: scope[8],
                },
                kind: falseUnwind -> [real: bb24, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = _50,
            FakeRead(ForLet(None), _55),
            StorageLive(_56),
            _56 = const 1_u32,
            FakeRead(ForLet(None), _56),
            StorageLive(_57),
            _57 = const punycode::BASE,
            FakeRead(ForLet(None), _57),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &mut _51,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:200:34: 200:45 (#0),
                    scope: scope[11],
                },
                kind: _59 = <core::slice::Iter<'_, T> as core::iter::Iterator>::next(move _60) -> [return: bb25, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            PlaceMention(_59),
            _61 = discriminant(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:200:28: 200:45 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _61) -> [0: bb27, 1: bb28, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:200:34: 200:45 (#0),
                    scope: scope[11],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:201:17: 201:21 (#0),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_63),
            _63 = ((_59 as Some).0: &T),
            _58 = _63,
            StorageDead(_63),
            FakeRead(ForLet(None), _58),
            StorageDead(_59),
            StorageLive(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:207:13: 231:14 (#0),
                    scope: scope[12],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _53 = const (),
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_53),
            StorageLive(_198),
            StorageLive(_199),
            StorageLive(_200),
            StorageLive(_201),
            _201 = &mut ((*_1).0: smallvec::SmallVec<[(usize, char); 59]>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:255:9: 255:49 (#0),
                    scope: scope[8],
                },
                kind: _200 = <smallvec::SmallVec<[(usize, char); 59]> as core::ops::DerefMut>::deref_mut(move _201) -> [return: bb112, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:207:13: 231:14 (#0),
                    scope: scope[12],
                },
                kind: falseUnwind -> [real: bb31, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = &(*_58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:208:50: 208:62 (#0),
                    scope: scope[15],
                },
                kind: _66 = <T as punycode::PunycodeCodeUnit>::digit(move _67) -> [return: bb32, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            PlaceMention(_66),
            _68 = discriminant(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:208:36: 208:47 (#0),
                    scope: scope[15],
                },
                kind: switchInt(move _68) -> [1: bb33, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:208:36: 208:47 (#0),
                    scope: scope[15],
                },
                kind: falseEdge -> [real: bb34, imaginary: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_69),
            _69 = ((_66 as Some).0: u32),
            _65 = _69,
            StorageDead(_69),
            FakeRead(ForLet(None), _65),
            StorageDead(_66),
            StorageLive(_72),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = _65,
            StorageLive(_77),
            _77 = _56,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:213:31: 213:56 (#0),
                    scope: scope[14],
                },
                kind: _75 = core::num::<impl u32>::checked_mul(move _76, move _77) -> [return: bb36, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_71),
            _71 = (),
            _0 = core::result::Result::<punycode::Decode<'_, T, C>, ()>::Err(move _71),
            StorageDead(_71),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb120,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_76),
            StorageLive(_78),
            _78 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:213:31: 213:66 (#0),
                    scope: scope[14],
                },
                kind: _74 = core::option::Option::<u32>::ok_or::<()>(move _75, move _78) -> [return: bb37, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:213:31: 213:67 (#203),
                    scope: scope[14],
                },
                kind: _73 = <core::result::Result<u32, ()> as core::ops::Try>::branch(move _74) -> [return: bb38, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            PlaceMention(_73),
            _79 = discriminant(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:213:31: 213:67 (#203),
                    scope: scope[14],
                },
                kind: switchInt(move _79) -> [0: bb41, 1: bb40, otherwise: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:213:31: 213:67 (#203),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:213:66: 213:67 (#204),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb42, imaginary: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_83),
            _83 = ((_73 as Continue).0: u32),
            _72 = _83,
            StorageDead(_83),
            FakeRead(ForLet(None), _72),
            StorageDead(_73),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = _50,
            StorageLive(_89),
            _89 = _72,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:214:21: 214:43 (#0),
                    scope: scope[16],
                },
                kind: _87 = core::num::<impl u32>::checked_add(move _88, move _89) -> [return: bb44, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_80),
            _80 = ((_73 as Break).0: core::result::Result<core::convert::Infallible, ()>),
            StorageLive(_82),
            _82 = _80,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:213:31: 213:67 (#203),
                    scope: scope[18],
                },
                kind: _0 = <core::result::Result<punycode::Decode<'_, T, C>, ()> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ()>>>::from_residual(move _82) -> [return: bb43, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            StorageDead(_80),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_88),
            StorageLive(_90),
            _90 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:214:21: 214:53 (#0),
                    scope: scope[16],
                },
                kind: _86 = core::option::Option::<u32>::ok_or::<()>(move _87, move _90) -> [return: bb45, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:214:21: 214:54 (#205),
                    scope: scope[16],
                },
                kind: _85 = <core::result::Result<u32, ()> as core::ops::Try>::branch(move _86) -> [return: bb46, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            PlaceMention(_85),
            _91 = discriminant(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:214:21: 214:54 (#205),
                    scope: scope[16],
                },
                kind: switchInt(move _91) -> [0: bb49, 1: bb48, otherwise: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:214:21: 214:54 (#205),
                    scope: scope[16],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:214:53: 214:54 (#206),
                    scope: scope[16],
                },
                kind: falseEdge -> [real: bb50, imaginary: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_95),
            _95 = ((_85 as Continue).0: u32),
            _84 = _95,
            StorageDead(_95),
            _50 = move _84,
            StorageDead(_84),
            StorageDead(_85),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = _57,
            StorageLive(_99),
            _99 = _49,
            _97 = Le(move _98, move _99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:215:28: 215:37 (#0),
                    scope: scope[16],
                },
                kind: switchInt(move _97) -> [0: bb53, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_92),
            _92 = ((_85 as Break).0: core::result::Result<core::convert::Infallible, ()>),
            StorageLive(_94),
            _94 = _92,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:214:21: 214:54 (#205),
                    scope: scope[22],
                },
                kind: _0 = <core::result::Result<punycode::Decode<'_, T, C>, ()> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ()>>>::from_residual(move _94) -> [return: bb51, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            StorageDead(_92),
            StorageDead(_84),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[16],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            StorageDead(_98),
            _96 = const punycode::T_MIN,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:215:25: 221:18 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            StorageDead(_98),
            StorageLive(_100),
            StorageLive(_101),
            _101 = _57,
            StorageLive(_102),
            StorageLive(_103),
            _103 = _49,
            _104 = AddWithOverflow(_103, const punycode::T_MAX),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:217:32: 217:44 (#0),
                    scope: scope[16],
                },
                kind: assert(!move (_104.1: bool), "attempt to compute `{} + {}`, which would overflow", move _103, const punycode::T_MAX) -> [success: bb54, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _102 = move (_104.0: u32),
            StorageDead(_103),
            _100 = Ge(move _101, move _102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:217:27: 217:44 (#0),
                    scope: scope[16],
                },
                kind: switchInt(move _100) -> [0: bb56, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_101),
            _96 = const punycode::T_MAX,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:217:24: 221:18 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_101),
            StorageLive(_105),
            _105 = _57,
            StorageLive(_106),
            _106 = _49,
            _107 = SubWithOverflow(_105, _106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:220:21: 220:29 (#0),
                    scope: scope[16],
                },
                kind: assert(!move (_107.1: bool), "attempt to compute `{} - {}`, which would overflow", move _105, move _106) -> [success: bb57, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _96 = move (_107.0: u32),
            StorageDead(_106),
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:217:24: 221:18 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:215:25: 221:18 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            FakeRead(ForLet(None), _96),
            StorageLive(_108),
            StorageLive(_109),
            StorageLive(_110),
            _110 = _65,
            StorageLive(_111),
            _111 = _96,
            _109 = Lt(move _110, move _111),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:222:20: 222:29 (#0),
                    scope: scope[25],
                },
                kind: switchInt(move _109) -> [0: bb61, otherwise: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageDead(_110),
            _64 = const (),
            StorageDead(_109),
            StorageDead(_108),
            StorageDead(_96),
            StorageDead(_72),
            StorageDead(_65),
            StorageDead(_64),
            StorageLive(_136),
            StorageLive(_137),
            StorageLive(_138),
            _138 = _50,
            StorageLive(_139),
            _139 = _55,
            _140 = SubWithOverflow(_138, _139),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:233:26: 233:40 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_140.1: bool), "attempt to compute `{} - {}`, which would overflow", move _138, move _139) -> [success: bb77, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageDead(_110),
            _108 = const (),
            StorageDead(_109),
            StorageDead(_108),
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            StorageLive(_116),
            StorageLive(_117),
            _117 = _56,
            StorageLive(_118),
            StorageLive(_119),
            _119 = _96,
            _120 = SubWithOverflow(const punycode::BASE, _119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:225:45: 225:53 (#0),
                    scope: scope[25],
                },
                kind: assert(!move (_120.1: bool), "attempt to compute `{} - {}`, which would overflow", const punycode::BASE, move _119) -> [success: bb62, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _118 = move (_120.0: u32),
            StorageDead(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:225:26: 225:54 (#0),
                    scope: scope[25],
                },
                kind: _116 = core::num::<impl u32>::checked_mul(move _117, move _118) -> [return: bb63, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_118),
            StorageDead(_117),
            StorageLive(_121),
            _121 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:225:26: 225:64 (#0),
                    scope: scope[25],
                },
                kind: _115 = core::option::Option::<u32>::ok_or::<()>(move _116, move _121) -> [return: bb64, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:225:26: 225:65 (#210),
                    scope: scope[25],
                },
                kind: _114 = <core::result::Result<u32, ()> as core::ops::Try>::branch(move _115) -> [return: bb65, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            PlaceMention(_114),
            _122 = discriminant(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:225:26: 225:65 (#210),
                    scope: scope[25],
                },
                kind: switchInt(move _122) -> [0: bb68, 1: bb67, otherwise: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:225:26: 225:65 (#210),
                    scope: scope[25],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:225:64: 225:65 (#211),
                    scope: scope[25],
                },
                kind: falseEdge -> [real: bb69, imaginary: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_126),
            _126 = ((_114 as Continue).0: u32),
            _113 = _126,
            StorageDead(_126),
            _56 = move _113,
            StorageDead(_113),
            StorageDead(_114),
            _127 = AddWithOverflow(_57, const punycode::BASE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:226:17: 226:26 (#0),
                    scope: scope[25],
                },
                kind: assert(!move (_127.1: bool), "attempt to compute `{} + {}`, which would overflow", _57, const punycode::BASE) -> [success: bb71, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_123),
            _123 = ((_114 as Break).0: core::result::Result<core::convert::Infallible, ()>),
            StorageLive(_125),
            _125 = _123,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:225:26: 225:65 (#210),
                    scope: scope[27],
                },
                kind: _0 = <core::result::Result<punycode::Decode<'_, T, C>, ()> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ()>>>::from_residual(move _125) -> [return: bb70, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            StorageDead(_123),
            StorageDead(_113),
            StorageDead(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[25],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _57 = move (_127.0: u32),
            StorageLive(_128),
            StorageLive(_129),
            StorageLive(_130),
            StorageLive(_131),
            _131 = &mut _51,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:227:30: 227:41 (#0),
                    scope: scope[25],
                },
                kind: _130 = <core::slice::Iter<'_, T> as core::iter::Iterator>::next(move _131) -> [return: bb72, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_131),
            PlaceMention(_130),
            _132 = discriminant(_130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:227:24: 227:41 (#0),
                    scope: scope[25],
                },
                kind: switchInt(move _132) -> [0: bb74, 1: bb75, otherwise: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:227:30: 227:41 (#0),
                    scope: scope[25],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:228:21: 228:25 (#0),
                    scope: scope[25],
                },
                kind: falseEdge -> [real: bb76, imaginary: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_135),
            _135 = ((_130 as Some).0: &T),
            _129 = &(*_135),
            StorageDead(_135),
            _128 = &(*_129),
            _58 = move _128,
            StorageDead(_128),
            StorageDead(_130),
            StorageDead(_129),
            _54 = const (),
            StorageDead(_96),
            StorageDead(_72),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:207:13: 231:14 (#0),
                    scope: scope[12],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_134),
            _134 = (),
            _0 = core::result::Result::<punycode::Decode<'_, T, C>, ()>::Err(move _134),
            StorageDead(_134),
            StorageDead(_128),
            StorageDead(_130),
            StorageDead(_129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[25],
                },
                kind: goto -> bb118,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _137 = move (_140.0: u32),
            StorageDead(_139),
            StorageDead(_138),
            StorageLive(_141),
            StorageLive(_142),
            _142 = _46,
            _143 = AddWithOverflow(_142, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:233:42: 233:52 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_143.1: bool), "attempt to compute `{} + {}`, which would overflow", move _142, const 1_u32) -> [success: bb78, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _141 = move (_143.0: u32),
            StorageDead(_142),
            StorageLive(_144),
            StorageLive(_145),
            _145 = _55,
            _144 = Eq(move _145, const 0_u32),
            StorageDead(_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:233:20: 233:70 (#0),
                    scope: scope[12],
                },
                kind: _136 = punycode::adapt(move _137, move _141, move _144) -> [return: bb79, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
            StorageDead(_141),
            StorageDead(_137),
            _49 = move _136,
            StorageDead(_136),
            StorageLive(_146),
            StorageLive(_147),
            StorageLive(_148),
            StorageLive(_149),
            StorageLive(_150),
            _150 = _48,
            StorageLive(_151),
            StorageLive(_152),
            _152 = _50,
            StorageLive(_153),
            StorageLive(_154),
            _154 = _46,
            _155 = AddWithOverflow(_154, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:237:53: 237:65 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_155.1: bool), "attempt to compute `{} + {}`, which would overflow", move _154, const 1_u32) -> [success: bb80, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _153 = move (_155.0: u32),
            StorageDead(_154),
            _156 = Eq(_153, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:237:49: 237:65 (#0),
                    scope: scope[12],
                },
                kind: assert(!move _156, "attempt to divide `{}` by zero", _152) -> [success: bb81, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _151 = Div(move _152, move _153),
            StorageDead(_153),
            StorageDead(_152),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:237:26: 237:66 (#0),
                    scope: scope[12],
                },
                kind: _149 = core::num::<impl u32>::checked_add(move _150, move _151) -> [return: bb82, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_151),
            StorageDead(_150),
            StorageLive(_157),
            _157 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:237:26: 237:76 (#0),
                    scope: scope[12],
                },
                kind: _148 = core::option::Option::<u32>::ok_or::<()>(move _149, move _157) -> [return: bb83, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
            StorageDead(_149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:237:26: 237:77 (#212),
                    scope: scope[12],
                },
                kind: _147 = <core::result::Result<u32, ()> as core::ops::Try>::branch(move _148) -> [return: bb84, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_148),
            PlaceMention(_147),
            _158 = discriminant(_147),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:237:26: 237:77 (#212),
                    scope: scope[12],
                },
                kind: switchInt(move _158) -> [0: bb87, 1: bb86, otherwise: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _147),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:237:26: 237:77 (#212),
                    scope: scope[12],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:237:76: 237:77 (#213),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb88, imaginary: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_162),
            _162 = ((_147 as Continue).0: u32),
            _146 = _162,
            StorageDead(_162),
            _48 = move _146,
            StorageDead(_146),
            StorageDead(_147),
            StorageLive(_163),
            StorageLive(_164),
            _164 = _46,
            _165 = AddWithOverflow(_164, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:238:18: 238:28 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_165.1: bool), "attempt to compute `{} + {}`, which would overflow", move _164, const 1_u32) -> [success: bb90, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_159),
            _159 = ((_147 as Break).0: core::result::Result<core::convert::Infallible, ()>),
            StorageLive(_161),
            _161 = _159,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:237:26: 237:77 (#212),
                    scope: scope[32],
                },
                kind: _0 = <core::result::Result<punycode::Decode<'_, T, C>, ()> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ()>>>::from_residual(move _161) -> [return: bb89, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_161),
            StorageDead(_159),
            StorageDead(_146),
            StorageDead(_147),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _163 = move (_165.0: u32),
            StorageDead(_164),
            _166 = Eq(_163, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:238:13: 238:28 (#0),
                    scope: scope[12],
                },
                kind: assert(!move _166, "attempt to calculate the remainder of `{}` with a divisor of zero", _50) -> [success: bb91, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _50 = Rem(_50, move _163),
            StorageDead(_163),
            StorageLive(_167),
            StorageLive(_168),
            StorageLive(_169),
            _169 = _48,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:239:27: 239:53 (#0),
                    scope: scope[12],
                },
                kind: _168 = core::char::from_u32(move _169) -> [return: bb92, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_169),
            PlaceMention(_168),
            _170 = discriminant(_168),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:239:21: 239:53 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _170) -> [0: bb95, 1: bb94, otherwise: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _168),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:239:27: 239:53 (#0),
                    scope: scope[12],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:240:17: 240:24 (#0),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb96, imaginary: bb95],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_173),
            _173 = (),
            _0 = core::result::Result::<punycode::Decode<'_, T, C>, ()>::Err(move _173),
            StorageDead(_173),
            StorageDead(_168),
            StorageDead(_167),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_171),
            _171 = ((_168 as Some).0: char),
            _167 = _171,
            StorageDead(_171),
            FakeRead(ForLet(None), _167),
            StorageDead(_168),
            StorageLive(_174),
            StorageLive(_175),
            StorageLive(_176),
            _176 = &mut ((*_1).0: smallvec::SmallVec<[(usize, char); 59]>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:245:29: 245:49 (#215),
                    scope: scope[35],
                },
                kind: _175 = <&mut smallvec::SmallVec<[(usize, char); 59]> as core::iter::IntoIterator>::into_iter(move _176) -> [return: bb97, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_176),
            PlaceMention(_175),
            StorageLive(_177),
            _177 = move _175,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:245:13: 249:14 (#214),
                    scope: scope[37],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:245:13: 249:14 (#214),
                    scope: scope[37],
                },
                kind: falseUnwind -> [real: bb99, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_178),
            StorageLive(_179),
            StorageLive(_180),
            StorageLive(_181),
            _181 = &mut _177,
            _180 = &mut (*_181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:245:29: 245:49 (#215),
                    scope: scope[37],
                },
                kind: _179 = <core::slice::IterMut<'_, (usize, char)> as core::iter::Iterator>::next(move _180) -> [return: bb100, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_180),
            PlaceMention(_179),
            _182 = discriminant(_179),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:245:29: 245:49 (#215),
                    scope: scope[37],
                },
                kind: switchInt(move _182) -> [0: bb102, 1: bb103, otherwise: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _179),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:245:29: 245:49 (#215),
                    scope: scope[37],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:245:13: 249:14 (#214),
                    scope: scope[37],
                },
                kind: falseEdge -> [real: bb104, imaginary: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_184),
            _184 = &mut ((*((_179 as Some).0: &mut (usize, char))).0: usize),
            StorageLive(_185),
            StorageLive(_186),
            _186 = (*_184),
            StorageLive(_187),
            StorageLive(_188),
            _188 = _50,
            _187 = move _188 as usize (IntToInt),
            StorageDead(_188),
            _185 = Ge(move _186, move _187),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:246:20: 246:38 (#0),
                    scope: scope[38],
                },
                kind: switchInt(move _185) -> [0: bb107, otherwise: bb105],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _174 = const (),
            StorageDead(_181),
            StorageDead(_179),
            StorageDead(_178),
            StorageDead(_177),
            StorageDead(_175),
            StorageDead(_174),
            StorageLive(_190),
            StorageLive(_191),
            _191 = &mut ((*_1).0: smallvec::SmallVec<[(usize, char); 59]>),
            StorageLive(_192),
            StorageLive(_193),
            StorageLive(_194),
            _194 = _50,
            _193 = move _194 as usize (IntToInt),
            StorageDead(_194),
            StorageLive(_195),
            _195 = _167,
            _192 = (move _193, move _195),
            StorageDead(_195),
            StorageDead(_193),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:250:13: 250:50 (#0),
                    scope: scope[35],
                },
                kind: _190 = smallvec::SmallVec::<[(usize, char); 59]>::push(move _191, move _192) -> [return: bb109, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_187),
            StorageDead(_186),
            _189 = AddWithOverflow((*_184), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:247:21: 247:30 (#0),
                    scope: scope[38],
                },
                kind: assert(!move (_189.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_184), const 1_usize) -> [success: bb106, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_184) = move (_189.0: usize),
            _178 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:246:17: 248:18 (#0),
                    scope: scope[38],
                },
                kind: goto -> bb108,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_187),
            StorageDead(_186),
            _178 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:246:17: 248:18 (#0),
                    scope: scope[38],
                },
                kind: goto -> bb108,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_185),
            StorageDead(_184),
            StorageDead(_181),
            StorageDead(_179),
            StorageDead(_178),
            _54 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:245:13: 249:14 (#214),
                    scope: scope[37],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_192),
            StorageDead(_191),
            StorageDead(_190),
            _196 = AddWithOverflow(_46, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:251:13: 251:24 (#0),
                    scope: scope[35],
                },
                kind: assert(!move (_196.1: bool), "attempt to compute `{} + {}`, which would overflow", _46, const 1_u32) -> [success: bb110, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = move (_196.0: u32),
            _197 = AddWithOverflow(_50, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:252:13: 252:19 (#0),
                    scope: scope[35],
                },
                kind: assert(!move (_197.1: bool), "attempt to compute `{} + {}`, which would overflow", _50, const 1_u32) -> [success: bb111, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _50 = move (_197.0: u32),
            _54 = const (),
            StorageDead(_167),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:196:9: 253:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _199 = &mut (*_200),
            StorageDead(_201),
            StorageLive(_202),
            _202 = {closure@idna/src/punycode.rs:255:37: 255:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:255:9: 255:49 (#0),
                    scope: scope[8],
                },
                kind: _198 = std::slice::<impl [(usize, char)]>::sort_by_key::<usize, {closure@idna/src/punycode.rs:255:37: 255:45}>(move _199, move _202) -> [return: bb113, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_202),
            StorageDead(_199),
            StorageDead(_200),
            StorageDead(_198),
            StorageLive(_203),
            StorageLive(_204),
            StorageLive(_205),
            _205 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:257:19: 257:30 (#0),
                    scope: scope[8],
                },
                kind: _204 = core::slice::<impl [T]>::iter(move _205) -> [return: bb114, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_205),
            StorageLive(_206),
            StorageLive(_207),
            StorageLive(_208),
            StorageLive(_209),
            _209 = &((*_1).0: smallvec::SmallVec<[(usize, char); 59]>),
            _208 = &(*_209),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:258:25: 258:41 (#0),
                    scope: scope[8],
                },
                kind: _207 = <smallvec::SmallVec<[(usize, char); 59]> as core::ops::Deref>::deref(move _208) -> [return: bb115, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _206 = &(*_207),
            StorageDead(_208),
            StorageLive(_210),
            StorageLive(_211),
            _211 = _44,
            StorageLive(_212),
            StorageLive(_213),
            _213 = &((*_1).0: smallvec::SmallVec<[(usize, char); 59]>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:261:29: 261:50 (#0),
                    scope: scope[8],
                },
                kind: _212 = smallvec::SmallVec::<[(usize, char); 59]>::len(move _213) -> [return: bb116, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_213),
            _214 = AddWithOverflow(_211, _212),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:261:18: 261:50 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_214.1: bool), "attempt to compute `{} + {}`, which would overflow", move _211, move _212) -> [success: bb117, unwind: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _210 = move (_214.0: usize),
            StorageDead(_212),
            StorageDead(_211),
            StorageLive(_215),
            _215 = core::marker::PhantomData::<C>,
            _203 = punycode::Decode::<'_, T, C> { base: move _204, insertions: move _206, inserted: const 0_usize, position: const 0_usize, len: move _210, phantom: move _215 },
            StorageDead(_215),
            StorageDead(_210),
            StorageDead(_206),
            StorageDead(_204),
            _0 = core::result::Result::<punycode::Decode<'_, T, C>, ()>::Ok(move _203),
            StorageDead(_203),
            StorageDead(_51),
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_44),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_31),
            StorageDead(_23),
            StorageDead(_16),
            StorageDead(_209),
            StorageDead(_207),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:264:6: 264:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb123,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[16],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb120,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_53),
            StorageDead(_51),
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb122,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_31),
            StorageDead(_23),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:264:6: 264:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb123,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:264:6: 264:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:166:5: 264:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<punycode::Decode<'{erased}, T/#0, C/#1>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:169:10: 169:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut punycode::Decoder,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:167:9: 167:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/punycode.rs:168:16: 168:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:168:9: 168:14 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:168:9: 168:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:168:9: 168:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:170:9: 170:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[(usize, char); 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:170:9: 170:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                idna/src/punycode.rs:173:29: 184:10 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:173:13: 173:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:173:14: 173:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                idna/src/punycode.rs:173:29: 184:10 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:173:13: 173:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:173:20: 173:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} [T/#0], &'{erased} [T/#0]),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:173:29: 184:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:173:53: 173:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:173:53: 173:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:173:53: 173:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:173:53: 173:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:85 ~ idna[9561]::punycode::{impl#4}::decode::{closure#0}),
            [
                T/#0,
                C/#1,
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} T/#0,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:173:76: 173:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:173:36: 173:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                idna/src/punycode.rs:173:53: 173:97 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:173:36: 173:50 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:173:41: 173:49 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:174:13: 181:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:175:17: 175:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:174:13: 181:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:175:23: 175:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:174:13: 181:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:175:18: 175:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:174:13: 181:14 (#0),
                },
            ),
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:175:24: 175:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:175:26: 175:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:174:13: 181:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:176:17: 180:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:174:13: 181:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:176:20: 176:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:174:13: 181:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:176:20: 176:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:177:21: 177:43 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:177:27: 177:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:177:21: 177:43 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:177:22: 177:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:177:21: 177:43 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:177:28: 177:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:177:28: 177:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:177:21: 177:43 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:177:28: 177:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:177:28: 177:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:174:13: 181:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:179:21: 179:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:183:13: 183:33 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:183:14: 183:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:183:13: 183:33 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:183:20: 183:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:183:13: 183:33 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:183:15: 183:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:183:13: 183:33 (#0),
                },
            ),
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:183:21: 183:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:183:13: 183:33 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:183:27: 183:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:186:9: 188:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:53 ~ idna[9561]::punycode::PunycodeCaller::EXTERNAL_CALLER),
            },
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:186:12: 186:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:186:35: 186:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:186:35: 186:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:186:35: 186:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:186:35: 186:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:86 ~ idna[9561]::punycode::{impl#4}::decode::{closure#1}),
            [
                T/#0,
                C/#1,
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} T/#0,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:186:51: 186:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:186:69: 188:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:187:24: 187:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:190:24: 190:34 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:190:13: 190:21 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:190:13: 190:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:190:24: 190:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:191:26: 191:41 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:191:13: 191:23 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:191:13: 191:23 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:191:26: 191:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:192:30: 192:39 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:192:13: 192:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:192:13: 192:27 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:193:24: 193:36 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:193:13: 193:21 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:193:13: 193:21 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:194:21: 194:25 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:194:13: 194:18 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:194:13: 194:18 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:195:24: 195:36 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:195:13: 195:21 (#0),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:195:13: 195:21 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:195:24: 195:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:196:9: 253:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:166:5: 264:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:197:30: 197:31 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:197:17: 197:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:197:17: 197:27 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:198:30: 198:31 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:198:17: 198:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:198:17: 198:27 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:199:25: 199:29 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:199:17: 199:22 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:199:17: 199:22 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:200:28: 203:14 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:200:17: 200:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:200:17: 200:25 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:200:34: 200:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:200:34: 200:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:201:17: 201:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:201:25: 201:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _59,
                                ),
                                idna/src/punycode.rs:200:34: 200:45 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:202:17: 202:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:202:22: 202:26 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:207:13: 231:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:208:29: 212:18 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:208:21: 208:26 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:208:21: 208:26 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:208:50: 208:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:208:50: 208:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:208:36: 208:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _66,
                                ),
                                idna/src/punycode.rs:208:50: 208:62 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:208:36: 208:47 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:208:41: 208:46 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:210:24: 212:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:211:32: 211:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:213:31: 213:67 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:213:21: 213:28 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:21: 213:28 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ()>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:31: 213:67 (#203),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:31: 213:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:31: 213:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:31: 213:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:49: 213:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:63: 213:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:66: 213:67 (#204),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _73,
                                ),
                                idna/src/punycode.rs:213:31: 213:67 (#203),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:213:66: 213:67 (#204),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:66: 213:67 (#204),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:66: 213:67 (#204),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:66: 213:67 (#204),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _73,
                                ),
                                idna/src/punycode.rs:213:31: 213:67 (#203),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:213:31: 213:67 (#203),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:213:31: 213:67 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:21: 214:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ()>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:21: 214:54 (#205),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:21: 214:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:21: 214:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:21: 214:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:35: 214:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:50: 214:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:53: 214:54 (#206),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _85,
                                ),
                                idna/src/punycode.rs:214:21: 214:54 (#205),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:214:53: 214:54 (#206),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:53: 214:54 (#206),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:53: 214:54 (#206),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:53: 214:54 (#206),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _85,
                                ),
                                idna/src/punycode.rs:214:21: 214:54 (#205),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:214:21: 214:54 (#205),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:214:21: 214:54 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:215:25: 221:18 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:215:21: 215:22 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:215:21: 215:22 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:215:28: 215:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:215:28: 215:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:215:33: 215:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:217:27: 217:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:217:27: 217:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:217:32: 217:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:217:32: 217:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:217:32: 217:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:220:21: 220:29 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:220:21: 220:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:220:21: 220:29 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:220:25: 220:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:220:21: 220:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:222:17: 224:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:222:20: 222:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:222:20: 222:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:222:28: 222:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:222:30: 224:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:26: 225:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ()>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:26: 225:65 (#210),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:26: 225:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:26: 225:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:26: 225:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:45: 225:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:52: 225:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:45: 225:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:61: 225:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:64: 225:65 (#211),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _114,
                                ),
                                idna/src/punycode.rs:225:26: 225:65 (#210),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:225:64: 225:65 (#211),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:64: 225:65 (#211),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:64: 225:65 (#211),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:64: 225:65 (#211),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _114,
                                ),
                                idna/src/punycode.rs:225:26: 225:65 (#210),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:225:26: 225:65 (#210),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:225:26: 225:65 (#0),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:226:17: 226:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:227:24: 230:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:227:24: 230:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:227:30: 227:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:227:30: 227:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:228:21: 228:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:228:29: 228:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:228:40: 228:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _130,
                                ),
                                idna/src/punycode.rs:227:30: 227:41 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:229:21: 229:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:229:26: 229:30 (#0),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:233:20: 233:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:233:26: 233:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:233:26: 233:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:233:30: 233:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:233:26: 233:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:233:42: 233:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:233:42: 233:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:233:42: 233:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:233:54: 233:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:233:54: 233:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:26: 237:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ()>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:26: 237:77 (#212),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:26: 237:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:26: 237:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:26: 237:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:49: 237:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:49: 237:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:53: 237:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:54: 237:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:53: 237:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:49: 237:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:73: 237:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:76: 237:77 (#213),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _147,
                                ),
                                idna/src/punycode.rs:237:26: 237:77 (#212),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:237:76: 237:77 (#213),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:76: 237:77 (#213),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:76: 237:77 (#213),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:76: 237:77 (#213),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _147,
                                ),
                                idna/src/punycode.rs:237:26: 237:77 (#212),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:237:26: 237:77 (#212),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:237:26: 237:77 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:238:18: 238:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:238:18: 238:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:238:18: 238:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:238:13: 238:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:239:21: 242:14 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:239:17: 239:18 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:239:17: 239:18 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:239:27: 239:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:239:42: 239:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:240:17: 240:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _168,
                                ),
                                idna/src/punycode.rs:239:27: 239:53 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:240:17: 240:24 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:240:22: 240:23 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:241:25: 241:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:241:36: 241:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:13: 249:14 (#214),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::IterMut<'{erased}, (usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:29: 245:49 (#215),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[(usize, char); 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:29: 245:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _175,
                                ),
                                idna/src/punycode.rs:245:29: 245:49 (#215),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:245:29: 245:49 (#215),
                    },
                ),
            ),
        ),
        ty: core::slice::IterMut<'{erased}, (usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:29: 245:49 (#215),
            scope: scope[35],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:29: 245:49 (#215),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut (usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:29: 245:49 (#215),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, (usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:29: 245:49 (#215),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, (usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:29: 245:49 (#215),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:13: 249:14 (#214),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:13: 249:14 (#214),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _179,
                                ),
                                idna/src/punycode.rs:245:29: 245:49 (#215),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:245:17: 245:25 (#216),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:245:18: 245:21 (#0),
            scope: scope[37],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:246:17: 248:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:246:20: 246:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:246:17: 248:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:246:20: 246:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:246:17: 248:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:246:28: 246:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:246:17: 248:18 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:246:28: 246:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:247:21: 247:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:250:13: 250:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[(usize, char); 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:250:13: 250:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, char),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:250:34: 250:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:250:35: 250:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:250:35: 250:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:250:47: 250:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:251:13: 251:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:252:13: 252:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:255:9: 255:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [(usize, char)],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:255:9: 255:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [(usize, char)],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:255:9: 255:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[(usize, char); 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:255:9: 255:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:87 ~ idna[9561]::punycode::{impl#4}::decode::{closure#2}),
            [
                T/#0,
                C/#1,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 (usize, char),)) -> usize, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:255:37: 255:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: punycode::Decode<'{erased}, T/#0, C/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:256:12: 263:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:257:19: 257:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:256:9: 263:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:257:19: 257:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [(usize, char)],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:258:25: 258:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:256:9: 263:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [(usize, char)],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:258:25: 258:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:256:9: 263:11 (#0),
                },
            ),
        ),
        ty: &'{erased} smallvec::SmallVec<[(usize, char); 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:258:25: 258:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:256:9: 263:11 (#0),
                },
            ),
        ),
        ty: &'{erased} smallvec::SmallVec<[(usize, char); 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:258:25: 258:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:261:18: 261:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:256:9: 263:11 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:261:18: 261:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:256:9: 263:11 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:261:29: 261:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:256:9: 263:11 (#0),
                },
            ),
        ),
        ty: &'{erased} smallvec::SmallVec<[(usize, char); 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:261:29: 261:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:261:18: 261:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::marker::PhantomData<C/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:262:22: 262:38 (#0),
            scope: scope[0],
        },
    },
]