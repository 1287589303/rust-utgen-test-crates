[
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = (_3.0: u128),
            FakeRead(ForLet(None), _9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _9,
            _10 = BitOr(move _11, const uts46::DOT_MASK),
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_12),
            _12 = const false,
            FakeRead(ForLet(None), _12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1090:37: 1090:54 (#0),
                    scope: scope[3],
                },
                kind: _14 = core::slice::<impl [u8]>::len(move _15) -> [return: bb1, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1090:57: 1090:67 (#0),
                    scope: scope[3],
                },
                kind: _16 = core::slice::<impl [u8]>::len(move _17) -> [return: bb2, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _18 = SubWithOverflow(_14, _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1090:37: 1090:67 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _14, move _16) -> [success: bb3, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move (_18.0: usize),
            StorageDead(_16),
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageLive(_19),
            StorageLive(_20),
            _20 = const false,
            FakeRead(ForLet(None), _20),
            StorageLive(_21),
            _21 = const true,
            FakeRead(ForLet(None), _21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &(*_8),
            StorageLive(_26),
            _26 = {closure@idna/src/uts46.rs:1096:33: 1096:36},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1096:22: 1096:48 (#0),
                    scope: scope[7],
                },
                kind: _24 = core::slice::<impl [u8]>::split::<{closure@idna/src/uts46.rs:1096:33: 1096:36}>(move _25, move _26) -> [return: bb4, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
                    scope: scope[7],
                },
                kind: _23 = <core::slice::Split<'_, u8, {closure@idna/src/uts46.rs:1096:33: 1096:36}> as core::iter::IntoIterator>::into_iter(move _24) -> [return: bb5, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            PlaceMention(_23),
            StorageLive(_27),
            _27 = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1096:9: 1365:10 (#472),
                    scope: scope[8],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1096:9: 1365:10 (#472),
                    scope: scope[8],
                },
                kind: falseUnwind -> [real: bb7, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut _27,
            _31 = &mut (*_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
                    scope: scope[8],
                },
                kind: _30 = <core::slice::Split<'_, u8, {closure@idna/src/uts46.rs:1096:33: 1096:36}> as core::iter::Iterator>::next(move _31) -> [return: bb8, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            PlaceMention(_30),
            _33 = discriminant(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
                    scope: scope[8],
                },
                kind: switchInt(move _33) -> [0: bb10, 1: bb11, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1096:9: 1365:10 (#472),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _35 = ((_30 as Some).0: &[u8]),
            StorageLive(_36),
            StorageLive(_37),
            _37 = _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1109:16: 1109:25 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _37) -> [0: bb29, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = const (),
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_23),
            StorageDead(_22),
            StorageLive(_413),
            StorageLive(_414),
            _414 = &(*_1),
            StorageLive(_415),
            StorageLive(_416),
            StorageLive(_417),
            _417 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1367:36: 1367:49 (#0),
                    scope: scope[7],
                },
                kind: _416 = <smallvec::SmallVec<[char; 253]> as core::ops::Deref>::deref(move _417) -> [return: bb228, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            StorageLive(_39),
            _39 = &(*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1109:29: 1109:62 (#0),
                    scope: scope[9],
                },
                kind: _38 = uts46::is_passthrough_ascii_label(move _39) -> [return: bb14, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1109:29: 1109:62 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _38) -> [0: bb28, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageLive(_41),
            StorageLive(_42),
            _42 = _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1110:20: 1110:30 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _42) -> [0: bb24, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            StorageLive(_44),
            _44 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:12: 346:42 (#148),
                    scope: scope[9],
                },
                kind: switchInt(move _44) -> [0: bb21, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            _48 = _13,
            _49 = Len((*_2)),
            _50 = Lt(_48, _49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1111:38: 1111:68 (#0),
                    scope: scope[9],
                },
                kind: assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _48) -> [success: bb18, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _47 = &(*_2)[_48],
            StorageLive(_51),
            StorageLive(_52),
            _52 = const 46_u8,
            _51 = &_52,
            _46 = (move _47, move _51),
            StorageDead(_51),
            StorageDead(_47),
            PlaceMention(_46),
            StorageLive(_53),
            _53 = (_46.0: &u8),
            StorageLive(_54),
            _54 = (_46.1: &u8),
            StorageLive(_55),
            StorageLive(_56),
            _56 = (*_53),
            StorageLive(_57),
            _57 = (*_54),
            _55 = Eq(move _56, move _57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#149),
                    scope: scope[10],
                },
                kind: switchInt(move _55) -> [0: bb20, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_56),
            _45 = const (),
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_53),
            StorageDead(_52),
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_45),
            _43 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#147),
                    scope: scope[9],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_59),
            _59 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _59),
            StorageLive(_60),
            StorageLive(_61),
            _61 = move _59,
            StorageLive(_62),
            StorageLive(_63),
            _63 = &(*_53),
            _62 = &(*_63),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &(*_54),
            _64 = &(*_65),
            StorageLive(_66),
            _66 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#149),
                    scope: scope[11],
                },
                kind: _60 = core::panicking::assert_failed::<u8, u8>(move _61, move _62, move _64, move _66) -> bb383,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#147),
                    scope: scope[9],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            _67 = AddWithOverflow(_13, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1112:21: 1112:43 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_67.1: bool), "attempt to compute `{} + {}`, which would overflow", _13, const 1_usize) -> [success: bb23, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move (_67.0: usize),
            _41 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1110:17: 1113:18 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1110:17: 1113:18 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            _20 = const true,
            StorageLive(_68),
            StorageLive(_69),
            _69 = &(*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1116:38: 1116:49 (#0),
                    scope: scope[9],
                },
                kind: _68 = core::slice::<impl [u8]>::len(move _69) -> [return: bb26, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            _70 = AddWithOverflow(_13, _68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1116:17: 1116:49 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_70.1: bool), "attempt to compute `{} + {}`, which would overflow", _13, move _68) -> [success: bb27, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move (_70.0: usize),
            StorageDead(_68),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb227,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = const (),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_36),
            StorageLive(_71),
            StorageLive(_72),
            _72 = _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1119:16: 1119:26 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _72) -> [0: bb31, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            _73 = _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1120:20: 1120:29 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _73) -> [0: bb40, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _71 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1119:13: 1126:14 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_74),
            StorageLive(_75),
            _75 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:12: 346:42 (#151),
                    scope: scope[9],
                },
                kind: switchInt(move _75) -> [0: bb37, otherwise: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            _79 = _13,
            _80 = Len((*_2)),
            _81 = Lt(_79, _80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1121:38: 1121:68 (#0),
                    scope: scope[9],
                },
                kind: assert(move _81, "index out of bounds: the length is {} but the index is {}", move _80, _79) -> [success: bb34, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _78 = &(*_2)[_79],
            StorageLive(_82),
            StorageLive(_83),
            _83 = const 46_u8,
            _82 = &_83,
            _77 = (move _78, move _82),
            StorageDead(_82),
            StorageDead(_78),
            PlaceMention(_77),
            StorageLive(_84),
            _84 = (_77.0: &u8),
            StorageLive(_85),
            _85 = (_77.1: &u8),
            StorageLive(_86),
            StorageLive(_87),
            _87 = (*_84),
            StorageLive(_88),
            _88 = (*_85),
            _86 = Eq(move _87, move _88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#152),
                    scope: scope[12],
                },
                kind: switchInt(move _86) -> [0: bb36, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            _76 = const (),
            StorageDead(_86),
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_79),
            StorageDead(_77),
            StorageDead(_76),
            _74 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#150),
                    scope: scope[9],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            StorageLive(_90),
            _90 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _90),
            StorageLive(_91),
            StorageLive(_92),
            _92 = move _90,
            StorageLive(_93),
            StorageLive(_94),
            _94 = &(*_84),
            _93 = &(*_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = &(*_85),
            _95 = &(*_96),
            StorageLive(_97),
            _97 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#152),
                    scope: scope[13],
                },
                kind: _91 = core::panicking::assert_failed::<u8, u8>(move _92, move _93, move _95, move _97) -> bb383,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#150),
                    scope: scope[9],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            _98 = AddWithOverflow(_13, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1122:21: 1122:43 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_98.1: bool), "attempt to compute `{} + {}`, which would overflow", _13, const 1_usize) -> [success: bb39, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = move (_98.0: usize),
            _71 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1120:17: 1125:18 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_99),
            StorageLive(_100),
            _100 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1124:21: 1124:44 (#0),
                    scope: scope[9],
                },
                kind: _99 = smallvec::SmallVec::<[char; 253]>::push(move _100, const '.') -> [return: bb41, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            StorageDead(_99),
            _71 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1120:17: 1125:18 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1119:13: 1126:14 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_71),
            _20 = const true,
            _21 = const false,
            StorageLive(_101),
            StorageLive(_102),
            _102 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1129:35: 1129:54 (#0),
                    scope: scope[9],
                },
                kind: _101 = smallvec::SmallVec::<[char; 253]>::len(move _102) -> [return: bb44, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            _19 = move _101,
            StorageDead(_101),
            StorageLive(_103),
            StorageLive(_104),
            _104 = &(*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1130:17: 1130:33 (#0),
                    scope: scope[9],
                },
                kind: _103 = core::slice::<impl [u8]>::is_empty(move _104) -> [return: bb45, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1130:17: 1130:33 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _103) -> [0: bb47, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageLive(_409),
            StorageLive(_410),
            _410 = &mut (*_7),
            StorageLive(_411),
            StorageLive(_412),
            _412 = &(*_35),
            _411 = uts46::AlreadyAsciiLabel::<'_>::MixedCaseAscii(move _412),
            StorageDead(_412),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1363:17: 1363:80 (#0),
                    scope: scope[9],
                },
                kind: _409 = smallvec::SmallVec::<[uts46::AlreadyAsciiLabel<'_>; 8]>::push(move _410, move _411) -> [return: bb224, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageLive(_107),
            StorageLive(_108),
            _108 = &(*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1131:42: 1131:77 (#0),
                    scope: scope[9],
                },
                kind: _107 = uts46::split_ascii_fast_path_prefix(move _108) -> [return: bb48, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            PlaceMention(_107),
            StorageLive(_105),
            _105 = (_107.0: &[u8]),
            StorageLive(_106),
            _106 = (_107.1: &[u8]),
            StorageDead(_107),
            StorageLive(_109),
            StorageLive(_110),
            StorageLive(_111),
            _111 = &(*_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1132:51: 1132:71 (#0),
                    scope: scope[14],
                },
                kind: _110 = core::slice::<impl [u8]>::is_empty(move _111) -> [return: bb49, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1132:51: 1132:71 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _110) -> [0: bb93, otherwise: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageLive(_112),
            StorageLive(_113),
            _113 = &(*_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1133:24: 1133:50 (#0),
                    scope: scope[14],
                },
                kind: _112 = uts46::has_punycode_prefix(move _113) -> [return: bb51, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1133:24: 1133:50 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _112) -> [0: bb91, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            StorageLive(_114),
            StorageLive(_115),
            StorageLive(_116),
            StorageLive(_117),
            StorageLive(_118),
            _118 = &(*_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1134:29: 1134:41 (#0),
                    scope: scope[14],
                },
                kind: _117 = core::slice::<impl [u8]>::last(move _118) -> [return: bb53, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _116 = &_117,
            StorageDead(_118),
            StorageLive(_119),
            StorageLive(_120),
            StorageLive(_121),
            StorageLive(_122),
            StorageLive(_123),
            _123 = const 45_u8,
            _122 = &_123,
            _121 = &(*_122),
            _120 = core::option::Option::<&u8>::Some(move _121),
            _119 = &_120,
            StorageDead(_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1134:28: 1134:57 (#0),
                    scope: scope[14],
                },
                kind: _115 = <core::option::Option<&u8> as core::cmp::PartialEq>::ne(move _116, move _119) -> [return: bb54, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1134:28: 1134:57 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _115) -> [0: bb87, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_123),
            StorageDead(_122),
            StorageDead(_120),
            StorageDead(_119),
            StorageDead(_117),
            StorageDead(_116),
            StorageLive(_124),
            StorageLive(_125),
            StorageLive(_126),
            StorageLive(_127),
            _127 = &(*_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1135:33: 1135:44 (#0),
                    scope: scope[14],
                },
                kind: _126 = core::slice::<impl [u8]>::len(move _127) -> [return: bb56, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            _128 = SubWithOverflow(_126, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1135:33: 1135:48 (#0),
                    scope: scope[14],
                },
                kind: assert(!move (_128.1: bool), "attempt to compute `{} - {}`, which would overflow", move _126, const 4_usize) -> [success: bb57, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _125 = move (_128.0: usize),
            StorageDead(_126),
            _124 = Le(move _125, const uts46::PUNYCODE_DECODE_MAX_INPUT_LENGTH),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1135:32: 1135:85 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _124) -> [0: bb86, otherwise: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            StorageLive(_130),
            StorageLive(_131),
            StorageLive(_132),
            StorageLive(_133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1138:33: 1138:51 (#0),
                    scope: scope[16],
                },
                kind: _133 = <punycode::Decoder as core::default::Default>::default() -> [return: bb59, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _132 = &mut _133,
            StorageLive(_134),
            StorageLive(_135),
            StorageLive(_136),
            StorageLive(_137),
            _137 = &(*_105),
            StorageLive(_138),
            _138 = core::ops::RangeFrom::<usize> { start: const 4_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1138:87: 1138:92 (#0),
                    scope: scope[16],
                },
                kind: _136 = <[u8] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _137, move _138) -> [return: bb60, unwind: bb382],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
            StorageDead(_137),
            _135 = &(*_136),
            _134 = &(*_135),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1138:33: 1138:93 (#0),
                    scope: scope[16],
                },
                kind: _131 = punycode::Decoder::decode::<u8, punycode::InternalCaller>(move _132, move _134) -> [return: bb61, unwind: bb382],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_134),
            StorageDead(_132),
            PlaceMention(_131),
            _139 = discriminant(_131),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1137:36: 1137:46 (#0),
                    scope: scope[16],
                },
                kind: switchInt(move _139) -> [0: bb62, otherwise: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1137:36: 1137:46 (#0),
                    scope: scope[16],
                },
                kind: falseEdge -> [real: bb63, imaginary: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_140),
            _140 = move ((_131 as Ok).0: punycode::Decode<'_, u8, punycode::InternalCaller>),
            StorageLive(_141),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1142:56: 1142:85 (#0),
                    scope: scope[16],
                },
                kind: _141 = smallvec::SmallVec::<[char; 59]>::new() -> [return: bb64, unwind: bb382],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _141),
            StorageLive(_142),
            StorageLive(_143),
            _143 = &mut _141,
            StorageLive(_144),
            _144 = move _140,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1143:33: 1143:60 (#0),
                    scope: scope[17],
                },
                kind: _142 = <smallvec::SmallVec<[char; 59]> as core::iter::Extend<char>>::extend::<punycode::Decode<'_, u8, punycode::InternalCaller>>(move _143, move _144) -> [return: bb65, unwind: bb381],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
            StorageDead(_143),
            StorageDead(_142),
            StorageLive(_145),
            StorageLive(_146),
            StorageLive(_147),
            _147 = &(*_1),
            StorageLive(_148),
            _148 = &mut (*_6),
            StorageLive(_149),
            _149 = _19,
            StorageLive(_150),
            StorageLive(_151),
            StorageLive(_152),
            StorageLive(_153),
            _153 = &_141,
            _152 = &(*_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1148:37: 1148:50 (#0),
                    scope: scope[17],
                },
                kind: _151 = <smallvec::SmallVec<[char; 59]> as core::ops::Deref>::deref(move _152) -> [return: bb66, unwind: bb381],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _150 = &(*_151),
            StorageDead(_152),
            StorageLive(_154),
            _154 = _10,
            StorageLive(_155),
            _155 = _5,
            StorageLive(_156),
            StorageLive(_157),
            _157 = &mut _12,
            _156 = &mut (*_157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1145:36: 1152:34 (#0),
                    scope: scope[17],
                },
                kind: _146 = uts46::Uts46::after_punycode_decode(move _147, move _148, move _149, move _150, move _154, move _155, move _156) -> [return: bb67, unwind: bb381],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1145:36: 1152:34 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _146) -> [0: bb69, otherwise: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
            StorageDead(_156),
            StorageDead(_155),
            StorageDead(_154),
            StorageDead(_153),
            StorageDead(_151),
            StorageDead(_150),
            StorageDead(_149),
            StorageDead(_148),
            StorageDead(_147),
            _0 = (const 0_usize, const false, const true),
            StorageDead(_146),
            StorageDead(_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[17],
                },
                kind: goto -> bb369,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
            StorageDead(_156),
            StorageDead(_155),
            StorageDead(_154),
            StorageDead(_153),
            StorageDead(_151),
            StorageDead(_150),
            StorageDead(_149),
            StorageDead(_148),
            StorageDead(_147),
            _145 = const (),
            StorageDead(_146),
            StorageDead(_145),
            StorageLive(_159),
            StorageLive(_160),
            _160 = &(*_1),
            StorageLive(_161),
            _161 = _4,
            StorageLive(_162),
            StorageLive(_163),
            StorageLive(_164),
            StorageLive(_165),
            _165 = &mut (*_6),
            StorageLive(_166),
            StorageLive(_167),
            _167 = _19,
            _166 = core::ops::RangeFrom::<usize> { start: move _167 },
            StorageDead(_167),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1158:55: 1158:78 (#0),
                    scope: scope[17],
                },
                kind: _164 = <smallvec::SmallVec<[char; 253]> as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _165, move _166) -> [return: bb70, unwind: bb381],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_166),
            StorageDead(_165),
            _163 = &mut (*_164),
            _162 = &mut (*_163),
            StorageLive(_168),
            _168 = _5,
            StorageLive(_169),
            StorageLive(_170),
            _170 = &mut _12,
            _169 = &mut (*_170),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1156:36: 1163:34 (#0),
                    scope: scope[17],
                },
                kind: _159 = uts46::Uts46::check_label(move _160, move _161, move _162, move _168, move _169, const true, const true) -> [return: bb71, unwind: bb381],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1156:36: 1163:34 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _159) -> [0: bb73, otherwise: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_170),
            StorageDead(_169),
            StorageDead(_168),
            StorageDead(_164),
            StorageDead(_163),
            StorageDead(_162),
            StorageDead(_161),
            StorageDead(_160),
            _0 = (const 0_usize, const false, const true),
            StorageDead(_159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[17],
                },
                kind: goto -> bb369,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_170),
            StorageDead(_169),
            StorageDead(_168),
            StorageDead(_164),
            StorageDead(_163),
            StorageDead(_162),
            StorageDead(_161),
            StorageDead(_160),
            _130 = const (),
            StorageDead(_159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1166:29: 1166:30 (#0),
                    scope: scope[16],
                },
                kind: drop(_141) -> [return: bb74, unwind: bb382],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
            StorageDead(_140),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1137:29: 1183:30 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_172),
            StorageLive(_173),
            _173 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1168:36: 1168:45 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _173) -> [0: bb77, otherwise: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_173),
            StorageDead(_172),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb371,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _172 = const (),
            StorageDead(_173),
            StorageDead(_172),
            _12 = const true,
            StorageLive(_175),
            StorageLive(_176),
            _176 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1172:33: 1172:63 (#0),
                    scope: scope[14],
                },
                kind: _175 = smallvec::SmallVec::<[char; 253]>::push(move _176, const '�') -> [return: bb78, unwind: bb382],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_176),
            StorageDead(_175),
            StorageLive(_177),
            StorageLive(_178),
            _178 = &(*_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1173:48: 1173:60 (#0),
                    scope: scope[14],
                },
                kind: _177 = core::slice::<impl [u8]>::iter(move _178) -> [return: bb79, unwind: bb382],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_178),
            FakeRead(ForLet(None), _177),
            StorageLive(_179),
            StorageLive(_180),
            _180 = &mut _177,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1175:41: 1175:52 (#0),
                    scope: scope[18],
                },
                kind: _179 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::next(move _180) -> [return: bb80, unwind: bb382],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_180),
            PlaceMention(_179),
            StorageDead(_179),
            StorageLive(_181),
            StorageLive(_182),
            _182 = &mut (*_6),
            StorageLive(_183),
            StorageLive(_184),
            _184 = move _177,
            StorageLive(_185),
            StorageLive(_186),
            _186 = &_9,
            _185 = {closure@idna/src/uts46.rs:1176:63: 1176:66} { deny_list: move _186 },
            StorageDead(_186),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1176:54: 1182:35 (#0),
                    scope: scope[19],
                },
                kind: _183 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::map::<char, {closure@idna/src/uts46.rs:1176:63: 1176:66}>(move _184, move _185) -> [return: bb81, unwind: bb382],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_185),
            StorageDead(_184),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1176:33: 1182:36 (#0),
                    scope: scope[19],
                },
                kind: _181 = <smallvec::SmallVec<[char; 253]> as core::iter::Extend<char>>::extend::<core::iter::Map<core::slice::Iter<'_, u8>, {closure@idna/src/uts46.rs:1176:63: 1176:66}>>(move _182, move _183) -> [return: bb82, unwind: bb382],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_183),
            StorageDead(_182),
            StorageDead(_181),
            _130 = const (),
            StorageDead(_177),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1137:29: 1183:30 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb83,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_135),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1183:30: 1183:31 (#0),
                    scope: scope[14],
                },
                kind: drop(_133) -> [return: bb84, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
            StorageDead(_131),
            StorageDead(_130),
            StorageLive(_187),
            StorageLive(_188),
            _188 = &mut (*_7),
            StorageLive(_189),
            StorageLive(_190),
            _190 = &(*_35),
            _189 = uts46::AlreadyAsciiLabel::<'_>::MixedCasePunycode(move _190),
            StorageDead(_190),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1186:29: 1186:95 (#0),
                    scope: scope[14],
                },
                kind: _187 = smallvec::SmallVec::<[uts46::AlreadyAsciiLabel<'_>; 8]>::push(move _188, move _189) -> [return: bb85, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_189),
            StorageDead(_188),
            StorageDead(_187),
            StorageDead(_124),
            StorageDead(_115),
            StorageDead(_114),
            StorageDead(_112),
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb226,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb88,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_123),
            StorageDead(_122),
            StorageDead(_120),
            StorageDead(_119),
            StorageDead(_117),
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb88,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_191),
            _191 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1188:35: 1188:44 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _191) -> [0: bb90, otherwise: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_191),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb373,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _114 = const (),
            StorageDead(_191),
            StorageDead(_124),
            StorageDead(_115),
            StorageDead(_114),
            _109 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1133:21: 1196:22 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb92,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            _109 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1133:21: 1196:22 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb92,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1132:48: 1199:18 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            _109 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1132:48: 1199:18 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb94,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_110),
            FakeRead(ForLet(None), _109),
            StorageLive(_193),
            StorageLive(_194),
            StorageLive(_195),
            StorageLive(_196),
            StorageLive(_197),
            _197 = &(*_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1200:26: 1200:38 (#0),
                    scope: scope[15],
                },
                kind: _196 = core::slice::<impl [u8]>::iter(move _197) -> [return: bb95, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_197),
            StorageLive(_198),
            StorageLive(_199),
            _199 = &_9,
            _198 = {closure@idna/src/uts46.rs:1200:43: 1200:46} { deny_list: move _199 },
            StorageDead(_199),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1200:26: 1204:19 (#0),
                    scope: scope[15],
                },
                kind: _195 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::map::<char, {closure@idna/src/uts46.rs:1200:43: 1200:46}>(move _196, move _198) -> [return: bb96, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_198),
            StorageDead(_196),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
                    scope: scope[15],
                },
                kind: _194 = <core::iter::Map<core::slice::Iter<'_, u8>, {closure@idna/src/uts46.rs:1200:43: 1200:46}> as core::iter::IntoIterator>::into_iter(move _195) -> [return: bb97, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_195),
            PlaceMention(_194),
            StorageLive(_200),
            _200 = move _194,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1200:17: 1212:18 (#495),
                    scope: scope[20],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1200:17: 1212:18 (#495),
                    scope: scope[20],
                },
                kind: falseUnwind -> [real: bb99, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_201),
            StorageLive(_202),
            StorageLive(_203),
            StorageLive(_204),
            _204 = &mut _200,
            _203 = &mut (*_204),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
                    scope: scope[20],
                },
                kind: _202 = <core::iter::Map<core::slice::Iter<'_, u8>, {closure@idna/src/uts46.rs:1200:43: 1200:46}> as core::iter::Iterator>::next(move _203) -> [return: bb100, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_203),
            PlaceMention(_202),
            _205 = discriminant(_202),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
                    scope: scope[20],
                },
                kind: switchInt(move _205) -> [0: bb102, 1: bb103, otherwise: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _202),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
                    scope: scope[20],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1200:17: 1212:18 (#495),
                    scope: scope[20],
                },
                kind: falseEdge -> [real: bb104, imaginary: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_207),
            _207 = ((_202 as Some).0: char),
            StorageLive(_208),
            StorageLive(_209),
            StorageLive(_210),
            _210 = _207,
            _209 = Eq(move _210, const '�'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1205:24: 1205:39 (#0),
                    scope: scope[21],
                },
                kind: switchInt(move _209) -> [0: bb108, otherwise: bb105],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _193 = const (),
            StorageDead(_204),
            StorageDead(_202),
            StorageDead(_201),
            StorageDead(_200),
            StorageDead(_194),
            StorageDead(_193),
            StorageLive(_217),
            StorageLive(_218),
            _218 = _109,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1213:20: 1213:44 (#0),
                    scope: scope[15],
                },
                kind: switchInt(move _218) -> [0: bb112, otherwise: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_210),
            StorageLive(_211),
            StorageLive(_212),
            _212 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1206:28: 1206:37 (#0),
                    scope: scope[21],
                },
                kind: switchInt(move _212) -> [0: bb107, otherwise: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_212),
            StorageDead(_211),
            StorageDead(_209),
            StorageDead(_208),
            StorageDead(_207),
            StorageDead(_204),
            StorageDead(_202),
            StorageDead(_201),
            StorageDead(_200),
            StorageDead(_194),
            StorageDead(_193),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[15],
                },
                kind: goto -> bb374,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _211 = const (),
            StorageDead(_212),
            StorageDead(_211),
            _12 = const true,
            _208 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1205:21: 1210:22 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb109,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_210),
            _208 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1205:21: 1210:22 (#0),
                    scope: scope[21],
                },
                kind: goto -> bb109,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_209),
            StorageDead(_208),
            StorageLive(_214),
            StorageLive(_215),
            _215 = &mut (*_6),
            StorageLive(_216),
            _216 = _207,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1211:21: 1211:42 (#0),
                    scope: scope[21],
                },
                kind: _214 = smallvec::SmallVec::<[char; 253]>::push(move _215, move _216) -> [return: bb110, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_216),
            StorageDead(_215),
            StorageDead(_214),
            _201 = const (),
            StorageDead(_207),
            StorageDead(_204),
            StorageDead(_202),
            StorageDead(_201),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1200:17: 1212:18 (#495),
                    scope: scope[20],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_220),
            StorageLive(_221),
            StorageLive(_222),
            _222 = &_4,
            StorageLive(_223),
            StorageLive(_224),
            _224 = uts46::Hyphens::Allow,
            _223 = &_224,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1214:24: 1214:49 (#0),
                    scope: scope[15],
                },
                kind: _221 = <uts46::Hyphens as core::cmp::PartialEq>::ne(move _222, move _223) -> [return: bb113, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _217 = const (),
            StorageDead(_218),
            StorageDead(_217),
            StorageLive(_245),
            StorageLive(_246),
            _246 = &mut (*_7),
            StorageLive(_247),
            _247 = uts46::AlreadyAsciiLabel::<'_>::Other,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1231:17: 1231:64 (#0),
                    scope: scope[15],
                },
                kind: _245 = smallvec::SmallVec::<[uts46::AlreadyAsciiLabel<'_>; 8]>::push(move _246, move _247) -> [return: bb126, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1214:24: 1214:49 (#0),
                    scope: scope[15],
                },
                kind: switchInt(move _221) -> [0: bb120, otherwise: bb114],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_224),
            StorageDead(_223),
            StorageDead(_222),
            StorageLive(_225),
            StorageLive(_226),
            StorageLive(_227),
            StorageLive(_228),
            StorageLive(_229),
            _229 = &mut (*_6),
            StorageLive(_230),
            StorageLive(_231),
            _231 = _19,
            _230 = core::ops::RangeFrom::<usize> { start: move _231 },
            StorageDead(_231),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1216:47: 1216:70 (#0),
                    scope: scope[15],
                },
                kind: _228 = <smallvec::SmallVec<[char; 253]> as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _229, move _230) -> [return: bb115, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_230),
            StorageDead(_229),
            _227 = &mut (*_228),
            _226 = &mut (*_227),
            StorageLive(_232),
            StorageLive(_233),
            _233 = &_4,
            StorageLive(_234),
            StorageLive(_235),
            _235 = uts46::Hyphens::CheckFirstLast,
            _234 = &_235,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1217:29: 1217:63 (#0),
                    scope: scope[15],
                },
                kind: _232 = <uts46::Hyphens as core::cmp::PartialEq>::eq(move _233, move _234) -> [return: bb116, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_234),
            StorageDead(_233),
            StorageLive(_236),
            _236 = _5,
            StorageLive(_237),
            StorageLive(_238),
            _238 = &mut _12,
            _237 = &mut (*_238),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1215:28: 1220:26 (#0),
                    scope: scope[15],
                },
                kind: _225 = uts46::check_hyphens(move _226, move _232, move _236, move _237) -> [return: bb117, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1215:28: 1220:26 (#0),
                    scope: scope[15],
                },
                kind: switchInt(move _225) -> [0: bb119, otherwise: bb118],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_238),
            StorageDead(_237),
            StorageDead(_236),
            StorageDead(_235),
            StorageDead(_232),
            StorageDead(_228),
            StorageDead(_227),
            StorageDead(_226),
            _0 = (const 0_usize, const false, const true),
            StorageDead(_225),
            StorageDead(_221),
            StorageDead(_220),
            StorageDead(_218),
            StorageDead(_217),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[15],
                },
                kind: goto -> bb374,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_238),
            StorageDead(_237),
            StorageDead(_236),
            StorageDead(_235),
            StorageDead(_232),
            StorageDead(_228),
            StorageDead(_227),
            StorageDead(_226),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[15],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_224),
            StorageDead(_223),
            StorageDead(_222),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[15],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _220 = const (),
            StorageDead(_225),
            StorageDead(_221),
            StorageDead(_220),
            StorageLive(_240),
            StorageLive(_241),
            _241 = &mut (*_7),
            StorageLive(_242),
            StorageLive(_243),
            _243 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1224:46: 1224:56 (#0),
                    scope: scope[15],
                },
                kind: switchInt(move _243) -> [0: bb123, otherwise: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _242 = uts46::AlreadyAsciiLabel::<'_>::Other,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1224:43: 1228:22 (#0),
                    scope: scope[15],
                },
                kind: goto -> bb124,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_244),
            _244 = &(*_35),
            _242 = uts46::AlreadyAsciiLabel::<'_>::MixedCaseAscii(move _244),
            StorageDead(_244),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1224:43: 1228:22 (#0),
                    scope: scope[15],
                },
                kind: goto -> bb124,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_243),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1224:21: 1228:23 (#0),
                    scope: scope[15],
                },
                kind: _240 = smallvec::SmallVec::<[uts46::AlreadyAsciiLabel<'_>; 8]>::push(move _241, move _242) -> [return: bb125, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_242),
            StorageDead(_241),
            StorageDead(_240),
            StorageDead(_218),
            StorageDead(_217),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[15],
                },
                kind: goto -> bb226,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_247),
            StorageDead(_246),
            StorageDead(_245),
            StorageLive(_248),
            StorageLive(_249),
            _249 = &(*_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1232:60: 1232:76 (#0),
                    scope: scope[15],
                },
                kind: _248 = core::slice::<impl [u8]>::is_empty(move _249) -> [return: bb127, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_249),
            FakeRead(ForLet(None), _248),
            StorageLive(_250),
            StorageLive(_251),
            StorageLive(_252),
            _252 = &(*_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1233:49: 1233:69 (#0),
                    scope: scope[22],
                },
                kind: _251 = core::slice::<impl [u8]>::is_empty(move _252) -> [return: bb128, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_252),
            _250 = Not(move _251),
            StorageDead(_251),
            FakeRead(ForLet(None), _250),
            StorageLive(_253),
            StorageLive(_254),
            StorageLive(_255),
            _255 = &((*_1).0: idna_adapter::Adapter),
            StorageLive(_256),
            StorageLive(_257),
            _257 = &(*_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1236:36: 1236:53 (#0),
                    scope: scope[23],
                },
                kind: _256 = <[u8] as utf8_iter::Utf8CharsEx>::chars(move _257) -> [return: bb129, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_257),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1234:35: 1236:54 (#0),
                    scope: scope[23],
                },
                kind: _254 = idna_adapter::Adapter::map_normalize::<'_, utf8_iter::Utf8Chars<'_>>(move _255, move _256) -> [return: bb130, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_256),
            StorageDead(_255),
            StorageLive(_258),
            StorageLive(_259),
            _259 = &_9,
            _258 = {closure@idna/src/uts46.rs:1237:26: 1237:29} { deny_list: move _259 },
            StorageDead(_259),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1234:35: 1237:89 (#0),
                    scope: scope[23],
                },
                kind: _253 = <impl core::iter::Iterator<Item = char> + '_ as core::iter::Iterator>::map::<char, {closure@idna/src/uts46.rs:1237:26: 1237:29}>(move _254, move _258) -> [return: bb131, unwind: bb380],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_258),
            StorageDead(_254),
            FakeRead(ForLet(None), _253),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1238:17: 1360:18 (#0),
                    scope: scope[24],
                },
                kind: goto -> bb132,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1238:17: 1360:18 (#0),
                    scope: scope[24],
                },
                kind: falseUnwind -> [real: bb133, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_260),
            StorageLive(_261),
            _261 = &mut _253,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1239:29: 1239:43 (#0),
                    scope: scope[24],
                },
                kind: _260 = <core::iter::Map<impl core::iter::Iterator<Item = char> + '_, {closure@idna/src/uts46.rs:1237:26: 1237:29}> as core::iter::Iterator>::next(move _261) -> [return: bb134, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_261),
            FakeRead(ForLet(None), _260),
            PlaceMention(_260),
            _262 = discriminant(_260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1240:21: 1240:28 (#0),
                    scope: scope[25],
                },
                kind: switchInt(move _262) -> [0: bb138, 1: bb136, otherwise: bb135],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1240:27: 1240:28 (#0),
                    scope: scope[25],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1240:21: 1240:28 (#0),
                    scope: scope[25],
                },
                kind: switchInt(((_260 as Some).0: char)) -> [46: bb138, otherwise: bb137],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_399),
            _399 = ((_260 as Some).0: char),
            StorageLive(_400),
            StorageLive(_401),
            StorageLive(_402),
            _402 = _399,
            _401 = Eq(move _402, const '�'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1351:32: 1351:47 (#0),
                    scope: scope[32],
                },
                kind: switchInt(move _401) -> [0: bb219, otherwise: bb216],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1241:25: 1241:41 (#0),
                    scope: scope[25],
                },
                kind: falseEdge -> [real: bb139, imaginary: bb137],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_263),
            StorageLive(_264),
            StorageLive(_265),
            StorageLive(_266),
            StorageLive(_267),
            _267 = &(*_6),
            StorageLive(_268),
            StorageLive(_269),
            _269 = _19,
            _268 = core::ops::RangeFrom::<usize> { start: move _269 },
            StorageDead(_269),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1242:45: 1242:68 (#0),
                    scope: scope[25],
                },
                kind: _266 = <smallvec::SmallVec<[char; 253]> as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _267, move _268) -> [return: bb140, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _265 = &(*_266),
            StorageDead(_268),
            StorageDead(_267),
            StorageLive(_270),
            StorageLive(_271),
            StorageLive(_272),
            StorageLive(_273),
            _273 = [const 'x', const 'n', const '-', const '-'],
            _272 = &_273,
            _271 = &(*_272),
            _270 = move _271 as &[char] (PointerCoercion(Unsize)),
            StorageDead(_271),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1242:32: 1243:68 (#0),
                    scope: scope[25],
                },
                kind: _264 = core::slice::<impl [char]>::starts_with(move _265, move _270) -> [return: bb141, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1242:32: 1243:68 (#0),
                    scope: scope[25],
                },
                kind: switchInt(move _264) -> [0: bb204, otherwise: bb142],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_273),
            StorageDead(_272),
            StorageDead(_270),
            StorageDead(_266),
            StorageDead(_265),
            StorageLive(_274),
            _274 = const false,
            FakeRead(ForLet(None), _274),
            StorageLive(_275),
            StorageLive(_276),
            StorageLive(_277),
            StorageLive(_278),
            StorageLive(_279),
            StorageLive(_280),
            _280 = &mut (*_6),
            StorageLive(_281),
            StorageLive(_282),
            StorageLive(_283),
            _283 = _19,
            _284 = AddWithOverflow(_283, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:56: 1246:79 (#0),
                    scope: scope[26],
                },
                kind: assert(!move (_284.1: bool), "attempt to compute `{} + {}`, which would overflow", move _283, const 4_usize) -> [success: bb143, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _282 = move (_284.0: usize),
            StorageDead(_283),
            _281 = core::ops::RangeFrom::<usize> { start: move _282 },
            StorageDead(_282),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:55: 1246:82 (#0),
                    scope: scope[26],
                },
                kind: _279 = <smallvec::SmallVec<[char; 253]> as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _280, move _281) -> [return: bb144, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _278 = &mut (*_279),
            StorageDead(_281),
            StorageDead(_280),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:42: 1246:93 (#0),
                    scope: scope[26],
                },
                kind: _277 = core::slice::<impl [char]>::iter_mut(move _278) -> [return: bb145, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_278),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
                    scope: scope[26],
                },
                kind: _276 = <core::slice::IterMut<'_, char> as core::iter::IntoIterator>::into_iter(move _277) -> [return: bb146, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_277),
            PlaceMention(_276),
            StorageLive(_285),
            _285 = move _276,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:33: 1255:34 (#504),
                    scope: scope[27],
                },
                kind: goto -> bb147,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:33: 1255:34 (#504),
                    scope: scope[27],
                },
                kind: falseUnwind -> [real: bb148, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_286),
            StorageLive(_287),
            StorageLive(_288),
            StorageLive(_289),
            _289 = &mut _285,
            _288 = &mut (*_289),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
                    scope: scope[27],
                },
                kind: _287 = <core::slice::IterMut<'_, char> as core::iter::Iterator>::next(move _288) -> [return: bb149, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_288),
            PlaceMention(_287),
            _290 = discriminant(_287),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
                    scope: scope[27],
                },
                kind: switchInt(move _290) -> [0: bb151, 1: bb152, otherwise: bb150],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _287),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
                    scope: scope[27],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:33: 1255:34 (#504),
                    scope: scope[27],
                },
                kind: falseEdge -> [real: bb153, imaginary: bb152],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_292),
            _292 = move ((_287 as Some).0: &mut char),
            StorageLive(_293),
            StorageLive(_294),
            _294 = &(*_292),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1247:41: 1247:53 (#0),
                    scope: scope[28],
                },
                kind: _293 = core::char::methods::<impl char>::is_ascii(move _294) -> [return: bb154, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _275 = const (),
            StorageDead(_289),
            StorageDead(_287),
            StorageDead(_286),
            StorageDead(_285),
            StorageDead(_279),
            StorageDead(_276),
            StorageDead(_275),
            StorageLive(_298),
            StorageLive(_299),
            StorageLive(_300),
            StorageLive(_301),
            StorageLive(_302),
            _302 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1257:53: 1257:77 (#0),
                    scope: scope[29],
                },
                kind: _301 = <smallvec::SmallVec<[char; 253]> as core::ops::DerefMut>::deref_mut(move _302) -> [return: bb160, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1247:41: 1247:53 (#0),
                    scope: scope[28],
                },
                kind: switchInt(move _293) -> [0: bb156, otherwise: bb155],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_294),
            _286 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1247:37: 1254:38 (#0),
                    scope: scope[28],
                },
                kind: goto -> bb159,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_294),
            StorageLive(_295),
            StorageLive(_296),
            _296 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1248:44: 1248:53 (#0),
                    scope: scope[28],
                },
                kind: switchInt(move _296) -> [0: bb158, otherwise: bb157],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_296),
            StorageDead(_295),
            StorageDead(_293),
            StorageDead(_292),
            StorageDead(_289),
            StorageDead(_287),
            StorageDead(_286),
            StorageDead(_285),
            StorageDead(_279),
            StorageDead(_276),
            StorageDead(_275),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[26],
                },
                kind: goto -> bb366,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _295 = const (),
            StorageDead(_296),
            StorageDead(_295),
            _12 = const true,
            (*_292) = const '�',
            _274 = const true,
            _286 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1247:37: 1254:38 (#0),
                    scope: scope[28],
                },
                kind: goto -> bb159,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_293),
            StorageDead(_292),
            StorageDead(_289),
            StorageDead(_287),
            StorageDead(_286),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1246:33: 1255:34 (#504),
                    scope: scope[27],
                },
                kind: goto -> bb147,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _300 = &mut (*_301),
            StorageDead(_302),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1257:53: 1257:77 (#0),
                    scope: scope[29],
                },
                kind: _299 = core::slice::<impl [char]>::last_mut(move _300) -> [return: bb161, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_300),
            PlaceMention(_299),
            _303 = discriminant(_299),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1257:40: 1257:50 (#0),
                    scope: scope[29],
                },
                kind: switchInt(move _303) -> [1: bb162, otherwise: bb169],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1257:40: 1257:50 (#0),
                    scope: scope[29],
                },
                kind: falseEdge -> [real: bb163, imaginary: bb169],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_304),
            _304 = move ((_299 as Some).0: &mut char),
            StorageLive(_305),
            StorageLive(_306),
            _306 = (*_304),
            _305 = Eq(move _306, const '-'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1258:40: 1258:52 (#0),
                    scope: scope[29],
                },
                kind: switchInt(move _305) -> [0: bb167, otherwise: bb164],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_306),
            StorageLive(_307),
            StorageLive(_308),
            _308 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1264:44: 1264:53 (#0),
                    scope: scope[29],
                },
                kind: switchInt(move _308) -> [0: bb166, otherwise: bb165],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_308),
            StorageDead(_307),
            StorageDead(_305),
            StorageDead(_304),
            StorageDead(_301),
            StorageDead(_299),
            StorageDead(_298),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[26],
                },
                kind: goto -> bb366,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _307 = const (),
            StorageDead(_308),
            StorageDead(_307),
            _12 = const true,
            (*_304) = const '�',
            _274 = const true,
            _298 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1258:37: 1270:38 (#0),
                    scope: scope[29],
                },
                kind: goto -> bb168,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_306),
            _298 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1258:37: 1270:38 (#0),
                    scope: scope[29],
                },
                kind: goto -> bb168,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_305),
            StorageDead(_304),
            StorageDead(_301),
            StorageDead(_299),
            StorageDead(_298),
            StorageLive(_312),
            StorageLive(_313),
            StorageLive(_314),
            StorageLive(_315),
            StorageLive(_316),
            StorageLive(_317),
            _317 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1278:36: 1278:55 (#0),
                    scope: scope[26],
                },
                kind: _316 = smallvec::SmallVec::<[char; 253]>::len(move _317) -> [return: bb170, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_311),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:119:9: 119:77 (#155),
                    scope: scope[26],
                },
                kind: _311 = core::panicking::panic(const "internal error: entered unreachable code") -> bb379,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_317),
            StorageLive(_318),
            _318 = _19,
            _319 = SubWithOverflow(_316, _318),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1278:36: 1278:77 (#0),
                    scope: scope[26],
                },
                kind: assert(!move (_319.1: bool), "attempt to compute `{} - {}`, which would overflow", move _316, move _318) -> [success: bb171, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _315 = move (_319.0: usize),
            StorageDead(_318),
            StorageDead(_316),
            _320 = SubWithOverflow(_315, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1278:36: 1278:81 (#0),
                    scope: scope[26],
                },
                kind: assert(!move (_320.1: bool), "attempt to compute `{} - {}`, which would overflow", move _315, const 4_usize) -> [success: bb172, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _314 = move (_320.0: usize),
            StorageDead(_315),
            _313 = Gt(move _314, const uts46::PUNYCODE_DECODE_MAX_INPUT_LENGTH),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1278:36: 1279:71 (#0),
                    scope: scope[26],
                },
                kind: switchInt(move _313) -> [0: bb179, otherwise: bb173],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_314),
            StorageLive(_321),
            StorageLive(_322),
            _322 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1281:40: 1281:49 (#0),
                    scope: scope[26],
                },
                kind: switchInt(move _322) -> [0: bb175, otherwise: bb174],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_322),
            StorageDead(_321),
            StorageDead(_313),
            StorageDead(_312),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[26],
                },
                kind: goto -> bb366,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _321 = const (),
            StorageDead(_322),
            StorageDead(_321),
            _12 = const true,
            StorageLive(_324),
            StorageLive(_325),
            _325 = &mut (*_6),
            StorageLive(_326),
            StorageLive(_327),
            StorageLive(_328),
            _328 = _19,
            _329 = AddWithOverflow(_328, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1285:51: 1286:44 (#0),
                    scope: scope[26],
                },
                kind: assert(!move (_329.1: bool), "attempt to compute `{} + {}`, which would overflow", move _328, const 4_usize) -> [success: bb176, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _327 = move (_329.0: usize),
            StorageDead(_328),
            _330 = AddWithOverflow(_327, const uts46::PUNYCODE_DECODE_MAX_INPUT_LENGTH),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1285:51: 1287:75 (#0),
                    scope: scope[26],
                },
                kind: assert(!move (_330.1: bool), "attempt to compute `{} + {}`, which would overflow", move _327, const uts46::PUNYCODE_DECODE_MAX_INPUT_LENGTH) -> [success: bb177, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _326 = move (_330.0: usize),
            StorageDead(_327),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1285:50: 1287:76 (#0),
                    scope: scope[26],
                },
                kind: _324 = <smallvec::SmallVec<[char; 253]> as core::ops::IndexMut<usize>>::index_mut(move _325, move _326) -> [return: bb178, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_326),
            StorageDead(_325),
            (*_324) = const '�',
            StorageDead(_324),
            _274 = const true,
            _312 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1278:33: 1289:34 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb180,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_314),
            _312 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1278:33: 1289:34 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb180,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_313),
            StorageDead(_312),
            StorageLive(_331),
            _331 = _274,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1291:37: 1291:65 (#0),
                    scope: scope[26],
                },
                kind: switchInt(move _331) -> [0: bb181, otherwise: bb202],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_332),
            StorageLive(_333),
            StorageLive(_334),
            StorageLive(_335),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1292:57: 1292:75 (#0),
                    scope: scope[30],
                },
                kind: _335 = <punycode::Decoder as core::default::Default>::default() -> [return: bb182, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _334 = &mut _335,
            StorageLive(_336),
            StorageLive(_337),
            StorageLive(_338),
            StorageLive(_339),
            _339 = &(*_6),
            StorageLive(_340),
            StorageLive(_341),
            StorageLive(_342),
            _342 = _19,
            _343 = AddWithOverflow(_342, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1294:60: 1294:83 (#0),
                    scope: scope[30],
                },
                kind: assert(!move (_343.1: bool), "attempt to compute `{} + {}`, which would overflow", move _342, const 4_usize) -> [success: bb183, unwind: bb378],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _341 = move (_343.0: usize),
            StorageDead(_342),
            _340 = core::ops::RangeFrom::<usize> { start: move _341 },
            StorageDead(_341),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1294:59: 1294:86 (#0),
                    scope: scope[30],
                },
                kind: _338 = <smallvec::SmallVec<[char; 253]> as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _339, move _340) -> [return: bb184, unwind: bb378],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_340),
            StorageDead(_339),
            _337 = &(*_338),
            _336 = &(*_337),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1292:57: 1295:42 (#0),
                    scope: scope[30],
                },
                kind: _333 = punycode::Decoder::decode::<char, punycode::InternalCaller>(move _334, move _336) -> [return: bb185, unwind: bb378],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_336),
            StorageDead(_334),
            PlaceMention(_333),
            _344 = discriminant(_333),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1292:44: 1292:54 (#0),
                    scope: scope[30],
                },
                kind: switchInt(move _344) -> [0: bb186, otherwise: bb196],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1292:44: 1292:54 (#0),
                    scope: scope[30],
                },
                kind: falseEdge -> [real: bb187, imaginary: bb196],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_345),
            _345 = move ((_333 as Ok).0: punycode::Decode<'_, char, punycode::InternalCaller>),
            _248 = const true,
            _250 = const true,
            StorageLive(_346),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1301:64: 1301:93 (#0),
                    scope: scope[30],
                },
                kind: _346 = smallvec::SmallVec::<[char; 59]>::new() -> [return: bb188, unwind: bb378],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _346),
            StorageLive(_347),
            StorageLive(_348),
            _348 = &mut _346,
            StorageLive(_349),
            _349 = move _345,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1302:41: 1302:68 (#0),
                    scope: scope[31],
                },
                kind: _347 = <smallvec::SmallVec<[char; 59]> as core::iter::Extend<char>>::extend::<punycode::Decode<'_, char, punycode::InternalCaller>>(move _348, move _349) -> [return: bb189, unwind: bb377],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_349),
            StorageDead(_348),
            StorageDead(_347),
            StorageLive(_350),
            StorageLive(_351),
            _351 = &mut (*_6),
            StorageLive(_352),
            _352 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1304:41: 1304:84 (#0),
                    scope: scope[31],
                },
                kind: _350 = smallvec::SmallVec::<[char; 253]>::truncate(move _351, move _352) -> [return: bb190, unwind: bb377],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_352),
            StorageDead(_351),
            StorageDead(_350),
            StorageLive(_353),
            StorageLive(_354),
            _354 = &(*_1),
            StorageLive(_355),
            _355 = &mut (*_6),
            StorageLive(_356),
            _356 = _19,
            StorageLive(_357),
            StorageLive(_358),
            StorageLive(_359),
            StorageLive(_360),
            _360 = &_346,
            _359 = &(*_360),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1308:45: 1308:58 (#0),
                    scope: scope[31],
                },
                kind: _358 = <smallvec::SmallVec<[char; 59]> as core::ops::Deref>::deref(move _359) -> [return: bb191, unwind: bb377],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _357 = &(*_358),
            StorageDead(_359),
            StorageLive(_361),
            _361 = _10,
            StorageLive(_362),
            _362 = _5,
            StorageLive(_363),
            StorageLive(_364),
            _364 = &mut _12,
            _363 = &mut (*_364),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1305:44: 1312:42 (#0),
                    scope: scope[31],
                },
                kind: _353 = uts46::Uts46::after_punycode_decode(move _354, move _355, move _356, move _357, move _361, move _362, move _363) -> [return: bb192, unwind: bb377],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1305:44: 1312:42 (#0),
                    scope: scope[31],
                },
                kind: switchInt(move _353) -> [0: bb194, otherwise: bb193],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_364),
            StorageDead(_363),
            StorageDead(_362),
            StorageDead(_361),
            StorageDead(_360),
            StorageDead(_358),
            StorageDead(_357),
            StorageDead(_356),
            StorageDead(_355),
            StorageDead(_354),
            _0 = (const 0_usize, const false, const true),
            StorageDead(_353),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1315:37: 1315:38 (#0),
                    scope: scope[30],
                },
                kind: drop(_346) -> [return: bb363, unwind: bb378],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_364),
            StorageDead(_363),
            StorageDead(_362),
            StorageDead(_361),
            StorageDead(_360),
            StorageDead(_358),
            StorageDead(_357),
            StorageDead(_356),
            StorageDead(_355),
            StorageDead(_354),
            _332 = const (),
            StorageDead(_353),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1315:37: 1315:38 (#0),
                    scope: scope[30],
                },
                kind: drop(_346) -> [return: bb195, unwind: bb378],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_346),
            StorageDead(_345),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1292:37: 1324:38 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb200,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_366),
            StorageLive(_367),
            _367 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1317:44: 1317:53 (#0),
                    scope: scope[26],
                },
                kind: switchInt(move _367) -> [0: bb198, otherwise: bb197],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_367),
            StorageDead(_366),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[26],
                },
                kind: goto -> bb364,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _366 = const (),
            StorageDead(_367),
            StorageDead(_366),
            _12 = const true,
            StorageLive(_369),
            StorageLive(_370),
            _370 = &mut (*_6),
            StorageLive(_371),
            _371 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1321:54: 1321:75 (#0),
                    scope: scope[26],
                },
                kind: _369 = <smallvec::SmallVec<[char; 253]> as core::ops::IndexMut<usize>>::index_mut(move _370, move _371) -> [return: bb199, unwind: bb378],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_371),
            StorageDead(_370),
            (*_369) = const '�',
            StorageDead(_369),
            _250 = const false,
            _248 = const false,
            _332 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1292:37: 1324:38 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb200,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_338),
            StorageDead(_337),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1324:38: 1324:39 (#0),
                    scope: scope[26],
                },
                kind: drop(_335) -> [return: bb201, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_335),
            StorageDead(_333),
            StorageDead(_332),
            _263 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1291:33: 1328:34 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb203,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _248 = const false,
            _250 = const false,
            _263 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1291:33: 1328:34 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb203,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_331),
            StorageDead(_274),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1242:29: 1329:30 (#0),
                    scope: scope[25],
                },
                kind: goto -> bb205,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_273),
            StorageDead(_272),
            StorageDead(_270),
            StorageDead(_266),
            StorageDead(_265),
            _263 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1242:29: 1329:30 (#0),
                    scope: scope[25],
                },
                kind: goto -> bb205,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_264),
            StorageDead(_263),
            StorageLive(_372),
            StorageLive(_373),
            StorageLive(_374),
            _374 = &(*_1),
            StorageLive(_375),
            _375 = _4,
            StorageLive(_376),
            StorageLive(_377),
            StorageLive(_378),
            StorageLive(_379),
            _379 = &mut (*_6),
            StorageLive(_380),
            StorageLive(_381),
            _381 = _19,
            _380 = core::ops::RangeFrom::<usize> { start: move _381 },
            StorageDead(_381),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1332:51: 1332:74 (#0),
                    scope: scope[25],
                },
                kind: _378 = <smallvec::SmallVec<[char; 253]> as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _379, move _380) -> [return: bb206, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_380),
            StorageDead(_379),
            _377 = &mut (*_378),
            _376 = &mut (*_377),
            StorageLive(_382),
            _382 = _5,
            StorageLive(_383),
            StorageLive(_384),
            _384 = &mut _12,
            _383 = &mut (*_384),
            StorageLive(_385),
            _385 = _248,
            StorageLive(_386),
            _386 = _250,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1330:32: 1337:30 (#0),
                    scope: scope[25],
                },
                kind: _373 = uts46::Uts46::check_label(move _374, move _375, move _376, move _382, move _383, move _385, move _386) -> [return: bb207, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1330:32: 1337:30 (#0),
                    scope: scope[25],
                },
                kind: switchInt(move _373) -> [0: bb209, otherwise: bb208],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_386),
            StorageDead(_385),
            StorageDead(_384),
            StorageDead(_383),
            StorageDead(_382),
            StorageDead(_378),
            StorageDead(_377),
            StorageDead(_376),
            StorageDead(_375),
            StorageDead(_374),
            _0 = (const 0_usize, const false, const true),
            StorageDead(_373),
            StorageDead(_372),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[25],
                },
                kind: goto -> bb367,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_386),
            StorageDead(_385),
            StorageDead(_384),
            StorageDead(_383),
            StorageDead(_382),
            StorageDead(_378),
            StorageDead(_377),
            StorageDead(_376),
            StorageDead(_375),
            StorageDead(_374),
            _372 = const (),
            StorageDead(_373),
            StorageDead(_372),
            StorageLive(_388),
            StorageLive(_389),
            StorageLive(_390),
            _390 = &_260,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1341:32: 1341:43 (#0),
                    scope: scope[25],
                },
                kind: _389 = core::option::Option::<char>::is_none(move _390) -> [return: bb210, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1341:32: 1341:43 (#0),
                    scope: scope[25],
                },
                kind: switchInt(move _389) -> [0: bb212, otherwise: bb211],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_390),
            _29 = const (),
            StorageDead(_389),
            StorageDead(_388),
            StorageDead(_260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1361:13: 1361:14 (#0),
                    scope: scope[23],
                },
                kind: drop(_253) -> [return: bb223, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_390),
            _388 = const (),
            StorageDead(_389),
            StorageDead(_388),
            StorageLive(_392),
            StorageLive(_393),
            _393 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1344:29: 1344:52 (#0),
                    scope: scope[25],
                },
                kind: _392 = smallvec::SmallVec::<[char; 253]>::push(move _393, const '.') -> [return: bb213, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_393),
            StorageDead(_392),
            StorageLive(_394),
            StorageLive(_395),
            _395 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1345:51: 1345:70 (#0),
                    scope: scope[25],
                },
                kind: _394 = smallvec::SmallVec::<[char; 253]>::len(move _395) -> [return: bb214, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_395),
            _19 = move _394,
            StorageDead(_394),
            _248 = const true,
            _250 = const true,
            StorageLive(_396),
            StorageLive(_397),
            _397 = &mut (*_7),
            StorageLive(_398),
            _398 = uts46::AlreadyAsciiLabel::<'_>::Other,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1348:29: 1348:76 (#0),
                    scope: scope[25],
                },
                kind: _396 = smallvec::SmallVec::<[uts46::AlreadyAsciiLabel<'_>; 8]>::push(move _397, move _398) -> [return: bb215, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_398),
            StorageDead(_397),
            StorageDead(_396),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1241:45: 1349:26 (#0),
                    scope: scope[25],
                },
                kind: goto -> bb222,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_402),
            StorageLive(_403),
            StorageLive(_404),
            _404 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1352:36: 1352:45 (#0),
                    scope: scope[32],
                },
                kind: switchInt(move _404) -> [0: bb218, otherwise: bb217],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_404),
            StorageDead(_403),
            StorageDead(_401),
            StorageDead(_400),
            StorageDead(_399),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[25],
                },
                kind: goto -> bb367,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _403 = const (),
            StorageDead(_404),
            StorageDead(_403),
            _12 = const true,
            _400 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1351:29: 1356:30 (#0),
                    scope: scope[32],
                },
                kind: goto -> bb220,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_402),
            _400 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1351:29: 1356:30 (#0),
                    scope: scope[32],
                },
                kind: goto -> bb220,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_401),
            StorageDead(_400),
            StorageLive(_406),
            StorageLive(_407),
            _407 = &mut (*_6),
            StorageLive(_408),
            _408 = _399,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1357:29: 1357:50 (#0),
                    scope: scope[32],
                },
                kind: _406 = smallvec::SmallVec::<[char; 253]>::push(move _407, move _408) -> [return: bb221, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_408),
            StorageDead(_407),
            StorageDead(_406),
            _28 = const (),
            StorageDead(_399),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1358:25: 1358:26 (#0),
                    scope: scope[25],
                },
                kind: goto -> bb222,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1238:17: 1360:18 (#0),
                    scope: scope[24],
                },
                kind: goto -> bb132,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_253),
            StorageDead(_250),
            StorageDead(_248),
            StorageDead(_109),
            StorageDead(_106),
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1130:13: 1364:14 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb225,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_411),
            StorageDead(_410),
            StorageDead(_409),
            _29 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1130:13: 1364:14 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb225,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            StorageDead(_35),
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_29),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1096:9: 1365:10 (#472),
                    scope: scope[8],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_106),
            StorageDead(_105),
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[9],
                },
                kind: goto -> bb227,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _415 = &(*_416),
            StorageDead(_417),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1367:23: 1367:50 (#0),
                    scope: scope[7],
                },
                kind: _413 = uts46::Uts46::is_bidi(move _414, move _415) -> [return: bb229, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_415),
            StorageDead(_414),
            FakeRead(ForLet(None), _413),
            StorageDead(_416),
            StorageLive(_418),
            StorageLive(_419),
            _419 = _413,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1368:12: 1368:19 (#0),
                    scope: scope[33],
                },
                kind: switchInt(move _419) -> [0: bb356, otherwise: bb230],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_420),
            StorageLive(_421),
            StorageLive(_422),
            StorageLive(_423),
            StorageLive(_424),
            _424 = &mut (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1369:26: 1369:64 (#0),
                    scope: scope[33],
                },
                kind: _423 = <smallvec::SmallVec<[char; 253]> as core::ops::DerefMut>::deref_mut(move _424) -> [return: bb231, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _422 = &mut (*_423),
            StorageDead(_424),
            StorageLive(_425),
            _425 = {closure@idna/src/uts46.rs:1369:50: 1369:53},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1369:26: 1369:64 (#0),
                    scope: scope[33],
                },
                kind: _421 = core::slice::<impl [char]>::split_mut::<{closure@idna/src/uts46.rs:1369:50: 1369:53}>(move _422, move _425) -> [return: bb232, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_425),
            StorageDead(_422),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
                    scope: scope[33],
                },
                kind: _420 = <core::slice::SplitMut<'_, char, {closure@idna/src/uts46.rs:1369:50: 1369:53}> as core::iter::IntoIterator>::into_iter(move _421) -> [return: bb233, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_421),
            PlaceMention(_420),
            StorageLive(_426),
            _426 = move _420,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
                    scope: scope[34],
                },
                kind: goto -> bb234,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
                    scope: scope[34],
                },
                kind: falseUnwind -> [real: bb235, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_427),
            StorageLive(_428),
            StorageLive(_429),
            StorageLive(_430),
            _430 = &mut _426,
            _429 = &mut (*_430),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
                    scope: scope[34],
                },
                kind: _428 = <core::slice::SplitMut<'_, char, {closure@idna/src/uts46.rs:1369:50: 1369:53}> as core::iter::Iterator>::next(move _429) -> [return: bb236, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_429),
            PlaceMention(_428),
            _431 = discriminant(_428),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
                    scope: scope[34],
                },
                kind: switchInt(move _431) -> [0: bb238, 1: bb239, otherwise: bb237],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _428),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
                    scope: scope[34],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
                    scope: scope[34],
                },
                kind: falseEdge -> [real: bb240, imaginary: bb239],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_433),
            _433 = move ((_428 as Some).0: &mut [char]),
            StorageLive(_434),
            StorageLive(_435),
            _435 = &mut (*_433),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1370:46: 1370:69 (#0),
                    scope: scope[36],
                },
                kind: _434 = core::slice::<impl [char]>::split_first_mut(move _435) -> [return: bb241, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _418 = const (),
            StorageDead(_430),
            StorageDead(_428),
            StorageDead(_427),
            StorageDead(_426),
            StorageDead(_423),
            StorageDead(_420),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1368:9: 1473:10 (#0),
                    scope: scope[33],
                },
                kind: goto -> bb357,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_435),
            PlaceMention(_434),
            _436 = discriminant(_434),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1370:24: 1370:43 (#0),
                    scope: scope[36],
                },
                kind: switchInt(move _436) -> [1: bb242, otherwise: bb354],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1370:24: 1370:43 (#0),
                    scope: scope[36],
                },
                kind: falseEdge -> [real: bb243, imaginary: bb354],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_437),
            _437 = move (((_434 as Some).0: (&mut char, &mut [char])).0: &mut char),
            StorageLive(_438),
            _438 = move (((_434 as Some).0: (&mut char, &mut [char])).1: &mut [char]),
            StorageLive(_439),
            StorageLive(_440),
            _440 = &((*_1).0: idna_adapter::Adapter),
            StorageLive(_441),
            _441 = (*_437),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1371:36: 1371:64 (#0),
                    scope: scope[36],
                },
                kind: _439 = idna_adapter::Adapter::bidi_class(move _440, move _441) -> [return: bb244, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_441),
            StorageDead(_440),
            FakeRead(ForLet(None), _439),
            StorageLive(_442),
            StorageLive(_443),
            StorageLive(_444),
            StorageLive(_445),
            _445 = _439,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1372:50: 1372:68 (#0),
                    scope: scope[37],
                },
                kind: _444 = idna_adapter::BidiClass::to_mask(move _445) -> [return: bb245, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_445),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1372:25: 1372:69 (#0),
                    scope: scope[37],
                },
                kind: _443 = idna_adapter::BidiClassMask::intersects(const idna_adapter::FIRST_BC_MASK, move _444) -> [return: bb246, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1372:25: 1372:69 (#0),
                    scope: scope[37],
                },
                kind: switchInt(move _443) -> [0: bb248, otherwise: bb247],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_444),
            _442 = const (),
            StorageDead(_443),
            StorageDead(_442),
            StorageLive(_450),
            StorageLive(_451),
            _451 = _439,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1381:34: 1381:51 (#0),
                    scope: scope[37],
                },
                kind: _450 = idna_adapter::BidiClass::is_ltr(move _451) -> [return: bb251, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_444),
            StorageLive(_447),
            StorageLive(_448),
            _448 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1374:28: 1374:37 (#0),
                    scope: scope[37],
                },
                kind: switchInt(move _448) -> [0: bb250, otherwise: bb249],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_448),
            StorageDead(_447),
            StorageDead(_443),
            StorageDead(_442),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[37],
                },
                kind: goto -> bb362,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _447 = const (),
            StorageDead(_448),
            StorageDead(_447),
            _12 = const true,
            (*_437) = const '�',
            StorageDead(_443),
            StorageDead(_442),
            StorageDead(_439),
            StorageDead(_438),
            StorageDead(_437),
            StorageDead(_434),
            StorageDead(_433),
            StorageDead(_430),
            StorageDead(_428),
            StorageDead(_427),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[34],
                },
                kind: goto -> bb234,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_451),
            FakeRead(ForLet(None), _450),
            StorageLive(_452),
            _452 = move _438,
            FakeRead(ForLet(None), _452),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1385:21: 1470:22 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb252,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1385:21: 1470:22 (#0),
                    scope: scope[40],
                },
                kind: falseUnwind -> [real: bb253, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_453),
            StorageLive(_454),
            _454 = &mut (*_452),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1386:54: 1386:77 (#0),
                    scope: scope[41],
                },
                kind: _453 = core::slice::<impl [char]>::split_last_mut(move _454) -> [return: bb254, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_454),
            PlaceMention(_453),
            _455 = discriminant(_453),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1386:32: 1386:51 (#0),
                    scope: scope[41],
                },
                kind: switchInt(move _455) -> [1: bb255, otherwise: bb352],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1386:32: 1386:51 (#0),
                    scope: scope[41],
                },
                kind: falseEdge -> [real: bb256, imaginary: bb352],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_456),
            _456 = move (((_453 as Some).0: (&mut char, &mut [char])).0: &mut char),
            StorageLive(_457),
            _457 = move (((_453 as Some).0: (&mut char, &mut [char])).1: &mut [char]),
            StorageLive(_459),
            StorageLive(_460),
            _460 = &((*_1).0: idna_adapter::Adapter),
            StorageLive(_461),
            _461 = (*_456),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1387:43: 1387:70 (#0),
                    scope: scope[41],
                },
                kind: _459 = idna_adapter::Adapter::bidi_class(move _460, move _461) -> [return: bb257, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_461),
            StorageDead(_460),
            FakeRead(ForLet(None), _459),
            StorageLive(_462),
            StorageLive(_463),
            StorageLive(_464),
            _464 = _459,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1388:32: 1388:60 (#0),
                    scope: scope[42],
                },
                kind: _463 = idna_adapter::BidiClass::is_nonspacing_mark(move _464) -> [return: bb258, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1388:32: 1388:60 (#0),
                    scope: scope[42],
                },
                kind: switchInt(move _463) -> [0: bb260, otherwise: bb259],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_464),
            StorageLive(_466),
            _466 = &mut (*_457),
            _452 = move _466,
            StorageDead(_466),
            StorageDead(_463),
            StorageDead(_462),
            StorageDead(_459),
            StorageDead(_457),
            StorageDead(_456),
            StorageDead(_453),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[40],
                },
                kind: goto -> bb252,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_464),
            _462 = const (),
            StorageDead(_463),
            StorageDead(_462),
            StorageLive(_467),
            StorageLive(_468),
            _468 = _450,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1392:48: 1392:54 (#0),
                    scope: scope[42],
                },
                kind: switchInt(move _468) -> [0: bb262, otherwise: bb261],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _467 = const idna_adapter::LAST_LTR_MASK,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1392:45: 1392:95 (#0),
                    scope: scope[42],
                },
                kind: goto -> bb263,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _467 = const idna_adapter::LAST_RTL_MASK,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1392:45: 1392:95 (#0),
                    scope: scope[42],
                },
                kind: goto -> bb263,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_468),
            FakeRead(ForLet(None), _467),
            StorageLive(_469),
            StorageLive(_470),
            StorageLive(_471),
            _471 = _467,
            StorageLive(_472),
            StorageLive(_473),
            _473 = _459,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1393:54: 1393:71 (#0),
                    scope: scope[43],
                },
                kind: _472 = idna_adapter::BidiClass::to_mask(move _473) -> [return: bb264, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_473),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1393:33: 1393:72 (#0),
                    scope: scope[43],
                },
                kind: _470 = idna_adapter::BidiClassMask::intersects(move _471, move _472) -> [return: bb265, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1393:33: 1393:72 (#0),
                    scope: scope[43],
                },
                kind: switchInt(move _470) -> [0: bb267, otherwise: bb266],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_472),
            StorageDead(_471),
            _469 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1393:29: 1399:30 (#0),
                    scope: scope[43],
                },
                kind: goto -> bb270,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_472),
            StorageDead(_471),
            StorageLive(_474),
            StorageLive(_475),
            _475 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1394:36: 1394:45 (#0),
                    scope: scope[43],
                },
                kind: switchInt(move _475) -> [0: bb269, otherwise: bb268],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_475),
            StorageDead(_474),
            StorageDead(_470),
            StorageDead(_469),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[43],
                },
                kind: goto -> bb361,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _474 = const (),
            StorageDead(_475),
            StorageDead(_474),
            _12 = const true,
            (*_456) = const '�',
            _469 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1393:29: 1399:30 (#0),
                    scope: scope[43],
                },
                kind: goto -> bb270,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_470),
            StorageDead(_469),
            StorageLive(_477),
            StorageLive(_478),
            _478 = _450,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1400:32: 1400:38 (#0),
                    scope: scope[43],
                },
                kind: switchInt(move _478) -> [0: bb289, otherwise: bb271],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_479),
            StorageLive(_480),
            StorageLive(_481),
            _481 = &mut (*_457),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1401:42: 1401:58 (#0),
                    scope: scope[43],
                },
                kind: _480 = core::slice::<impl [char]>::iter_mut(move _481) -> [return: bb272, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_481),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
                    scope: scope[43],
                },
                kind: _479 = <core::slice::IterMut<'_, char> as core::iter::IntoIterator>::into_iter(move _480) -> [return: bb273, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_480),
            PlaceMention(_479),
            StorageLive(_482),
            _482 = move _479,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1401:33: 1410:34 (#531),
                    scope: scope[44],
                },
                kind: goto -> bb274,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1401:33: 1410:34 (#531),
                    scope: scope[44],
                },
                kind: falseUnwind -> [real: bb275, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_483),
            StorageLive(_484),
            StorageLive(_485),
            StorageLive(_486),
            _486 = &mut _482,
            _485 = &mut (*_486),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
                    scope: scope[44],
                },
                kind: _484 = <core::slice::IterMut<'_, char> as core::iter::Iterator>::next(move _485) -> [return: bb276, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_485),
            PlaceMention(_484),
            _487 = discriminant(_484),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
                    scope: scope[44],
                },
                kind: switchInt(move _487) -> [0: bb278, 1: bb279, otherwise: bb277],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _484),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
                    scope: scope[44],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1401:33: 1410:34 (#531),
                    scope: scope[44],
                },
                kind: falseEdge -> [real: bb280, imaginary: bb279],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_489),
            _489 = move ((_484 as Some).0: &mut char),
            StorageLive(_490),
            StorageLive(_491),
            _491 = &((*_1).0: idna_adapter::Adapter),
            StorageLive(_492),
            _492 = (*_489),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1402:46: 1402:70 (#0),
                    scope: scope[45],
                },
                kind: _490 = idna_adapter::Adapter::bidi_class(move _491, move _492) -> [return: bb281, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _477 = const (),
            StorageDead(_486),
            StorageDead(_484),
            StorageDead(_483),
            StorageDead(_482),
            StorageDead(_479),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1400:29: 1462:30 (#0),
                    scope: scope[43],
                },
                kind: goto -> bb351,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_492),
            StorageDead(_491),
            FakeRead(ForLet(None), _490),
            StorageLive(_493),
            StorageLive(_494),
            StorageLive(_495),
            _495 = _490,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1403:68: 1403:80 (#0),
                    scope: scope[46],
                },
                kind: _494 = idna_adapter::BidiClass::to_mask(move _495) -> [return: bb282, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_495),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1403:41: 1403:81 (#0),
                    scope: scope[46],
                },
                kind: _493 = idna_adapter::BidiClassMask::intersects(const idna_adapter::MIDDLE_LTR_MASK, move _494) -> [return: bb283, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1403:41: 1403:81 (#0),
                    scope: scope[46],
                },
                kind: switchInt(move _493) -> [0: bb285, otherwise: bb284],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_494),
            _483 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1403:37: 1409:38 (#0),
                    scope: scope[46],
                },
                kind: goto -> bb288,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_494),
            StorageLive(_496),
            StorageLive(_497),
            _497 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1404:44: 1404:53 (#0),
                    scope: scope[46],
                },
                kind: switchInt(move _497) -> [0: bb287, otherwise: bb286],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_497),
            StorageDead(_496),
            StorageDead(_493),
            StorageDead(_490),
            StorageDead(_489),
            StorageDead(_486),
            StorageDead(_484),
            StorageDead(_483),
            StorageDead(_482),
            StorageDead(_479),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[43],
                },
                kind: goto -> bb360,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _496 = const (),
            StorageDead(_497),
            StorageDead(_496),
            _12 = const true,
            (*_489) = const '�',
            _483 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1403:37: 1409:38 (#0),
                    scope: scope[46],
                },
                kind: goto -> bb288,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_493),
            StorageDead(_490),
            StorageDead(_489),
            StorageDead(_486),
            StorageDead(_484),
            StorageDead(_483),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1401:33: 1410:34 (#531),
                    scope: scope[44],
                },
                kind: goto -> bb274,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_499),
            _499 = uts46::RtlNumeralState::Undecided,
            FakeRead(ForLet(None), _499),
            StorageLive(_500),
            StorageLive(_501),
            StorageLive(_502),
            StorageLive(_503),
            _503 = &mut (*_457),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1413:42: 1413:58 (#0),
                    scope: scope[47],
                },
                kind: _502 = core::slice::<impl [char]>::iter_mut(move _503) -> [return: bb290, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_503),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
                    scope: scope[47],
                },
                kind: _501 = <core::slice::IterMut<'_, char> as core::iter::IntoIterator>::into_iter(move _502) -> [return: bb291, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_502),
            PlaceMention(_501),
            StorageLive(_504),
            _504 = move _501,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1413:33: 1450:34 (#536),
                    scope: scope[48],
                },
                kind: goto -> bb292,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1413:33: 1450:34 (#536),
                    scope: scope[48],
                },
                kind: falseUnwind -> [real: bb293, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_505),
            StorageLive(_506),
            StorageLive(_507),
            StorageLive(_508),
            _508 = &mut _504,
            _507 = &mut (*_508),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
                    scope: scope[48],
                },
                kind: _506 = <core::slice::IterMut<'_, char> as core::iter::Iterator>::next(move _507) -> [return: bb294, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_507),
            PlaceMention(_506),
            _509 = discriminant(_506),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
                    scope: scope[48],
                },
                kind: switchInt(move _509) -> [0: bb296, 1: bb297, otherwise: bb295],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _506),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
                    scope: scope[48],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1413:33: 1450:34 (#536),
                    scope: scope[48],
                },
                kind: falseEdge -> [real: bb298, imaginary: bb297],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_511),
            _511 = move ((_506 as Some).0: &mut char),
            StorageLive(_512),
            StorageLive(_513),
            _513 = &((*_1).0: idna_adapter::Adapter),
            StorageLive(_514),
            _514 = (*_511),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1414:46: 1414:70 (#0),
                    scope: scope[49],
                },
                kind: _512 = idna_adapter::Adapter::bidi_class(move _513, move _514) -> [return: bb299, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _500 = const (),
            StorageDead(_508),
            StorageDead(_506),
            StorageDead(_505),
            StorageDead(_504),
            StorageDead(_501),
            StorageDead(_500),
            StorageLive(_538),
            StorageLive(_539),
            _539 = &_499,
            StorageLive(_540),
            StorageLive(_541),
            _541 = uts46::RtlNumeralState::European,
            _540 = &_541,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1451:37: 1451:79 (#0),
                    scope: scope[47],
                },
                kind: _538 = <uts46::RtlNumeralState as core::cmp::PartialEq>::eq(move _539, move _540) -> [return: bb333, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_514),
            StorageDead(_513),
            FakeRead(ForLet(None), _512),
            StorageLive(_515),
            StorageLive(_516),
            StorageLive(_517),
            _517 = _512,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1415:68: 1415:80 (#0),
                    scope: scope[50],
                },
                kind: _516 = idna_adapter::BidiClass::to_mask(move _517) -> [return: bb300, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_517),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1415:41: 1415:81 (#0),
                    scope: scope[50],
                },
                kind: _515 = idna_adapter::BidiClassMask::intersects(const idna_adapter::MIDDLE_RTL_MASK, move _516) -> [return: bb301, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1415:41: 1415:81 (#0),
                    scope: scope[50],
                },
                kind: switchInt(move _515) -> [0: bb303, otherwise: bb302],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_516),
            PlaceMention(_499),
            _521 = discriminant(_499),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1422:41: 1422:60 (#0),
                    scope: scope[50],
                },
                kind: switchInt(move _521) -> [0: bb307, 1: bb308, 2: bb309, otherwise: bb306],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_516),
            StorageLive(_518),
            StorageLive(_519),
            _519 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1416:44: 1416:53 (#0),
                    scope: scope[50],
                },
                kind: switchInt(move _519) -> [0: bb305, otherwise: bb304],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_519),
            StorageDead(_518),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[50],
                },
                kind: goto -> bb358,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _518 = const (),
            StorageDead(_519),
            StorageDead(_518),
            _12 = const true,
            (*_511) = const '�',
            _505 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1415:37: 1449:38 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb332,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _499),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1422:47: 1422:60 (#0),
                    scope: scope[50],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1423:45: 1423:71 (#0),
                    scope: scope[50],
                },
                kind: falseEdge -> [real: bb310, imaginary: bb308],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1430:45: 1430:70 (#0),
                    scope: scope[50],
                },
                kind: falseEdge -> [real: bb319, imaginary: bb309],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_533),
            StorageLive(_534),
            _534 = _512,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1440:52: 1440:75 (#0),
                    scope: scope[50],
                },
                kind: _533 = idna_adapter::BidiClass::is_european_number(move _534) -> [return: bb326, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_522),
            StorageLive(_523),
            _523 = _512,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1424:52: 1424:75 (#0),
                    scope: scope[50],
                },
                kind: _522 = idna_adapter::BidiClass::is_european_number(move _523) -> [return: bb311, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1424:52: 1424:75 (#0),
                    scope: scope[50],
                },
                kind: switchInt(move _522) -> [0: bb313, otherwise: bb312],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_523),
            StorageLive(_524),
            _524 = uts46::RtlNumeralState::European,
            _499 = move _524,
            StorageDead(_524),
            _505 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1424:49: 1428:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb318,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_523),
            StorageLive(_525),
            StorageLive(_526),
            _526 = _512,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1426:59: 1426:80 (#0),
                    scope: scope[50],
                },
                kind: _525 = idna_adapter::BidiClass::is_arabic_number(move _526) -> [return: bb314, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1426:59: 1426:80 (#0),
                    scope: scope[50],
                },
                kind: switchInt(move _525) -> [0: bb316, otherwise: bb315],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_526),
            StorageLive(_527),
            _527 = uts46::RtlNumeralState::Arabic,
            _499 = move _527,
            StorageDead(_527),
            _505 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1426:56: 1428:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb317,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_526),
            _505 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1426:56: 1428:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb317,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_525),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1424:49: 1428:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb318,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_522),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1428:49: 1428:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb332,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_528),
            StorageLive(_529),
            _529 = _512,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1431:52: 1431:73 (#0),
                    scope: scope[50],
                },
                kind: _528 = idna_adapter::BidiClass::is_arabic_number(move _529) -> [return: bb320, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1431:52: 1431:73 (#0),
                    scope: scope[50],
                },
                kind: switchInt(move _528) -> [0: bb324, otherwise: bb321],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_529),
            StorageLive(_530),
            StorageLive(_531),
            _531 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1432:56: 1432:65 (#0),
                    scope: scope[50],
                },
                kind: switchInt(move _531) -> [0: bb323, otherwise: bb322],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_531),
            StorageDead(_530),
            StorageDead(_528),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[50],
                },
                kind: goto -> bb358,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _530 = const (),
            StorageDead(_531),
            StorageDead(_530),
            _12 = const true,
            (*_511) = const '�',
            _505 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1431:49: 1437:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb325,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_529),
            _505 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1431:49: 1437:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb325,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_528),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1437:49: 1437:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb332,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1440:52: 1440:75 (#0),
                    scope: scope[50],
                },
                kind: switchInt(move _533) -> [0: bb330, otherwise: bb327],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_534),
            StorageLive(_535),
            StorageLive(_536),
            _536 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1441:56: 1441:65 (#0),
                    scope: scope[50],
                },
                kind: switchInt(move _536) -> [0: bb329, otherwise: bb328],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_536),
            StorageDead(_535),
            StorageDead(_533),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[50],
                },
                kind: goto -> bb358,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _535 = const (),
            StorageDead(_536),
            StorageDead(_535),
            _12 = const true,
            (*_511) = const '�',
            _505 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1440:49: 1446:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb331,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_534),
            _505 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1440:49: 1446:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb331,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_533),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1446:49: 1446:50 (#0),
                    scope: scope[50],
                },
                kind: goto -> bb332,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_515),
            StorageDead(_512),
            StorageDead(_511),
            StorageDead(_508),
            StorageDead(_506),
            StorageDead(_505),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1413:33: 1450:34 (#536),
                    scope: scope[48],
                },
                kind: goto -> bb292,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1451:37: 1451:79 (#0),
                    scope: scope[47],
                },
                kind: switchInt(move _538) -> [0: bb338, otherwise: bb334],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_541),
            StorageDead(_540),
            StorageDead(_539),
            StorageLive(_542),
            StorageLive(_543),
            _543 = _459,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1452:40: 1452:66 (#0),
                    scope: scope[47],
                },
                kind: _542 = idna_adapter::BidiClass::is_arabic_number(move _543) -> [return: bb335, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1452:40: 1452:66 (#0),
                    scope: scope[47],
                },
                kind: switchInt(move _542) -> [0: bb337, otherwise: bb336],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_543),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1455:33: 1461:34 (#0),
                    scope: scope[47],
                },
                kind: goto -> bb344,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_543),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[47],
                },
                kind: goto -> bb339,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_541),
            StorageDead(_540),
            StorageDead(_539),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[47],
                },
                kind: goto -> bb339,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_544),
            StorageLive(_545),
            _545 = &_499,
            StorageLive(_546),
            StorageLive(_547),
            _547 = uts46::RtlNumeralState::Arabic,
            _546 = &_547,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1453:41: 1453:81 (#0),
                    scope: scope[47],
                },
                kind: _544 = <uts46::RtlNumeralState as core::cmp::PartialEq>::eq(move _545, move _546) -> [return: bb340, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1453:41: 1453:81 (#0),
                    scope: scope[47],
                },
                kind: switchInt(move _544) -> [0: bb348, otherwise: bb341],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_547),
            StorageDead(_546),
            StorageDead(_545),
            StorageLive(_548),
            StorageLive(_549),
            _549 = _459,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1454:44: 1454:72 (#0),
                    scope: scope[47],
                },
                kind: _548 = idna_adapter::BidiClass::is_european_number(move _549) -> [return: bb342, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1454:44: 1454:72 (#0),
                    scope: scope[47],
                },
                kind: switchInt(move _548) -> [0: bb347, otherwise: bb343],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_549),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1455:33: 1461:34 (#0),
                    scope: scope[47],
                },
                kind: goto -> bb344,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_550),
            StorageLive(_551),
            _551 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1456:40: 1456:49 (#0),
                    scope: scope[47],
                },
                kind: switchInt(move _551) -> [0: bb346, otherwise: bb345],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = (const 0_usize, const false, const true),
            StorageDead(_551),
            StorageDead(_550),
            StorageDead(_548),
            StorageDead(_544),
            StorageDead(_542),
            StorageDead(_538),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[47],
                },
                kind: goto -> bb359,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _550 = const (),
            StorageDead(_551),
            StorageDead(_550),
            _12 = const true,
            (*_456) = const '�',
            _477 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                    scope: scope[47],
                },
                kind: goto -> bb350,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_549),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[47],
                },
                kind: goto -> bb349,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_547),
            StorageDead(_546),
            StorageDead(_545),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[47],
                },
                kind: goto -> bb349,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _477 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                    scope: scope[47],
                },
                kind: goto -> bb350,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_548),
            StorageDead(_544),
            StorageDead(_542),
            StorageDead(_538),
            StorageDead(_499),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1400:29: 1462:30 (#0),
                    scope: scope[43],
                },
                kind: goto -> bb351,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_478),
            StorageDead(_477),
            _427 = const (),
            StorageDead(_467),
            StorageDead(_459),
            StorageDead(_457),
            StorageDead(_456),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[40],
                },
                kind: goto -> bb353,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _427 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1468:29: 1468:34 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb353,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_453),
            StorageDead(_452),
            StorageDead(_450),
            StorageDead(_439),
            StorageDead(_438),
            StorageDead(_437),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1370:17: 1471:18 (#0),
                    scope: scope[35],
                },
                kind: goto -> bb355,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _427 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1370:17: 1471:18 (#0),
                    scope: scope[35],
                },
                kind: goto -> bb355,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_434),
            StorageDead(_433),
            StorageDead(_430),
            StorageDead(_428),
            StorageDead(_427),
            _28 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
                    scope: scope[34],
                },
                kind: goto -> bb234,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _418 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1368:9: 1473:10 (#0),
                    scope: scope[33],
                },
                kind: goto -> bb357,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_419),
            StorageDead(_418),
            StorageLive(_554),
            _554 = _13,
            StorageLive(_555),
            _555 = _413,
            StorageLive(_556),
            _556 = _12,
            _0 = (move _554, move _555, move _556),
            StorageDead(_556),
            StorageDead(_555),
            StorageDead(_554),
            StorageDead(_413),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1476:6: 1476:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb376,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_515),
            StorageDead(_512),
            StorageDead(_511),
            StorageDead(_508),
            StorageDead(_506),
            StorageDead(_505),
            StorageDead(_504),
            StorageDead(_501),
            StorageDead(_500),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[47],
                },
                kind: goto -> bb359,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_499),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[43],
                },
                kind: goto -> bb360,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_478),
            StorageDead(_477),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[43],
                },
                kind: goto -> bb361,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_467),
            StorageDead(_459),
            StorageDead(_457),
            StorageDead(_456),
            StorageDead(_453),
            StorageDead(_452),
            StorageDead(_450),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[37],
                },
                kind: goto -> bb362,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_439),
            StorageDead(_438),
            StorageDead(_437),
            StorageDead(_434),
            StorageDead(_433),
            StorageDead(_430),
            StorageDead(_428),
            StorageDead(_427),
            StorageDead(_426),
            StorageDead(_423),
            StorageDead(_420),
            StorageDead(_419),
            StorageDead(_418),
            StorageDead(_413),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb375,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_346),
            StorageDead(_345),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[26],
                },
                kind: goto -> bb364,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_338),
            StorageDead(_337),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1324:38: 1324:39 (#0),
                    scope: scope[26],
                },
                kind: drop(_335) -> [return: bb365, unwind: bb379],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_335),
            StorageDead(_333),
            StorageDead(_332),
            StorageDead(_331),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[26],
                },
                kind: goto -> bb366,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_274),
            StorageDead(_264),
            StorageDead(_263),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[25],
                },
                kind: goto -> bb367,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1361:13: 1361:14 (#0),
                    scope: scope[23],
                },
                kind: drop(_253) -> [return: bb368, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_253),
            StorageDead(_250),
            StorageDead(_248),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[15],
                },
                kind: goto -> bb374,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1166:29: 1166:30 (#0),
                    scope: scope[16],
                },
                kind: drop(_141) -> [return: bb370, unwind: bb382],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
            StorageDead(_140),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb371,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_135),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1183:30: 1183:31 (#0),
                    scope: scope[14],
                },
                kind: drop(_133) -> [return: bb372, unwind: bb383],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
            StorageDead(_131),
            StorageDead(_130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb373,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_115),
            StorageDead(_114),
            StorageDead(_112),
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb374,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_106),
            StorageDead(_105),
            StorageDead(_103),
            StorageDead(_35),
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb375,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1476:6: 1476:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb376,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1476:6: 1476:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1315:37: 1315:38 (#0),
                    scope: scope[30],
                },
                kind: drop(_346) -> [return: bb378, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1324:38: 1324:39 (#0),
                    scope: scope[26],
                },
                kind: drop(_335) -> [return: bb379, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1361:13: 1361:14 (#0),
                    scope: scope[23],
                },
                kind: drop(_253) -> [return: bb383, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1237:88: 1237:89 (#0),
                    scope: scope[23],
                },
                kind: drop(_254) -> [return: bb383, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1166:29: 1166:30 (#0),
                    scope: scope[16],
                },
                kind: drop(_141) -> [return: bb382, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1183:30: 1183:31 (#0),
                    scope: scope[14],
                },
                kind: drop(_133) -> [return: bb383, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:1075:5: 1476:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1084:10: 1084:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} uts46::Uts46,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1076:9: 1076:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:1077:22: 1077:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1077:9: 1077:20 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1077:9: 1077:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1077:9: 1077:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:1078:26: 1078:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1078:9: 1078:24 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1078:9: 1078:24 (#0),
                    },
                ),
            ),
        ),
        ty: uts46::AsciiDenyList,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1078:9: 1078:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:1079:18: 1079:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1079:9: 1079:16 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1079:9: 1079:16 (#0),
                    },
                ),
            ),
        ),
        ty: uts46::Hyphens,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1079:9: 1079:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:1080:20: 1080:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1080:9: 1080:18 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1080:9: 1080:18 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1080:9: 1080:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:1081:24: 1081:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1081:9: 1081:22 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1081:9: 1081:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1081:9: 1081:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:1082:27: 1082:68 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1082:9: 1082:25 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1082:9: 1082:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut smallvec::SmallVec<[uts46::AlreadyAsciiLabel<'{erased}>; 8_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1082:9: 1082:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:1083:15: 1083:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1083:9: 1083:13 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1083:9: 1083:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1083:9: 1083:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1085:25: 1085:45 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1085:13: 1085:22 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1085:13: 1085:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1086:34: 1086:54 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1086:13: 1086:31 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1086:13: 1086:31 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1086:34: 1086:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1088:30: 1088:35 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1088:13: 1088:27 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1088:13: 1088:27 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1090:37: 1090:67 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1090:13: 1090:34 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1090:13: 1090:34 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1090:37: 1090:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1090:37: 1090:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1090:57: 1090:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1090:57: 1090:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1090:37: 1090:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: idna/src/uts46.rs:1093:13: 1093:36 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1093:13: 1093:36 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1094:30: 1094:35 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1094:13: 1094:27 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1094:13: 1094:27 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1095:29: 1095:33 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1095:13: 1095:26 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1095:13: 1095:26 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:9: 1365:10 (#472),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Split<'{erased}, u8, Closure(DefId(0:203 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Split<'{erased}, u8, Closure(DefId(0:203 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:22: 1096:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:22: 1096:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:203 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:33: 1096:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _23,
                                ),
                                idna/src/uts46.rs:1096:22: 1096:48 (#473),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
                    },
                ),
            ),
        ),
        ty: core::slice::Split<'{erased}, u8, Closure(DefId(0:203 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1075:5: 1476:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Split<'{erased}, u8, Closure(DefId(0:203 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Split<'{erased}, u8, Closure(DefId(0:203 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:22: 1096:48 (#473),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:9: 1365:10 (#472),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:9: 1365:10 (#472),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _30,
                                ),
                                idna/src/uts46.rs:1096:22: 1096:48 (#473),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1096:13: 1096:18 (#474),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1096:13: 1096:18 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1109:13: 1118:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1109:16: 1109:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1109:29: 1109:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1109:56: 1109:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1109:63: 1118:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1110:17: 1113:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1110:20: 1110:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#147),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:12: 346:42 (#148),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} u8, &'{erased} u8),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1111:50: 1111:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1111:38: 1111:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1111:38: 1111:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1111:70: 1111:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#149),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#149),
                    },
                ),
            ),
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#149),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#149),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#149),
                    },
                ),
            ),
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#149),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#149),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#149),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#149),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#149),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#149),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#149),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#149),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#149),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1112:21: 1112:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1116:38: 1116:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1116:38: 1116:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1116:17: 1116:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1119:13: 1126:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1119:16: 1119:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1120:17: 1125:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1120:20: 1120:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#150),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:12: 346:42 (#151),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} u8, &'{erased} u8),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1121:50: 1121:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1121:38: 1121:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1121:38: 1121:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1121:70: 1121:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _77,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#152),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#152),
                    },
                ),
            ),
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#152),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _77,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#152),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#152),
                    },
                ),
            ),
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#152),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#152),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#152),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#152),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#152),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#152),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#152),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#152),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#152),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1122:21: 1122:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1124:21: 1124:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1124:21: 1124:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1129:35: 1129:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1129:35: 1129:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1130:13: 1364:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1130:17: 1130:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1130:13: 1364:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1130:17: 1130:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _107,
                                ),
                                idna/src/uts46.rs:1131:42: 1131:77 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1131:21: 1131:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1131:22: 1131:27 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _107,
                                ),
                                idna/src/uts46.rs:1131:42: 1131:77 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1131:21: 1131:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1131:29: 1131:38 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} [u8], &'{erased} [u8]),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1131:42: 1131:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1131:71: 1131:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1132:48: 1199:18 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1132:21: 1132:45 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1132:21: 1132:45 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1132:51: 1132:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1132:51: 1132:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:1133:21: 1196:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1133:24: 1133:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:1133:21: 1196:22 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1133:44: 1133:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1134:25: 1190:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1134:28: 1134:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1134:29: 1134:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1134:29: 1134:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1134:29: 1134:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1134:45: 1134:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1134:45: 1134:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1134:50: 1134:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1134:50: 1134:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1134:51: 1134:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1135:32: 1135:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1135:33: 1135:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1135:33: 1135:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1135:33: 1135:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1135:33: 1135:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1136:25: 1188:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1137:29: 1183:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<punycode::Decode<'{erased}, u8, punycode::InternalCaller>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1138:33: 1138:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut punycode::Decoder,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1138:33: 1138:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: punycode::Decoder,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1138:33: 1138:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1138:81: 1138:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1138:81: 1138:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1138:87: 1138:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1138:82: 1138:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1138:88: 1138:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1137:36: 1137:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _131,
                                ),
                                idna/src/uts46.rs:1138:33: 1138:93 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1137:36: 1137:46 (#0),
                    },
                ),
            ),
        ),
        ty: punycode::Decode<'{erased}, u8, punycode::InternalCaller>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1137:39: 1137:45 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1142:56: 1142:85 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1142:37: 1142:53 (#0),
                    },
                ),
            ),
        ),
        ty: smallvec::SmallVec<[char; 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1142:37: 1142:53 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1143:33: 1143:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1143:33: 1143:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: punycode::Decode<'{erased}, u8, punycode::InternalCaller>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1143:53: 1143:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1145:33: 1154:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1145:36: 1152:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} uts46::Uts46,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1145:36: 1145:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1146:37: 1146:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1147:37: 1147:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1148:37: 1148:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1148:37: 1148:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} smallvec::SmallVec<[char; 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1148:37: 1148:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} smallvec::SmallVec<[char; 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1148:37: 1148:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1149:37: 1149:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1150:37: 1150:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1151:37: 1151:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1151:37: 1151:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1152:35: 1154:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1156:36: 1163:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: &'{erased} uts46::Uts46,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1156:36: 1156:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: uts46::Hyphens,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1157:37: 1157:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1158:37: 1158:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1158:37: 1158:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1158:55: 1158:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1158:42: 1158:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1158:56: 1158:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1158:56: 1158:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1159:37: 1159:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1160:37: 1160:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1160:37: 1160:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1156:33: 1165:34 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1163:35: 1165:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1168:33: 1170:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1168:36: 1168:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1168:46: 1170:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1172:33: 1172:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1172:33: 1172:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1173:48: 1173:60 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1173:37: 1173:45 (#0),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1173:37: 1173:45 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1173:48: 1173:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1175:41: 1175:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1175:41: 1175:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1176:33: 1182:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1176:33: 1176:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, u8>, Closure(DefId(0:205 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#1}), [i16, Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> char, bound_vars: [] }, (&'{erased} u128,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1176:54: 1182:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1176:54: 1176:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:205 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#1}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> char, bound_vars: [] },
                (&'{erased} u128,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1176:63: 1182:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u128,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1176:63: 1182:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1186:29: 1186:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[uts46::AlreadyAsciiLabel<'{erased}>; 8_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1186:29: 1186:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: uts46::AlreadyAsciiLabel<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1186:51: 1186:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1186:88: 1186:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1188:35: 1188:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1188:45: 1190:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:17: 1212:18 (#495),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, u8>, Closure(DefId(0:206 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#2}), [i16, Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> char, bound_vars: [] }, (&'{erased} u128,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, u8>, Closure(DefId(0:206 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#2}), [i16, Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> char, bound_vars: [] }, (&'{erased} u128,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:26: 1204:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:26: 1200:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:26: 1200:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:206 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#2}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> char, bound_vars: [] },
                (&'{erased} u128,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:43: 1204:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u128,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:43: 1204:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _194,
                                ),
                                idna/src/uts46.rs:1200:26: 1204:19 (#496),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
                    },
                ),
            ),
        ),
        ty: core::iter::Map<core::slice::Iter<'{erased}, u8>, Closure(DefId(0:206 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#2}), [i16, Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> char, bound_vars: [] }, (&'{erased} u128,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Map<core::slice::Iter<'{erased}, u8>, Closure(DefId(0:206 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#2}), [i16, Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> char, bound_vars: [] }, (&'{erased} u128,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Map<core::slice::Iter<'{erased}, u8>, Closure(DefId(0:206 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#2}), [i16, Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> char, bound_vars: [] }, (&'{erased} u128,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:26: 1204:19 (#496),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:17: 1212:18 (#495),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:17: 1212:18 (#495),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _202,
                                ),
                                idna/src/uts46.rs:1200:26: 1204:19 (#496),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1200:21: 1200:22 (#497),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1200:21: 1200:22 (#0),
            scope: scope[20],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1205:21: 1210:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1205:24: 1205:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1205:24: 1205:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1206:25: 1208:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1206:28: 1206:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1206:38: 1208:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1211:21: 1211:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1211:21: 1211:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1211:40: 1211:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1213:17: 1230:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1213:20: 1213:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1213:45: 1230:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1214:21: 1223:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1214:24: 1214:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} uts46::Hyphens,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1214:24: 1214:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} uts46::Hyphens,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1214:35: 1214:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: uts46::Hyphens,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1214:35: 1214:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1215:28: 1220:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1216:29: 1216:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1216:29: 1216:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1216:47: 1216:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1216:34: 1216:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1216:48: 1216:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1216:48: 1216:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1217:29: 1217:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} uts46::Hyphens,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1217:29: 1217:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} uts46::Hyphens,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1217:40: 1217:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: uts46::Hyphens,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1217:40: 1217:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1218:29: 1218:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1219:29: 1219:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1219:29: 1219:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1221:21: 1223:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1224:21: 1228:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[uts46::AlreadyAsciiLabel<'{erased}>; 8_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1224:21: 1224:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: uts46::AlreadyAsciiLabel<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1224:43: 1228:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1224:46: 1224:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1227:59: 1227:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1231:17: 1231:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[uts46::AlreadyAsciiLabel<'{erased}>; 8_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1231:17: 1231:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: uts46::AlreadyAsciiLabel<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1231:39: 1231:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1232:60: 1232:76 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1232:21: 1232:57 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1232:21: 1232:57 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1232:60: 1232:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1233:48: 1233:69 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1233:21: 1233:45 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1233:21: 1233:45 (#0),
            scope: scope[22],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1233:49: 1233:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1233:49: 1233:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1234:35: 1237:89 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1234:21: 1234:32 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Map<Alias(Opaque, AliasTy { args: ['{erased}, utf8_iter::Utf8Chars<'{erased}>, '{erased}], def_id: DefId(20:82 ~ idna_adapter[b034]::{impl#5}::map_normalize::{opaque#0}) }), Closure(DefId(0:207 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#3}), [i16, Binder { value: extern "RustCall" fn((char,)) -> char, bound_vars: [] }, (&'{erased} u128,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1234:21: 1234:32 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    '{erased},
                    utf8_iter::Utf8Chars<'{erased}>,
                    '{erased},
                ],
                def_id: DefId(20:82 ~ idna_adapter[b034]::{impl#5}::map_normalize::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1234:35: 1236:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} idna_adapter::Adapter,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1234:35: 1235:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: utf8_iter::Utf8Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1236:36: 1236:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1236:36: 1236:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:207 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#3}),
            [
                i16,
                Binder { value: extern "RustCall" fn((char,)) -> char, bound_vars: [] },
                (&'{erased} u128,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1237:26: 1237:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u128,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1237:26: 1237:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1239:29: 1239:43 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1239:25: 1239:26 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1239:25: 1239:26 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Map<Alias(Opaque, AliasTy { args: ['{erased}, utf8_iter::Utf8Chars<'{erased}>, '{erased}], def_id: DefId(20:82 ~ idna_adapter[b034]::{impl#5}::map_normalize::{opaque#0}) }), Closure(DefId(0:207 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#3}), [i16, Binder { value: extern "RustCall" fn((char,)) -> char, bound_vars: [] }, (&'{erased} u128,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1239:29: 1239:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1241:25: 1241:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1242:29: 1329:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1242:32: 1243:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1242:32: 1242:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1242:45: 1242:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1242:32: 1242:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1242:46: 1242:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1242:46: 1242:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1243:46: 1243:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1243:46: 1243:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1243:46: 1243:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [char; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1243:47: 1243:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1245:72: 1245:77 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1245:37: 1245:69 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1245:37: 1245:69 (#0),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:33: 1255:34 (#504),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:42: 1246:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:42: 1246:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:55: 1246:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:42: 1246:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:56: 1246:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:56: 1246:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:56: 1246:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:56: 1246:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _276,
                                ),
                                idna/src/uts46.rs:1246:42: 1246:93 (#505),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
                    },
                ),
            ),
        ),
        ty: core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
            scope: scope[26],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:42: 1246:93 (#505),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:33: 1255:34 (#504),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:33: 1255:34 (#504),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _287,
                                ),
                                idna/src/uts46.rs:1246:42: 1246:93 (#505),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1246:37: 1246:38 (#506),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1246:37: 1246:38 (#0),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1247:37: 1254:38 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1247:41: 1247:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1247:37: 1254:38 (#0),
                },
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1247:41: 1247:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1248:41: 1250:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1248:44: 1248:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1248:54: 1250:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1257:33: 1273:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1257:53: 1257:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1257:53: 1257:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1257:53: 1257:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1257:53: 1257:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1257:40: 1257:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _299,
                                ),
                                idna/src/uts46.rs:1257:53: 1257:77 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1257:40: 1257:50 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1257:45: 1257:49 (#0),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1258:37: 1270:38 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1258:40: 1258:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1258:37: 1270:38 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1258:40: 1258:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1264:41: 1266:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1264:44: 1264:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1264:54: 1266:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1271:40: 1273:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:119:9: 119:77 (#155),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1278:33: 1289:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1278:36: 1279:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1278:36: 1278:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1278:36: 1278:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1278:36: 1278:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1278:36: 1278:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1278:58: 1278:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1278:36: 1278:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1278:36: 1278:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1281:37: 1283:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1281:40: 1281:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1281:50: 1283:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1285:50: 1287:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1285:37: 1285:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1285:51: 1287:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1285:51: 1286:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1285:51: 1285:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1285:51: 1286:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1285:51: 1287:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1291:33: 1328:34 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1291:37: 1291:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1292:37: 1324:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<punycode::Decode<'{erased}, char, punycode::InternalCaller>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1292:57: 1295:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut punycode::Decoder,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1292:57: 1292:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: punycode::Decoder,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1292:57: 1292:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1294:45: 1294:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1294:45: 1294:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1294:59: 1294:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1294:46: 1294:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1294:60: 1294:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1294:60: 1294:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1294:60: 1294:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1294:60: 1294:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1292:44: 1292:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _333,
                                ),
                                idna/src/uts46.rs:1292:57: 1295:42 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1292:44: 1292:54 (#0),
                    },
                ),
            ),
        ),
        ty: punycode::Decode<'{erased}, char, punycode::InternalCaller>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1292:47: 1292:53 (#0),
            scope: scope[30],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1301:64: 1301:93 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1301:45: 1301:61 (#0),
                    },
                ),
            ),
        ),
        ty: smallvec::SmallVec<[char; 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1301:45: 1301:61 (#0),
            scope: scope[30],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1302:41: 1302:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1302:41: 1302:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: punycode::Decode<'{erased}, char, punycode::InternalCaller>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1302:61: 1302:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1304:41: 1304:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1304:41: 1304:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1304:64: 1304:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1305:44: 1312:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: &'{erased} uts46::Uts46,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1305:44: 1305:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1306:45: 1306:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1307:45: 1307:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1308:45: 1308:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1308:45: 1308:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: &'{erased} smallvec::SmallVec<[char; 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1308:45: 1308:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: &'{erased} smallvec::SmallVec<[char; 59_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1308:45: 1308:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1309:45: 1309:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1310:45: 1310:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1311:45: 1311:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1311:45: 1311:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1305:41: 1314:42 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1312:43: 1314:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1317:41: 1319:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1317:44: 1317:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1317:54: 1319:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1321:54: 1321:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1321:41: 1321:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1321:55: 1321:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1330:29: 1339:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1330:32: 1337:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} uts46::Uts46,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1330:32: 1330:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: uts46::Hyphens,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1331:33: 1331:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1332:33: 1332:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1332:33: 1332:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1332:51: 1332:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1332:38: 1332:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1332:52: 1332:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1332:52: 1332:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1333:33: 1333:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1334:33: 1334:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1334:33: 1334:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1335:33: 1335:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1336:33: 1336:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1337:31: 1339:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1341:29: 1343:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1341:32: 1341:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1341:32: 1341:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1341:44: 1343:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1344:29: 1344:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1344:29: 1344:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1345:51: 1345:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1345:51: 1345:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1348:29: 1348:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[uts46::AlreadyAsciiLabel<'{erased}>; 8_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1348:29: 1348:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: uts46::AlreadyAsciiLabel<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1348:51: 1348:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _260,
                                ),
                                idna/src/uts46.rs:1240:27: 1240:28 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1350:25: 1350:32 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1350:30: 1350:31 (#0),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1351:29: 1356:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1351:32: 1351:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1351:32: 1351:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1352:33: 1354:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1352:36: 1352:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1352:46: 1354:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1357:29: 1357:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1357:29: 1357:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1357:48: 1357:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1363:17: 1363:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut smallvec::SmallVec<[uts46::AlreadyAsciiLabel<'{erased}>; 8_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1363:17: 1363:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: uts46::AlreadyAsciiLabel<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1363:39: 1363:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1363:73: 1363:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1367:23: 1367:50 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1367:13: 1367:20 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1367:13: 1367:20 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} uts46::Uts46,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1367:23: 1367:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1367:36: 1367:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1367:36: 1367:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1367:36: 1367:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1368:9: 1473:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1368:12: 1368:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
                },
            ),
        ),
        ty: core::slice::SplitMut<'{erased}, char, Closure(DefId(0:209 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#4}), [i16, Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
                },
            ),
        ),
        ty: core::slice::SplitMut<'{erased}, char, Closure(DefId(0:209 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#4}), [i16, Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:26: 1369:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
                },
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:26: 1369:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
                },
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:26: 1369:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
                },
            ),
        ),
        ty: &'{erased} mut smallvec::SmallVec<[char; 253_usize]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:26: 1369:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
                },
            ),
        ),
        ty: Closure(
            DefId(0:209 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#4}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:50: 1369:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _420,
                                ),
                                idna/src/uts46.rs:1369:26: 1369:64 (#522),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
                    },
                ),
            ),
        ),
        ty: core::slice::SplitMut<'{erased}, char, Closure(DefId(0:209 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#4}), [i16, Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut [char]>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::SplitMut<'{erased}, char, Closure(DefId(0:209 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#4}), [i16, Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::SplitMut<'{erased}, char, Closure(DefId(0:209 ~ idna[9561]::uts46::{impl#4}::process_innermost::{closure#4}), [i16, Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:26: 1369:64 (#522),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:13: 1472:14 (#521),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _428,
                                ),
                                idna/src/uts46.rs:1369:26: 1369:64 (#522),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1369:17: 1369:22 (#523),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1369:17: 1369:22 (#0),
            scope: scope[34],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1370:17: 1471:18 (#0),
                },
            ),
        ),
        ty: core::option::Option<(&'{erased} mut char, &'{erased} mut [char])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1370:46: 1370:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1370:17: 1471:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1370:46: 1370:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1370:24: 1370:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _434,
                                ),
                                idna/src/uts46.rs:1370:46: 1370:69 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1370:24: 1370:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1370:30: 1370:35 (#0),
            scope: scope[36],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _434,
                                ),
                                idna/src/uts46.rs:1370:46: 1370:69 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1370:24: 1370:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1370:37: 1370:41 (#0),
            scope: scope[36],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1371:36: 1371:64 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1371:25: 1371:33 (#0),
                    },
                ),
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1371:25: 1371:33 (#0),
            scope: scope[36],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} idna_adapter::Adapter,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1371:36: 1371:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1371:57: 1371:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1372:21: 1380:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1372:25: 1372:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: idna_adapter::BidiClassMask,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1372:50: 1372:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1372:50: 1372:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1372:70: 1380:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1374:25: 1376:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1374:28: 1374:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1374:38: 1376:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1381:34: 1381:51 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1381:25: 1381:31 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1381:25: 1381:31 (#0),
            scope: scope[37],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1381:34: 1381:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1383:38: 1383:42 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1383:25: 1383:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1383:25: 1383:35 (#0),
            scope: scope[38],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1386:25: 1469:26 (#0),
                },
            ),
        ),
        ty: core::option::Option<(&'{erased} mut char, &'{erased} mut [char])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1386:54: 1386:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1386:25: 1469:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1386:54: 1386:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1386:32: 1386:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _453,
                                ),
                                idna/src/uts46.rs:1386:54: 1386:77 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1386:32: 1386:51 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1386:38: 1386:42 (#0),
            scope: scope[41],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _453,
                                ),
                                idna/src/uts46.rs:1386:54: 1386:77 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1386:32: 1386:51 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1386:44: 1386:49 (#0),
            scope: scope[41],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1386:25: 1469:26 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1386:78: 1464:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1387:43: 1387:70 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1387:33: 1387:40 (#0),
                    },
                ),
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1387:33: 1387:40 (#0),
            scope: scope[41],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} idna_adapter::Adapter,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1387:43: 1387:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1387:64: 1387:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1388:29: 1391:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1388:32: 1388:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1388:32: 1388:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1388:61: 1391:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1389:42: 1389:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1392:45: 1392:95 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1392:33: 1392:42 (#0),
                    },
                ),
            ),
        ),
        ty: idna_adapter::BidiClassMask,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1392:33: 1392:42 (#0),
            scope: scope[42],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1392:48: 1392:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1393:29: 1399:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1393:33: 1393:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: idna_adapter::BidiClassMask,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1393:33: 1393:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: idna_adapter::BidiClassMask,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1393:54: 1393:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1393:54: 1393:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1394:33: 1396:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1394:36: 1394:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1394:46: 1396:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1400:29: 1462:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1400:32: 1400:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1401:33: 1410:34 (#531),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1401:33: 1410:34 (#531),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:42: 1401:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1401:33: 1410:34 (#531),
                },
            ),
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:42: 1401:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _479,
                                ),
                                idna/src/uts46.rs:1401:42: 1401:58 (#532),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
                    },
                ),
            ),
        ),
        ty: core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:42: 1401:58 (#532),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:33: 1410:34 (#531),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:33: 1410:34 (#531),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _484,
                                ),
                                idna/src/uts46.rs:1401:42: 1401:58 (#532),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1401:37: 1401:38 (#533),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1401:37: 1401:38 (#0),
            scope: scope[44],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1402:46: 1402:70 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1402:41: 1402:43 (#0),
                    },
                ),
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1402:41: 1402:43 (#0),
            scope: scope[45],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} idna_adapter::Adapter,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1402:46: 1402:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1402:67: 1402:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1403:37: 1409:38 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1403:41: 1403:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1403:37: 1409:38 (#0),
                },
            ),
        ),
        ty: idna_adapter::BidiClassMask,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1403:68: 1403:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1403:37: 1409:38 (#0),
                },
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1403:68: 1403:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1404:41: 1406:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1404:44: 1404:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1404:54: 1406:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1412:57: 1412:83 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1412:37: 1412:54 (#0),
                    },
                ),
            ),
        ),
        ty: uts46::RtlNumeralState,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1412:37: 1412:54 (#0),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:33: 1450:34 (#536),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:42: 1413:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:42: 1413:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _501,
                                ),
                                idna/src/uts46.rs:1413:42: 1413:58 (#537),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
                    },
                ),
            ),
        ),
        ty: core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
            scope: scope[47],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:42: 1413:58 (#537),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:33: 1450:34 (#536),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:33: 1450:34 (#536),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _506,
                                ),
                                idna/src/uts46.rs:1413:42: 1413:58 (#537),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1413:37: 1413:38 (#538),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1413:37: 1413:38 (#0),
            scope: scope[48],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:1414:46: 1414:70 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:1414:41: 1414:43 (#0),
                    },
                ),
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1414:41: 1414:43 (#0),
            scope: scope[49],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} idna_adapter::Adapter,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1414:46: 1414:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1414:67: 1414:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1415:37: 1449:38 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1415:41: 1415:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1415:37: 1449:38 (#0),
                },
            ),
        ),
        ty: idna_adapter::BidiClassMask,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1415:68: 1415:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1415:37: 1449:38 (#0),
                },
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1415:68: 1415:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1416:41: 1418:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1416:44: 1416:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1416:54: 1418:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1423:45: 1423:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1424:49: 1428:50 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1424:52: 1424:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1424:49: 1428:50 (#0),
                },
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1424:52: 1424:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: uts46::RtlNumeralState,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1425:69: 1425:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1424:49: 1428:50 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1426:59: 1426:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1424:49: 1428:50 (#0),
                },
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1426:59: 1426:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: uts46::RtlNumeralState,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1427:69: 1427:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1431:49: 1437:50 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1431:52: 1431:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1431:49: 1437:50 (#0),
                },
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1431:52: 1431:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1432:53: 1434:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1432:56: 1432:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1432:66: 1434:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1440:49: 1446:50 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1440:52: 1440:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1440:49: 1446:50 (#0),
                },
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1440:52: 1440:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1441:53: 1443:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1441:56: 1441:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1441:66: 1443:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1451:37: 1451:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: &'{erased} uts46::RtlNumeralState,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1451:37: 1451:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: &'{erased} uts46::RtlNumeralState,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1451:54: 1451:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: uts46::RtlNumeralState,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1451:54: 1451:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1452:40: 1452:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1452:40: 1452:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1453:41: 1453:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: &'{erased} uts46::RtlNumeralState,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1453:41: 1453:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: &'{erased} uts46::RtlNumeralState,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1453:58: 1453:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: uts46::RtlNumeralState,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1453:58: 1453:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1454:44: 1454:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1451:33: 1461:34 (#0),
                },
            ),
        ),
        ty: idna_adapter::BidiClass,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1454:44: 1454:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1456:37: 1458:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1456:40: 1456:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1456:50: 1458:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/uts46.rs:1386:25: 1469:26 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1464:32: 1469:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:1475:9: 1475:49 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1475:10: 1475:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:1475:9: 1475:49 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1475:29: 1475:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:1475:9: 1475:49 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:1475:38: 1475:48 (#0),
            scope: scope[0],
        },
    },
]