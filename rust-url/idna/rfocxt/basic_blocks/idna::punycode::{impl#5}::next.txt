[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:284:9: 303:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:284:9: 303:10 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb2, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*((*_1).1: &[(usize, char)])),
            StorageLive(_7),
            _7 = ((*_1).2: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:285:19: 285:53 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [(usize, char)]>::get::<usize>(move _6, move _7) -> [return: bb3, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            PlaceMention(_5),
            _10 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:285:13: 285:53 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [1: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = const (),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut ((*_1).0: core::slice::Iter<'_, T>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:293:30: 293:46 (#0),
                    scope: scope[2],
                },
                kind: _22 = <core::slice::Iter<'_, T> as core::iter::Iterator>::next(move _23) -> [return: bb11, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:286:17: 286:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_11),
            _11 = &((*((_5 as Some).0: &(usize, char))).0: usize),
            _12 = &_11,
            StorageLive(_14),
            StorageLive(_13),
            _13 = &((*((_5 as Some).0: &(usize, char))).1: char),
            _14 = &_13,
            _8 = &fake shallow ((_5 as Some).0: &(usize, char)),
            _9 = &fake shallow _5,
            StorageLive(_15),
            StorageLive(_16),
            _16 = (*(*_12)),
            StorageLive(_17),
            _17 = ((*_1).3: usize),
            _15 = Eq(move _16, move _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:286:35: 286:56 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _15) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            FakeRead(ForMatchGuard, _8),
            FakeRead(ForMatchGuard, _9),
            _19 = AddWithOverflow(((*_1).2: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:287:21: 287:39 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).2: usize), const 1_usize) -> [success: bb9, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:286:35: 286:56 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).2: usize) = move (_19.0: usize),
            _20 = AddWithOverflow(((*_1).3: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:288:21: 288:39 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).3: usize), const 1_usize) -> [success: bb10, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).3: usize) = move (_20.0: usize),
            StorageLive(_21),
            _21 = (*_13),
            _0 = core::option::Option::<char>::Some(move _21),
            StorageDead(_21),
            StorageDead(_13),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_12),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            PlaceMention(_22),
            _24 = discriminant(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:293:20: 293:27 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _24) -> [1: bb12, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:293:20: 293:27 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = ((_22 as Some).0: &T),
            _27 = AddWithOverflow(((*_1).3: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:294:17: 294:35 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).3: usize), const 1_usize) -> [success: bb14, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).3: usize) = move (_27.0: usize),
            StorageLive(_28),
            StorageLive(_29),
            _29 = const <C as punycode::PunycodeCaller>::EXTERNAL_CALLER,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:295:32: 295:50 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _29) -> [0: bb17, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = &(*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:296:21: 296:29 (#0),
                    scope: scope[2],
                },
                kind: _28 = <T as punycode::PunycodeCodeUnit>::char(move _30) -> [return: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:295:29: 299:18 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = &(*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:298:21: 298:46 (#0),
                    scope: scope[2],
                },
                kind: _28 = <T as punycode::PunycodeCodeUnit>::char_ascii_lower_case(move _31) -> [return: bb18, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:295:29: 299:18 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            _0 = core::option::Option::<char>::Some(move _28),
            StorageDead(_28),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            StorageLive(_33),
            _33 = ((*_1).2: usize),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(*((*_1).1: &[(usize, char)])),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:300:40: 300:61 (#0),
                    scope: scope[0],
                },
                kind: _34 = core::slice::<impl [(usize, char)]>::len(move _35) -> [return: bb21, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            _32 = Ge(move _33, move _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:300:23: 300:61 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _32) -> [0: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            _0 = core::option::Option::<char>::None,
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            _3 = const (),
            StorageDead(_32),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:284:9: 303:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:304:6: 304:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:283:5: 304:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:283:27: 283:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut punycode::Decode<'{erased}, T/#1, C/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:283:13: 283:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:284:9: 303:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:284:9: 303:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:283:5: 304:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:285:13: 292:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} (usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:285:19: 285:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [(usize, char)],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:285:19: 285:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:285:39: 285:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} &'{erased} (usize, char),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:285:19: 285:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} core::option::Option<&'{erased} (usize, char)>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:285:19: 285:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:286:17: 286:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                idna/src/punycode.rs:285:19: 285:53 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:286:17: 286:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:286:23: 286:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:286:23: 286:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                idna/src/punycode.rs:285:19: 285:53 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:286:17: 286:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:286:28: 286:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:286:28: 286:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:286:35: 286:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:286:35: 286:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:286:43: 286:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:286:60: 290:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:287:21: 287:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:288:21: 288:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:289:33: 289:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:293:13: 302:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:293:30: 293:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:293:13: 302:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:293:30: 293:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:293:20: 293:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _22,
                                ),
                                idna/src/punycode.rs:293:30: 293:46 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:293:20: 293:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:293:25: 293:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:293:13: 302:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:293:47: 300:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:294:17: 294:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:295:29: 299:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:53 ~ idna[9561]::punycode::PunycodeCaller::EXTERNAL_CALLER),
            },
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:295:32: 295:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:296:21: 296:29 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:296:21: 296:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:298:21: 298:46 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:298:21: 298:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:293:13: 302:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:300:23: 300:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:293:13: 302:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:300:23: 300:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:293:13: 302:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:300:40: 300:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:293:13: 302:14 (#0),
                },
            ),
        ),
        ty: &'{erased} [(usize, char)],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:300:40: 300:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:293:13: 302:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:300:62: 302:14 (#0),
            scope: scope[0],
        },
    },
]