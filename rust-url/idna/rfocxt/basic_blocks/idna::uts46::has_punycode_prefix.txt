[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:119:8: 119:19 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb1, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = Lt(move _4, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:119:8: 119:23 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = const false,
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:130:2: 130:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_7),
            StorageLive(_8),
            _8 = const 0_usize,
            _9 = Len((*_1)),
            _10 = Lt(_8, _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:124:13: 124:21 (#0),
                    scope: scope[0],
                },
                kind: assert(move _10, "index out of bounds: the length is {} but the index is {}", move _9, _8) -> [success: bb4, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = (*_1)[_8],
            FakeRead(ForLet(None), _7),
            StorageDead(_8),
            StorageLive(_11),
            StorageLive(_12),
            _12 = const 1_usize,
            _13 = Len((*_1)),
            _14 = Lt(_12, _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:125:13: 125:21 (#0),
                    scope: scope[1],
                },
                kind: assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb5, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = (*_1)[_12],
            FakeRead(ForLet(None), _11),
            StorageDead(_12),
            StorageLive(_15),
            StorageLive(_16),
            _16 = const 2_usize,
            _17 = Len((*_1)),
            _18 = Lt(_16, _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:126:13: 126:21 (#0),
                    scope: scope[2],
                },
                kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb6, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = (*_1)[_16],
            FakeRead(ForLet(None), _15),
            StorageDead(_16),
            StorageLive(_19),
            StorageLive(_20),
            _20 = const 3_usize,
            _21 = Len((*_1)),
            _22 = Lt(_20, _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:127:13: 127:21 (#0),
                    scope: scope[3],
                },
                kind: assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = (*_1)[_20],
            FakeRead(ForLet(None), _19),
            StorageDead(_20),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:128:14: 128:26 (#0),
                    scope: scope[4],
                },
                kind: _27 = <u32 as core::convert::From<u8>>::from(move _28) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            _29 = const 24_i32 as u32 (IntToInt),
            _30 = Lt(move _29, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:128:13: 128:33 (#0),
                    scope: scope[4],
                },
                kind: assert(move _30, "attempt to shift left by `{}`, which would overflow", const 24_i32) -> [success: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = Shl(move _27, const 24_i32),
            StorageDead(_27),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:128:37: 128:49 (#0),
                    scope: scope[4],
                },
                kind: _32 = <u32 as core::convert::From<u8>>::from(move _33) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            _34 = const 16_i32 as u32 (IntToInt),
            _35 = Lt(move _34, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:128:36: 128:56 (#0),
                    scope: scope[4],
                },
                kind: assert(move _35, "attempt to shift left by `{}`, which would overflow", const 16_i32) -> [success: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = Shl(move _32, const 16_i32),
            StorageDead(_32),
            _25 = BitOr(move _26, move _31),
            StorageDead(_31),
            StorageDead(_26),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:128:60: 128:72 (#0),
                    scope: scope[4],
                },
                kind: _37 = <u32 as core::convert::From<u8>>::from(move _38) -> [return: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            _39 = const 8_i32 as u32 (IntToInt),
            _40 = Lt(move _39, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:128:59: 128:78 (#0),
                    scope: scope[4],
                },
                kind: assert(move _40, "attempt to shift left by `{}`, which would overflow", const 8_i32) -> [success: bb13, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = Shl(move _37, const 8_i32),
            StorageDead(_37),
            _24 = BitOr(move _25, move _36),
            StorageDead(_36),
            StorageDead(_25),
            StorageLive(_41),
            StorageLive(_42),
            _42 = _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:128:81: 128:93 (#0),
                    scope: scope[4],
                },
                kind: _41 = <u32 as core::convert::From<u8>>::from(move _42) -> [return: bb14, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            _23 = BitOr(move _24, move _41),
            StorageDead(_41),
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageLive(_43),
            StorageLive(_44),
            _44 = _23,
            _43 = BitAnd(move _44, const uts46::PUNYCODE_PREFIX_MASK),
            StorageDead(_44),
            _0 = Eq(move _43, const uts46::PUNYCODE_PREFIX),
            StorageDead(_43),
            StorageDead(_23),
            StorageDead(_19),
            StorageDead(_15),
            StorageDead(_11),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:130:2: 130:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:130:2: 130:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:118:1: 130:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:118:41: 118:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:118:31: 118:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:118:24: 118:29 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:118:24: 118:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:118:24: 118:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:119:5: 121:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:119:8: 119:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:119:8: 119:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:119:8: 119:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:119:24: 121:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:124:13: 124:21 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:124:9: 124:10 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:124:9: 124:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:124:19: 124:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:124:13: 124:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:124:13: 124:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:125:13: 125:21 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:125:9: 125:10 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:125:9: 125:10 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:125:19: 125:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:125:13: 125:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:125:13: 125:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:126:13: 126:21 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:126:9: 126:10 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:126:9: 126:10 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:126:19: 126:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:126:13: 126:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:126:13: 126:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:127:13: 127:21 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:127:9: 127:10 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:127:9: 127:10 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:127:19: 127:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:127:13: 127:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:127:13: 127:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:128:13: 128:93 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:128:9: 128:10 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:9: 128:10 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:13: 128:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:13: 128:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:13: 128:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:14: 128:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:24: 128:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:13: 128:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:13: 128:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:36: 128:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:37: 128:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:47: 128:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:36: 128:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:36: 128:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:59: 128:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:60: 128:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:70: 128:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:59: 128:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:59: 128:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:81: 128:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:128:91: 128:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:129:5: 129:50 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:129:5: 129:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/uts46.rs:129:5: 129:50 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:129:6: 129:7 (#0),
            scope: scope[0],
        },
    },
]