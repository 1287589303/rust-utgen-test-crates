[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = (*_1),
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            PlaceMention(_2),
            _6 = Le(const '0', _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:143:20: 143:29 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb3, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<u32>::None,
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:148:6: 148:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:143:13: 143:17 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = Le(const 'a', _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:145:20: 145:29 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _4) -> [0: bb1, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:145:13: 145:17 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = Le(_2, const 'z'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:145:20: 145:29 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [0: bb1, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = Le(_2, const '9'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:143:20: 143:29 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _7) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = _2,
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:143:33: 143:48 (#0),
                    scope: scope[2],
                },
                kind: _10 = <u32 as core::convert::From<char>>::from(move _11) -> [return: bb8, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:143:51: 143:65 (#0),
                    scope: scope[2],
                },
                kind: _12 = <u32 as core::convert::From<char>>::from(const '0') -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = SubWithOverflow(_10, _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:143:33: 143:65 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _10, move _12) -> [success: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = move (_13.0: u32),
            StorageDead(_12),
            StorageDead(_10),
            _14 = AddWithOverflow(_9, const 26_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:143:33: 143:70 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 26_u32) -> [success: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_14.0: u32),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:143:69: 143:70 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = _2,
            StorageLive(_16),
            StorageLive(_17),
            _17 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:145:33: 145:48 (#0),
                    scope: scope[3],
                },
                kind: _16 = <u32 as core::convert::From<char>>::from(move _17) -> [return: bb13, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageLive(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:145:51: 145:65 (#0),
                    scope: scope[3],
                },
                kind: _18 = <u32 as core::convert::From<char>>::from(const 'a') -> [return: bb14, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = SubWithOverflow(_16, _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:145:33: 145:65 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_19.1: bool), "attempt to compute `{} - {}`, which would overflow", move _16, move _18) -> [success: bb15, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_19.0: u32),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:145:64: 145:65 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<u32>::Some(move _3),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:148:6: 148:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:148:6: 148:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:140:5: 148:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:140:24: 140:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:140:14: 140:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:141:20: 141:25 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:141:13: 141:17 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:141:13: 141:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:142:14: 147:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:145:20: 145:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:145:20: 145:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:143:20: 143:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:143:20: 143:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                idna/src/punycode.rs:142:20: 142:24 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:143:13: 143:17 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:143:13: 143:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:142:9: 147:11 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:143:33: 143:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:142:9: 147:11 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:143:33: 143:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:142:9: 147:11 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:143:43: 143:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:142:9: 147:11 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:143:51: 143:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:143:33: 143:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:143:33: 143:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                idna/src/punycode.rs:142:20: 142:24 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:145:13: 145:17 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:145:13: 145:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:142:9: 147:11 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:145:33: 145:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:142:9: 147:11 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:145:43: 145:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:142:9: 147:11 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:145:51: 145:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:145:33: 145:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:142:9: 147:11 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:146:18: 146:29 (#0),
            scope: scope[0],
        },
    },
]