[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*_1),
            StorageLive(_4),
            _4 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:82:9: 82:39 (#0),
                    scope: scope[0],
                },
                kind: _0 = <Errors as core::fmt::Debug>::fmt(move _3, move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:83:6: 83:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/lib.rs:81:5: 83:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:81:56: 81:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Errors,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:81:12: 81:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/lib.rs:81:22: 81:51 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/lib.rs:81:19: 81:20 (#0),
                            ),
                        ),
                        pat_span: idna/src/lib.rs:81:19: 81:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:81:19: 81:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:82:9: 82:39 (#0),
                },
            ),
        ),
        ty: &'{erased} Errors,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:82:31: 82:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/lib.rs:82:9: 82:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/lib.rs:82:37: 82:38 (#0),
            scope: scope[0],
        },
    },
]