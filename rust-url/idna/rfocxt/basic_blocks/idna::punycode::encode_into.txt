[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = (const 0_u32, const 0_u32),
            PlaceMention(_5),
            StorageLive(_3),
            _3 = (_5.0: u32),
            StorageLive(_4),
            _4 = (_5.1: u32),
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:365:14: 365:27 (#0),
                    scope: scope[1],
                },
                kind: _8 = <I as core::clone::Clone>::clone(move _9) -> [return: bb1, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:365:14: 365:27 (#223),
                    scope: scope[1],
                },
                kind: _7 = <I as core::iter::IntoIterator>::into_iter(move _8) -> [return: bb2, unwind: bb187],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            PlaceMention(_7),
            StorageLive(_10),
            _10 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:365:5: 373:6 (#222),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:365:5: 373:6 (#222),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut _10,
            _14 = &mut (*_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:365:14: 365:27 (#223),
                    scope: scope[2],
                },
                kind: _13 = <I as core::iter::Iterator>::next(move _14) -> [return: bb5, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _16 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:365:14: 365:27 (#223),
                    scope: scope[2],
                },
                kind: switchInt(move _16) -> [0: bb7, 1: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:365:14: 365:27 (#223),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:365:5: 373:6 (#222),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = ((_13 as Some).0: char),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:366:24: 367:28 (#0),
                    scope: scope[3],
                },
                kind: _22 = core::num::<impl u32>::checked_add(move _23, const 1_u32) -> [return: bb10, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = const (),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:373:5: 373:6 (#222),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb30, unwind: bb186],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageLive(_24),
            _24 = punycode::PunycodeEncodeError::Overflow,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:366:24: 368:50 (#0),
                    scope: scope[3],
                },
                kind: _21 = core::option::Option::<u32>::ok_or::<punycode::PunycodeEncodeError>(move _22, move _24) -> [return: bb11, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:366:24: 368:51 (#225),
                    scope: scope[3],
                },
                kind: _20 = <core::result::Result<u32, punycode::PunycodeEncodeError> as core::ops::Try>::branch(move _21) -> [return: bb12, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            PlaceMention(_20),
            _25 = discriminant(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:366:24: 368:51 (#225),
                    scope: scope[3],
                },
                kind: switchInt(move _25) -> [0: bb15, 1: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:366:24: 368:51 (#225),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:368:50: 368:51 (#226),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = ((_20 as Continue).0: u32),
            _19 = _29,
            StorageDead(_29),
            _3 = move _19,
            StorageDead(_19),
            StorageDead(_20),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &_18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:369:12: 369:24 (#0),
                    scope: scope[3],
                },
                kind: _30 = core::char::methods::<impl char>::is_ascii(move _31) -> [return: bb18, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = move ((_20 as Break).0: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>),
            StorageLive(_28),
            _28 = move _26,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:366:24: 368:51 (#225),
                    scope: scope[5],
                },
                kind: _0 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>>>::from_residual(move _28) -> [return: bb17, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_19),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb174,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:369:12: 369:24 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _30) -> [0: bb28, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &mut (*_2),
            StorageLive(_36),
            _36 = _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:370:13: 370:33 (#0),
                    scope: scope[3],
                },
                kind: _34 = <W as core::fmt::Write>::write_char(move _35, move _36) -> [return: bb20, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:370:13: 370:34 (#228),
                    scope: scope[3],
                },
                kind: _33 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _34) -> [return: bb21, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            PlaceMention(_33),
            _37 = discriminant(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:370:13: 370:34 (#228),
                    scope: scope[3],
                },
                kind: switchInt(move _37) -> [0: bb24, 1: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:370:13: 370:34 (#228),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:370:33: 370:34 (#229),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            _41 = ((_33 as Continue).0: ()),
            _32 = _41,
            StorageDead(_41),
            StorageDead(_33),
            StorageDead(_32),
            _42 = AddWithOverflow(_4, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:371:13: 371:30 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", _4, const 1_u32) -> [success: bb27, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = ((_33 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_40),
            _40 = _38,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:370:13: 370:34 (#228),
                    scope: scope[9],
                },
                kind: _0 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _40) -> [return: bb26, unwind: bb185],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_38),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb174,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move (_42.0: u32),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:369:9: 372:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:369:9: 372:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:365:5: 373:6 (#222),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:373:5: 373:6 (#222),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb31, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_43),
            StorageLive(_44),
            _44 = const <C as punycode::PunycodeCaller>::EXTERNAL_CALLER,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:375:9: 375:27 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _44) -> [0: bb32, otherwise: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:380:28: 381:28 (#0),
                    scope: scope[1],
                },
                kind: _48 = core::num::<impl u32>::checked_add(move _49, const 1_u32) -> [return: bb33, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageLive(_50),
            _50 = punycode::PunycodeEncodeError::Overflow,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:380:28: 382:50 (#0),
                    scope: scope[1],
                },
                kind: _47 = core::option::Option::<u32>::ok_or::<punycode::PunycodeEncodeError>(move _48, move _50) -> [return: bb34, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:380:28: 382:51 (#231),
                    scope: scope[1],
                },
                kind: _46 = <core::result::Result<u32, punycode::PunycodeEncodeError> as core::ops::Try>::branch(move _47) -> [return: bb35, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            PlaceMention(_46),
            _51 = discriminant(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:380:28: 382:51 (#231),
                    scope: scope[1],
                },
                kind: switchInt(move _51) -> [0: bb38, 1: bb37, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:380:28: 382:51 (#231),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:382:50: 382:51 (#232),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb39, imaginary: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_55),
            _55 = ((_46 as Continue).0: u32),
            _45 = _55,
            StorageDead(_55),
            FakeRead(ForLet(None), _45),
            StorageDead(_46),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = _45,
            StorageLive(_61),
            StorageLive(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:384:26: 384:46 (#0),
                    scope: scope[12],
                },
                kind: _62 = <u32 as core::convert::From<char>>::from(const core::char::MAX) -> [return: bb41, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _52 = move ((_46 as Break).0: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>),
            StorageLive(_54),
            _54 = move _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:380:28: 382:51 (#231),
                    scope: scope[14],
                },
                kind: _0 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>>>::from_residual(move _54) -> [return: bb40, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_52),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb173,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _63 = SubWithOverflow(_62, const punycode::INITIAL_N),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:384:26: 384:58 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_63.1: bool), "attempt to compute `{} - {}`, which would overflow", move _62, const punycode::INITIAL_N) -> [success: bb42, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = move (_63.0: u32),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:383:9: 384:59 (#0),
                    scope: scope[12],
                },
                kind: _59 = core::num::<impl u32>::checked_mul(move _60, move _61) -> [return: bb43, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            StorageLive(_64),
            _64 = punycode::PunycodeEncodeError::Overflow,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:383:9: 385:50 (#0),
                    scope: scope[12],
                },
                kind: _58 = core::option::Option::<u32>::ok_or::<punycode::PunycodeEncodeError>(move _59, move _64) -> [return: bb44, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:383:9: 385:51 (#233),
                    scope: scope[12],
                },
                kind: _57 = <core::result::Result<u32, punycode::PunycodeEncodeError> as core::ops::Try>::branch(move _58) -> [return: bb45, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            PlaceMention(_57),
            _65 = discriminant(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:383:9: 385:51 (#233),
                    scope: scope[12],
                },
                kind: switchInt(move _65) -> [0: bb48, 1: bb47, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:383:9: 385:51 (#233),
                    scope: scope[12],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:385:50: 385:51 (#234),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb49, imaginary: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_69),
            _69 = ((_57 as Continue).0: u32),
            _56 = _69,
            StorageDead(_69),
            StorageDead(_57),
            StorageDead(_56),
            _43 = const (),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:375:5: 386:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            _66 = move ((_57 as Break).0: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>),
            StorageLive(_68),
            _68 = move _66,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:383:9: 385:51 (#233),
                    scope: scope[18],
                },
                kind: _0 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>>>::from_residual(move _68) -> [return: bb50, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_66),
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb173,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:375:5: 386:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = _4,
            _71 = Gt(move _72, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:388:8: 388:24 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _71) -> [0: bb61, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:389:9: 389:31 (#0),
                    scope: scope[1],
                },
                kind: _75 = <W as core::fmt::Write>::write_char(move _76, const '-') -> [return: bb54, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:389:9: 389:32 (#236),
                    scope: scope[1],
                },
                kind: _74 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _75) -> [return: bb55, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            PlaceMention(_74),
            _77 = discriminant(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:389:9: 389:32 (#236),
                    scope: scope[1],
                },
                kind: switchInt(move _77) -> [0: bb58, 1: bb57, otherwise: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:389:9: 389:32 (#236),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:389:31: 389:32 (#237),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb59, imaginary: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_81),
            _81 = ((_74 as Continue).0: ()),
            _73 = _81,
            StorageDead(_81),
            StorageDead(_74),
            StorageDead(_73),
            _70 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:388:5: 390:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_78),
            _78 = ((_74 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_80),
            _80 = _78,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:389:9: 389:32 (#236),
                    scope: scope[22],
                },
                kind: _0 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _80) -> [return: bb60, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_78),
            StorageDead(_74),
            StorageDead(_73),
            StorageDead(_71),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb177,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            _70 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:388:5: 390:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            StorageLive(_82),
            _82 = const punycode::INITIAL_N,
            FakeRead(ForLet(None), _82),
            StorageLive(_83),
            _83 = const 0_u32,
            FakeRead(ForLet(None), _83),
            StorageLive(_84),
            _84 = const punycode::INITIAL_BIAS,
            FakeRead(ForLet(None), _84),
            StorageLive(_85),
            _85 = _4,
            FakeRead(ForLet(None), _85),
            StorageLive(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:395:5: 453:6 (#0),
                    scope: scope[28],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:395:5: 453:6 (#0),
                    scope: scope[28],
                },
                kind: falseUnwind -> [real: bb64, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_87),
            StorageLive(_88),
            _88 = _85,
            StorageLive(_89),
            _89 = _3,
            _87 = Lt(move _88, move _89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:395:11: 395:35 (#0),
                    scope: scope[28],
                },
                kind: switchInt(move _87) -> [0: bb166, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_88),
            StorageLive(_90),
            StorageLive(_91),
            StorageLive(_92),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:398:30: 399:21 (#0),
                    scope: scope[28],
                },
                kind: _94 = <I as core::clone::Clone>::clone(move _95) -> [return: bb66, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageLive(_96),
            _96 = {closure@idna/src/punycode.rs:400:18: 400:21},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:398:30: 400:31 (#0),
                    scope: scope[28],
                },
                kind: _93 = <I as core::iter::Iterator>::map::<u32, {closure@idna/src/punycode.rs:400:18: 400:21}>(move _94, move _96) -> [return: bb67, unwind: bb184],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_96),
            StorageDead(_94),
            StorageLive(_97),
            StorageLive(_98),
            _98 = &_82,
            _97 = {closure@idna/src/punycode.rs:401:21: 401:25} { code_point: move _98 },
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:398:30: 401:42 (#0),
                    scope: scope[28],
                },
                kind: _92 = <core::iter::Map<I, {closure@idna/src/punycode.rs:400:18: 400:21}> as core::iter::Iterator>::filter::<{closure@idna/src/punycode.rs:401:21: 401:25}>(move _93, move _97) -> [return: bb68, unwind: bb183],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:398:30: 402:19 (#0),
                    scope: scope[28],
                },
                kind: _91 = <core::iter::Filter<core::iter::Map<I, {closure@idna/src/punycode.rs:400:18: 400:21}>, {closure@idna/src/punycode.rs:401:21: 401:25}> as core::iter::Iterator>::min(move _92) -> [return: bb69, unwind: bb182],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:398:30: 403:22 (#0),
                    scope: scope[28],
                },
                kind: _90 = core::option::Option::<u32>::unwrap(move _91) -> [return: bb70, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            FakeRead(ForLet(None), _90),
            StorageLive(_99),
            StorageLive(_100),
            _100 = const <C as punycode::PunycodeCaller>::EXTERNAL_CALLER,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:405:12: 405:30 (#0),
                    scope: scope[29],
                },
                kind: switchInt(move _100) -> [0: bb90, otherwise: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_101),
            StorageLive(_102),
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = _90,
            StorageLive(_107),
            _107 = _82,
            _108 = SubWithOverflow(_106, _107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:406:27: 406:56 (#0),
                    scope: scope[29],
                },
                kind: assert(!move (_108.1: bool), "attempt to compute `{} - {}`, which would overflow", move _106, move _107) -> [success: bb72, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _105 = move (_108.0: u32),
            StorageDead(_107),
            StorageDead(_106),
            StorageLive(_109),
            StorageLive(_110),
            _110 = _85,
            _111 = AddWithOverflow(_110, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:407:30: 407:43 (#0),
                    scope: scope[29],
                },
                kind: assert(!move (_111.1: bool), "attempt to compute `{} + {}`, which would overflow", move _110, const 1_u32) -> [success: bb73, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _109 = move (_111.0: u32),
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:406:27: 407:44 (#0),
                    scope: scope[29],
                },
                kind: _104 = core::num::<impl u32>::checked_mul(move _105, move _109) -> [return: bb74, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_105),
            StorageLive(_112),
            _112 = punycode::PunycodeEncodeError::Overflow,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:406:27: 408:54 (#0),
                    scope: scope[29],
                },
                kind: _103 = core::option::Option::<u32>::ok_or::<punycode::PunycodeEncodeError>(move _104, move _112) -> [return: bb75, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            StorageDead(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:406:27: 408:55 (#241),
                    scope: scope[29],
                },
                kind: _102 = <core::result::Result<u32, punycode::PunycodeEncodeError> as core::ops::Try>::branch(move _103) -> [return: bb76, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            PlaceMention(_102),
            _113 = discriminant(_102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:406:27: 408:55 (#241),
                    scope: scope[29],
                },
                kind: switchInt(move _113) -> [0: bb79, 1: bb78, otherwise: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:406:27: 408:55 (#241),
                    scope: scope[29],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:408:54: 408:55 (#242),
                    scope: scope[29],
                },
                kind: falseEdge -> [real: bb80, imaginary: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_117),
            _117 = ((_102 as Continue).0: u32),
            _101 = _117,
            StorageDead(_117),
            FakeRead(ForLet(None), _101),
            StorageDead(_102),
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            StorageLive(_121),
            StorageLive(_122),
            _122 = _83,
            StorageLive(_123),
            _123 = _101,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:409:21: 410:38 (#0),
                    scope: scope[30],
                },
                kind: _121 = core::num::<impl u32>::checked_add(move _122, move _123) -> [return: bb82, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_114),
            _114 = move ((_102 as Break).0: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>),
            StorageLive(_116),
            _116 = move _114,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:406:27: 408:55 (#241),
                    scope: scope[32],
                },
                kind: _0 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>>>::from_residual(move _116) -> [return: bb81, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_116),
            StorageDead(_114),
            StorageDead(_102),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[29],
                },
                kind: goto -> bb171,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_123),
            StorageDead(_122),
            StorageLive(_124),
            _124 = punycode::PunycodeEncodeError::Overflow,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:409:21: 411:54 (#0),
                    scope: scope[30],
                },
                kind: _120 = core::option::Option::<u32>::ok_or::<punycode::PunycodeEncodeError>(move _121, move _124) -> [return: bb83, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_121),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:409:21: 411:55 (#243),
                    scope: scope[30],
                },
                kind: _119 = <core::result::Result<u32, punycode::PunycodeEncodeError> as core::ops::Try>::branch(move _120) -> [return: bb84, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            PlaceMention(_119),
            _125 = discriminant(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:409:21: 411:55 (#243),
                    scope: scope[30],
                },
                kind: switchInt(move _125) -> [0: bb87, 1: bb86, otherwise: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:409:21: 411:55 (#243),
                    scope: scope[30],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:411:54: 411:55 (#244),
                    scope: scope[30],
                },
                kind: falseEdge -> [real: bb88, imaginary: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_129),
            _129 = ((_119 as Continue).0: u32),
            _118 = _129,
            StorageDead(_129),
            _83 = move _118,
            StorageDead(_118),
            StorageDead(_119),
            _99 = const (),
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:405:9: 414:10 (#0),
                    scope: scope[29],
                },
                kind: goto -> bb95,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_126),
            _126 = move ((_119 as Break).0: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>),
            StorageLive(_128),
            _128 = move _126,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:409:21: 411:55 (#243),
                    scope: scope[36],
                },
                kind: _0 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>>>::from_residual(move _128) -> [return: bb89, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            StorageDead(_126),
            StorageDead(_118),
            StorageDead(_119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[30],
                },
                kind: goto -> bb171,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_130),
            StorageLive(_131),
            StorageLive(_132),
            _132 = _90,
            StorageLive(_133),
            _133 = _82,
            _134 = SubWithOverflow(_132, _133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:413:22: 413:51 (#0),
                    scope: scope[29],
                },
                kind: assert(!move (_134.1: bool), "attempt to compute `{} - {}`, which would overflow", move _132, move _133) -> [success: bb91, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _131 = move (_134.0: u32),
            StorageDead(_133),
            StorageDead(_132),
            StorageLive(_135),
            StorageLive(_136),
            _136 = _85,
            _137 = AddWithOverflow(_136, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:413:54: 413:69 (#0),
                    scope: scope[29],
                },
                kind: assert(!move (_137.1: bool), "attempt to compute `{} + {}`, which would overflow", move _136, const 1_u32) -> [success: bb92, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _135 = move (_137.0: u32),
            StorageDead(_136),
            _138 = MulWithOverflow(_131, _135),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:413:22: 413:69 (#0),
                    scope: scope[29],
                },
                kind: assert(!move (_138.1: bool), "attempt to compute `{} * {}`, which would overflow", move _131, move _135) -> [success: bb93, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _130 = move (_138.0: u32),
            StorageDead(_135),
            StorageDead(_131),
            _139 = AddWithOverflow(_83, _130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:413:13: 413:69 (#0),
                    scope: scope[29],
                },
                kind: assert(!move (_139.1: bool), "attempt to compute `{} + {}`, which would overflow", _83, move _130) -> [success: bb94, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _83 = move (_139.0: u32),
            StorageDead(_130),
            _99 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:405:9: 414:10 (#0),
                    scope: scope[29],
                },
                kind: goto -> bb95,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_100),
            StorageDead(_99),
            StorageLive(_140),
            _140 = _90,
            _82 = move _140,
            StorageDead(_140),
            StorageLive(_141),
            StorageLive(_142),
            StorageLive(_143),
            StorageLive(_144),
            _144 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:416:18: 416:31 (#0),
                    scope: scope[29],
                },
                kind: _143 = <I as core::clone::Clone>::clone(move _144) -> [return: bb96, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:416:18: 416:31 (#246),
                    scope: scope[29],
                },
                kind: _142 = <I as core::iter::IntoIterator>::into_iter(move _143) -> [return: bb97, unwind: bb181],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_143),
            PlaceMention(_142),
            StorageLive(_145),
            _145 = move _142,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:416:9: 450:10 (#245),
                    scope: scope[39],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:416:9: 450:10 (#245),
                    scope: scope[39],
                },
                kind: falseUnwind -> [real: bb99, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_146),
            StorageLive(_147),
            StorageLive(_148),
            StorageLive(_149),
            _149 = &mut _145,
            _148 = &mut (*_149),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:416:18: 416:31 (#246),
                    scope: scope[39],
                },
                kind: _147 = <I as core::iter::Iterator>::next(move _148) -> [return: bb100, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_148),
            PlaceMention(_147),
            _150 = discriminant(_147),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:416:18: 416:31 (#246),
                    scope: scope[39],
                },
                kind: switchInt(move _150) -> [0: bb102, 1: bb103, otherwise: bb101],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _147),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:416:18: 416:31 (#246),
                    scope: scope[39],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:416:9: 450:10 (#245),
                    scope: scope[39],
                },
                kind: falseEdge -> [real: bb104, imaginary: bb103],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_152),
            _152 = ((_147 as Some).0: char),
            StorageLive(_153),
            StorageLive(_154),
            _154 = _152,
            _153 = move _154 as u32 (IntToInt),
            StorageDead(_154),
            FakeRead(ForLet(None), _153),
            StorageLive(_155),
            StorageLive(_156),
            StorageLive(_157),
            _157 = _153,
            StorageLive(_158),
            _158 = _82,
            _156 = Lt(move _157, move _158),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:418:16: 418:30 (#0),
                    scope: scope[41],
                },
                kind: switchInt(move _156) -> [0: bb118, otherwise: bb105],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _141 = const (),
            StorageDead(_149),
            StorageDead(_147),
            StorageDead(_146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:450:9: 450:10 (#245),
                    scope: scope[29],
                },
                kind: drop(_145) -> [return: bb162, unwind: bb180],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_158),
            StorageDead(_157),
            StorageLive(_159),
            _159 = const <C as punycode::PunycodeCaller>::EXTERNAL_CALLER,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:419:20: 419:38 (#0),
                    scope: scope[41],
                },
                kind: switchInt(move _159) -> [0: bb115, otherwise: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_160),
            StorageLive(_161),
            StorageLive(_162),
            StorageLive(_163),
            StorageLive(_164),
            _164 = _83,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:420:29: 420:49 (#0),
                    scope: scope[41],
                },
                kind: _163 = core::num::<impl u32>::checked_add(move _164, const 1_u32) -> [return: bb107, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_164),
            StorageLive(_165),
            _165 = punycode::PunycodeEncodeError::Overflow,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:420:29: 420:86 (#0),
                    scope: scope[41],
                },
                kind: _162 = core::option::Option::<u32>::ok_or::<punycode::PunycodeEncodeError>(move _163, move _165) -> [return: bb108, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_165),
            StorageDead(_163),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:420:29: 420:87 (#250),
                    scope: scope[41],
                },
                kind: _161 = <core::result::Result<u32, punycode::PunycodeEncodeError> as core::ops::Try>::branch(move _162) -> [return: bb109, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_162),
            PlaceMention(_161),
            _166 = discriminant(_161),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:420:29: 420:87 (#250),
                    scope: scope[41],
                },
                kind: switchInt(move _166) -> [0: bb112, 1: bb111, otherwise: bb110],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _161),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:420:29: 420:87 (#250),
                    scope: scope[41],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:420:86: 420:87 (#251),
                    scope: scope[41],
                },
                kind: falseEdge -> [real: bb113, imaginary: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_170),
            _170 = ((_161 as Continue).0: u32),
            _160 = _170,
            StorageDead(_170),
            _83 = move _160,
            StorageDead(_160),
            StorageDead(_161),
            _155 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:419:17: 423:18 (#0),
                    scope: scope[41],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_167),
            _167 = move ((_161 as Break).0: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>),
            StorageLive(_169),
            _169 = move _167,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:420:29: 420:87 (#250),
                    scope: scope[43],
                },
                kind: _0 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>>>::from_residual(move _169) -> [return: bb114, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_169),
            StorageDead(_167),
            StorageDead(_160),
            StorageDead(_161),
            StorageDead(_159),
            StorageDead(_156),
            StorageDead(_155),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[41],
                },
                kind: goto -> bb168,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _171 = AddWithOverflow(_83, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:422:21: 422:31 (#0),
                    scope: scope[41],
                },
                kind: assert(!move (_171.1: bool), "attempt to compute `{} + {}`, which would overflow", _83, const 1_u32) -> [success: bb116, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _83 = move (_171.0: u32),
            _155 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:419:17: 423:18 (#0),
                    scope: scope[41],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:418:13: 424:14 (#0),
                    scope: scope[41],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_158),
            StorageDead(_157),
            _155 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:418:13: 424:14 (#0),
                    scope: scope[41],
                },
                kind: goto -> bb119,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_156),
            StorageDead(_155),
            StorageLive(_172),
            StorageLive(_173),
            _173 = _153,
            StorageLive(_174),
            _174 = _82,
            _172 = Eq(move _173, move _174),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:425:16: 425:31 (#0),
                    scope: scope[41],
                },
                kind: switchInt(move _172) -> [0: bb160, otherwise: bb120],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_174),
            StorageDead(_173),
            StorageLive(_175),
            _175 = _83,
            FakeRead(ForLet(None), _175),
            StorageLive(_176),
            _176 = const punycode::BASE,
            FakeRead(ForLet(None), _176),
            StorageLive(_177),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:429:17: 444:18 (#0),
                    scope: scope[47],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:429:17: 444:18 (#0),
                    scope: scope[47],
                },
                kind: falseUnwind -> [real: bb122, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_178),
            StorageLive(_179),
            StorageLive(_180),
            _180 = _176,
            StorageLive(_181),
            _181 = _84,
            _179 = Le(move _180, move _181),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:430:32: 430:41 (#0),
                    scope: scope[47],
                },
                kind: switchInt(move _179) -> [0: bb124, otherwise: bb123],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_181),
            StorageDead(_180),
            _178 = const punycode::T_MIN,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:430:29: 436:22 (#0),
                    scope: scope[47],
                },
                kind: goto -> bb130,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_181),
            StorageDead(_180),
            StorageLive(_182),
            StorageLive(_183),
            _183 = _176,
            StorageLive(_184),
            StorageLive(_185),
            _185 = _84,
            _186 = AddWithOverflow(_185, const punycode::T_MAX),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:432:36: 432:48 (#0),
                    scope: scope[47],
                },
                kind: assert(!move (_186.1: bool), "attempt to compute `{} + {}`, which would overflow", move _185, const punycode::T_MAX) -> [success: bb125, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _184 = move (_186.0: u32),
            StorageDead(_185),
            _182 = Ge(move _183, move _184),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:432:31: 432:48 (#0),
                    scope: scope[47],
                },
                kind: switchInt(move _182) -> [0: bb127, otherwise: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_184),
            StorageDead(_183),
            _178 = const punycode::T_MAX,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:432:28: 436:22 (#0),
                    scope: scope[47],
                },
                kind: goto -> bb129,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_184),
            StorageDead(_183),
            StorageLive(_187),
            _187 = _176,
            StorageLive(_188),
            _188 = _84,
            _189 = SubWithOverflow(_187, _188),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:435:25: 435:33 (#0),
                    scope: scope[47],
                },
                kind: assert(!move (_189.1: bool), "attempt to compute `{} - {}`, which would overflow", move _187, move _188) -> [success: bb128, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _178 = move (_189.0: u32),
            StorageDead(_188),
            StorageDead(_187),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:432:28: 436:22 (#0),
                    scope: scope[47],
                },
                kind: goto -> bb129,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_182),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:430:29: 436:22 (#0),
                    scope: scope[47],
                },
                kind: goto -> bb130,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_179),
            FakeRead(ForLet(None), _178),
            StorageLive(_190),
            StorageLive(_191),
            StorageLive(_192),
            _192 = _175,
            StorageLive(_193),
            _193 = _178,
            _191 = Lt(move _192, move _193),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:437:24: 437:29 (#0),
                    scope: scope[48],
                },
                kind: switchInt(move _191) -> [0: bb132, otherwise: bb131],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_193),
            StorageDead(_192),
            _177 = const (),
            StorageDead(_191),
            StorageDead(_190),
            StorageDead(_178),
            StorageDead(_177),
            StorageLive(_227),
            StorageLive(_228),
            StorageLive(_229),
            StorageLive(_230),
            _230 = &mut (*_2),
            StorageLive(_231),
            StorageLive(_232),
            _232 = _175,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:445:35: 445:52 (#0),
                    scope: scope[47],
                },
                kind: _231 = punycode::value_to_digit(move _232) -> [return: bb149, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_193),
            StorageDead(_192),
            _190 = const (),
            StorageDead(_191),
            StorageDead(_190),
            StorageLive(_195),
            StorageLive(_196),
            _196 = _178,
            StorageLive(_197),
            StorageLive(_198),
            StorageLive(_199),
            _199 = _175,
            StorageLive(_200),
            _200 = _178,
            _201 = SubWithOverflow(_199, _200),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:440:38: 440:45 (#0),
                    scope: scope[48],
                },
                kind: assert(!move (_201.1: bool), "attempt to compute `{} - {}`, which would overflow", move _199, move _200) -> [success: bb133, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _198 = move (_201.0: u32),
            StorageDead(_200),
            StorageDead(_199),
            StorageLive(_202),
            StorageLive(_203),
            _203 = _178,
            _204 = SubWithOverflow(const punycode::BASE, _203),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:440:48: 440:58 (#0),
                    scope: scope[48],
                },
                kind: assert(!move (_204.1: bool), "attempt to compute `{} - {}`, which would overflow", const punycode::BASE, move _203) -> [success: bb134, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _202 = move (_204.0: u32),
            StorageDead(_203),
            _205 = Eq(_202, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:440:37: 440:59 (#0),
                    scope: scope[48],
                },
                kind: assert(!move _205, "attempt to calculate the remainder of `{}` with a divisor of zero", _198) -> [success: bb135, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _197 = Rem(move _198, move _202),
            StorageDead(_202),
            StorageDead(_198),
            _206 = AddWithOverflow(_196, _197),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:440:33: 440:59 (#0),
                    scope: scope[48],
                },
                kind: assert(!move (_206.1: bool), "attempt to compute `{} + {}`, which would overflow", move _196, move _197) -> [success: bb136, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _195 = move (_206.0: u32),
            StorageDead(_197),
            StorageDead(_196),
            FakeRead(ForLet(None), _195),
            StorageLive(_207),
            StorageLive(_208),
            StorageLive(_209),
            StorageLive(_210),
            _210 = &mut (*_2),
            StorageLive(_211),
            StorageLive(_212),
            _212 = _195,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:441:39: 441:60 (#0),
                    scope: scope[49],
                },
                kind: _211 = punycode::value_to_digit(move _212) -> [return: bb137, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_212),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:441:21: 441:61 (#0),
                    scope: scope[49],
                },
                kind: _209 = <W as core::fmt::Write>::write_char(move _210, move _211) -> [return: bb138, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_211),
            StorageDead(_210),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:441:21: 441:62 (#256),
                    scope: scope[49],
                },
                kind: _208 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _209) -> [return: bb139, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_209),
            PlaceMention(_208),
            _213 = discriminant(_208),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:441:21: 441:62 (#256),
                    scope: scope[49],
                },
                kind: switchInt(move _213) -> [0: bb142, 1: bb141, otherwise: bb140],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _208),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:441:21: 441:62 (#256),
                    scope: scope[49],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:441:61: 441:62 (#257),
                    scope: scope[49],
                },
                kind: falseEdge -> [real: bb143, imaginary: bb142],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_217),
            _217 = ((_208 as Continue).0: ()),
            _207 = _217,
            StorageDead(_217),
            StorageDead(_208),
            StorageDead(_207),
            StorageLive(_218),
            StorageLive(_219),
            _219 = _175,
            StorageLive(_220),
            _220 = _178,
            _221 = SubWithOverflow(_219, _220),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:442:25: 442:32 (#0),
                    scope: scope[49],
                },
                kind: assert(!move (_221.1: bool), "attempt to compute `{} - {}`, which would overflow", move _219, move _220) -> [success: bb145, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_214),
            _214 = ((_208 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_216),
            _216 = _214,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:441:21: 441:62 (#256),
                    scope: scope[51],
                },
                kind: _0 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _216) -> [return: bb144, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_216),
            StorageDead(_214),
            StorageDead(_208),
            StorageDead(_207),
            StorageDead(_195),
            StorageDead(_178),
            StorageDead(_177),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[47],
                },
                kind: goto -> bb167,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _218 = move (_221.0: u32),
            StorageDead(_220),
            StorageDead(_219),
            StorageLive(_222),
            StorageLive(_223),
            _223 = _178,
            _224 = SubWithOverflow(const punycode::BASE, _223),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:442:35: 442:45 (#0),
                    scope: scope[49],
                },
                kind: assert(!move (_224.1: bool), "attempt to compute `{} - {}`, which would overflow", const punycode::BASE, move _223) -> [success: bb146, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _222 = move (_224.0: u32),
            StorageDead(_223),
            _225 = Eq(_222, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:442:25: 442:45 (#0),
                    scope: scope[49],
                },
                kind: assert(!move _225, "attempt to divide `{}` by zero", _218) -> [success: bb147, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _175 = Div(move _218, move _222),
            StorageDead(_222),
            StorageDead(_218),
            _226 = AddWithOverflow(_176, const punycode::BASE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:443:21: 443:30 (#0),
                    scope: scope[49],
                },
                kind: assert(!move (_226.1: bool), "attempt to compute `{} + {}`, which would overflow", _176, const punycode::BASE) -> [success: bb148, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _176 = move (_226.0: u32),
            _11 = const (),
            StorageDead(_195),
            StorageDead(_178),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:429:17: 444:18 (#0),
                    scope: scope[47],
                },
                kind: goto -> bb121,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_232),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:445:17: 445:53 (#0),
                    scope: scope[47],
                },
                kind: _229 = <W as core::fmt::Write>::write_char(move _230, move _231) -> [return: bb150, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_231),
            StorageDead(_230),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:445:17: 445:54 (#258),
                    scope: scope[47],
                },
                kind: _228 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _229) -> [return: bb151, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_229),
            PlaceMention(_228),
            _233 = discriminant(_228),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:445:17: 445:54 (#258),
                    scope: scope[47],
                },
                kind: switchInt(move _233) -> [0: bb154, 1: bb153, otherwise: bb152],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _228),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:445:17: 445:54 (#258),
                    scope: scope[47],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:445:53: 445:54 (#259),
                    scope: scope[47],
                },
                kind: falseEdge -> [real: bb155, imaginary: bb154],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_237),
            _237 = ((_228 as Continue).0: ()),
            _227 = _237,
            StorageDead(_237),
            StorageDead(_228),
            StorageDead(_227),
            StorageLive(_238),
            StorageLive(_239),
            _239 = _83,
            StorageLive(_240),
            StorageLive(_241),
            _241 = _85,
            _242 = AddWithOverflow(_241, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:446:37: 446:50 (#0),
                    scope: scope[47],
                },
                kind: assert(!move (_242.1: bool), "attempt to compute `{} + {}`, which would overflow", move _241, const 1_u32) -> [success: bb157, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_234),
            _234 = ((_228 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_236),
            _236 = _234,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:445:17: 445:54 (#258),
                    scope: scope[55],
                },
                kind: _0 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _236) -> [return: bb156, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_236),
            StorageDead(_234),
            StorageDead(_228),
            StorageDead(_227),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[47],
                },
                kind: goto -> bb167,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _240 = move (_242.0: u32),
            StorageDead(_241),
            StorageLive(_243),
            StorageLive(_244),
            _244 = _85,
            StorageLive(_245),
            _245 = _4,
            _243 = Eq(move _244, move _245),
            StorageDead(_245),
            StorageDead(_244),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:446:24: 446:78 (#0),
                    scope: scope[47],
                },
                kind: _238 = punycode::adapt(move _239, move _240, move _243) -> [return: bb158, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_243),
            StorageDead(_240),
            StorageDead(_239),
            _84 = move _238,
            StorageDead(_238),
            _83 = const 0_u32,
            _246 = AddWithOverflow(_85, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:448:17: 448:31 (#0),
                    scope: scope[47],
                },
                kind: assert(!move (_246.1: bool), "attempt to compute `{} + {}`, which would overflow", _85, const 1_u32) -> [success: bb159, unwind: bb179],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _85 = move (_246.0: u32),
            _146 = const (),
            StorageDead(_176),
            StorageDead(_175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:425:13: 449:14 (#0),
                    scope: scope[41],
                },
                kind: goto -> bb161,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_174),
            StorageDead(_173),
            _146 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:425:13: 449:14 (#0),
                    scope: scope[41],
                },
                kind: goto -> bb161,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_172),
            StorageDead(_153),
            StorageDead(_152),
            StorageDead(_149),
            StorageDead(_147),
            StorageDead(_146),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:416:9: 450:10 (#245),
                    scope: scope[39],
                },
                kind: goto -> bb98,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:450:9: 450:10 (#245),
                    scope: scope[29],
                },
                kind: drop(_142) -> [return: bb163, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_141),
            _247 = AddWithOverflow(_83, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:451:9: 451:19 (#0),
                    scope: scope[29],
                },
                kind: assert(!move (_247.1: bool), "attempt to compute `{} + {}`, which would overflow", _83, const 1_u32) -> [success: bb164, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _83 = move (_247.0: u32),
            _248 = AddWithOverflow(_82, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:452:9: 452:24 (#0),
                    scope: scope[29],
                },
                kind: assert(!move (_248.1: bool), "attempt to compute `{} + {}`, which would overflow", _82, const 1_u32) -> [success: bb165, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _82 = move (_248.0: u32),
            _11 = const (),
            StorageDead(_90),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:395:5: 453:6 (#0),
                    scope: scope[28],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_88),
            StorageLive(_250),
            _86 = const (),
            StorageDead(_250),
            StorageDead(_87),
            StorageDead(_86),
            StorageLive(_252),
            _252 = (),
            _0 = core::result::Result::<(), punycode::PunycodeEncodeError>::Ok(move _252),
            StorageDead(_252),
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_82),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:455:1: 455:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb178, unwind: bb189],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_176),
            StorageDead(_175),
            StorageDead(_172),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[41],
                },
                kind: goto -> bb168,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
            StorageDead(_152),
            StorageDead(_149),
            StorageDead(_147),
            StorageDead(_146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:450:9: 450:10 (#245),
                    scope: scope[29],
                },
                kind: drop(_145) -> [return: bb169, unwind: bb180],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:450:9: 450:10 (#245),
                    scope: scope[29],
                },
                kind: drop(_142) -> [return: bb170, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_141),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[29],
                },
                kind: goto -> bb172,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_100),
            StorageDead(_99),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[29],
                },
                kind: goto -> bb172,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_87),
            StorageDead(_86),
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb177,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb177,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:373:5: 373:6 (#222),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb175, unwind: bb186],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:373:5: 373:6 (#222),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb176, unwind: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb177,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:455:1: 455:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb178, unwind: bb189],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:455:2: 455:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:450:9: 450:10 (#245),
                    scope: scope[29],
                },
                kind: drop(_145) -> [return: bb180, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:450:9: 450:10 (#245),
                    scope: scope[29],
                },
                kind: drop(_142) -> [return: bb188, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:416:30: 416:31 (#246),
                    scope: scope[29],
                },
                kind: drop(_143) -> [return: bb188, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:402:18: 402:19 (#0),
                    scope: scope[28],
                },
                kind: drop(_92) -> [return: bb188, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:401:41: 401:42 (#0),
                    scope: scope[28],
                },
                kind: drop(_93) -> [return: bb188, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:400:30: 400:31 (#0),
                    scope: scope[28],
                },
                kind: drop(_94) -> [return: bb188, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:373:5: 373:6 (#222),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb186, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:373:5: 373:6 (#222),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb188, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:365:26: 365:27 (#223),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb188, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:455:1: 455:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb189, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/punycode.rs:357:1: 455:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:357:65: 357:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/punycode.rs:357:43: 357:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:357:36: 357:41 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:357:36: 357:41 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:357:36: 357:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/punycode.rs:357:54: 357:60 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:357:46: 357:52 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:357:46: 357:52 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:357:46: 357:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                idna/src/punycode.rs:364:48: 364:57 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:364:9: 364:45 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:364:10: 364:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                idna/src/punycode.rs:364:48: 364:57 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:364:9: 364:45 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:364:28: 364:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, u32),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:364:48: 364:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:5: 373:6 (#222),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:14: 365:27 (#223),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:14: 365:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:14: 365:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                idna/src/punycode.rs:365:14: 365:27 (#223),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:365:14: 365:27 (#223),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:14: 365:27 (#223),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:357:1: 455:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:14: 365:27 (#223),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:14: 365:27 (#223),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:14: 365:27 (#223),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:14: 365:27 (#223),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:5: 373:6 (#222),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:5: 373:6 (#222),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                idna/src/punycode.rs:365:14: 365:27 (#223),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:365:9: 365:10 (#224),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:365:9: 365:10 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:366:24: 368:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:366:24: 368:51 (#225),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:366:24: 368:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:366:24: 367:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:366:24: 366:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: punycode::PunycodeEncodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:368:20: 368:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:368:50: 368:51 (#226),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                idna/src/punycode.rs:366:24: 368:51 (#225),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:368:50: 368:51 (#226),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:368:50: 368:51 (#226),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:368:50: 368:51 (#226),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:368:50: 368:51 (#226),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                idna/src/punycode.rs:366:24: 368:51 (#225),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:366:24: 368:51 (#225),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:366:24: 368:51 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:369:9: 372:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:369:12: 369:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:369:9: 372:10 (#0),
                },
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:369:12: 369:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:370:13: 370:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:370:13: 370:34 (#228),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:370:13: 370:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:370:13: 370:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:370:31: 370:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:370:33: 370:34 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                idna/src/punycode.rs:370:13: 370:34 (#228),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:370:33: 370:34 (#229),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:370:33: 370:34 (#229),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:370:33: 370:34 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:370:33: 370:34 (#229),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                idna/src/punycode.rs:370:13: 370:34 (#228),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:370:13: 370:34 (#228),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:370:13: 370:34 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:371:13: 371:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:375:5: 386:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:53 ~ idna[9561]::punycode::PunycodeCaller::EXTERNAL_CALLER),
            },
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:375:9: 375:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:380:28: 382:51 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:380:13: 380:25 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:380:13: 380:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:380:28: 382:51 (#231),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:380:28: 382:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:380:28: 381:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:380:28: 380:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: punycode::PunycodeEncodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:382:20: 382:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:382:50: 382:51 (#232),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                idna/src/punycode.rs:380:28: 382:51 (#231),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:382:50: 382:51 (#232),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:382:50: 382:51 (#232),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:382:50: 382:51 (#232),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:382:50: 382:51 (#232),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _46,
                                ),
                                idna/src/punycode.rs:380:28: 382:51 (#231),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:380:28: 382:51 (#231),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:380:28: 382:51 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:383:9: 385:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:383:9: 385:51 (#233),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:383:9: 385:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:383:9: 384:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:383:9: 383:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:384:26: 384:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:384:26: 384:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:384:26: 384:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: punycode::PunycodeEncodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:385:20: 385:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:385:50: 385:51 (#234),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _57,
                                ),
                                idna/src/punycode.rs:383:9: 385:51 (#233),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:385:50: 385:51 (#234),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:385:50: 385:51 (#234),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:385:50: 385:51 (#234),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:385:50: 385:51 (#234),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _57,
                                ),
                                idna/src/punycode.rs:383:9: 385:51 (#233),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:383:9: 385:51 (#233),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:383:9: 385:51 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:388:5: 390:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:388:8: 388:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:388:8: 388:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:389:9: 389:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:389:9: 389:32 (#236),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:389:9: 389:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:389:9: 389:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:389:31: 389:32 (#237),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _74,
                                ),
                                idna/src/punycode.rs:389:9: 389:32 (#236),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:389:31: 389:32 (#237),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:389:31: 389:32 (#237),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:389:31: 389:32 (#237),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:389:31: 389:32 (#237),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _74,
                                ),
                                idna/src/punycode.rs:389:9: 389:32 (#236),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:389:9: 389:32 (#236),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:389:9: 389:32 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:391:26: 391:35 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:391:9: 391:23 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:391:9: 391:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:392:21: 392:25 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:392:9: 392:18 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:392:9: 392:18 (#0),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:393:20: 393:32 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:393:9: 393:17 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:393:9: 393:17 (#0),
            scope: scope[26],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:394:25: 394:37 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:394:9: 394:22 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:394:9: 394:22 (#0),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:395:5: 453:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:395:5: 453:6 (#238),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:395:11: 395:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:395:5: 453:6 (#238),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:395:11: 395:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:395:5: 453:6 (#238),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:395:23: 395:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:398:30: 403:22 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:398:13: 398:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:398:13: 398:27 (#0),
            scope: scope[28],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:398:30: 402:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Filter<core::iter::Map<I/#0, Closure(DefId(0:123 ~ idna[9561]::punycode::encode_into::{closure#0}), [I/#0, W/#1, C/#2, i16, Binder { value: extern "RustCall" fn((char,)) -> u32, bound_vars: [] }, ()])>, Closure(DefId(0:124 ~ idna[9561]::punycode::encode_into::{closure#1}), [I/#0, W/#1, C/#2, i16, Binder { value: extern "RustCall" fn((&'^0 u32,)) -> bool, bound_vars: [Region(BrAnon)] }, (&'{erased} u32,)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:398:30: 401:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<I/#0, Closure(DefId(0:123 ~ idna[9561]::punycode::encode_into::{closure#0}), [I/#0, W/#1, C/#2, i16, Binder { value: extern "RustCall" fn((char,)) -> u32, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:398:30: 400:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:398:30: 399:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:398:30: 398:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:123 ~ idna[9561]::punycode::encode_into::{closure#0}),
            [
                I/#0,
                W/#1,
                C/#2,
                i16,
                Binder { value: extern "RustCall" fn((char,)) -> u32, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:400:18: 400:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:124 ~ idna[9561]::punycode::encode_into::{closure#1}),
            [
                I/#0,
                W/#1,
                C/#2,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 u32,)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} u32,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:401:21: 401:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:401:21: 401:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:405:9: 414:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:53 ~ idna[9561]::punycode::PunycodeCaller::EXTERNAL_CALLER),
            },
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:405:12: 405:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:406:27: 408:55 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:406:17: 406:24 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:406:17: 406:24 (#0),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:406:27: 408:55 (#241),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:406:27: 408:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:406:27: 407:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:406:27: 406:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:406:28: 406:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:406:45: 406:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:406:27: 406:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:407:30: 407:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:407:30: 407:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:407:30: 407:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: punycode::PunycodeEncodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:408:24: 408:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:408:54: 408:55 (#242),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _102,
                                ),
                                idna/src/punycode.rs:406:27: 408:55 (#241),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:408:54: 408:55 (#242),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:408:54: 408:55 (#242),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:408:54: 408:55 (#242),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:408:54: 408:55 (#242),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _102,
                                ),
                                idna/src/punycode.rs:406:27: 408:55 (#241),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:406:27: 408:55 (#241),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:406:27: 408:55 (#0),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:409:21: 411:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:409:21: 411:55 (#243),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:409:21: 411:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:409:21: 410:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:409:21: 409:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:410:30: 410:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: punycode::PunycodeEncodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:411:24: 411:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:411:54: 411:55 (#244),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _119,
                                ),
                                idna/src/punycode.rs:409:21: 411:55 (#243),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:411:54: 411:55 (#244),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:411:54: 411:55 (#244),
            scope: scope[30],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:411:54: 411:55 (#244),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:411:54: 411:55 (#244),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _119,
                                ),
                                idna/src/punycode.rs:409:21: 411:55 (#243),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:409:21: 411:55 (#243),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:409:21: 411:55 (#0),
            scope: scope[30],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:413:22: 413:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:413:22: 413:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:413:23: 413:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:413:40: 413:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:413:22: 413:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:413:54: 413:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:413:55: 413:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:413:54: 413:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:413:22: 413:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:413:13: 413:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:415:22: 415:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:9: 450:10 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:18: 416:31 (#246),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:18: 416:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:18: 416:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _142,
                                ),
                                idna/src/punycode.rs:416:18: 416:31 (#246),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:416:18: 416:31 (#246),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:18: 416:31 (#246),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:18: 416:31 (#246),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:18: 416:31 (#246),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:18: 416:31 (#246),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:18: 416:31 (#246),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:9: 450:10 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:9: 450:10 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _147,
                                ),
                                idna/src/punycode.rs:416:18: 416:31 (#246),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:416:13: 416:14 (#247),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:416:13: 416:14 (#0),
            scope: scope[39],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:417:21: 417:29 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:417:17: 417:18 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:417:17: 417:18 (#0),
            scope: scope[40],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:417:21: 417:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:418:13: 424:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:418:16: 418:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:418:16: 418:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:418:20: 418:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:53 ~ idna[9561]::punycode::PunycodeCaller::EXTERNAL_CALLER),
            },
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:419:20: 419:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:29: 420:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:29: 420:87 (#250),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:29: 420:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:29: 420:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:29: 420:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: punycode::PunycodeEncodeError,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:56: 420:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:86: 420:87 (#251),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _161,
                                ),
                                idna/src/punycode.rs:420:29: 420:87 (#250),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:420:86: 420:87 (#251),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:86: 420:87 (#251),
            scope: scope[41],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:86: 420:87 (#251),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:86: 420:87 (#251),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _161,
                                ),
                                idna/src/punycode.rs:420:29: 420:87 (#250),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:420:29: 420:87 (#250),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:420:29: 420:87 (#0),
            scope: scope[41],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:422:21: 422:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:425:13: 449:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:425:16: 425:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:425:13: 449:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:425:16: 425:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:425:13: 449:14 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:425:21: 425:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:427:29: 427:34 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:427:21: 427:26 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:427:21: 427:26 (#0),
            scope: scope[41],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:428:29: 428:33 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:428:21: 428:26 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:428:21: 428:26 (#0),
            scope: scope[46],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:429:17: 444:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:430:29: 436:22 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:430:25: 430:26 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:430:25: 430:26 (#0),
            scope: scope[47],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:430:32: 430:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:430:32: 430:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:430:37: 430:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:432:31: 432:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:432:31: 432:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:432:36: 432:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:432:36: 432:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:432:36: 432:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:435:25: 435:33 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:435:25: 435:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: idna/src/punycode.rs:435:25: 435:33 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:435:29: 435:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:435:25: 435:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:437:21: 439:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:437:24: 437:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:437:24: 437:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:437:28: 437:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:437:30: 439:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/punycode.rs:440:33: 440:59 (#0),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:440:25: 440:30 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:25: 440:30 (#0),
            scope: scope[48],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:33: 440:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:37: 440:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:38: 440:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:39: 440:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:43: 440:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:38: 440:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:48: 440:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:56: 440:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:48: 440:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:37: 440:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:440:33: 440:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:21: 441:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:21: 441:62 (#256),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:21: 441:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:21: 441:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:39: 441:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:54: 441:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:61: 441:62 (#257),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _208,
                                ),
                                idna/src/punycode.rs:441:21: 441:62 (#256),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:441:61: 441:62 (#257),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:61: 441:62 (#257),
            scope: scope[49],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:61: 441:62 (#257),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:61: 441:62 (#257),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _208,
                                ),
                                idna/src/punycode.rs:441:21: 441:62 (#256),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:441:21: 441:62 (#256),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:441:21: 441:62 (#0),
            scope: scope[49],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:442:25: 442:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:442:26: 442:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:442:30: 442:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:442:25: 442:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:442:35: 442:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:442:43: 442:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:442:35: 442:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:442:25: 442:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:443:21: 443:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:17: 445:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:17: 445:54 (#258),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:17: 445:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:17: 445:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:35: 445:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:50: 445:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:53: 445:54 (#259),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _228,
                                ),
                                idna/src/punycode.rs:445:17: 445:54 (#258),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:445:53: 445:54 (#259),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:53: 445:54 (#259),
            scope: scope[47],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:53: 445:54 (#259),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:53: 445:54 (#259),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _228,
                                ),
                                idna/src/punycode.rs:445:17: 445:54 (#258),
                            ),
                        ),
                        pat_span: idna/src/punycode.rs:445:17: 445:54 (#258),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:445:17: 445:54 (#0),
            scope: scope[47],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:446:24: 446:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:446:30: 446:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:446:37: 446:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:446:37: 446:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:446:37: 446:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:446:52: 446:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:446:52: 446:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:446:65: 446:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:448:17: 448:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:451:9: 451:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:452:9: 452:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: idna/src/punycode.rs:395:5: 453:6 (#238),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:395:5: 453:6 (#238),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:395:5: 453:6 (#238),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:395:5: 453:6 (#238),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/punycode.rs:454:8: 454:10 (#0),
            scope: scope[0],
        },
    },
]