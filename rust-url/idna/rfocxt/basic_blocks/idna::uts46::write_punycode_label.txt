[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_2),
            StorageLive(_7),
            StorageLive(_8),
            _8 = const "xn--",
            _7 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:112:5: 112:27 (#0),
                    scope: scope[0],
                },
                kind: _5 = <W as core::fmt::Write>::write_str(move _6, move _7) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:112:5: 112:28 (#269),
                    scope: scope[0],
                },
                kind: _4 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _5) -> [return: bb2, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _9 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:112:5: 112:28 (#269),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:112:5: 112:28 (#269),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:112:27: 112:28 (#270),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_4 as Continue).0: ()),
            _3 = _13,
            StorageDead(_13),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:113:58: 113:70 (#0),
                    scope: scope[0],
                },
                kind: _18 = core::slice::<impl [char]>::iter(move _19) -> [return: bb8, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = ((_4 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_12),
            _12 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:112:5: 112:28 (#269),
                    scope: scope[2],
                },
                kind: _0 = <core::result::Result<(), uts46::ProcessingError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _12) -> [return: bb7, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:113:58: 113:79 (#0),
                    scope: scope[0],
                },
                kind: _17 = <core::slice::Iter<'_, char> as core::iter::Iterator>::copied::<'_, char>(move _18) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_20),
            _20 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:113:5: 113:86 (#0),
                    scope: scope[0],
                },
                kind: _16 = punycode::encode_into::<core::iter::Copied<core::slice::Iter<'_, char>>, W, punycode::InternalCaller>(move _17, move _20) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:113:5: 113:87 (#271),
                    scope: scope[0],
                },
                kind: _15 = <core::result::Result<(), punycode::PunycodeEncodeError> as core::ops::Try>::branch(move _16) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            _21 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:113:5: 113:87 (#271),
                    scope: scope[0],
                },
                kind: switchInt(move _21) -> [0: bb14, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:113:5: 113:87 (#271),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:113:86: 113:87 (#272),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = ((_15 as Continue).0: ()),
            _14 = _25,
            StorageDead(_25),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_26),
            _26 = (),
            _0 = core::result::Result::<(), uts46::ProcessingError>::Ok(move _26),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:115:2: 115:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_15 as Break).0: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>),
            StorageLive(_24),
            _24 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:113:5: 113:87 (#271),
                    scope: scope[6],
                },
                kind: _0 = <core::result::Result<(), uts46::ProcessingError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>>>::from_residual(move _24) -> [return: bb16, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:115:2: 115:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: idna/src/uts46.rs:108:1: 115:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), uts46::ProcessingError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:111:6: 111:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:109:12: 109:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:109:5: 109:10 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:109:5: 109:10 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:109:5: 109:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            idna/src/uts46.rs:110:11: 110:17 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                idna/src/uts46.rs:110:5: 110:9 (#0),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:110:5: 110:9 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:110:5: 110:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:5: 112:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:5: 112:28 (#269),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:5: 112:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:5: 112:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:20: 112:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:20: 112:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:27: 112:28 (#270),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                idna/src/uts46.rs:112:5: 112:28 (#269),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:112:27: 112:28 (#270),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:27: 112:28 (#270),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:27: 112:28 (#270),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:27: 112:28 (#270),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                idna/src/uts46.rs:112:5: 112:28 (#269),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:112:5: 112:28 (#269),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:112:5: 112:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:5: 113:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:5: 113:87 (#271),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:5: 113:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Copied<core::slice::Iter<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:58: 113:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:58: 113:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:58: 113:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut W/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:81: 113:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:86: 113:87 (#272),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                idna/src/uts46.rs:113:5: 113:87 (#271),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:113:86: 113:87 (#272),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:86: 113:87 (#272),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:86: 113:87 (#272),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, punycode::PunycodeEncodeError>,
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:86: 113:87 (#272),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                idna/src/uts46.rs:113:5: 113:87 (#271),
                            ),
                        ),
                        pat_span: idna/src/uts46.rs:113:5: 113:87 (#271),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:113:5: 113:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: idna/src/uts46.rs:114:8: 114:10 (#0),
            scope: scope[0],
        },
    },
]