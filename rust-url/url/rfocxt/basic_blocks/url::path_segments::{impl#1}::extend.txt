[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*((*_1).0: &mut Url)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:241:44: 241:61 (#0),
                    scope: scope[0],
                },
                kind: _5 = Url::scheme(move _6) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:241:27: 241:62 (#0),
                    scope: scope[0],
                },
                kind: _4 = <parser::SchemeType as core::convert::From<&str>>::from(move _5) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_7),
            StorageLive(_8),
            _8 = ((*((*_1).0: &mut Url)).7: u32),
            _7 = move _8 as usize (IntToInt),
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*((*_1).0: &mut Url)),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_7,
            StorageLive(_13),
            _13 = &_4,
            _11 = {closure@url/src/path_segments.rs:243:25: 243:33} { segments: move _2, path_start: move _12, scheme_type: move _13 },
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:243:9: 264:11 (#0),
                    scope: scope[2],
                },
                kind: _9 = Url::mutate::<{closure@url/src/path_segments.rs:243:25: 243:33}, ()>(move _10, move _11) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            _3 = &mut (*_1),
            StorageDead(_7),
            StorageDead(_4),
            _0 = &mut (*_3),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:266:5: 266:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:266:6: 266:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:264:10: 264:11 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:266:5: 266:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:236:5: 266:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut path_segments::PathSegmentsMut<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:236:49: 236:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut path_segments::PathSegmentsMut<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:236:22: 236:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/path_segments.rs:236:43: 236:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/path_segments.rs:236:33: 236:41 (#0),
                            ),
                        ),
                        pat_span: url/src/path_segments.rs:236:33: 236:41 (#0),
                    },
                ),
            ),
        ),
        ty: I/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:236:33: 236:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut path_segments::PathSegmentsMut<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:265:9: 265:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/path_segments.rs:241:27: 241:62 (#0),
                            ),
                        ),
                        pat_span: url/src/path_segments.rs:241:13: 241:24 (#0),
                    },
                ),
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:241:13: 241:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:241:44: 241:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:241:44: 241:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/path_segments.rs:242:26: 242:54 (#0),
                            ),
                        ),
                        pat_span: url/src/path_segments.rs:242:13: 242:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:242:13: 242:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:242:26: 242:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:243:9: 264:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:243:9: 243:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:302 ~ url[3b6e]::path_segments::{impl#1}::extend::{closure#0}),
            [
                '{erased},
                I/#1,
                i32,
                Binder { value: extern "RustCall" fn((&'^0 mut parser::Parser<'^1>,)), bound_vars: [Region(BrAnon), Region(BrAnon)] },
                (I/#1, &'{erased} usize, &'{erased} parser::SchemeType),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:243:25: 264:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:243:25: 264:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:243:25: 264:10 (#0),
            scope: scope[0],
        },
    },
]