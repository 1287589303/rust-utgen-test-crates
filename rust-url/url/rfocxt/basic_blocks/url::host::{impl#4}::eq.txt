[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
            StorageLive(_5),
            _5 = _2,
            _3 = (move _4, move _5),
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
            _9 = discriminant((*(_3.0: &host::Host<S>))),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:170:9: 170:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb2, 1: bb4, 2: bb6, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:174:23: 174:28 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = discriminant((*(_3.1: &host::Host<T>))),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:170:9: 170:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:171:13: 171:47 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = discriminant((*(_3.1: &host::Host<T>))),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:170:9: 170:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [1: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:172:13: 172:43 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = discriminant((*(_3.1: &host::Host<T>))),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:170:9: 170:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [2: bb7, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:173:13: 173:43 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &(((*(_3.0: &host::Host<S>)) as Domain).0: S),
            StorageLive(_11),
            _11 = &(((*(_3.1: &host::Host<T>)) as Domain).0: T),
            StorageLive(_12),
            _12 = &_10,
            StorageLive(_13),
            _13 = &_11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:171:51: 171:57 (#0),
                    scope: scope[1],
                },
                kind: _0 = <&S as core::cmp::PartialEq<&T>>::eq(move _12, move _13) -> [return: bb9, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:171:56: 171:57 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = &(((*(_3.0: &host::Host<S>)) as Ipv4).0: core::net::Ipv4Addr),
            StorageLive(_15),
            _15 = &(((*(_3.1: &host::Host<T>)) as Ipv4).0: core::net::Ipv4Addr),
            StorageLive(_16),
            _16 = &_14,
            StorageLive(_17),
            _17 = &_15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:172:47: 172:53 (#0),
                    scope: scope[2],
                },
                kind: _0 = <&core::net::Ipv4Addr as core::cmp::PartialEq>::eq(move _16, move _17) -> [return: bb11, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:172:52: 172:53 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = &(((*(_3.0: &host::Host<S>)) as Ipv6).0: core::net::Ipv6Addr),
            StorageLive(_19),
            _19 = &(((*(_3.1: &host::Host<T>)) as Ipv6).0: core::net::Ipv6Addr),
            StorageLive(_20),
            _20 = &_18,
            StorageLive(_21),
            _21 = &_19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:173:47: 173:53 (#0),
                    scope: scope[3],
                },
                kind: _0 = <&core::net::Ipv6Addr as core::cmp::PartialEq>::eq(move _20, move _21) -> [return: bb13, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:173:52: 173:53 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:176:6: 176:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:169:5: 176:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:169:38: 169:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} host::Host<S/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:169:11: 169:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/host.rs:169:25: 169:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:169:18: 169:23 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:169:18: 169:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} host::Host<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:169:18: 169:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: (&'{erased} host::Host<S/#0>, &'{erased} host::Host<T/#1>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:170:15: 170:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} host::Host<S/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:170:16: 170:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} host::Host<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:170:22: 170:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:171:31: 171:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:172:29: 172:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:173:29: 173:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:171:14: 171:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                url/src/host.rs:170:15: 170:28 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:171:13: 171:47 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:171:27: 171:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                url/src/host.rs:170:15: 170:28 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:171:13: 171:47 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:171:44: 171:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} S/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:171:51: 171:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:171:56: 171:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                url/src/host.rs:170:15: 170:28 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:172:13: 172:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} core::net::Ipv4Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:172:25: 172:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                url/src/host.rs:170:15: 170:28 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:172:13: 172:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} core::net::Ipv4Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:172:40: 172:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} core::net::Ipv4Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:172:47: 172:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} core::net::Ipv4Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:172:52: 172:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                url/src/host.rs:170:15: 170:28 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:173:13: 173:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} core::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:173:25: 173:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                url/src/host.rs:170:15: 170:28 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:173:13: 173:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} core::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:173:40: 173:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} core::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:173:47: 173:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:170:9: 175:10 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} core::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:173:52: 173:53 (#0),
            scope: scope[0],
        },
    },
]