[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:152:8: 152:30 (#0),
                    scope: scope[0],
                },
                kind: _4 = Url::cannot_be_a_base(move _5) -> [return: bb1, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:152:8: 152:30 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_7),
            _7 = (),
            _0 = core::result::Result::<(), ()>::Err(move _7),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:157:17: 157:45 (#0),
                    scope: scope[0],
                },
                kind: _8 = parser::Input::<'_>::new_no_trim(move _9) -> [return: bb4, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:161:22: 161:34 (#0),
                    scope: scope[3],
                },
                kind: _13 = Url::scheme(move _14) -> [return: bb5, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageLive(_15),
            StorageLive(_16),
            _16 = _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:162:27: 162:51 (#0),
                    scope: scope[4],
                },
                kind: _15 = <parser::SchemeType as core::convert::From<&str>>::from(move _16) -> [return: bb6, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &_15,
            StorageLive(_20),
            StorageLive(_21),
            _21 = parser::SchemeType::File,
            _20 = &_21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:163:12: 163:43 (#0),
                    scope: scope[5],
                },
                kind: _18 = <parser::SchemeType as core::cmp::PartialEq>::eq(move _19, move _20) -> [return: bb7, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:163:12: 163:43 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _18) -> [0: bb15, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:163:47: 163:66 (#0),
                    scope: scope[5],
                },
                kind: _22 = core::str::<impl str>::is_empty(move _23) -> [return: bb9, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:163:47: 163:66 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _22) -> [0: bb14, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut (*_1),
            StorageLive(_27),
            StorageLive(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:164:48: 164:61 (#0),
                    scope: scope[5],
                },
                kind: _28 = std::string::String::new() -> [return: bb11, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = host::Host::Domain(move _28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:164:61: 164:62 (#0),
                    scope: scope[5],
                },
                kind: drop(_28) -> [return: bb12, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageLive(_29),
            _29 = core::option::Option::<core::option::Option<u16>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:164:13: 164:69 (#0),
                    scope: scope[5],
                },
                kind: _25 = Url::set_host_internal(move _26, move _27, move _29) -> [return: bb13, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
            StorageLive(_30),
            _30 = (),
            _0 = core::result::Result::<(), ()>::Ok(move _30),
            StorageDead(_30),
            StorageDead(_22),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = const (),
            StorageDead(_22),
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_31),
            StorageLive(_32),
            _32 = move _8,
            StorageLive(_33),
            _33 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:168:37: 168:75 (#0),
                    scope: scope[6],
                },
                kind: _31 = parser::Parser::<'_>::parse_host(move _32, move _33) -> [return: bb17, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            PlaceMention(_31),
            _34 = discriminant(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:168:16: 168:34 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _34) -> [0: bb18, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:168:16: 168:34 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _35 = move (((_31 as Ok).0: (host::Host, parser::Input<'_>)).0: host::Host),
            StorageLive(_36),
            _36 = move (((_31 as Ok).0: (host::Host, parser::Input<'_>)).1: parser::Input<'_>),
            StorageLive(_37),
            _37 = move _35,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:169:13: 169:17 (#0),
                    scope: scope[6],
                },
                kind: drop(_10) -> [return: bb20, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move _37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:169:20: 169:21 (#0),
                    scope: scope[6],
                },
                kind: drop(_37) -> [return: bb22, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move _37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:169:20: 169:21 (#0),
                    scope: scope[6],
                },
                kind: drop(_37) -> [return: bb70, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &_36,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:170:49: 170:76 (#0),
                    scope: scope[7],
                },
                kind: _39 = parser::Input::<'_>::split_prefix::<char>(move _40, const ':') -> [return: bb23, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            PlaceMention(_39),
            _41 = discriminant(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:170:31: 170:46 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _41) -> [1: bb24, otherwise: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:170:31: 170:46 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            _42 = move ((_39 as Some).0: parser::Input<'_>),
            StorageLive(_43),
            StorageLive(_44),
            _44 = &_42,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:171:20: 171:40 (#0),
                    scope: scope[7],
                },
                kind: _43 = parser::Input::<'_>::is_empty(move _44) -> [return: bb26, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:171:20: 171:40 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _43) -> [0: bb28, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            _38 = core::option::Option::<core::option::Option<u16>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:171:17: 177:18 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            _47 = move _42,
            StorageLive(_48),
            StorageLive(_49),
            _49 = &_13,
            _48 = {closure@url/src/quirks.rs:174:51: 174:53} { scheme: move _49 },
            StorageDead(_49),
            StorageLive(_50),
            _50 = parser::Context::Setter,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:174:21: 174:92 (#0),
                    scope: scope[7],
                },
                kind: _46 = parser::Parser::<'_>::parse_port::<{closure@url/src/quirks.rs:174:51: 174:53}>(move _47, move _48, move _50) -> [return: bb29, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_48),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:174:21: 175:30 (#0),
                    scope: scope[7],
                },
                kind: _45 = core::result::Result::<(core::option::Option<u16>, parser::Input<'_>), parser::ParseError>::ok(move _46) -> [return: bb30, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageLive(_51),
            _51 = {closure@url/src/quirks.rs:176:30: 176:50},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:174:21: 176:56 (#0),
                    scope: scope[7],
                },
                kind: _38 = core::option::Option::<(core::option::Option<u16>, parser::Input<'_>)>::map::<core::option::Option<u16>, {closure@url/src/quirks.rs:176:30: 176:50}>(move _45, move _51) -> [return: bb31, unwind: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:171:17: 177:18 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:170:24: 180:14 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = core::option::Option::<core::option::Option<u16>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:170:24: 180:14 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = move _38,
            StorageDead(_38),
            StorageDead(_39),
            _12 = const (),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:181:9: 181:10 (#0),
                    scope: scope[5],
                },
                kind: drop(_35) -> [return: bb36, unwind: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_53),
            _53 = (),
            _0 = core::result::Result::<(), ()>::Err(move _53),
            StorageDead(_53),
            StorageDead(_15),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:184:5: 184:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb63, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_15),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:184:5: 184:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb37, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_12),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = &_10,
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            _61 = const "",
            _60 = &(*_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:186:29: 186:43 (#0),
                    scope: scope[3],
                },
                kind: _59 = <str as std::string::ToString>::to_string(move _60) -> [return: bb38, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            _58 = host::Host::Domain(move _59),
            _57 = &_58,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:186:43: 186:44 (#0),
                    scope: scope[3],
                },
                kind: drop(_59) -> [return: bb39, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:186:8: 186:44 (#0),
                    scope: scope[3],
                },
                kind: _55 = <host::Host as core::cmp::PartialEq>::eq(move _56, move _57) -> [return: bb40, unwind: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:186:8: 186:44 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _55) -> [0: bb58, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:186:43: 186:44 (#0),
                    scope: scope[3],
                },
                kind: drop(_58) -> [return: bb42, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:187:14: 187:27 (#0),
                    scope: scope[3],
                },
                kind: _64 = quirks::username(move _65) -> [return: bb43, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _63 = &(*_64),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:187:14: 187:38 (#0),
                    scope: scope[3],
                },
                kind: _62 = core::str::<impl str>::is_empty(move _63) -> [return: bb44, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:187:14: 187:38 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _62) -> [0: bb46, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_64),
            StorageLive(_66),
            PlaceMention(_11),
            _68 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 457:9 (#196),
                    scope: scope[3],
                },
                kind: switchInt(move _68) -> [1: bb48, otherwise: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:188:5: 190:6 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _66 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:459:18: 459:23 (#196),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _67 = discriminant(((_11 as Some).0: core::option::Option<u16>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 457:9 (#196),
                    scope: scope[3],
                },
                kind: switchInt(move _67) -> [1: bb49, otherwise: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:187:61: 187:74 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb50, imaginary: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _66 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:458:39: 458:43 (#196),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#196),
                    scope: scope[3],
                },
                kind: switchInt(move _66) -> [0: bb52, otherwise: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:187:79: 187:89 (#0),
                    scope: scope[3],
                },
                kind: _71 = Url::port(move _72) -> [return: bb53, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _70 = &_71,
            StorageDead(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:187:79: 187:99 (#0),
                    scope: scope[3],
                },
                kind: _69 = core::option::Option::<u16>::is_some(move _70) -> [return: bb54, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:187:79: 187:99 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _69) -> [0: bb57, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:188:5: 190:6 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_74),
            _74 = (),
            _0 = core::result::Result::<(), ()>::Err(move _74),
            StorageDead(_74),
            StorageDead(_69),
            StorageDead(_66),
            StorageDead(_62),
            StorageDead(_55),
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:186:43: 186:44 (#0),
                    scope: scope[3],
                },
                kind: drop(_58) -> [return: bb59, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = const (),
            StorageDead(_69),
            StorageDead(_66),
            StorageDead(_62),
            StorageDead(_55),
            StorageDead(_54),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &mut (*_1),
            StorageLive(_77),
            _77 = move _10,
            StorageLive(_78),
            _78 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:191:5: 191:42 (#0),
                    scope: scope[3],
                },
                kind: _75 = Url::set_host_internal(move _76, move _77, move _78) -> [return: bb61, unwind: bb68],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_76),
            StorageDead(_75),
            StorageLive(_79),
            _79 = (),
            _0 = core::result::Result::<(), ()>::Ok(move _79),
            StorageDead(_79),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:193:1: 193:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb62, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:193:2: 193:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:193:1: 193:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb66, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:193:2: 193:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:191:41: 191:42 (#0),
                    scope: scope[3],
                },
                kind: drop(_77) -> [return: bb73, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:186:43: 186:44 (#0),
                    scope: scope[3],
                },
                kind: drop(_58) -> [return: bb73, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:181:9: 181:10 (#0),
                    scope: scope[5],
                },
                kind: drop(_35) -> [return: bb71, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:184:5: 184:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_31) -> [return: bb73, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:164:68: 164:69 (#0),
                    scope: scope[5],
                },
                kind: drop(_27) -> [return: bb73, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:193:1: 193:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb74, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:150:1: 193:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:150:51: 150:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/quirks.rs:150:22: 150:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/quirks.rs:150:17: 150:20 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:150:17: 150:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:150:17: 150:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/quirks.rs:150:42: 150:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/quirks.rs:150:32: 150:40 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:150:32: 150:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:150:32: 150:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:152:5: 154:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:152:8: 152:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:152:8: 152:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:152:31: 154:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:153:20: 153:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/quirks.rs:157:17: 157:45 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:157:9: 157:14 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:157:9: 157:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:157:36: 157:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: url/src/quirks.rs:158:9: 158:13 (#0),
                    },
                ),
            ),
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:158:9: 158:13 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: url/src/quirks.rs:159:9: 159:17 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::option::Option<u16>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:159:9: 159:17 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/quirks.rs:168:9: 183:10 (#0),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:168:9: 183:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/quirks.rs:161:22: 161:34 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:161:13: 161:19 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:161:13: 161:19 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:161:22: 161:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/quirks.rs:162:27: 162:51 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:162:13: 162:24 (#0),
                    },
                ),
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:162:13: 162:24 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:162:44: 162:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:163:9: 166:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:163:12: 163:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:163:12: 163:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:163:27: 163:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:163:27: 163:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:163:47: 163:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:163:47: 163:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:163:67: 166:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:164:13: 164:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:164:13: 164:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:164:35: 164:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:164:48: 164:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::option::Option<u16>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:164:64: 164:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:165:23: 165:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/quirks.rs:168:9: 183:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<(host::Host<std::string::String>, parser::Input<'{erased}>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:168:37: 168:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/quirks.rs:168:9: 183:10 (#0),
                },
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:168:56: 168:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/quirks.rs:168:9: 183:10 (#0),
                },
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:168:63: 168:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:168:16: 168:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                url/src/quirks.rs:168:37: 168:75 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:168:16: 168:34 (#0),
                    },
                ),
            ),
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:168:20: 168:21 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                url/src/quirks.rs:168:37: 168:75 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:168:16: 168:34 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:168:23: 168:32 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:169:20: 169:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::option::Option<u16>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:170:24: 180:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<parser::Input<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:170:49: 170:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:170:49: 170:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:170:31: 170:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                url/src/quirks.rs:170:49: 170:76 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:170:31: 170:46 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:170:36: 170:45 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:171:17: 177:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:171:20: 171:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:171:17: 177:18 (#0),
                },
            ),
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:171:20: 171:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:174:21: 176:56 (#0),
                },
            ),
        ),
        ty: core::option::Option<(core::option::Option<u16>, parser::Input<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:174:21: 175:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:174:21: 176:56 (#0),
                },
            ),
        ),
        ty: core::result::Result<(core::option::Option<u16>, parser::Input<'{erased}>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:174:21: 174:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:174:21: 176:56 (#0),
                },
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:174:40: 174:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:174:21: 176:56 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:353 ~ url[3b6e]::quirks::set_host::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn(()) -> core::option::Option<u16>, bound_vars: [] },
                (&'{erased} &'{erased} str,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:174:51: 174:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:174:21: 176:56 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:174:51: 174:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:174:21: 176:56 (#0),
                },
            ),
        ),
        ty: parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:174:76: 174:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:174:21: 176:56 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:354 ~ url[3b6e]::quirks::set_host::{closure#1}),
            [
                i32,
                Binder { value: extern "RustCall" fn(((core::option::Option<u16>, parser::Input<'{erased}>),)) -> core::option::Option<u16>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:176:30: 176:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/quirks.rs:168:9: 183:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:181:16: 183:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:182:24: 182:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:186:5: 190:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:186:8: 186:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:186:8: 186:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:186:16: 186:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:186:16: 186:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:186:29: 186:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:186:29: 186:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:186:29: 186:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:187:14: 187:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:187:14: 187:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:187:14: 187:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:187:23: 187:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#196),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:187:66: 187:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:187:61: 187:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:187:79: 187:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:187:79: 187:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:187:79: 187:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:187:79: 187:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:188:5: 190:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:189:20: 189:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:191:5: 191:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:191:5: 191:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:191:27: 191:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::option::Option<u16>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:191:33: 191:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:192:8: 192:10 (#0),
            scope: scope[0],
        },
    },
]