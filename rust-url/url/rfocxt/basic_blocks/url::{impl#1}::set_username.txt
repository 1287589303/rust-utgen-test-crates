[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:13: 2289:28 (#0),
                    scope: scope[0],
                },
                kind: _4 = Url::has_host(move _5) -> [return: bb1, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:13: 2289:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:32: 2289:43 (#0),
                    scope: scope[0],
                },
                kind: _8 = Url::host(move _9) -> [return: bb4, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:97: 2291:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &_8,
            StorageDead(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = const "",
            _13 = &(*_14),
            _12 = host::Host::<&str>::Domain(move _13),
            StorageDead(_13),
            _11 = core::option::Option::<host::Host<&str>>::Some(move _12),
            _10 = &_11,
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:32: 2289:69 (#0),
                    scope: scope[0],
                },
                kind: _6 = <core::option::Option<host::Host<&str>> as core::cmp::PartialEq>::eq(move _7, move _10) -> [return: bb5, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:32: 2289:69 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:97: 2291:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:73: 2289:86 (#0),
                    scope: scope[0],
                },
                kind: _17 = Url::scheme(move _18) -> [return: bb8, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = &_17,
            StorageDead(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = const "file",
            _19 = &_20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:73: 2289:96 (#0),
                    scope: scope[0],
                },
                kind: _15 = <&str as core::cmp::PartialEq>::eq(move _16, move _19) -> [return: bb9, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:73: 2289:96 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _15) -> [0: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2289:97: 2291:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = (),
            _0 = core::result::Result::<(), ()>::Err(move _22),
            StorageDead(_22),
            StorageDead(_15),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb72,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            _3 = const (),
            StorageDead(_15),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_23),
            StorageLive(_24),
            _24 = ((*_1).1: u32),
            _25 = AddWithOverflow(_24, const 3_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2292:30: 2292:49 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", move _24, const 3_u32) -> [success: bb13, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = move (_25.0: u32),
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageLive(_26),
            StorageLive(_27),
            _27 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#467),
                    scope: scope[1],
                },
                kind: switchInt(move _27) -> [0: bb19, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &(*_1),
            StorageLive(_33),
            StorageLive(_34),
            _34 = ((*_1).1: u32),
            StorageLive(_35),
            _35 = _23,
            _33 = core::ops::Range::<u32> { start: move _34, end: move _35 },
            StorageDead(_35),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2293:23: 2293:66 (#0),
                    scope: scope[1],
                },
                kind: _31 = Url::slice::<core::ops::Range<u32>>(move _32, move _33) -> [return: bb15, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = &_31,
            StorageDead(_33),
            StorageDead(_32),
            StorageLive(_36),
            StorageLive(_37),
            _37 = const "://",
            _36 = &_37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2293:23: 2293:75 (#0),
                    scope: scope[1],
                },
                kind: _29 = <&str as core::cmp::PartialEq>::eq(move _30, move _36) -> [return: bb16, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2293:23: 2293:75 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _29) -> [0: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_30),
            StorageDead(_37),
            StorageDead(_31),
            _28 = const (),
            StorageDead(_29),
            StorageDead(_28),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#466),
                    scope: scope[1],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_30),
            StorageDead(_37),
            StorageDead(_31),
            StorageLive(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#468),
                    scope: scope[1],
                },
                kind: _38 = core::panicking::panic(const "assertion failed: self.slice(self.scheme_end..username_start) == \"://\"") -> bb74,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#466),
                    scope: scope[1],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            _43 = &(*_1),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _23,
            StorageLive(_46),
            _46 = ((*_1).2: u32),
            _44 = core::ops::Range::<u32> { start: move _45, end: move _46 },
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2294:12: 2294:57 (#0),
                    scope: scope[1],
                },
                kind: _42 = Url::slice::<core::ops::Range<u32>>(move _43, move _44) -> [return: bb21, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = &_42,
            StorageDead(_44),
            StorageDead(_43),
            StorageLive(_47),
            _47 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2294:12: 2294:69 (#0),
                    scope: scope[1],
                },
                kind: _40 = <&str as core::cmp::PartialEq>::eq(move _41, move _47) -> [return: bb22, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2294:12: 2294:69 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _40) -> [0: bb24, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_49),
            _49 = (),
            _0 = core::result::Result::<(), ()>::Ok(move _49),
            StorageDead(_49),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb72,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_42),
            StorageDead(_41),
            _39 = const (),
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &(*_1),
            StorageLive(_54),
            StorageLive(_55),
            _55 = ((*_1).2: u32),
            _54 = core::ops::RangeFrom::<u32> { start: move _55 },
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2297:30: 2297:61 (#0),
                    scope: scope[1],
                },
                kind: _52 = Url::slice::<core::ops::RangeFrom<u32>>(move _53, move _54) -> [return: bb25, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _51 = &(*_52),
            StorageDead(_54),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2297:30: 2297:72 (#0),
                    scope: scope[1],
                },
                kind: _50 = <str as std::borrow::ToOwned>::to_owned(move _51) -> [return: bb26, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            FakeRead(ForLet(None), _50),
            StorageDead(_52),
            StorageLive(_56),
            StorageLive(_57),
            _57 = &mut ((*_1).0: std::string::String),
            StorageLive(_58),
            StorageLive(_59),
            _59 = _23,
            _58 = move _59 as usize (IntToInt),
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2298:9: 2298:61 (#0),
                    scope: scope[2],
                },
                kind: _56 = std::string::String::truncate(move _57, move _58) -> [return: bb27, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_60),
            StorageLive(_61),
            _61 = &mut ((*_1).0: std::string::String),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2300:21: 2300:60 (#0),
                    scope: scope[2],
                },
                kind: _62 = percent_encoding::utf8_percent_encode(move _63, const parser::USERINFO) -> [return: bb28, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2299:9: 2300:61 (#0),
                    scope: scope[2],
                },
                kind: _60 = <std::string::String as core::iter::Extend<&str>>::extend::<percent_encoding::PercentEncode<'_>>(move _61, move _62) -> [return: bb29, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_61),
            StorageDead(_60),
            StorageLive(_64),
            _64 = ((*_1).2: u32),
            FakeRead(ForLet(None), _64),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = &((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2303:36: 2303:60 (#0),
                    scope: scope[3],
                },
                kind: _67 = std::string::String::len(move _68) -> [return: bb30, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2303:29: 2303:61 (#0),
                    scope: scope[3],
                },
                kind: _66 = parser::to_u32(move _67) -> [return: bb31, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2303:29: 2303:70 (#0),
                    scope: scope[3],
                },
                kind: _65 = core::result::Result::<u32, parser::ParseError>::unwrap(move _66) -> [return: bb32, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            ((*_1).2: u32) = move _65,
            StorageDead(_65),
            StorageLive(_69),
            _69 = ((*_1).2: u32),
            FakeRead(ForLet(None), _69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = ((*_1).2: u32),
            StorageLive(_72),
            _72 = _23,
            _70 = Eq(move _71, move _72),
            StorageDead(_72),
            StorageDead(_71),
            FakeRead(ForLet(None), _70),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            _75 = _70,
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            _81 = &_50,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:39: 2307:61 (#0),
                    scope: scope[5],
                },
                kind: _80 = <std::string::String as core::ops::Deref>::deref(move _81) -> [return: bb33, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _79 = &(*_80),
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:39: 2307:61 (#0),
                    scope: scope[5],
                },
                kind: _78 = core::str::<impl str>::chars(move _79) -> [return: bb34, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _77 = &mut _78,
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:39: 2307:68 (#0),
                    scope: scope[5],
                },
                kind: _76 = <core::str::Chars<'_> as core::iter::Iterator>::next(move _77) -> [return: bb35, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            _74 = (move _75, move _76),
            StorageDead(_76),
            StorageDead(_75),
            PlaceMention(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:9: 2307:69 (#0),
                    scope: scope[5],
                },
                kind: switchInt((_74.0: bool)) -> [0: bb40, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _84 = discriminant((_74.1: core::option::Option<char>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:9: 2307:69 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _84) -> [1: bb43, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _82 = discriminant((_74.1: core::option::Option<char>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:9: 2307:69 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _82) -> [1: bb38, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:9: 2307:69 (#0),
                    scope: scope[5],
                },
                kind: switchInt((((_74.1: core::option::Option<char>) as Some).0: char)) -> [64: bb39, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2308:13: 2308:30 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb46, imaginary: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _83 = discriminant((_74.1: core::option::Option<char>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:9: 2307:69 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _83) -> [1: bb41, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:9: 2307:69 (#0),
                    scope: scope[5],
                },
                kind: switchInt((((_74.1: core::option::Option<char>) as Some).0: char)) -> [64: bb45, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:9: 2307:69 (#0),
                    scope: scope[5],
                },
                kind: switchInt((_74.0: bool)) -> [0: bb44, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2307:9: 2307:69 (#0),
                    scope: scope[5],
                },
                kind: switchInt((((_74.1: core::option::Option<char>) as Some).0: char)) -> [58: bb45, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _99 = AddWithOverflow(_69, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2316:17: 2316:33 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_99.1: bool), "attempt to compute `{} + {}`, which would overflow", _69, const 1_u32) -> [success: bb53, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2312:13: 2312:60 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb50, imaginary: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _85 = AddWithOverflow(_64, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2309:17: 2309:35 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_85.1: bool), "attempt to compute `{} + {}`, which would overflow", _64, const 1_u32) -> [success: bb47, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _64 = move (_85.0: u32),
            StorageLive(_86),
            StorageLive(_87),
            _87 = &mut ((*_1).0: std::string::String),
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            StorageLive(_91),
            _91 = &_50,
            StorageLive(_92),
            _92 = core::ops::RangeFrom::<usize> { start: const 1_usize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2310:60: 2310:65 (#0),
                    scope: scope[5],
                },
                kind: _90 = <std::string::String as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _91, move _92) -> [return: bb48, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageDead(_91),
            _89 = &(*_90),
            _88 = &(*_89),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2310:17: 2310:66 (#0),
                    scope: scope[5],
                },
                kind: _86 = std::string::String::push_str(move _87, move _88) -> [return: bb49, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            StorageDead(_90),
            StorageDead(_89),
            StorageDead(_86),
            _73 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2308:34: 2311:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_93),
            StorageLive(_94),
            _94 = &mut ((*_1).0: std::string::String),
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = &_50,
            _97 = &(*_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2313:45: 2313:60 (#0),
                    scope: scope[5],
                },
                kind: _96 = <std::string::String as core::ops::Deref>::deref(move _97) -> [return: bb51, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _95 = &(*_96),
            StorageDead(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2313:17: 2313:61 (#0),
                    scope: scope[5],
                },
                kind: _93 = std::string::String::push_str(move _94, move _95) -> [return: bb52, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageDead(_94),
            StorageDead(_98),
            StorageDead(_96),
            StorageDead(_93),
            _73 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2312:64: 2314:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _69 = move (_99.0: u32),
            StorageLive(_100),
            StorageLive(_101),
            _101 = &mut ((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2317:17: 2317:45 (#0),
                    scope: scope[5],
                },
                kind: _100 = std::string::String::push(move _101, const '@') -> [return: bb54, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_101),
            StorageDead(_100),
            StorageLive(_102),
            StorageLive(_103),
            _103 = &mut ((*_1).0: std::string::String),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            StorageLive(_107),
            _107 = &_50,
            _106 = &(*_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2318:45: 2318:60 (#0),
                    scope: scope[5],
                },
                kind: _105 = <std::string::String as core::ops::Deref>::deref(move _106) -> [return: bb55, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _104 = &(*_105),
            StorageDead(_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2318:17: 2318:61 (#0),
                    scope: scope[5],
                },
                kind: _102 = std::string::String::push_str(move _103, move _104) -> [return: bb56, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_103),
            StorageDead(_107),
            StorageDead(_105),
            StorageDead(_102),
            _73 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2315:27: 2319:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_78),
            StorageDead(_74),
            StorageDead(_73),
            StorageLive(_108),
            StorageLive(_109),
            _109 = &_64,
            StorageLive(_110),
            _110 = &_69,
            _108 = {closure@url/src/lib.rs:2322:22: 2322:39} { removed_bytes: move _109, added_bytes: move _110 },
            StorageDead(_110),
            StorageDead(_109),
            FakeRead(ForLet(None), _108),
            StorageLive(_111),
            StorageLive(_112),
            _112 = &_108,
            StorageLive(_113),
            StorageLive(_114),
            StorageLive(_115),
            _115 = &mut ((*_1).3: u32),
            _114 = &mut (*_115),
            _113 = (move _114,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2326:9: 2326:37 (#0),
                    scope: scope[6],
                },
                kind: _111 = <{closure@url/src/lib.rs:2322:22: 2322:39} as core::ops::Fn<(&mut u32,)>>::call(move _112, move _113) -> [return: bb58, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
            StorageDead(_113),
            StorageDead(_112),
            StorageDead(_115),
            StorageDead(_111),
            StorageLive(_116),
            StorageLive(_117),
            _117 = &_108,
            StorageLive(_118),
            StorageLive(_119),
            StorageLive(_120),
            _120 = &mut ((*_1).4: u32),
            _119 = &mut (*_120),
            _118 = (move _119,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2327:9: 2327:35 (#0),
                    scope: scope[6],
                },
                kind: _116 = <{closure@url/src/lib.rs:2322:22: 2322:39} as core::ops::Fn<(&mut u32,)>>::call(move _117, move _118) -> [return: bb59, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageDead(_118),
            StorageDead(_117),
            StorageDead(_120),
            StorageDead(_116),
            StorageLive(_121),
            StorageLive(_122),
            _122 = &_108,
            StorageLive(_123),
            StorageLive(_124),
            StorageLive(_125),
            _125 = &mut ((*_1).7: u32),
            _124 = &mut (*_125),
            _123 = (move _124,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2328:9: 2328:37 (#0),
                    scope: scope[6],
                },
                kind: _121 = <{closure@url/src/lib.rs:2322:22: 2322:39} as core::ops::Fn<(&mut u32,)>>::call(move _122, move _123) -> [return: bb60, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_123),
            StorageDead(_122),
            StorageDead(_125),
            StorageDead(_121),
            StorageLive(_126),
            PlaceMention(((*_1).8: core::option::Option<u32>)),
            _127 = discriminant(((*_1).8: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2329:16: 2329:35 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _127) -> [1: bb61, otherwise: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2329:16: 2329:35 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb62, imaginary: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_128),
            _128 = &mut ((((*_1).8: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_129),
            _129 = &_108,
            StorageLive(_130),
            StorageLive(_131),
            _131 = &mut (*_128),
            _130 = (move _131,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2330:13: 2330:26 (#0),
                    scope: scope[7],
                },
                kind: _126 = <{closure@url/src/lib.rs:2322:22: 2322:39} as core::ops::Fn<(&mut u32,)>>::call(move _129, move _130) -> [return: bb63, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_131),
            StorageDead(_130),
            StorageDead(_129),
            StorageDead(_128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2329:9: 2331:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _126 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2329:9: 2331:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
            StorageLive(_132),
            PlaceMention(((*_1).9: core::option::Option<u32>)),
            _133 = discriminant(((*_1).9: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2332:16: 2332:35 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _133) -> [1: bb66, otherwise: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2332:16: 2332:35 (#0),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb67, imaginary: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_134),
            _134 = &mut ((((*_1).9: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_135),
            _135 = &_108,
            StorageLive(_136),
            StorageLive(_137),
            _137 = &mut (*_134),
            _136 = (move _137,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2333:13: 2333:26 (#0),
                    scope: scope[8],
                },
                kind: _132 = <{closure@url/src/lib.rs:2322:22: 2322:39} as core::ops::Fn<(&mut u32,)>>::call(move _135, move _136) -> [return: bb68, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            StorageDead(_136),
            StorageDead(_135),
            StorageDead(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2332:9: 2334:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb70,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _132 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2332:9: 2334:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb70,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
            StorageLive(_138),
            _138 = (),
            _0 = core::result::Result::<(), ()>::Ok(move _138),
            StorageDead(_138),
            StorageDead(_108),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2336:5: 2336:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_50) -> [return: bb71, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2336:6: 2336:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb72,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2336:6: 2336:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2336:5: 2336:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_50) -> [return: bb74, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2287:5: 2336:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2287:55: 2287:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2287:25: 2287:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:2287:46: 2287:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2287:36: 2287:44 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2287:36: 2287:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2287:36: 2287:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:9: 2291:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:13: 2289:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:13: 2289:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:32: 2289:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:32: 2289:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:32: 2289:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:32: 2289:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:47: 2289:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:47: 2289:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: host::Host<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:52: 2289:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:65: 2289:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:65: 2289:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:73: 2289:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:73: 2289:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:73: 2289:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:73: 2289:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:90: 2289:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:90: 2289:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2289:97: 2291:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2290:24: 2290:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2292:30: 2292:49 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2292:13: 2292:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2292:13: 2292:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2292:30: 2292:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2292:30: 2292:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#466),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#467),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#468),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2293:23: 2293:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2293:23: 2293:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2293:23: 2293:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2293:23: 2293:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2293:34: 2293:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2293:34: 2293:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2293:51: 2293:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2293:70: 2293:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2293:70: 2293:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#468),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#468),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2294:9: 2296:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2294:12: 2294:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2294:12: 2294:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2294:12: 2294:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2294:12: 2294:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2294:23: 2294:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2294:23: 2294:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2294:39: 2294:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2294:61: 2294:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2294:70: 2296:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2295:23: 2295:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2297:30: 2297:72 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2297:13: 2297:27 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2297:13: 2297:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2297:30: 2297:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2297:30: 2297:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2297:30: 2297:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2297:41: 2297:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2297:41: 2297:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2298:9: 2298:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2298:9: 2298:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2298:37: 2298:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2298:37: 2298:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2299:9: 2300:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2299:9: 2299:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: percent_encoding::PercentEncode<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2300:21: 2300:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2300:41: 2300:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2302:33: 2302:50 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2302:13: 2302:30 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2302:13: 2302:30 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2303:29: 2303:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2303:29: 2303:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2303:36: 2303:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2303:36: 2303:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2304:31: 2304:48 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2304:13: 2304:28 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2304:13: 2304:28 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2306:37: 2306:72 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2306:13: 2306:34 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2306:13: 2306:34 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2306:37: 2306:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2306:58: 2306:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2307:9: 2320:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (bool, core::option::Option<char>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2307:15: 2307:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2307:16: 2307:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2307:39: 2307:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2307:39: 2307:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2307:39: 2307:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2307:39: 2307:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2307:39: 2307:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2307:39: 2307:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2308:20: 2308:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2312:21: 2312:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2312:38: 2312:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2309:17: 2309:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2310:17: 2310:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2310:17: 2310:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2310:45: 2310:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2310:45: 2310:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2310:60: 2310:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2310:46: 2310:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2310:61: 2310:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2313:17: 2313:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2313:17: 2313:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2313:45: 2313:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2313:45: 2313:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2313:45: 2313:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2313:45: 2313:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2316:17: 2316:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2317:17: 2317:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2317:17: 2317:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2318:17: 2318:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2318:17: 2318:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2318:45: 2318:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2318:45: 2318:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2318:45: 2318:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2318:45: 2318:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2322:22: 2325:10 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2322:13: 2322:19 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:444 ~ url[3b6e]::{impl#1}::set_username::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), '_))] },
                (&'{erased} u32, &'{erased} u32),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2322:13: 2322:19 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2322:22: 2325:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2322:22: 2325:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2326:9: 2326:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:444 ~ url[3b6e]::{impl#1}::set_username::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2326:9: 2326:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2326:9: 2326:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2326:16: 2326:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2326:16: 2326:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2327:9: 2327:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:444 ~ url[3b6e]::{impl#1}::set_username::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2327:9: 2327:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2327:9: 2327:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2327:16: 2327:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2327:16: 2327:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2328:9: 2328:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:444 ~ url[3b6e]::{impl#1}::set_username::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2328:9: 2328:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2328:9: 2328:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2328:16: 2328:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2328:16: 2328:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2329:9: 2331:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2329:16: 2329:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).8: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:2329:38: 2329:54 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2329:16: 2329:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2329:21: 2329:34 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2330:13: 2330:26 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:444 ~ url[3b6e]::{impl#1}::set_username::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2330:13: 2330:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2330:13: 2330:26 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2330:13: 2330:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2330:13: 2330:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2330:20: 2330:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2332:9: 2334:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2332:16: 2332:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).9: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:2332:38: 2332:57 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2332:16: 2332:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2332:21: 2332:34 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2333:13: 2333:26 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:444 ~ url[3b6e]::{impl#1}::set_username::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1002 ~ url[3b6e]::{impl#1}::set_username::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2333:13: 2333:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2333:13: 2333:26 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2333:13: 2333:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2333:13: 2333:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2333:20: 2333:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2335:12: 2335:14 (#0),
            scope: scope[0],
        },
    },
]