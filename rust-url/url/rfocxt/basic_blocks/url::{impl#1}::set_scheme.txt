[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2450:45: 2450:58 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::string::String::new() -> [return: bb1, unwind: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2450:26: 2450:59 (#0),
                    scope: scope[0],
                },
                kind: _3 = parser::Parser::<'_>::for_setter(move _4) -> [return: bb2, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _3,
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2451:45: 2451:79 (#0),
                    scope: scope[1],
                },
                kind: _9 = parser::Input::<'_>::new_no_trim(move _10) -> [return: bb3, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2451:25: 2451:80 (#0),
                    scope: scope[1],
                },
                kind: _7 = parser::Parser::<'_>::parse_scheme(move _8, move _9) -> [return: bb4, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2451:25: 2451:81 (#1120),
                    scope: scope[1],
                },
                kind: _6 = <core::result::Result<parser::Input<'_>, ()> as core::ops::Try>::branch(move _7) -> [return: bb5, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _11 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2451:25: 2451:81 (#1120),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb8, 1: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2451:25: 2451:81 (#1120),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2451:80: 2451:81 (#1121),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = move ((_6 as Continue).0: parser::Input<'_>),
            _5 = move _15,
            StorageDead(_15),
            FakeRead(ForLet(None), _5),
            StorageDead(_6),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(_3.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2452:31: 2452:70 (#0),
                    scope: scope[2],
                },
                kind: _16 = <parser::SchemeType as core::convert::From<&std::string::String>>::from(move _17) -> [return: bb11, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = ((_6 as Break).0: core::result::Result<core::convert::Infallible, ()>),
            StorageLive(_14),
            _14 = _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2451:25: 2451:81 (#1120),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<(), ()> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ()>>>::from_residual(move _14) -> [return: bb10, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            FakeRead(ForLet(None), _16),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2453:48: 2453:61 (#0),
                    scope: scope[7],
                },
                kind: _19 = Url::scheme(move _20) -> [return: bb12, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2453:31: 2453:62 (#0),
                    scope: scope[7],
                },
                kind: _18 = <parser::SchemeType as core::convert::From<&str>>::from(move _19) -> [return: bb13, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &_16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2455:13: 2455:41 (#0),
                    scope: scope[8],
                },
                kind: _22 = parser::SchemeType::is_special(move _23) -> [return: bb14, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2455:13: 2455:41 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _22) -> [0: bb19, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &_18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2455:46: 2455:74 (#0),
                    scope: scope[8],
                },
                kind: _24 = parser::SchemeType::is_special(move _25) -> [return: bb16, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2455:46: 2455:74 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _24) -> [0: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2461:9: 2463:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2461:9: 2463:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            StorageLive(_27),
            _27 = &_16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2457:15: 2457:43 (#0),
                    scope: scope[8],
                },
                kind: _26 = parser::SchemeType::is_special(move _27) -> [return: bb21, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2457:15: 2457:43 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _26) -> [0: bb23, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2461:9: 2463:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2457:47: 2457:75 (#0),
                    scope: scope[8],
                },
                kind: _28 = parser::SchemeType::is_special(move _29) -> [return: bb24, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2457:47: 2457:75 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _28) -> [0: bb26, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2461:9: 2463:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            StorageLive(_31),
            _31 = &_16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2460:14: 2460:39 (#0),
                    scope: scope[8],
                },
                kind: _30 = parser::SchemeType::is_file(move _31) -> [return: bb28, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2460:14: 2460:39 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _30) -> [0: bb34, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2460:43: 2460:63 (#0),
                    scope: scope[8],
                },
                kind: _32 = Url::has_authority(move _33) -> [return: bb30, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2460:43: 2460:63 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _32) -> [0: bb33, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2461:9: 2463:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _35 = (),
            _0 = core::result::Result::<(), ()>::Err(move _35),
            StorageDead(_35),
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb72,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = const (),
            StorageDead(_32),
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_21),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &_5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2465:13: 2465:33 (#0),
                    scope: scope[8],
                },
                kind: _37 = parser::Input::<'_>::is_empty(move _38) -> [return: bb36, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2465:13: 2465:33 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _37) -> [0: bb38, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2465:39: 2465:54 (#0),
                    scope: scope[8],
                },
                kind: _39 = Url::has_host(move _40) -> [return: bb39, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2465:88: 2467:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2465:39: 2465:54 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _39) -> [0: bb41, otherwise: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2465:88: 2467:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &_16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2465:58: 2465:86 (#0),
                    scope: scope[8],
                },
                kind: _41 = parser::SchemeType::is_special(move _42) -> [return: bb42, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2465:58: 2465:86 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _41) -> [0: bb45, otherwise: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2465:88: 2467:10 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = (),
            _0 = core::result::Result::<(), ()>::Err(move _44),
            StorageDead(_44),
            StorageDead(_41),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb72,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[8],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = const (),
            StorageDead(_41),
            StorageDead(_39),
            StorageDead(_37),
            StorageDead(_36),
            StorageLive(_45),
            _45 = ((*_1).1: u32),
            FakeRead(ForLet(None), _45),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &(_3.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2469:37: 2469:63 (#0),
                    scope: scope[9],
                },
                kind: _48 = std::string::String::len(move _49) -> [return: bb47, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2469:30: 2469:64 (#0),
                    scope: scope[9],
                },
                kind: _47 = parser::to_u32(move _48) -> [return: bb48, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2469:30: 2469:73 (#0),
                    scope: scope[9],
                },
                kind: _46 = core::result::Result::<u32, parser::ParseError>::unwrap(move _47) -> [return: bb49, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            FakeRead(ForLet(None), _46),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &_45,
            StorageLive(_52),
            _52 = &_46,
            _50 = {closure@url/src/lib.rs:2470:22: 2470:39} { old_scheme_end: move _51, new_scheme_end: move _52 },
            StorageDead(_52),
            StorageDead(_51),
            FakeRead(ForLet(None), _50),
            StorageLive(_53),
            _53 = _46,
            ((*_1).1: u32) = move _53,
            StorageDead(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &_50,
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &mut ((*_1).2: u32),
            _57 = &mut (*_58),
            _56 = (move _57,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2476:9: 2476:39 (#0),
                    scope: scope[11],
                },
                kind: _54 = <{closure@url/src/lib.rs:2470:22: 2470:39} as core::ops::Fn<(&mut u32,)>>::call(move _55, move _56) -> [return: bb50, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_58),
            StorageDead(_54),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &_50,
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &mut ((*_1).3: u32),
            _62 = &mut (*_63),
            _61 = (move _62,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2477:9: 2477:37 (#0),
                    scope: scope[11],
                },
                kind: _59 = <{closure@url/src/lib.rs:2470:22: 2470:39} as core::ops::Fn<(&mut u32,)>>::call(move _60, move _61) -> [return: bb51, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_63),
            StorageDead(_59),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &_50,
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = &mut ((*_1).4: u32),
            _67 = &mut (*_68),
            _66 = (move _67,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2478:9: 2478:35 (#0),
                    scope: scope[11],
                },
                kind: _64 = <{closure@url/src/lib.rs:2470:22: 2470:39} as core::ops::Fn<(&mut u32,)>>::call(move _65, move _66) -> [return: bb52, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_68),
            StorageDead(_64),
            StorageLive(_69),
            StorageLive(_70),
            _70 = &_50,
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = &mut ((*_1).7: u32),
            _72 = &mut (*_73),
            _71 = (move _72,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2479:9: 2479:37 (#0),
                    scope: scope[11],
                },
                kind: _69 = <{closure@url/src/lib.rs:2470:22: 2470:39} as core::ops::Fn<(&mut u32,)>>::call(move _70, move _71) -> [return: bb53, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_73),
            StorageDead(_69),
            StorageLive(_74),
            PlaceMention(((*_1).8: core::option::Option<u32>)),
            _75 = discriminant(((*_1).8: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2480:16: 2480:35 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _75) -> [1: bb54, otherwise: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2480:16: 2480:35 (#0),
                    scope: scope[12],
                },
                kind: falseEdge -> [real: bb55, imaginary: bb57],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_76),
            _76 = &mut ((((*_1).8: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_77),
            _77 = &_50,
            StorageLive(_78),
            StorageLive(_79),
            _79 = &mut (*_76),
            _78 = (move _79,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2481:13: 2481:26 (#0),
                    scope: scope[12],
                },
                kind: _74 = <{closure@url/src/lib.rs:2470:22: 2470:39} as core::ops::Fn<(&mut u32,)>>::call(move _77, move _78) -> [return: bb56, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2480:9: 2482:10 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2480:9: 2482:10 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageLive(_80),
            PlaceMention(((*_1).9: core::option::Option<u32>)),
            _81 = discriminant(((*_1).9: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2483:16: 2483:35 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _81) -> [1: bb59, otherwise: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2483:16: 2483:35 (#0),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb60, imaginary: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_82),
            _82 = &mut ((((*_1).9: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_83),
            _83 = &_50,
            StorageLive(_84),
            StorageLive(_85),
            _85 = &mut (*_82),
            _84 = (move _85,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2484:13: 2484:26 (#0),
                    scope: scope[13],
                },
                kind: _80 = <{closure@url/src/lib.rs:2470:22: 2470:39} as core::ops::Fn<(&mut u32,)>>::call(move _83, move _84) -> [return: bb61, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2483:9: 2485:10 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _80 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2483:9: 2485:10 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageLive(_86),
            StorageLive(_87),
            _87 = &mut (_3.0: std::string::String),
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            _90 = &(*_1),
            StorageLive(_91),
            StorageLive(_92),
            _92 = _45,
            _91 = core::ops::RangeFrom::<u32> { start: move _92 },
            StorageDead(_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2487:39: 2487:67 (#0),
                    scope: scope[11],
                },
                kind: _89 = Url::slice::<core::ops::RangeFrom<u32>>(move _90, move _91) -> [return: bb64, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _88 = &(*_89),
            StorageDead(_91),
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2487:9: 2487:68 (#0),
                    scope: scope[11],
                },
                kind: _86 = std::string::String::push_str(move _87, move _88) -> [return: bb65, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            StorageDead(_89),
            StorageDead(_86),
            StorageLive(_93),
            _93 = move (_3.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2488:9: 2488:27 (#0),
                    scope: scope[11],
                },
                kind: drop(((*_1).0: std::string::String)) -> [return: bb66, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).0: std::string::String) = move _93,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2488:49: 2488:50 (#0),
                    scope: scope[11],
                },
                kind: drop(_93) -> [return: bb68, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).0: std::string::String) = move _93,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2488:49: 2488:50 (#0),
                    scope: scope[11],
                },
                kind: drop(_93) -> [return: bb76, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2494:29: 2494:40 (#0),
                    scope: scope[11],
                },
                kind: _94 = Url::port(move _95) -> [return: bb69, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            FakeRead(ForLet(None), _94),
            StorageLive(_96),
            StorageLive(_97),
            _97 = &mut (*_1),
            StorageLive(_98),
            _98 = _94,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2495:17: 2495:45 (#0),
                    scope: scope[14],
                },
                kind: _96 = Url::set_port(move _97, move _98) -> [return: bb70, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_98),
            StorageDead(_97),
            PlaceMention(_96),
            StorageDead(_96),
            StorageLive(_99),
            _99 = (),
            _0 = core::result::Result::<(), ()>::Ok(move _99),
            StorageDead(_99),
            StorageDead(_94),
            StorageDead(_50),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2498:5: 2498:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb71, unwind: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2498:6: 2498:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2498:5: 2498:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb74, unwind: bb78],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2498:6: 2498:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2498:6: 2498:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2498:5: 2498:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb78, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2450:58: 2450:59 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb78, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2449:5: 2498:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2449:51: 2449:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2449:23: 2449:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:2449:42: 2449:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2449:34: 2449:40 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2449:34: 2449:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2449:34: 2449:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2450:26: 2450:59 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2450:13: 2450:23 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2450:13: 2450:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2450:45: 2450:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2451:25: 2451:81 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2451:13: 2451:22 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:13: 2451:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ()>, parser::Input<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:25: 2451:81 (#1120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<parser::Input<'{erased}>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:25: 2451:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:25: 2451:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:45: 2451:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:72: 2451:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:80: 2451:81 (#1121),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                url/src/lib.rs:2451:25: 2451:81 (#1120),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2451:80: 2451:81 (#1121),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:80: 2451:81 (#1121),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:80: 2451:81 (#1121),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:80: 2451:81 (#1121),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                url/src/lib.rs:2451:25: 2451:81 (#1120),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2451:25: 2451:81 (#1120),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2451:25: 2451:81 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2452:31: 2452:70 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2452:13: 2452:28 (#0),
                    },
                ),
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2452:13: 2452:28 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2452:48: 2452:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2453:31: 2453:62 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2453:13: 2453:28 (#0),
                    },
                ),
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2453:13: 2453:28 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2453:48: 2453:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2453:48: 2453:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2455:9: 2463:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2455:13: 2455:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2455:13: 2455:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2455:46: 2455:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2455:46: 2455:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2457:15: 2457:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2457:15: 2457:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2457:47: 2457:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2457:47: 2457:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2460:14: 2460:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2460:14: 2460:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2460:43: 2460:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2460:43: 2460:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2461:9: 2463:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2462:24: 2462:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2465:9: 2467:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2465:13: 2465:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2465:13: 2465:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2465:39: 2465:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2465:39: 2465:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2465:58: 2465:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2465:58: 2465:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2465:88: 2467:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2466:24: 2466:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2468:30: 2468:45 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2468:13: 2468:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2468:13: 2468:27 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2469:30: 2469:73 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2469:13: 2469:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2469:13: 2469:27 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2469:30: 2469:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2469:37: 2469:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2469:37: 2469:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2470:22: 2473:10 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2470:13: 2470:19 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:446 ~ url[3b6e]::{impl#1}::set_scheme::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), '_))] },
                (&'{erased} u32, &'{erased} u32),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2470:13: 2470:19 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2470:22: 2473:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2470:22: 2473:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2475:27: 2475:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2476:9: 2476:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:446 ~ url[3b6e]::{impl#1}::set_scheme::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2476:9: 2476:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2476:9: 2476:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2476:16: 2476:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2476:16: 2476:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2477:9: 2477:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:446 ~ url[3b6e]::{impl#1}::set_scheme::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2477:9: 2477:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2477:9: 2477:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2477:16: 2477:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2477:16: 2477:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2478:9: 2478:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:446 ~ url[3b6e]::{impl#1}::set_scheme::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2478:9: 2478:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2478:9: 2478:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2478:16: 2478:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2478:16: 2478:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2479:9: 2479:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:446 ~ url[3b6e]::{impl#1}::set_scheme::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2479:9: 2479:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2479:9: 2479:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2479:16: 2479:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2479:16: 2479:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2480:9: 2482:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2480:16: 2480:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).8: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:2480:38: 2480:54 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2480:16: 2480:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2480:21: 2480:34 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2481:13: 2481:26 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:446 ~ url[3b6e]::{impl#1}::set_scheme::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2481:13: 2481:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2481:13: 2481:26 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2481:13: 2481:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2481:13: 2481:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2481:20: 2481:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2483:9: 2485:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2483:16: 2483:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).9: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:2483:38: 2483:57 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2483:16: 2483:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2483:21: 2483:34 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2484:13: 2484:26 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:446 ~ url[3b6e]::{impl#1}::set_scheme::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:1005 ~ url[3b6e]::{impl#1}::set_scheme::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2484:13: 2484:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2484:13: 2484:26 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2484:13: 2484:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2484:13: 2484:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2484:20: 2484:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2487:9: 2487:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2487:9: 2487:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2487:39: 2487:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2487:39: 2487:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2487:39: 2487:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2487:50: 2487:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2487:50: 2487:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2488:30: 2488:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2494:29: 2494:40 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2494:13: 2494:26 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2494:13: 2494:26 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2494:29: 2494:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2495:17: 2495:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2495:17: 2495:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2495:31: 2495:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2497:12: 2497:14 (#0),
            scope: scope[0],
        },
    },
]