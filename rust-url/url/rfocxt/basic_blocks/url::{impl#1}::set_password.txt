[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:13: 2195:28 (#0),
                    scope: scope[0],
                },
                kind: _4 = Url::has_host(move _5) -> [return: bb1, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:13: 2195:28 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:32: 2195:43 (#0),
                    scope: scope[0],
                },
                kind: _8 = Url::host(move _9) -> [return: bb4, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:97: 2197:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &_8,
            StorageDead(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = const "",
            _13 = &(*_14),
            _12 = host::Host::<&str>::Domain(move _13),
            StorageDead(_13),
            _11 = core::option::Option::<host::Host<&str>>::Some(move _12),
            _10 = &_11,
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:32: 2195:69 (#0),
                    scope: scope[0],
                },
                kind: _6 = <core::option::Option<host::Host<&str>> as core::cmp::PartialEq>::eq(move _7, move _10) -> [return: bb5, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:32: 2195:69 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:97: 2197:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:73: 2195:86 (#0),
                    scope: scope[0],
                },
                kind: _17 = Url::scheme(move _18) -> [return: bb8, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = &_17,
            StorageDead(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = const "file",
            _19 = &_20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:73: 2195:96 (#0),
                    scope: scope[0],
                },
                kind: _15 = <&str as core::cmp::PartialEq>::eq(move _16, move _19) -> [return: bb9, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:73: 2195:96 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _15) -> [0: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2195:97: 2197:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = (),
            _0 = core::result::Result::<(), ()>::Err(move _22),
            StorageDead(_22),
            StorageDead(_15),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2249:6: 2249:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            _3 = const (),
            StorageDead(_15),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2198:24: 2198:52 (#0),
                    scope: scope[0],
                },
                kind: _23 = core::option::Option::<&str>::unwrap_or_default(move _24) -> [return: bb13, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            FakeRead(ForLet(None), _23),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2199:13: 2199:32 (#0),
                    scope: scope[1],
                },
                kind: _26 = core::str::<impl str>::is_empty(move _27) -> [return: bb14, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2199:13: 2199:32 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _26) -> [0: bb16, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageLive(_83),
            StorageLive(_84),
            StorageLive(_85),
            _85 = &(*_1),
            StorageLive(_86),
            _86 = ((*_1).2: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2224:19: 2224:50 (#0),
                    scope: scope[1],
                },
                kind: _84 = Url::byte_at(move _85, move _86) -> [return: bb42, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_1),
            StorageLive(_32),
            StorageLive(_33),
            _33 = ((*_1).3: u32),
            _32 = core::ops::RangeFrom::<u32> { start: move _33 },
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2200:34: 2200:63 (#0),
                    scope: scope[1],
                },
                kind: _30 = Url::slice::<core::ops::RangeFrom<u32>>(move _31, move _32) -> [return: bb17, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = &(*_30),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2200:34: 2200:74 (#0),
                    scope: scope[1],
                },
                kind: _28 = <str as std::borrow::ToOwned>::to_owned(move _29) -> [return: bb18, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            FakeRead(ForLet(None), _28),
            StorageDead(_30),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &mut ((*_1).0: std::string::String),
            StorageLive(_36),
            StorageLive(_37),
            _37 = ((*_1).2: u32),
            _36 = move _37 as usize (IntToInt),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2201:13: 2201:68 (#0),
                    scope: scope[2],
                },
                kind: _34 = std::string::String::truncate(move _35, move _36) -> [return: bb19, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_34),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &mut ((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2202:13: 2202:41 (#0),
                    scope: scope[2],
                },
                kind: _38 = std::string::String::push(move _39, const ':') -> [return: bb20, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut ((*_1).0: std::string::String),
            StorageLive(_42),
            StorageLive(_43),
            _43 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2204:25: 2204:64 (#0),
                    scope: scope[2],
                },
                kind: _42 = percent_encoding::utf8_percent_encode(move _43, const parser::USERINFO) -> [return: bb21, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2203:13: 2204:65 (#0),
                    scope: scope[2],
                },
                kind: _40 = <std::string::String as core::iter::Extend<&str>>::extend::<percent_encoding::PercentEncode<'_>>(move _41, move _42) -> [return: bb22, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_40),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &mut ((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2205:13: 2205:41 (#0),
                    scope: scope[2],
                },
                kind: _44 = std::string::String::push(move _45, const '@') -> [return: bb23, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            StorageLive(_46),
            _46 = ((*_1).3: u32),
            FakeRead(ForLet(None), _46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2208:41: 2208:65 (#0),
                    scope: scope[3],
                },
                kind: _49 = std::string::String::len(move _50) -> [return: bb24, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2208:34: 2208:66 (#0),
                    scope: scope[3],
                },
                kind: _48 = parser::to_u32(move _49) -> [return: bb25, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2208:34: 2208:75 (#0),
                    scope: scope[3],
                },
                kind: _47 = core::result::Result::<u32, parser::ParseError>::unwrap(move _48) -> [return: bb26, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            FakeRead(ForLet(None), _47),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &_46,
            StorageLive(_53),
            _53 = &_47,
            _51 = {closure@url/src/lib.rs:2209:26: 2209:43} { old_host_start: move _52, new_host_start: move _53 },
            StorageDead(_53),
            StorageDead(_52),
            FakeRead(ForLet(None), _51),
            StorageLive(_54),
            _54 = _47,
            ((*_1).3: u32) = move _54,
            StorageDead(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = &_51,
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &mut ((*_1).4: u32),
            _58 = &mut (*_59),
            _57 = (move _58,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2214:13: 2214:39 (#0),
                    scope: scope[5],
                },
                kind: _55 = <{closure@url/src/lib.rs:2209:26: 2209:43} as core::ops::Fn<(&mut u32,)>>::call(move _56, move _57) -> [return: bb27, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_59),
            StorageDead(_55),
            StorageLive(_60),
            StorageLive(_61),
            _61 = &_51,
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            _64 = &mut ((*_1).7: u32),
            _63 = &mut (*_64),
            _62 = (move _63,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2215:13: 2215:41 (#0),
                    scope: scope[5],
                },
                kind: _60 = <{closure@url/src/lib.rs:2209:26: 2209:43} as core::ops::Fn<(&mut u32,)>>::call(move _61, move _62) -> [return: bb28, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_62),
            StorageDead(_61),
            StorageDead(_64),
            StorageDead(_60),
            StorageLive(_65),
            PlaceMention(((*_1).8: core::option::Option<u32>)),
            _66 = discriminant(((*_1).8: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2216:20: 2216:39 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _66) -> [1: bb29, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2216:20: 2216:39 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb30, imaginary: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_67),
            _67 = &mut ((((*_1).8: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_68),
            _68 = &_51,
            StorageLive(_69),
            StorageLive(_70),
            _70 = &mut (*_67),
            _69 = (move _70,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2217:17: 2217:30 (#0),
                    scope: scope[6],
                },
                kind: _65 = <{closure@url/src/lib.rs:2209:26: 2209:43} as core::ops::Fn<(&mut u32,)>>::call(move _68, move _69) -> [return: bb31, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_68),
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2216:13: 2218:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _65 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2216:13: 2218:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageLive(_71),
            PlaceMention(((*_1).9: core::option::Option<u32>)),
            _72 = discriminant(((*_1).9: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2219:20: 2219:39 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _72) -> [1: bb34, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2219:20: 2219:39 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb35, imaginary: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            _73 = &mut ((((*_1).9: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_74),
            _74 = &_51,
            StorageLive(_75),
            StorageLive(_76),
            _76 = &mut (*_73),
            _75 = (move _76,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2220:17: 2220:30 (#0),
                    scope: scope[7],
                },
                kind: _71 = <{closure@url/src/lib.rs:2209:26: 2209:43} as core::ops::Fn<(&mut u32,)>>::call(move _74, move _75) -> [return: bb36, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            StorageDead(_75),
            StorageDead(_74),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2219:13: 2221:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _71 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2219:13: 2221:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageLive(_77),
            StorageLive(_78),
            _78 = &mut ((*_1).0: std::string::String),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            _82 = &_28,
            _81 = &(*_82),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2223:41: 2223:56 (#0),
                    scope: scope[5],
                },
                kind: _80 = <std::string::String as core::ops::Deref>::deref(move _81) -> [return: bb39, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _79 = &(*_80),
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2223:13: 2223:57 (#0),
                    scope: scope[5],
                },
                kind: _77 = std::string::String::push_str(move _78, move _79) -> [return: bb40, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_78),
            StorageDead(_82),
            StorageDead(_80),
            StorageDead(_77),
            _25 = const (),
            StorageDead(_51),
            StorageDead(_47),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2224:9: 2224:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_28) -> [return: bb41, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2199:9: 2247:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb74,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageDead(_85),
            _83 = Eq(move _84, const 58_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2224:19: 2224:58 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _83) -> [0: bb72, otherwise: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = &(*_1),
            StorageLive(_90),
            StorageLive(_91),
            _91 = ((*_1).3: u32),
            _92 = SubWithOverflow(_91, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2226:57: 2226:76 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_92.1: bool), "attempt to compute `{} - {}`, which would overflow", move _91, const 1_u32) -> [success: bb44, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _90 = move (_92.0: u32),
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2226:44: 2226:77 (#0),
                    scope: scope[1],
                },
                kind: _88 = Url::byte_at(move _89, move _90) -> [return: bb45, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_89),
            _87 = Eq(move _88, const 64_u8),
            StorageDead(_88),
            FakeRead(ForLet(None), _87),
            StorageLive(_93),
            StorageLive(_94),
            _94 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#463),
                    scope: scope[8],
                },
                kind: switchInt(move _94) -> [0: bb49, otherwise: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_95),
            StorageLive(_96),
            _96 = _87,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2227:27: 2227:51 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _96) -> [0: bb47, otherwise: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#464),
                    scope: scope[8],
                },
                kind: _97 = core::panicking::panic(const "assertion failed: has_username_or_password") -> bb77,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _95 = const (),
            StorageDead(_96),
            StorageDead(_95),
            _93 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#462),
                    scope: scope[8],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _93 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#462),
                    scope: scope[8],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            StorageDead(_93),
            StorageLive(_98),
            StorageLive(_99),
            _99 = ((*_1).1: u32),
            _100 = AddWithOverflow(_99, const 3_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2228:34: 2228:53 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_100.1: bool), "attempt to compute `{} + {}`, which would overflow", move _99, const 3_u32) -> [success: bb51, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _98 = move (_100.0: u32),
            StorageDead(_99),
            FakeRead(ForLet(None), _98),
            StorageLive(_101),
            StorageLive(_102),
            _102 = _98,
            StorageLive(_103),
            _103 = ((*_1).2: u32),
            _101 = Eq(move _102, move _103),
            StorageDead(_103),
            StorageDead(_102),
            FakeRead(ForLet(None), _101),
            StorageLive(_104),
            _104 = ((*_1).2: u32),
            FakeRead(ForLet(None), _104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = _101,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2231:26: 2231:40 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _106) -> [0: bb53, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _105 = ((*_1).3: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2231:23: 2235:14 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_107),
            _107 = ((*_1).3: u32),
            _108 = SubWithOverflow(_107, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2234:17: 2234:36 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_108.1: bool), "attempt to compute `{} - {}`, which would overflow", move _107, const 1_u32) -> [success: bb54, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _105 = move (_108.0: u32),
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2231:23: 2235:14 (#0),
                    scope: scope[11],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            FakeRead(ForLet(None), _105),
            StorageLive(_109),
            StorageLive(_110),
            _110 = &mut ((*_1).0: std::string::String),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            _113 = _104,
            _112 = move _113 as usize (IntToInt),
            StorageDead(_113),
            StorageLive(_114),
            StorageLive(_115),
            _115 = _105,
            _114 = move _115 as usize (IntToInt),
            StorageDead(_115),
            _111 = core::ops::Range::<usize> { start: move _112, end: move _114 },
            StorageDead(_114),
            StorageDead(_112),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2236:13: 2236:67 (#0),
                    scope: scope[12],
                },
                kind: _109 = std::string::String::drain::<core::ops::Range<usize>>(move _110, move _111) -> [return: bb56, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageDead(_110),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2236:67: 2236:68 (#0),
                    scope: scope[12],
                },
                kind: drop(_109) -> [return: bb57, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageLive(_116),
            StorageLive(_117),
            _117 = _105,
            StorageLive(_118),
            _118 = _104,
            _119 = SubWithOverflow(_117, _118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2237:26: 2237:37 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_119.1: bool), "attempt to compute `{} - {}`, which would overflow", move _117, move _118) -> [success: bb58, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _116 = move (_119.0: u32),
            StorageDead(_118),
            StorageDead(_117),
            FakeRead(ForLet(None), _116),
            StorageLive(_120),
            _120 = _116,
            _121 = SubWithOverflow(((*_1).3: u32), _120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2238:13: 2238:38 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_121.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).3: u32), move _120) -> [success: bb59, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).3: u32) = move (_121.0: u32),
            StorageDead(_120),
            StorageLive(_122),
            _122 = _116,
            _123 = SubWithOverflow(((*_1).4: u32), _122),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2239:13: 2239:36 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_123.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).4: u32), move _122) -> [success: bb60, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).4: u32) = move (_123.0: u32),
            StorageDead(_122),
            StorageLive(_124),
            _124 = _116,
            _125 = SubWithOverflow(((*_1).7: u32), _124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2240:13: 2240:38 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_125.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).7: u32), move _124) -> [success: bb61, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).7: u32) = move (_125.0: u32),
            StorageDead(_124),
            StorageLive(_126),
            PlaceMention(((*_1).8: core::option::Option<u32>)),
            _127 = discriminant(((*_1).8: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2241:20: 2241:39 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _127) -> [1: bb62, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2241:20: 2241:39 (#0),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb63, imaginary: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_128),
            _128 = &mut ((((*_1).8: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_129),
            _129 = _116,
            _130 = SubWithOverflow((*_128), _129),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2242:17: 2242:33 (#0),
                    scope: scope[14],
                },
                kind: assert(!move (_130.1: bool), "attempt to compute `{} - {}`, which would overflow", (*_128), move _129) -> [success: bb64, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_128) = move (_130.0: u32),
            _126 = const (),
            StorageDead(_129),
            StorageDead(_128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2241:13: 2243:14 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb66,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _126 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2241:13: 2243:14 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb66,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
            PlaceMention(((*_1).9: core::option::Option<u32>)),
            _131 = discriminant(((*_1).9: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2244:20: 2244:39 (#0),
                    scope: scope[15],
                },
                kind: switchInt(move _131) -> [1: bb67, otherwise: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2244:20: 2244:39 (#0),
                    scope: scope[15],
                },
                kind: falseEdge -> [real: bb68, imaginary: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_132),
            _132 = &mut ((((*_1).9: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_133),
            _133 = _116,
            _134 = SubWithOverflow((*_132), _133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2245:17: 2245:33 (#0),
                    scope: scope[15],
                },
                kind: assert(!move (_134.1: bool), "attempt to compute `{} - {}`, which would overflow", (*_132), move _133) -> [success: bb69, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_132) = move (_134.0: u32),
            _25 = const (),
            StorageDead(_133),
            StorageDead(_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2244:13: 2246:14 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2244:13: 2246:14 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_116),
            StorageDead(_105),
            StorageDead(_104),
            StorageDead(_101),
            StorageDead(_98),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2224:16: 2247:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            _25 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2224:16: 2247:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2199:9: 2247:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb74,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageLive(_135),
            _135 = (),
            _0 = core::result::Result::<(), ()>::Ok(move _135),
            StorageDead(_135),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2249:6: 2249:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb75,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2249:6: 2249:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2224:9: 2224:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_28) -> [return: bb77, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2193:5: 2249:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2193:63: 2193:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2193:25: 2193:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:2193:46: 2193:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2193:36: 2193:44 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2193:36: 2193:44 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2193:36: 2193:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:9: 2197:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:13: 2195:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:13: 2195:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:32: 2195:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:32: 2195:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:32: 2195:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:32: 2195:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:47: 2195:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:47: 2195:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: host::Host<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:52: 2195:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:65: 2195:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:65: 2195:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:73: 2195:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:73: 2195:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:73: 2195:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:73: 2195:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:90: 2195:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:90: 2195:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2195:97: 2197:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2196:24: 2196:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2198:24: 2198:52 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2198:13: 2198:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2198:13: 2198:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2198:24: 2198:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2199:9: 2247:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2199:13: 2199:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2199:13: 2199:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2200:34: 2200:74 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2200:17: 2200:31 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2200:17: 2200:31 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2200:34: 2200:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2200:34: 2200:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2200:34: 2200:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2200:45: 2200:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2200:45: 2200:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2201:13: 2201:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2201:13: 2201:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2201:41: 2201:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2201:41: 2201:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2202:13: 2202:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2202:13: 2202:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2203:13: 2204:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2203:13: 2203:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: percent_encoding::PercentEncode<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2204:25: 2204:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2204:45: 2204:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2205:13: 2205:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2205:13: 2205:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2207:34: 2207:49 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2207:17: 2207:31 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2207:17: 2207:31 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2208:34: 2208:75 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2208:17: 2208:31 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2208:17: 2208:31 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2208:34: 2208:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2208:41: 2208:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2208:41: 2208:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2209:26: 2212:14 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2209:17: 2209:23 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:442 ~ url[3b6e]::{impl#1}::set_password::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:999 ~ url[3b6e]::{impl#1}::set_password::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:999 ~ url[3b6e]::{impl#1}::set_password::'_), '_))] },
                (&'{erased} u32, &'{erased} u32),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2209:17: 2209:23 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2209:26: 2212:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2209:26: 2212:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2213:31: 2213:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2214:13: 2214:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:442 ~ url[3b6e]::{impl#1}::set_password::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:999 ~ url[3b6e]::{impl#1}::set_password::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:999 ~ url[3b6e]::{impl#1}::set_password::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2214:13: 2214:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2214:13: 2214:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2214:20: 2214:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2214:20: 2214:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2215:13: 2215:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Closure(DefId(0:442 ~ url[3b6e]::{impl#1}::set_password::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:999 ~ url[3b6e]::{impl#1}::set_password::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:999 ~ url[3b6e]::{impl#1}::set_password::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2215:13: 2215:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2215:13: 2215:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2215:20: 2215:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2215:20: 2215:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2216:13: 2218:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2216:20: 2216:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).8: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:2216:42: 2216:58 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2216:20: 2216:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2216:25: 2216:38 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2217:17: 2217:30 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:442 ~ url[3b6e]::{impl#1}::set_password::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:999 ~ url[3b6e]::{impl#1}::set_password::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:999 ~ url[3b6e]::{impl#1}::set_password::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2217:17: 2217:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2217:17: 2217:30 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2217:17: 2217:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2217:17: 2217:30 (#0),
                },
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2217:24: 2217:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2219:13: 2221:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2219:20: 2219:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).9: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:2219:42: 2219:61 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2219:20: 2219:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2219:25: 2219:38 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2220:17: 2220:30 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:442 ~ url[3b6e]::{impl#1}::set_password::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:999 ~ url[3b6e]::{impl#1}::set_password::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:999 ~ url[3b6e]::{impl#1}::set_password::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2220:17: 2220:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2220:17: 2220:30 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2220:17: 2220:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2220:17: 2220:30 (#0),
                },
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2220:24: 2220:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2223:13: 2223:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2223:13: 2223:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2223:41: 2223:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2223:41: 2223:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2223:41: 2223:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2223:41: 2223:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2224:19: 2224:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2224:19: 2224:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2224:19: 2224:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2224:32: 2224:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2226:44: 2226:85 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2226:17: 2226:41 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2226:17: 2226:41 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2226:44: 2226:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2226:44: 2226:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2226:57: 2226:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2226:57: 2226:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2226:57: 2226:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#462),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#463),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2227:27: 2227:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#464),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#464),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2228:34: 2228:53 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2228:17: 2228:31 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2228:17: 2228:31 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2228:34: 2228:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2228:34: 2228:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2229:34: 2229:69 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2229:17: 2229:31 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2229:17: 2229:31 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2229:34: 2229:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2229:52: 2229:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2230:25: 2230:42 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2230:17: 2230:22 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2230:17: 2230:22 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2231:23: 2235:14 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2231:17: 2231:20 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2231:17: 2231:20 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2231:26: 2231:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:2234:17: 2234:36 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2234:17: 2234:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2234:17: 2234:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::string::Drain<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2236:13: 2236:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2236:13: 2236:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2236:38: 2236:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2236:38: 2236:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2236:38: 2236:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2236:54: 2236:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2236:54: 2236:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2237:26: 2237:37 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2237:17: 2237:23 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2237:17: 2237:23 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2237:26: 2237:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2237:32: 2237:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2237:26: 2237:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2238:32: 2238:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2238:13: 2238:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2239:30: 2239:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2239:13: 2239:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2240:32: 2240:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2240:13: 2240:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2241:13: 2243:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2241:20: 2241:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).8: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:2241:42: 2241:58 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2241:20: 2241:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2241:25: 2241:38 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2242:17: 2242:33 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2242:27: 2242:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2242:17: 2242:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2244:20: 2244:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).9: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:2244:42: 2244:61 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2244:20: 2244:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2244:25: 2244:38 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2245:17: 2245:33 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2245:27: 2245:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2245:17: 2245:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2248:12: 2248:14 (#0),
            scope: scope[0],
        },
    },
]