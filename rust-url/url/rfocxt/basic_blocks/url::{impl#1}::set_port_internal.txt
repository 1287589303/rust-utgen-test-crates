[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = ((*_1).6: core::option::Option<u16>),
            StorageLive(_6),
            _6 = _2,
            _4 = (move _5, move _6),
            StorageDead(_6),
            StorageDead(_5),
            PlaceMention(_4),
            _11 = discriminant((_4.0: core::option::Option<u16>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1888:9: 1888:32 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb2, 1: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = discriminant((_4.1: core::option::Option<u16>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1888:9: 1888:32 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _12) -> [1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = discriminant((_4.1: core::option::Option<u16>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1888:9: 1888:32 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1889:13: 1889:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = discriminant((_4.1: core::option::Option<u16>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1888:9: 1888:32 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb5, 1: bb6, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1890:13: 1890:28 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1902:13: 1902:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1888:15: 1888:32 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_41),
            _41 = (((_4.1: core::option::Option<u16>) as Some).0: u16),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_1),
            StorageLive(_46),
            StorageLive(_47),
            _47 = ((*_1).7: u32),
            _46 = core::ops::RangeFrom::<u32> { start: move _47 },
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1904:38: 1904:67 (#0),
                    scope: scope[5],
                },
                kind: _44 = Url::slice::<core::ops::RangeFrom<u32>>(move _45, move _46) -> [return: bb27, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1889:29: 1889:31 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut ((*_1).0: std::string::String),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = ((*_1).4: u32),
            _16 = move _17 as usize (IntToInt),
            StorageDead(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = ((*_1).7: u32),
            _18 = move _19 as usize (IntToInt),
            StorageDead(_19),
            _15 = core::ops::Range::<usize> { start: move _16, end: move _18 },
            StorageDead(_18),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1891:17: 1892:77 (#0),
                    scope: scope[0],
                },
                kind: _13 = std::string::String::drain::<core::ops::Range<usize>>(move _14, move _15) -> [return: bb11, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1892:77: 1892:78 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb12, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_20),
            StorageLive(_21),
            _21 = ((*_1).7: u32),
            StorageLive(_22),
            _22 = ((*_1).4: u32),
            _23 = SubWithOverflow(_21, _22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1893:30: 1893:61 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", move _21, move _22) -> [success: bb13, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = move (_23.0: u32),
            StorageDead(_22),
            StorageDead(_21),
            FakeRead(ForLet(None), _20),
            StorageLive(_24),
            _24 = ((*_1).4: u32),
            ((*_1).7: u32) = move _24,
            StorageDead(_24),
            StorageLive(_25),
            PlaceMention(((*_1).8: core::option::Option<u32>)),
            _26 = discriminant(((*_1).8: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1895:24: 1895:43 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _26) -> [1: bb14, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1895:24: 1895:43 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = &mut ((((*_1).8: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_28),
            _28 = _20,
            _29 = SubWithOverflow((*_27), _28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1896:21: 1896:37 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_29.1: bool), "attempt to compute `{} - {}`, which would overflow", (*_27), move _28) -> [success: bb16, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_27) = move (_29.0: u32),
            _25 = const (),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1895:17: 1897:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1895:17: 1897:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(((*_1).9: core::option::Option<u32>)),
            _30 = discriminant(((*_1).9: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1898:24: 1898:43 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _30) -> [1: bb19, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1898:24: 1898:43 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            _31 = &mut ((((*_1).9: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_32),
            _32 = _20,
            _33 = SubWithOverflow((*_31), _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1899:21: 1899:37 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_33.1: bool), "attempt to compute `{} - {}`, which would overflow", (*_31), move _32) -> [success: bb21, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_31) = move (_33.0: u32),
            _3 = const (),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1898:17: 1900:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1898:17: 1900:18 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1901:13: 1901:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_35),
            _35 = &(((_4.0: core::option::Option<u16>) as Some).0: u16),
            StorageLive(_37),
            _37 = &(((_4.1: core::option::Option<u16>) as Some).0: u16),
            _7 = &fake shallow (_4.0: core::option::Option<u16>),
            _8 = &fake shallow (_4.1: core::option::Option<u16>),
            StorageLive(_38),
            StorageLive(_39),
            _39 = (*_35),
            StorageLive(_40),
            _40 = (*_37),
            _38 = Eq(move _39, move _40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1902:39: 1902:49 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _38) -> [0: bb26, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            FakeRead(ForMatchGuard, _7),
            FakeRead(ForMatchGuard, _8),
            FakeRead(ForGuardBinding, _35),
            FakeRead(ForGuardBinding, _37),
            StorageLive(_34),
            _34 = (((_4.0: core::option::Option<u16>) as Some).0: u16),
            StorageLive(_36),
            _36 = (((_4.1: core::option::Option<u16>) as Some).0: u16),
            _3 = const (),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_37),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1902:54: 1902:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1902:39: 1902:49 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb1, imaginary: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = &(*_44),
            StorageDead(_46),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1904:38: 1904:78 (#0),
                    scope: scope[5],
                },
                kind: _42 = <str as std::borrow::ToOwned>::to_owned(move _43) -> [return: bb28, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            FakeRead(ForLet(None), _42),
            StorageDead(_44),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &mut ((*_1).0: std::string::String),
            StorageLive(_50),
            StorageLive(_51),
            _51 = ((*_1).4: u32),
            _50 = move _51 as usize (IntToInt),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1905:17: 1905:68 (#0),
                    scope: scope[6],
                },
                kind: _48 = std::string::String::truncate(move _49, move _50) -> [return: bb29, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_49),
            StorageDead(_48),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &mut ((*_1).0: std::string::String),
            _54 = &mut (*_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = [const ":"],
            _58 = &_59,
            _57 = &(*_58),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &_41,
            _64 = &(*_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1906:51: 1906:53 (#441),
                    scope: scope[6],
                },
                kind: _63 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _64) -> [return: bb30, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            _62 = [move _63],
            StorageDead(_63),
            _61 = &_62,
            _60 = &(*_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#441),
                    scope: scope[6],
                },
                kind: _56 = core::fmt::Arguments::<'_>::new_v1::<1, 1>(move _57, move _60) -> [return: bb31, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:9: 632:55 (#440),
                    scope: scope[6],
                },
                kind: _53 = <std::string::String as core::fmt::Write>::write_fmt(move _54, move _56) -> [return: bb32, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1906:17: 1906:69 (#0),
                    scope: scope[6],
                },
                kind: _52 = core::result::Result::<(), core::fmt::Error>::unwrap(move _53) -> [return: bb33, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_65),
            StorageDead(_62),
            StorageDead(_61),
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_55),
            StorageDead(_52),
            StorageLive(_66),
            _66 = ((*_1).7: u32),
            FakeRead(ForLet(None), _66),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = &((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1908:45: 1908:69 (#0),
                    scope: scope[7],
                },
                kind: _69 = std::string::String::len(move _70) -> [return: bb34, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1908:38: 1908:70 (#0),
                    scope: scope[7],
                },
                kind: _68 = parser::to_u32(move _69) -> [return: bb35, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1908:38: 1908:79 (#0),
                    scope: scope[7],
                },
                kind: _67 = core::result::Result::<u32, parser::ParseError>::unwrap(move _68) -> [return: bb36, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            FakeRead(ForLet(None), _67),
            StorageLive(_71),
            _71 = _67,
            ((*_1).7: u32) = move _71,
            StorageDead(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = &_66,
            StorageLive(_74),
            _74 = &_67,
            _72 = {closure@url/src/lib.rs:1910:30: 1910:47} { old_path_start: move _73, new_path_start: move _74 },
            StorageDead(_74),
            StorageDead(_73),
            FakeRead(ForLet(None), _72),
            StorageLive(_75),
            PlaceMention(((*_1).8: core::option::Option<u32>)),
            _76 = discriminant(((*_1).8: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1914:24: 1914:43 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _76) -> [1: bb37, otherwise: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1914:24: 1914:43 (#0),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb38, imaginary: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_77),
            _77 = &mut ((((*_1).8: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_78),
            _78 = &_72,
            StorageLive(_79),
            StorageLive(_80),
            _80 = &mut (*_77),
            _79 = (move _80,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1915:21: 1915:34 (#0),
                    scope: scope[10],
                },
                kind: _75 = <{closure@url/src/lib.rs:1910:30: 1910:47} as core::ops::Fn<(&mut u32,)>>::call(move _78, move _79) -> [return: bb39, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_79),
            StorageDead(_78),
            StorageDead(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1914:17: 1916:18 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _75 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1914:17: 1916:18 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageLive(_81),
            PlaceMention(((*_1).9: core::option::Option<u32>)),
            _82 = discriminant(((*_1).9: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1917:24: 1917:43 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _82) -> [1: bb42, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1917:24: 1917:43 (#0),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb43, imaginary: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_83),
            _83 = &mut ((((*_1).9: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_84),
            _84 = &_72,
            StorageLive(_85),
            StorageLive(_86),
            _86 = &mut (*_83),
            _85 = (move _86,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1918:21: 1918:34 (#0),
                    scope: scope[11],
                },
                kind: _81 = <{closure@url/src/lib.rs:1910:30: 1910:47} as core::ops::Fn<(&mut u32,)>>::call(move _84, move _85) -> [return: bb44, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1917:17: 1919:18 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _81 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1917:17: 1919:18 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &mut ((*_1).0: std::string::String),
            StorageLive(_89),
            StorageLive(_90),
            StorageLive(_91),
            StorageLive(_92),
            _92 = &_42,
            _91 = &(*_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1920:45: 1920:60 (#0),
                    scope: scope[9],
                },
                kind: _90 = <std::string::String as core::ops::Deref>::deref(move _91) -> [return: bb47, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _89 = &(*_90),
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1920:17: 1920:61 (#0),
                    scope: scope[9],
                },
                kind: _87 = std::string::String::push_str(move _88, move _89) -> [return: bb48, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_88),
            StorageDead(_92),
            StorageDead(_90),
            StorageDead(_87),
            _3 = const (),
            StorageDead(_72),
            StorageDead(_67),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1921:13: 1921:14 (#0),
                    scope: scope[5],
                },
                kind: drop(_42) -> [return: bb49, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1921:13: 1921:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_93),
            _93 = _2,
            ((*_1).6: core::option::Option<u16>) = move _93,
            StorageDead(_93),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1924:6: 1924:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1921:13: 1921:14 (#0),
                    scope: scope[5],
                },
                kind: drop(_42) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1887:5: 1924:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1887:55: 1887:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1887:26: 1887:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:1887:43: 1887:54 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1887:37: 1887:41 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1887:37: 1887:41 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1887:37: 1887:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1888:9: 1922:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<u16>, core::option::Option<u16>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1888:15: 1888:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1888:16: 1888:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1888:27: 1888:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1888:15: 1888:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1888:15: 1888:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1889:20: 1889:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1890:23: 1890:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1889:14: 1889:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1903:17: 1903:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::string::Drain<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1891:17: 1892:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1891:17: 1891:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1892:28: 1892:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1892:28: 1892:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1892:28: 1892:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1892:52: 1892:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1892:52: 1892:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1893:30: 1893:61 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1893:21: 1893:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1893:21: 1893:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1893:30: 1893:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1893:48: 1893:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1893:30: 1893:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1894:35: 1894:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1895:17: 1897:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1895:24: 1895:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).8: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:1895:46: 1895:62 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1895:24: 1895:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1895:29: 1895:42 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1896:21: 1896:37 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1896:31: 1896:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1896:21: 1896:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1898:24: 1898:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).9: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:1898:46: 1898:65 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1898:24: 1898:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1898:29: 1898:42 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1899:21: 1899:37 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1899:31: 1899:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1899:21: 1899:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                url/src/lib.rs:1888:15: 1888:32 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1902:13: 1902:35 (#0),
                    },
                ),
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1902:19: 1902:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1902:19: 1902:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                url/src/lib.rs:1888:15: 1888:32 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1902:13: 1902:35 (#0),
                    },
                ),
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1902:30: 1902:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1902:30: 1902:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1902:39: 1902:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1902:39: 1902:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1902:46: 1902:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                url/src/lib.rs:1888:15: 1888:32 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1903:13: 1903:27 (#0),
                    },
                ),
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1903:22: 1903:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1904:38: 1904:78 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1904:21: 1904:35 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1904:21: 1904:35 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1904:38: 1904:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1904:38: 1904:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1904:38: 1904:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1904:49: 1904:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1904:49: 1904:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1905:17: 1905:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1905:17: 1905:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1905:45: 1905:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1905:45: 1905:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1906:17: 1906:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:9: 632:55 (#440),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1906:24: 1906:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1906:24: 1906:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#441),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1906:49: 1906:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1906:49: 1906:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1906:49: 1906:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#441),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#441),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#441),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1906:51: 1906:53 (#441),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1906:56: 1906:59 (#441),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1906:56: 1906:59 (#441),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1907:38: 1907:53 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1907:21: 1907:35 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1907:21: 1907:35 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1908:38: 1908:79 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1908:21: 1908:35 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1908:21: 1908:35 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1908:38: 1908:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1908:45: 1908:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1908:45: 1908:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1909:35: 1909:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1910:30: 1913:18 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1910:21: 1910:27 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:436 ~ url[3b6e]::{impl#1}::set_port_internal::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:992 ~ url[3b6e]::{impl#1}::set_port_internal::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:992 ~ url[3b6e]::{impl#1}::set_port_internal::'_), '_))] },
                (&'{erased} u32, &'{erased} u32),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1910:21: 1910:27 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1910:30: 1913:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1910:30: 1913:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1914:17: 1916:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1914:24: 1914:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).8: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:1914:46: 1914:62 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1914:24: 1914:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1914:29: 1914:42 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1915:21: 1915:34 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:436 ~ url[3b6e]::{impl#1}::set_port_internal::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:992 ~ url[3b6e]::{impl#1}::set_port_internal::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:992 ~ url[3b6e]::{impl#1}::set_port_internal::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1915:21: 1915:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1915:21: 1915:34 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1915:21: 1915:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1915:21: 1915:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1915:28: 1915:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1917:17: 1919:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1917:24: 1917:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).9: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:1917:46: 1917:65 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1917:24: 1917:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1917:29: 1917:42 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1918:21: 1918:34 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:436 ~ url[3b6e]::{impl#1}::set_port_internal::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:992 ~ url[3b6e]::{impl#1}::set_port_internal::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:992 ~ url[3b6e]::{impl#1}::set_port_internal::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1918:21: 1918:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1918:21: 1918:34 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1918:21: 1918:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1918:21: 1918:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1918:28: 1918:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1920:17: 1920:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1920:17: 1920:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1920:45: 1920:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1920:45: 1920:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1920:45: 1920:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1920:45: 1920:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1923:21: 1923:25 (#0),
            scope: scope[0],
        },
    },
]