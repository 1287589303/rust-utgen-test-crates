[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = const {alloc1: &core::sync::atomic::AtomicUsize},
            _3 = &(*_4),
            StorageLive(_5),
            _5 = core::sync::atomic::Ordering::SeqCst,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:68:37: 68:75 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::sync::atomic::AtomicUsize::fetch_add(move _3, const 1_usize, move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
            _1 = origin::OpaqueOrigin(move _2),
            StorageDead(_2),
            _0 = origin::Origin::Opaque(move _1),
            StorageDead(_1),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:69:6: 69:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:66:5: 69:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: origin::Origin,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:66:28: 66:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: origin::OpaqueOrigin,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:68:24: 68:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:68:37: 68:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/origin.rs:68:9: 68:77 (#0),
                },
            ),
        ),
        ty: &'{erased} core::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:68:37: 68:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:114 ~ url[3b6e]::origin::{impl#0}::new_opaque::COUNTER),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} core::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:68:37: 68:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/origin.rs:68:9: 68:77 (#0),
                },
            ),
        ),
        ty: core::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:68:58: 68:74 (#0),
            scope: scope[0],
        },
    },
]