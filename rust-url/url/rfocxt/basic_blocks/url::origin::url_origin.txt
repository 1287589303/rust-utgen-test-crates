[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:18:18: 18:30 (#0),
                    scope: scope[0],
                },
                kind: _2 = Url::scheme(move _3) -> [return: bb1, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            PlaceMention(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:20:9: 20:15 (#0),
                    scope: scope[1],
                },
                kind: _10 = <str as core::cmp::PartialEq>::eq(_2, const "blob") -> [return: bb17, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:34:14: 34:34 (#0),
                    scope: scope[1],
                },
                kind: _0 = origin::Origin::new_opaque() -> [return: bb39, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:20:9: 20:15 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:9: 27:14 (#0),
                    scope: scope[1],
                },
                kind: _9 = <str as core::cmp::PartialEq>::eq(_2, const "ftp") -> [return: bb16, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:17: 27:23 (#0),
                    scope: scope[1],
                },
                kind: _8 = <str as core::cmp::PartialEq>::eq(_2, const "http") -> [return: bb15, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:26: 27:33 (#0),
                    scope: scope[1],
                },
                kind: _7 = <str as core::cmp::PartialEq>::eq(_2, const "https") -> [return: bb14, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:36: 27:40 (#0),
                    scope: scope[1],
                },
                kind: _6 = <str as core::cmp::PartialEq>::eq(_2, const "ws") -> [return: bb13, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:43: 27:48 (#0),
                    scope: scope[1],
                },
                kind: _5 = <str as core::cmp::PartialEq>::eq(_2, const "wss") -> [return: bb12, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:33:9: 33:15 (#0),
                    scope: scope[1],
                },
                kind: _4 = <str as core::cmp::PartialEq>::eq(_2, const "file") -> [return: bb11, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:33:9: 33:15 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb38, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:33:9: 33:15 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _4) -> [0: bb2, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:43: 27:48 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [0: bb9, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:36: 27:40 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb8, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:26: 27:33 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _7) -> [0: bb7, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:17: 27:23 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _8) -> [0: bb6, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:9: 27:14 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb5, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:20:9: 20:15 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _10) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:27:9: 27:48 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb29, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:21:37: 21:47 (#0),
                    scope: scope[1],
                },
                kind: _13 = Url::path(move _14) -> [return: bb20, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = &(*_13),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:21:26: 21:48 (#0),
                    scope: scope[1],
                },
                kind: _11 = Url::parse(move _12) -> [return: bb21, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageDead(_13),
            PlaceMention(_11),
            _15 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:22:13: 22:25 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _15) -> [0: bb23, 1: bb24, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:22:19: 22:25 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:23:17: 23:28 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:24:27: 24:47 (#0),
                    scope: scope[2],
                },
                kind: _0 = origin::Origin::new_opaque() -> [return: bb27, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &((_11 as Ok).0: Url),
            StorageLive(_17),
            _17 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:23:32: 23:47 (#0),
                    scope: scope[3],
                },
                kind: _0 = origin::url_origin(move _17) -> [return: bb26, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:23:46: 23:47 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:26:9: 26:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb28, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:26:9: 26:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:28:13: 28:30 (#0),
                    scope: scope[1],
                },
                kind: _18 = <str as std::borrow::ToOwned>::to_owned(move _19) -> [return: bb30, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:29:13: 29:23 (#0),
                    scope: scope[1],
                },
                kind: _23 = Url::host(move _24) -> [return: bb31, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:29:13: 29:32 (#0),
                    scope: scope[1],
                },
                kind: _22 = core::option::Option::<host::Host<&str>>::unwrap(move _23) -> [return: bb32, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = &_22,
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:29:13: 29:43 (#0),
                    scope: scope[1],
                },
                kind: _20 = host::Host::<&str>::to_owned(move _21) -> [return: bb33, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:30:13: 30:40 (#0),
                    scope: scope[1],
                },
                kind: _26 = Url::port_or_known_default(move _27) -> [return: bb34, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:30:13: 30:49 (#0),
                    scope: scope[1],
                },
                kind: _25 = core::option::Option::<u16>::unwrap(move _26) -> [return: bb35, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            _0 = origin::Origin::Tuple(move _18, move _20, move _25),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:31:9: 31:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb36, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:31:9: 31:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_18) -> [return: bb37, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:31:9: 31:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:33:19: 33:39 (#0),
                    scope: scope[1],
                },
                kind: _0 = origin::Origin::new_opaque() -> [return: bb39, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:36:2: 36:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:31:9: 31:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:31:9: 31:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_18) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:26:9: 26:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/origin.rs:17:1: 36:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: origin::Origin,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:17:33: 17:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/origin.rs:17:24: 17:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/origin.rs:17:19: 17:22 (#0),
                            ),
                        ),
                        pat_span: url/src/origin.rs:17:19: 17:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:17:19: 17:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/origin.rs:18:18: 18:30 (#0),
                            ),
                        ),
                        pat_span: url/src/origin.rs:18:9: 18:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:18:9: 18:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:18:18: 18:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:33:9: 33:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:27:43: 27:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:27:36: 27:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:27:26: 27:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:27:17: 27:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:27:9: 27:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:20:9: 20:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/origin.rs:21:26: 21:48 (#0),
                            ),
                        ),
                        pat_span: url/src/origin.rs:21:17: 21:23 (#0),
                    },
                ),
            ),
        ),
        ty: core::result::Result<Url, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:21:17: 21:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:21:37: 21:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:21:37: 21:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:21:37: 21:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:23:17: 23:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                url/src/origin.rs:22:19: 22:25 (#0),
                            ),
                        ),
                        pat_span: url/src/origin.rs:23:17: 23:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:23:20: 23:27 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/origin.rs:22:13: 25:14 (#0),
                },
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:23:43: 23:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:28:13: 28:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/origin.rs:19:5: 35:6 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:28:13: 28:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:29:13: 29:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/origin.rs:19:5: 35:6 (#0),
                },
            ),
        ),
        ty: &'{erased} host::Host<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:29:13: 29:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/origin.rs:19:5: 35:6 (#0),
                },
            ),
        ),
        ty: host::Host<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:29:13: 29:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/origin.rs:19:5: 35:6 (#0),
                },
            ),
        ),
        ty: core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:29:13: 29:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/origin.rs:19:5: 35:6 (#0),
                },
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:29:13: 29:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:30:13: 30:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/origin.rs:19:5: 35:6 (#0),
                },
            ),
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:30:13: 30:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/origin.rs:19:5: 35:6 (#0),
                },
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/origin.rs:30:13: 30:16 (#0),
            scope: scope[0],
        },
    },
]