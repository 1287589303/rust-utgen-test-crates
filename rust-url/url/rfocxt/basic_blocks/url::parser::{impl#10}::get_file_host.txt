[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:40: 1045:64 (#0),
                    scope: scope[0],
                },
                kind: _6 = parser::Parser::<'_>::file_host(move _7) -> [return: bb1, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:40: 1045:65 (#722),
                    scope: scope[0],
                },
                kind: _5 = <core::result::Result<(bool, std::string::String, parser::Input<'_>), parser::ParseError> as core::ops::Try>::branch(move _6) -> [return: bb2, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            _8 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:40: 1045:65 (#722),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:40: 1045:65 (#722),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:64: 1045:65 (#723),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_5 as Continue).0: (bool, std::string::String, parser::Input<'_>)),
            _4 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:64: 1045:65 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb8, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = ((_5 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_11),
            _11 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:40: 1045:65 (#722),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<(host::Host, parser::Input<'_>), parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _11) -> [return: bb7, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:65: 1045:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb38, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_4),
            StorageLive(_2),
            _2 = move (_4.1: std::string::String),
            StorageLive(_3),
            _3 = move (_4.2: parser::Input<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:65: 1045:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb9, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:65: 1045:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb10, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_2,
            _19 = &(*_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1046:38: 1046:47 (#0),
                    scope: scope[1],
                },
                kind: _18 = <std::string::String as core::ops::Deref>::deref(move _19) -> [return: bb11, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &(*_18),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1046:26: 1046:48 (#0),
                    scope: scope[1],
                },
                kind: _16 = host::Host::parse(move _17) -> [return: bb12, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1046:26: 1046:49 (#724),
                    scope: scope[1],
                },
                kind: _15 = <core::result::Result<host::Host, parser::ParseError> as core::ops::Try>::branch(move _16) -> [return: bb13, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            _21 = discriminant(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1046:26: 1046:49 (#724),
                    scope: scope[1],
                },
                kind: switchInt(move _21) -> [0: bb16, 1: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1046:26: 1046:49 (#724),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1046:48: 1046:49 (#725),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = move ((_15 as Continue).0: host::Host),
            _14 = move _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1046:48: 1046:49 (#0),
                    scope: scope[1],
                },
                kind: drop(_25) -> [return: bb19, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = ((_15 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_24),
            _24 = _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1046:26: 1046:49 (#724),
                    scope: scope[8],
                },
                kind: _0 = <core::result::Result<(host::Host, parser::Input<'_>), parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _24) -> [return: bb18, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1049:10: 1049:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb36, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_14),
            _27 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1046:20: 1046:49 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _27) -> [0: bb21, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            _37 = move _14,
            _13 = move _37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1048:24: 1048:25 (#0),
                    scope: scope[1],
                },
                kind: drop(_37) -> [return: bb28, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1047:13: 1047:32 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            StorageLive(_28),
            _28 = &((_14 as Domain).0: std::string::String),
            _29 = &_28,
            _26 = &fake shallow _14,
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_29),
            StorageLive(_32),
            StorageLive(_33),
            _33 = const "localhost",
            _32 = &_33,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1047:36: 1047:52 (#0),
                    scope: scope[1],
                },
                kind: _30 = <&std::string::String as core::cmp::PartialEq<&str>>::eq(move _31, move _32) -> [return: bb23, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1047:36: 1047:52 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _30) -> [0: bb25, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_30),
            FakeRead(ForMatchGuard, _26),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = const "",
            _35 = &(*_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1047:69: 1047:83 (#0),
                    scope: scope[11],
                },
                kind: _34 = <str as std::string::ToString>::to_string(move _35) -> [return: bb26, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1047:36: 1047:52 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            _13 = host::Host::Domain(move _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1047:83: 1047:84 (#0),
                    scope: scope[11],
                },
                kind: drop(_34) -> [return: bb27, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_36),
            StorageDead(_28),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1047:83: 1047:84 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1048:24: 1048:25 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1049:10: 1049:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb30, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1049:10: 1049:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb31, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_38),
            StorageLive(_39),
            _39 = move _13,
            StorageLive(_40),
            _40 = move _3,
            _38 = (move _39, move _40),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1050:28: 1050:29 (#0),
                    scope: scope[6],
                },
                kind: drop(_39) -> [return: bb32, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            _0 = core::result::Result::<(host::Host, parser::Input<'_>), parser::ParseError>::Ok(move _38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1050:29: 1050:30 (#0),
                    scope: scope[6],
                },
                kind: drop(_38) -> [return: bb33, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1051:5: 1051:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb34, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1051:5: 1051:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb35, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1051:6: 1051:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1051:5: 1051:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb37, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1051:6: 1051:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1050:29: 1050:30 (#0),
                    scope: scope[6],
                },
                kind: drop(_38) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1049:10: 1049:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1051:5: 1051:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1049:10: 1049:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1049:10: 1049:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1046:48: 1046:49 (#724),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:65: 1045:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1051:5: 1051:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb50, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:65: 1045:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb50, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1045:64: 1045:65 (#722),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb50, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1044:5: 1051:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(host::Host<std::string::String>, parser::Input<'{erased}>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1044:43: 1044:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1044:29: 1044:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1044:22: 1044:27 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1044:22: 1044:27 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1044:22: 1044:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                url/src/parser.rs:1045:40: 1045:65 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1045:13: 1045:37 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:17: 1045:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                url/src/parser.rs:1045:40: 1045:65 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1045:13: 1045:37 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:27: 1045:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (bool, std::string::String, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:40: 1045:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, (bool, std::string::String, parser::Input<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:40: 1045:65 (#722),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(bool, std::string::String, parser::Input<'{erased}>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:40: 1045:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:58: 1045:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:64: 1045:65 (#723),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                url/src/parser.rs:1045:40: 1045:65 (#722),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1045:64: 1045:65 (#723),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:64: 1045:65 (#723),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:64: 1045:65 (#723),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:64: 1045:65 (#723),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                url/src/parser.rs:1045:40: 1045:65 (#722),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1045:40: 1045:65 (#722),
                    },
                ),
            ),
        ),
        ty: (bool, std::string::String, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1045:40: 1045:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1046:20: 1049:10 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1046:13: 1046:17 (#0),
                    },
                ),
            ),
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:13: 1046:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:26: 1046:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, host::Host<std::string::String>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:26: 1046:49 (#724),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<host::Host<std::string::String>, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:26: 1046:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:38: 1046:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:38: 1046:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:38: 1046:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:38: 1046:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:48: 1046:49 (#725),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                url/src/parser.rs:1046:26: 1046:49 (#724),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1046:48: 1046:49 (#725),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:48: 1046:49 (#725),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:48: 1046:49 (#725),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:48: 1046:49 (#725),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                url/src/parser.rs:1046:26: 1046:49 (#724),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1046:26: 1046:49 (#724),
                    },
                ),
            ),
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:26: 1046:49 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1046:26: 1046:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1047:13: 1047:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                url/src/parser.rs:1046:26: 1046:49 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1047:13: 1047:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1047:26: 1047:31 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1047:26: 1047:31 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1047:36: 1047:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1047:36: 1047:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1047:41: 1047:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1047:41: 1047:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1047:69: 1047:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1047:69: 1047:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1047:69: 1047:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                url/src/parser.rs:1046:26: 1046:49 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1048:13: 1048:17 (#0),
                    },
                ),
            ),
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1048:13: 1048:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (host::Host<std::string::String>, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1050:12: 1050:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1050:9: 1050:30 (#0),
                },
            ),
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1050:13: 1050:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1050:9: 1050:30 (#0),
                },
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1050:19: 1050:28 (#0),
            scope: scope[0],
        },
    },
]