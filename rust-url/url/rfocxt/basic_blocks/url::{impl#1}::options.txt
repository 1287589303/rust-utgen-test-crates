[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            _1 = core::option::Option::<&Url>::None,
            StorageLive(_2),
            _2 = core::option::Option::<&dyn for<'a> core::ops::Fn(&'a str) -> std::borrow::Cow<'_, [u8]>>::None,
            StorageLive(_3),
            _3 = core::option::Option::<&dyn core::ops::Fn(parser::SyntaxViolation)>::None,
            _0 = ParseOptions::<'_> { base_url: move _1, encoding_override: move _2, violation_fn: move _3 },
            StorageDead(_3),
            StorageDead(_2),
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:626:6: 626:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ParseOptions<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:620:29: 620:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} Url>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:622:23: 622:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&str,)>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }, Binder { value: Projection(Output = std::borrow::Cow<'_, [u8]>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:623:32: 623:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::ops::Fn<(parser::SyntaxViolation,)>), bound_vars: [] }, Binder { value: Projection(Output = ()), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:624:27: 624:31 (#0),
            scope: scope[0],
        },
    },
]