[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:211:21: 211:71 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::str::<impl str>::trim_matches::<'_, fn(char) -> bool {parser::ascii_tab_or_new_line}>(move _4, parser::ascii_tab_or_new_line) -> [return: bb1, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            PlaceMention(_2),
            _6 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:212:16: 212:25 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _6) -> [1: bb2, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:212:16: 212:25 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = ((_2 as Some).0: &dyn core::ops::Fn(parser::SyntaxViolation)),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:213:16: 213:27 (#0),
                    scope: scope[2],
                },
                kind: _10 = core::str::<impl str>::len(move _11) -> [return: bb4, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:213:30: 213:50 (#0),
                    scope: scope[2],
                },
                kind: _12 = core::str::<impl str>::len(move _13) -> [return: bb5, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _9 = Lt(move _10, move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:213:16: 213:50 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _9) -> [0: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageLive(_14),
            _14 = &(*_7),
            StorageLive(_15),
            StorageLive(_16),
            _16 = parser::SyntaxViolation::C0SpaceIgnored,
            _15 = (move _16,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:214:17: 214:53 (#0),
                    scope: scope[2],
                },
                kind: _8 = <dyn core::ops::Fn(parser::SyntaxViolation) as core::ops::Fn<(parser::SyntaxViolation,)>>::call(move _14, move _15) -> [return: bb7, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:213:13: 215:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:213:13: 215:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:216:16: 216:29 (#0),
                    scope: scope[2],
                },
                kind: _19 = core::str::<impl str>::chars(move _20) -> [return: bb10, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &mut _19,
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:216:16: 216:56 (#0),
                    scope: scope[2],
                },
                kind: _17 = <core::str::Chars<'_> as core::iter::Iterator>::any::<fn(char) -> bool {parser::ascii_tab_or_new_line}>(move _18, parser::ascii_tab_or_new_line) -> [return: bb11, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:216:16: 216:56 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _17) -> [0: bb14, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_21),
            _21 = &(*_7),
            StorageLive(_22),
            StorageLive(_23),
            _23 = parser::SyntaxViolation::TabOrNewlineIgnored,
            _22 = (move _23,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:217:17: 217:58 (#0),
                    scope: scope[2],
                },
                kind: _5 = <dyn core::ops::Fn(parser::SyntaxViolation) as core::ops::Fn<(parser::SyntaxViolation,)>>::call(move _21, move _22) -> [return: bb13, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:216:13: 218:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:216:13: 218:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:212:9: 219:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:212:9: 219:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:221:20: 221:33 (#0),
                    scope: scope[1],
                },
                kind: _24 = core::str::<impl str>::chars(move _25) -> [return: bb18, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _0 = parser::Input::<'_> { chars: move _24 },
            StorageDead(_24),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:223:6: 223:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:207:5: 223:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:210:10: 210:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:208:25: 208:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:208:9: 208:23 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:208:9: 208:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:208:9: 208:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:209:14: 209:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:209:9: 209:12 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:209:9: 209:12 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::ops::Fn<(parser::SyntaxViolation,)>), bound_vars: [] }, Binder { value: Projection(Output = ()), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:209:9: 209:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:211:21: 211:71 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:211:13: 211:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:211:13: 211:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:211:21: 211:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:212:9: 219:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:212:16: 212:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                url/src/parser.rs:212:28: 212:31 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:212:16: 212:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(parser::SyntaxViolation,)>), bound_vars: [] }, Binder { value: Projection(Output = ()), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:212:21: 212:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:213:13: 215:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:213:16: 213:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:213:16: 213:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:213:16: 213:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:213:30: 213:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:213:30: 213:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:214:17: 214:53 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(parser::SyntaxViolation,)>), bound_vars: [] }, Binder { value: Projection(Output = ()), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:214:17: 214:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:214:17: 214:53 (#0),
                },
            ),
        ),
        ty: (parser::SyntaxViolation,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:214:17: 214:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:214:17: 214:53 (#0),
                },
            ),
        ),
        ty: parser::SyntaxViolation,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:214:21: 214:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:216:13: 218:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:216:16: 216:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:216:13: 218:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:216:16: 216:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:216:13: 218:14 (#0),
                },
            ),
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:216:16: 216:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:216:13: 218:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:216:16: 216:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:217:17: 217:58 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(parser::SyntaxViolation,)>), bound_vars: [] }, Binder { value: Projection(Output = ()), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:217:17: 217:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:217:17: 217:58 (#0),
                },
            ),
        ),
        ty: (parser::SyntaxViolation,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:217:17: 217:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:217:17: 217:58 (#0),
                },
            ),
        ),
        ty: parser::SyntaxViolation,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:217:21: 217:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:221:20: 221:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:220:9: 222:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:221:20: 221:25 (#0),
            scope: scope[0],
        },
    },
]