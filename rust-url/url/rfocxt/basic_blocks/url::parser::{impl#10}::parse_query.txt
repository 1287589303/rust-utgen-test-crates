[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).4: parser::Context),
            StorageLive(_8),
            StorageLive(_9),
            _9 = parser::Context::UrlParser,
            _8 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1591:28: 1591:62 (#0),
                    scope: scope[0],
                },
                kind: _6 = <parser::Context as core::cmp::PartialEq>::eq(move _7, move _8) -> [return: bb1, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_10),
            _10 = move _4,
            StorageLive(_11),
            _11 = ((*_1).3: core::option::Option<&dyn core::ops::Fn(parser::SyntaxViolation)>),
            _5 = parser::Parser::<'a>::parse_query::QueryPartIter::<'_, '_> { is_url_parser: move _6, input: move _10, violation_fn: move _11 },
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageDead(_9),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1595:22: 1595:46 (#0),
                    scope: scope[1],
                },
                kind: _13 = parser::SchemeType::is_special(move _14) -> [return: bb2, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1595:22: 1595:46 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _13) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            _12 = const parser::SPECIAL_QUERY,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1595:19: 1599:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            _15 = const parser::QUERY,
            _12 = &(*_15),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1595:19: 1599:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageLive(_16),
            StorageLive(_17),
            _17 = ((*_1).2: core::option::Option<&dyn for<'a> core::ops::Fn(&'a str) -> std::borrow::Cow<'_, [u8]>>),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &_1,
            StorageLive(_20),
            _20 = &_3,
            _18 = {closure@url/src/parser.rs:1600:75: 1600:78} { self: move _19, scheme_end: move _20 },
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1600:39: 1605:11 (#0),
                    scope: scope[2],
                },
                kind: _16 = core::option::Option::<&dyn for<'a> core::ops::Fn(&'a str) -> std::borrow::Cow<'_, [u8]>>::filter::<{closure@url/src/parser.rs:1600:75: 1600:78}>(move _17, move _18) -> [return: bb6, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            FakeRead(ForLet(None), _16),
            StorageLive(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1607:9: 1618:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1607:9: 1618:10 (#0),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb8, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            StorageLive(_24),
            _24 = &mut _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1607:47: 1607:63 (#0),
                    scope: scope[4],
                },
                kind: _23 = <parser::Parser<'a>::parse_query::QueryPartIter<'_, '_> as core::iter::Iterator>::next(move _24) -> [return: bb9, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            PlaceMention(_23),
            _25 = discriminant(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1607:19: 1607:44 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _25) -> [1: bb10, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1607:19: 1607:44 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = (((_23 as Some).0: (&str, bool)).0: &str),
            StorageLive(_27),
            _27 = (((_23 as Some).0: (&str, bool)).1: bool),
            StorageLive(_28),
            PlaceMention(_16),
            _29 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1608:13: 1608:42 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _29) -> [0: bb14, 1: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1608:19: 1608:42 (#0),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1610:17: 1610:24 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            _42 = &mut ((*_1).0: std::string::String),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = &(*_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1613:44: 1613:59 (#0),
                    scope: scope[4],
                },
                kind: _45 = core::str::<impl str>::as_bytes(move _46) -> [return: bb21, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            _30 = ((_16 as Some).0: &dyn for<'a> core::ops::Fn(&'a str) -> std::borrow::Cow<'_, [u8]>),
            StorageLive(_31),
            _31 = &mut ((*_1).0: std::string::String),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &(*_30),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &(*_26),
            _39 = (move _40,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1610:70: 1610:77 (#0),
                    scope: scope[5],
                },
                kind: _37 = <dyn for<'a> core::ops::Fn(&'a str) -> std::borrow::Cow<'_, [u8]> as core::ops::Fn<(&str,)>>::call(move _38, move _39) -> [return: bb16, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_38),
            _36 = &_37,
            _35 = &(*_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1610:69: 1610:77 (#0),
                    scope: scope[5],
                },
                kind: _34 = <std::borrow::Cow<'_, [u8]> as core::ops::Deref>::deref(move _35) -> [return: bb17, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _33 = &(*_34),
            StorageDead(_35),
            StorageLive(_41),
            _41 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1610:54: 1610:83 (#0),
                    scope: scope[5],
                },
                kind: _32 = percent_encoding::percent_encode(move _33, move _41) -> [return: bb18, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1610:28: 1610:84 (#0),
                    scope: scope[5],
                },
                kind: _28 = <std::string::String as core::iter::Extend<&str>>::extend::<percent_encoding::PercentEncode<'_>>(move _31, move _32) -> [return: bb19, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1610:83: 1610:84 (#0),
                    scope: scope[4],
                },
                kind: drop(_37) -> [return: bb20, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_34),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1610:83: 1610:84 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _44 = &(*_45),
            StorageDead(_46),
            StorageLive(_47),
            _47 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1613:29: 1613:65 (#0),
                    scope: scope[4],
                },
                kind: _43 = percent_encoding::percent_encode(move _44, move _47) -> [return: bb22, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1611:25: 1613:66 (#0),
                    scope: scope[4],
                },
                kind: _28 = <std::string::String as core::iter::Extend<&str>>::extend::<percent_encoding::PercentEncode<'_>>(move _42, move _43) -> [return: bb23, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1613:65: 1613:66 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageLive(_48),
            _48 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1615:16: 1615:27 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _48) -> [0: bb26, otherwise: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_50),
            _50 = move (_5.1: parser::Input<'_>),
            _0 = core::option::Option::<parser::Input<'_>>::Some(move _50),
            StorageDead(_50),
            StorageDead(_48),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_16),
            StorageDead(_12),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1621:6: 1621:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = const (),
            StorageDead(_48),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1607:9: 1618:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            _21 = const (),
            StorageDead(_52),
            StorageDead(_23),
            StorageDead(_21),
            _0 = core::option::Option::<parser::Input<'_>>::None,
            StorageDead(_16),
            StorageDead(_12),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1621:6: 1621:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1621:6: 1621:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1610:83: 1610:84 (#0),
                    scope: scope[4],
                },
                kind: drop(_37) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1542:5: 1621:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<parser::Input<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1547:10: 1547:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1543:9: 1543:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1544:22: 1544:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1544:9: 1544:20 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1544:9: 1544:20 (#0),
                    },
                ),
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1544:9: 1544:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1545:21: 1545:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1545:9: 1545:19 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1545:9: 1545:19 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1545:9: 1545:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1546:16: 1546:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1546:9: 1546:14 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1546:9: 1546:14 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1546:9: 1546:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1590:29: 1594:10 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1590:13: 1590:26 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Parser<'a>::parse_query::QueryPartIter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1590:13: 1590:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1591:28: 1591:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1591:28: 1591:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1591:44: 1591:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1591:44: 1591:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1592:13: 1592:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::ops::Fn<(parser::SyntaxViolation,)>), bound_vars: [] }, Binder { value: Projection(Output = ()), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1593:27: 1593:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1595:19: 1599:10 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1595:13: 1595:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} percent_encoding::AsciiSet,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1595:13: 1595:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1595:22: 1595:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1595:22: 1595:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} percent_encoding::AsciiSet,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1598:13: 1598:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1600:39: 1605:11 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1600:13: 1600:36 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&str,)>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }, Binder { value: Projection(Output = std::borrow::Cow<'_, [u8]>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1600:13: 1600:36 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&str,)>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }, Binder { value: Projection(Output = std::borrow::Cow<'_, [u8]>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1600:39: 1600:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:258 ~ url[3b6e]::parser::{impl#10}::parse_query::{closure#0}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((&'^0 &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&str,)>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }, Binder { value: Projection(Output = std::borrow::Cow<'_, [u8]>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }] + '{erased},)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} &'{erased} mut parser::Parser<'{erased}>, &'{erased} u32),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1600:75: 1605:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1600:75: 1605:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1600:75: 1605:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1607:9: 1618:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1542:5: 1621:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1607:9: 1618:10 (#787),
                },
            ),
        ),
        ty: core::option::Option<(&'{erased} str, bool)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1607:47: 1607:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1607:9: 1618:10 (#787),
                },
            ),
        ),
        ty: &'{erased} mut parser::Parser<'a>::parse_query::QueryPartIter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1607:47: 1607:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1607:19: 1607:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _23,
                                ),
                                url/src/parser.rs:1607:47: 1607:63 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1607:19: 1607:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1607:25: 1607:29 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _23,
                                ),
                                url/src/parser.rs:1607:47: 1607:63 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1607:19: 1607:44 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1607:31: 1607:42 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1608:13: 1614:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:17: 1610:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                url/src/parser.rs:1608:19: 1608:42 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1610:17: 1610:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&str,)>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }, Binder { value: Projection(Output = std::borrow::Cow<'_, [u8]>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:22: 1610:23 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:28: 1610:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: percent_encoding::PercentEncode<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:54: 1610:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:69: 1610:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:69: 1610:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::borrow::Cow<'{erased}, [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:69: 1610:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::borrow::Cow<'{erased}, [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:69: 1610:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::borrow::Cow<'{erased}, [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:70: 1610:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&str,)>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }, Binder { value: Projection(Output = std::borrow::Cow<'_, [u8]>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:70: 1610:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} str,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:70: 1610:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:72: 1610:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} percent_encoding::AsciiSet,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1610:79: 1610:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1611:25: 1612:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: percent_encoding::PercentEncode<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1613:29: 1613:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1613:44: 1613:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1613:44: 1613:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1613:44: 1613:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} percent_encoding::AsciiSet,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1613:61: 1613:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1615:13: 1617:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1615:16: 1615:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1615:13: 1617:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1615:28: 1617:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1616:29: 1616:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1607:9: 1618:10 (#787),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1607:9: 1618:10 (#787),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1607:9: 1618:10 (#787),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1607:9: 1618:10 (#787),
            scope: scope[0],
        },
    },
]