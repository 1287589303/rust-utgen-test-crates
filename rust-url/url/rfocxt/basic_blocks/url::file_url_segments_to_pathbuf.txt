[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3065:8: 3065:22 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::option::Option::<&str>::is_some(move _6) -> [return: bb1, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3065:8: 3065:22 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_8),
            _8 = (),
            _0 = core::result::Result::<std::path::PathBuf, ()>::Err(move _8),
            StorageDead(_8),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = const (),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3069:21: 3069:31 (#0),
                    scope: scope[0],
                },
                kind: _9 = std::vec::Vec::<u8>::new() -> [return: bb4, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut _9,
            StorageLive(_15),
            _15 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3070:5: 3070:42 (#0),
                    scope: scope[1],
                },
                kind: _13 = std::vec::Vec::<u8>::try_reserve(move _14, move _15) -> [return: bb5, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_16),
            _16 = {closure@url/src/lib.rs:3070:51: 3070:54},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3070:5: 3070:58 (#0),
                    scope: scope[1],
                },
                kind: _12 = core::result::Result::<(), std::collections::TryReserveError>::map_err::<(), {closure@url/src/lib.rs:3070:51: 3070:54}>(move _13, move _16) -> [return: bb6, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3070:5: 3070:59 (#1154),
                    scope: scope[1],
                },
                kind: _11 = <core::result::Result<(), ()> as core::ops::Try>::branch(move _12) -> [return: bb7, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _17 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3070:5: 3070:59 (#1154),
                    scope: scope[1],
                },
                kind: switchInt(move _17) -> [0: bb10, 1: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3070:5: 3070:59 (#1154),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3070:58: 3070:59 (#1155),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = ((_11 as Continue).0: ()),
            _10 = _21,
            StorageDead(_21),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_22),
            StorageLive(_23),
            _23 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3071:8: 3071:33 (#475),
                    scope: scope[1],
                },
                kind: switchInt(move _23) -> [0: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = ((_11 as Break).0: core::result::Result<core::convert::Infallible, ()>),
            StorageLive(_20),
            _20 = _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3070:5: 3070:59 (#1154),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<std::path::PathBuf, ()> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ()>>>::from_residual(move _20) -> [return: bb12, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3101:1: 3101:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb63, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3072:9: 3072:31 (#0),
                    scope: scope[1],
                },
                kind: _24 = <std::vec::Vec<u8> as core::iter::Extend<&u8>>::extend::<&[u8; 5]>(move _25, const b"file:") -> [return: bb15, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3071:5: 3073:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            _22 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3071:5: 3073:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3075:20: 3075:28 (#1159),
                    scope: scope[1],
                },
                kind: _27 = <core::str::Split<'_, char> as core::iter::IntoIterator>::into_iter(move _28) -> [return: bb17, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            PlaceMention(_27),
            StorageLive(_29),
            _29 = move _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3075:5: 3078:6 (#1158),
                    scope: scope[6],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3075:5: 3078:6 (#1158),
                    scope: scope[6],
                },
                kind: falseUnwind -> [real: bb19, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &mut _29,
            _33 = &mut (*_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3075:20: 3075:28 (#1159),
                    scope: scope[6],
                },
                kind: _32 = <core::str::Split<'_, char> as core::iter::Iterator>::next(move _33) -> [return: bb20, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            PlaceMention(_32),
            _35 = discriminant(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3075:20: 3075:28 (#1159),
                    scope: scope[6],
                },
                kind: switchInt(move _35) -> [0: bb22, 1: bb23, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3075:20: 3075:28 (#1159),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3075:5: 3078:6 (#1158),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb24, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            _37 = ((_32 as Some).0: &str),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &mut _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3076:9: 3076:25 (#0),
                    scope: scope[7],
                },
                kind: _38 = std::vec::Vec::<u8>::push(move _39, const 47_u8) -> [return: bb25, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = const (),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3081:8: 3081:19 (#0),
                    scope: scope[1],
                },
                kind: _48 = std::vec::Vec::<u8>::len(move _49) -> [return: bb29, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut _9,
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3077:37: 3077:55 (#0),
                    scope: scope[7],
                },
                kind: _44 = core::str::<impl str>::as_bytes(move _45) -> [return: bb26, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = &(*_44),
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3077:22: 3077:56 (#0),
                    scope: scope[7],
                },
                kind: _42 = percent_encoding::percent_decode(move _43) -> [return: bb27, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3077:9: 3077:57 (#0),
                    scope: scope[7],
                },
                kind: _40 = <std::vec::Vec<u8> as core::iter::Extend<u8>>::extend::<percent_encoding::PercentDecode<'_>>(move _41, move _42) -> [return: bb28, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_44),
            StorageDead(_40),
            _31 = const (),
            StorageDead(_37),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
            _30 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3075:5: 3078:6 (#1158),
                    scope: scope[6],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            _47 = Gt(move _48, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3081:8: 3081:23 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _47) -> [0: bb47, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &_9,
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3082:18: 3082:29 (#0),
                    scope: scope[1],
                },
                kind: _55 = std::vec::Vec::<u8>::len(move _56) -> [return: bb31, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            _57 = SubWithOverflow(_55, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3082:18: 3082:33 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_57.1: bool), "attempt to compute `{} - {}`, which would overflow", move _55, const 2_usize) -> [success: bb32, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _54 = move (_57.0: usize),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3082:17: 3082:34 (#0),
                    scope: scope[1],
                },
                kind: _52 = <std::vec::Vec<u8> as core::ops::Index<usize>>::index(move _53, move _54) -> [return: bb33, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _51 = &(*_52),
            StorageDead(_54),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3082:12: 3082:56 (#0),
                    scope: scope[1],
                },
                kind: _50 = core::num::<impl u8>::is_ascii_alphabetic(move _51) -> [return: bb34, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3082:12: 3082:56 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _50) -> [0: bb46, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &_9,
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3083:27: 3083:38 (#0),
                    scope: scope[1],
                },
                kind: _62 = std::vec::Vec::<u8>::len(move _63) -> [return: bb36, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            _64 = SubWithOverflow(_62, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3083:27: 3083:42 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_64.1: bool), "attempt to compute `{} - {}`, which would overflow", move _62, const 1_usize) -> [success: bb37, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = move (_64.0: usize),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3083:26: 3083:43 (#0),
                    scope: scope[1],
                },
                kind: _59 = <std::vec::Vec<u8> as core::ops::Index<usize>>::index(move _60, move _61) -> [return: bb38, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
            PlaceMention((*_59)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 457:9 (#476),
                    scope: scope[1],
                },
                kind: switchInt((*_59)) -> [58: bb40, 124: bb40, otherwise: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _58 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:459:18: 459:23 (#476),
                    scope: scope[1],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3083:45: 3083:56 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb41, imaginary: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _58 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:458:39: 458:43 (#476),
                    scope: scope[1],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#476),
                    scope: scope[1],
                },
                kind: switchInt(move _58) -> [0: bb45, otherwise: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &mut _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3085:9: 3085:25 (#0),
                    scope: scope[1],
                },
                kind: _65 = std::vec::Vec::<u8>::push(move _66, const 47_u8) -> [return: bb44, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageDead(_65),
            _46 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3081:5: 3086:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3081:5: 3086:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_50),
            StorageDead(_47),
            StorageDead(_46),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = &_9,
            _71 = &(*_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3089:48: 3089:54 (#0),
                    scope: scope[1],
                },
                kind: _70 = <std::vec::Vec<u8> as core::ops::Deref>::deref(move _71) -> [return: bb50, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _69 = &(*_70),
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3089:30: 3089:55 (#0),
                    scope: scope[1],
                },
                kind: _68 = <std::ffi::OsStr as std::os::unix::ffi::OsStrExt>::from_bytes(move _69) -> [return: bb51, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3089:16: 3089:56 (#0),
                    scope: scope[1],
                },
                kind: _67 = <std::path::PathBuf as core::convert::From<&std::ffi::OsStr>>::from(move _68) -> [return: bb52, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            FakeRead(ForLet(None), _67),
            StorageDead(_72),
            StorageDead(_70),
            StorageLive(_73),
            StorageLive(_74),
            _74 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#478),
                    scope: scope[8],
                },
                kind: switchInt(move _74) -> [0: bb58, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            _79 = &_67,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3096:9: 3096:27 (#0),
                    scope: scope[8],
                },
                kind: _78 = <std::path::PathBuf as core::ops::Deref>::deref(move _79) -> [return: bb54, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _77 = &(*_78),
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3096:9: 3096:27 (#0),
                    scope: scope[8],
                },
                kind: _76 = std::path::Path::is_absolute(move _77) -> [return: bb55, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3096:9: 3096:27 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _76) -> [0: bb57, otherwise: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_78),
            _75 = const (),
            StorageDead(_76),
            StorageDead(_75),
            _73 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#477),
                    scope: scope[8],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            StorageDead(_78),
            StorageLive(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:30:9: 30:39 (#482),
                    scope: scope[8],
                },
                kind: _80 = core::panicking::panic(const "to_file_path() failed to produce an absolute Path") -> bb65,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _73 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#477),
                    scope: scope[8],
                },
                kind: goto -> bb59,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_73),
            StorageLive(_81),
            _81 = move _67,
            _0 = core::result::Result::<std::path::PathBuf, ()>::Ok(move _81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3100:12: 3100:13 (#0),
                    scope: scope[8],
                },
                kind: drop(_81) -> [return: bb60, unwind: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3101:1: 3101:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_67) -> [return: bb61, unwind: bb66],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3101:1: 3101:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb62, unwind: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3101:2: 3101:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3101:2: 3101:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3101:1: 3101:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_67) -> [return: bb66, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3101:1: 3101:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb67, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:3051:1: 3101:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<std::path::PathBuf, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3055:6: 3055:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:3052:25: 3052:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:3052:5: 3052:23 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:3052:5: 3052:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3052:5: 3052:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:3053:11: 3053:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:3053:5: 3053:9 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:3053:5: 3053:9 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3053:5: 3053:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:3054:15: 3054:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:3054:5: 3054:13 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:3054:5: 3054:13 (#0),
                    },
                ),
            ),
        ),
        ty: core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3054:5: 3054:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3065:5: 3067:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3065:8: 3065:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3065:8: 3065:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3065:23: 3067:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3066:20: 3066:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:3069:21: 3069:31 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:3069:9: 3069:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3069:9: 3069:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:5: 3070:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ()>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:5: 3070:59 (#1154),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:5: 3070:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), std::collections::TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:5: 3070:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:5: 3070:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:23: 3070:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:508 ~ url[3b6e]::file_url_segments_to_pathbuf::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((std::collections::TryReserveError,)), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:51: 3070:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:58: 3070:59 (#1155),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                url/src/lib.rs:3070:5: 3070:59 (#1154),
                            ),
                        ),
                        pat_span: url/src/lib.rs:3070:58: 3070:59 (#1155),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:58: 3070:59 (#1155),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:58: 3070:59 (#1155),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:58: 3070:59 (#1155),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                url/src/lib.rs:3070:5: 3070:59 (#1154),
                            ),
                        ),
                        pat_span: url/src/lib.rs:3070:5: 3070:59 (#1154),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3070:5: 3070:59 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3071:5: 3073:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3071:8: 3071:33 (#475),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3072:9: 3072:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3072:9: 3072:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:5: 3078:6 (#1158),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:20: 3075:28 (#1159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:20: 3075:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                url/src/lib.rs:3075:20: 3075:28 (#1159),
                            ),
                        ),
                        pat_span: url/src/lib.rs:3075:20: 3075:28 (#1159),
                    },
                ),
            ),
        ),
        ty: core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:20: 3075:28 (#1159),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3051:1: 3101:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:20: 3075:28 (#1159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:20: 3075:28 (#1159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:20: 3075:28 (#1159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:20: 3075:28 (#1159),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:5: 3078:6 (#1158),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:5: 3078:6 (#1158),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _32,
                                ),
                                url/src/lib.rs:3075:20: 3075:28 (#1159),
                            ),
                        ),
                        pat_span: url/src/lib.rs:3075:9: 3075:16 (#1160),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3075:9: 3075:16 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3076:9: 3076:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3076:9: 3076:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3077:9: 3077:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3077:9: 3077:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: percent_encoding::PercentDecode<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3077:22: 3077:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3077:37: 3077:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3077:37: 3077:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3077:37: 3077:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3081:5: 3086:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3081:8: 3081:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3081:8: 3081:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3081:8: 3081:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3082:12: 3082:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3082:12: 3082:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3082:17: 3082:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3082:12: 3082:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3082:18: 3082:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3082:18: 3082:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3082:18: 3082:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3082:18: 3082:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#476),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3083:26: 3083:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3083:21: 3083:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3083:27: 3083:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3083:27: 3083:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3083:27: 3083:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3083:27: 3083:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3085:9: 3085:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3085:9: 3085:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:3089:16: 3089:56 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:3089:9: 3089:13 (#0),
                    },
                ),
            ),
        ),
        ty: std::path::PathBuf,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3089:9: 3089:13 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::ffi::OsStr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3089:30: 3089:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3089:48: 3089:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3089:48: 3089:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3089:48: 3089:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<u8, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3089:48: 3089:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#477),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#478),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#479),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3096:9: 3096:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::path::Path,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3096:9: 3096:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::path::Path,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3096:9: 3096:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::path::PathBuf,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3096:9: 3096:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:30:9: 30:39 (#482),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:30:9: 30:39 (#482),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::path::PathBuf,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:3100:8: 3100:12 (#0),
            scope: scope[0],
        },
    },
]