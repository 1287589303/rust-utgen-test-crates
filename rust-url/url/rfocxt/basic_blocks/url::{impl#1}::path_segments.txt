[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1430:20: 1430:31 (#0),
                    scope: scope[0],
                },
                kind: _2 = Url::path(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1431:9: 1431:31 (#0),
                    scope: scope[1],
                },
                kind: _4 = core::str::<impl str>::strip_prefix::<'_, char>(move _5, const '/') -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = {closure@url/src/lib.rs:1431:36: 1431:47},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1431:9: 1431:69 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::option::Option::<&str>::map::<core::str::Split<'_, char>, {closure@url/src/lib.rs:1431:36: 1431:47}>(move _4, move _6) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1432:6: 1432:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1429:5: 1432:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1429:36: 1429:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1429:26: 1429:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1430:20: 1430:31 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1430:13: 1430:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1430:13: 1430:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1430:20: 1430:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:1431:9: 1431:69 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1431:9: 1431:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:1431:9: 1431:69 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1431:9: 1431:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:1431:9: 1431:69 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:412 ~ url[3b6e]::{impl#1}::path_segments::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} str,)) -> core::str::Split<'{erased}, char>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1431:36: 1431:68 (#0),
            scope: scope[0],
        },
    },
]