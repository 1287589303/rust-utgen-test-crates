[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _2,
            StorageLive(_5),
            _5 = ((*_1).3: core::option::Option<&dyn core::ops::Fn(parser::SyntaxViolation)>),
            _3 = parser::Parser::<'a>::parse_fragment::FragmentPartIter::<'_, '_> { input: move _4, violation_fn: move _5 },
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1688:21: 1688:30 (#804),
                    scope: scope[1],
                },
                kind: _6 = <parser::Parser<'a>::parse_fragment::FragmentPartIter<'_, '_> as core::iter::IntoIterator>::into_iter(move _7) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            StorageLive(_8),
            _8 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1688:9: 1691:10 (#803),
                    scope: scope[2],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1688:9: 1691:10 (#803),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _8,
            _12 = &mut (*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1688:21: 1688:30 (#804),
                    scope: scope[2],
                },
                kind: _11 = <parser::Parser<'a>::parse_fragment::FragmentPartIter<'_, '_> as core::iter::Iterator>::next(move _12) -> [return: bb4, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _14 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1688:21: 1688:30 (#804),
                    scope: scope[2],
                },
                kind: switchInt(move _14) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1688:21: 1688:30 (#804),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1688:9: 1691:10 (#803),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = ((_11 as Some).0: &str),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut ((*_1).0: std::string::String),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1690:25: 1690:60 (#0),
                    scope: scope[3],
                },
                kind: _19 = percent_encoding::utf8_percent_encode(move _20, const parser::FRAGMENT) -> [return: bb9, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1692:6: 1692:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1689:13: 1690:61 (#0),
                    scope: scope[3],
                },
                kind: _17 = <std::string::String as core::iter::Extend<&str>>::extend::<percent_encoding::PercentEncode<'_>>(move _18, move _19) -> [return: bb10, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            _10 = const (),
            StorageDead(_16),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1688:9: 1691:10 (#803),
                    scope: scope[2],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1643:5: 1692:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1643:55: 1643:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1643:27: 1643:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1643:45: 1643:54 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1643:38: 1643:43 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1643:38: 1643:43 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1643:38: 1643:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1683:25: 1686:10 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1683:13: 1683:22 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Parser<'a>::parse_fragment::FragmentPartIter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1683:13: 1683:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1684:13: 1684:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::ops::Fn<(parser::SyntaxViolation,)>), bound_vars: [] }, Binder { value: Projection(Output = ()), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1685:27: 1685:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1688:9: 1691:10 (#803),
                },
            ),
        ),
        ty: parser::Parser<'a>::parse_fragment::FragmentPartIter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1688:21: 1688:30 (#804),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1688:9: 1691:10 (#803),
                },
            ),
        ),
        ty: parser::Parser<'a>::parse_fragment::FragmentPartIter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1688:21: 1688:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                url/src/parser.rs:1688:21: 1688:30 (#804),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1688:21: 1688:30 (#804),
                    },
                ),
            ),
        ),
        ty: parser::Parser<'a>::parse_fragment::FragmentPartIter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1688:21: 1688:30 (#804),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1643:5: 1692:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1688:21: 1688:30 (#804),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1688:21: 1688:30 (#804),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'a>::parse_fragment::FragmentPartIter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1688:21: 1688:30 (#804),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'a>::parse_fragment::FragmentPartIter<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1688:21: 1688:30 (#804),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1688:9: 1691:10 (#803),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1688:9: 1691:10 (#803),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                url/src/parser.rs:1688:21: 1688:30 (#804),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1688:13: 1688:17 (#805),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1688:13: 1688:17 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1689:13: 1690:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1689:13: 1689:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: percent_encoding::PercentEncode<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1690:25: 1690:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1690:45: 1690:49 (#0),
            scope: scope[0],
        },
    },
]