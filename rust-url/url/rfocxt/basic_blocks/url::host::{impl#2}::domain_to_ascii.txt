[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:147:9: 147:68 (#0),
                    scope: scope[0],
                },
                kind: _2 = idna::domain_to_ascii_cow(move _3, const idna::AsciiDenyList::URL) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:147:9: 147:88 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<std::borrow::Cow<'_, str>, idna::Errors>::map_err::<parser::ParseError, fn(idna::Errors) -> parser::ParseError {<idna::Errors as core::convert::Into<parser::ParseError>>::into}>(move _2, <idna::Errors as core::convert::Into<parser::ParseError>>::into) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:148:6: 148:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:147:87: 147:88 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:146:5: 148:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<std::borrow::Cow<'{erased}, str>, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:146:42: 146:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/host.rs:146:32: 146:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:146:24: 146:30 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:146:24: 146:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:146:24: 146:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:147:9: 147:88 (#0),
                },
            ),
        ),
        ty: core::result::Result<std::borrow::Cow<'{erased}, str>, idna::Errors>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:147:9: 147:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:147:9: 147:88 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:147:35: 147:41 (#0),
            scope: scope[0],
        },
    },
]