[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:40: 1058:64 (#0),
                    scope: scope[1],
                },
                kind: _8 = parser::Parser::<'_>::file_host(move _9) -> [return: bb1, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:40: 1058:65 (#726),
                    scope: scope[1],
                },
                kind: _7 = <core::result::Result<(bool, std::string::String, parser::Input<'_>), parser::ParseError> as core::ops::Try>::branch(move _8) -> [return: bb2, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            PlaceMention(_7),
            _10 = discriminant(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:40: 1058:65 (#726),
                    scope: scope[1],
                },
                kind: switchInt(move _10) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:40: 1058:65 (#726),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:64: 1058:65 (#727),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_7 as Continue).0: (bool, std::string::String, parser::Input<'_>)),
            _6 = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:64: 1058:65 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb8, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = ((_7 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_13),
            _13 = _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:40: 1058:65 (#726),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<(bool, host::HostInternal, parser::Input<'_>), parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _13) -> [return: bb7, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:65: 1058:66 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb42, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_6),
            StorageLive(_4),
            _4 = move (_6.1: std::string::String),
            StorageLive(_5),
            _5 = move (_6.2: parser::Input<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:65: 1058:66 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb9, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:65: 1058:66 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb10, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1059:23: 1059:42 (#0),
                    scope: scope[2],
                },
                kind: _16 = std::string::String::is_empty(move _17) -> [return: bb11, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1059:23: 1059:42 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _16) -> [0: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            _3 = const false,
            _15 = host::HostInternal::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1059:20: 1074:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_4,
            _23 = &(*_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1063:31: 1063:40 (#0),
                    scope: scope[2],
                },
                kind: _22 = <std::string::String as core::ops::Deref>::deref(move _23) -> [return: bb14, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = &(*_22),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1063:19: 1063:41 (#0),
                    scope: scope[2],
                },
                kind: _20 = host::Host::parse(move _21) -> [return: bb15, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1063:19: 1063:42 (#729),
                    scope: scope[2],
                },
                kind: _19 = <core::result::Result<host::Host, parser::ParseError> as core::ops::Try>::branch(move _20) -> [return: bb16, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            PlaceMention(_19),
            _25 = discriminant(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1063:19: 1063:42 (#729),
                    scope: scope[2],
                },
                kind: switchInt(move _25) -> [0: bb19, 1: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1063:19: 1063:42 (#729),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1063:41: 1063:42 (#730),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = move ((_19 as Continue).0: host::Host),
            _18 = move _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1063:41: 1063:42 (#0),
                    scope: scope[2],
                },
                kind: drop(_29) -> [return: bb22, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = ((_19 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_28),
            _28 = _26,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1063:19: 1063:42 (#729),
                    scope: scope[9],
                },
                kind: _0 = <core::result::Result<(bool, host::HostInternal, parser::Input<'_>), parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _28) -> [return: bb21, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1074:9: 1074:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_19) -> [return: bb40, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            PlaceMention(_18),
            _31 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1063:13: 1063:42 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _31) -> [0: bb24, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            _38 = move _18,
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &mut ((*_1).0: std::string::String),
            _41 = &mut (*_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = [const ""],
            _45 = &_46,
            _44 = &(*_45),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &_38,
            _51 = &(*_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1069:54: 1069:56 (#109),
                    scope: scope[13],
                },
                kind: _50 = core::fmt::rt::Argument::<'_>::new_display::<host::Host>(move _51) -> [return: bb29, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1064:17: 1064:36 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            StorageLive(_32),
            _32 = &((_18 as Domain).0: std::string::String),
            _33 = &_32,
            _30 = &fake shallow _18,
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(*_33),
            StorageLive(_36),
            StorageLive(_37),
            _37 = const "localhost",
            _36 = &_37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1064:40: 1064:56 (#0),
                    scope: scope[2],
                },
                kind: _34 = <&std::string::String as core::cmp::PartialEq<&str>>::eq(move _35, move _36) -> [return: bb26, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1064:40: 1064:56 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _34) -> [0: bb28, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_34),
            FakeRead(ForMatchGuard, _30),
            _3 = const false,
            _15 = host::HostInternal::None,
            StorageDead(_32),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1067:17: 1067:18 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1064:40: 1064:56 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb23, imaginary: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            _49 = [move _50],
            StorageDead(_50),
            _48 = &_49,
            _47 = &(*_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#109),
                    scope: scope[13],
                },
                kind: _43 = core::fmt::Arguments::<'_>::new_v1::<1, 1>(move _44, move _47) -> [return: bb30, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:9: 632:55 (#108),
                    scope: scope[13],
                },
                kind: _40 = <std::string::String as core::fmt::Write>::write_fmt(move _41, move _43) -> [return: bb31, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1069:21: 1069:73 (#0),
                    scope: scope[13],
                },
                kind: _39 = core::result::Result::<(), core::fmt::Error>::unwrap(move _40) -> [return: bb32, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_52),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_42),
            StorageDead(_39),
            _3 = const true,
            StorageLive(_53),
            _53 = move _38,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1071:21: 1071:32 (#0),
                    scope: scope[13],
                },
                kind: _15 = <host::Host as core::convert::Into<host::HostInternal>>::into(move _53) -> [return: bb33, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1072:17: 1072:18 (#0),
                    scope: scope[2],
                },
                kind: drop(_38) -> [return: bb34, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1072:17: 1072:18 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1074:9: 1074:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb36, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1074:9: 1074:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_19) -> [return: bb37, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1059:20: 1074:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb38,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_54),
            StorageLive(_55),
            _55 = _3,
            StorageLive(_56),
            _56 = _15,
            StorageLive(_57),
            _57 = move _5,
            _54 = (move _55, move _56, move _57),
            StorageDead(_57),
            StorageDead(_56),
            StorageDead(_55),
            _0 = core::result::Result::<(bool, host::HostInternal, parser::Input<'_>), parser::ParseError>::Ok(move _54),
            StorageDead(_54),
            StorageDead(_15),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1076:5: 1076:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb39, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1076:6: 1076:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1076:5: 1076:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb41, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1076:6: 1076:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1076:6: 1076:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1071:31: 1071:32 (#0),
                    scope: scope[13],
                },
                kind: drop(_53) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1072:17: 1072:18 (#0),
                    scope: scope[2],
                },
                kind: drop(_38) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1074:9: 1074:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb48, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1074:9: 1074:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_19) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1063:41: 1063:42 (#729),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:65: 1058:66 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1076:5: 1076:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:65: 1058:66 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1058:64: 1058:65 (#726),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1053:5: 1076:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(bool, host::HostInternal, parser::Input<'{erased}>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1056:10: 1056:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1054:9: 1054:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1055:16: 1055:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1055:9: 1055:14 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1055:9: 1055:14 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1055:9: 1055:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: url/src/parser.rs:1057:13: 1057:21 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1057:13: 1057:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                url/src/parser.rs:1058:40: 1058:65 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1058:13: 1058:37 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:17: 1058:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                url/src/parser.rs:1058:40: 1058:65 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1058:13: 1058:37 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:27: 1058:36 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (bool, std::string::String, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:40: 1058:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, (bool, std::string::String, parser::Input<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:40: 1058:65 (#726),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(bool, std::string::String, parser::Input<'{erased}>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:40: 1058:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:58: 1058:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:64: 1058:65 (#727),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                url/src/parser.rs:1058:40: 1058:65 (#726),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1058:64: 1058:65 (#727),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:64: 1058:65 (#727),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:64: 1058:65 (#727),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:64: 1058:65 (#727),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                url/src/parser.rs:1058:40: 1058:65 (#726),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1058:40: 1058:65 (#726),
                    },
                ),
            ),
        ),
        ty: (bool, std::string::String, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1058:40: 1058:65 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1059:20: 1074:10 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1059:13: 1059:17 (#0),
                    },
                ),
            ),
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1059:13: 1059:17 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1059:23: 1059:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1059:23: 1059:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:19: 1063:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, host::Host<std::string::String>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:19: 1063:42 (#729),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<host::Host<std::string::String>, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:19: 1063:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:31: 1063:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:31: 1063:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:31: 1063:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:31: 1063:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:41: 1063:42 (#730),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                url/src/parser.rs:1063:19: 1063:42 (#729),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1063:41: 1063:42 (#730),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:41: 1063:42 (#730),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:41: 1063:42 (#730),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:41: 1063:42 (#730),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                url/src/parser.rs:1063:19: 1063:42 (#729),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1063:19: 1063:42 (#729),
                    },
                ),
            ),
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:19: 1063:42 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1063:19: 1063:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1064:17: 1064:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                url/src/parser.rs:1063:19: 1063:42 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1064:17: 1064:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1064:30: 1064:35 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1064:30: 1064:35 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1064:40: 1064:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1064:40: 1064:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1064:45: 1064:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1063:13: 1073:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1064:45: 1064:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                url/src/parser.rs:1063:19: 1063:42 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1068:17: 1068:21 (#0),
                    },
                ),
            ),
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1068:17: 1068:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1069:21: 1069:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:9: 632:55 (#108),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1069:28: 1069:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1069:28: 1069:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1069:53: 1069:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1069:53: 1069:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1069:53: 1069:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1069:54: 1069:56 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1069:59: 1069:63 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1069:59: 1069:63 (#109),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1071:21: 1071:32 (#0),
                },
            ),
        ),
        ty: host::Host<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1071:21: 1071:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (bool, host::HostInternal, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1075:12: 1075:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1075:9: 1075:40 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1075:13: 1075:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1075:9: 1075:40 (#0),
                },
            ),
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1075:23: 1075:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1075:9: 1075:40 (#0),
                },
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1075:29: 1075:38 (#0),
            scope: scope[0],
        },
    },
]