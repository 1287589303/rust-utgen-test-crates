[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1154:26: 1154:50 (#0),
                    scope: scope[0],
                },
                kind: _5 = std::string::String::len(move _6) -> [return: bb1, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1155:36: 1155:55 (#0),
                    scope: scope[1],
                },
                kind: _9 = parser::Input::<'_>::split_first(move _10) -> [return: bb2, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            StorageLive(_7),
            _7 = (_9.0: core::option::Option<char>),
            StorageLive(_8),
            _8 = move (_9.1: parser::Input<'_>),
            StorageDead(_9),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1157:12: 1157:36 (#0),
                    scope: scope[2],
                },
                kind: _12 = parser::SchemeType::is_special(move _13) -> [return: bb3, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1157:12: 1157:36 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _12) -> [0: bb25, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_7,
            StorageLive(_18),
            StorageLive(_19),
            _19 = core::option::Option::<char>::Some(const '\\'),
            _18 = &_19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1158:16: 1158:37 (#0),
                    scope: scope[2],
                },
                kind: _16 = <core::option::Option<char> as core::cmp::PartialEq>::eq(move _17, move _18) -> [return: bb5, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1158:16: 1158:37 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _16) -> [0: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_1),
            StorageLive(_22),
            _22 = parser::SyntaxViolation::Backslash,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1160:17: 1160:63 (#0),
                    scope: scope[2],
                },
                kind: _20 = parser::Parser::<'_>::log_violation(move _21, move _22) -> [return: bb7, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1158:13: 1161:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1158:13: 1161:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1163:17: 1163:50 (#0),
                    scope: scope[2],
                },
                kind: _26 = <std::string::String as core::ops::Deref>::deref(move _27) -> [return: bb10, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = &(*_26),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1163:17: 1163:50 (#0),
                    scope: scope[2],
                },
                kind: _24 = core::str::<impl str>::ends_with::<'_, char>(move _25, const '/') -> [return: bb11, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1163:17: 1163:50 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _24) -> [0: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_26),
            _23 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1163:13: 1169:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_26),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut ((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1164:17: 1164:45 (#0),
                    scope: scope[2],
                },
                kind: _28 = std::string::String::push(move _29, const '/') -> [return: bb14, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &_7,
            StorageLive(_32),
            StorageLive(_33),
            _33 = core::option::Option::<char>::Some(const '/'),
            _32 = &_33,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1166:20: 1166:40 (#0),
                    scope: scope[2],
                },
                kind: _30 = <core::option::Option<char> as core::cmp::PartialEq>::eq(move _31, move _32) -> [return: bb15, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1166:20: 1166:40 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _30) -> [0: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1166:66: 1168:18 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &_7,
            StorageLive(_36),
            StorageLive(_37),
            _37 = core::option::Option::<char>::Some(const '\\'),
            _36 = &_37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1166:44: 1166:65 (#0),
                    scope: scope[2],
                },
                kind: _34 = <core::option::Option<char> as core::cmp::PartialEq>::eq(move _35, move _36) -> [return: bb18, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1166:44: 1166:65 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _34) -> [0: bb22, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1166:66: 1168:18 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_39),
            _39 = &mut (*_1),
            StorageLive(_40),
            _40 = _2,
            StorageLive(_41),
            _41 = &mut (*_3),
            StorageLive(_42),
            _42 = _5,
            StorageLive(_43),
            _43 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1167:28: 1167:89 (#0),
                    scope: scope[2],
                },
                kind: _0 = parser::Parser::<'_>::parse_path(move _39, move _40, move _41, move _42, move _43) -> [return: bb21, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_34),
            StorageDead(_30),
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
            _23 = const (),
            StorageDead(_34),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1163:13: 1169:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageLive(_44),
            _44 = &mut (*_1),
            StorageLive(_45),
            _45 = _2,
            StorageLive(_46),
            _46 = &mut (*_3),
            StorageLive(_47),
            _47 = _5,
            StorageLive(_48),
            _48 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1170:20: 1170:77 (#0),
                    scope: scope[2],
                },
                kind: _0 = parser::Parser::<'_>::parse_path(move _44, move _45, move _46, move _47, move _48) -> [return: bb24, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1170:13: 1170:77 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &_7,
            StorageLive(_51),
            StorageLive(_52),
            _52 = core::option::Option::<char>::Some(const '?'),
            _51 = &_52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1171:19: 1171:39 (#0),
                    scope: scope[2],
                },
                kind: _49 = <core::option::Option<char> as core::cmp::PartialEq>::eq(move _50, move _51) -> [return: bb26, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1171:19: 1171:39 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _49) -> [0: bb28, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1171:64: 1178:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_50),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &_7,
            StorageLive(_55),
            StorageLive(_56),
            _56 = core::option::Option::<char>::Some(const '#'),
            _55 = &_56,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1171:43: 1171:63 (#0),
                    scope: scope[2],
                },
                kind: _53 = <core::option::Option<char> as core::cmp::PartialEq>::eq(move _54, move _55) -> [return: bb29, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1171:43: 1171:63 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _53) -> [0: bb32, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1171:64: 1178:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move _4,
            StorageDead(_53),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_54),
            _11 = const (),
            StorageDead(_53),
            StorageDead(_49),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1180:12: 1180:29 (#0),
                    scope: scope[2],
                },
                kind: _59 = core::option::Option::<char>::is_some(move _60) -> [return: bb33, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1180:12: 1180:29 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _59) -> [0: bb39, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = &_7,
            StorageLive(_63),
            StorageLive(_64),
            _64 = core::option::Option::<char>::Some(const '/'),
            _63 = &_64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1180:33: 1180:53 (#0),
                    scope: scope[2],
                },
                kind: _61 = <core::option::Option<char> as core::cmp::PartialEq>::ne(move _62, move _63) -> [return: bb35, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1180:33: 1180:53 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _61) -> [0: bb38, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_63),
            StorageDead(_62),
            StorageLive(_65),
            StorageLive(_66),
            _66 = &mut ((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1181:13: 1181:41 (#0),
                    scope: scope[2],
                },
                kind: _65 = std::string::String::push(move _66, const '/') -> [return: bb37, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageDead(_65),
            _58 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1180:9: 1182:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_63),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _58 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1180:9: 1182:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb41,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_59),
            StorageDead(_58),
            StorageLive(_67),
            _67 = &mut (*_1),
            StorageLive(_68),
            _68 = _2,
            StorageLive(_69),
            _69 = &mut (*_3),
            StorageLive(_70),
            _70 = _5,
            StorageLive(_71),
            _71 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1184:9: 1184:66 (#0),
                    scope: scope[2],
                },
                kind: _0 = parser::Parser::<'_>::parse_path(move _67, move _68, move _69, move _70, move _71) -> [return: bb42, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            StorageDead(_70),
            StorageDead(_69),
            StorageDead(_68),
            StorageDead(_67),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1185:6: 1185:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1185:6: 1185:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1185:6: 1185:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1148:5: 1185:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1153:10: 1153:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1149:9: 1149:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1150:22: 1150:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1150:9: 1150:20 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1150:9: 1150:20 (#0),
                    },
                ),
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1150:9: 1150:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1151:19: 1151:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1151:9: 1151:17 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1151:9: 1151:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1151:9: 1151:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1152:16: 1152:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1152:9: 1152:14 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1152:9: 1152:14 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1152:9: 1152:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1154:26: 1154:50 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1154:13: 1154:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1154:13: 1154:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1154:26: 1154:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                url/src/parser.rs:1155:36: 1155:55 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1155:13: 1155:33 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1155:14: 1155:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                url/src/parser.rs:1155:36: 1155:55 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1155:13: 1155:33 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1155:23: 1155:32 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<char>, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1155:36: 1155:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1155:36: 1155:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1157:9: 1178:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1157:12: 1157:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1157:12: 1157:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1157:37: 1171:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1158:13: 1161:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1158:16: 1158:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1158:16: 1158:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1158:27: 1158:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1158:27: 1158:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1160:17: 1160:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1160:17: 1160:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SyntaxViolation,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1160:36: 1160:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1163:13: 1169:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1163:17: 1163:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1163:17: 1163:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1163:17: 1163:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1163:17: 1163:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1164:17: 1164:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1164:17: 1164:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1166:17: 1168:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1166:20: 1166:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1166:17: 1168:18 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1166:20: 1166:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1166:17: 1168:18 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1166:31: 1166:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1166:17: 1168:18 (#0),
                },
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1166:31: 1166:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1166:17: 1168:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1166:44: 1166:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1166:17: 1168:18 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1166:44: 1166:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1166:17: 1168:18 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1166:55: 1166:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1166:17: 1168:18 (#0),
                },
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1166:55: 1166:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1166:17: 1168:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1166:66: 1168:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1167:28: 1167:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1167:44: 1167:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1167:57: 1167:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1167:67: 1167:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1167:79: 1167:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1170:20: 1170:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1170:36: 1170:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1170:49: 1170:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1170:59: 1170:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1170:71: 1170:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1171:19: 1171:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1171:19: 1171:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1171:30: 1171:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1171:30: 1171:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1171:43: 1171:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1171:43: 1171:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1171:54: 1171:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1171:54: 1171:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1171:64: 1178:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1180:9: 1182:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1180:12: 1180:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1180:12: 1180:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1180:33: 1180:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1180:33: 1180:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1180:44: 1180:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1180:44: 1180:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1181:13: 1181:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1181:13: 1181:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1184:9: 1184:66 (#0),
                },
            ),
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1184:9: 1184:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1184:9: 1184:66 (#0),
                },
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1184:25: 1184:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1184:9: 1184:66 (#0),
                },
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1184:38: 1184:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1184:9: 1184:66 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1184:48: 1184:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1184:9: 1184:66 (#0),
                },
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1184:60: 1184:65 (#0),
            scope: scope[0],
        },
    },
]