[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut (*((*_1).0: &mut Url)),
            StorageLive(_3),
            _3 = ((*_1).3: u32),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).2: std::string::String),
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:73:63: 73:79 (#0),
                    scope: scope[0],
                },
                kind: _5 = <std::string::String as core::ops::Deref>::deref(move _6) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &(*_5),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:72:9: 73:80 (#0),
                    scope: scope[0],
                },
                kind: _0 = Url::restore_after_path(move _2, move _3, move _4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_2),
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:74:6: 74:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/path_segments.rs:71:5: 74:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:71:23: 71:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut path_segments::PathSegmentsMut<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:71:13: 71:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/path_segments.rs:72:9: 73:80 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:72:9: 72:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/path_segments.rs:72:9: 73:80 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:73:33: 73:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/path_segments.rs:72:9: 73:80 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:73:63: 73:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/path_segments.rs:72:9: 73:80 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:73:63: 73:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/path_segments.rs:72:9: 73:80 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:73:63: 73:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/path_segments.rs:72:9: 73:80 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/path_segments.rs:73:63: 73:79 (#0),
            scope: scope[0],
        },
    },
]