[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = const 0_u32,
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:272:29: 272:41 (#0),
                    scope: scope[1],
                },
                kind: _4 = <parser::Input<'_> as core::clone::Clone>::clone(move _5) -> [return: bb1, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:273:9: 281:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:273:9: 281:10 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:274:29: 274:46 (#0),
                    scope: scope[2],
                },
                kind: _8 = <parser::Input<'_> as core::clone::Clone>::clone(move _9) -> [return: bb4, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:275:25: 275:37 (#0),
                    scope: scope[3],
                },
                kind: _11 = <parser::Input<'_> as core::iter::Iterator>::next(move _12) -> [return: bb5, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _14 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 457:9 (#73),
                    scope: scope[3],
                },
                kind: switchInt(move _14) -> [1: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:459:18: 459:23 (#73),
                    scope: scope[3],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:275:39: 275:46 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &((_11 as Some).0: char),
            _13 = &fake shallow _11,
            StorageLive(_17),
            StorageLive(_18),
            _18 = &_2,
            StorageLive(_19),
            StorageLive(_20),
            _20 = (*_16),
            _19 = (move _20,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:275:50: 275:54 (#0),
                    scope: scope[3],
                },
                kind: _17 = <F as core::ops::Fn<(char,)>>::call(move _18, move _19) -> [return: bb9, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:275:50: 275:54 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _17) -> [0: bb11, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            FakeRead(ForMatchGuard, _13),
            FakeRead(ForGuardBinding, _16),
            StorageLive(_15),
            _15 = ((_11 as Some).0: char),
            _10 = const true,
            StorageDead(_15),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:458:42: 458:43 (#73),
                    scope: scope[3],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:275:50: 275:54 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#73),
                    scope: scope[3],
                },
                kind: switchInt(move _10) -> [0: bb15, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_21),
            _21 = move _8,
            _4 = move _21,
            StorageDead(_21),
            _22 = AddWithOverflow(_3, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:277:17: 277:27 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_u32) -> [success: bb14, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_22.0: u32),
            _7 = const (),
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:273:9: 281:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_24),
            _24 = _3,
            StorageLive(_25),
            _25 = move _4,
            _0 = (move _24, move _25),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:282:5: 282:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:282:6: 282:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:282:5: 282:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:270:5: 282:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:270:60: 270:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:270:44: 270:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:270:54: 270:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:270:51: 270:52 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:270:51: 270:52 (#0),
                    },
                ),
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:270:51: 270:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:271:25: 271:26 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:271:13: 271:22 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:271:13: 271:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:272:29: 272:41 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:272:13: 272:26 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:272:13: 272:26 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:272:29: 272:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:273:9: 281:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:273:9: 281:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:270:5: 282:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:274:29: 274:46 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:274:17: 274:26 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:274:17: 274:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:274:29: 274:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:275:13: 280:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#73),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:275:13: 280:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:275:25: 275:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:275:13: 280:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:275:25: 275:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:275:25: 275:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:275:39: 275:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                url/src/parser.rs:275:25: 275:37 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:275:39: 275:46 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:275:44: 275:45 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                RefForGuard,
            ),
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:275:44: 275:45 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:275:13: 280:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:275:50: 275:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:275:13: 280:14 (#0),
                },
            ),
        ),
        ty: &'{erased} F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:275:50: 275:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:275:13: 280:14 (#0),
                },
            ),
        ),
        ty: (char,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:275:50: 275:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:275:13: 280:14 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:275:52: 275:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:276:29: 276:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:277:17: 277:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:275:13: 280:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:278:20: 280:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:279:25: 279:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:279:32: 279:41 (#0),
            scope: scope[0],
        },
    },
]