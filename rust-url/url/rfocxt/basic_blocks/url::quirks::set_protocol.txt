[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:108:29: 108:51 (#0),
                    scope: scope[1],
                },
                kind: _4 = core::str::<impl str>::find::<'_, char>(move _5, const ':') -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            _6 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:108:12: 108:26 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [1: bb2, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:108:12: 108:26 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = ((_4 as Some).0: usize),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_2),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _7,
            _12 = core::ops::RangeTo::<usize> { end: move _13 },
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:109:37: 109:49 (#0),
                    scope: scope[1],
                },
                kind: _10 = <str as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _11, move _12) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            _9 = &(*_10),
            _8 = &(*_9),
            _2 = move _8,
            StorageDead(_8),
            StorageDead(_10),
            StorageDead(_9),
            _3 = const (),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:108:5: 110:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:108:5: 110:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_14),
            _14 = &mut (*_1),
            StorageLive(_15),
            _15 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:111:5: 111:33 (#0),
                    scope: scope[0],
                },
                kind: _0 = Url::set_scheme(move _14, move _15) -> [return: bb7, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:112:2: 112:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/quirks.rs:105:1: 112:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:105:63: 105:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/quirks.rs:105:26: 105:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/quirks.rs:105:21: 105:24 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:105:21: 105:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:105:21: 105:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            url/src/quirks.rs:105:54: 105:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/quirks.rs:105:36: 105:52 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:105:36: 105:52 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:105:36: 105:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:108:5: 110:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:108:29: 108:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:108:29: 108:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:108:12: 108:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                url/src/quirks.rs:108:29: 108:51 (#0),
                            ),
                        ),
                        pat_span: url/src/quirks.rs:108:12: 108:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:108:17: 108:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:109:24: 109:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:109:24: 109:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:109:37: 109:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:109:25: 109:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:109:38: 109:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:109:40: 109:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:111:5: 111:33 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:111:5: 111:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/quirks.rs:111:5: 111:33 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/quirks.rs:111:20: 111:32 (#0),
            scope: scope[0],
        },
    },
]