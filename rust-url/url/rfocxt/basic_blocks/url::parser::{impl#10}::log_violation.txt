[
    BasicBlockData {
        statements: [
            PlaceMention(((*_1).3: core::option::Option<&dyn core::ops::Fn(parser::SyntaxViolation)>)),
            _3 = discriminant(((*_1).3: core::option::Option<&dyn core::ops::Fn(parser::SyntaxViolation)>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:351:16: 351:23 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _3) -> [1: bb1, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:351:16: 351:23 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb2, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = ((((*_1).3: core::option::Option<&dyn core::ops::Fn(parser::SyntaxViolation)>) as Some).0: &dyn core::ops::Fn(parser::SyntaxViolation)),
            StorageLive(_5),
            _5 = &(*_4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _2,
            _6 = (move _7,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:352:13: 352:17 (#0),
                    scope: scope[1],
                },
                kind: _0 = <dyn core::ops::Fn(parser::SyntaxViolation) as core::ops::Fn<(parser::SyntaxViolation,)>>::call(move _5, move _6) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:351:9: 353:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:351:9: 353:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:354:6: 354:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:350:5: 354:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:350:48: 350:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:350:22: 350:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:350:32: 350:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:350:29: 350:30 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:350:29: 350:30 (#0),
                    },
                ),
            ),
        ),
        ty: parser::SyntaxViolation,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:350:29: 350:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:351:16: 351:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).3: core::option::Option<&dyn core::ops::Fn(parser::SyntaxViolation)>),
                                ),
                                url/src/parser.rs:351:26: 351:43 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:351:16: 351:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(parser::SyntaxViolation,)>), bound_vars: [] }, Binder { value: Projection(Output = ()), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:351:21: 351:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:352:13: 352:17 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(parser::SyntaxViolation,)>), bound_vars: [] }, Binder { value: Projection(Output = ()), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:352:13: 352:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:352:13: 352:17 (#0),
                },
            ),
        ),
        ty: (parser::SyntaxViolation,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:352:13: 352:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:352:13: 352:17 (#0),
                },
            ),
        ),
        ty: parser::SyntaxViolation,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:352:15: 352:16 (#0),
            scope: scope[0],
        },
    },
]