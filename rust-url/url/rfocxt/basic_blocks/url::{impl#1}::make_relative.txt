[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:511:12: 511:35 (#0),
                    scope: scope[0],
                },
                kind: _4 = Url::cannot_be_a_base(move _5) -> [return: bb1, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:511:12: 511:35 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _0 = core::option::Option::<std::string::String>::None,
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:12: 516:25 (#0),
                    scope: scope[0],
                },
                kind: _10 = Url::scheme(move _11) -> [return: bb4, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &_10,
            StorageDead(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:29: 516:41 (#0),
                    scope: scope[0],
                },
                kind: _13 = Url::scheme(move _14) -> [return: bb5, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = &_13,
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:12: 516:41 (#0),
                    scope: scope[0],
                },
                kind: _8 = <&str as core::cmp::PartialEq>::ne(move _9, move _12) -> [return: bb6, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:12: 516:41 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:100: 518:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:45: 516:56 (#0),
                    scope: scope[0],
                },
                kind: _17 = Url::host(move _18) -> [return: bb9, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = &_17,
            StorageDead(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:60: 516:70 (#0),
                    scope: scope[0],
                },
                kind: _20 = Url::host(move _21) -> [return: bb10, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = &_20,
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:45: 516:70 (#0),
                    scope: scope[0],
                },
                kind: _15 = <core::option::Option<host::Host<&str>> as core::cmp::PartialEq>::ne(move _16, move _19) -> [return: bb11, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:45: 516:70 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _15) -> [0: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:100: 518:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:74: 516:85 (#0),
                    scope: scope[0],
                },
                kind: _24 = Url::port(move _25) -> [return: bb14, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = &_24,
            StorageDead(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:89: 516:99 (#0),
                    scope: scope[0],
                },
                kind: _27 = Url::port(move _28) -> [return: bb15, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = &_27,
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:74: 516:99 (#0),
                    scope: scope[0],
                },
                kind: _22 = <core::option::Option<u16> as core::cmp::PartialEq>::ne(move _23, move _26) -> [return: bb16, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:74: 516:99 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _22) -> [0: bb19, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:516:100: 518:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<std::string::String>::None,
            StorageDead(_22),
            StorageDead(_15),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
            _7 = const (),
            StorageDead(_22),
            StorageDead(_15),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:523:28: 523:41 (#0),
                    scope: scope[0],
                },
                kind: _30 = std::string::String::new() -> [return: bb20, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _30),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:536:64: 536:75 (#0),
                    scope: scope[1],
                },
                kind: _35 = Url::path(move _36) -> [return: bb21, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = &(*_35),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:536:42: 536:76 (#0),
                    scope: scope[1],
                },
                kind: _33 = Url::make_relative::extract_path_filename(move _34) -> [return: bb22, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            PlaceMention(_33),
            StorageLive(_31),
            _31 = (_33.0: &str),
            StorageLive(_32),
            _32 = (_33.1: &str),
            StorageDead(_35),
            StorageDead(_33),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:537:62: 537:72 (#0),
                    scope: scope[2],
                },
                kind: _41 = Url::path(move _42) -> [return: bb23, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _40 = &(*_41),
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:537:40: 537:73 (#0),
                    scope: scope[2],
                },
                kind: _39 = Url::make_relative::extract_path_filename(move _40) -> [return: bb24, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            PlaceMention(_39),
            StorageLive(_37),
            _37 = (_39.0: &str),
            StorageLive(_38),
            _38 = (_39.1: &str),
            StorageDead(_41),
            StorageDead(_39),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:539:29: 539:49 (#0),
                    scope: scope[3],
                },
                kind: _44 = core::str::<impl str>::split::<'_, char>(move _45, const '/') -> [return: bb25, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:539:29: 539:60 (#0),
                    scope: scope[3],
                },
                kind: _43 = <core::str::Split<'_, char> as core::iter::Iterator>::peekable(move _44) -> [return: bb26, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            FakeRead(ForLet(None), _43),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &(*_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:540:28: 540:47 (#0),
                    scope: scope[4],
                },
                kind: _47 = core::str::<impl str>::split::<'_, char>(move _48, const '/') -> [return: bb27, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:540:28: 540:58 (#0),
                    scope: scope[4],
                },
                kind: _46 = <core::str::Split<'_, char> as core::iter::Iterator>::peekable(move _47) -> [return: bb28, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            FakeRead(ForLet(None), _46),
            StorageLive(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:543:9: 546:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:543:9: 546:10 (#0),
                    scope: scope[5],
                },
                kind: falseUnwind -> [real: bb30, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = &mut _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:543:15: 543:31 (#0),
                    scope: scope[5],
                },
                kind: _53 = core::iter::Peekable::<core::str::Split<'_, char>>::peek(move _54) -> [return: bb31, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = &_53,
            StorageDead(_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:543:15: 543:41 (#0),
                    scope: scope[5],
                },
                kind: _51 = core::option::Option::<&&str>::is_some(move _52) -> [return: bb32, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:543:15: 543:41 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _51) -> [0: bb41, otherwise: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_52),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            _58 = &mut _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:543:45: 543:61 (#0),
                    scope: scope[5],
                },
                kind: _57 = core::iter::Peekable::<core::str::Split<'_, char>>::peek(move _58) -> [return: bb34, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = &_57,
            StorageDead(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            _61 = &mut _46,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:543:65: 543:80 (#0),
                    scope: scope[5],
                },
                kind: _60 = core::iter::Peekable::<core::str::Split<'_, char>>::peek(move _61) -> [return: bb35, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _59 = &_60,
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:543:45: 543:80 (#0),
                    scope: scope[5],
                },
                kind: _55 = <core::option::Option<&&str> as core::cmp::PartialEq>::eq(move _56, move _59) -> [return: bb36, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:543:45: 543:80 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _55) -> [0: bb40, otherwise: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &mut _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:544:13: 544:29 (#0),
                    scope: scope[5],
                },
                kind: _62 = <core::iter::Peekable<core::str::Split<'_, char>> as core::iter::Iterator>::next(move _63) -> [return: bb38, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            StorageDead(_62),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &mut _46,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:545:13: 545:28 (#0),
                    scope: scope[5],
                },
                kind: _64 = <core::iter::Peekable<core::str::Split<'_, char>> as core::iter::Iterator>::next(move _65) -> [return: bb39, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_64),
            _50 = const (),
            StorageDead(_55),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:543:9: 546:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_67),
            _49 = const (),
            StorageDead(_67),
            StorageDead(_55),
            StorageDead(_51),
            StorageDead(_49),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = move _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:549:34: 549:43 (#906),
                    scope: scope[5],
                },
                kind: _70 = <core::iter::Peekable<core::str::Split<'_, char>> as core::iter::IntoIterator>::into_iter(move _71) -> [return: bb43, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
            PlaceMention(_70),
            StorageLive(_72),
            _72 = move _70,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:549:9: 560:10 (#905),
                    scope: scope[6],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:549:9: 560:10 (#905),
                    scope: scope[6],
                },
                kind: falseUnwind -> [real: bb45, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &mut _72,
            _75 = &mut (*_76),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:549:34: 549:43 (#906),
                    scope: scope[6],
                },
                kind: _74 = <core::iter::Peekable<core::str::Split<'_, char>> as core::iter::Iterator>::next(move _75) -> [return: bb46, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            PlaceMention(_74),
            _77 = discriminant(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:549:34: 549:43 (#906),
                    scope: scope[6],
                },
                kind: switchInt(move _77) -> [0: bb48, 1: bb49, otherwise: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:549:34: 549:43 (#906),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:549:9: 560:10 (#905),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb50, imaginary: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_79),
            _79 = ((_74 as Some).0: &str),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            _82 = &(*_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:551:16: 551:44 (#0),
                    scope: scope[7],
                },
                kind: _81 = core::str::<impl str>::is_empty(move _82) -> [return: bb51, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _69 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:549:9: 560:10 (#905),
                    scope: scope[6],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:551:16: 551:44 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _81) -> [0: bb53, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            _69 = const (),
            StorageDead(_81),
            StorageDead(_80),
            StorageDead(_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_82),
            _80 = const (),
            StorageDead(_81),
            StorageDead(_80),
            StorageLive(_84),
            StorageLive(_85),
            StorageLive(_86),
            _86 = &_30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:555:17: 555:36 (#0),
                    scope: scope[7],
                },
                kind: _85 = std::string::String::is_empty(move _86) -> [return: bb54, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:555:17: 555:36 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _85) -> [0: bb56, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            _84 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:555:13: 557:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &mut _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:556:17: 556:35 (#0),
                    scope: scope[7],
                },
                kind: _87 = std::string::String::push(move _88, const '/') -> [return: bb57, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            _84 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:555:13: 557:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb58,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_85),
            StorageDead(_84),
            StorageLive(_89),
            StorageLive(_90),
            _90 = &mut _30,
            StorageLive(_91),
            StorageLive(_92),
            _92 = const "..",
            _91 = &(*_92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:559:13: 559:36 (#0),
                    scope: scope[7],
                },
                kind: _89 = std::string::String::push_str(move _90, move _91) -> [return: bb59, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_90),
            StorageDead(_92),
            StorageDead(_89),
            _73 = const (),
            StorageDead(_79),
            StorageDead(_76),
            StorageDead(_74),
            StorageDead(_73),
            _50 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:549:9: 560:10 (#905),
                    scope: scope[6],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            StorageDead(_74),
            StorageDead(_73),
            StorageDead(_72),
            StorageDead(_70),
            StorageDead(_69),
            StorageLive(_93),
            StorageLive(_94),
            StorageLive(_95),
            _95 = move _46,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:563:33: 563:41 (#911),
                    scope: scope[5],
                },
                kind: _94 = <core::iter::Peekable<core::str::Split<'_, char>> as core::iter::IntoIterator>::into_iter(move _95) -> [return: bb61, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            PlaceMention(_94),
            StorageLive(_96),
            _96 = move _94,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:563:9: 569:10 (#910),
                    scope: scope[8],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:563:9: 569:10 (#910),
                    scope: scope[8],
                },
                kind: falseUnwind -> [real: bb63, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_97),
            StorageLive(_98),
            StorageLive(_99),
            StorageLive(_100),
            _100 = &mut _96,
            _99 = &mut (*_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:563:33: 563:41 (#911),
                    scope: scope[8],
                },
                kind: _98 = <core::iter::Peekable<core::str::Split<'_, char>> as core::iter::Iterator>::next(move _99) -> [return: bb64, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            PlaceMention(_98),
            _101 = discriminant(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:563:33: 563:41 (#911),
                    scope: scope[8],
                },
                kind: switchInt(move _101) -> [0: bb66, 1: bb67, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:563:33: 563:41 (#911),
                    scope: scope[8],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:563:9: 569:10 (#910),
                    scope: scope[8],
                },
                kind: falseEdge -> [real: bb68, imaginary: bb67],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_103),
            _103 = ((_98 as Some).0: &str),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = &_30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:564:17: 564:36 (#0),
                    scope: scope[9],
                },
                kind: _105 = std::string::String::is_empty(move _106) -> [return: bb69, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _93 = const (),
            StorageDead(_100),
            StorageDead(_98),
            StorageDead(_97),
            StorageDead(_96),
            StorageDead(_94),
            StorageDead(_93),
            StorageLive(_112),
            StorageLive(_113),
            StorageLive(_114),
            _114 = &_30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:572:13: 572:32 (#0),
                    scope: scope[5],
                },
                kind: _113 = std::string::String::is_empty(move _114) -> [return: bb75, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:564:17: 564:36 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _105) -> [0: bb71, otherwise: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            _104 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:564:13: 566:14 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_106),
            StorageLive(_107),
            StorageLive(_108),
            _108 = &mut _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:565:17: 565:35 (#0),
                    scope: scope[9],
                },
                kind: _107 = std::string::String::push(move _108, const '/') -> [return: bb72, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            StorageDead(_107),
            _104 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:564:13: 566:14 (#0),
                    scope: scope[9],
                },
                kind: goto -> bb73,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            StorageDead(_104),
            StorageLive(_109),
            StorageLive(_110),
            _110 = &mut _30,
            StorageLive(_111),
            _111 = &(*_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:568:13: 568:48 (#0),
                    scope: scope[9],
                },
                kind: _109 = std::string::String::push_str(move _110, move _111) -> [return: bb74, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_111),
            StorageDead(_110),
            StorageDead(_109),
            _97 = const (),
            StorageDead(_103),
            StorageDead(_100),
            StorageDead(_98),
            StorageDead(_97),
            _50 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:563:9: 569:10 (#910),
                    scope: scope[8],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:572:13: 572:32 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _113) -> [0: bb77, otherwise: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
            StorageLive(_115),
            StorageLive(_116),
            _116 = &_32,
            StorageLive(_117),
            _117 = &_38,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:572:36: 572:65 (#0),
                    scope: scope[5],
                },
                kind: _115 = <&str as core::cmp::PartialEq>::ne(move _116, move _117) -> [return: bb78, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:572:66: 585:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:572:36: 572:65 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _115) -> [0: bb92, otherwise: bb79],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
            StorageDead(_116),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:572:66: 585:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb80,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_118),
            StorageLive(_119),
            _119 = &(*_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:577:16: 577:39 (#0),
                    scope: scope[5],
                },
                kind: _118 = core::str::<impl str>::is_empty(move _119) -> [return: bb81, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:577:16: 577:39 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _118) -> [0: bb84, otherwise: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageLive(_120),
            StorageLive(_121),
            _121 = &mut _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:578:17: 578:35 (#0),
                    scope: scope[5],
                },
                kind: _120 = std::string::String::push(move _121, const '/') -> [return: bb83, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_121),
            StorageDead(_120),
            _112 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:577:13: 584:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb91,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_119),
            StorageLive(_122),
            StorageLive(_123),
            StorageLive(_124),
            _124 = &_30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:580:21: 580:40 (#0),
                    scope: scope[5],
                },
                kind: _123 = std::string::String::is_empty(move _124) -> [return: bb85, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:580:21: 580:40 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _123) -> [0: bb87, otherwise: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            _122 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:580:17: 582:18 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb89,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageLive(_125),
            StorageLive(_126),
            _126 = &mut _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:581:21: 581:39 (#0),
                    scope: scope[5],
                },
                kind: _125 = std::string::String::push(move _126, const '/') -> [return: bb88, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
            StorageDead(_125),
            _122 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:580:17: 582:18 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb89,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_123),
            StorageDead(_122),
            StorageLive(_127),
            StorageLive(_128),
            _128 = &mut _30,
            StorageLive(_129),
            _129 = &(*_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:583:17: 583:48 (#0),
                    scope: scope[5],
                },
                kind: _127 = std::string::String::push_str(move _128, move _129) -> [return: bb90, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
            StorageDead(_128),
            StorageDead(_127),
            _112 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:577:13: 584:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb91,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_118),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:572:9: 585:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_117),
            StorageDead(_116),
            _112 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:572:9: 585:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            StorageDead(_113),
            StorageDead(_112),
            StorageLive(_130),
            StorageLive(_131),
            StorageLive(_132),
            _132 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:588:30: 588:41 (#0),
                    scope: scope[10],
                },
                kind: _131 = Url::query(move _132) -> [return: bb94, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
            PlaceMention(_131),
            _133 = discriminant(_131),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:588:16: 588:27 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _133) -> [1: bb95, otherwise: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:588:16: 588:27 (#0),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb96, imaginary: bb99],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_134),
            _134 = ((_131 as Some).0: &str),
            StorageLive(_135),
            StorageLive(_136),
            _136 = &mut _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:589:13: 589:31 (#0),
                    scope: scope[10],
                },
                kind: _135 = std::string::String::push(move _136, const '?') -> [return: bb97, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_135),
            StorageLive(_137),
            StorageLive(_138),
            _138 = &mut _30,
            StorageLive(_139),
            _139 = &(*_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:590:13: 590:37 (#0),
                    scope: scope[10],
                },
                kind: _137 = std::string::String::push_str(move _138, move _139) -> [return: bb98, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_139),
            StorageDead(_138),
            StorageDead(_137),
            _130 = const (),
            StorageDead(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:588:9: 591:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb100,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _130 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:588:9: 591:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb100,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_131),
            StorageDead(_130),
            StorageLive(_140),
            StorageLive(_141),
            StorageLive(_142),
            _142 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:593:33: 593:47 (#0),
                    scope: scope[11],
                },
                kind: _141 = Url::fragment(move _142) -> [return: bb101, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            PlaceMention(_141),
            _143 = discriminant(_141),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:593:16: 593:30 (#0),
                    scope: scope[11],
                },
                kind: switchInt(move _143) -> [1: bb102, otherwise: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:593:16: 593:30 (#0),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb103, imaginary: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_144),
            _144 = ((_141 as Some).0: &str),
            StorageLive(_145),
            StorageLive(_146),
            _146 = &mut _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:594:13: 594:31 (#0),
                    scope: scope[11],
                },
                kind: _145 = std::string::String::push(move _146, const '#') -> [return: bb104, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_146),
            StorageDead(_145),
            StorageLive(_147),
            StorageLive(_148),
            _148 = &mut _30,
            StorageLive(_149),
            _149 = &(*_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:595:13: 595:40 (#0),
                    scope: scope[11],
                },
                kind: _147 = std::string::String::push_str(move _148, move _149) -> [return: bb105, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_149),
            StorageDead(_148),
            StorageDead(_147),
            _140 = const (),
            StorageDead(_144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:593:9: 596:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _140 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:593:9: 596:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
            StorageDead(_140),
            StorageLive(_150),
            _150 = move _30,
            _0 = core::option::Option::<std::string::String>::Some(move _150),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:598:22: 598:23 (#0),
                    scope: scope[5],
                },
                kind: drop(_150) -> [return: bb108, unwind: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_150),
            StorageDead(_46),
            StorageDead(_43),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:599:5: 599:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_30) -> [return: bb109, unwind: bb112],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:599:6: 599:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb110,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:599:6: 599:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:599:5: 599:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_30) -> [return: bb112, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:510:5: 599:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:510:47: 510:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:510:26: 510:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:510:38: 510:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:510:33: 510:36 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:510:33: 510:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:510:33: 510:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:511:9: 513:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:511:12: 511:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:511:12: 511:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:511:36: 513:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:9: 518:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:12: 516:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:12: 516:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:12: 516:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:12: 516:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:29: 516:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:29: 516:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:29: 516:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:45: 516:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:45: 516:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:45: 516:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:45: 516:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:60: 516:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<host::Host<&'{erased} str>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:60: 516:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:60: 516:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:74: 516:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:74: 516:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:74: 516:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:74: 516:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:89: 516:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:89: 516:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:89: 516:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:516:100: 518:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:523:28: 523:41 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:523:13: 523:25 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:523:13: 523:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                url/src/lib.rs:536:42: 536:76 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:536:13: 536:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:536:14: 536:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                url/src/lib.rs:536:42: 536:76 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:536:13: 536:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:536:25: 536:38 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} str, &'{erased} str),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:536:42: 536:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:536:64: 536:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:536:64: 536:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:536:64: 536:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                url/src/lib.rs:537:40: 537:73 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:537:13: 537:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:537:14: 537:22 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                url/src/lib.rs:537:40: 537:73 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:537:13: 537:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:537:24: 537:36 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} str, &'{erased} str),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:537:40: 537:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:537:62: 537:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:537:62: 537:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:537:62: 537:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:539:29: 539:60 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:539:13: 539:26 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:539:13: 539:26 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:539:29: 539:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:539:29: 539:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:540:28: 540:58 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:540:13: 540:25 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:540:13: 540:25 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:540:28: 540:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:540:28: 540:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:9: 546:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:510:5: 599:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:15: 543:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<&'{erased} &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:15: 543:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:15: 543:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: &'{erased} mut core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:15: 543:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:45: 543:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<&'{erased} &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:45: 543:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:45: 543:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: &'{erased} mut core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:45: 543:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<&'{erased} &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:65: 543:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:65: 543:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: &'{erased} mut core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:65: 543:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:544:13: 544:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:544:13: 544:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:545:13: 545:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:545:13: 545:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:543:9: 546:10 (#903),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:9: 546:10 (#903),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:9: 546:10 (#903),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:543:9: 546:10 (#903),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:9: 560:10 (#905),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:34: 549:43 (#906),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:34: 549:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _70,
                                ),
                                url/src/lib.rs:549:34: 549:43 (#906),
                            ),
                        ),
                        pat_span: url/src/lib.rs:549:34: 549:43 (#906),
                    },
                ),
            ),
        ),
        ty: core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:34: 549:43 (#906),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:34: 549:43 (#906),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:34: 549:43 (#906),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:34: 549:43 (#906),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:34: 549:43 (#906),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:9: 560:10 (#905),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:9: 560:10 (#905),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _74,
                                ),
                                url/src/lib.rs:549:34: 549:43 (#906),
                            ),
                        ),
                        pat_span: url/src/lib.rs:549:13: 549:30 (#907),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:549:13: 549:30 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:551:13: 553:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:551:16: 551:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:551:16: 551:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:551:45: 553:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:555:13: 557:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:555:17: 555:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:555:17: 555:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:556:17: 556:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:556:17: 556:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:559:13: 559:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:559:13: 559:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:559:31: 559:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:559:31: 559:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:9: 569:10 (#910),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:33: 563:41 (#911),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:33: 563:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _94,
                                ),
                                url/src/lib.rs:563:33: 563:41 (#911),
                            ),
                        ),
                        pat_span: url/src/lib.rs:563:33: 563:41 (#911),
                    },
                ),
            ),
        ),
        ty: core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:33: 563:41 (#911),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:33: 563:41 (#911),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:33: 563:41 (#911),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:33: 563:41 (#911),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Peekable<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:33: 563:41 (#911),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:9: 569:10 (#910),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:9: 569:10 (#910),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _98,
                                ),
                                url/src/lib.rs:563:33: 563:41 (#911),
                            ),
                        ),
                        pat_span: url/src/lib.rs:563:13: 563:29 (#912),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:563:13: 563:29 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:564:13: 566:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:564:17: 564:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:564:17: 564:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:565:17: 565:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:565:17: 565:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:568:13: 568:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:568:13: 568:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:568:31: 568:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:572:9: 585:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:572:13: 572:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:572:13: 572:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:572:36: 572:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:572:36: 572:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:572:53: 572:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:577:13: 584:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:577:16: 577:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:577:13: 584:14 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:577:16: 577:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:578:17: 578:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:578:17: 578:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:580:17: 582:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:580:21: 580:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:580:21: 580:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:581:21: 581:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:581:21: 581:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:583:17: 583:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:583:17: 583:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:583:35: 583:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:588:9: 591:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:588:30: 588:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:588:30: 588:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:588:16: 588:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _131,
                                ),
                                url/src/lib.rs:588:30: 588:41 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:588:16: 588:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:588:21: 588:26 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:589:13: 589:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:589:13: 589:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:590:13: 590:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:590:13: 590:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:590:31: 590:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:593:9: 596:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:593:33: 593:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:593:33: 593:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:593:16: 593:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _141,
                                ),
                                url/src/lib.rs:593:33: 593:47 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:593:16: 593:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:593:21: 593:29 (#0),
            scope: scope[11],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:594:13: 594:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:594:13: 594:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:595:13: 595:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:595:13: 595:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:595:31: 595:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:598:14: 598:22 (#0),
            scope: scope[0],
        },
    },
]