[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = const -1_isize,
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            _3 = const -1_isize,
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            _4 = const -1_isize,
            FakeRead(ForLet(None), _4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = core::ops::Range::<isize> { start: const 0_isize, end: const 8_isize },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:220:14: 220:18 (#535),
                    scope: scope[3],
                },
                kind: _6 = <core::ops::Range<isize> as core::iter::IntoIterator>::into_iter(move _7) -> [return: bb1, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            StorageLive(_8),
            _8 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:220:5: 229:6 (#534),
                    scope: scope[4],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:220:5: 229:6 (#534),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _8,
            _12 = &mut (*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:220:14: 220:18 (#535),
                    scope: scope[4],
                },
                kind: _11 = <core::ops::Range<isize> as core::iter::Iterator>::next(move _12) -> [return: bb4, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _14 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:220:14: 220:18 (#535),
                    scope: scope[4],
                },
                kind: switchInt(move _14) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:220:14: 220:18 (#535),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:220:5: 229:6 (#534),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = ((_11 as Some).0: isize),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _16,
            _19 = move _20 as usize (IntToInt),
            StorageDead(_20),
            _21 = Len((*_1)),
            _22 = Lt(_19, _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:221:12: 221:30 (#0),
                    scope: scope[5],
                },
                kind: assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _19) -> [success: bb9, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = _4,
            _39 = Ge(move _40, const 0_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:211:16: 211:26 (#33),
                    scope: scope[3],
                },
                kind: switchInt(move _39) -> [0: bb24, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = (*_1)[_19],
            _17 = Eq(move _18, const 0_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:221:12: 221:35 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _17) -> [0: bb14, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _4,
            _23 = Lt(move _24, const 0_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:222:16: 222:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _23) -> [0: bb12, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageLive(_25),
            _25 = _16,
            _4 = move _25,
            StorageDead(_25),
            _10 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:222:13: 224:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _10 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:222:13: 224:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:221:9: 228:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = _4,
            _27 = Ge(move _28, const 0_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:211:16: 211:26 (#32),
                    scope: scope[5],
                },
                kind: switchInt(move _27) -> [0: bb20, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = _16,
            StorageLive(_31),
            _31 = _4,
            _32 = SubWithOverflow(_30, _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:212:30: 212:42 (#32),
                    scope: scope[5],
                },
                kind: assert(!move (_32.1: bool), "attempt to compute `{} - {}`, which would overflow", move _30, move _31) -> [success: bb16, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = move (_32.0: isize),
            StorageDead(_31),
            StorageDead(_30),
            FakeRead(ForLet(None), _29),
            StorageLive(_33),
            StorageLive(_34),
            _34 = _29,
            StorageLive(_35),
            _35 = _3,
            _33 = Gt(move _34, move _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:213:20: 213:43 (#32),
                    scope: scope[6],
                },
                kind: switchInt(move _33) -> [0: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            StorageLive(_36),
            _36 = _4,
            _2 = move _36,
            StorageDead(_36),
            StorageLive(_37),
            _37 = _29,
            _3 = move _37,
            StorageDead(_37),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:213:17: 216:18 (#32),
                    scope: scope[6],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:213:17: 216:18 (#32),
                    scope: scope[6],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:211:13: 217:14 (#32),
                    scope: scope[5],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:211:13: 217:14 (#32),
                    scope: scope[5],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            _4 = const -1_isize,
            _10 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:221:9: 228:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:220:5: 229:6 (#534),
                    scope: scope[4],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = _4,
            _43 = SubWithOverflow(const 8_isize, _42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:212:30: 212:42 (#33),
                    scope: scope[3],
                },
                kind: assert(!move (_43.1: bool), "attempt to compute `{} - {}`, which would overflow", const 8_isize, move _42) -> [success: bb25, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            _38 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:211:13: 217:14 (#33),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = move (_43.0: isize),
            StorageDead(_42),
            FakeRead(ForLet(None), _41),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _41,
            StorageLive(_46),
            _46 = _3,
            _44 = Gt(move _45, move _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:213:20: 213:43 (#33),
                    scope: scope[7],
                },
                kind: switchInt(move _44) -> [0: bb27, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
            StorageLive(_47),
            _47 = _4,
            _2 = move _47,
            StorageDead(_47),
            StorageLive(_48),
            _48 = _41,
            _3 = move _48,
            StorageDead(_48),
            _38 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:213:17: 216:18 (#33),
                    scope: scope[7],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_45),
            _38 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:213:17: 216:18 (#33),
                    scope: scope[7],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:211:13: 217:14 (#33),
                    scope: scope[3],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_49),
            StorageLive(_50),
            _50 = _3,
            _49 = Lt(move _50, const 2_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:233:8: 233:26 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _49) -> [0: bb31, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            _0 = (const -1_isize, const -2_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:233:5: 237:6 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageLive(_51),
            _51 = _2,
            StorageLive(_52),
            StorageLive(_53),
            _53 = _2,
            StorageLive(_54),
            _54 = _3,
            _55 = AddWithOverflow(_53, _54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:236:19: 236:43 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_55.1: bool), "attempt to compute `{} + {}`, which would overflow", move _53, move _54) -> [success: bb32, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _52 = move (_55.0: isize),
            StorageDead(_54),
            StorageDead(_53),
            _0 = (move _51, move _52),
            StorageDead(_52),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:233:5: 237:6 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:238:2: 238:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:205:1: 238:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, isize),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:205:48: 205:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/host.rs:205:34: 205:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:205:26: 205:32 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:205:26: 205:32 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u16; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:205:26: 205:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:206:23: 206:25 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:206:9: 206:20 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:206:9: 206:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:207:30: 207:32 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:207:9: 207:27 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:207:9: 207:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:208:21: 208:23 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:208:9: 208:18 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:208:9: 208:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:5: 229:6 (#534),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:14: 220:18 (#535),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:14: 220:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                url/src/host.rs:220:14: 220:18 (#535),
                            ),
                        ),
                        pat_span: url/src/host.rs:220:14: 220:18 (#535),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:14: 220:18 (#535),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:205:1: 238:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:14: 220:18 (#535),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:14: 220:18 (#535),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:14: 220:18 (#535),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<isize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:14: 220:18 (#535),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:5: 229:6 (#534),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:5: 229:6 (#534),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                url/src/host.rs:220:14: 220:18 (#535),
                            ),
                        ),
                        pat_span: url/src/host.rs:220:9: 220:10 (#536),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:220:9: 220:10 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:221:9: 228:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:221:12: 221:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:221:9: 228:10 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:221:12: 221:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:221:9: 228:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:221:19: 221:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:221:9: 228:10 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:221:19: 221:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:221:12: 221:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:221:12: 221:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:222:13: 224:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:222:16: 222:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:222:13: 224:14 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:222:16: 222:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:223:25: 223:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:211:13: 217:14 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:211:16: 211:26 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:211:16: 211:21 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:212:30: 212:42 (#32),
                            ),
                        ),
                        pat_span: url/src/host.rs:212:21: 212:27 (#32),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:212:21: 212:27 (#32),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:226:30: 226:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:212:37: 212:42 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:212:30: 212:42 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:213:17: 216:18 (#32),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:213:20: 213:43 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:213:17: 216:18 (#32),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:213:20: 213:26 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:213:17: 216:18 (#32),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:213:29: 213:43 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:214:31: 214:36 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:215:38: 215:44 (#32),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:211:13: 217:14 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:211:16: 211:26 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:211:16: 211:21 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:212:30: 212:42 (#33),
                            ),
                        ),
                        pat_span: url/src/host.rs:212:21: 212:27 (#33),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:212:21: 212:27 (#33),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:212:37: 212:42 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:212:30: 212:42 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:213:17: 216:18 (#33),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:213:20: 213:43 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:213:17: 216:18 (#33),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:213:20: 213:26 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:213:17: 216:18 (#33),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:213:29: 213:43 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:214:31: 214:36 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:215:38: 215:44 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:233:5: 237:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:233:8: 233:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:233:5: 237:6 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:233:8: 233:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:236:9: 236:44 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:236:10: 236:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:236:9: 236:44 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:236:19: 236:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:236:9: 236:44 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:236:19: 236:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:236:9: 236:44 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:236:29: 236:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:236:19: 236:43 (#0),
            scope: scope[0],
        },
    },
]