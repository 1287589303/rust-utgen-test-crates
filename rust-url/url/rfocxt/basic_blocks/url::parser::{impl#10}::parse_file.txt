[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#89),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(_1.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:516:23: 516:52 (#0),
                    scope: scope[0],
                },
                kind: _8 = std::string::String::is_empty(move _9) -> [return: bb2, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:516:23: 516:52 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = const (),
            StorageDead(_8),
            StorageDead(_7),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#88),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#90),
                    scope: scope[0],
                },
                kind: _10 = core::panicking::panic(const "assertion failed: self.serialization.is_empty()") -> bb225,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#88),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:517:52: 517:71 (#0),
                    scope: scope[0],
                },
                kind: _13 = parser::Input::<'_>::split_first(move _14) -> [return: bb7, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            StorageLive(_11),
            _11 = (_13.0: core::option::Option<char>),
            StorageLive(_12),
            _12 = move (_13.1: parser::Input<'_>),
            StorageDead(_13),
            StorageLive(_15),
            StorageLive(_16),
            PlaceMention(_11),
            _17 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 457:9 (#92),
                    scope: scope[1],
                },
                kind: switchInt(move _17) -> [1: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:459:18: 459:23 (#92),
                    scope: scope[1],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 457:9 (#92),
                    scope: scope[1],
                },
                kind: switchInt(((_11 as Some).0: char)) -> [47: bb10, 92: bb10, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:518:33: 518:55 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:458:39: 458:43 (#92),
                    scope: scope[1],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#92),
                    scope: scope[1],
                },
                kind: switchInt(move _16) -> [0: bb118, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            _19 = &_1,
            StorageLive(_20),
            _20 = parser::SyntaxViolation::Backslash,
            StorageLive(_21),
            StorageLive(_22),
            _22 = &_11,
            _21 = {closure@url/src/parser.rs:519:63: 519:65} { first_char: move _22 },
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:519:13: 519:91 (#0),
                    scope: scope[1],
                },
                kind: _18 = parser::Parser::<'_>::log_violation_if::<{closure@url/src/parser.rs:519:63: 519:65}>(move _19, move _20, move _21) -> [return: bb14, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &_12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:521:54: 521:90 (#0),
                    scope: scope[1],
                },
                kind: _25 = parser::Input::<'_>::split_first(move _26) -> [return: bb15, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            StorageLive(_23),
            _23 = (_25.0: core::option::Option<char>),
            StorageLive(_24),
            _24 = move (_25.1: parser::Input<'_>),
            StorageDead(_25),
            StorageLive(_27),
            PlaceMention(_23),
            _28 = discriminant(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 457:9 (#93),
                    scope: scope[2],
                },
                kind: switchInt(move _28) -> [1: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:459:18: 459:23 (#93),
                    scope: scope[2],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 457:9 (#93),
                    scope: scope[2],
                },
                kind: switchInt(((_23 as Some).0: char)) -> [47: bb18, 92: bb18, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:522:36: 522:58 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:458:39: 458:43 (#93),
                    scope: scope[2],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#93),
                    scope: scope[2],
                },
                kind: switchInt(move _27) -> [0: bb66, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            StorageLive(_31),
            _31 = &_1,
            StorageLive(_32),
            _32 = parser::SyntaxViolation::Backslash,
            StorageLive(_33),
            StorageLive(_34),
            _34 = &_23,
            _33 = {closure@url/src/parser.rs:523:50: 523:52} { next_char: move _34 },
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:523:17: 523:77 (#0),
                    scope: scope[2],
                },
                kind: _30 = parser::Parser::<'_>::log_violation_if::<{closure@url/src/parser.rs:523:50: 523:52}>(move _31, move _32, move _33) -> [return: bb22, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &mut (_1.0: std::string::String),
            StorageLive(_37),
            StorageLive(_38),
            _38 = const "file://",
            _37 = &(*_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:525:17: 525:55 (#0),
                    scope: scope[2],
                },
                kind: _35 = std::string::String::push_str(move _36, move _37) -> [return: bb23, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_38),
            StorageDead(_35),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = const "file",
            _41 = &(*_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:526:34: 526:46 (#0),
                    scope: scope[2],
                },
                kind: _40 = core::str::<impl str>::len(move _41) -> [return: bb24, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            _39 = move _40 as u32 (IntToInt),
            StorageDead(_40),
            FakeRead(ForLet(None), _39),
            StorageDead(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            _46 = const "file://",
            _45 = &(*_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:527:34: 527:49 (#0),
                    scope: scope[3],
                },
                kind: _44 = core::str::<impl str>::len(move _45) -> [return: bb25, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            _43 = move _44 as u32 (IntToInt),
            StorageDead(_44),
            FakeRead(ForLet(None), _43),
            StorageDead(_46),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &mut _1,
            StorageLive(_54),
            _54 = move _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:529:21: 529:64 (#0),
                    scope: scope[4],
                },
                kind: _52 = parser::Parser::<'_>::parse_file_host(move _53, move _54) -> [return: bb26, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:529:21: 529:65 (#639),
                    scope: scope[4],
                },
                kind: _51 = <core::result::Result<(bool, host::HostInternal, parser::Input<'_>), parser::ParseError> as core::ops::Try>::branch(move _52) -> [return: bb27, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            PlaceMention(_51),
            _55 = discriminant(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:529:21: 529:65 (#639),
                    scope: scope[4],
                },
                kind: switchInt(move _55) -> [0: bb30, 1: bb29, otherwise: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:529:21: 529:65 (#639),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:529:64: 529:65 (#640),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb31, imaginary: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_59),
            _59 = move ((_51 as Continue).0: (bool, host::HostInternal, parser::Input<'_>)),
            _50 = move _59,
            StorageDead(_59),
            PlaceMention(_50),
            StorageLive(_47),
            _47 = (_50.0: bool),
            StorageLive(_48),
            _48 = (_50.1: host::HostInternal),
            StorageLive(_49),
            _49 = move (_50.2: parser::Input<'_>),
            StorageDead(_51),
            StorageDead(_50),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            _64 = &(_1.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:530:43: 530:67 (#0),
                    scope: scope[5],
                },
                kind: _63 = std::string::String::len(move _64) -> [return: bb33, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_56),
            _56 = ((_51 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_58),
            _58 = _56,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:529:21: 529:65 (#639),
                    scope: scope[7],
                },
                kind: _0 = <core::result::Result<Url, parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _58) -> [return: bb32, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_56),
            StorageDead(_51),
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb213,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:530:36: 530:68 (#0),
                    scope: scope[5],
                },
                kind: _62 = parser::to_u32(move _63) -> [return: bb34, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:530:36: 530:69 (#641),
                    scope: scope[5],
                },
                kind: _61 = <core::result::Result<u32, parser::ParseError> as core::ops::Try>::branch(move _62) -> [return: bb35, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            PlaceMention(_61),
            _65 = discriminant(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:530:36: 530:69 (#641),
                    scope: scope[5],
                },
                kind: switchInt(move _65) -> [0: bb38, 1: bb37, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:530:36: 530:69 (#641),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:530:68: 530:69 (#642),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb39, imaginary: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_69),
            _69 = ((_61 as Continue).0: u32),
            _60 = _69,
            StorageDead(_69),
            FakeRead(ForLet(None), _60),
            StorageDead(_61),
            StorageLive(_70),
            StorageLive(_71),
            PlaceMention(_48),
            _72 = discriminant(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 457:9 (#94),
                    scope: scope[10],
                },
                kind: switchInt(move _72) -> [0: bb42, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_66),
            _66 = ((_61 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_68),
            _68 = _66,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:530:36: 530:69 (#641),
                    scope: scope[12],
                },
                kind: _0 = <core::result::Result<Url, parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _68) -> [return: bb40, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            StorageDead(_66),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb212,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _71 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:459:18: 459:23 (#94),
                    scope: scope[10],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:531:52: 531:70 (#0),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb43, imaginary: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _71 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:458:39: 458:43 (#94),
                    scope: scope[10],
                },
                kind: goto -> bb44,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _70 = Not(move _71),
            StorageDead(_71),
            FakeRead(ForLet(None), _70),
            StorageLive(_73),
            StorageLive(_74),
            _74 = _47,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:532:36: 532:46 (#0),
                    scope: scope[15],
                },
                kind: switchInt(move _74) -> [0: bb47, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            _75 = &mut _1,
            StorageLive(_76),
            _76 = parser::SchemeType::File,
            StorageLive(_77),
            StorageLive(_78),
            _78 = &mut _70,
            _77 = &mut (*_78),
            StorageLive(_79),
            _79 = move _49,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:533:21: 533:86 (#0),
                    scope: scope[15],
                },
                kind: _73 = parser::Parser::<'_>::parse_path_start(move _75, move _76, move _77, move _79) -> [return: bb46, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            StorageDead(_77),
            StorageDead(_76),
            StorageDead(_75),
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:532:33: 538:18 (#0),
                    scope: scope[15],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_80),
            StorageLive(_81),
            _81 = &(_1.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:535:38: 535:62 (#0),
                    scope: scope[15],
                },
                kind: _80 = std::string::String::len(move _81) -> [return: bb48, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            FakeRead(ForLet(None), _80),
            StorageLive(_82),
            StorageLive(_83),
            _83 = &mut (_1.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:536:21: 536:49 (#0),
                    scope: scope[17],
                },
                kind: _82 = std::string::String::push(move _83, const '/') -> [return: bb49, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_82),
            StorageLive(_84),
            _84 = &mut _1,
            StorageLive(_85),
            _85 = parser::SchemeType::File,
            StorageLive(_86),
            StorageLive(_87),
            _87 = &mut _70,
            _86 = &mut (*_87),
            StorageLive(_88),
            _88 = _80,
            StorageLive(_89),
            _89 = move _49,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:537:21: 537:92 (#0),
                    scope: scope[17],
                },
                kind: _73 = parser::Parser::<'_>::parse_path(move _84, move _85, move _86, move _88, move _89) -> [return: bb50, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            StorageDead(_88),
            StorageDead(_86),
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_80),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:532:33: 538:18 (#0),
                    scope: scope[15],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            FakeRead(ForLet(None), _73),
            StorageLive(_90),
            StorageLive(_91),
            _91 = _70,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:542:21: 542:29 (#0),
                    scope: scope[16],
                },
                kind: switchInt(move _91) -> [0: bb52, otherwise: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_92),
            StorageLive(_93),
            _93 = &mut (_1.0: std::string::String),
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = _43,
            _95 = move _96 as usize (IntToInt),
            StorageDead(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = _60,
            _97 = move _98 as usize (IntToInt),
            StorageDead(_98),
            _94 = core::ops::Range::<usize> { start: move _95, end: move _97 },
            StorageDead(_97),
            StorageDead(_95),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:543:21: 544:71 (#0),
                    scope: scope[16],
                },
                kind: _92 = std::string::String::drain::<core::ops::Range<usize>>(move _93, move _94) -> [return: bb53, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:544:71: 544:72 (#0),
                    scope: scope[16],
                },
                kind: drop(_92) -> [return: bb54, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            StorageLive(_99),
            _99 = _43,
            _60 = move _99,
            StorageDead(_99),
            StorageLive(_100),
            _100 = host::HostInternal::None,
            _48 = move _100,
            StorageDead(_100),
            _90 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:542:17: 547:18 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _90 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:542:17: 547:18 (#0),
                    scope: scope[16],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_90),
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            StorageLive(_106),
            _106 = &mut _1,
            StorageLive(_107),
            _107 = _3,
            StorageLive(_108),
            _108 = _39,
            StorageLive(_109),
            _109 = move _73,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:549:21: 549:86 (#0),
                    scope: scope[16],
                },
                kind: _105 = parser::Parser::<'_>::parse_query_and_fragment(move _106, move _107, move _108, move _109) -> [return: bb57, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_108),
            StorageDead(_107),
            StorageDead(_106),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:549:21: 549:87 (#645),
                    scope: scope[16],
                },
                kind: _104 = <core::result::Result<(core::option::Option<u32>, core::option::Option<u32>), parser::ParseError> as core::ops::Try>::branch(move _105) -> [return: bb58, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_105),
            PlaceMention(_104),
            _110 = discriminant(_104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:549:21: 549:87 (#645),
                    scope: scope[16],
                },
                kind: switchInt(move _110) -> [0: bb61, 1: bb60, otherwise: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _104),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:549:21: 549:87 (#645),
                    scope: scope[16],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:549:86: 549:87 (#646),
                    scope: scope[16],
                },
                kind: falseEdge -> [real: bb62, imaginary: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_114),
            _114 = ((_104 as Continue).0: (core::option::Option<u32>, core::option::Option<u32>)),
            _103 = _114,
            StorageDead(_114),
            PlaceMention(_103),
            StorageLive(_101),
            _101 = (_103.0: core::option::Option<u32>),
            StorageLive(_102),
            _102 = (_103.1: core::option::Option<u32>),
            StorageDead(_104),
            StorageDead(_103),
            StorageLive(_115),
            StorageLive(_116),
            _116 = move (_1.0: std::string::String),
            StorageLive(_117),
            _117 = _39,
            StorageLive(_118),
            _118 = _43,
            StorageLive(_119),
            _119 = _43,
            StorageLive(_120),
            _120 = _60,
            StorageLive(_121),
            _121 = _48,
            StorageLive(_122),
            _122 = core::option::Option::<u16>::None,
            StorageLive(_123),
            _123 = _60,
            StorageLive(_124),
            _124 = _101,
            StorageLive(_125),
            _125 = _102,
            _115 = Url { serialization: move _116, scheme_end: move _117, username_end: move _118, host_start: move _119, host_end: move _120, host: move _121, port: move _122, path_start: move _123, query_start: move _124, fragment_start: move _125 },
            StorageDead(_125),
            StorageDead(_124),
            StorageDead(_123),
            StorageDead(_122),
            StorageDead(_121),
            StorageDead(_120),
            StorageDead(_119),
            StorageDead(_118),
            StorageDead(_117),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:561:17: 561:18 (#0),
                    scope: scope[18],
                },
                kind: drop(_116) -> [return: bb64, unwind: bb224],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_111),
            _111 = ((_104 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_113),
            _113 = _111,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:549:21: 549:87 (#645),
                    scope: scope[20],
                },
                kind: _0 = <core::result::Result<Url, parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _113) -> [return: bb63, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
            StorageDead(_111),
            StorageDead(_104),
            StorageDead(_103),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[16],
                },
                kind: goto -> bb211,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_116),
            _0 = core::result::Result::<Url, parser::ParseError>::Ok(move _115),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:561:18: 561:19 (#0),
                    scope: scope[18],
                },
                kind: drop(_115) -> [return: bb65, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            StorageDead(_102),
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[16],
                },
                kind: goto -> bb211,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_127),
            StorageLive(_128),
            _128 = &mut (_1.0: std::string::String),
            StorageLive(_129),
            StorageLive(_130),
            _130 = const "file://",
            _129 = &(*_130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:563:17: 563:55 (#0),
                    scope: scope[2],
                },
                kind: _127 = std::string::String::push_str(move _128, move _129) -> [return: bb67, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
            StorageDead(_128),
            StorageDead(_130),
            StorageDead(_127),
            StorageLive(_131),
            StorageLive(_132),
            StorageLive(_133),
            StorageLive(_134),
            _134 = const "file",
            _133 = &(*_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:564:34: 564:46 (#0),
                    scope: scope[2],
                },
                kind: _132 = core::str::<impl str>::len(move _133) -> [return: bb68, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_133),
            _131 = move _132 as u32 (IntToInt),
            StorageDead(_132),
            FakeRead(ForLet(None), _131),
            StorageDead(_134),
            StorageLive(_135),
            StorageLive(_136),
            StorageLive(_137),
            _137 = const "file://",
            _136 = &(*_137),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:565:34: 565:49 (#0),
                    scope: scope[23],
                },
                kind: _135 = core::str::<impl str>::len(move _136) -> [return: bb69, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            FakeRead(ForLet(None), _135),
            StorageDead(_137),
            StorageLive(_138),
            _138 = _135,
            FakeRead(ForLet(None), _138),
            StorageLive(_139),
            _139 = host::HostInternal::None,
            FakeRead(ForLet(None), _139),
            StorageLive(_140),
            StorageLive(_141),
            StorageLive(_142),
            StorageLive(_143),
            _143 = &_12,
            _142 = &(*_143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:568:21: 568:86 (#0),
                    scope: scope[26],
                },
                kind: _141 = parser::starts_with_windows_drive_letter_segment(move _142) -> [return: bb70, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:568:21: 568:86 (#0),
                    scope: scope[26],
                },
                kind: switchInt(move _141) -> [0: bb72, otherwise: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_143),
            _140 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:568:17: 580:18 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_142),
            StorageDead(_143),
            PlaceMention(_4),
            _144 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:569:28: 569:42 (#0),
                    scope: scope[27],
                },
                kind: switchInt(move _144) -> [1: bb73, otherwise: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:569:28: 569:42 (#0),
                    scope: scope[27],
                },
                kind: falseEdge -> [real: bb74, imaginary: bb92],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_145),
            _145 = ((_4 as Some).0: &Url),
            StorageLive(_146),
            StorageLive(_147),
            StorageLive(_148),
            StorageLive(_149),
            StorageLive(_150),
            StorageLive(_151),
            _151 = &(*_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:570:45: 570:69 (#0),
                    scope: scope[27],
                },
                kind: _150 = Url::path_segments(move _151) -> [return: bb75, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_151),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:570:45: 570:78 (#0),
                    scope: scope[27],
                },
                kind: _149 = core::option::Option::<core::str::Split<'_, char>>::unwrap(move _150) -> [return: bb76, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _148 = &mut _149,
            StorageDead(_150),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:570:45: 570:85 (#0),
                    scope: scope[27],
                },
                kind: _147 = <core::str::Split<'_, char> as core::iter::Iterator>::next(move _148) -> [return: bb77, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_148),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:570:45: 570:94 (#0),
                    scope: scope[27],
                },
                kind: _146 = core::option::Option::<&str>::unwrap(move _147) -> [return: bb78, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_147),
            FakeRead(ForLet(None), _146),
            StorageDead(_149),
            StorageLive(_152),
            StorageLive(_153),
            _153 = &(*_146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:571:28: 571:77 (#0),
                    scope: scope[28],
                },
                kind: _152 = parser::is_normalized_windows_drive_letter(move _153) -> [return: bb79, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:571:28: 571:77 (#0),
                    scope: scope[28],
                },
                kind: switchInt(move _152) -> [0: bb83, otherwise: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
            StorageLive(_154),
            StorageLive(_155),
            _155 = &mut (_1.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:572:29: 572:57 (#0),
                    scope: scope[28],
                },
                kind: _154 = std::string::String::push(move _155, const '/') -> [return: bb81, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_155),
            StorageDead(_154),
            StorageLive(_156),
            StorageLive(_157),
            _157 = &mut (_1.0: std::string::String),
            StorageLive(_158),
            _158 = &(*_146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:573:29: 573:71 (#0),
                    scope: scope[28],
                },
                kind: _156 = std::string::String::push_str(move _157, move _158) -> [return: bb82, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_158),
            StorageDead(_157),
            StorageDead(_156),
            _140 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:571:25: 578:26 (#0),
                    scope: scope[28],
                },
                kind: goto -> bb91,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
            StorageLive(_159),
            StorageLive(_160),
            _160 = &(*_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:574:56: 574:75 (#0),
                    scope: scope[29],
                },
                kind: _159 = Url::host_str(move _160) -> [return: bb84, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_160),
            PlaceMention(_159),
            _161 = discriminant(_159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:574:39: 574:53 (#0),
                    scope: scope[29],
                },
                kind: switchInt(move _161) -> [1: bb85, otherwise: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:574:39: 574:53 (#0),
                    scope: scope[29],
                },
                kind: falseEdge -> [real: bb86, imaginary: bb89],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_162),
            _162 = ((_159 as Some).0: &str),
            StorageLive(_163),
            StorageLive(_164),
            _164 = &mut (_1.0: std::string::String),
            StorageLive(_165),
            _165 = &(*_162),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:575:29: 575:66 (#0),
                    scope: scope[29],
                },
                kind: _163 = std::string::String::push_str(move _164, move _165) -> [return: bb87, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_165),
            StorageDead(_164),
            StorageDead(_163),
            StorageLive(_166),
            StorageLive(_167),
            _167 = &(_1.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:576:40: 576:64 (#0),
                    scope: scope[29],
                },
                kind: _166 = std::string::String::len(move _167) -> [return: bb88, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_167),
            _138 = move _166,
            StorageDead(_166),
            StorageLive(_168),
            _168 = ((*_145).5: host::HostInternal),
            _139 = move _168,
            StorageDead(_168),
            _140 = const (),
            StorageDead(_162),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:574:32: 578:26 (#0),
                    scope: scope[28],
                },
                kind: goto -> bb90,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _140 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:574:32: 578:26 (#0),
                    scope: scope[28],
                },
                kind: goto -> bb90,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_159),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:571:25: 578:26 (#0),
                    scope: scope[28],
                },
                kind: goto -> bb91,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_152),
            StorageDead(_146),
            StorageDead(_145),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:569:21: 579:22 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _140 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:569:21: 579:22 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb93,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
            StorageDead(_140),
            StorageLive(_169),
            PlaceMention(_11),
            _170 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:582:47: 582:54 (#0),
                    scope: scope[31],
                },
                kind: switchInt(move _170) -> [1: bb94, otherwise: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:582:47: 582:54 (#0),
                    scope: scope[31],
                },
                kind: falseEdge -> [real: bb95, imaginary: bb106],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_171),
            _171 = ((_11 as Some).0: char),
            StorageLive(_172),
            StorageLive(_173),
            _173 = _171,
            _172 = Eq(move _173, const '/'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:583:24: 583:32 (#0),
                    scope: scope[31],
                },
                kind: switchInt(move _172) -> [0: bb97, otherwise: bb96],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_173),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:583:70: 585:22 (#0),
                    scope: scope[31],
                },
                kind: goto -> bb103,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_173),
            StorageLive(_174),
            StorageLive(_175),
            _175 = _171,
            _174 = Eq(move _175, const '\\'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:583:36: 583:45 (#0),
                    scope: scope[31],
                },
                kind: switchInt(move _174) -> [0: bb99, otherwise: bb98],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:583:70: 585:22 (#0),
                    scope: scope[31],
                },
                kind: goto -> bb103,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_175),
            StorageLive(_176),
            StorageLive(_177),
            _177 = _171,
            _176 = Eq(move _177, const '?'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:583:49: 583:57 (#0),
                    scope: scope[31],
                },
                kind: switchInt(move _176) -> [0: bb101, otherwise: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_177),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:583:70: 585:22 (#0),
                    scope: scope[31],
                },
                kind: goto -> bb103,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_177),
            StorageLive(_178),
            StorageLive(_179),
            _179 = _171,
            _178 = Eq(move _179, const '#'),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:583:61: 583:69 (#0),
                    scope: scope[31],
                },
                kind: switchInt(move _178) -> [0: bb104, otherwise: bb102],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_179),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:583:70: 585:22 (#0),
                    scope: scope[31],
                },
                kind: goto -> bb103,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _169 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:583:21: 587:22 (#0),
                    scope: scope[31],
                },
                kind: goto -> bb105,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_179),
            _169 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:583:21: 587:22 (#0),
                    scope: scope[31],
                },
                kind: goto -> bb105,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_178),
            StorageDead(_176),
            StorageDead(_174),
            StorageDead(_172),
            StorageDead(_171),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:582:40: 590:18 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _169 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:582:40: 590:18 (#0),
                    scope: scope[26],
                },
                kind: goto -> bb107,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _169),
            StorageLive(_180),
            StorageLive(_181),
            _181 = &mut _1,
            StorageLive(_182),
            _182 = parser::SchemeType::File,
            StorageLive(_183),
            StorageLive(_184),
            StorageLive(_185),
            _185 = const false,
            _184 = &mut _185,
            _183 = &mut (*_184),
            StorageLive(_186),
            _186 = _138,
            StorageLive(_187),
            _187 = move _169,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:593:21: 593:94 (#0),
                    scope: scope[30],
                },
                kind: _180 = parser::Parser::<'_>::parse_path(move _181, move _182, move _183, move _186, move _187) -> [return: bb108, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_187),
            StorageDead(_186),
            StorageDead(_183),
            StorageDead(_182),
            StorageDead(_181),
            FakeRead(ForLet(None), _180),
            StorageDead(_185),
            StorageDead(_184),
            StorageLive(_188),
            StorageLive(_189),
            _189 = _135,
            _188 = move _189 as u32 (IntToInt),
            StorageDead(_189),
            FakeRead(ForLet(None), _188),
            StorageLive(_192),
            StorageLive(_193),
            StorageLive(_194),
            StorageLive(_195),
            _195 = &mut _1,
            StorageLive(_196),
            _196 = _3,
            StorageLive(_197),
            _197 = _131,
            StorageLive(_198),
            _198 = move _180,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:598:21: 598:86 (#0),
                    scope: scope[33],
                },
                kind: _194 = parser::Parser::<'_>::parse_query_and_fragment(move _195, move _196, move _197, move _198) -> [return: bb109, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_198),
            StorageDead(_197),
            StorageDead(_196),
            StorageDead(_195),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:598:21: 598:87 (#650),
                    scope: scope[33],
                },
                kind: _193 = <core::result::Result<(core::option::Option<u32>, core::option::Option<u32>), parser::ParseError> as core::ops::Try>::branch(move _194) -> [return: bb110, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_194),
            PlaceMention(_193),
            _199 = discriminant(_193),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:598:21: 598:87 (#650),
                    scope: scope[33],
                },
                kind: switchInt(move _199) -> [0: bb113, 1: bb112, otherwise: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _193),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:598:21: 598:87 (#650),
                    scope: scope[33],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:598:86: 598:87 (#651),
                    scope: scope[33],
                },
                kind: falseEdge -> [real: bb114, imaginary: bb113],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_203),
            _203 = ((_193 as Continue).0: (core::option::Option<u32>, core::option::Option<u32>)),
            _192 = _203,
            StorageDead(_203),
            PlaceMention(_192),
            StorageLive(_190),
            _190 = (_192.0: core::option::Option<u32>),
            StorageLive(_191),
            _191 = (_192.1: core::option::Option<u32>),
            StorageDead(_193),
            StorageDead(_192),
            StorageLive(_204),
            StorageLive(_205),
            _205 = _138,
            _204 = move _205 as u32 (IntToInt),
            StorageDead(_205),
            FakeRead(ForLet(None), _204),
            StorageLive(_206),
            StorageLive(_207),
            _207 = move (_1.0: std::string::String),
            StorageLive(_208),
            _208 = _131,
            StorageLive(_209),
            _209 = _188,
            StorageLive(_210),
            _210 = _188,
            StorageLive(_211),
            _211 = _204,
            StorageLive(_212),
            _212 = _139,
            StorageLive(_213),
            _213 = core::option::Option::<u16>::None,
            StorageLive(_214),
            _214 = _204,
            StorageLive(_215),
            _215 = _190,
            StorageLive(_216),
            _216 = _191,
            _206 = Url { serialization: move _207, scheme_end: move _208, username_end: move _209, host_start: move _210, host_end: move _211, host: move _212, port: move _213, path_start: move _214, query_start: move _215, fragment_start: move _216 },
            StorageDead(_216),
            StorageDead(_215),
            StorageDead(_214),
            StorageDead(_213),
            StorageDead(_212),
            StorageDead(_211),
            StorageDead(_210),
            StorageDead(_209),
            StorageDead(_208),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:612:17: 612:18 (#0),
                    scope: scope[39],
                },
                kind: drop(_207) -> [return: bb116, unwind: bb223],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_200),
            _200 = ((_193 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_202),
            _202 = _200,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:598:21: 598:87 (#650),
                    scope: scope[36],
                },
                kind: _0 = <core::result::Result<Url, parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _202) -> [return: bb115, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_202),
            StorageDead(_200),
            StorageDead(_193),
            StorageDead(_192),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[33],
                },
                kind: goto -> bb210,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_207),
            _0 = core::result::Result::<Url, parser::ParseError>::Ok(move _206),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:612:18: 612:19 (#0),
                    scope: scope[39],
                },
                kind: drop(_206) -> [return: bb117, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_206),
            StorageDead(_204),
            StorageDead(_191),
            StorageDead(_190),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[33],
                },
                kind: goto -> bb210,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = const (),
            StorageDead(_16),
            StorageDead(_15),
            PlaceMention(_4),
            _217 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:615:16: 615:30 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _217) -> [1: bb120, otherwise: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_363),
            StorageLive(_364),
            _364 = &mut (_1.0: std::string::String),
            StorageLive(_365),
            StorageLive(_366),
            _366 = const "file:///",
            _365 = &(*_366),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:697:13: 697:52 (#0),
                    scope: scope[1],
                },
                kind: _363 = std::string::String::push_str(move _364, move _365) -> [return: bb195, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:615:16: 615:30 (#0),
                    scope: scope[40],
                },
                kind: falseEdge -> [real: bb121, imaginary: bb119],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_218),
            _218 = ((_4 as Some).0: &Url),
            PlaceMention(_11),
            _219 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:616:13: 616:29 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _219) -> [0: bb123, 1: bb124, otherwise: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_274),
            StorageLive(_275),
            StorageLive(_276),
            _276 = &_2,
            _275 = &(*_276),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:648:25: 648:73 (#0),
                    scope: scope[40],
                },
                kind: _274 = parser::starts_with_windows_drive_letter_segment(move _275) -> [return: bb162, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:617:17: 617:21 (#0),
                    scope: scope[40],
                },
                kind: falseEdge -> [real: bb127, imaginary: bb124],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:616:13: 616:29 (#0),
                    scope: scope[40],
                },
                kind: switchInt(((_11 as Some).0: char)) -> [63: bb125, 35: bb126, otherwise: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:630:17: 630:26 (#0),
                    scope: scope[40],
                },
                kind: falseEdge -> [real: bb138, imaginary: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:646:17: 646:26 (#0),
                    scope: scope[40],
                },
                kind: falseEdge -> [real: bb160, imaginary: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_220),
            PlaceMention(((*_218).9: core::option::Option<u32>)),
            _221 = discriminant(((*_218).9: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:619:43: 619:72 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _221) -> [0: bb130, 1: bb129, otherwise: bb128],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), ((*_218).9: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:619:49: 619:72 (#0),
                    scope: scope[40],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:620:25: 620:32 (#0),
                    scope: scope[40],
                },
                kind: falseEdge -> [real: bb131, imaginary: bb130],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_228),
            StorageLive(_229),
            StorageLive(_230),
            _230 = &((*_218).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:621:34: 621:57 (#0),
                    scope: scope[40],
                },
                kind: _229 = <std::string::String as core::ops::Deref>::deref(move _230) -> [return: bb133, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_222),
            _222 = ((((*_218).9: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_223),
            StorageLive(_224),
            _224 = &((*_218).0: std::string::String),
            StorageLive(_225),
            StorageLive(_226),
            StorageLive(_227),
            _227 = _222,
            _226 = move _227 as usize (IntToInt),
            StorageDead(_227),
            _225 = core::ops::RangeTo::<usize> { end: move _226 },
            StorageDead(_226),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:620:59: 620:73 (#0),
                    scope: scope[42],
                },
                kind: _223 = <std::string::String as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _224, move _225) -> [return: bb132, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_225),
            StorageDead(_224),
            _220 = &(*_223),
            StorageDead(_222),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:620:72: 620:73 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_230),
            _228 = &(*_229),
            _220 = &(*_228),
            StorageDead(_228),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:621:56: 621:57 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb134,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _220),
            StorageLive(_231),
            StorageLive(_232),
            _232 = &mut (_1.0: std::string::String),
            StorageLive(_233),
            _233 = &(*_220),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:623:21: 623:65 (#0),
                    scope: scope[41],
                },
                kind: _231 = std::string::String::push_str(move _232, move _233) -> [return: bb135, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_233),
            StorageDead(_232),
            StorageDead(_231),
            StorageLive(_234),
            StorageLive(_235),
            _235 = move (_1.0: std::string::String),
            StorageLive(_236),
            _236 = core::option::Option::<u32>::None,
            _234 = Url { serialization: move _235, scheme_end: ((*_218).1: u32), username_end: ((*_218).2: u32), host_start: ((*_218).3: u32), host_end: ((*_218).4: u32), host: ((*_218).5: host::HostInternal), port: ((*_218).6: core::option::Option<u16>), path_start: ((*_218).7: u32), query_start: ((*_218).8: core::option::Option<u32>), fragment_start: move _236 },
            StorageDead(_236),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:628:21: 628:22 (#0),
                    scope: scope[41],
                },
                kind: drop(_235) -> [return: bb136, unwind: bb222],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_235),
            _0 = core::result::Result::<Url, parser::ParseError>::Ok(move _234),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:628:22: 628:23 (#0),
                    scope: scope[41],
                },
                kind: drop(_234) -> [return: bb137, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_234),
            StorageDead(_229),
            StorageDead(_223),
            StorageDead(_220),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:629:17: 629:18 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_237),
            StorageLive(_238),
            StorageLive(_239),
            _239 = ((*_218).8: core::option::Option<u32>),
            StorageLive(_240),
            _240 = ((*_218).9: core::option::Option<u32>),
            _238 = (move _239, move _240),
            StorageDead(_240),
            StorageDead(_239),
            PlaceMention(_238),
            _242 = discriminant((_238.0: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:632:40: 632:93 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _242) -> [0: bb140, 1: bb143, otherwise: bb139],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _238),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:632:46: 632:93 (#0),
                    scope: scope[40],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _241 = discriminant((_238.1: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:632:40: 632:93 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _241) -> [0: bb141, 1: bb142, otherwise: bb139],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:633:25: 633:37 (#0),
                    scope: scope[40],
                },
                kind: falseEdge -> [real: bb144, imaginary: bb143],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_245),
            _245 = (((_238.1: core::option::Option<u32>) as Some).0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:632:40: 635:22 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb146,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:634:25: 634:37 (#0),
                    scope: scope[40],
                },
                kind: falseEdge -> [real: bb147, imaginary: bb142],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_243),
            StorageLive(_244),
            _244 = &((*_218).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:633:42: 633:65 (#0),
                    scope: scope[40],
                },
                kind: _243 = <std::string::String as core::ops::Deref>::deref(move _244) -> [return: bb145, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_244),
            _237 = &(*_243),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:633:41: 633:65 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb149,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_246),
            StorageLive(_247),
            _247 = &(*_218),
            StorageLive(_248),
            StorageLive(_249),
            _249 = _245,
            _248 = core::ops::RangeTo::<u32> { end: move _249 },
            StorageDead(_249),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:634:59: 634:78 (#0),
                    scope: scope[44],
                },
                kind: _246 = Url::slice::<core::ops::RangeTo<u32>>(move _247, move _248) -> [return: bb148, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_245),
            _245 = (((_238.0: core::option::Option<u32>) as Some).0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:632:40: 635:22 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb146,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _237 = &(*_246),
            StorageDead(_248),
            StorageDead(_247),
            StorageDead(_246),
            StorageDead(_245),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:634:77: 634:78 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb149,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _237),
            StorageDead(_238),
            StorageLive(_250),
            StorageLive(_251),
            _251 = &mut (_1.0: std::string::String),
            StorageLive(_252),
            _252 = &(*_237),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:636:21: 636:62 (#0),
                    scope: scope[43],
                },
                kind: _250 = std::string::String::push_str(move _251, move _252) -> [return: bb150, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_252),
            StorageDead(_251),
            StorageDead(_250),
            StorageLive(_255),
            StorageLive(_256),
            StorageLive(_257),
            StorageLive(_258),
            _258 = &mut _1,
            StorageLive(_259),
            _259 = _3,
            StorageLive(_260),
            _260 = ((*_218).1: u32),
            StorageLive(_261),
            _261 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:638:25: 638:95 (#0),
                    scope: scope[43],
                },
                kind: _257 = parser::Parser::<'_>::parse_query_and_fragment(move _258, move _259, move _260, move _261) -> [return: bb151, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_261),
            StorageDead(_260),
            StorageDead(_259),
            StorageDead(_258),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:638:25: 638:96 (#652),
                    scope: scope[43],
                },
                kind: _256 = <core::result::Result<(core::option::Option<u32>, core::option::Option<u32>), parser::ParseError> as core::ops::Try>::branch(move _257) -> [return: bb152, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_257),
            PlaceMention(_256),
            _262 = discriminant(_256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:638:25: 638:96 (#652),
                    scope: scope[43],
                },
                kind: switchInt(move _262) -> [0: bb155, 1: bb154, otherwise: bb153],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:638:25: 638:96 (#652),
                    scope: scope[43],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:638:95: 638:96 (#653),
                    scope: scope[43],
                },
                kind: falseEdge -> [real: bb156, imaginary: bb155],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_266),
            _266 = ((_256 as Continue).0: (core::option::Option<u32>, core::option::Option<u32>)),
            _255 = _266,
            StorageDead(_266),
            PlaceMention(_255),
            StorageLive(_253),
            _253 = (_255.0: core::option::Option<u32>),
            StorageLive(_254),
            _254 = (_255.1: core::option::Option<u32>),
            StorageDead(_256),
            StorageDead(_255),
            StorageLive(_267),
            StorageLive(_268),
            _268 = move (_1.0: std::string::String),
            StorageLive(_269),
            _269 = _253,
            StorageLive(_270),
            _270 = _254,
            _267 = Url { serialization: move _268, scheme_end: ((*_218).1: u32), username_end: ((*_218).2: u32), host_start: ((*_218).3: u32), host_end: ((*_218).4: u32), host: ((*_218).5: host::HostInternal), port: ((*_218).6: core::option::Option<u16>), path_start: ((*_218).7: u32), query_start: move _269, fragment_start: move _270 },
            StorageDead(_270),
            StorageDead(_269),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:644:21: 644:22 (#0),
                    scope: scope[45],
                },
                kind: drop(_268) -> [return: bb158, unwind: bb221],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_263),
            _263 = ((_256 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_265),
            _265 = _263,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:638:25: 638:96 (#652),
                    scope: scope[47],
                },
                kind: _0 = <core::result::Result<Url, parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _265) -> [return: bb157, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_265),
            StorageDead(_263),
            StorageDead(_256),
            StorageDead(_255),
            StorageDead(_243),
            StorageDead(_237),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[40],
                },
                kind: goto -> bb209,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_268),
            _0 = core::result::Result::<Url, parser::ParseError>::Ok(move _267),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:644:22: 644:23 (#0),
                    scope: scope[45],
                },
                kind: drop(_267) -> [return: bb159, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_267),
            StorageDead(_254),
            StorageDead(_253),
            StorageDead(_243),
            StorageDead(_237),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:645:17: 645:18 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_271),
            _271 = move _1,
            StorageLive(_272),
            _272 = &(*_218),
            StorageLive(_273),
            _273 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:646:30: 646:65 (#0),
                    scope: scope[40],
                },
                kind: _0 = parser::Parser::<'_>::fragment_only(move _271, move _272, move _273) -> [return: bb161, unwind: bb220],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_273),
            StorageDead(_272),
            StorageDead(_271),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:646:64: 646:65 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:648:25: 648:73 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _274) -> [0: bb164, otherwise: bb163],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_275),
            StorageDead(_276),
            StorageLive(_317),
            StorageLive(_318),
            _318 = &mut (_1.0: std::string::String),
            StorageLive(_319),
            StorageLive(_320),
            _320 = const "file:///",
            _319 = &(*_320),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:673:25: 673:64 (#0),
                    scope: scope[40],
                },
                kind: _317 = std::string::String::push_str(move _318, move _319) -> [return: bb180, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_275),
            StorageDead(_276),
            StorageLive(_277),
            StorageLive(_278),
            StorageLive(_279),
            _279 = ((*_218).8: core::option::Option<u32>),
            StorageLive(_280),
            _280 = ((*_218).9: core::option::Option<u32>),
            _278 = (move _279, move _280),
            StorageDead(_280),
            StorageDead(_279),
            PlaceMention(_278),
            _282 = discriminant((_278.0: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:649:44: 649:97 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _282) -> [0: bb166, 1: bb169, otherwise: bb165],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _278),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:649:50: 649:97 (#0),
                    scope: scope[40],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _281 = discriminant((_278.1: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:649:44: 649:97 (#0),
                    scope: scope[40],
                },
                kind: switchInt(move _281) -> [0: bb167, 1: bb168, otherwise: bb165],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:650:29: 650:41 (#0),
                    scope: scope[40],
                },
                kind: falseEdge -> [real: bb170, imaginary: bb169],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_285),
            _285 = (((_278.1: core::option::Option<u32>) as Some).0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:649:44: 652:26 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb172,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:651:29: 651:41 (#0),
                    scope: scope[40],
                },
                kind: falseEdge -> [real: bb173, imaginary: bb168],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_283),
            StorageLive(_284),
            _284 = &((*_218).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:650:46: 650:69 (#0),
                    scope: scope[40],
                },
                kind: _283 = <std::string::String as core::ops::Deref>::deref(move _284) -> [return: bb171, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_284),
            _277 = &(*_283),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:650:45: 650:69 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb175,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_286),
            StorageLive(_287),
            _287 = &(*_218),
            StorageLive(_288),
            StorageLive(_289),
            _289 = _285,
            _288 = core::ops::RangeTo::<u32> { end: move _289 },
            StorageDead(_289),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:651:63: 651:82 (#0),
                    scope: scope[51],
                },
                kind: _286 = Url::slice::<core::ops::RangeTo<u32>>(move _287, move _288) -> [return: bb174, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_285),
            _285 = (((_278.0: core::option::Option<u32>) as Some).0: u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:649:44: 652:26 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb172,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _277 = &(*_286),
            StorageDead(_288),
            StorageDead(_287),
            StorageDead(_286),
            StorageDead(_285),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:651:81: 651:82 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb175,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _277),
            StorageDead(_278),
            StorageLive(_290),
            StorageLive(_291),
            _291 = &mut (_1.0: std::string::String),
            StorageLive(_292),
            _292 = &(*_277),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:653:25: 653:66 (#0),
                    scope: scope[50],
                },
                kind: _290 = std::string::String::push_str(move _291, move _292) -> [return: bb176, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_292),
            StorageDead(_291),
            StorageDead(_290),
            StorageLive(_293),
            StorageLive(_294),
            _294 = &mut _1,
            StorageLive(_295),
            _295 = parser::SchemeType::File,
            StorageLive(_296),
            StorageLive(_297),
            _297 = ((*_218).7: u32),
            _296 = move _297 as usize (IntToInt),
            StorageDead(_297),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:654:25: 654:90 (#0),
                    scope: scope[50],
                },
                kind: _293 = parser::Parser::<'_>::shorten_path(move _294, move _295, move _296) -> [return: bb177, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_296),
            StorageDead(_295),
            StorageDead(_294),
            StorageDead(_293),
            StorageLive(_298),
            StorageLive(_299),
            _299 = &mut _1,
            StorageLive(_300),
            _300 = parser::SchemeType::File,
            StorageLive(_301),
            StorageLive(_302),
            StorageLive(_303),
            _303 = const true,
            _302 = &mut _303,
            _301 = &mut (*_302),
            StorageLive(_304),
            StorageLive(_305),
            _305 = ((*_218).7: u32),
            _304 = move _305 as usize (IntToInt),
            StorageDead(_305),
            StorageLive(_306),
            _306 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:655:41: 660:26 (#0),
                    scope: scope[50],
                },
                kind: _298 = parser::Parser::<'_>::parse_path(move _299, move _300, move _301, move _304, move _306) -> [return: bb178, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_306),
            StorageDead(_304),
            StorageDead(_301),
            StorageDead(_300),
            StorageDead(_299),
            FakeRead(ForLet(None), _298),
            StorageDead(_303),
            StorageDead(_302),
            StorageLive(_307),
            _307 = move _1,
            StorageLive(_308),
            _308 = parser::SchemeType::File,
            StorageLive(_309),
            _309 = ((*_218).1: u32),
            StorageLive(_310),
            _310 = ((*_218).2: u32),
            StorageLive(_311),
            _311 = ((*_218).3: u32),
            StorageLive(_312),
            _312 = ((*_218).4: u32),
            StorageLive(_313),
            _313 = ((*_218).5: host::HostInternal),
            StorageLive(_314),
            _314 = ((*_218).6: core::option::Option<u16>),
            StorageLive(_315),
            _315 = ((*_218).7: u32),
            StorageLive(_316),
            _316 = move _298,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                    scope: scope[52],
                },
                kind: _0 = parser::Parser::<'_>::with_query_and_fragment(move _307, move _308, move _309, move _310, move _311, move _312, move _313, move _314, move _315, move _316) -> [return: bb179, unwind: bb219],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_316),
            StorageDead(_315),
            StorageDead(_314),
            StorageDead(_313),
            StorageDead(_312),
            StorageDead(_311),
            StorageDead(_310),
            StorageDead(_309),
            StorageDead(_308),
            StorageDead(_307),
            StorageDead(_298),
            StorageDead(_283),
            StorageDead(_277),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:648:21: 693:22 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb193,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_319),
            StorageDead(_318),
            StorageDead(_320),
            StorageDead(_317),
            StorageLive(_321),
            StorageLive(_322),
            StorageLive(_323),
            StorageLive(_324),
            _324 = const "file",
            _323 = &(*_324),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:674:42: 674:54 (#0),
                    scope: scope[40],
                },
                kind: _322 = core::str::<impl str>::len(move _323) -> [return: bb181, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_323),
            _321 = move _322 as u32 (IntToInt),
            StorageDead(_322),
            FakeRead(ForLet(None), _321),
            StorageDead(_324),
            StorageLive(_325),
            StorageLive(_326),
            StorageLive(_327),
            _327 = const "file://",
            _326 = &(*_327),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:675:42: 675:57 (#0),
                    scope: scope[53],
                },
                kind: _325 = core::str::<impl str>::len(move _326) -> [return: bb182, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_326),
            FakeRead(ForLet(None), _325),
            StorageDead(_327),
            StorageLive(_328),
            StorageLive(_329),
            _329 = &mut _1,
            StorageLive(_330),
            _330 = parser::SchemeType::File,
            StorageLive(_331),
            StorageLive(_332),
            StorageLive(_333),
            _333 = const false,
            _332 = &mut _333,
            _331 = &mut (*_332),
            StorageLive(_334),
            _334 = _325,
            StorageLive(_335),
            _335 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:677:29: 677:93 (#0),
                    scope: scope[54],
                },
                kind: _328 = parser::Parser::<'_>::parse_path(move _329, move _330, move _331, move _334, move _335) -> [return: bb183, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_335),
            StorageDead(_334),
            StorageDead(_331),
            StorageDead(_330),
            StorageDead(_329),
            FakeRead(ForLet(None), _328),
            StorageDead(_333),
            StorageDead(_332),
            StorageLive(_338),
            StorageLive(_339),
            StorageLive(_340),
            StorageLive(_341),
            _341 = &mut _1,
            StorageLive(_342),
            _342 = parser::SchemeType::File,
            StorageLive(_343),
            _343 = _321,
            StorageLive(_344),
            _344 = move _328,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:679:29: 679:99 (#0),
                    scope: scope[55],
                },
                kind: _340 = parser::Parser::<'_>::parse_query_and_fragment(move _341, move _342, move _343, move _344) -> [return: bb184, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_344),
            StorageDead(_343),
            StorageDead(_342),
            StorageDead(_341),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:679:29: 679:100 (#655),
                    scope: scope[55],
                },
                kind: _339 = <core::result::Result<(core::option::Option<u32>, core::option::Option<u32>), parser::ParseError> as core::ops::Try>::branch(move _340) -> [return: bb185, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_340),
            PlaceMention(_339),
            _345 = discriminant(_339),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:679:29: 679:100 (#655),
                    scope: scope[55],
                },
                kind: switchInt(move _345) -> [0: bb188, 1: bb187, otherwise: bb186],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _339),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:679:29: 679:100 (#655),
                    scope: scope[55],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:679:99: 679:100 (#656),
                    scope: scope[55],
                },
                kind: falseEdge -> [real: bb189, imaginary: bb188],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_349),
            _349 = ((_339 as Continue).0: (core::option::Option<u32>, core::option::Option<u32>)),
            _338 = _349,
            StorageDead(_349),
            PlaceMention(_338),
            StorageLive(_336),
            _336 = (_338.0: core::option::Option<u32>),
            StorageLive(_337),
            _337 = (_338.1: core::option::Option<u32>),
            StorageDead(_339),
            StorageDead(_338),
            StorageLive(_350),
            StorageLive(_351),
            _351 = _325,
            _350 = move _351 as u32 (IntToInt),
            StorageDead(_351),
            FakeRead(ForLet(None), _350),
            StorageLive(_352),
            StorageLive(_353),
            _353 = move (_1.0: std::string::String),
            StorageLive(_354),
            _354 = _321,
            StorageLive(_355),
            _355 = _350,
            StorageLive(_356),
            _356 = _350,
            StorageLive(_357),
            _357 = _350,
            StorageLive(_358),
            _358 = host::HostInternal::None,
            StorageLive(_359),
            _359 = core::option::Option::<u16>::None,
            StorageLive(_360),
            _360 = _350,
            StorageLive(_361),
            _361 = _336,
            StorageLive(_362),
            _362 = _337,
            _352 = Url { serialization: move _353, scheme_end: move _354, username_end: move _355, host_start: move _356, host_end: move _357, host: move _358, port: move _359, path_start: move _360, query_start: move _361, fragment_start: move _362 },
            StorageDead(_362),
            StorageDead(_361),
            StorageDead(_360),
            StorageDead(_359),
            StorageDead(_358),
            StorageDead(_357),
            StorageDead(_356),
            StorageDead(_355),
            StorageDead(_354),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:692:25: 692:26 (#0),
                    scope: scope[61],
                },
                kind: drop(_353) -> [return: bb191, unwind: bb218],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_346),
            _346 = ((_339 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_348),
            _348 = _346,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:679:29: 679:100 (#655),
                    scope: scope[58],
                },
                kind: _0 = <core::result::Result<Url, parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _348) -> [return: bb190, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_348),
            StorageDead(_346),
            StorageDead(_339),
            StorageDead(_338),
            StorageDead(_328),
            StorageDead(_325),
            StorageDead(_321),
            StorageDead(_274),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[40],
                },
                kind: goto -> bb209,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_353),
            _0 = core::result::Result::<Url, parser::ParseError>::Ok(move _352),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:692:26: 692:27 (#0),
                    scope: scope[61],
                },
                kind: drop(_352) -> [return: bb192, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_352),
            StorageDead(_350),
            StorageDead(_337),
            StorageDead(_336),
            StorageDead(_328),
            StorageDead(_325),
            StorageDead(_321),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:648:21: 693:22 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb193,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_274),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:693:21: 693:22 (#0),
                    scope: scope[40],
                },
                kind: goto -> bb194,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_218),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:615:9: 716:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb208,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_365),
            StorageDead(_364),
            StorageDead(_366),
            StorageDead(_363),
            StorageLive(_367),
            StorageLive(_368),
            StorageLive(_369),
            StorageLive(_370),
            _370 = const "file",
            _369 = &(*_370),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:698:30: 698:42 (#0),
                    scope: scope[1],
                },
                kind: _368 = core::str::<impl str>::len(move _369) -> [return: bb196, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_369),
            _367 = move _368 as u32 (IntToInt),
            StorageDead(_368),
            FakeRead(ForLet(None), _367),
            StorageDead(_370),
            StorageLive(_371),
            StorageLive(_372),
            StorageLive(_373),
            _373 = const "file://",
            _372 = &(*_373),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:699:30: 699:45 (#0),
                    scope: scope[62],
                },
                kind: _371 = core::str::<impl str>::len(move _372) -> [return: bb197, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_372),
            FakeRead(ForLet(None), _371),
            StorageDead(_373),
            StorageLive(_374),
            StorageLive(_375),
            _375 = &mut _1,
            StorageLive(_376),
            _376 = parser::SchemeType::File,
            StorageLive(_377),
            StorageLive(_378),
            StorageLive(_379),
            _379 = const false,
            _378 = &mut _379,
            _377 = &mut (*_378),
            StorageLive(_380),
            _380 = _371,
            StorageLive(_381),
            _381 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:700:29: 700:93 (#0),
                    scope: scope[63],
                },
                kind: _374 = parser::Parser::<'_>::parse_path(move _375, move _376, move _377, move _380, move _381) -> [return: bb198, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_381),
            StorageDead(_380),
            StorageDead(_377),
            StorageDead(_376),
            StorageDead(_375),
            FakeRead(ForLet(None), _374),
            StorageDead(_379),
            StorageDead(_378),
            StorageLive(_384),
            StorageLive(_385),
            StorageLive(_386),
            StorageLive(_387),
            _387 = &mut _1,
            StorageLive(_388),
            _388 = parser::SchemeType::File,
            StorageLive(_389),
            _389 = _367,
            StorageLive(_390),
            _390 = move _374,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:702:17: 702:87 (#0),
                    scope: scope[64],
                },
                kind: _386 = parser::Parser::<'_>::parse_query_and_fragment(move _387, move _388, move _389, move _390) -> [return: bb199, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_390),
            StorageDead(_389),
            StorageDead(_388),
            StorageDead(_387),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:702:17: 702:88 (#657),
                    scope: scope[64],
                },
                kind: _385 = <core::result::Result<(core::option::Option<u32>, core::option::Option<u32>), parser::ParseError> as core::ops::Try>::branch(move _386) -> [return: bb200, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_386),
            PlaceMention(_385),
            _391 = discriminant(_385),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:702:17: 702:88 (#657),
                    scope: scope[64],
                },
                kind: switchInt(move _391) -> [0: bb203, 1: bb202, otherwise: bb201],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _385),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:702:17: 702:88 (#657),
                    scope: scope[64],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:702:87: 702:88 (#658),
                    scope: scope[64],
                },
                kind: falseEdge -> [real: bb204, imaginary: bb203],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_395),
            _395 = ((_385 as Continue).0: (core::option::Option<u32>, core::option::Option<u32>)),
            _384 = _395,
            StorageDead(_395),
            PlaceMention(_384),
            StorageLive(_382),
            _382 = (_384.0: core::option::Option<u32>),
            StorageLive(_383),
            _383 = (_384.1: core::option::Option<u32>),
            StorageDead(_385),
            StorageDead(_384),
            StorageLive(_396),
            StorageLive(_397),
            _397 = _371,
            _396 = move _397 as u32 (IntToInt),
            StorageDead(_397),
            FakeRead(ForLet(None), _396),
            StorageLive(_398),
            StorageLive(_399),
            _399 = move (_1.0: std::string::String),
            StorageLive(_400),
            _400 = _367,
            StorageLive(_401),
            _401 = _396,
            StorageLive(_402),
            _402 = _396,
            StorageLive(_403),
            _403 = _396,
            StorageLive(_404),
            _404 = host::HostInternal::None,
            StorageLive(_405),
            _405 = core::option::Option::<u16>::None,
            StorageLive(_406),
            _406 = _396,
            StorageLive(_407),
            _407 = _382,
            StorageLive(_408),
            _408 = _383,
            _398 = Url { serialization: move _399, scheme_end: move _400, username_end: move _401, host_start: move _402, host_end: move _403, host: move _404, port: move _405, path_start: move _406, query_start: move _407, fragment_start: move _408 },
            StorageDead(_408),
            StorageDead(_407),
            StorageDead(_406),
            StorageDead(_405),
            StorageDead(_404),
            StorageDead(_403),
            StorageDead(_402),
            StorageDead(_401),
            StorageDead(_400),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:715:13: 715:14 (#0),
                    scope: scope[70],
                },
                kind: drop(_399) -> [return: bb206, unwind: bb217],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_392),
            _392 = ((_385 as Break).0: core::result::Result<core::convert::Infallible, parser::ParseError>),
            StorageLive(_394),
            _394 = _392,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:702:17: 702:88 (#657),
                    scope: scope[67],
                },
                kind: _0 = <core::result::Result<Url, parser::ParseError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, parser::ParseError>>>::from_residual(move _394) -> [return: bb205, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_394),
            StorageDead(_392),
            StorageDead(_385),
            StorageDead(_384),
            StorageDead(_374),
            StorageDead(_371),
            StorageDead(_367),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb215,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_399),
            _0 = core::result::Result::<Url, parser::ParseError>::Ok(move _398),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:715:14: 715:15 (#0),
                    scope: scope[70],
                },
                kind: drop(_398) -> [return: bb207, unwind: bb225],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_398),
            StorageDead(_396),
            StorageDead(_383),
            StorageDead(_382),
            StorageDead(_374),
            StorageDead(_371),
            StorageDead(_367),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:615:9: 716:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb208,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:717:5: 717:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb216, unwind: bb226],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_218),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb215,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_188),
            StorageDead(_180),
            StorageDead(_169),
            StorageDead(_139),
            StorageDead(_138),
            StorageDead(_135),
            StorageDead(_131),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb214,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[10],
                },
                kind: goto -> bb212,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb213,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb214,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb215,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:717:5: 717:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb216, unwind: bb226],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:717:6: 717:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:715:14: 715:15 (#0),
                    scope: scope[70],
                },
                kind: drop(_398) -> [return: bb225, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:692:26: 692:27 (#0),
                    scope: scope[61],
                },
                kind: drop(_352) -> [return: bb225, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:671:25: 671:26 (#0),
                    scope: scope[52],
                },
                kind: drop(_307) -> [return: bb225, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:646:64: 646:65 (#0),
                    scope: scope[40],
                },
                kind: drop(_271) -> [return: bb225, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:644:22: 644:23 (#0),
                    scope: scope[45],
                },
                kind: drop(_267) -> [return: bb225, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:628:22: 628:23 (#0),
                    scope: scope[41],
                },
                kind: drop(_234) -> [return: bb225, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:612:18: 612:19 (#0),
                    scope: scope[39],
                },
                kind: drop(_206) -> [return: bb225, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:561:18: 561:19 (#0),
                    scope: scope[18],
                },
                kind: drop(_115) -> [return: bb225, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:717:5: 717:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb226, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:508:5: 717:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Url, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:513:10: 513:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:509:9: 509:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:510:16: 510:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:510:9: 510:14 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:510:9: 510:14 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:510:9: 510:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:511:22: 511:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:511:9: 511:20 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:511:9: 511:20 (#0),
                    },
                ),
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:511:9: 511:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:512:24: 512:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:512:9: 512:22 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:512:9: 512:22 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<&'{erased} Url>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:512:9: 512:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#88),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#89),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#90),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:516:23: 516:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:516:23: 516:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#90),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#90),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                url/src/parser.rs:517:52: 517:71 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:517:13: 517:49 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:517:14: 517:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                url/src/parser.rs:517:52: 517:71 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:517:13: 517:49 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:517:26: 517:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<char>, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:517:52: 517:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:517:52: 517:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:518:9: 614:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#92),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:518:33: 518:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:519:13: 519:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:519:13: 519:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SyntaxViolation,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:519:35: 519:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:214 ~ url[3b6e]::parser::{impl#10}::parse_file::{closure#0}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn(()) -> bool, bound_vars: [] },
                (&'{erased} core::option::Option<char>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:519:63: 519:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:519:63: 519:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                url/src/parser.rs:521:54: 521:90 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:521:17: 521:51 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:521:18: 521:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                url/src/parser.rs:521:54: 521:90 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:521:17: 521:51 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:521:29: 521:50 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<char>, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:521:54: 521:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:521:54: 521:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:522:13: 613:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#93),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:522:36: 522:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:522:13: 613:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:522:60: 562:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:523:17: 523:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:523:17: 523:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SyntaxViolation,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:523:39: 523:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:215 ~ url[3b6e]::parser::{impl#10}::parse_file::{closure#1}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn(()) -> bool, bound_vars: [] },
                (&'{erased} core::option::Option<char>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:523:50: 523:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:523:50: 523:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:525:17: 525:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:525:17: 525:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:525:45: 525:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:525:45: 525:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:526:34: 526:53 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:526:21: 526:31 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:526:21: 526:31 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:526:34: 526:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:526:34: 526:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:526:34: 526:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:527:34: 527:56 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:527:21: 527:31 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:527:21: 527:31 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:527:34: 527:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:527:34: 527:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:527:34: 527:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _50,
                                ),
                                url/src/parser.rs:529:21: 529:65 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:528:21: 528:54 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:528:22: 528:32 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _50,
                                ),
                                url/src/parser.rs:529:21: 529:65 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:528:21: 528:54 (#0),
                    },
                ),
            ),
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:528:34: 528:42 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _50,
                                ),
                                url/src/parser.rs:529:21: 529:65 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:528:21: 528:54 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:528:44: 528:53 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (bool, host::HostInternal, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:529:21: 529:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, (bool, host::HostInternal, parser::Input<'{erased}>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:529:21: 529:65 (#639),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(bool, host::HostInternal, parser::Input<'{erased}>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:529:21: 529:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:529:21: 529:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:529:42: 529:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:529:64: 529:65 (#640),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _51,
                                ),
                                url/src/parser.rs:529:21: 529:65 (#639),
                            ),
                        ),
                        pat_span: url/src/parser.rs:529:64: 529:65 (#640),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:529:64: 529:65 (#640),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:529:64: 529:65 (#640),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:529:64: 529:65 (#640),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _51,
                                ),
                                url/src/parser.rs:529:21: 529:65 (#639),
                            ),
                        ),
                        pat_span: url/src/parser.rs:529:21: 529:65 (#639),
                    },
                ),
            ),
        ),
        ty: (bool, host::HostInternal, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:529:21: 529:65 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:530:36: 530:69 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:530:21: 530:33 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:530:21: 530:33 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:530:36: 530:69 (#641),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:530:36: 530:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:530:43: 530:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:530:43: 530:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:530:68: 530:69 (#642),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _61,
                                ),
                                url/src/parser.rs:530:36: 530:69 (#641),
                            ),
                        ),
                        pat_span: url/src/parser.rs:530:68: 530:69 (#642),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:530:68: 530:69 (#642),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:530:68: 530:69 (#642),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:530:68: 530:69 (#642),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _61,
                                ),
                                url/src/parser.rs:530:36: 530:69 (#641),
                            ),
                        ),
                        pat_span: url/src/parser.rs:530:36: 530:69 (#641),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:530:36: 530:69 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:531:36: 531:71 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:531:21: 531:33 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:531:21: 531:33 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:457:9: 460:10 (#94),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:531:52: 531:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:532:33: 538:18 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:532:21: 532:30 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:532:21: 532:30 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:532:36: 532:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:533:21: 533:86 (#0),
                },
            ),
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:533:21: 533:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:533:21: 533:86 (#0),
                },
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:533:43: 533:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:533:21: 533:86 (#0),
                },
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:533:61: 533:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:533:21: 533:86 (#0),
                },
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:533:61: 533:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:533:21: 533:86 (#0),
                },
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:533:76: 533:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:535:38: 535:62 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:535:25: 535:35 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:535:25: 535:35 (#0),
            scope: scope[15],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:535:38: 535:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:536:21: 536:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:536:21: 536:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:537:21: 537:92 (#0),
                },
            ),
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:537:21: 537:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:537:21: 537:92 (#0),
                },
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:537:37: 537:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:537:21: 537:92 (#0),
                },
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:537:55: 537:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:537:21: 537:92 (#0),
                },
            ),
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:537:55: 537:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:537:21: 537:92 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:537:70: 537:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:537:21: 537:92 (#0),
                },
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:537:82: 537:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:542:17: 547:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:542:21: 542:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: std::string::Drain<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:543:21: 544:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:543:21: 543:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:544:32: 544:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:544:32: 544:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:544:32: 544:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:544:53: 544:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:544:53: 544:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:545:32: 545:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:546:28: 546:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _103,
                                ),
                                url/src/parser.rs:549:21: 549:87 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:548:21: 548:50 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:548:22: 548:33 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _103,
                                ),
                                url/src/parser.rs:549:21: 549:87 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:548:21: 548:50 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:548:35: 548:49 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:21: 549:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, (core::option::Option<u32>, core::option::Option<u32>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:21: 549:87 (#645),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(core::option::Option<u32>, core::option::Option<u32>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:21: 549:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:21: 549:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:51: 549:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:64: 549:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:76: 549:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:86: 549:87 (#646),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _104,
                                ),
                                url/src/parser.rs:549:21: 549:87 (#645),
                            ),
                        ),
                        pat_span: url/src/parser.rs:549:86: 549:87 (#646),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:86: 549:87 (#646),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:86: 549:87 (#646),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:86: 549:87 (#646),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _104,
                                ),
                                url/src/parser.rs:549:21: 549:87 (#645),
                            ),
                        ),
                        pat_span: url/src/parser.rs:549:21: 549:87 (#645),
                    },
                ),
            ),
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:549:21: 549:87 (#0),
            scope: scope[16],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:550:27: 561:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:551:36: 551:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:552:21: 552:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:553:35: 553:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:554:21: 554:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:555:21: 555:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:556:21: 556:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:557:27: 557:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:558:33: 558:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:559:21: 559:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:560:21: 560:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:522:13: 613:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:562:20: 613:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:563:17: 563:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:563:17: 563:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:563:45: 563:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:563:45: 563:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:564:34: 564:53 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:564:21: 564:31 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:564:21: 564:31 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:564:34: 564:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:564:34: 564:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:564:34: 564:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:565:34: 565:49 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:565:21: 565:31 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:565:21: 565:31 (#0),
            scope: scope[23],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:565:34: 565:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:565:34: 565:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:566:36: 566:46 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:566:21: 566:33 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:566:21: 566:33 (#0),
            scope: scope[24],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:567:32: 567:50 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:567:21: 567:29 (#0),
                    },
                ),
            ),
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:567:21: 567:29 (#0),
            scope: scope[25],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:568:17: 580:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:568:21: 568:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:568:62: 568:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:568:62: 568:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:569:28: 569:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                url/src/parser.rs:569:45: 569:58 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:569:28: 569:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:569:33: 569:41 (#0),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:570:45: 570:94 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:570:29: 570:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:570:29: 570:42 (#0),
            scope: scope[27],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:570:45: 570:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:570:45: 570:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:570:45: 570:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::str::Split<'{erased}, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:570:45: 570:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:570:45: 570:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:571:25: 578:26 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:571:28: 571:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:571:25: 578:26 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:571:63: 571:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:572:29: 572:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:572:29: 572:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:573:29: 573:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:573:29: 573:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:573:57: 573:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:571:25: 578:26 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:574:56: 574:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:571:25: 578:26 (#0),
                },
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:574:56: 574:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:574:39: 574:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _159,
                                ),
                                url/src/parser.rs:574:56: 574:75 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:574:39: 574:53 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:574:44: 574:52 (#0),
            scope: scope[29],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:575:29: 575:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:575:29: 575:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:575:57: 575:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:576:40: 576:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:576:40: 576:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:577:36: 577:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:582:40: 590:18 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:582:21: 582:37 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:582:21: 582:37 (#0),
            scope: scope[26],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:582:47: 582:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                url/src/parser.rs:582:57: 582:67 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:582:47: 582:54 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:582:52: 582:53 (#0),
            scope: scope[31],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:583:21: 587:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:583:24: 583:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:583:21: 587:22 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:583:24: 583:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:583:21: 587:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:583:36: 583:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:583:21: 587:22 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:583:36: 583:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:583:21: 587:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:583:49: 583:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:583:21: 587:22 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:583:49: 583:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:583:21: 587:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:583:61: 583:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:583:21: 587:22 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:583:61: 583:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:593:21: 593:94 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:592:21: 592:30 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:592:21: 592:30 (#0),
            scope: scope[30],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:593:21: 593:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:593:37: 593:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:593:55: 593:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:593:55: 593:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:593:60: 593:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:593:67: 593:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:593:77: 593:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:595:34: 595:51 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:595:21: 595:31 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:595:21: 595:31 (#0),
            scope: scope[32],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:595:34: 595:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _192,
                                ),
                                url/src/parser.rs:598:21: 598:87 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:597:21: 597:50 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:597:22: 597:33 (#0),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _192,
                                ),
                                url/src/parser.rs:598:21: 598:87 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:597:21: 597:50 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:597:35: 597:49 (#0),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:21: 598:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, (core::option::Option<u32>, core::option::Option<u32>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:21: 598:87 (#650),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(core::option::Option<u32>, core::option::Option<u32>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:21: 598:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:21: 598:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:51: 598:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:64: 598:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:76: 598:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:86: 598:87 (#651),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _193,
                                ),
                                url/src/parser.rs:598:21: 598:87 (#650),
                            ),
                        ),
                        pat_span: url/src/parser.rs:598:86: 598:87 (#651),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:86: 598:87 (#651),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:86: 598:87 (#651),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:86: 598:87 (#651),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _193,
                                ),
                                url/src/parser.rs:598:21: 598:87 (#650),
                            ),
                        ),
                        pat_span: url/src/parser.rs:598:21: 598:87 (#650),
                    },
                ),
            ),
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:598:21: 598:87 (#0),
            scope: scope[33],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:600:32: 600:47 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:600:21: 600:29 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:600:21: 600:29 (#0),
            scope: scope[34],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:600:32: 600:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:601:27: 612:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:602:36: 602:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:603:21: 603:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:604:35: 604:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:605:21: 605:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:606:21: 606:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:607:21: 607:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:608:27: 608:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:609:33: 609:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:610:21: 610:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:611:21: 611:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:615:16: 615:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                url/src/parser.rs:615:33: 615:46 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:615:16: 615:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:615:21: 615:29 (#0),
            scope: scope[40],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:617:17: 617:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:619:43: 622:22 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:619:25: 619:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:619:25: 619:40 (#0),
            scope: scope[40],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:620:25: 620:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_218).9: core::option::Option<u32>),
                                ),
                                url/src/parser.rs:619:49: 619:72 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:620:25: 620:32 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:620:30: 620:31 (#0),
            scope: scope[40],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:620:59: 620:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:620:37: 620:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:620:60: 620:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:620:62: 620:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:620:62: 620:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:621:33: 621:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:621:34: 621:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:621:35: 621:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:623:21: 623:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:623:21: 623:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:623:49: 623:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:624:24: 628:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:625:40: 625:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:626:41: 626:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:632:40: 635:22 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:632:25: 632:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:632:25: 632:37 (#0),
            scope: scope[40],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:632:46: 632:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:632:47: 632:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:632:69: 632:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:633:32: 633:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:633:26: 633:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:633:42: 633:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:633:43: 633:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _238,
                                ),
                                url/src/parser.rs:632:46: 632:93 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:634:25: 634:55 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:634:31: 634:32 (#0),
            scope: scope[40],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:634:59: 634:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:634:59: 634:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:634:74: 634:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:634:76: 634:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:636:21: 636:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:636:21: 636:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:636:49: 636:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _255,
                                ),
                                url/src/parser.rs:638:25: 638:96 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:637:25: 637:54 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:637:26: 637:37 (#0),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _255,
                                ),
                                url/src/parser.rs:638:25: 638:96 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:637:25: 637:54 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:637:39: 637:53 (#0),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:25: 638:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, (core::option::Option<u32>, core::option::Option<u32>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:25: 638:96 (#652),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(core::option::Option<u32>, core::option::Option<u32>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:25: 638:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:25: 638:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:55: 638:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:68: 638:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:89: 638:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:95: 638:96 (#653),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _256,
                                ),
                                url/src/parser.rs:638:25: 638:96 (#652),
                            ),
                        ),
                        pat_span: url/src/parser.rs:638:95: 638:96 (#653),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:95: 638:96 (#653),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:95: 638:96 (#653),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:95: 638:96 (#653),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _256,
                                ),
                                url/src/parser.rs:638:25: 638:96 (#652),
                            ),
                        ),
                        pat_span: url/src/parser.rs:638:25: 638:96 (#652),
                    },
                ),
            ),
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:638:25: 638:96 (#0),
            scope: scope[43],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:639:24: 644:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:640:40: 640:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:641:25: 641:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:642:25: 642:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:616:13: 695:14 (#0),
                },
            ),
        ),
        ty: parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:646:30: 646:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:616:13: 695:14 (#0),
                },
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:646:49: 646:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:616:13: 695:14 (#0),
                },
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:646:59: 646:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:648:21: 693:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:648:25: 648:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:648:21: 693:22 (#0),
                },
            ),
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:648:66: 648:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:648:21: 693:22 (#0),
                },
            ),
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:648:66: 648:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:649:44: 652:26 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:649:29: 649:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:649:29: 649:41 (#0),
            scope: scope[40],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:649:50: 649:97 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:649:51: 649:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:649:73: 649:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:650:36: 650:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:650:30: 650:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:650:46: 650:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:650:47: 650:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _278,
                                ),
                                url/src/parser.rs:649:50: 649:97 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:651:29: 651:59 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:651:35: 651:36 (#0),
            scope: scope[40],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:651:63: 651:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:651:63: 651:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:651:78: 651:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:651:80: 651:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:653:25: 653:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:653:25: 653:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:653:53: 653:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:654:25: 654:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:654:25: 654:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:654:43: 654:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:654:61: 654:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:654:61: 654:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:655:41: 660:26 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:655:29: 655:38 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:655:29: 655:38 (#0),
            scope: scope[50],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:655:41: 655:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:656:29: 656:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:657:29: 657:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:657:29: 657:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:657:34: 657:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:658:29: 658:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:658:29: 658:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:659:29: 659:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                },
            ),
        ),
        ty: parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:661:25: 661:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                },
            ),
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:662:29: 662:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:663:29: 663:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:664:29: 664:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:665:29: 665:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:666:29: 666:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                },
            ),
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:667:29: 667:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                },
            ),
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:668:29: 668:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:669:29: 669:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:661:25: 671:26 (#0),
                },
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:670:29: 670:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:673:25: 673:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:673:25: 673:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:673:53: 673:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:673:53: 673:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:674:42: 674:61 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:674:29: 674:39 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:674:29: 674:39 (#0),
            scope: scope[40],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:674:42: 674:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:674:42: 674:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:674:42: 674:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:675:42: 675:57 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:675:29: 675:39 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:675:29: 675:39 (#0),
            scope: scope[53],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:675:42: 675:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:675:42: 675:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:677:29: 677:93 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:676:29: 676:38 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:676:29: 676:38 (#0),
            scope: scope[54],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:677:29: 677:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:677:45: 677:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:677:63: 677:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:677:63: 677:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:677:68: 677:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:677:75: 677:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:677:87: 677:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _338,
                                ),
                                url/src/parser.rs:679:29: 679:100 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:678:29: 678:58 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:678:30: 678:41 (#0),
            scope: scope[55],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _338,
                                ),
                                url/src/parser.rs:679:29: 679:100 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:678:29: 678:58 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:678:43: 678:57 (#0),
            scope: scope[55],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:29: 679:100 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, (core::option::Option<u32>, core::option::Option<u32>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:29: 679:100 (#655),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(core::option::Option<u32>, core::option::Option<u32>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:29: 679:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:29: 679:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:59: 679:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:77: 679:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:89: 679:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:99: 679:100 (#656),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _339,
                                ),
                                url/src/parser.rs:679:29: 679:100 (#655),
                            ),
                        ),
                        pat_span: url/src/parser.rs:679:99: 679:100 (#656),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:99: 679:100 (#656),
            scope: scope[55],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:99: 679:100 (#656),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:99: 679:100 (#656),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _339,
                                ),
                                url/src/parser.rs:679:29: 679:100 (#655),
                            ),
                        ),
                        pat_span: url/src/parser.rs:679:29: 679:100 (#655),
                    },
                ),
            ),
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:679:29: 679:100 (#0),
            scope: scope[55],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:680:42: 680:59 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:680:29: 680:39 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:680:29: 680:39 (#0),
            scope: scope[56],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:680:42: 680:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:681:28: 692:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:682:44: 682:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:683:29: 683:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:684:43: 684:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:685:41: 685:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:686:39: 686:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:687:35: 687:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:688:35: 688:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:689:29: 689:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:690:29: 690:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:691:29: 691:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:697:13: 697:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:697:13: 697:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:697:41: 697:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:697:41: 697:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:698:30: 698:49 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:698:17: 698:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:698:17: 698:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:698:30: 698:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:698:30: 698:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:698:30: 698:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:699:30: 699:45 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:699:17: 699:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:699:17: 699:27 (#0),
            scope: scope[62],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:699:30: 699:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:699:30: 699:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:700:29: 700:93 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:700:17: 700:26 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:700:17: 700:26 (#0),
            scope: scope[63],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:700:29: 700:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:700:45: 700:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:700:63: 700:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:700:63: 700:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:700:68: 700:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:700:75: 700:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:700:87: 700:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _384,
                                ),
                                url/src/parser.rs:702:17: 702:88 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:701:17: 701:46 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:701:18: 701:29 (#0),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _384,
                                ),
                                url/src/parser.rs:702:17: 702:88 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:701:17: 701:46 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:701:31: 701:45 (#0),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:17: 702:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, parser::ParseError>, (core::option::Option<u32>, core::option::Option<u32>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:17: 702:88 (#657),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(core::option::Option<u32>, core::option::Option<u32>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:17: 702:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:17: 702:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::SchemeType,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:47: 702:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:65: 702:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:77: 702:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:87: 702:88 (#658),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _385,
                                ),
                                url/src/parser.rs:702:17: 702:88 (#657),
                            ),
                        ),
                        pat_span: url/src/parser.rs:702:87: 702:88 (#658),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:87: 702:88 (#658),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:87: 702:88 (#658),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:87: 702:88 (#658),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _385,
                                ),
                                url/src/parser.rs:702:17: 702:88 (#657),
                            ),
                        ),
                        pat_span: url/src/parser.rs:702:17: 702:88 (#657),
                    },
                ),
            ),
        ),
        ty: (core::option::Option<u32>, core::option::Option<u32>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:702:17: 702:88 (#0),
            scope: scope[64],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:703:30: 703:47 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:703:17: 703:27 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:703:17: 703:27 (#0),
            scope: scope[65],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:703:30: 703:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:704:16: 715:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:705:32: 705:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:706:17: 706:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:707:31: 707:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:708:29: 708:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:709:27: 709:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: host::HostInternal,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:710:23: 710:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:711:23: 711:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:712:17: 712:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:713:17: 713:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:714:17: 714:31 (#0),
            scope: scope[0],
        },
    },
]