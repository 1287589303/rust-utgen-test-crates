[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:299:32: 299:48 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::str::<impl str>::split::<'_, char>(move _4, const '.') -> [return: bb1, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:299:32: 299:58 (#0),
                    scope: scope[0],
                },
                kind: _2 = <core::str::Split<'_, char> as core::iter::Iterator>::collect::<std::vec::Vec<&str>>(move _3) -> [return: bb2, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:300:8: 300:20 (#0),
                    scope: scope[1],
                },
                kind: _10 = <std::vec::Vec<&str> as core::ops::Deref>::deref(move _11) -> [return: bb3, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &(*_10),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:300:8: 300:20 (#0),
                    scope: scope[1],
                },
                kind: _8 = core::slice::<impl [&str]>::last(move _9) -> [return: bb4, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &_8,
            StorageDead(_9),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = const "",
            _15 = &_16,
            _14 = &(*_15),
            _13 = core::option::Option::<&&str>::Some(move _14),
            _12 = &_13,
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:300:8: 300:33 (#0),
                    scope: scope[1],
                },
                kind: _6 = <core::option::Option<&&str> as core::cmp::PartialEq>::eq(move _7, move _12) -> [return: bb5, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:300:8: 300:33 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:301:9: 301:20 (#0),
                    scope: scope[1],
                },
                kind: _17 = std::vec::Vec::<&str>::pop(move _18) -> [return: bb7, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:300:5: 302:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            _5 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:300:5: 302:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:303:8: 303:19 (#0),
                    scope: scope[1],
                },
                kind: _21 = std::vec::Vec::<&str>::len(move _22) -> [return: bb10, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            _20 = Gt(move _21, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:303:8: 303:23 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _20) -> [0: bb12, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_24),
            _24 = parser::ParseError::InvalidIpv4Address,
            _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Err(move _24),
            StorageDead(_24),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb69,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _19 = const (),
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:306:33: 306:43 (#0),
                    scope: scope[1],
                },
                kind: _25 = std::vec::Vec::<u32>::new() -> [return: bb13, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _25),
            AscribeUserType(_25, o, UserTypeProjection { base: UserType(4), projs: [] }),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:307:17: 307:22 (#556),
                    scope: scope[2],
                },
                kind: _27 = <std::vec::Vec<&str> as core::iter::IntoIterator>::into_iter(move _28) -> [return: bb14, unwind: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            PlaceMention(_27),
            StorageLive(_29),
            _29 = move _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:307:5: 313:6 (#555),
                    scope: scope[3],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:307:5: 313:6 (#555),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb16, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &mut _29,
            _33 = &mut (*_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:307:17: 307:22 (#556),
                    scope: scope[3],
                },
                kind: _32 = <std::vec::IntoIter<&str> as core::iter::Iterator>::next(move _33) -> [return: bb17, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            PlaceMention(_32),
            _35 = discriminant(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:307:17: 307:22 (#556),
                    scope: scope[3],
                },
                kind: switchInt(move _35) -> [0: bb19, 1: bb20, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:307:17: 307:22 (#556),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:307:5: 313:6 (#555),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            _37 = ((_32 as Some).0: &str),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &(*_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:308:15: 308:37 (#0),
                    scope: scope[4],
                },
                kind: _39 = host::parse_ipv4number(move _40) -> [return: bb22, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = const (),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:313:5: 313:6 (#555),
                    scope: scope[2],
                },
                kind: drop(_29) -> [return: bb31, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            PlaceMention(_39),
            _42 = discriminant(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:308:9: 308:37 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _42) -> [0: bb24, 1: bb27, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:308:15: 308:37 (#0),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = discriminant(((_39 as Ok).0: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:308:9: 308:37 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _41) -> [0: bb26, 1: bb25, otherwise: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:309:13: 309:24 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb28, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:310:13: 310:21 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb30, imaginary: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_49),
            _49 = parser::ParseError::InvalidIpv4Address,
            _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Err(move _49),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:311:24: 311:66 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = ((((_39 as Ok).0: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_44),
            _44 = &mut _25,
            StorageLive(_45),
            _45 = _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:309:28: 309:43 (#0),
                    scope: scope[5],
                },
                kind: _38 = std::vec::Vec::<u32>::push(move _44, move _45) -> [return: bb29, unwind: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_39),
            StorageDead(_38),
            _31 = const (),
            StorageDead(_37),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
            _30 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:307:5: 313:6 (#555),
                    scope: scope[3],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_47),
            _47 = parser::ParseError::InvalidIpv4Address,
            _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Err(move _47),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:310:25: 310:67 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb64,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:313:5: 313:6 (#555),
                    scope: scope[2],
                },
                kind: drop(_27) -> [return: bb32, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            _52 = &mut _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:314:20: 314:33 (#0),
                    scope: scope[2],
                },
                kind: _51 = std::vec::Vec::<u32>::pop(move _52) -> [return: bb33, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageLive(_53),
            StorageLive(_54),
            _54 = const "a non-empty list of numbers",
            _53 = &(*_54),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:314:20: 314:71 (#0),
                    scope: scope[2],
                },
                kind: _50 = core::option::Option::<u32>::expect(move _51, move _53) -> [return: bb34, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_53),
            StorageDead(_51),
            FakeRead(ForLet(None), _50),
            StorageDead(_54),
            StorageLive(_55),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _50,
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = &_25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:316:32: 316:45 (#0),
                    scope: scope[6],
                },
                kind: _61 = std::vec::Vec::<u32>::len(move _62) -> [return: bb35, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            _60 = move _61 as u32 (IntToInt),
            StorageDead(_61),
            _63 = MulWithOverflow(const 8_u32, _60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:316:27: 316:53 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_63.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_u32, move _60) -> [success: bb36, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _59 = move (_63.0: u32),
            StorageDead(_60),
            _64 = Lt(_59, const 32_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:316:15: 316:53 (#0),
                    scope: scope[6],
                },
                kind: assert(move _64, "attempt to shift right by `{}`, which would overflow", _59) -> [success: bb37, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _58 = Shr(const core::num::<impl u32>::MAX, move _59),
            StorageDead(_59),
            _56 = Gt(move _57, move _58),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:316:8: 316:53 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _56) -> [0: bb39, otherwise: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            StorageLive(_66),
            _66 = parser::ParseError::InvalidIpv4Address,
            _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Err(move _66),
            StorageDead(_66),
            StorageDead(_56),
            StorageDead(_55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageDead(_57),
            _55 = const (),
            StorageDead(_56),
            StorageDead(_55),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = &_25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:319:8: 319:22 (#0),
                    scope: scope[6],
                },
                kind: _72 = <std::vec::Vec<u32> as core::ops::Deref>::deref(move _73) -> [return: bb40, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _71 = &(*_72),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:319:8: 319:22 (#0),
                    scope: scope[6],
                },
                kind: _70 = core::slice::<impl [u32]>::iter(move _71) -> [return: bb41, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _69 = &mut _70,
            StorageDead(_71),
            StorageLive(_74),
            _74 = {closure@url/src/host.rs:319:27: 319:30},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:319:8: 319:40 (#0),
                    scope: scope[6],
                },
                kind: _68 = <core::slice::Iter<'_, u32> as core::iter::Iterator>::any::<{closure@url/src/host.rs:319:27: 319:30}>(move _69, move _74) -> [return: bb42, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:319:8: 319:40 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _68) -> [0: bb44, otherwise: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_72),
            StorageDead(_70),
            StorageDead(_69),
            StorageLive(_76),
            _76 = parser::ParseError::InvalidIpv4Address,
            _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Err(move _76),
            StorageDead(_76),
            StorageDead(_68),
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            StorageDead(_72),
            StorageDead(_70),
            StorageDead(_69),
            _67 = const (),
            StorageDead(_68),
            StorageDead(_67),
            StorageLive(_77),
            StorageLive(_78),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            StorageLive(_83),
            _83 = &_25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:25: 322:39 (#0),
                    scope: scope[6],
                },
                kind: _82 = <std::vec::Vec<u32> as core::ops::Deref>::deref(move _83) -> [return: bb45, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _81 = &(*_82),
            StorageDead(_83),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:25: 322:39 (#0),
                    scope: scope[6],
                },
                kind: _80 = core::slice::<impl [u32]>::iter(move _81) -> [return: bb46, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:25: 322:51 (#0),
                    scope: scope[6],
                },
                kind: _79 = <core::slice::Iter<'_, u32> as core::iter::Iterator>::enumerate(move _80) -> [return: bb47, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:25: 322:51 (#561),
                    scope: scope[6],
                },
                kind: _78 = <core::iter::Enumerate<core::slice::Iter<'_, u32>> as core::iter::IntoIterator>::into_iter(move _79) -> [return: bb48, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_79),
            PlaceMention(_78),
            StorageLive(_84),
            _84 = move _78,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:5: 324:6 (#560),
                    scope: scope[7],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:5: 324:6 (#560),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb50, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_85),
            StorageLive(_86),
            StorageLive(_87),
            StorageLive(_88),
            _88 = &mut _84,
            _87 = &mut (*_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:25: 322:51 (#561),
                    scope: scope[7],
                },
                kind: _86 = <core::iter::Enumerate<core::slice::Iter<'_, u32>> as core::iter::Iterator>::next(move _87) -> [return: bb51, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            PlaceMention(_86),
            _89 = discriminant(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:25: 322:51 (#561),
                    scope: scope[7],
                },
                kind: switchInt(move _89) -> [0: bb53, 1: bb54, otherwise: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:25: 322:51 (#561),
                    scope: scope[7],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:5: 324:6 (#560),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb55, imaginary: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_91),
            _91 = (((_86 as Some).0: (usize, &u32)).0: usize),
            StorageLive(_92),
            _92 = (((_86 as Some).0: (usize, &u32)).1: &u32),
            StorageLive(_93),
            StorageLive(_94),
            _94 = _92,
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = _91,
            _97 = move _98 as u32 (IntToInt),
            StorageDead(_98),
            _99 = SubWithOverflow(const 3_u32, _97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:323:27: 323:47 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_99.1: bool), "attempt to compute `{} - {}`, which would overflow", const 3_u32, move _97) -> [success: bb56, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _77 = const (),
            StorageDead(_88),
            StorageDead(_86),
            StorageDead(_85),
            StorageDead(_84),
            StorageDead(_82),
            StorageDead(_78),
            StorageDead(_77),
            StorageLive(_102),
            StorageLive(_103),
            _103 = _50,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:325:8: 325:28 (#0),
                    scope: scope[6],
                },
                kind: _102 = <core::net::Ipv4Addr as core::convert::From<u32>>::from(move _103) -> [return: bb60, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _96 = move (_99.0: u32),
            StorageDead(_97),
            _100 = MulWithOverflow(const 8_u32, _96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:323:22: 323:48 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_100.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_u32, move _96) -> [success: bb57, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _95 = move (_100.0: u32),
            StorageDead(_96),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:323:17: 323:48 (#0),
                    scope: scope[8],
                },
                kind: _93 = <&u32 as core::ops::Shl<u32>>::shl(move _94, move _95) -> [return: bb58, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_95),
            StorageDead(_94),
            _101 = AddWithOverflow(_50, _93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:323:9: 323:48 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_101.1: bool), "attempt to compute `{} + {}`, which would overflow", _50, move _93) -> [success: bb59, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _50 = move (_101.0: u32),
            _85 = const (),
            StorageDead(_93),
            StorageDead(_92),
            StorageDead(_91),
            StorageDead(_88),
            StorageDead(_86),
            StorageDead(_85),
            _30 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:322:5: 324:6 (#560),
                    scope: scope[7],
                },
                kind: goto -> bb49,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Ok(move _102),
            StorageDead(_102),
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:326:1: 326:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_25) -> [return: bb61, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:326:1: 326:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb62, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:326:2: 326:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_34),
            StorageDead(_32),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:313:5: 313:6 (#555),
                    scope: scope[2],
                },
                kind: drop(_29) -> [return: bb65, unwind: bb73],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:313:5: 313:6 (#555),
                    scope: scope[2],
                },
                kind: drop(_27) -> [return: bb66, unwind: bb75],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:326:1: 326:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_25) -> [return: bb68, unwind: bb76],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb69,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:326:1: 326:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb70, unwind: bb77],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:326:2: 326:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb71,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:326:2: 326:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:313:5: 313:6 (#555),
                    scope: scope[2],
                },
                kind: drop(_29) -> [return: bb73, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:313:5: 313:6 (#555),
                    scope: scope[2],
                },
                kind: drop(_27) -> [return: bb75, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:307:21: 307:22 (#556),
                    scope: scope[2],
                },
                kind: drop(_28) -> [return: bb75, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:326:1: 326:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_25) -> [return: bb76, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:326:1: 326:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb77, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:298:1: 326:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::net::Ipv4Addr, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:298:35: 298:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/host.rs:298:26: 298:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:298:19: 298:24 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:298:19: 298:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:298:19: 298:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:299:32: 299:58 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:299:9: 299:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<&'{erased} str, std::alloc::Global>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        url/src/host.rs:299:20: 299:29 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: url/src/host.rs:299:9: 299:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Split<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:299:32: 299:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:299:32: 299:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:5: 302:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:8: 300:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<&'{erased} &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:8: 300:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:8: 300:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:8: 300:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:8: 300:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<&'{erased} str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:8: 300:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<&'{erased} &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:24: 300:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} &'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:24: 300:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:29: 300:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:29: 300:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:300:30: 300:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:301:9: 301:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<&'{erased} str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:301:9: 301:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:303:5: 305:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:303:8: 303:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:303:8: 303:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<&'{erased} str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:303:8: 303:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:303:24: 305:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:304:20: 304:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:306:33: 306:43 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:306:9: 306:20 (#0),
                    },
                ),
            ),
        ),
        ty: std::vec::Vec<u32, std::alloc::Global>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(2),
                            projs: [],
                        },
                        url/src/host.rs:306:22: 306:30 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: url/src/host.rs:306:9: 306:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:5: 313:6 (#555),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::IntoIter<&'{erased} str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:17: 307:22 (#556),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::vec::Vec<&'{erased} str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:17: 307:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                url/src/host.rs:307:17: 307:22 (#556),
                            ),
                        ),
                        pat_span: url/src/host.rs:307:17: 307:22 (#556),
                    },
                ),
            ),
        ),
        ty: std::vec::IntoIter<&'{erased} str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:17: 307:22 (#556),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:298:1: 326:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:17: 307:22 (#556),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:17: 307:22 (#556),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<&'{erased} str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:17: 307:22 (#556),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::IntoIter<&'{erased} str, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:17: 307:22 (#556),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:5: 313:6 (#555),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:5: 313:6 (#555),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _32,
                                ),
                                url/src/host.rs:307:17: 307:22 (#556),
                            ),
                        ),
                        pat_span: url/src/host.rs:307:9: 307:13 (#557),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:307:9: 307:13 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:308:9: 312:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::option::Option<u32>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:308:15: 308:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:308:32: 308:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:309:16: 309:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:309:13: 309:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                url/src/host.rs:308:15: 308:37 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:309:13: 309:24 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:309:21: 309:22 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<u32, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:309:28: 309:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:309:41: 309:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:310:25: 310:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:310:36: 310:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:311:24: 311:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:311:35: 311:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:314:20: 314:71 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:314:9: 314:17 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:314:9: 314:17 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:314:20: 314:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::vec::Vec<u32, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:314:20: 314:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:314:41: 314:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:314:41: 314:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:5: 318:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:8: 316:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:8: 316:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:15: 316:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:27: 316:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:32: 316:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:32: 316:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<u32, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:32: 316:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:27: 316:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:15: 316:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:316:54: 318:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:317:20: 317:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:319:5: 321:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:319:8: 319:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:319:8: 319:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:319:8: 319:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:319:8: 319:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:319:8: 319:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<u32, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:319:8: 319:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:99 ~ url[3b6e]::host::parse_ipv4addr::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} u32,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:319:27: 319:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:319:41: 321:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:320:20: 320:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:5: 324:6 (#560),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<core::slice::Iter<'{erased}, u32>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:51 (#561),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<core::slice::Iter<'{erased}, u32>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::vec::Vec<u32, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _78,
                                ),
                                url/src/host.rs:322:25: 322:51 (#561),
                            ),
                        ),
                        pat_span: url/src/host.rs:322:25: 322:51 (#561),
                    },
                ),
            ),
        ),
        ty: core::iter::Enumerate<core::slice::Iter<'{erased}, u32>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:51 (#561),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:51 (#561),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, &'{erased} u32)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:51 (#561),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<core::slice::Iter<'{erased}, u32>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:51 (#561),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<core::slice::Iter<'{erased}, u32>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:25: 322:51 (#561),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:5: 324:6 (#560),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:5: 324:6 (#560),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _86,
                                ),
                                url/src/host.rs:322:25: 322:51 (#561),
                            ),
                        ),
                        pat_span: url/src/host.rs:322:9: 322:21 (#562),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:10: 322:17 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _86,
                                ),
                                url/src/host.rs:322:25: 322:51 (#561),
                            ),
                        ),
                        pat_span: url/src/host.rs:322:9: 322:21 (#562),
                    },
                ),
            ),
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:322:19: 322:20 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:323:9: 323:48 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:323:17: 323:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:323:9: 323:48 (#0),
                },
            ),
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:323:17: 323:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:323:9: 323:48 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:323:22: 323:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:323:9: 323:48 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:323:27: 323:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:323:9: 323:48 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:323:32: 323:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:323:9: 323:48 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:323:32: 323:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:323:27: 323:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:323:22: 323:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:323:9: 323:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::net::Ipv4Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:325:8: 325:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:325:5: 325:29 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:325:23: 325:27 (#0),
            scope: scope[0],
        },
    },
]