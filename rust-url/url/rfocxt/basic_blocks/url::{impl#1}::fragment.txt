[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = ((*_1).9: core::option::Option<u32>),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &_1,
            _3 = {closure@url/src/lib.rs:1533:33: 1533:40} { self: move _4 },
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1533:9: 1536:11 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<u32>::map::<&str, {closure@url/src/lib.rs:1533:33: 1533:40}>(move _2, move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1537:6: 1537:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1532:5: 1537:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1532:31: 1532:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1532:21: 1532:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:1533:9: 1536:11 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1533:9: 1533:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:1533:9: 1536:11 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:416 ~ url[3b6e]::{impl#1}::fragment::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((u32,)) -> &'{erased} str, bound_vars: [] },
                (&'{erased} &'{erased} Url,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1533:33: 1536:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:1533:9: 1536:11 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1533:33: 1536:10 (#0),
            scope: scope[0],
        },
    },
]