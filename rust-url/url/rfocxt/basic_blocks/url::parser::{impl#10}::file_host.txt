[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(_1.0: core::str::Chars<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1081:25: 1081:45 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::str::Chars::<'_>::as_str(move _3) -> [return: bb1, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            _4 = const false,
            FakeRead(ForLet(None), _4),
            StorageLive(_5),
            _5 = const 0_usize,
            FakeRead(ForLet(None), _5),
            StorageLive(_6),
            _6 = const 0_usize,
            FakeRead(ForLet(None), _6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1085:18: 1085:35 (#0),
                    scope: scope[4],
                },
                kind: _9 = core::str::<impl str>::chars(move _10) -> [return: bb2, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1085:18: 1085:35 (#732),
                    scope: scope[4],
                },
                kind: _8 = <core::str::Chars<'_> as core::iter::IntoIterator>::into_iter(move _9) -> [return: bb3, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            StorageLive(_11),
            _11 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1085:9: 1092:10 (#731),
                    scope: scope[5],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1085:9: 1092:10 (#731),
                    scope: scope[5],
                },
                kind: falseUnwind -> [real: bb5, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut _11,
            _15 = &mut (*_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1085:18: 1085:35 (#732),
                    scope: scope[5],
                },
                kind: _14 = <core::str::Chars<'_> as core::iter::Iterator>::next(move _15) -> [return: bb6, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _17 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1085:18: 1085:35 (#732),
                    scope: scope[5],
                },
                kind: switchInt(move _17) -> [0: bb8, 1: bb9, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1085:18: 1085:35 (#732),
                    scope: scope[5],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1085:9: 1092:10 (#731),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = ((_14 as Some).0: char),
            StorageLive(_20),
            PlaceMention(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1086:13: 1086:20 (#0),
                    scope: scope[6],
                },
                kind: switchInt(_19) -> [47: bb12, 92: bb12, 63: bb12, 35: bb12, 9: bb13, 10: bb13, 13: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1085:9: 1092:10 (#731),
                    scope: scope[5],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = AddWithOverflow(_5, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1089:22: 1089:44 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", _5, const 1_usize) -> [success: bb16, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1087:17: 1087:39 (#0),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:78:9: 78:27 (#110),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = const (),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[5],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = const true,
            _20 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1088:53: 1088:77 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_22.0: usize),
            _20 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1089:22: 1089:44 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1091:22: 1091:34 (#0),
                    scope: scope[6],
                },
                kind: _23 = core::char::methods::<impl char>::len_utf8(move _24) -> [return: bb18, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _25 = AddWithOverflow(_6, _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1091:13: 1091:34 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", _6, move _23) -> [success: bb19, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = move (_25.0: usize),
            StorageDead(_23),
            _13 = const (),
            StorageDead(_19),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1085:9: 1092:10 (#731),
                    scope: scope[5],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1095:29: 1095:42 (#0),
                    scope: scope[8],
                },
                kind: _28 = <parser::Input<'_> as core::clone::Clone>::clone(move _29) -> [return: bb21, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            FakeRead(ForLet(None), _28),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &mut _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1097:30: 1097:48 (#0),
                    scope: scope[9],
                },
                kind: _33 = <parser::Input<'_> as core::iter::Iterator>::by_ref(move _34) -> [return: bb22, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _32 = &mut (*_33),
            StorageDead(_34),
            StorageLive(_35),
            _35 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1097:30: 1097:72 (#0),
                    scope: scope[9],
                },
                kind: _31 = <&mut parser::Input<'_> as core::iter::Iterator>::take(move _32, move _35) -> [return: bb23, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_32),
            FakeRead(ForLet(None), _31),
            StorageDead(_33),
            StorageLive(_36),
            _36 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1098:16: 1098:33 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _36) -> [0: bb30, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            StorageLive(_38),
            _38 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1099:28: 1099:48 (#0),
                    scope: scope[10],
                },
                kind: _37 = <core::iter::Take<&mut parser::Input<'_>> as core::iter::Iterator>::collect::<std::string::String>(move _38) -> [return: bb25, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1099:17: 1099:25 (#0),
                    scope: scope[10],
                },
                kind: drop(_26) -> [return: bb26, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = move _37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1099:47: 1099:48 (#0),
                    scope: scope[10],
                },
                kind: drop(_37) -> [return: bb28, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = move _37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1099:47: 1099:48 (#0),
                    scope: scope[10],
                },
                kind: drop(_37) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &_26,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1100:29: 1100:38 (#0),
                    scope: scope[10],
                },
                kind: _40 = <std::string::String as core::ops::Deref>::deref(move _41) -> [return: bb29, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            _39 = &(*_40),
            _27 = move _39,
            _30 = const (),
            StorageDead(_39),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1098:13: 1104:14 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = move _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1102:26: 1102:36 (#736),
                    scope: scope[10],
                },
                kind: _43 = <core::iter::Take<&mut parser::Input<'_>> as core::iter::IntoIterator>::into_iter(move _44) -> [return: bb31, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            PlaceMention(_43),
            StorageLive(_45),
            _45 = move _43,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1102:17: 1102:39 (#735),
                    scope: scope[11],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1102:17: 1102:39 (#735),
                    scope: scope[11],
                },
                kind: falseUnwind -> [real: bb33, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &mut _45,
            _48 = &mut (*_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1102:26: 1102:36 (#736),
                    scope: scope[11],
                },
                kind: _47 = <core::iter::Take<&mut parser::Input<'_>> as core::iter::Iterator>::next(move _48) -> [return: bb34, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            PlaceMention(_47),
            _50 = discriminant(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1102:26: 1102:36 (#736),
                    scope: scope[11],
                },
                kind: switchInt(move _50) -> [0: bb36, 1: bb37, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1102:26: 1102:36 (#736),
                    scope: scope[11],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1102:17: 1102:39 (#735),
                    scope: scope[11],
                },
                kind: falseEdge -> [real: bb38, imaginary: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _46 = const (),
            StorageDead(_49),
            StorageDead(_47),
            StorageDead(_46),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1102:17: 1102:39 (#735),
                    scope: scope[11],
                },
                kind: goto -> bb32,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = const (),
            StorageDead(_49),
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_45),
            StorageDead(_43),
            StorageDead(_42),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &(*_2),
            StorageLive(_56),
            StorageLive(_57),
            _57 = _6,
            _56 = core::ops::RangeTo::<usize> { end: move _57 },
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1103:38: 1103:47 (#0),
                    scope: scope[10],
                },
                kind: _54 = <str as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _55, move _56) -> [return: bb39, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            _53 = &(*_54),
            _52 = &(*_53),
            _27 = move _52,
            _30 = const (),
            StorageDead(_52),
            StorageDead(_54),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1098:13: 1104:14 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1106:12: 1106:45 (#0),
                    scope: scope[9],
                },
                kind: _59 = parser::is_windows_drive_letter(move _60) -> [return: bb41, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1106:12: 1106:45 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _59) -> [0: bb46, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageLive(_62),
            StorageLive(_63),
            StorageLive(_64),
            StorageLive(_65),
            _65 = const "",
            _64 = &(*_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1107:31: 1107:45 (#0),
                    scope: scope[9],
                },
                kind: _63 = <str as std::string::ToString>::to_string(move _64) -> [return: bb43, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageLive(_66),
            _66 = move _1,
            _62 = (const false, move _63, move _66),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1107:52: 1107:53 (#0),
                    scope: scope[9],
                },
                kind: drop(_63) -> [return: bb44, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            _0 = core::result::Result::<(bool, std::string::String, parser::Input<'_>), parser::ParseError>::Ok(move _62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1107:53: 1107:54 (#0),
                    scope: scope[9],
                },
                kind: drop(_62) -> [return: bb45, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_62),
            StorageDead(_65),
            StorageDead(_59),
            StorageDead(_58),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1110:5: 1110:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb51, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            _58 = const (),
            StorageDead(_59),
            StorageDead(_58),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            _69 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1109:19: 1109:39 (#0),
                    scope: scope[9],
                },
                kind: _68 = <str as std::string::ToString>::to_string(move _69) -> [return: bb47, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageLive(_70),
            _70 = move _28,
            _67 = (const true, move _68, move _70),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1109:50: 1109:51 (#0),
                    scope: scope[9],
                },
                kind: drop(_68) -> [return: bb48, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            _0 = core::result::Result::<(bool, std::string::String, parser::Input<'_>), parser::ParseError>::Ok(move _67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1109:51: 1109:52 (#0),
                    scope: scope[9],
                },
                kind: drop(_67) -> [return: bb49, unwind: bb55],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1110:5: 1110:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb50, unwind: bb56],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1110:6: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1110:6: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1110:6: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1109:51: 1109:52 (#0),
                    scope: scope[9],
                },
                kind: drop(_67) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1107:53: 1107:54 (#0),
                    scope: scope[9],
                },
                kind: drop(_62) -> [return: bb55, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1110:5: 1110:6 (#0),
                    scope: scope[4],
                },
                kind: drop(_26) -> [return: bb56, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1078:5: 1110:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(bool, std::string::String, parser::Input<'{erased}>), parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1078:39: 1078:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1078:29: 1078:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1078:22: 1078:27 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1078:22: 1078:27 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1078:22: 1078:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1081:25: 1081:45 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1081:13: 1081:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1081:13: 1081:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1081:25: 1081:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1082:37: 1082:42 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1082:13: 1082:34 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1082:13: 1082:34 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1083:37: 1083:38 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1083:13: 1083:34 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1083:13: 1083:34 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1084:25: 1084:26 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1084:13: 1084:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1084:13: 1084:22 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:9: 1092:10 (#731),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:18: 1085:35 (#732),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:18: 1085:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:18: 1085:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                url/src/parser.rs:1085:18: 1085:35 (#732),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1085:18: 1085:35 (#732),
                    },
                ),
            ),
        ),
        ty: core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:18: 1085:35 (#732),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1078:5: 1110:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:18: 1085:35 (#732),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:18: 1085:35 (#732),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:18: 1085:35 (#732),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:18: 1085:35 (#732),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:9: 1092:10 (#731),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:9: 1092:10 (#731),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                url/src/parser.rs:1085:18: 1085:35 (#732),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1085:13: 1085:14 (#733),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1085:13: 1085:14 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1086:13: 1090:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1087:43: 1087:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1089:22: 1089:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1091:22: 1091:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1091:22: 1091:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1091:13: 1091:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: url/src/parser.rs:1093:13: 1093:21 (#0),
                    },
                ),
            ),
        ),
        ty: std::string::String,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        url/src/parser.rs:1093:23: 1093:29 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: url/src/parser.rs:1093:13: 1093:21 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: None,
                        pat_span: url/src/parser.rs:1094:13: 1094:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1094:13: 1094:21 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1095:29: 1095:42 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1095:13: 1095:26 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1095:13: 1095:26 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1095:29: 1095:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1098:13: 1104:14 (#0),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1098:13: 1104:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1097:30: 1097:72 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1097:17: 1097:27 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Take<&'{erased} mut parser::Input<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1097:17: 1097:27 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1097:30: 1097:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1097:30: 1097:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1097:30: 1097:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1097:54: 1097:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1098:13: 1104:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1098:16: 1098:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1099:28: 1099:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Take<&'{erased} mut parser::Input<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1099:28: 1099:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1100:17: 1100:38 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1100:28: 1100:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1100:17: 1100:38 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1100:29: 1100:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1100:17: 1100:38 (#0),
                },
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1100:30: 1100:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1102:17: 1102:39 (#735),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Take<&'{erased} mut parser::Input<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1102:26: 1102:36 (#736),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Take<&'{erased} mut parser::Input<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1102:26: 1102:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _43,
                                ),
                                url/src/parser.rs:1102:26: 1102:36 (#736),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1102:26: 1102:36 (#736),
                    },
                ),
            ),
        ),
        ty: core::iter::Take<&'{erased} mut parser::Input<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1102:26: 1102:36 (#736),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1102:26: 1102:36 (#736),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1102:26: 1102:36 (#736),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Take<&'{erased} mut parser::Input<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1102:26: 1102:36 (#736),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Take<&'{erased} mut parser::Input<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1102:26: 1102:36 (#736),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1102:17: 1102:39 (#735),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1102:17: 1102:39 (#735),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1103:17: 1103:47 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1103:28: 1103:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1103:17: 1103:47 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1103:28: 1103:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1103:17: 1103:47 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1103:38: 1103:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1103:17: 1103:47 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1103:29: 1103:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1103:17: 1103:47 (#0),
                },
            ),
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1103:39: 1103:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1103:41: 1103:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1106:9: 1108:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1106:12: 1106:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1106:36: 1106:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1106:46: 1108:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (bool, std::string::String, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1107:23: 1107:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1107:31: 1107:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1107:31: 1107:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1107:31: 1107:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1107:47: 1107:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (bool, std::string::String, parser::Input<'{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1109:12: 1109:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1109:9: 1109:52 (#0),
                },
            ),
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1109:19: 1109:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1109:9: 1109:52 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1109:19: 1109:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1109:9: 1109:52 (#0),
                },
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1109:41: 1109:50 (#0),
            scope: scope[0],
        },
    },
]