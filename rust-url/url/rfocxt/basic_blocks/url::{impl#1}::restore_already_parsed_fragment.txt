[
    BasicBlockData {
        statements: [
            PlaceMention(_2),
            _3 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1596:16: 1596:34 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _3) -> [1: bb1, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1596:16: 1596:34 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb2, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &((_2 as Some).0: std::string::String),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).9: core::option::Option<u32>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1597:21: 1597:50 (#0),
                    scope: scope[1],
                },
                kind: _6 = core::option::Option::<u32>::is_none(move _7) -> [return: bb3, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1597:21: 1597:50 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _6) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = const (),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1598:47: 1598:71 (#0),
                    scope: scope[1],
                },
                kind: _12 = std::string::String::len(move _13) -> [return: bb6, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1597:13: 1597:51 (#430),
                    scope: scope[1],
                },
                kind: _8 = core::panicking::panic(const "assertion failed: self.fragment_start.is_none()") -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1598:40: 1598:72 (#0),
                    scope: scope[1],
                },
                kind: _11 = parser::to_u32(move _12) -> [return: bb7, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1598:40: 1598:81 (#0),
                    scope: scope[1],
                },
                kind: _10 = core::result::Result::<u32, parser::ParseError>::unwrap(move _11) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _9 = core::option::Option::<u32>::Some(move _10),
            StorageDead(_10),
            ((*_1).9: core::option::Option<u32>) = move _9,
            StorageDead(_9),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut ((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1599:13: 1599:41 (#0),
                    scope: scope[1],
                },
                kind: _14 = std::string::String::push(move _15, const '#') -> [return: bb9, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut ((*_1).0: std::string::String),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1600:41: 1600:49 (#0),
                    scope: scope[1],
                },
                kind: _19 = <std::string::String as core::ops::Deref>::deref(move _20) -> [return: bb10, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &(*_19),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1600:13: 1600:50 (#0),
                    scope: scope[1],
                },
                kind: _16 = std::string::String::push_str(move _17, move _18) -> [return: bb11, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_19),
            StorageDead(_16),
            _0 = const (),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1596:9: 1601:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1596:9: 1601:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1602:5: 1602:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1602:6: 1602:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1602:5: 1602:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1595:5: 1602:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1595:76: 1595:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1595:40: 1595:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:1595:61: 1595:75 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1595:51: 1595:59 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1595:51: 1595:59 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<std::string::String>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1595:51: 1595:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1596:16: 1596:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                url/src/lib.rs:1596:37: 1596:45 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1596:16: 1596:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1596:21: 1596:33 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1597:13: 1597:51 (#430),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1597:21: 1597:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1597:21: 1597:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1597:13: 1597:51 (#430),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1597:13: 1597:51 (#430),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1598:35: 1598:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1598:40: 1598:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1598:40: 1598:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1598:47: 1598:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1598:47: 1598:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1599:13: 1599:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1599:13: 1599:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1600:13: 1600:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1600:13: 1600:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1600:41: 1600:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1600:41: 1600:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1600:41: 1600:49 (#0),
            scope: scope[0],
        },
    },
]