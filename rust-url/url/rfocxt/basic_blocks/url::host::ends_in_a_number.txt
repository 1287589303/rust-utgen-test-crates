[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:242:21: 242:38 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::str::<impl str>::rsplit::<'_, char>(move _3, const '.') -> [return: bb1, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:243:16: 243:28 (#0),
                    scope: scope[1],
                },
                kind: _5 = <core::str::RSplit<'_, char> as core::iter::Iterator>::next(move _6) -> [return: bb2, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:243:16: 243:37 (#0),
                    scope: scope[1],
                },
                kind: _4 = core::option::Option::<&str>::unwrap(move _5) -> [return: bb3, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:244:19: 244:34 (#0),
                    scope: scope[2],
                },
                kind: _8 = core::str::<impl str>::is_empty(move _9) -> [return: bb4, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:244:19: 244:34 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _8) -> [0: bb10, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:245:29: 245:41 (#0),
                    scope: scope[4],
                },
                kind: _10 = <core::str::RSplit<'_, char> as core::iter::Iterator>::next(move _11) -> [return: bb6, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            PlaceMention(_10),
            _12 = discriminant(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:245:16: 245:26 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _12) -> [1: bb7, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:245:16: 245:26 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_10 as Some).0: &str),
            _7 = _13,
            StorageDead(_13),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:244:16: 252:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const false,
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_15),
            _15 = _4,
            _7 = &(*_15),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:244:16: 252:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:253:9: 253:24 (#0),
                    scope: scope[3],
                },
                kind: _17 = core::str::<impl str>::is_empty(move _18) -> [return: bb12, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:253:9: 253:24 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _17) -> [0: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:253:79: 255:6 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:253:28: 253:43 (#0),
                    scope: scope[3],
                },
                kind: _23 = core::str::<impl str>::as_bytes(move _24) -> [return: bb15, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _22 = &(*_23),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:253:28: 253:50 (#0),
                    scope: scope[3],
                },
                kind: _21 = core::slice::<impl [u8]>::iter(move _22) -> [return: bb16, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = &mut _21,
            StorageDead(_22),
            StorageLive(_25),
            _25 = {closure@url/src/host.rs:253:55: 253:58},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:253:28: 253:78 (#0),
                    scope: scope[3],
                },
                kind: _19 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::all::<{closure@url/src/host.rs:253:55: 253:58}>(move _20, move _25) -> [return: bb17, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:253:28: 253:78 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _19) -> [0: bb19, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            _0 = const true,
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = const (),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:257:5: 257:27 (#0),
                    scope: scope[3],
                },
                kind: _28 = host::parse_ipv4number(move _29) -> [return: bb21, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = &_28,
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:257:5: 257:35 (#0),
                    scope: scope[3],
                },
                kind: _0 = core::result::Result::<core::option::Option<u32>, ()>::is_ok(move _27) -> [return: bb22, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_2),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:258:2: 258:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:258:2: 258:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:258:2: 258:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:241:1: 258:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:241:37: 241:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/host.rs:241:28: 241:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:241:21: 241:26 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:241:21: 241:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:241:21: 241:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:242:21: 242:38 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:242:9: 242:18 (#0),
                    },
                ),
            ),
        ),
        ty: core::str::RSplit<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:242:9: 242:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:242:21: 242:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:243:16: 243:37 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:243:9: 243:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:243:9: 243:13 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:243:16: 243:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::str::RSplit<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:243:16: 243:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:244:16: 252:6 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:244:9: 244:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:244:9: 244:13 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:244:19: 244:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:244:19: 244:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:245:9: 249:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} str>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:245:29: 245:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:245:9: 249:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::str::RSplit<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:245:29: 245:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:245:16: 245:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _10,
                                ),
                                url/src/host.rs:245:29: 245:41 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:245:16: 245:26 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:245:21: 245:25 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:245:9: 249:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:247:16: 249:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:251:9: 251:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:5: 255:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:9: 253:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:9: 253:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:28: 253:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:28: 253:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:28: 253:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:28: 253:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:28: 253:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:28: 253:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:93 ~ url[3b6e]::host::ends_in_a_number::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:55: 253:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:253:79: 255:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:257:5: 257:35 (#0),
                },
            ),
        ),
        ty: &'{erased} core::result::Result<core::option::Option<u32>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:257:5: 257:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:257:5: 257:35 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::option::Option<u32>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:257:5: 257:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:257:5: 257:35 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:257:22: 257:26 (#0),
            scope: scope[0],
        },
    },
]