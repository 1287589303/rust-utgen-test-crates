[
    BasicBlockData {
        statements: [
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1426:9: 1439:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1426:9: 1439:10 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb2, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1427:34: 1427:47 (#0),
                    scope: scope[0],
                },
                kind: _5 = <parser::Input<'_> as core::clone::Clone>::clone(move _6) -> [return: bb3, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1428:19: 1428:36 (#0),
                    scope: scope[1],
                },
                kind: _7 = parser::Input::<'_>::next_utf8(move _8) -> [return: bb4, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            PlaceMention(_7),
            _11 = discriminant(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1428:13: 1428:36 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb10, 1: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1428:19: 1428:36 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1428:13: 1428:36 (#0),
                    scope: scope[1],
                },
                kind: switchInt((((_7 as Some).0: (char, &str)).0: char)) -> [63: bb8, 35: bb9, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1432:17: 1432:34 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1429:17: 1429:31 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1429:34: 1429:48 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1437:25: 1437:37 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1430:21: 1430:42 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &fake shallow _7,
            _10 = &fake shallow (((_7 as Some).0: (char, &str)).0: char),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).4: parser::Context),
            StorageLive(_14),
            StorageLive(_15),
            _15 = parser::Context::UrlParser,
            _14 = &_15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1429:52: 1429:86 (#0),
                    scope: scope[1],
                },
                kind: _12 = <parser::Context as core::cmp::PartialEq>::eq(move _13, move _14) -> [return: bb13, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1429:52: 1429:86 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            FakeRead(ForMatchGuard, _9),
            FakeRead(ForMatchGuard, _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1429:52: 1429:86 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &fake shallow _7,
            _10 = &fake shallow (((_7 as Some).0: (char, &str)).0: char),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &((*_1).4: parser::Context),
            StorageLive(_18),
            StorageLive(_19),
            _19 = parser::Context::UrlParser,
            _18 = &_19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1429:52: 1429:86 (#0),
                    scope: scope[1],
                },
                kind: _16 = <parser::Context as core::cmp::PartialEq>::eq(move _17, move _18) -> [return: bb17, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1429:52: 1429:86 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _16) -> [0: bb19, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            FakeRead(ForMatchGuard, _9),
            FakeRead(ForMatchGuard, _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1429:52: 1429:86 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = (((_7 as Some).0: (char, &str)).0: char),
            StorageLive(_22),
            _22 = (((_7 as Some).0: (char, &str)).1: &str),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &(*_1),
            StorageLive(_25),
            _25 = _21,
            StorageLive(_26),
            StorageLive(_27),
            _27 = &_2,
            _26 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1433:21: 1433:57 (#0),
                    scope: scope[2],
                },
                kind: _23 = parser::Parser::<'_>::check_url_code_point(move _24, move _25, move _26) -> [return: bb21, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_27),
            StorageDead(_23),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut ((*_1).0: std::string::String),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1435:33: 1435:70 (#0),
                    scope: scope[2],
                },
                kind: _30 = percent_encoding::utf8_percent_encode(move _31, const percent_encoding::CONTROLS) -> [return: bb22, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1434:21: 1435:71 (#0),
                    scope: scope[2],
                },
                kind: _28 = <std::string::String as core::iter::Extend<&str>>::extend::<percent_encoding::PercentEncode<'_>>(move _29, move _30) -> [return: bb23, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_28),
            _4 = const (),
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_5),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1426:9: 1439:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1440:6: 1440:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:1425:5: 1440:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1425:80: 1425:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1425:44: 1425:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            url/src/parser.rs:1425:66: 1425:75 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1425:55: 1425:64 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1425:55: 1425:64 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1425:55: 1425:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:1426:9: 1439:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1426:9: 1439:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1425:5: 1440:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/parser.rs:1427:34: 1427:47 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1427:17: 1427:31 (#0),
                    },
                ),
            ),
        ),
        ty: parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1427:17: 1427:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1427:34: 1427:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<(char, &'{erased} str)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1428:19: 1428:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1428:19: 1428:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} core::option::Option<(char, &'{erased} str)>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1428:19: 1428:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            FakeBorrow,
        ),
        ty: &'{erased} char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1428:19: 1428:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1429:17: 1429:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1429:52: 1429:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: &'{erased} parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1429:52: 1429:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: &'{erased} parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1429:68: 1429:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1429:68: 1429:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1429:52: 1429:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: &'{erased} parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1429:52: 1429:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: &'{erased} parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1429:68: 1429:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1429:68: 1429:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1430:21: 1430:42 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1430:21: 1430:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                url/src/parser.rs:1428:19: 1428:36 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1432:17: 1432:34 (#0),
                    },
                ),
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1432:23: 1432:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                url/src/parser.rs:1428:19: 1428:36 (#0),
                            ),
                        ),
                        pat_span: url/src/parser.rs:1432:17: 1432:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1432:26: 1432:32 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1433:21: 1433:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1433:21: 1433:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1433:47: 1433:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1433:50: 1433:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1433:50: 1433:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1434:21: 1435:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1434:21: 1434:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: percent_encoding::PercentEncode<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1435:33: 1435:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1435:53: 1435:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/parser.rs:1428:13: 1438:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:1437:25: 1437:37 (#0),
            scope: scope[0],
        },
    },
]