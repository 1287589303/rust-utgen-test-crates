[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _10 = Le(const 0_u16, _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:44:9: 44:14 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb2, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:44:9: 44:14 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = Le(const 10_u16, _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:45:9: 45:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [0: bb4, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:45:9: 45:16 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb17, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = Le(const 100_u16, _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:46:9: 46:18 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb6, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:46:9: 46:18 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = Le(const 1000_u16, _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:47:9: 47:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb9, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:43:11: 43:12 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:47:9: 47:20 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = Le(const 10000_u16, _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:48:9: 48:22 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb7, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const 5_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:48:26: 48:27 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = Le(_1, const u16::MAX),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:48:9: 48:22 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb7, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = Le(_1, const 9999_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:47:9: 47:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = Le(_1, const 999_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:46:9: 46:18 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = Le(_1, const 99_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:45:9: 45:16 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = Le(_1, const 9_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:44:9: 44:14 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _11) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const 1_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:44:18: 44:19 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const 2_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:45:20: 45:21 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const 3_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:46:22: 46:23 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const 4_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:47:24: 47:25 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/slicing.rs:50:2: 50:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:42:28: 42:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/slicing.rs:42:20: 42:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/slicing.rs:42:17: 42:18 (#0),
                            ),
                        ),
                        pat_span: url/src/slicing.rs:42:17: 42:18 (#0),
                    },
                ),
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:42:17: 42:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:48:9: 48:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:48:9: 48:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:47:9: 47:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:47:9: 47:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:46:9: 46:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:46:9: 46:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:45:9: 45:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:45:9: 45:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:44:9: 44:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/slicing.rs:44:9: 44:14 (#0),
            scope: scope[0],
        },
    },
]