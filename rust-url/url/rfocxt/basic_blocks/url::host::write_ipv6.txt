[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:180:20: 180:35 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::net::Ipv6Addr::segments(move _4) -> [return: bb1, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_3,
            _8 = &(*_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:181:42: 181:74 (#0),
                    scope: scope[1],
                },
                kind: _7 = host::longest_zero_sequence(move _8) -> [return: bb2, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            PlaceMention(_7),
            StorageLive(_5),
            _5 = (_7.0: isize),
            StorageLive(_6),
            _6 = (_7.1: isize),
            StorageDead(_9),
            StorageDead(_7),
            StorageLive(_10),
            _10 = const 0_isize,
            FakeRead(ForLet(None), _10),
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:183:5: 200:6 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:183:5: 200:6 (#0),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            _14 = _10,
            _13 = Lt(move _14, const 8_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:183:11: 183:16 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _13) -> [0: bb49, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = _10,
            StorageLive(_18),
            _18 = _5,
            _16 = Eq(move _17, move _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:184:12: 184:31 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _16) -> [0: bb26, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut (*_2),
            StorageLive(_23),
            StorageLive(_24),
            _24 = const ":",
            _23 = &(*_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:185:13: 185:29 (#0),
                    scope: scope[3],
                },
                kind: _21 = core::fmt::Formatter::<'_>::write_str(move _22, move _23) -> [return: bb7, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:185:13: 185:30 (#523),
                    scope: scope[3],
                },
                kind: _20 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _21) -> [return: bb8, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            PlaceMention(_20),
            _25 = discriminant(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:185:13: 185:30 (#523),
                    scope: scope[3],
                },
                kind: switchInt(move _25) -> [0: bb11, 1: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:185:13: 185:30 (#523),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:185:29: 185:30 (#524),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = ((_20 as Continue).0: ()),
            _19 = _29,
            StorageDead(_29),
            StorageDead(_24),
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = _10,
            _31 = Eq(move _32, const 0_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:186:16: 186:22 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _31) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = ((_20 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_28),
            _28 = _26,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:185:13: 185:30 (#523),
                    scope: scope[5],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _28) -> [return: bb13, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &mut (*_2),
            StorageLive(_37),
            StorageLive(_38),
            _38 = const ":",
            _37 = &(*_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:187:17: 187:33 (#0),
                    scope: scope[3],
                },
                kind: _35 = core::fmt::Formatter::<'_>::write_str(move _36, move _37) -> [return: bb16, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            _30 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:186:13: 188:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:187:17: 187:34 (#526),
                    scope: scope[3],
                },
                kind: _34 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _35) -> [return: bb17, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            PlaceMention(_34),
            _39 = discriminant(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:187:17: 187:34 (#526),
                    scope: scope[3],
                },
                kind: switchInt(move _39) -> [0: bb20, 1: bb19, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:187:17: 187:34 (#526),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:187:33: 187:34 (#527),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = ((_34 as Continue).0: ()),
            _33 = _43,
            StorageDead(_43),
            StorageDead(_38),
            StorageDead(_34),
            StorageDead(_33),
            _30 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:186:13: 188:14 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            _40 = ((_34 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_42),
            _42 = _40,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:187:17: 187:34 (#526),
                    scope: scope[9],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _42) -> [return: bb22, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_40),
            StorageDead(_38),
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageLive(_44),
            StorageLive(_45),
            _45 = _6,
            _44 = Lt(move _45, const 8_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:189:16: 189:32 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _44) -> [0: bb25, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageLive(_46),
            _46 = _6,
            _10 = move _46,
            StorageDead(_46),
            _15 = const (),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:184:9: 194:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            _11 = const (),
            StorageDead(_44),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:184:9: 194:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut (*_2),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = [const ""],
            _54 = &_55,
            _53 = &(*_54),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            StorageLive(_63),
            _63 = _10,
            _62 = move _63 as usize (IntToInt),
            StorageDead(_63),
            _64 = Len(_3),
            _65 = Lt(_62, _64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:195:27: 195:47 (#0),
                    scope: scope[3],
                },
                kind: assert(move _65, "index out of bounds: the length is {} but the index is {}", move _64, _62) -> [success: bb28, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = &_3[_62],
            _60 = &(*_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:195:20: 195:24 (#31),
                    scope: scope[3],
                },
                kind: _59 = core::fmt::rt::Argument::<'_>::new_lower_hex::<u16>(move _60) -> [return: bb29, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            _58 = [move _59],
            StorageDead(_59),
            _57 = &_58,
            _56 = &(*_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#31),
                    scope: scope[3],
                },
                kind: _52 = core::fmt::Arguments::<'_>::new_v1::<1, 1>(move _53, move _56) -> [return: bb30, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:9: 632:55 (#30),
                    scope: scope[3],
                },
                kind: _50 = core::fmt::Formatter::<'_>::write_fmt(move _51, move _52) -> [return: bb31, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:195:9: 195:49 (#529),
                    scope: scope[3],
                },
                kind: _49 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _50) -> [return: bb32, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            PlaceMention(_49),
            _66 = discriminant(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:195:9: 195:49 (#529),
                    scope: scope[3],
                },
                kind: switchInt(move _66) -> [0: bb35, 1: bb34, otherwise: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:195:9: 195:49 (#529),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:195:48: 195:49 (#530),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb36, imaginary: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_70),
            _70 = ((_49 as Continue).0: ()),
            _48 = _70,
            StorageDead(_70),
            StorageDead(_62),
            StorageDead(_61),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_49),
            StorageDead(_48),
            StorageLive(_71),
            StorageLive(_72),
            StorageLive(_73),
            _73 = _10,
            _72 = Lt(move _73, const 7_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:196:12: 196:17 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _72) -> [0: bb39, otherwise: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_67),
            _67 = ((_49 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_69),
            _69 = _67,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:195:9: 195:49 (#529),
                    scope: scope[13],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _69) -> [return: bb37, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            StorageDead(_67),
            StorageDead(_62),
            StorageDead(_61),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_49),
            StorageDead(_48),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            StorageLive(_77),
            _77 = &mut (*_2),
            StorageLive(_78),
            StorageLive(_79),
            _79 = const ":",
            _78 = &(*_79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:197:13: 197:29 (#0),
                    scope: scope[3],
                },
                kind: _76 = core::fmt::Formatter::<'_>::write_str(move _77, move _78) -> [return: bb40, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            _71 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:196:9: 198:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:197:13: 197:30 (#532),
                    scope: scope[3],
                },
                kind: _75 = <core::result::Result<(), core::fmt::Error> as core::ops::Try>::branch(move _76) -> [return: bb41, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            PlaceMention(_75),
            _80 = discriminant(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:197:13: 197:30 (#532),
                    scope: scope[3],
                },
                kind: switchInt(move _80) -> [0: bb44, 1: bb43, otherwise: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:197:13: 197:30 (#532),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:197:29: 197:30 (#533),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb45, imaginary: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_84),
            _84 = ((_75 as Continue).0: ()),
            _74 = _84,
            StorageDead(_84),
            StorageDead(_79),
            StorageDead(_75),
            StorageDead(_74),
            _71 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:196:9: 198:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_81),
            _81 = ((_75 as Break).0: core::result::Result<core::convert::Infallible, core::fmt::Error>),
            StorageLive(_83),
            _83 = _81,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:197:13: 197:30 (#532),
                    scope: scope[17],
                },
                kind: _0 = <core::result::Result<(), core::fmt::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, core::fmt::Error>>>::from_residual(move _83) -> [return: bb46, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_81),
            StorageDead(_79),
            StorageDead(_75),
            StorageDead(_74),
            StorageDead(_72),
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_71),
            _85 = AddWithOverflow(_10, const 1_isize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:199:9: 199:15 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_85.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_isize) -> [success: bb48, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move (_85.0: isize),
            _12 = const (),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:183:5: 200:6 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_87),
            _11 = const (),
            StorageDead(_87),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            StorageLive(_89),
            _89 = (),
            _0 = core::result::Result::<(), core::fmt::Error>::Ok(move _89),
            StorageDead(_89),
            StorageDead(_10),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:202:2: 202:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:202:2: 202:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb53,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:202:2: 202:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:179:1: 202:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:179:58: 179:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/host.rs:179:21: 179:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:179:15: 179:19 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:179:15: 179:19 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} core::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:179:15: 179:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/host.rs:179:35: 179:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:179:32: 179:33 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:179:32: 179:33 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:179:32: 179:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:180:20: 180:35 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:180:9: 180:17 (#0),
                    },
                ),
            ),
        ),
        ty: [u16; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:180:9: 180:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:180:20: 180:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                url/src/host.rs:181:42: 181:74 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:181:9: 181:39 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:181:10: 181:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                url/src/host.rs:181:42: 181:74 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:181:9: 181:39 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:181:26: 181:38 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, isize),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:181:42: 181:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u16; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:181:64: 181:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u16; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:181:64: 181:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:182:17: 182:18 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:182:9: 182:14 (#0),
                    },
                ),
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:182:9: 182:14 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:183:5: 200:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:179:1: 202:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:183:5: 200:6 (#520),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:183:11: 183:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:183:5: 200:6 (#520),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:183:11: 183:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:184:9: 194:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:184:12: 184:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:184:12: 184:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:184:17: 184:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:13: 185:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:13: 185:30 (#523),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:13: 185:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:13: 185:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:25: 185:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:25: 185:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:29: 185:30 (#524),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                url/src/host.rs:185:13: 185:30 (#523),
                            ),
                        ),
                        pat_span: url/src/host.rs:185:29: 185:30 (#524),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:29: 185:30 (#524),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:29: 185:30 (#524),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:29: 185:30 (#524),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                url/src/host.rs:185:13: 185:30 (#523),
                            ),
                        ),
                        pat_span: url/src/host.rs:185:13: 185:30 (#523),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:185:13: 185:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:186:13: 188:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:186:16: 186:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:186:16: 186:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:17: 187:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:17: 187:34 (#526),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:17: 187:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:17: 187:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:29: 187:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:29: 187:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:33: 187:34 (#527),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                url/src/host.rs:187:17: 187:34 (#526),
                            ),
                        ),
                        pat_span: url/src/host.rs:187:33: 187:34 (#527),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:33: 187:34 (#527),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:33: 187:34 (#527),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:33: 187:34 (#527),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _34,
                                ),
                                url/src/host.rs:187:17: 187:34 (#526),
                            ),
                        ),
                        pat_span: url/src/host.rs:187:17: 187:34 (#526),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:187:17: 187:34 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:189:13: 193:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:189:16: 189:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:189:13: 193:14 (#0),
                },
            ),
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:189:16: 189:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:190:21: 190:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:189:13: 193:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:191:20: 193:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:9: 195:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:9: 195:49 (#529),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:9: 632:55 (#30),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:16: 195:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#31),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:19: 195:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:19: 195:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:19: 195:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#31),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#31),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:632:24: 632:54 (#31),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:20: 195:24 (#31),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:27: 195:47 (#31),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:27: 195:47 (#31),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:36: 195:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:36: 195:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:27: 195:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:27: 195:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:48: 195:49 (#530),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _49,
                                ),
                                url/src/host.rs:195:9: 195:49 (#529),
                            ),
                        ),
                        pat_span: url/src/host.rs:195:48: 195:49 (#530),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:48: 195:49 (#530),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:48: 195:49 (#530),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:48: 195:49 (#530),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _49,
                                ),
                                url/src/host.rs:195:9: 195:49 (#529),
                            ),
                        ),
                        pat_span: url/src/host.rs:195:9: 195:49 (#529),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:195:9: 195:49 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:196:9: 198:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:196:12: 196:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:196:12: 196:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:13: 197:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, core::fmt::Error>, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:13: 197:30 (#532),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:13: 197:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:13: 197:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:25: 197:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:25: 197:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:29: 197:30 (#533),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _75,
                                ),
                                url/src/host.rs:197:13: 197:30 (#532),
                            ),
                        ),
                        pat_span: url/src/host.rs:197:29: 197:30 (#533),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:29: 197:30 (#533),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:29: 197:30 (#533),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:29: 197:30 (#533),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _75,
                                ),
                                url/src/host.rs:197:13: 197:30 (#532),
                            ),
                        ),
                        pat_span: url/src/host.rs:197:13: 197:30 (#532),
                    },
                ),
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:197:13: 197:30 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (isize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:199:9: 199:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:183:5: 200:6 (#520),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:183:5: 200:6 (#520),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:183:5: 200:6 (#520),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:183:5: 200:6 (#520),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:201:8: 201:10 (#0),
            scope: scope[0],
        },
    },
]