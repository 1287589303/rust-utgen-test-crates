[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:307:50: 307:61 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::str::<impl str>::len(move _6) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:307:28: 307:62 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::string::String::with_capacity(move _5) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_7),
            _7 = (_1.0: core::option::Option<&Url>),
            StorageLive(_8),
            _8 = (_1.1: core::option::Option<&dyn for<'a> core::ops::Fn(&'a str) -> std::borrow::Cow<'_, [u8]>>),
            StorageLive(_9),
            _9 = (_1.2: core::option::Option<&dyn core::ops::Fn(parser::SyntaxViolation)>),
            StorageLive(_10),
            _10 = parser::Context::UrlParser,
            _3 = parser::Parser::<'_> { serialization: move _4, base_url: move _7, query_encoding_override: move _8, violation_fn: move _9, context: move _10 },
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:312:9: 312:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_11),
            _11 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:306:9: 313:26 (#0),
                    scope: scope[0],
                },
                kind: _0 = parser::Parser::<'_>::parse_url(move _3, move _11) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:314:6: 314:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:313:25: 313:26 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:305:5: 314:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Url, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:305:40: 305:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: ParseOptions<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:305:18: 305:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:305:31: 305:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:305:24: 305:29 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:305:24: 305:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:305:24: 305:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:306:9: 313:26 (#0),
                },
            ),
        ),
        ty: parser::Parser<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:306:9: 312:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:307:28: 307:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:306:9: 313:26 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:307:50: 307:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:306:9: 313:26 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:307:50: 307:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} Url>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:308:23: 308:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&str,)>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }, Binder { value: Projection(Output = std::borrow::Cow<'_, [u8]>), bound_vars: [Region(BrNamed(DefId(20:140 ~ form_urlencoded[21d3]::EncodingOverride::'_), '_))] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:309:38: 309:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::ops::Fn<(parser::SyntaxViolation,)>), bound_vars: [] }, Binder { value: Projection(Output = ()), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:310:27: 310:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::Context,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:311:22: 311:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/lib.rs:306:9: 313:26 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:313:20: 313:25 (#0),
            scope: scope[0],
        },
    },
]