[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:330:17: 330:33 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::str::<impl str>::as_bytes(move _3) -> [return: bb1, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:331:15: 331:26 (#0),
                    scope: scope[1],
                },
                kind: _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb2, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            _6 = const false,
            FakeRead(ForLet(None), _6),
            StorageLive(_7),
            _7 = [const 0_u16, const 0_u16, const 0_u16, const 0_u16, const 0_u16, const 0_u16, const 0_u16, const 0_u16],
            FakeRead(ForLet(None), _7),
            StorageLive(_8),
            _8 = const 0_usize,
            FakeRead(ForLet(None), _8),
            StorageLive(_9),
            _9 = core::option::Option::<usize>::None,
            FakeRead(ForLet(None), _9),
            StorageLive(_10),
            _10 = const 0_usize,
            FakeRead(ForLet(None), _10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _4,
            _12 = Lt(move _13, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:338:8: 338:15 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _12) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_15),
            _15 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _15),
            StorageDead(_15),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb160,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _11 = const (),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = const 0_usize,
            _20 = Len((*_2)),
            _21 = Lt(_19, _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:342:8: 342:16 (#0),
                    scope: scope[7],
                },
                kind: assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb5, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = (*_2)[_19],
            _17 = Eq(move _18, const 58_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:342:8: 342:24 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _17) -> [0: bb10, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = const 1_usize,
            _26 = Len((*_2)),
            _27 = Lt(_25, _26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:343:12: 343:20 (#0),
                    scope: scope[7],
                },
                kind: assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> [success: bb7, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = (*_2)[_25],
            _23 = Ne(move _24, const 58_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:343:12: 343:28 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _23) -> [0: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_29),
            _29 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _29),
            StorageDead(_29),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb160,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            _22 = const (),
            StorageDead(_23),
            StorageDead(_22),
            _10 = const 2_usize,
            _8 = const 1_usize,
            StorageLive(_30),
            _30 = core::option::Option::<usize>::Some(const 1_usize),
            _9 = move _30,
            StorageDead(_30),
            _16 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:342:5: 349:6 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            _16 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:342:5: 349:6 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:351:5: 402:6 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:351:5: 402:6 (#0),
                    scope: scope[7],
                },
                kind: falseUnwind -> [real: bb13, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_33),
            StorageLive(_34),
            _34 = _10,
            StorageLive(_35),
            _35 = _4,
            _33 = Lt(move _34, move _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:351:11: 351:18 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _33) -> [0: bb62, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _8,
            _37 = Eq(move _38, const 8_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:352:12: 352:30 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _37) -> [0: bb16, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageLive(_40),
            _40 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _40),
            StorageDead(_40),
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb159,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            _36 = const (),
            StorageDead(_37),
            StorageDead(_36),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            _44 = _10,
            _45 = Len((*_2)),
            _46 = Lt(_44, _45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:355:12: 355:20 (#0),
                    scope: scope[7],
                },
                kind: assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> [success: bb17, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = (*_2)[_44],
            _42 = Eq(move _43, const 58_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:355:12: 355:28 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _42) -> [0: bb24, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:356:16: 356:42 (#0),
                    scope: scope[7],
                },
                kind: _49 = core::option::Option::<usize>::is_some(move _50) -> [return: bb19, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:356:16: 356:42 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _49) -> [0: bb21, otherwise: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageLive(_52),
            _52 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _52),
            StorageDead(_52),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb159,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            _48 = const (),
            StorageDead(_49),
            StorageDead(_48),
            _53 = AddWithOverflow(_10, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:359:13: 359:19 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_53.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb22, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move (_53.0: usize),
            _54 = AddWithOverflow(_8, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:360:13: 360:31 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", _8, const 1_usize) -> [success: bb23, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = move (_54.0: usize),
            StorageLive(_55),
            StorageLive(_56),
            _56 = _8,
            _55 = core::option::Option::<usize>::Some(move _56),
            StorageDead(_56),
            _9 = move _55,
            StorageDead(_55),
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_43),
            _41 = const (),
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_57),
            _57 = _10,
            FakeRead(ForLet(None), _57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = _4,
            StorageLive(_60),
            StorageLive(_61),
            _61 = _57,
            _62 = AddWithOverflow(_61, const 4_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:365:33: 365:42 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_62.1: bool), "attempt to compute `{} + {}`, which would overflow", move _61, const 4_usize) -> [success: bb25, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _60 = move (_62.0: usize),
            StorageDead(_61),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:365:19: 365:43 (#0),
                    scope: scope[8],
                },
                kind: _58 = core::cmp::min::<usize>(move _59, move _60) -> [return: bb26, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_59),
            FakeRead(ForLet(None), _58),
            StorageLive(_63),
            _63 = const 0_u16,
            FakeRead(ForLet(None), _63),
            StorageLive(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:367:9: 375:10 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:367:9: 375:10 (#0),
                    scope: scope[10],
                },
                kind: falseUnwind -> [real: bb28, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_65),
            StorageLive(_66),
            _66 = _10,
            StorageLive(_67),
            _67 = _58,
            _65 = Lt(move _66, move _67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:367:15: 367:22 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _65) -> [0: bb39, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = _10,
            _72 = Len((*_2)),
            _73 = Lt(_71, _72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:368:20: 368:28 (#0),
                    scope: scope[10],
                },
                kind: assert(move _73, "index out of bounds: the length is {} but the index is {}", move _72, _71) -> [success: bb30, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _70 = (*_2)[_71],
            _69 = move _70 as char (IntToInt),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:368:19: 368:50 (#0),
                    scope: scope[10],
                },
                kind: _68 = core::char::methods::<impl char>::to_digit(move _69, const 16_u32) -> [return: bb31, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_69),
            PlaceMention(_68),
            _74 = discriminant(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:368:13: 368:50 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _74) -> [0: bb34, 1: bb33, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:368:19: 368:50 (#0),
                    scope: scope[10],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:369:17: 369:28 (#0),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb35, imaginary: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _64 = const (),
            StorageDead(_71),
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[10],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_75),
            _75 = ((_68 as Some).0: u32),
            StorageLive(_76),
            StorageLive(_77),
            _77 = _63,
            _78 = MulWithOverflow(_77, const 16_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:370:29: 370:41 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_78.1: bool), "attempt to compute `{} * {}`, which would overflow", move _77, const 16_u16) -> [success: bb36, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _76 = move (_78.0: u16),
            StorageDead(_77),
            StorageLive(_79),
            StorageLive(_80),
            _80 = _75,
            _79 = move _80 as u16 (IntToInt),
            StorageDead(_80),
            _81 = AddWithOverflow(_76, _79),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:370:29: 370:56 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_81.1: bool), "attempt to compute `{} + {}`, which would overflow", move _76, move _79) -> [success: bb37, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _63 = move (_81.0: u16),
            StorageDead(_79),
            StorageDead(_76),
            _82 = AddWithOverflow(_10, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:371:21: 371:27 (#0),
                    scope: scope[11],
                },
                kind: assert(!move (_82.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb38, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move (_82.0: usize),
            _32 = const (),
            StorageDead(_75),
            StorageDead(_71),
            StorageDead(_68),
            StorageDead(_65),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:367:9: 375:10 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
            StorageDead(_66),
            StorageLive(_85),
            _64 = const (),
            StorageDead(_85),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[10],
                },
                kind: goto -> bb40,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_64),
            StorageLive(_87),
            StorageLive(_88),
            StorageLive(_89),
            _89 = _10,
            StorageLive(_90),
            _90 = _4,
            _88 = Lt(move _89, move _90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:376:12: 376:19 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _88) -> [0: bb56, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_89),
            StorageLive(_91),
            _91 = _10,
            _92 = Len((*_2)),
            _93 = Lt(_91, _92),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:377:19: 377:27 (#0),
                    scope: scope[10],
                },
                kind: assert(move _93, "index out of bounds: the length is {} but the index is {}", move _92, _91) -> [success: bb42, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            PlaceMention((*_2)[_91]),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:377:13: 377:27 (#0),
                    scope: scope[10],
                },
                kind: switchInt((*_2)[_91]) -> [46: bb44, 58: bb45, otherwise: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_113),
            _113 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _113),
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:394:22: 394:64 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb158,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:378:17: 378:21 (#0),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb46, imaginary: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:388:17: 388:21 (#0),
                    scope: scope[10],
                },
                kind: falseEdge -> [real: bb51, imaginary: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_94),
            StorageLive(_95),
            StorageLive(_96),
            _96 = _10,
            StorageLive(_97),
            _97 = _57,
            _95 = Eq(move _96, move _97),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:379:24: 379:34 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _95) -> [0: bb48, otherwise: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageDead(_96),
            StorageLive(_99),
            _99 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _99),
            StorageDead(_99),
            StorageDead(_95),
            StorageDead(_94),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[10],
                },
                kind: goto -> bb158,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageDead(_96),
            _94 = const (),
            StorageDead(_95),
            StorageDead(_94),
            StorageLive(_100),
            _100 = _57,
            _10 = move _100,
            StorageDead(_100),
            StorageLive(_101),
            StorageLive(_102),
            StorageLive(_103),
            _103 = _8,
            _102 = Gt(move _103, const 6_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:383:24: 383:41 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _102) -> [0: bb50, otherwise: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            StorageLive(_105),
            _105 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _105),
            StorageDead(_105),
            StorageDead(_102),
            StorageDead(_101),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[10],
                },
                kind: goto -> bb158,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_103),
            _101 = const (),
            StorageDead(_102),
            StorageDead(_101),
            _6 = const true,
            _87 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:378:25: 387:18 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _106 = AddWithOverflow(_10, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:389:21: 389:27 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_106.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb52, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move (_106.0: usize),
            StorageLive(_107),
            StorageLive(_108),
            _108 = _10,
            StorageLive(_109),
            _109 = _4,
            _107 = Eq(move _108, move _109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:390:24: 390:32 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _107) -> [0: bb54, otherwise: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_108),
            StorageLive(_111),
            _111 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _111),
            StorageDead(_111),
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[10],
                },
                kind: goto -> bb158,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
            StorageDead(_108),
            _87 = const (),
            StorageDead(_107),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:392:21: 392:22 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:376:9: 396:10 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
            StorageDead(_89),
            _87 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:376:9: 396:10 (#0),
                    scope: scope[10],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            StorageLive(_114),
            StorageLive(_115),
            _115 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:397:12: 397:20 (#0),
                    scope: scope[10],
                },
                kind: switchInt(move _115) -> [0: bb59, otherwise: bb58],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = const (),
            StorageDead(_115),
            StorageDead(_114),
            StorageDead(_63),
            StorageDead(_58),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _114 = const (),
            StorageDead(_115),
            StorageDead(_114),
            StorageLive(_117),
            _117 = _63,
            StorageLive(_118),
            _118 = _8,
            _119 = Len(_7),
            _120 = Lt(_118, _119),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:400:9: 400:30 (#0),
                    scope: scope[10],
                },
                kind: assert(move _120, "index out of bounds: the length is {} but the index is {}", move _119, _118) -> [success: bb60, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7[_118] = move _117,
            StorageDead(_117),
            StorageDead(_118),
            _121 = AddWithOverflow(_8, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:401:9: 401:27 (#0),
                    scope: scope[10],
                },
                kind: assert(!move (_121.1: bool), "attempt to compute `{} + {}`, which would overflow", _8, const 1_usize) -> [success: bb61, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = move (_121.0: usize),
            _32 = const (),
            StorageDead(_63),
            StorageDead(_58),
            StorageDead(_57),
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:351:5: 402:6 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            StorageLive(_123),
            _31 = const (),
            StorageDead(_123),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb63,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
            StorageLive(_125),
            StorageLive(_126),
            _126 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:404:8: 404:16 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _126) -> [0: bb124, otherwise: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_127),
            StorageLive(_128),
            StorageLive(_129),
            _129 = _8,
            _128 = Gt(move _129, const 6_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:405:12: 405:29 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _128) -> [0: bb66, otherwise: bb65],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
            StorageLive(_131),
            _131 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _131),
            StorageDead(_131),
            StorageDead(_128),
            StorageDead(_127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb157,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
            _127 = const (),
            StorageDead(_128),
            StorageDead(_127),
            StorageLive(_132),
            _132 = const 0_i32,
            FakeRead(ForLet(None), _132),
            StorageLive(_133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:409:9: 447:10 (#0),
                    scope: scope[12],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:409:9: 447:10 (#0),
                    scope: scope[12],
                },
                kind: falseUnwind -> [real: bb68, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_134),
            StorageLive(_135),
            _135 = _10,
            StorageLive(_136),
            _136 = _4,
            _134 = Lt(move _135, move _136),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:409:15: 409:22 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _134) -> [0: bb121, otherwise: bb69],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_135),
            StorageLive(_137),
            StorageLive(_138),
            StorageLive(_139),
            _139 = _132,
            _138 = Gt(move _139, const 0_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:410:16: 410:32 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _138) -> [0: bb80, otherwise: bb70],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_139),
            StorageLive(_140),
            StorageLive(_141),
            _141 = _132,
            _140 = Lt(move _141, const 4_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:411:20: 411:36 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _140) -> [0: bb78, otherwise: bb71],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
            StorageLive(_142),
            StorageLive(_143),
            _143 = _10,
            StorageLive(_144),
            _144 = _4,
            _142 = Lt(move _143, move _144),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:411:41: 411:48 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _142) -> [0: bb77, otherwise: bb72],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
            StorageDead(_143),
            StorageLive(_145),
            StorageLive(_146),
            StorageLive(_147),
            _147 = _10,
            _148 = Len((*_2)),
            _149 = Lt(_147, _148),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:411:52: 411:60 (#0),
                    scope: scope[12],
                },
                kind: assert(move _149, "index out of bounds: the length is {} but the index is {}", move _148, _147) -> [success: bb73, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _146 = (*_2)[_147],
            _145 = Eq(move _146, const 46_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:411:52: 411:68 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _145) -> [0: bb76, otherwise: bb74],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_147),
            StorageDead(_146),
            _150 = AddWithOverflow(_10, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:412:21: 412:27 (#0),
                    scope: scope[12],
                },
                kind: assert(!move (_150.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb75, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move (_150.0: usize),
            _137 = const (),
            StorageDead(_145),
            StorageDead(_142),
            StorageDead(_140),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:410:13: 416:14 (#0),
                    scope: scope[12],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_147),
            StorageDead(_146),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_144),
            StorageDead(_143),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_141),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb79,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_152),
            _152 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _152),
            StorageDead(_152),
            StorageDead(_145),
            StorageDead(_142),
            StorageDead(_140),
            StorageDead(_138),
            StorageDead(_137),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb155,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_139),
            _137 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:410:13: 416:14 (#0),
                    scope: scope[12],
                },
                kind: goto -> bb81,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_138),
            StorageDead(_137),
            StorageLive(_153),
            _153 = core::option::Option::<u16>::None,
            FakeRead(ForLet(None), _153),
            StorageLive(_154),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:419:13: 435:14 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:419:13: 435:14 (#0),
                    scope: scope[13],
                },
                kind: falseUnwind -> [real: bb83, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_155),
            StorageLive(_156),
            _156 = _10,
            StorageLive(_157),
            _157 = _4,
            _155 = Lt(move _156, move _157),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:419:19: 419:26 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _155) -> [0: bb104, otherwise: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
            StorageDead(_156),
            StorageLive(_158),
            StorageLive(_159),
            _159 = _10,
            _160 = Len((*_2)),
            _161 = Lt(_159, _160),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:420:35: 420:43 (#0),
                    scope: scope[13],
                },
                kind: assert(move _161, "index out of bounds: the length is {} but the index is {}", move _160, _159) -> [success: bb85, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            PlaceMention((*_2)[_159]),
            _162 = Le(const 48_u8, (*_2)[_159]),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:421:25: 421:36 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _162) -> [0: bb86, otherwise: bb88],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _154 = const (),
            StorageDead(_159),
            StorageDead(_158),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[13],
                },
                kind: goto -> bb105,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:421:21: 421:22 (#0),
                    scope: scope[13],
                },
                kind: falseEdge -> [real: bb89, imaginary: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _163 = Le((*_2)[_159], const 57_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:421:25: 421:36 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _163) -> [0: bb86, otherwise: bb87],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_164),
            _164 = (*_2)[_159],
            StorageLive(_165),
            _165 = _164,
            _166 = SubWithOverflow(_165, const 48_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:421:40: 421:48 (#0),
                    scope: scope[15],
                },
                kind: assert(!move (_166.1: bool), "attempt to compute `{} - {}`, which would overflow", move _165, const 48_u8) -> [success: bb90, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _158 = move (_166.0: u8),
            StorageDead(_165),
            StorageDead(_164),
            FakeRead(ForLet(None), _158),
            StorageDead(_159),
            StorageLive(_168),
            PlaceMention(_153),
            _169 = discriminant(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:424:17: 424:33 (#0),
                    scope: scope[14],
                },
                kind: switchInt(move _169) -> [0: bb92, 1: bb93, otherwise: bb91],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:424:23: 424:33 (#0),
                    scope: scope[14],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:425:21: 425:25 (#0),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb96, imaginary: bb93],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:424:17: 424:33 (#0),
                    scope: scope[14],
                },
                kind: switchInt(((_153 as Some).0: u16)) -> [0: bb95, otherwise: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_175),
            _175 = &mut ((_153 as Some).0: u16),
            StorageLive(_176),
            StorageLive(_177),
            _177 = (*_175),
            _178 = MulWithOverflow(_177, const 10_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:428:30: 428:37 (#0),
                    scope: scope[16],
                },
                kind: assert(!move (_178.1: bool), "attempt to compute `{} * {}`, which would overflow", move _177, const 10_u16) -> [success: bb98, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:426:21: 426:28 (#0),
                    scope: scope[14],
                },
                kind: falseEdge -> [real: bb97, imaginary: bb94],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_170),
            StorageLive(_171),
            StorageLive(_172),
            _172 = _158,
            _171 = move _172 as u16 (IntToInt),
            StorageDead(_172),
            _170 = core::option::Option::<u16>::Some(move _171),
            StorageDead(_171),
            _153 = move _170,
            _168 = const (),
            StorageDead(_170),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:425:59: 425:60 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb102,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_174),
            _174 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _174),
            StorageDead(_174),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:426:32: 426:74 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb153,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _176 = move (_178.0: u16),
            StorageDead(_177),
            StorageLive(_179),
            StorageLive(_180),
            _180 = _158,
            _179 = move _180 as u16 (IntToInt),
            StorageDead(_180),
            _181 = AddWithOverflow(_176, _179),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:428:30: 428:52 (#0),
                    scope: scope[16],
                },
                kind: assert(!move (_181.1: bool), "attempt to compute `{} + {}`, which would overflow", move _176, move _179) -> [success: bb99, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_175) = move (_181.0: u16),
            StorageDead(_179),
            StorageDead(_176),
            StorageLive(_182),
            StorageLive(_183),
            _183 = (*_175),
            _182 = Gt(move _183, const 255_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:429:28: 429:36 (#0),
                    scope: scope[16],
                },
                kind: switchInt(move _182) -> [0: bb101, otherwise: bb100],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_183),
            StorageLive(_185),
            _185 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _185),
            StorageDead(_185),
            StorageDead(_182),
            StorageDead(_175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[14],
                },
                kind: goto -> bb153,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_183),
            _168 = const (),
            StorageDead(_182),
            StorageDead(_175),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:432:21: 432:22 (#0),
                    scope: scope[14],
                },
                kind: goto -> bb102,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_168),
            _186 = AddWithOverflow(_10, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:434:17: 434:23 (#0),
                    scope: scope[14],
                },
                kind: assert(!move (_186.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb103, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = move (_186.0: usize),
            _32 = const (),
            StorageDead(_158),
            StorageDead(_155),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:419:13: 435:14 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb82,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_157),
            StorageDead(_156),
            StorageLive(_188),
            _154 = const (),
            StorageDead(_188),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[13],
                },
                kind: goto -> bb105,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_155),
            StorageDead(_154),
            StorageLive(_190),
            PlaceMention(_153),
            _191 = discriminant(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:437:44: 437:51 (#0),
                    scope: scope[17],
                },
                kind: switchInt(move _191) -> [1: bb106, otherwise: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:437:44: 437:51 (#0),
                    scope: scope[17],
                },
                kind: falseEdge -> [real: bb107, imaginary: bb111],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_192),
            _192 = ((_153 as Some).0: u16),
            StorageLive(_193),
            StorageLive(_194),
            StorageLive(_195),
            _195 = _8,
            _196 = Len(_7),
            _197 = Lt(_195, _196),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:438:17: 438:38 (#0),
                    scope: scope[17],
                },
                kind: assert(move _197, "index out of bounds: the length is {} but the index is {}", move _196, _195) -> [success: bb108, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _194 = _7[_195],
            _198 = MulWithOverflow(_194, const 256_u16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:438:17: 438:46 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_198.1: bool), "attempt to compute `{} * {}`, which would overflow", move _194, const 256_u16) -> [success: bb109, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _193 = move (_198.0: u16),
            StorageDead(_194),
            StorageLive(_199),
            _199 = _192,
            _200 = AddWithOverflow(_193, _199),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:438:17: 438:50 (#0),
                    scope: scope[17],
                },
                kind: assert(!move (_200.1: bool), "attempt to compute `{} + {}`, which would overflow", move _193, move _199) -> [success: bb110, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _190 = move (_200.0: u16),
            StorageDead(_199),
            StorageDead(_193),
            StorageDead(_195),
            StorageDead(_192),
            StorageLive(_203),
            _203 = _8,
            _204 = Len(_7),
            _205 = Lt(_203, _204),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:437:13: 437:34 (#0),
                    scope: scope[13],
                },
                kind: assert(move _205, "index out of bounds: the length is {} but the index is {}", move _204, _203) -> [success: bb112, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_202),
            _202 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _202),
            StorageDead(_202),
            StorageDead(_190),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[13],
                },
                kind: goto -> bb154,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7[_203] = move _190,
            StorageDead(_190),
            StorageDead(_203),
            _206 = AddWithOverflow(_132, const 1_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:442:13: 442:30 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_206.1: bool), "attempt to compute `{} + {}`, which would overflow", _132, const 1_i32) -> [success: bb113, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _132 = move (_206.0: i32),
            StorageLive(_207),
            StorageLive(_208),
            _208 = _132,
            _207 = Eq(move _208, const 2_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:444:16: 444:33 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _207) -> [0: bb115, otherwise: bb114],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_208),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:444:55: 446:14 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_208),
            StorageLive(_209),
            StorageLive(_210),
            _210 = _132,
            _209 = Eq(move _210, const 4_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:444:37: 444:54 (#0),
                    scope: scope[13],
                },
                kind: switchInt(move _209) -> [0: bb119, otherwise: bb116],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_210),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:444:55: 446:14 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb117,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _211 = AddWithOverflow(_8, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:445:17: 445:35 (#0),
                    scope: scope[13],
                },
                kind: assert(!move (_211.1: bool), "attempt to compute `{} + {}`, which would overflow", _8, const 1_usize) -> [success: bb118, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = move (_211.0: usize),
            _32 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:444:13: 446:14 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb120,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_210),
            _32 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:444:13: 446:14 (#0),
                    scope: scope[13],
                },
                kind: goto -> bb120,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_209),
            StorageDead(_207),
            StorageDead(_153),
            StorageDead(_134),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:409:9: 447:10 (#0),
                    scope: scope[12],
                },
                kind: goto -> bb67,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_136),
            StorageDead(_135),
            StorageLive(_213),
            _133 = const (),
            StorageDead(_213),
            StorageDead(_134),
            StorageDead(_133),
            StorageLive(_215),
            StorageLive(_216),
            _216 = _132,
            _215 = Ne(move _216, const 4_i32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:449:12: 449:29 (#0),
                    scope: scope[12],
                },
                kind: switchInt(move _215) -> [0: bb123, otherwise: bb122],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_216),
            StorageLive(_218),
            _218 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _218),
            StorageDead(_218),
            StorageDead(_215),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb156,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_216),
            _125 = const (),
            StorageDead(_215),
            StorageDead(_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:404:5: 452:6 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb125,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _125 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:404:5: 452:6 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb125,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
            StorageDead(_125),
            StorageLive(_219),
            StorageLive(_220),
            StorageLive(_221),
            _221 = _10,
            StorageLive(_222),
            _222 = _4,
            _220 = Lt(move _221, move _222),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:454:8: 454:15 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _220) -> [0: bb127, otherwise: bb126],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_222),
            StorageDead(_221),
            StorageLive(_224),
            _224 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _224),
            StorageDead(_224),
            StorageDead(_220),
            StorageDead(_219),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb160,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_222),
            StorageDead(_221),
            _219 = const (),
            StorageDead(_220),
            StorageDead(_219),
            StorageLive(_225),
            PlaceMention(_9),
            _226 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:458:5: 458:27 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _226) -> [1: bb129, otherwise: bb128],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_249),
            StorageLive(_250),
            _250 = _8,
            _249 = Ne(move _250, const 8_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:469:16: 469:34 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _249) -> [0: bb142, otherwise: bb141],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:459:9: 459:31 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb130, imaginary: bb128],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_227),
            _227 = ((_9 as Some).0: usize),
            StorageLive(_228),
            StorageLive(_229),
            _229 = _8,
            StorageLive(_230),
            _230 = _227,
            _231 = SubWithOverflow(_229, _230),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:460:29: 460:61 (#0),
                    scope: scope[18],
                },
                kind: assert(!move (_231.1: bool), "attempt to compute `{} - {}`, which would overflow", move _229, move _230) -> [success: bb131, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _228 = move (_231.0: usize),
            StorageDead(_230),
            StorageDead(_229),
            FakeRead(ForLet(None), _228),
            _8 = const 7_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:462:13: 466:14 (#0),
                    scope: scope[19],
                },
                kind: goto -> bb132,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:462:13: 466:14 (#0),
                    scope: scope[19],
                },
                kind: falseUnwind -> [real: bb133, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_232),
            StorageLive(_233),
            _233 = _228,
            _232 = Gt(move _233, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:462:19: 462:28 (#0),
                    scope: scope[19],
                },
                kind: switchInt(move _232) -> [0: bb140, otherwise: bb134],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_233),
            StorageLive(_234),
            StorageLive(_235),
            StorageLive(_236),
            _236 = &mut _7,
            _235 = move _236 as &mut [u16] (PointerCoercion(Unsize)),
            StorageDead(_236),
            StorageLive(_237),
            _237 = _8,
            StorageLive(_238),
            StorageLive(_239),
            StorageLive(_240),
            _240 = _227,
            StorageLive(_241),
            _241 = _228,
            _242 = AddWithOverflow(_240, _241),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:463:44: 463:68 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_242.1: bool), "attempt to compute `{} + {}`, which would overflow", move _240, move _241) -> [success: bb135, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _239 = move (_242.0: usize),
            StorageDead(_241),
            StorageDead(_240),
            _243 = SubWithOverflow(_239, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:463:44: 463:72 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_243.1: bool), "attempt to compute `{} - {}`, which would overflow", move _239, const 1_usize) -> [success: bb136, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _238 = move (_243.0: usize),
            StorageDead(_239),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:463:17: 463:73 (#0),
                    scope: scope[19],
                },
                kind: _234 = core::slice::<impl [u16]>::swap(move _235, move _237, move _238) -> [return: bb137, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_238),
            StorageDead(_237),
            StorageDead(_235),
            StorageDead(_234),
            _244 = SubWithOverflow(_228, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:464:17: 464:27 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_244.1: bool), "attempt to compute `{} - {}`, which would overflow", _228, const 1_usize) -> [success: bb138, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _228 = move (_244.0: usize),
            _245 = SubWithOverflow(_8, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:465:17: 465:35 (#0),
                    scope: scope[19],
                },
                kind: assert(!move (_245.1: bool), "attempt to compute `{} - {}`, which would overflow", _8, const 1_usize) -> [success: bb139, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = move (_245.0: usize),
            _32 = const (),
            StorageDead(_232),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:462:13: 466:14 (#0),
                    scope: scope[19],
                },
                kind: goto -> bb132,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_233),
            StorageLive(_247),
            _225 = const (),
            StorageDead(_247),
            StorageDead(_232),
            StorageDead(_228),
            StorageDead(_227),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:467:9: 467:10 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb143,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_250),
            StorageLive(_252),
            _252 = parser::ParseError::InvalidIpv6Address,
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _252),
            StorageDead(_252),
            StorageDead(_249),
            StorageDead(_225),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb160,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_250),
            _225 = const (),
            StorageDead(_249),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:471:13: 471:14 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb143,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_225),
            StorageLive(_253),
            StorageLive(_254),
            StorageLive(_255),
            _255 = const 0_usize,
            _256 = Len(_7),
            _257 = Lt(_255, _256),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:475:9: 475:18 (#0),
                    scope: scope[7],
                },
                kind: assert(move _257, "index out of bounds: the length is {} but the index is {}", move _256, _255) -> [success: bb144, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _254 = _7[_255],
            StorageLive(_258),
            StorageLive(_259),
            _259 = const 1_usize,
            _260 = Len(_7),
            _261 = Lt(_259, _260),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:475:20: 475:29 (#0),
                    scope: scope[7],
                },
                kind: assert(move _261, "index out of bounds: the length is {} but the index is {}", move _260, _259) -> [success: bb145, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _258 = _7[_259],
            StorageLive(_262),
            StorageLive(_263),
            _263 = const 2_usize,
            _264 = Len(_7),
            _265 = Lt(_263, _264),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:475:31: 475:40 (#0),
                    scope: scope[7],
                },
                kind: assert(move _265, "index out of bounds: the length is {} but the index is {}", move _264, _263) -> [success: bb146, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _262 = _7[_263],
            StorageLive(_266),
            StorageLive(_267),
            _267 = const 3_usize,
            _268 = Len(_7),
            _269 = Lt(_267, _268),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:475:42: 475:51 (#0),
                    scope: scope[7],
                },
                kind: assert(move _269, "index out of bounds: the length is {} but the index is {}", move _268, _267) -> [success: bb147, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _266 = _7[_267],
            StorageLive(_270),
            StorageLive(_271),
            _271 = const 4_usize,
            _272 = Len(_7),
            _273 = Lt(_271, _272),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:475:53: 475:62 (#0),
                    scope: scope[7],
                },
                kind: assert(move _273, "index out of bounds: the length is {} but the index is {}", move _272, _271) -> [success: bb148, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _270 = _7[_271],
            StorageLive(_274),
            StorageLive(_275),
            _275 = const 5_usize,
            _276 = Len(_7),
            _277 = Lt(_275, _276),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:475:64: 475:73 (#0),
                    scope: scope[7],
                },
                kind: assert(move _277, "index out of bounds: the length is {} but the index is {}", move _276, _275) -> [success: bb149, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _274 = _7[_275],
            StorageLive(_278),
            StorageLive(_279),
            _279 = const 6_usize,
            _280 = Len(_7),
            _281 = Lt(_279, _280),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:475:75: 475:84 (#0),
                    scope: scope[7],
                },
                kind: assert(move _281, "index out of bounds: the length is {} but the index is {}", move _280, _279) -> [success: bb150, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _278 = _7[_279],
            StorageLive(_282),
            StorageLive(_283),
            _283 = const 7_usize,
            _284 = Len(_7),
            _285 = Lt(_283, _284),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:475:86: 475:95 (#0),
                    scope: scope[7],
                },
                kind: assert(move _285, "index out of bounds: the length is {} but the index is {}", move _284, _283) -> [success: bb151, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _282 = _7[_283],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:474:8: 476:6 (#0),
                    scope: scope[7],
                },
                kind: _253 = core::net::Ipv6Addr::new(move _254, move _258, move _262, move _266, move _270, move _274, move _278, move _282) -> [return: bb152, unwind: bb162],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_282),
            StorageDead(_278),
            StorageDead(_274),
            StorageDead(_270),
            StorageDead(_266),
            StorageDead(_262),
            StorageDead(_258),
            StorageDead(_254),
            _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Ok(move _253),
            StorageDead(_253),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_2),
            StorageDead(_283),
            StorageDead(_279),
            StorageDead(_275),
            StorageDead(_271),
            StorageDead(_267),
            StorageDead(_263),
            StorageDead(_259),
            StorageDead(_255),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:477:2: 477:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb161,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_168),
            StorageDead(_158),
            StorageDead(_155),
            StorageDead(_154),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[13],
                },
                kind: goto -> bb154,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_153),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb155,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_134),
            StorageDead(_133),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[12],
                },
                kind: goto -> bb156,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb157,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
            StorageDead(_125),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb160,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_91),
            StorageDead(_88),
            StorageDead(_87),
            StorageDead(_63),
            StorageDead(_58),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb159,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[7],
                },
                kind: goto -> bb160,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:477:2: 477:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb161,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:477:2: 477:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/host.rs:329:1: 477:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::net::Ipv6Addr, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:329:35: 329:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/host.rs:329:26: 329:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:329:19: 329:24 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:329:19: 329:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:329:19: 329:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:330:17: 330:33 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:330:9: 330:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:330:9: 330:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:330:17: 330:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:331:15: 331:26 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:331:9: 331:12 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:331:9: 331:12 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:331:15: 331:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:332:24: 332:29 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:332:9: 332:21 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:332:9: 332:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:333:22: 333:46 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:333:9: 333:19 (#0),
                    },
                ),
            ),
        ),
        ty: [u16; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:333:9: 333:19 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:334:29: 334:30 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:334:9: 334:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:334:9: 334:26 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:335:32: 335:36 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:335:9: 335:29 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:335:9: 335:29 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:336:17: 336:18 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:336:9: 336:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:336:9: 336:14 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:338:5: 340:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:338:8: 338:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:338:8: 338:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:338:16: 340:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:339:20: 339:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:342:5: 349:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:342:8: 342:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:342:8: 342:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:342:14: 342:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:342:8: 342:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:342:8: 342:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:343:9: 345:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:343:12: 343:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:343:12: 343:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:343:18: 343:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:343:12: 343:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:343:12: 343:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:343:29: 345:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:344:24: 344:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:348:28: 348:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:351:5: 402:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:329:1: 477:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:351:5: 402:6 (#566),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:351:11: 351:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:351:5: 402:6 (#566),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:351:11: 351:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:351:5: 402:6 (#566),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:351:15: 351:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:352:9: 354:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:352:12: 352:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:352:12: 352:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:352:31: 354:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:353:24: 353:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:355:9: 363:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:355:12: 355:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:355:12: 355:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:355:18: 355:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:355:12: 355:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:355:12: 355:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:355:29: 363:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:356:13: 358:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:356:16: 356:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:356:16: 356:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:356:43: 358:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:357:28: 357:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:359:13: 359:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:360:13: 360:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:361:32: 361:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:361:37: 361:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:364:21: 364:22 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:364:13: 364:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:364:13: 364:18 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:365:19: 365:43 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:365:13: 365:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:365:13: 365:16 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:365:28: 365:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:365:33: 365:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:365:33: 365:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:365:33: 365:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:366:25: 366:29 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:366:13: 366:22 (#0),
                    },
                ),
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:366:13: 366:22 (#0),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:367:9: 375:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:367:9: 375:10 (#571),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:367:15: 367:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:367:9: 375:10 (#571),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:367:15: 367:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:367:9: 375:10 (#571),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:367:19: 367:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:368:13: 374:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:368:19: 368:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:368:13: 374:14 (#0),
                },
            ),
        ),
        ty: char,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:368:19: 368:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:368:13: 374:14 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:368:20: 368:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:368:13: 374:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:368:26: 368:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:368:20: 368:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:368:20: 368:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:369:17: 369:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _68,
                                ),
                                url/src/host.rs:368:19: 368:50 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:369:17: 369:28 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:369:22: 369:27 (#0),
            scope: scope[10],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:370:29: 370:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:370:29: 370:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u16, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:370:29: 370:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:370:44: 370:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:370:44: 370:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u16, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:370:29: 370:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:371:21: 371:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:368:13: 374:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:373:25: 373:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:367:9: 375:10 (#571),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:367:9: 375:10 (#571),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:367:9: 375:10 (#571),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:367:9: 375:10 (#571),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:376:9: 396:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:376:12: 376:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:376:12: 376:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:376:16: 376:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:377:13: 395:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:377:25: 377:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:377:19: 377:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:377:19: 377:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:379:21: 381:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:379:24: 379:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:379:24: 379:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:379:29: 379:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:379:35: 381:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:380:36: 380:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:382:25: 382:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:383:21: 385:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:383:24: 383:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:383:24: 383:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:383:42: 385:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:384:36: 384:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:389:21: 389:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:390:21: 392:22 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:390:24: 390:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:390:21: 392:22 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:390:24: 390:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:390:21: 392:22 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:390:29: 390:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:390:21: 392:22 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:390:33: 392:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:391:36: 391:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:377:13: 395:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:394:22: 394:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:394:33: 394:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:397:9: 399:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:397:12: 397:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:397:21: 399:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:400:33: 400:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:400:16: 400:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:400:9: 400:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:400:9: 400:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:401:9: 401:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:351:5: 402:6 (#566),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:351:5: 402:6 (#566),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:351:5: 402:6 (#566),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:351:5: 402:6 (#566),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:404:5: 452:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:404:8: 404:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:405:9: 407:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:405:12: 405:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:405:12: 405:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:405:30: 407:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:406:24: 406:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:408:32: 408:33 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:408:13: 408:29 (#0),
                    },
                ),
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:408:13: 408:29 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:409:9: 447:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:409:9: 447:10 (#580),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:409:15: 409:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:409:9: 447:10 (#580),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:409:15: 409:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:409:9: 447:10 (#580),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:409:19: 409:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:410:13: 416:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:410:16: 410:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:410:16: 410:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:411:17: 415:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:411:20: 411:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:411:17: 415:18 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:411:20: 411:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:411:17: 415:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:411:41: 411:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:411:17: 415:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:411:41: 411:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:411:17: 415:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:411:45: 411:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:411:17: 415:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:411:52: 411:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:411:17: 415:18 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:411:52: 411:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:411:17: 415:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:411:58: 411:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:411:52: 411:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:411:52: 411:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:412:21: 412:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:411:17: 415:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:413:24: 415:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:414:32: 414:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:418:34: 418:38 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:418:17: 418:31 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:418:17: 418:31 (#0),
            scope: scope[12],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:419:13: 435:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:419:13: 435:14 (#584),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:419:19: 419:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:419:13: 435:14 (#584),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:419:19: 419:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:419:13: 435:14 (#584),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:419:23: 419:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:420:29: 423:18 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:420:21: 420:26 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:420:21: 420:26 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:420:41: 420:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:420:35: 420:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:420:35: 420:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:421:25: 421:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:421:25: 421:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_2)[_159],
                                ),
                                url/src/host.rs:420:35: 420:43 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:421:21: 421:22 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:421:21: 421:22 (#0),
            scope: scope[13],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:421:40: 421:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u8, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:421:40: 421:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:422:26: 422:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:424:17: 433:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:425:21: 425:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:425:42: 425:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:425:47: 425:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:425:47: 425:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:426:32: 426:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:426:43: 426:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _153,
                                ),
                                url/src/host.rs:424:23: 424:33 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:427:21: 427:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:427:26: 427:35 (#0),
            scope: scope[14],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:428:30: 428:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:428:30: 428:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u16, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:428:30: 428:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:428:40: 428:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:428:40: 428:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u16, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:428:30: 428:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:429:25: 431:26 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:429:28: 429:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:429:25: 431:26 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:429:28: 429:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:429:25: 431:26 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:429:37: 431:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:430:40: 430:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:434:17: 434:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:419:13: 435:14 (#584),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:419:13: 435:14 (#584),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:419:13: 435:14 (#584),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:419:13: 435:14 (#584),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:437:37: 441:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:437:44: 437:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _153,
                                ),
                                url/src/host.rs:437:54: 437:64 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:437:44: 437:51 (#0),
                    },
                ),
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:437:49: 437:50 (#0),
            scope: scope[17],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:438:17: 438:50 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:438:17: 438:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:438:17: 438:50 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:438:17: 438:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:438:17: 438:50 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:438:24: 438:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:438:17: 438:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:438:17: 438:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u16, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:438:17: 438:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:438:17: 438:50 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:438:49: 438:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u16, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:438:17: 438:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:439:20: 441:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:440:28: 440:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:437:20: 437:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:437:13: 437:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:437:13: 437:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:442:13: 442:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:444:13: 446:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:444:16: 444:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:444:13: 446:14 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:444:16: 444:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:444:13: 446:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:444:37: 444:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:444:13: 446:14 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:444:37: 444:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:445:17: 445:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:409:9: 447:10 (#580),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:409:9: 447:10 (#580),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:409:9: 447:10 (#580),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:409:9: 447:10 (#580),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:449:9: 451:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:449:12: 449:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:449:9: 451:10 (#0),
                },
            ),
        ),
        ty: i32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:449:12: 449:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:449:9: 451:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:449:30: 451:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:450:24: 450:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:454:5: 456:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:454:8: 454:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:454:8: 454:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:454:12: 454:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:454:16: 456:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:455:20: 455:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:458:5: 473:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:459:9: 459:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                url/src/host.rs:458:11: 458:27 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:459:9: 459:31 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:459:14: 459:30 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/host.rs:460:29: 460:61 (#0),
                            ),
                        ),
                        pat_span: url/src/host.rs:460:17: 460:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:460:17: 460:26 (#0),
            scope: scope[18],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:460:29: 460:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:460:45: 460:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:460:29: 460:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:462:13: 466:14 (#590),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:462:19: 462:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:462:13: 466:14 (#590),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:462:19: 462:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:463:17: 463:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u16],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:463:17: 463:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u16; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:463:17: 463:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:463:29: 463:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:463:44: 463:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:463:44: 463:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:463:44: 463:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:463:63: 463:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:463:44: 463:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:463:44: 463:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:464:17: 464:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:465:17: 465:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:462:13: 466:14 (#590),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:462:13: 466:14 (#590),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:462:13: 466:14 (#590),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:462:13: 466:14 (#590),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:469:13: 471:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:469:16: 469:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:469:13: 471:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:469:16: 469:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/host.rs:469:13: 471:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:469:35: 471:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: parser::ParseError,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:470:28: 470:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::net::Ipv6Addr,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:474:8: 476:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:9: 475:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:16: 475:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:9: 475:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:9: 475:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:20: 475:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:27: 475:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:20: 475:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:20: 475:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:31: 475:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:38: 475:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:31: 475:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:31: 475:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:42: 475:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:49: 475:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:42: 475:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:42: 475:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:53: 475:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:60: 475:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:53: 475:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:53: 475:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:64: 475:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:71: 475:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:64: 475:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:64: 475:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:75: 475:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:82: 475:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:75: 475:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:75: 475:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:86: 475:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/host.rs:474:5: 476:7 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:93: 475:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:86: 475:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/host.rs:475:86: 475:95 (#0),
            scope: scope[0],
        },
    },
]