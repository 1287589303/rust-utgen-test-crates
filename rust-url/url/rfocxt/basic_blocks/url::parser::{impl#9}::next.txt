[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: core::str::Chars<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:330:9: 330:28 (#0),
                    scope: scope[0],
                },
                kind: _3 = <core::str::Chars<'_> as core::iter::Iterator>::by_ref(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &mut (*_3),
            StorageDead(_4),
            StorageLive(_5),
            _5 = {closure@url/src/parser.rs:330:34: 330:38},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:330:9: 330:65 (#0),
                    scope: scope[0],
                },
                kind: _0 = <core::str::Chars<'_> as core::iter::Iterator>::find::<{closure@url/src/parser.rs:330:34: 330:38}>(move _2, move _5) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_2),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:331:6: 331:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/parser.rs:329:5: 331:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:329:27: 329:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut parser::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:329:13: 329:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:330:9: 330:65 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:330:9: 330:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:330:9: 330:65 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:330:9: 330:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:330:9: 330:65 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::str::Chars<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:330:9: 330:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: url/src/parser.rs:330:9: 330:65 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:186 ~ url[3b6e]::parser::{impl#9}::next::{closure#0}),
            [
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((&'^0 char,)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/parser.rs:330:34: 330:64 (#0),
            scope: scope[0],
        },
    },
]