[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1792:46: 1792:70 (#0),
                    scope: scope[0],
                },
                kind: _6 = std::string::String::len(move _7) -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1792:39: 1792:71 (#0),
                    scope: scope[0],
                },
                kind: _5 = parser::to_u32(move _6) -> [return: bb2, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1792:39: 1792:80 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::result::Result::<u32, parser::ParseError>::unwrap(move _5) -> [return: bb3, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_2,
            StorageLive(_10),
            _10 = &_4,
            _8 = {closure@url/src/lib.rs:1793:22: 1793:39} { old_after_path_position: move _9, new_after_path_position: move _10 },
            StorageDead(_10),
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_11),
            PlaceMention(((*_1).8: core::option::Option<u32>)),
            _12 = discriminant(((*_1).8: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1797:16: 1797:35 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _12) -> [1: bb4, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1797:16: 1797:35 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = &mut ((((*_1).8: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_14),
            _14 = &_8,
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut (*_13),
            _15 = (move _16,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1798:13: 1798:26 (#0),
                    scope: scope[3],
                },
                kind: _11 = <{closure@url/src/lib.rs:1793:22: 1793:39} as core::ops::Fn<(&mut u32,)>>::call(move _14, move _15) -> [return: bb6, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1797:9: 1799:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1797:9: 1799:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_17),
            PlaceMention(((*_1).9: core::option::Option<u32>)),
            _18 = discriminant(((*_1).9: core::option::Option<u32>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1800:16: 1800:35 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _18) -> [1: bb9, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1800:16: 1800:35 (#0),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = &mut ((((*_1).9: core::option::Option<u32>) as Some).0: u32),
            StorageLive(_20),
            _20 = &_8,
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut (*_19),
            _21 = (move _22,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1801:13: 1801:26 (#0),
                    scope: scope[4],
                },
                kind: _17 = <{closure@url/src/lib.rs:1793:22: 1793:39} as core::ops::Fn<(&mut u32,)>>::call(move _20, move _21) -> [return: bb11, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1800:9: 1802:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1800:9: 1802:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageLive(_23),
            _23 = &mut ((*_1).0: std::string::String),
            StorageLive(_24),
            _24 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1803:9: 1803:48 (#0),
                    scope: scope[2],
                },
                kind: _0 = std::string::String::push_str(move _23, move _24) -> [return: bb14, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_8),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1804:6: 1804:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:1791:5: 1804:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1791:85: 1791:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1791:27: 1791:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:1791:63: 1791:66 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1791:38: 1791:61 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1791:38: 1791:61 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1791:38: 1791:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:1791:80: 1791:84 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1791:68: 1791:78 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1791:68: 1791:78 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1791:68: 1791:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1792:39: 1792:80 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1792:13: 1792:36 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1792:13: 1792:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<u32, parser::ParseError>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1792:39: 1792:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1792:46: 1792:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1792:46: 1792:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:1793:22: 1796:10 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1793:13: 1793:19 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:433 ~ url[3b6e]::{impl#1}::restore_after_path::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:988 ~ url[3b6e]::{impl#1}::restore_after_path::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:988 ~ url[3b6e]::{impl#1}::restore_after_path::'_), '_))] },
                (&'{erased} u32, &'{erased} u32),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1793:13: 1793:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1793:22: 1796:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1793:22: 1796:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1797:9: 1799:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1797:16: 1797:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).8: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:1797:38: 1797:54 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1797:16: 1797:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1797:21: 1797:34 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1798:13: 1798:26 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:433 ~ url[3b6e]::{impl#1}::restore_after_path::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:988 ~ url[3b6e]::{impl#1}::restore_after_path::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:988 ~ url[3b6e]::{impl#1}::restore_after_path::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1798:13: 1798:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1798:13: 1798:26 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1798:13: 1798:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1798:13: 1798:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1798:20: 1798:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1800:9: 1802:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1800:16: 1800:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).9: core::option::Option<u32>),
                                ),
                                url/src/lib.rs:1800:38: 1800:57 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:1800:16: 1800:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1800:21: 1800:34 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1801:13: 1801:26 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:433 ~ url[3b6e]::{impl#1}::restore_after_path::{closure#0}), [i8, Binder { value: extern "RustCall" fn((&'^0.Named(DefId(0:988 ~ url[3b6e]::{impl#1}::restore_after_path::'_), "'_") mut u32,)), bound_vars: [Region(BrNamed(DefId(0:988 ~ url[3b6e]::{impl#1}::restore_after_path::'_), '_))] }, (&'{erased} u32, &'{erased} u32)]),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1801:13: 1801:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1801:13: 1801:26 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut u32,),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1801:13: 1801:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1801:13: 1801:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1801:20: 1801:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1803:9: 1803:48 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1803:9: 1803:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:1803:9: 1803:48 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:1803:37: 1803:47 (#0),
            scope: scope[0],
        },
    },
]