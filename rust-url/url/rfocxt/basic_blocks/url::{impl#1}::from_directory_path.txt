[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:23: 2589:48 (#0),
                    scope: scope[0],
                },
                kind: _4 = Url::from_file_path::<P>(move _5) -> [return: bb1, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:23: 2589:49 (#1126),
                    scope: scope[0],
                },
                kind: _3 = <core::result::Result<Url, ()> as core::ops::Try>::branch(move _4) -> [return: bb2, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _6 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:23: 2589:49 (#1126),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:23: 2589:49 (#1126),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:48: 2589:49 (#1127),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move ((_3 as Continue).0: Url),
            _2 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:48: 2589:49 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb8, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = ((_3 as Break).0: core::result::Result<core::convert::Infallible, ()>),
            StorageLive(_9),
            _9 = _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:23: 2589:49 (#1126),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<Url, ()> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, ()>>>::from_residual(move _9) -> [return: bb7, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:49: 2589:50 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb18, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            FakeRead(ForLet(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:49: 2589:50 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(_2.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2590:13: 2590:45 (#0),
                    scope: scope[1],
                },
                kind: _14 = <std::string::String as core::ops::Deref>::deref(move _15) -> [return: bb10, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &(*_14),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2590:13: 2590:45 (#0),
                    scope: scope[1],
                },
                kind: _12 = core::str::<impl str>::ends_with::<'_, char>(move _13, const '/') -> [return: bb11, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2590:13: 2590:45 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb13, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_14),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2590:9: 2592:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_14),
            StorageLive(_16),
            _16 = &mut (_2.0: std::string::String),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2591:13: 2591:40 (#0),
                    scope: scope[1],
                },
                kind: _11 = std::string::String::push(move _16, const '/') -> [return: bb14, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2590:9: 2592:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_17),
            _17 = move _2,
            _0 = core::result::Result::<Url, ()>::Ok(move _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2593:15: 2593:16 (#0),
                    scope: scope[1],
                },
                kind: drop(_17) -> [return: bb16, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2594:5: 2594:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb17, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2594:5: 2594:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb19, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2594:5: 2594:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb19, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2594:6: 2594:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2594:5: 2594:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:49: 2589:50 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:48: 2589:49 (#1126),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2589:47: 2589:48 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2594:5: 2594:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: url/src/lib.rs:2588:5: 2594:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Url, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2588:71: 2588:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            url/src/lib.rs:2588:65: 2588:66 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2588:59: 2588:63 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2588:59: 2588:63 (#0),
                    },
                ),
            ),
        ),
        ty: P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2588:59: 2588:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                url/src/lib.rs:2589:23: 2589:49 (#0),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2589:13: 2589:20 (#0),
                    },
                ),
            ),
        ),
        ty: Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2589:13: 2589:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, ()>, Url>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2589:23: 2589:49 (#1126),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<Url, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2589:23: 2589:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: P/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2589:43: 2589:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2589:48: 2589:49 (#1127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                url/src/lib.rs:2589:23: 2589:49 (#1126),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2589:48: 2589:49 (#1127),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2589:48: 2589:49 (#1127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2589:48: 2589:49 (#1127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2589:48: 2589:49 (#1127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                url/src/lib.rs:2589:23: 2589:49 (#1126),
                            ),
                        ),
                        pat_span: url/src/lib.rs:2589:23: 2589:49 (#1126),
                    },
                ),
            ),
        ),
        ty: Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2589:23: 2589:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2590:9: 2592:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2590:13: 2590:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2590:13: 2590:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2590:13: 2590:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2590:13: 2590:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: url/src/lib.rs:2591:13: 2591:40 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2591:13: 2591:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Url,
        user_ty: None,
        source_info: SourceInfo {
            span: url/src/lib.rs:2593:12: 2593:15 (#0),
            scope: scope[0],
        },
    },
]