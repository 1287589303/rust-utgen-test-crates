{
  "url/src/slicing.rs:127:15:127:23": [
    {
      "Match": {
        "match_source": "url/src/slicing.rs:127:15:127:23",
        "match_str": "position",
        "match_kind": {
          "Enum": [
            "BeforeScheme",
            "AfterScheme",
            "BeforeUsername",
            "AfterUsername",
            "BeforePassword",
            "AfterPassword",
            "BeforeHost",
            "AfterHost",
            "BeforePort",
            "AfterPort",
            "BeforePath",
            "AfterPath",
            "BeforeQuery",
            "AfterQuery",
            "BeforeFragment",
            "AfterFragment"
          ]
        },
        "arms": {
          "url/src/slicing.rs:132:13:132:37": {
            "pat": {
              "pat_str": "Position::BeforeUsername",
              "kind": {
                "Enum": 2
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:132:41:140:14"
          },
          "url/src/slicing.rs:165:13:165:32": {
            "pat": {
              "pat_str": "Position::AfterHost",
              "kind": {
                "Enum": 7
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:165:36:165:58"
          },
          "url/src/slicing.rs:187:13:187:32": {
            "pat": {
              "pat_str": "Position::AfterPath",
              "kind": {
                "Enum": 11
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:187:36:191:14"
          },
          "url/src/slicing.rs:167:13:167:33": {
            "pat": {
              "pat_str": "Position::BeforePort",
              "kind": {
                "Enum": 8
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:167:37:174:14"
          },
          "url/src/slicing.rs:153:13:153:36": {
            "pat": {
              "pat_str": "Position::AfterPassword",
              "kind": {
                "Enum": 5
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:153:40:161:14"
          },
          "url/src/slicing.rs:144:13:144:37": {
            "pat": {
              "pat_str": "Position::BeforePassword",
              "kind": {
                "Enum": 4
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:144:41:151:14"
          },
          "url/src/slicing.rs:176:13:176:32": {
            "pat": {
              "pat_str": "Position::AfterPort",
              "kind": {
                "Enum": 9
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:176:36:183:14"
          },
          "url/src/slicing.rs:163:13:163:33": {
            "pat": {
              "pat_str": "Position::BeforeHost",
              "kind": {
                "Enum": 6
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:163:37:163:61"
          },
          "url/src/slicing.rs:130:13:130:34": {
            "pat": {
              "pat_str": "Position::AfterScheme",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:130:38:130:62"
          },
          "url/src/slicing.rs:202:13:202:33": {
            "pat": {
              "pat_str": "Position::AfterQuery",
              "kind": {
                "Enum": 13
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:202:37:205:14"
          },
          "url/src/slicing.rs:185:13:185:33": {
            "pat": {
              "pat_str": "Position::BeforePath",
              "kind": {
                "Enum": 10
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:185:37:185:61"
          },
          "url/src/slicing.rs:142:13:142:36": {
            "pat": {
              "pat_str": "Position::AfterUsername",
              "kind": {
                "Enum": 3
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:142:40:142:66"
          },
          "url/src/slicing.rs:193:13:193:34": {
            "pat": {
              "pat_str": "Position::BeforeQuery",
              "kind": {
                "Enum": 12
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:193:38:200:14"
          },
          "url/src/slicing.rs:207:13:207:37": {
            "pat": {
              "pat_str": "Position::BeforeFragment",
              "kind": {
                "Enum": 14
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:207:41:213:14"
          },
          "url/src/slicing.rs:128:13:128:35": {
            "pat": {
              "pat_str": "Position::BeforeScheme",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:128:39:128:40"
          },
          "url/src/slicing.rs:215:13:215:36": {
            "pat": {
              "pat_str": "Position::AfterFragment",
              "kind": {
                "Enum": 15
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:215:40:215:64"
          }
        }
      }
    }
  ],
  "url/src/slicing.rs:154:20:154:40": [
    {
      "Bool": {
        "Other": "self.has_authority()"
      }
    }
  ],
  "url/src/slicing.rs:179:21:179:76": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.host_end as usize + \":\".len() + count_digits(port)",
          "lhs": "self.host_end as usize + \":\".len()",
          "rhs": "count_digits(port)",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:187:42:187:81": [
    {
      "Match": {
        "match_source": "url/src/slicing.rs:187:42:187:81",
        "match_str": "(self.query_start, self.fragment_start)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "url/src/slicing.rs:189:17:189:32": {
            "pat": {
              "pat_str": "(None, Some(f))",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "url/src/slicing.rs:189:18:189:22"
                  ],
                  "1": [
                    null,
                    "url/src/slicing.rs:189:24:189:31"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:189:36:189:46"
          },
          "url/src/slicing.rs:188:17:188:29": {
            "pat": {
              "pat_str": "(Some(q), _)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "url/src/slicing.rs:188:18:188:25"
                  ],
                  "1": [
                    null,
                    "url/src/slicing.rs:188:27:188:28"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:188:33:188:43"
          },
          "url/src/slicing.rs:190:17:190:29": {
            "pat": {
              "pat_str": "(None, None)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "url/src/slicing.rs:190:18:190:22"
                  ],
                  "1": [
                    null,
                    "url/src/slicing.rs:190:24:190:28"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:190:33:190:57"
          }
        }
      }
    }
  ],
  "url/src/slicing.rs:209:35:209:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.byte_at(f) == b'#'",
          "lhs": "self.byte_at(f)",
          "rhs": "b'#'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/slicing.rs:193:44:193:83": [
    {
      "Match": {
        "match_source": "url/src/slicing.rs:193:44:193:83",
        "match_str": "(self.query_start, self.fragment_start)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "url/src/slicing.rs:194:17:194:29": {
            "pat": {
              "pat_str": "(Some(q), _)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "url/src/slicing.rs:194:18:194:25"
                  ],
                  "1": [
                    null,
                    "url/src/slicing.rs:194:27:194:28"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:194:33:197:18"
          },
          "url/src/slicing.rs:199:17:199:29": {
            "pat": {
              "pat_str": "(None, None)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "url/src/slicing.rs:199:18:199:22"
                  ],
                  "1": [
                    null,
                    "url/src/slicing.rs:199:24:199:28"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:199:33:199:57"
          },
          "url/src/slicing.rs:198:17:198:32": {
            "pat": {
              "pat_str": "(None, Some(f))",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "url/src/slicing.rs:198:18:198:22"
                  ],
                  "1": [
                    null,
                    "url/src/slicing.rs:198:24:198:31"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:198:36:198:46"
          }
        }
      }
    }
  ],
  "url/src/slicing.rs:145:44:145:83": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.byte_at(self.username_end) == b':'",
          "lhs": "self.byte_at(self.username_end)",
          "rhs": "b':'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/slicing.rs:134:21:134:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.scheme_end as usize + \"://\".len()",
          "lhs": "self.scheme_end as usize",
          "rhs": "\"://\".len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:169:35:169:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.byte_at(self.host_end) == b':'",
          "lhs": "self.byte_at(self.host_end)",
          "rhs": "b':'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/slicing.rs:146:21:146:59": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.username_end as usize + \":\".len()",
          "lhs": "self.username_end as usize",
          "rhs": "\":\".len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:155:48:155:82": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.host_start - \"@\".len() as u32",
          "lhs": "self.host_start",
          "rhs": "\"@\".len() as u32",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:202:43:202:62": [
    {
      "Match": {
        "match_source": "url/src/slicing.rs:202:43:202:62",
        "match_str": "self.fragment_start",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "url/src/slicing.rs:204:17:204:24": {
            "pat": {
              "pat_str": "Some(f)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:204:28:204:38"
          },
          "url/src/slicing.rs:203:17:203:21": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:203:25:203:49"
          }
        }
      }
    }
  ],
  "url/src/slicing.rs:137:35:137:90": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.scheme_end + \":\".len() as u32 == self.username_end",
          "lhs": "self.scheme_end + \":\".len() as u32",
          "rhs": "self.username_end",
          "cmp_with_int": false
        }
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12:316:42": [
    {
      "Bool": {
        "Other": "$crate::cfg!(debug_assertions)"
      }
    }
  ],
  "url/src/slicing.rs:179:21:179:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.host_end as usize + \":\".len()",
          "lhs": "self.host_end as usize",
          "rhs": "\":\".len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:137:35:137:69": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.scheme_end + \":\".len() as u32",
          "lhs": "self.scheme_end",
          "rhs": "\":\".len() as u32",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:136:35:136:72": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.byte_at(self.scheme_end) == b':'",
          "lhs": "self.byte_at(self.scheme_end)",
          "rhs": "b':'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/slicing.rs:196:21:196:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "q as usize + \"?\".len()",
          "lhs": "q as usize",
          "rhs": "\"?\".len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:168:20:168:39": [
    {
      "Bool": {
        "Other": "self.port.is_some()"
      }
    }
  ],
  "url/src/slicing.rs:210:21:210:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "f as usize + \"#\".len()",
          "lhs": "f as usize",
          "rhs": "\"#\".len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:170:21:170:55": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.host_end as usize + \":\".len()",
          "lhs": "self.host_end as usize",
          "rhs": "\":\".len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:145:20:145:40": [
    {
      "Bool": {
        "Other": "self.has_authority()"
      }
    }
  ],
  "url/src/slicing.rs:148:35:148:71": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.username_end == self.host_start",
          "lhs": "self.username_end",
          "rhs": "self.host_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:138:21:138:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.scheme_end as usize + \":\".len()",
          "lhs": "self.scheme_end as usize",
          "rhs": "\":\".len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:177:20:177:46": [
    {
      "Bool": {
        "Other": "let Some(port) = self.port"
      }
    }
  ],
  "url/src/slicing.rs:178:35:178:70": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.byte_at(self.host_end) == b':'",
          "lhs": "self.byte_at(self.host_end)",
          "rhs": "b':'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/slicing.rs:158:35:158:71": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.username_end == self.host_start",
          "lhs": "self.username_end",
          "rhs": "self.host_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:155:35:155:91": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.byte_at(self.host_start - \"@\".len() as u32) == b'@'",
          "lhs": "self.byte_at(self.host_start - \"@\".len() as u32)",
          "rhs": "b'@'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/slicing.rs:207:47:207:66": [
    {
      "Match": {
        "match_source": "url/src/slicing.rs:207:47:207:66",
        "match_str": "self.fragment_start",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "url/src/slicing.rs:212:17:212:21": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:212:25:212:49"
          },
          "url/src/slicing.rs:208:17:208:24": {
            "pat": {
              "pat_str": "Some(f)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/slicing.rs:208:28:211:18"
          }
        }
      }
    }
  ],
  "url/src/slicing.rs:133:20:133:40": [
    {
      "Bool": {
        "Other": "self.has_authority()"
      }
    }
  ],
  "url/src/slicing.rs:156:21:156:57": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.host_start as usize - \"@\".len()",
          "lhs": "self.host_start as usize",
          "rhs": "\"@\".len()",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/slicing.rs:154:44:154:83": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.byte_at(self.username_end) == b':'",
          "lhs": "self.byte_at(self.username_end)",
          "rhs": "b':'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/slicing.rs:195:35:195:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.byte_at(q) == b'?'",
          "lhs": "self.byte_at(q)",
          "rhs": "b'?'",
          "cmp_with_int": true
        }
      }
    }
  ]
}