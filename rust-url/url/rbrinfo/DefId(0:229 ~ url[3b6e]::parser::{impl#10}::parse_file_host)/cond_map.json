{
  "url/src/parser.rs:1058:40:1058:65": [
    {
      "Try": "Parser::file_host(input)?"
    }
  ],
  "url/src/parser.rs:1063:19:1063:42": [
    {
      "Try": "Host::parse(&host_str)?"
    },
    {
      "Match": {
        "match_source": "url/src/parser.rs:1063:19:1063:42",
        "match_str": "Host::parse(&host_str)?",
        "match_kind": {
          "Enum": [
            "Domain",
            "Ipv4",
            "Ipv6"
          ]
        },
        "arms": {
          "url/src/parser.rs:1064:17:1064:36": {
            "pat": {
              "pat_str": "Host::Domain(ref d)",
              "kind": {
                "Enum": 0
              }
            },
            "guard": {
              "url/src/parser.rs:1064:40:1064:56": [
                {
                  "Bool": {
                    "Binary": {
                      "kind": "Eq",
                      "expr": "d == \"localhost\"",
                      "lhs": "d",
                      "rhs": "\"localhost\"",
                      "cmp_with_int": false
                    }
                  }
                }
              ]
            },
            "body_source": "url/src/parser.rs:1064:60:1067:18"
          },
          "url/src/parser.rs:1068:17:1068:21": {
            "pat": {
              "pat_str": "host",
              "kind": {
                "Other": null
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:1068:25:1072:18"
          }
        }
      }
    }
  ],
  "url/src/parser.rs:1064:40:1064:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "d == \"localhost\"",
          "lhs": "d",
          "rhs": "\"localhost\"",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/parser.rs:1059:23:1059:42": [
    {
      "Bool": {
        "Other": "host_str.is_empty()"
      }
    }
  ]
}