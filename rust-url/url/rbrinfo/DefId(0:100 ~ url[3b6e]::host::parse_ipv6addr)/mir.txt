bb0
  0: StorageLive(_2)
    SourceInfo(url/src/host.rs:330:9-330:14)
  1: StorageLive(_3)
    SourceInfo(url/src/host.rs:330:17-330:22)
  2: _3 = &(*_1)
    SourceInfo(url/src/host.rs:330:17-330:22)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:330:17-330:33)
      kind: _2 = core::str::<impl str>::as_bytes(move _3) -> [return: bb1, unwind: bb162]
  }
  preds []
  succs [bb1, bb162]

bb1
  0: StorageDead(_3)
    SourceInfo(url/src/host.rs:330:32-330:33)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(url/src/host.rs:330:9-330:14)
  2: StorageLive(_4)
    SourceInfo(url/src/host.rs:331:9-331:12)
  3: StorageLive(_5)
    SourceInfo(url/src/host.rs:331:15-331:20)
  4: _5 = &(*_2)
    SourceInfo(url/src/host.rs:331:15-331:20)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:331:15-331:26)
      kind: _4 = core::slice::<impl [u8]>::len(move _5) -> [return: bb2, unwind: bb162]
  }
  preds [bb0]
  succs [bb2, bb162]

bb2
  0: StorageDead(_5)
    SourceInfo(url/src/host.rs:331:25-331:26)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(url/src/host.rs:331:9-331:12)
  2: StorageLive(_6)
    SourceInfo(url/src/host.rs:332:9-332:21)
  3: _6 = const false
    SourceInfo(url/src/host.rs:332:24-332:29)
  4: FakeRead(ForLet(None), _6)
    SourceInfo(url/src/host.rs:332:9-332:21)
  5: StorageLive(_7)
    SourceInfo(url/src/host.rs:333:9-333:19)
  6: _7 = [const 0_u16, const 0_u16, const 0_u16, const 0_u16, const 0_u16, const 0_u16, const 0_u16, const 0_u16]
    SourceInfo(url/src/host.rs:333:22-333:46)
  7: FakeRead(ForLet(None), _7)
    SourceInfo(url/src/host.rs:333:9-333:19)
  8: StorageLive(_8)
    SourceInfo(url/src/host.rs:334:9-334:26)
  9: _8 = const 0_usize
    SourceInfo(url/src/host.rs:334:29-334:30)
  10: FakeRead(ForLet(None), _8)
    SourceInfo(url/src/host.rs:334:9-334:26)
  11: StorageLive(_9)
    SourceInfo(url/src/host.rs:335:9-335:29)
  12: _9 = core::option::Option::<usize>::None
    SourceInfo(url/src/host.rs:335:32-335:36)
  13: FakeRead(ForLet(None), _9)
    SourceInfo(url/src/host.rs:335:9-335:29)
  14: StorageLive(_10)
    SourceInfo(url/src/host.rs:336:9-336:14)
  15: _10 = const 0_usize
    SourceInfo(url/src/host.rs:336:17-336:18)
  16: FakeRead(ForLet(None), _10)
    SourceInfo(url/src/host.rs:336:9-336:14)
  17: StorageLive(_11)
    SourceInfo(url/src/host.rs:338:5-340:6)
  18: StorageLive(_12)
    SourceInfo(url/src/host.rs:338:8-338:15)
  19: StorageLive(_13)
    SourceInfo(url/src/host.rs:338:8-338:11)
  20: _13 = _4
    SourceInfo(url/src/host.rs:338:8-338:11)
  21: _12 = Lt(move _13, const 2_usize)
    SourceInfo(url/src/host.rs:338:8-338:15)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:338:8-338:15)
      kind: switchInt(move _12) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_13)
    SourceInfo(url/src/host.rs:338:14-338:15)
  1: StorageLive(_15)
    SourceInfo(url/src/host.rs:339:20-339:50)
  2: _15 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:339:20-339:50)
  3: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _15)
    SourceInfo(url/src/host.rs:339:16-339:51)
  4: StorageDead(_15)
    SourceInfo(url/src/host.rs:339:50-339:51)
  5: StorageDead(_12)
    SourceInfo(url/src/host.rs:340:5-340:6)
  6: StorageDead(_11)
    SourceInfo(url/src/host.rs:340:5-340:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb160
  }
  preds [bb2]
  succs [bb160]

bb4
  0: StorageDead(_13)
    SourceInfo(url/src/host.rs:338:14-338:15)
  1: _11 = const ()
    SourceInfo(url/src/host.rs:340:6-340:6)
  2: StorageDead(_12)
    SourceInfo(url/src/host.rs:340:5-340:6)
  3: StorageDead(_11)
    SourceInfo(url/src/host.rs:340:5-340:6)
  4: StorageLive(_16)
    SourceInfo(url/src/host.rs:342:5-349:6)
  5: StorageLive(_17)
    SourceInfo(url/src/host.rs:342:8-342:24)
  6: StorageLive(_18)
    SourceInfo(url/src/host.rs:342:8-342:16)
  7: StorageLive(_19)
    SourceInfo(url/src/host.rs:342:14-342:15)
  8: _19 = const 0_usize
    SourceInfo(url/src/host.rs:342:14-342:15)
  9: _20 = Len((*_2))
    SourceInfo(url/src/host.rs:342:8-342:16)
  10: _21 = Lt(_19, _20)
    SourceInfo(url/src/host.rs:342:8-342:16)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:342:8-342:16)
      kind: assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb5, unwind: bb162]
  }
  preds [bb2]
  succs [bb5, bb162]

bb5
  0: _18 = (*_2)[_19]
    SourceInfo(url/src/host.rs:342:8-342:16)
  1: _17 = Eq(move _18, const 58_u8)
    SourceInfo(url/src/host.rs:342:8-342:24)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:342:8-342:24)
      kind: switchInt(move _17) -> [0: bb10, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb10]

bb6
  0: StorageDead(_19)
    SourceInfo(url/src/host.rs:342:23-342:24)
  1: StorageDead(_18)
    SourceInfo(url/src/host.rs:342:23-342:24)
  2: StorageLive(_22)
    SourceInfo(url/src/host.rs:343:9-345:10)
  3: StorageLive(_23)
    SourceInfo(url/src/host.rs:343:12-343:28)
  4: StorageLive(_24)
    SourceInfo(url/src/host.rs:343:12-343:20)
  5: StorageLive(_25)
    SourceInfo(url/src/host.rs:343:18-343:19)
  6: _25 = const 1_usize
    SourceInfo(url/src/host.rs:343:18-343:19)
  7: _26 = Len((*_2))
    SourceInfo(url/src/host.rs:343:12-343:20)
  8: _27 = Lt(_25, _26)
    SourceInfo(url/src/host.rs:343:12-343:20)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:343:12-343:20)
      kind: assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> [success: bb7, unwind: bb162]
  }
  preds [bb5]
  succs [bb7, bb162]

bb7
  0: _24 = (*_2)[_25]
    SourceInfo(url/src/host.rs:343:12-343:20)
  1: _23 = Ne(move _24, const 58_u8)
    SourceInfo(url/src/host.rs:343:12-343:28)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:343:12-343:28)
      kind: switchInt(move _23) -> [0: bb9, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_25)
    SourceInfo(url/src/host.rs:343:27-343:28)
  1: StorageDead(_24)
    SourceInfo(url/src/host.rs:343:27-343:28)
  2: StorageLive(_29)
    SourceInfo(url/src/host.rs:344:24-344:54)
  3: _29 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:344:24-344:54)
  4: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _29)
    SourceInfo(url/src/host.rs:344:20-344:55)
  5: StorageDead(_29)
    SourceInfo(url/src/host.rs:344:54-344:55)
  6: StorageDead(_23)
    SourceInfo(url/src/host.rs:345:9-345:10)
  7: StorageDead(_22)
    SourceInfo(url/src/host.rs:345:9-345:10)
  8: StorageDead(_17)
    SourceInfo(url/src/host.rs:349:5-349:6)
  9: StorageDead(_16)
    SourceInfo(url/src/host.rs:349:5-349:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb160
  }
  preds [bb7]
  succs [bb160]

bb9
  0: StorageDead(_25)
    SourceInfo(url/src/host.rs:343:27-343:28)
  1: StorageDead(_24)
    SourceInfo(url/src/host.rs:343:27-343:28)
  2: _22 = const ()
    SourceInfo(url/src/host.rs:345:10-345:10)
  3: StorageDead(_23)
    SourceInfo(url/src/host.rs:345:9-345:10)
  4: StorageDead(_22)
    SourceInfo(url/src/host.rs:345:9-345:10)
  5: _10 = const 2_usize
    SourceInfo(url/src/host.rs:346:9-346:14)
  6: _8 = const 1_usize
    SourceInfo(url/src/host.rs:347:9-347:26)
  7: StorageLive(_30)
    SourceInfo(url/src/host.rs:348:28-348:35)
  8: _30 = core::option::Option::<usize>::Some(const 1_usize)
    SourceInfo(url/src/host.rs:348:28-348:35)
  9: _9 = move _30
    SourceInfo(url/src/host.rs:348:9-348:35)
  10: StorageDead(_30)
    SourceInfo(url/src/host.rs:348:34-348:35)
  11: _16 = const ()
    SourceInfo(url/src/host.rs:342:25-349:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:342:5-349:6)
      kind: goto -> bb11
  }
  preds [bb7]
  succs [bb11]

bb10
  0: StorageDead(_19)
    SourceInfo(url/src/host.rs:342:23-342:24)
  1: StorageDead(_18)
    SourceInfo(url/src/host.rs:342:23-342:24)
  2: _16 = const ()
    SourceInfo(url/src/host.rs:349:6-349:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:342:5-349:6)
      kind: goto -> bb11
  }
  preds [bb5]
  succs [bb11]

bb11
  0: StorageDead(_17)
    SourceInfo(url/src/host.rs:349:5-349:6)
  1: StorageDead(_16)
    SourceInfo(url/src/host.rs:349:5-349:6)
  2: StorageLive(_31)
    SourceInfo(url/src/host.rs:351:5-402:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:351:5-402:6)
      kind: goto -> bb12
  }
  preds [bb9, bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(url/src/host.rs:351:5-402:6)
      kind: falseUnwind -> [real: bb13, unwind: bb162]
  }
  preds [bb11, bb23, bb61]
  succs [bb13, bb162]

bb13
  0: StorageLive(_33)
    SourceInfo(url/src/host.rs:351:11-351:18)
  1: StorageLive(_34)
    SourceInfo(url/src/host.rs:351:11-351:12)
  2: _34 = _10
    SourceInfo(url/src/host.rs:351:11-351:12)
  3: StorageLive(_35)
    SourceInfo(url/src/host.rs:351:15-351:18)
  4: _35 = _4
    SourceInfo(url/src/host.rs:351:15-351:18)
  5: _33 = Lt(move _34, move _35)
    SourceInfo(url/src/host.rs:351:11-351:18)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:351:11-351:18)
      kind: switchInt(move _33) -> [0: bb62, otherwise: bb14]
  }
  preds [bb12]
  succs [bb14, bb62]

bb14
  0: StorageDead(_35)
    SourceInfo(url/src/host.rs:351:17-351:18)
  1: StorageDead(_34)
    SourceInfo(url/src/host.rs:351:17-351:18)
  2: StorageLive(_36)
    SourceInfo(url/src/host.rs:352:9-354:10)
  3: StorageLive(_37)
    SourceInfo(url/src/host.rs:352:12-352:30)
  4: StorageLive(_38)
    SourceInfo(url/src/host.rs:352:12-352:25)
  5: _38 = _8
    SourceInfo(url/src/host.rs:352:12-352:25)
  6: _37 = Eq(move _38, const 8_usize)
    SourceInfo(url/src/host.rs:352:12-352:30)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:352:12-352:30)
      kind: switchInt(move _37) -> [0: bb16, otherwise: bb15]
  }
  preds [bb13]
  succs [bb15, bb16]

bb15
  0: StorageDead(_38)
    SourceInfo(url/src/host.rs:352:29-352:30)
  1: StorageLive(_40)
    SourceInfo(url/src/host.rs:353:24-353:54)
  2: _40 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:353:24-353:54)
  3: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _40)
    SourceInfo(url/src/host.rs:353:20-353:55)
  4: StorageDead(_40)
    SourceInfo(url/src/host.rs:353:54-353:55)
  5: StorageDead(_37)
    SourceInfo(url/src/host.rs:354:9-354:10)
  6: StorageDead(_36)
    SourceInfo(url/src/host.rs:354:9-354:10)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb159
  }
  preds [bb14]
  succs [bb159]

bb16
  0: StorageDead(_38)
    SourceInfo(url/src/host.rs:352:29-352:30)
  1: _36 = const ()
    SourceInfo(url/src/host.rs:354:10-354:10)
  2: StorageDead(_37)
    SourceInfo(url/src/host.rs:354:9-354:10)
  3: StorageDead(_36)
    SourceInfo(url/src/host.rs:354:9-354:10)
  4: StorageLive(_41)
    SourceInfo(url/src/host.rs:355:9-363:10)
  5: StorageLive(_42)
    SourceInfo(url/src/host.rs:355:12-355:28)
  6: StorageLive(_43)
    SourceInfo(url/src/host.rs:355:12-355:20)
  7: StorageLive(_44)
    SourceInfo(url/src/host.rs:355:18-355:19)
  8: _44 = _10
    SourceInfo(url/src/host.rs:355:18-355:19)
  9: _45 = Len((*_2))
    SourceInfo(url/src/host.rs:355:12-355:20)
  10: _46 = Lt(_44, _45)
    SourceInfo(url/src/host.rs:355:12-355:20)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:355:12-355:20)
      kind: assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> [success: bb17, unwind: bb162]
  }
  preds [bb14]
  succs [bb17, bb162]

bb17
  0: _43 = (*_2)[_44]
    SourceInfo(url/src/host.rs:355:12-355:20)
  1: _42 = Eq(move _43, const 58_u8)
    SourceInfo(url/src/host.rs:355:12-355:28)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:355:12-355:28)
      kind: switchInt(move _42) -> [0: bb24, otherwise: bb18]
  }
  preds [bb16]
  succs [bb18, bb24]

bb18
  0: StorageDead(_44)
    SourceInfo(url/src/host.rs:355:27-355:28)
  1: StorageDead(_43)
    SourceInfo(url/src/host.rs:355:27-355:28)
  2: StorageLive(_48)
    SourceInfo(url/src/host.rs:356:13-358:14)
  3: StorageLive(_49)
    SourceInfo(url/src/host.rs:356:16-356:42)
  4: StorageLive(_50)
    SourceInfo(url/src/host.rs:356:16-356:32)
  5: _50 = &_9
    SourceInfo(url/src/host.rs:356:16-356:32)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:356:16-356:42)
      kind: _49 = core::option::Option::<usize>::is_some(move _50) -> [return: bb19, unwind: bb162]
  }
  preds [bb17]
  succs [bb19, bb162]

bb19
  Terminator {
      source_info: SourceInfo(url/src/host.rs:356:16-356:42)
      kind: switchInt(move _49) -> [0: bb21, otherwise: bb20]
  }
  preds [bb18]
  succs [bb20, bb21]

bb20
  0: StorageDead(_50)
    SourceInfo(url/src/host.rs:356:41-356:42)
  1: StorageLive(_52)
    SourceInfo(url/src/host.rs:357:28-357:58)
  2: _52 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:357:28-357:58)
  3: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _52)
    SourceInfo(url/src/host.rs:357:24-357:59)
  4: StorageDead(_52)
    SourceInfo(url/src/host.rs:357:58-357:59)
  5: StorageDead(_49)
    SourceInfo(url/src/host.rs:358:13-358:14)
  6: StorageDead(_48)
    SourceInfo(url/src/host.rs:358:13-358:14)
  7: StorageDead(_42)
    SourceInfo(url/src/host.rs:363:9-363:10)
  8: StorageDead(_41)
    SourceInfo(url/src/host.rs:363:9-363:10)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb159
  }
  preds [bb19]
  succs [bb159]

bb21
  0: StorageDead(_50)
    SourceInfo(url/src/host.rs:356:41-356:42)
  1: _48 = const ()
    SourceInfo(url/src/host.rs:358:14-358:14)
  2: StorageDead(_49)
    SourceInfo(url/src/host.rs:358:13-358:14)
  3: StorageDead(_48)
    SourceInfo(url/src/host.rs:358:13-358:14)
  4: _53 = AddWithOverflow(_10, const 1_usize)
    SourceInfo(url/src/host.rs:359:13-359:19)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:359:13-359:19)
      kind: assert(!move (_53.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb22, unwind: bb162]
  }
  preds [bb19]
  succs [bb22, bb162]

bb22
  0: _10 = move (_53.0: usize)
    SourceInfo(url/src/host.rs:359:13-359:19)
  1: _54 = AddWithOverflow(_8, const 1_usize)
    SourceInfo(url/src/host.rs:360:13-360:31)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:360:13-360:31)
      kind: assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", _8, const 1_usize) -> [success: bb23, unwind: bb162]
  }
  preds [bb21]
  succs [bb23, bb162]

bb23
  0: _8 = move (_54.0: usize)
    SourceInfo(url/src/host.rs:360:13-360:31)
  1: StorageLive(_55)
    SourceInfo(url/src/host.rs:361:32-361:51)
  2: StorageLive(_56)
    SourceInfo(url/src/host.rs:361:37-361:50)
  3: _56 = _8
    SourceInfo(url/src/host.rs:361:37-361:50)
  4: _55 = core::option::Option::<usize>::Some(move _56)
    SourceInfo(url/src/host.rs:361:32-361:51)
  5: StorageDead(_56)
    SourceInfo(url/src/host.rs:361:50-361:51)
  6: _9 = move _55
    SourceInfo(url/src/host.rs:361:13-361:51)
  7: StorageDead(_55)
    SourceInfo(url/src/host.rs:361:50-361:51)
  8: StorageDead(_42)
    SourceInfo(url/src/host.rs:363:9-363:10)
  9: StorageDead(_41)
    SourceInfo(url/src/host.rs:363:9-363:10)
  10: StorageDead(_33)
    SourceInfo(url/src/host.rs:402:5-402:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb12
  }
  preds [bb22]
  succs [bb12]

bb24
  0: StorageDead(_44)
    SourceInfo(url/src/host.rs:355:27-355:28)
  1: StorageDead(_43)
    SourceInfo(url/src/host.rs:355:27-355:28)
  2: _41 = const ()
    SourceInfo(url/src/host.rs:363:10-363:10)
  3: StorageDead(_42)
    SourceInfo(url/src/host.rs:363:9-363:10)
  4: StorageDead(_41)
    SourceInfo(url/src/host.rs:363:9-363:10)
  5: StorageLive(_57)
    SourceInfo(url/src/host.rs:364:13-364:18)
  6: _57 = _10
    SourceInfo(url/src/host.rs:364:21-364:22)
  7: FakeRead(ForLet(None), _57)
    SourceInfo(url/src/host.rs:364:13-364:18)
  8: StorageLive(_58)
    SourceInfo(url/src/host.rs:365:13-365:16)
  9: StorageLive(_59)
    SourceInfo(url/src/host.rs:365:28-365:31)
  10: _59 = _4
    SourceInfo(url/src/host.rs:365:28-365:31)
  11: StorageLive(_60)
    SourceInfo(url/src/host.rs:365:33-365:42)
  12: StorageLive(_61)
    SourceInfo(url/src/host.rs:365:33-365:38)
  13: _61 = _57
    SourceInfo(url/src/host.rs:365:33-365:38)
  14: _62 = AddWithOverflow(_61, const 4_usize)
    SourceInfo(url/src/host.rs:365:33-365:42)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:365:33-365:42)
      kind: assert(!move (_62.1: bool), "attempt to compute `{} + {}`, which would overflow", move _61, const 4_usize) -> [success: bb25, unwind: bb162]
  }
  preds [bb17]
  succs [bb25, bb162]

bb25
  0: _60 = move (_62.0: usize)
    SourceInfo(url/src/host.rs:365:33-365:42)
  1: StorageDead(_61)
    SourceInfo(url/src/host.rs:365:41-365:42)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:365:19-365:43)
      kind: _58 = core::cmp::min::<usize>(move _59, move _60) -> [return: bb26, unwind: bb162]
  }
  preds [bb24]
  succs [bb26, bb162]

bb26
  0: StorageDead(_60)
    SourceInfo(url/src/host.rs:365:42-365:43)
  1: StorageDead(_59)
    SourceInfo(url/src/host.rs:365:42-365:43)
  2: FakeRead(ForLet(None), _58)
    SourceInfo(url/src/host.rs:365:13-365:16)
  3: StorageLive(_63)
    SourceInfo(url/src/host.rs:366:13-366:22)
  4: _63 = const 0_u16
    SourceInfo(url/src/host.rs:366:25-366:29)
  5: FakeRead(ForLet(None), _63)
    SourceInfo(url/src/host.rs:366:13-366:22)
  6: StorageLive(_64)
    SourceInfo(url/src/host.rs:367:9-375:10)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:367:9-375:10)
      kind: goto -> bb27
  }
  preds [bb25]
  succs [bb27]

bb27
  Terminator {
      source_info: SourceInfo(url/src/host.rs:367:9-375:10)
      kind: falseUnwind -> [real: bb28, unwind: bb162]
  }
  preds [bb26, bb38]
  succs [bb28, bb162]

bb28
  0: StorageLive(_65)
    SourceInfo(url/src/host.rs:367:15-367:22)
  1: StorageLive(_66)
    SourceInfo(url/src/host.rs:367:15-367:16)
  2: _66 = _10
    SourceInfo(url/src/host.rs:367:15-367:16)
  3: StorageLive(_67)
    SourceInfo(url/src/host.rs:367:19-367:22)
  4: _67 = _58
    SourceInfo(url/src/host.rs:367:19-367:22)
  5: _65 = Lt(move _66, move _67)
    SourceInfo(url/src/host.rs:367:15-367:22)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:367:15-367:22)
      kind: switchInt(move _65) -> [0: bb39, otherwise: bb29]
  }
  preds [bb27]
  succs [bb29, bb39]

bb29
  0: StorageDead(_67)
    SourceInfo(url/src/host.rs:367:21-367:22)
  1: StorageDead(_66)
    SourceInfo(url/src/host.rs:367:21-367:22)
  2: StorageLive(_68)
    SourceInfo(url/src/host.rs:368:19-368:50)
  3: StorageLive(_69)
    SourceInfo(url/src/host.rs:368:19-368:37)
  4: StorageLive(_70)
    SourceInfo(url/src/host.rs:368:20-368:28)
  5: StorageLive(_71)
    SourceInfo(url/src/host.rs:368:26-368:27)
  6: _71 = _10
    SourceInfo(url/src/host.rs:368:26-368:27)
  7: _72 = Len((*_2))
    SourceInfo(url/src/host.rs:368:20-368:28)
  8: _73 = Lt(_71, _72)
    SourceInfo(url/src/host.rs:368:20-368:28)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:368:20-368:28)
      kind: assert(move _73, "index out of bounds: the length is {} but the index is {}", move _72, _71) -> [success: bb30, unwind: bb162]
  }
  preds [bb28]
  succs [bb30, bb162]

bb30
  0: _70 = (*_2)[_71]
    SourceInfo(url/src/host.rs:368:20-368:28)
  1: _69 = move _70 as char (IntToInt)
    SourceInfo(url/src/host.rs:368:19-368:37)
  2: StorageDead(_70)
    SourceInfo(url/src/host.rs:368:36-368:37)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:368:19-368:50)
      kind: _68 = core::char::methods::<impl char>::to_digit(move _69, const 16_u32) -> [return: bb31, unwind: bb162]
  }
  preds [bb29]
  succs [bb31, bb162]

bb31
  0: StorageDead(_69)
    SourceInfo(url/src/host.rs:368:49-368:50)
  1: PlaceMention(_68)
    SourceInfo(url/src/host.rs:368:19-368:50)
  2: _74 = discriminant(_68)
    SourceInfo(url/src/host.rs:368:19-368:50)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:368:13-368:50)
      kind: switchInt(move _74) -> [0: bb34, 1: bb33, otherwise: bb32]
  }
  preds [bb30]
  succs [bb32, bb33, bb34]

bb32
  0: FakeRead(ForMatchedPlace(None), _68)
    SourceInfo(url/src/host.rs:368:19-368:50)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:368:19-368:50)
      kind: unreachable
  }
  preds [bb31]
  succs []

bb33
  Terminator {
      source_info: SourceInfo(url/src/host.rs:369:17-369:28)
      kind: falseEdge -> [real: bb35, imaginary: bb34]
  }
  preds [bb31]
  succs [bb34, bb35]

bb34
  0: _64 = const ()
    SourceInfo(url/src/host.rs:373:25-373:30)
  1: StorageDead(_71)
    SourceInfo(url/src/host.rs:375:9-375:10)
  2: StorageDead(_68)
    SourceInfo(url/src/host.rs:375:9-375:10)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb40
  }
  preds [bb31, bb33]
  succs [bb40]

bb35
  0: StorageLive(_75)
    SourceInfo(url/src/host.rs:369:22-369:27)
  1: _75 = ((_68 as Some).0: u32)
    SourceInfo(url/src/host.rs:369:22-369:27)
  2: StorageLive(_76)
    SourceInfo(url/src/host.rs:370:29-370:41)
  3: StorageLive(_77)
    SourceInfo(url/src/host.rs:370:29-370:34)
  4: _77 = _63
    SourceInfo(url/src/host.rs:370:29-370:34)
  5: _78 = MulWithOverflow(_77, const 16_u16)
    SourceInfo(url/src/host.rs:370:29-370:41)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:370:29-370:41)
      kind: assert(!move (_78.1: bool), "attempt to compute `{} * {}`, which would overflow", move _77, const 16_u16) -> [success: bb36, unwind: bb162]
  }
  preds [bb33]
  succs [bb36, bb162]

bb36
  0: _76 = move (_78.0: u16)
    SourceInfo(url/src/host.rs:370:29-370:41)
  1: StorageDead(_77)
    SourceInfo(url/src/host.rs:370:40-370:41)
  2: StorageLive(_79)
    SourceInfo(url/src/host.rs:370:44-370:56)
  3: StorageLive(_80)
    SourceInfo(url/src/host.rs:370:44-370:49)
  4: _80 = _75
    SourceInfo(url/src/host.rs:370:44-370:49)
  5: _79 = move _80 as u16 (IntToInt)
    SourceInfo(url/src/host.rs:370:44-370:56)
  6: StorageDead(_80)
    SourceInfo(url/src/host.rs:370:55-370:56)
  7: _81 = AddWithOverflow(_76, _79)
    SourceInfo(url/src/host.rs:370:29-370:56)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:370:29-370:56)
      kind: assert(!move (_81.1: bool), "attempt to compute `{} + {}`, which would overflow", move _76, move _79) -> [success: bb37, unwind: bb162]
  }
  preds [bb35]
  succs [bb37, bb162]

bb37
  0: _63 = move (_81.0: u16)
    SourceInfo(url/src/host.rs:370:21-370:56)
  1: StorageDead(_79)
    SourceInfo(url/src/host.rs:370:55-370:56)
  2: StorageDead(_76)
    SourceInfo(url/src/host.rs:370:55-370:56)
  3: _82 = AddWithOverflow(_10, const 1_usize)
    SourceInfo(url/src/host.rs:371:21-371:27)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:371:21-371:27)
      kind: assert(!move (_82.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb38, unwind: bb162]
  }
  preds [bb36]
  succs [bb38, bb162]

bb38
  0: _10 = move (_82.0: usize)
    SourceInfo(url/src/host.rs:371:21-371:27)
  1: _32 = const ()
    SourceInfo(url/src/host.rs:369:32-372:18)
  2: StorageDead(_75)
    SourceInfo(url/src/host.rs:372:17-372:18)
  3: StorageDead(_71)
    SourceInfo(url/src/host.rs:375:9-375:10)
  4: StorageDead(_68)
    SourceInfo(url/src/host.rs:375:9-375:10)
  5: StorageDead(_65)
    SourceInfo(url/src/host.rs:375:9-375:10)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:367:9-375:10)
      kind: goto -> bb27
  }
  preds [bb37]
  succs [bb27]

bb39
  0: StorageDead(_67)
    SourceInfo(url/src/host.rs:367:21-367:22)
  1: StorageDead(_66)
    SourceInfo(url/src/host.rs:367:21-367:22)
  2: StorageLive(_85)
    SourceInfo(url/src/host.rs:367:9-375:10)
  3: _64 = const ()
    SourceInfo(url/src/host.rs:367:9-375:10)
  4: StorageDead(_85)
    SourceInfo(url/src/host.rs:375:9-375:10)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb40
  }
  preds [bb28]
  succs [bb40]

bb40
  0: StorageDead(_65)
    SourceInfo(url/src/host.rs:375:9-375:10)
  1: StorageDead(_64)
    SourceInfo(url/src/host.rs:375:9-375:10)
  2: StorageLive(_87)
    SourceInfo(url/src/host.rs:376:9-396:10)
  3: StorageLive(_88)
    SourceInfo(url/src/host.rs:376:12-376:19)
  4: StorageLive(_89)
    SourceInfo(url/src/host.rs:376:12-376:13)
  5: _89 = _10
    SourceInfo(url/src/host.rs:376:12-376:13)
  6: StorageLive(_90)
    SourceInfo(url/src/host.rs:376:16-376:19)
  7: _90 = _4
    SourceInfo(url/src/host.rs:376:16-376:19)
  8: _88 = Lt(move _89, move _90)
    SourceInfo(url/src/host.rs:376:12-376:19)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:376:12-376:19)
      kind: switchInt(move _88) -> [0: bb56, otherwise: bb41]
  }
  preds [bb34, bb39]
  succs [bb41, bb56]

bb41
  0: StorageDead(_90)
    SourceInfo(url/src/host.rs:376:18-376:19)
  1: StorageDead(_89)
    SourceInfo(url/src/host.rs:376:18-376:19)
  2: StorageLive(_91)
    SourceInfo(url/src/host.rs:377:25-377:26)
  3: _91 = _10
    SourceInfo(url/src/host.rs:377:25-377:26)
  4: _92 = Len((*_2))
    SourceInfo(url/src/host.rs:377:19-377:27)
  5: _93 = Lt(_91, _92)
    SourceInfo(url/src/host.rs:377:19-377:27)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:377:19-377:27)
      kind: assert(move _93, "index out of bounds: the length is {} but the index is {}", move _92, _91) -> [success: bb42, unwind: bb162]
  }
  preds [bb40]
  succs [bb42, bb162]

bb42
  0: PlaceMention((*_2)[_91])
    SourceInfo(url/src/host.rs:377:19-377:27)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:377:13-377:27)
      kind: switchInt((*_2)[_91]) -> [46: bb44, 58: bb45, otherwise: bb43]
  }
  preds [bb41]
  succs [bb43, bb44, bb45]

bb43
  0: StorageLive(_113)
    SourceInfo(url/src/host.rs:394:33-394:63)
  1: _113 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:394:33-394:63)
  2: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _113)
    SourceInfo(url/src/host.rs:394:29-394:64)
  3: StorageDead(_113)
    SourceInfo(url/src/host.rs:394:63-394:64)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:394:22-394:64)
      kind: goto -> bb158
  }
  preds [bb42, bb45]
  succs [bb158]

bb44
  Terminator {
      source_info: SourceInfo(url/src/host.rs:378:17-378:21)
      kind: falseEdge -> [real: bb46, imaginary: bb45]
  }
  preds [bb42]
  succs [bb45, bb46]

bb45
  Terminator {
      source_info: SourceInfo(url/src/host.rs:388:17-388:21)
      kind: falseEdge -> [real: bb51, imaginary: bb43]
  }
  preds [bb42, bb44]
  succs [bb43, bb51]

bb46
  0: StorageLive(_94)
    SourceInfo(url/src/host.rs:379:21-381:22)
  1: StorageLive(_95)
    SourceInfo(url/src/host.rs:379:24-379:34)
  2: StorageLive(_96)
    SourceInfo(url/src/host.rs:379:24-379:25)
  3: _96 = _10
    SourceInfo(url/src/host.rs:379:24-379:25)
  4: StorageLive(_97)
    SourceInfo(url/src/host.rs:379:29-379:34)
  5: _97 = _57
    SourceInfo(url/src/host.rs:379:29-379:34)
  6: _95 = Eq(move _96, move _97)
    SourceInfo(url/src/host.rs:379:24-379:34)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:379:24-379:34)
      kind: switchInt(move _95) -> [0: bb48, otherwise: bb47]
  }
  preds [bb44]
  succs [bb47, bb48]

bb47
  0: StorageDead(_97)
    SourceInfo(url/src/host.rs:379:33-379:34)
  1: StorageDead(_96)
    SourceInfo(url/src/host.rs:379:33-379:34)
  2: StorageLive(_99)
    SourceInfo(url/src/host.rs:380:36-380:66)
  3: _99 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:380:36-380:66)
  4: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _99)
    SourceInfo(url/src/host.rs:380:32-380:67)
  5: StorageDead(_99)
    SourceInfo(url/src/host.rs:380:66-380:67)
  6: StorageDead(_95)
    SourceInfo(url/src/host.rs:381:21-381:22)
  7: StorageDead(_94)
    SourceInfo(url/src/host.rs:381:21-381:22)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb158
  }
  preds [bb46]
  succs [bb158]

bb48
  0: StorageDead(_97)
    SourceInfo(url/src/host.rs:379:33-379:34)
  1: StorageDead(_96)
    SourceInfo(url/src/host.rs:379:33-379:34)
  2: _94 = const ()
    SourceInfo(url/src/host.rs:381:22-381:22)
  3: StorageDead(_95)
    SourceInfo(url/src/host.rs:381:21-381:22)
  4: StorageDead(_94)
    SourceInfo(url/src/host.rs:381:21-381:22)
  5: StorageLive(_100)
    SourceInfo(url/src/host.rs:382:25-382:30)
  6: _100 = _57
    SourceInfo(url/src/host.rs:382:25-382:30)
  7: _10 = move _100
    SourceInfo(url/src/host.rs:382:21-382:30)
  8: StorageDead(_100)
    SourceInfo(url/src/host.rs:382:29-382:30)
  9: StorageLive(_101)
    SourceInfo(url/src/host.rs:383:21-385:22)
  10: StorageLive(_102)
    SourceInfo(url/src/host.rs:383:24-383:41)
  11: StorageLive(_103)
    SourceInfo(url/src/host.rs:383:24-383:37)
  12: _103 = _8
    SourceInfo(url/src/host.rs:383:24-383:37)
  13: _102 = Gt(move _103, const 6_usize)
    SourceInfo(url/src/host.rs:383:24-383:41)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:383:24-383:41)
      kind: switchInt(move _102) -> [0: bb50, otherwise: bb49]
  }
  preds [bb46]
  succs [bb49, bb50]

bb49
  0: StorageDead(_103)
    SourceInfo(url/src/host.rs:383:40-383:41)
  1: StorageLive(_105)
    SourceInfo(url/src/host.rs:384:36-384:66)
  2: _105 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:384:36-384:66)
  3: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _105)
    SourceInfo(url/src/host.rs:384:32-384:67)
  4: StorageDead(_105)
    SourceInfo(url/src/host.rs:384:66-384:67)
  5: StorageDead(_102)
    SourceInfo(url/src/host.rs:385:21-385:22)
  6: StorageDead(_101)
    SourceInfo(url/src/host.rs:385:21-385:22)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb158
  }
  preds [bb48]
  succs [bb158]

bb50
  0: StorageDead(_103)
    SourceInfo(url/src/host.rs:383:40-383:41)
  1: _101 = const ()
    SourceInfo(url/src/host.rs:385:22-385:22)
  2: StorageDead(_102)
    SourceInfo(url/src/host.rs:385:21-385:22)
  3: StorageDead(_101)
    SourceInfo(url/src/host.rs:385:21-385:22)
  4: _6 = const true
    SourceInfo(url/src/host.rs:386:21-386:36)
  5: _87 = const ()
    SourceInfo(url/src/host.rs:378:25-387:18)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:378:25-387:18)
      kind: goto -> bb55
  }
  preds [bb48]
  succs [bb55]

bb51
  0: _106 = AddWithOverflow(_10, const 1_usize)
    SourceInfo(url/src/host.rs:389:21-389:27)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:389:21-389:27)
      kind: assert(!move (_106.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb52, unwind: bb162]
  }
  preds [bb45]
  succs [bb52, bb162]

bb52
  0: _10 = move (_106.0: usize)
    SourceInfo(url/src/host.rs:389:21-389:27)
  1: StorageLive(_107)
    SourceInfo(url/src/host.rs:390:24-390:32)
  2: StorageLive(_108)
    SourceInfo(url/src/host.rs:390:24-390:25)
  3: _108 = _10
    SourceInfo(url/src/host.rs:390:24-390:25)
  4: StorageLive(_109)
    SourceInfo(url/src/host.rs:390:29-390:32)
  5: _109 = _4
    SourceInfo(url/src/host.rs:390:29-390:32)
  6: _107 = Eq(move _108, move _109)
    SourceInfo(url/src/host.rs:390:24-390:32)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:390:24-390:32)
      kind: switchInt(move _107) -> [0: bb54, otherwise: bb53]
  }
  preds [bb51]
  succs [bb53, bb54]

bb53
  0: StorageDead(_109)
    SourceInfo(url/src/host.rs:390:31-390:32)
  1: StorageDead(_108)
    SourceInfo(url/src/host.rs:390:31-390:32)
  2: StorageLive(_111)
    SourceInfo(url/src/host.rs:391:36-391:66)
  3: _111 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:391:36-391:66)
  4: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _111)
    SourceInfo(url/src/host.rs:391:32-391:67)
  5: StorageDead(_111)
    SourceInfo(url/src/host.rs:391:66-391:67)
  6: StorageDead(_107)
    SourceInfo(url/src/host.rs:392:21-392:22)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb158
  }
  preds [bb52]
  succs [bb158]

bb54
  0: StorageDead(_109)
    SourceInfo(url/src/host.rs:390:31-390:32)
  1: StorageDead(_108)
    SourceInfo(url/src/host.rs:390:31-390:32)
  2: _87 = const ()
    SourceInfo(url/src/host.rs:392:22-392:22)
  3: StorageDead(_107)
    SourceInfo(url/src/host.rs:392:21-392:22)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:392:21-392:22)
      kind: goto -> bb55
  }
  preds [bb52]
  succs [bb55]

bb55
  0: StorageDead(_91)
    SourceInfo(url/src/host.rs:396:9-396:10)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:376:9-396:10)
      kind: goto -> bb57
  }
  preds [bb50, bb54]
  succs [bb57]

bb56
  0: StorageDead(_90)
    SourceInfo(url/src/host.rs:376:18-376:19)
  1: StorageDead(_89)
    SourceInfo(url/src/host.rs:376:18-376:19)
  2: _87 = const ()
    SourceInfo(url/src/host.rs:396:10-396:10)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:376:9-396:10)
      kind: goto -> bb57
  }
  preds [bb40]
  succs [bb57]

bb57
  0: StorageDead(_88)
    SourceInfo(url/src/host.rs:396:9-396:10)
  1: StorageDead(_87)
    SourceInfo(url/src/host.rs:396:9-396:10)
  2: StorageLive(_114)
    SourceInfo(url/src/host.rs:397:9-399:10)
  3: StorageLive(_115)
    SourceInfo(url/src/host.rs:397:12-397:20)
  4: _115 = _6
    SourceInfo(url/src/host.rs:397:12-397:20)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:397:12-397:20)
      kind: switchInt(move _115) -> [0: bb59, otherwise: bb58]
  }
  preds [bb55, bb56]
  succs [bb58, bb59]

bb58
  0: _31 = const ()
    SourceInfo(url/src/host.rs:398:13-398:18)
  1: StorageDead(_115)
    SourceInfo(url/src/host.rs:399:9-399:10)
  2: StorageDead(_114)
    SourceInfo(url/src/host.rs:399:9-399:10)
  3: StorageDead(_63)
    SourceInfo(url/src/host.rs:402:5-402:6)
  4: StorageDead(_58)
    SourceInfo(url/src/host.rs:402:5-402:6)
  5: StorageDead(_57)
    SourceInfo(url/src/host.rs:402:5-402:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb63
  }
  preds [bb57]
  succs [bb63]

bb59
  0: _114 = const ()
    SourceInfo(url/src/host.rs:399:10-399:10)
  1: StorageDead(_115)
    SourceInfo(url/src/host.rs:399:9-399:10)
  2: StorageDead(_114)
    SourceInfo(url/src/host.rs:399:9-399:10)
  3: StorageLive(_117)
    SourceInfo(url/src/host.rs:400:33-400:38)
  4: _117 = _63
    SourceInfo(url/src/host.rs:400:33-400:38)
  5: StorageLive(_118)
    SourceInfo(url/src/host.rs:400:16-400:29)
  6: _118 = _8
    SourceInfo(url/src/host.rs:400:16-400:29)
  7: _119 = Len(_7)
    SourceInfo(url/src/host.rs:400:9-400:30)
  8: _120 = Lt(_118, _119)
    SourceInfo(url/src/host.rs:400:9-400:30)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:400:9-400:30)
      kind: assert(move _120, "index out of bounds: the length is {} but the index is {}", move _119, _118) -> [success: bb60, unwind: bb162]
  }
  preds [bb57]
  succs [bb60, bb162]

bb60
  0: _7[_118] = move _117
    SourceInfo(url/src/host.rs:400:9-400:38)
  1: StorageDead(_117)
    SourceInfo(url/src/host.rs:400:37-400:38)
  2: StorageDead(_118)
    SourceInfo(url/src/host.rs:400:38-400:39)
  3: _121 = AddWithOverflow(_8, const 1_usize)
    SourceInfo(url/src/host.rs:401:9-401:27)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:401:9-401:27)
      kind: assert(!move (_121.1: bool), "attempt to compute `{} + {}`, which would overflow", _8, const 1_usize) -> [success: bb61, unwind: bb162]
  }
  preds [bb59]
  succs [bb61, bb162]

bb61
  0: _8 = move (_121.0: usize)
    SourceInfo(url/src/host.rs:401:9-401:27)
  1: _32 = const ()
    SourceInfo(url/src/host.rs:351:19-402:6)
  2: StorageDead(_63)
    SourceInfo(url/src/host.rs:402:5-402:6)
  3: StorageDead(_58)
    SourceInfo(url/src/host.rs:402:5-402:6)
  4: StorageDead(_57)
    SourceInfo(url/src/host.rs:402:5-402:6)
  5: StorageDead(_33)
    SourceInfo(url/src/host.rs:402:5-402:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:351:5-402:6)
      kind: goto -> bb12
  }
  preds [bb60]
  succs [bb12]

bb62
  0: StorageDead(_35)
    SourceInfo(url/src/host.rs:351:17-351:18)
  1: StorageDead(_34)
    SourceInfo(url/src/host.rs:351:17-351:18)
  2: StorageLive(_123)
    SourceInfo(url/src/host.rs:351:5-402:6)
  3: _31 = const ()
    SourceInfo(url/src/host.rs:351:5-402:6)
  4: StorageDead(_123)
    SourceInfo(url/src/host.rs:402:5-402:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb63
  }
  preds [bb13]
  succs [bb63]

bb63
  0: StorageDead(_33)
    SourceInfo(url/src/host.rs:402:5-402:6)
  1: StorageDead(_31)
    SourceInfo(url/src/host.rs:402:5-402:6)
  2: StorageLive(_125)
    SourceInfo(url/src/host.rs:404:5-452:6)
  3: StorageLive(_126)
    SourceInfo(url/src/host.rs:404:8-404:16)
  4: _126 = _6
    SourceInfo(url/src/host.rs:404:8-404:16)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:404:8-404:16)
      kind: switchInt(move _126) -> [0: bb124, otherwise: bb64]
  }
  preds [bb58, bb62]
  succs [bb64, bb124]

bb64
  0: StorageLive(_127)
    SourceInfo(url/src/host.rs:405:9-407:10)
  1: StorageLive(_128)
    SourceInfo(url/src/host.rs:405:12-405:29)
  2: StorageLive(_129)
    SourceInfo(url/src/host.rs:405:12-405:25)
  3: _129 = _8
    SourceInfo(url/src/host.rs:405:12-405:25)
  4: _128 = Gt(move _129, const 6_usize)
    SourceInfo(url/src/host.rs:405:12-405:29)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:405:12-405:29)
      kind: switchInt(move _128) -> [0: bb66, otherwise: bb65]
  }
  preds [bb63]
  succs [bb65, bb66]

bb65
  0: StorageDead(_129)
    SourceInfo(url/src/host.rs:405:28-405:29)
  1: StorageLive(_131)
    SourceInfo(url/src/host.rs:406:24-406:54)
  2: _131 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:406:24-406:54)
  3: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _131)
    SourceInfo(url/src/host.rs:406:20-406:55)
  4: StorageDead(_131)
    SourceInfo(url/src/host.rs:406:54-406:55)
  5: StorageDead(_128)
    SourceInfo(url/src/host.rs:407:9-407:10)
  6: StorageDead(_127)
    SourceInfo(url/src/host.rs:407:9-407:10)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb157
  }
  preds [bb64]
  succs [bb157]

bb66
  0: StorageDead(_129)
    SourceInfo(url/src/host.rs:405:28-405:29)
  1: _127 = const ()
    SourceInfo(url/src/host.rs:407:10-407:10)
  2: StorageDead(_128)
    SourceInfo(url/src/host.rs:407:9-407:10)
  3: StorageDead(_127)
    SourceInfo(url/src/host.rs:407:9-407:10)
  4: StorageLive(_132)
    SourceInfo(url/src/host.rs:408:13-408:29)
  5: _132 = const 0_i32
    SourceInfo(url/src/host.rs:408:32-408:33)
  6: FakeRead(ForLet(None), _132)
    SourceInfo(url/src/host.rs:408:13-408:29)
  7: StorageLive(_133)
    SourceInfo(url/src/host.rs:409:9-447:10)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:409:9-447:10)
      kind: goto -> bb67
  }
  preds [bb64]
  succs [bb67]

bb67
  Terminator {
      source_info: SourceInfo(url/src/host.rs:409:9-447:10)
      kind: falseUnwind -> [real: bb68, unwind: bb162]
  }
  preds [bb66, bb120]
  succs [bb68, bb162]

bb68
  0: StorageLive(_134)
    SourceInfo(url/src/host.rs:409:15-409:22)
  1: StorageLive(_135)
    SourceInfo(url/src/host.rs:409:15-409:16)
  2: _135 = _10
    SourceInfo(url/src/host.rs:409:15-409:16)
  3: StorageLive(_136)
    SourceInfo(url/src/host.rs:409:19-409:22)
  4: _136 = _4
    SourceInfo(url/src/host.rs:409:19-409:22)
  5: _134 = Lt(move _135, move _136)
    SourceInfo(url/src/host.rs:409:15-409:22)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:409:15-409:22)
      kind: switchInt(move _134) -> [0: bb121, otherwise: bb69]
  }
  preds [bb67]
  succs [bb69, bb121]

bb69
  0: StorageDead(_136)
    SourceInfo(url/src/host.rs:409:21-409:22)
  1: StorageDead(_135)
    SourceInfo(url/src/host.rs:409:21-409:22)
  2: StorageLive(_137)
    SourceInfo(url/src/host.rs:410:13-416:14)
  3: StorageLive(_138)
    SourceInfo(url/src/host.rs:410:16-410:32)
  4: StorageLive(_139)
    SourceInfo(url/src/host.rs:410:16-410:28)
  5: _139 = _132
    SourceInfo(url/src/host.rs:410:16-410:28)
  6: _138 = Gt(move _139, const 0_i32)
    SourceInfo(url/src/host.rs:410:16-410:32)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:410:16-410:32)
      kind: switchInt(move _138) -> [0: bb80, otherwise: bb70]
  }
  preds [bb68]
  succs [bb70, bb80]

bb70
  0: StorageDead(_139)
    SourceInfo(url/src/host.rs:410:31-410:32)
  1: StorageLive(_140)
    SourceInfo(url/src/host.rs:411:20-411:36)
  2: StorageLive(_141)
    SourceInfo(url/src/host.rs:411:20-411:32)
  3: _141 = _132
    SourceInfo(url/src/host.rs:411:20-411:32)
  4: _140 = Lt(move _141, const 4_i32)
    SourceInfo(url/src/host.rs:411:20-411:36)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:411:20-411:36)
      kind: switchInt(move _140) -> [0: bb78, otherwise: bb71]
  }
  preds [bb69]
  succs [bb71, bb78]

bb71
  0: StorageDead(_141)
    SourceInfo(url/src/host.rs:411:35-411:36)
  1: StorageLive(_142)
    SourceInfo(url/src/host.rs:411:41-411:48)
  2: StorageLive(_143)
    SourceInfo(url/src/host.rs:411:41-411:42)
  3: _143 = _10
    SourceInfo(url/src/host.rs:411:41-411:42)
  4: StorageLive(_144)
    SourceInfo(url/src/host.rs:411:45-411:48)
  5: _144 = _4
    SourceInfo(url/src/host.rs:411:45-411:48)
  6: _142 = Lt(move _143, move _144)
    SourceInfo(url/src/host.rs:411:41-411:48)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:411:41-411:48)
      kind: switchInt(move _142) -> [0: bb77, otherwise: bb72]
  }
  preds [bb70]
  succs [bb72, bb77]

bb72
  0: StorageDead(_144)
    SourceInfo(url/src/host.rs:411:47-411:48)
  1: StorageDead(_143)
    SourceInfo(url/src/host.rs:411:47-411:48)
  2: StorageLive(_145)
    SourceInfo(url/src/host.rs:411:52-411:68)
  3: StorageLive(_146)
    SourceInfo(url/src/host.rs:411:52-411:60)
  4: StorageLive(_147)
    SourceInfo(url/src/host.rs:411:58-411:59)
  5: _147 = _10
    SourceInfo(url/src/host.rs:411:58-411:59)
  6: _148 = Len((*_2))
    SourceInfo(url/src/host.rs:411:52-411:60)
  7: _149 = Lt(_147, _148)
    SourceInfo(url/src/host.rs:411:52-411:60)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:411:52-411:60)
      kind: assert(move _149, "index out of bounds: the length is {} but the index is {}", move _148, _147) -> [success: bb73, unwind: bb162]
  }
  preds [bb71]
  succs [bb73, bb162]

bb73
  0: _146 = (*_2)[_147]
    SourceInfo(url/src/host.rs:411:52-411:60)
  1: _145 = Eq(move _146, const 46_u8)
    SourceInfo(url/src/host.rs:411:52-411:68)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:411:52-411:68)
      kind: switchInt(move _145) -> [0: bb76, otherwise: bb74]
  }
  preds [bb72]
  succs [bb74, bb76]

bb74
  0: StorageDead(_147)
    SourceInfo(url/src/host.rs:411:67-411:68)
  1: StorageDead(_146)
    SourceInfo(url/src/host.rs:411:67-411:68)
  2: _150 = AddWithOverflow(_10, const 1_usize)
    SourceInfo(url/src/host.rs:412:21-412:27)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:412:21-412:27)
      kind: assert(!move (_150.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb75, unwind: bb162]
  }
  preds [bb73]
  succs [bb75, bb162]

bb75
  0: _10 = move (_150.0: usize)
    SourceInfo(url/src/host.rs:412:21-412:27)
  1: _137 = const ()
    SourceInfo(url/src/host.rs:412:21-412:27)
  2: StorageDead(_145)
    SourceInfo(url/src/host.rs:415:17-415:18)
  3: StorageDead(_142)
    SourceInfo(url/src/host.rs:415:17-415:18)
  4: StorageDead(_140)
    SourceInfo(url/src/host.rs:415:17-415:18)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:410:13-416:14)
      kind: goto -> bb81
  }
  preds [bb74]
  succs [bb81]

bb76
  0: StorageDead(_147)
    SourceInfo(url/src/host.rs:411:67-411:68)
  1: StorageDead(_146)
    SourceInfo(url/src/host.rs:411:67-411:68)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb79
  }
  preds [bb73]
  succs [bb79]

bb77
  0: StorageDead(_144)
    SourceInfo(url/src/host.rs:411:47-411:48)
  1: StorageDead(_143)
    SourceInfo(url/src/host.rs:411:47-411:48)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb79
  }
  preds [bb71]
  succs [bb79]

bb78
  0: StorageDead(_141)
    SourceInfo(url/src/host.rs:411:35-411:36)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb79
  }
  preds [bb70]
  succs [bb79]

bb79
  0: StorageLive(_152)
    SourceInfo(url/src/host.rs:414:32-414:62)
  1: _152 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:414:32-414:62)
  2: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _152)
    SourceInfo(url/src/host.rs:414:28-414:63)
  3: StorageDead(_152)
    SourceInfo(url/src/host.rs:414:62-414:63)
  4: StorageDead(_145)
    SourceInfo(url/src/host.rs:415:17-415:18)
  5: StorageDead(_142)
    SourceInfo(url/src/host.rs:415:17-415:18)
  6: StorageDead(_140)
    SourceInfo(url/src/host.rs:415:17-415:18)
  7: StorageDead(_138)
    SourceInfo(url/src/host.rs:416:13-416:14)
  8: StorageDead(_137)
    SourceInfo(url/src/host.rs:416:13-416:14)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb155
  }
  preds [bb76, bb77, bb78]
  succs [bb155]

bb80
  0: StorageDead(_139)
    SourceInfo(url/src/host.rs:410:31-410:32)
  1: _137 = const ()
    SourceInfo(url/src/host.rs:416:14-416:14)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:410:13-416:14)
      kind: goto -> bb81
  }
  preds [bb69]
  succs [bb81]

bb81
  0: StorageDead(_138)
    SourceInfo(url/src/host.rs:416:13-416:14)
  1: StorageDead(_137)
    SourceInfo(url/src/host.rs:416:13-416:14)
  2: StorageLive(_153)
    SourceInfo(url/src/host.rs:418:17-418:31)
  3: _153 = core::option::Option::<u16>::None
    SourceInfo(url/src/host.rs:418:34-418:38)
  4: FakeRead(ForLet(None), _153)
    SourceInfo(url/src/host.rs:418:17-418:31)
  5: StorageLive(_154)
    SourceInfo(url/src/host.rs:419:13-435:14)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:419:13-435:14)
      kind: goto -> bb82
  }
  preds [bb75, bb80]
  succs [bb82]

bb82
  Terminator {
      source_info: SourceInfo(url/src/host.rs:419:13-435:14)
      kind: falseUnwind -> [real: bb83, unwind: bb162]
  }
  preds [bb81, bb103]
  succs [bb83, bb162]

bb83
  0: StorageLive(_155)
    SourceInfo(url/src/host.rs:419:19-419:26)
  1: StorageLive(_156)
    SourceInfo(url/src/host.rs:419:19-419:20)
  2: _156 = _10
    SourceInfo(url/src/host.rs:419:19-419:20)
  3: StorageLive(_157)
    SourceInfo(url/src/host.rs:419:23-419:26)
  4: _157 = _4
    SourceInfo(url/src/host.rs:419:23-419:26)
  5: _155 = Lt(move _156, move _157)
    SourceInfo(url/src/host.rs:419:19-419:26)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:419:19-419:26)
      kind: switchInt(move _155) -> [0: bb104, otherwise: bb84]
  }
  preds [bb82]
  succs [bb84, bb104]

bb84
  0: StorageDead(_157)
    SourceInfo(url/src/host.rs:419:25-419:26)
  1: StorageDead(_156)
    SourceInfo(url/src/host.rs:419:25-419:26)
  2: StorageLive(_158)
    SourceInfo(url/src/host.rs:420:21-420:26)
  3: StorageLive(_159)
    SourceInfo(url/src/host.rs:420:41-420:42)
  4: _159 = _10
    SourceInfo(url/src/host.rs:420:41-420:42)
  5: _160 = Len((*_2))
    SourceInfo(url/src/host.rs:420:35-420:43)
  6: _161 = Lt(_159, _160)
    SourceInfo(url/src/host.rs:420:35-420:43)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:420:35-420:43)
      kind: assert(move _161, "index out of bounds: the length is {} but the index is {}", move _160, _159) -> [success: bb85, unwind: bb162]
  }
  preds [bb83]
  succs [bb85, bb162]

bb85
  0: PlaceMention((*_2)[_159])
    SourceInfo(url/src/host.rs:420:35-420:43)
  1: _162 = Le(const 48_u8, (*_2)[_159])
    SourceInfo(url/src/host.rs:421:25-421:36)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:421:25-421:36)
      kind: switchInt(move _162) -> [0: bb86, otherwise: bb88]
  }
  preds [bb84]
  succs [bb86, bb88]

bb86
  0: _154 = const ()
    SourceInfo(url/src/host.rs:422:26-422:31)
  1: StorageDead(_159)
    SourceInfo(url/src/host.rs:423:18-423:19)
  2: StorageDead(_158)
    SourceInfo(url/src/host.rs:435:13-435:14)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb105
  }
  preds [bb85, bb87, bb88]
  succs [bb105]

bb87
  Terminator {
      source_info: SourceInfo(url/src/host.rs:421:21-421:22)
      kind: falseEdge -> [real: bb89, imaginary: bb86]
  }
  preds [bb88]
  succs [bb86, bb89]

bb88
  0: _163 = Le((*_2)[_159], const 57_u8)
    SourceInfo(url/src/host.rs:421:25-421:36)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:421:25-421:36)
      kind: switchInt(move _163) -> [0: bb86, otherwise: bb87]
  }
  preds [bb85]
  succs [bb86, bb87]

bb89
  0: StorageLive(_164)
    SourceInfo(url/src/host.rs:421:21-421:22)
  1: _164 = (*_2)[_159]
    SourceInfo(url/src/host.rs:421:21-421:22)
  2: StorageLive(_165)
    SourceInfo(url/src/host.rs:421:40-421:41)
  3: _165 = _164
    SourceInfo(url/src/host.rs:421:40-421:41)
  4: _166 = SubWithOverflow(_165, const 48_u8)
    SourceInfo(url/src/host.rs:421:40-421:48)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:421:40-421:48)
      kind: assert(!move (_166.1: bool), "attempt to compute `{} - {}`, which would overflow", move _165, const 48_u8) -> [success: bb90, unwind: bb162]
  }
  preds [bb87]
  succs [bb90, bb162]

bb90
  0: _158 = move (_166.0: u8)
    SourceInfo(url/src/host.rs:421:40-421:48)
  1: StorageDead(_165)
    SourceInfo(url/src/host.rs:421:47-421:48)
  2: StorageDead(_164)
    SourceInfo(url/src/host.rs:421:47-421:48)
  3: FakeRead(ForLet(None), _158)
    SourceInfo(url/src/host.rs:420:21-420:26)
  4: StorageDead(_159)
    SourceInfo(url/src/host.rs:423:18-423:19)
  5: StorageLive(_168)
    SourceInfo(url/src/host.rs:424:17-433:18)
  6: PlaceMention(_153)
    SourceInfo(url/src/host.rs:424:23-424:33)
  7: _169 = discriminant(_153)
    SourceInfo(url/src/host.rs:424:23-424:33)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:424:17-424:33)
      kind: switchInt(move _169) -> [0: bb92, 1: bb93, otherwise: bb91]
  }
  preds [bb89]
  succs [bb91, bb92, bb93]

bb91
  0: FakeRead(ForMatchedPlace(None), _153)
    SourceInfo(url/src/host.rs:424:23-424:33)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:424:23-424:33)
      kind: unreachable
  }
  preds [bb90]
  succs []

bb92
  Terminator {
      source_info: SourceInfo(url/src/host.rs:425:21-425:25)
      kind: falseEdge -> [real: bb96, imaginary: bb93]
  }
  preds [bb90]
  succs [bb93, bb96]

bb93
  Terminator {
      source_info: SourceInfo(url/src/host.rs:424:17-424:33)
      kind: switchInt(((_153 as Some).0: u16)) -> [0: bb95, otherwise: bb94]
  }
  preds [bb90, bb92]
  succs [bb94, bb95]

bb94
  0: StorageLive(_175)
    SourceInfo(url/src/host.rs:427:26-427:35)
  1: _175 = &mut ((_153 as Some).0: u16)
    SourceInfo(url/src/host.rs:427:26-427:35)
  2: StorageLive(_176)
    SourceInfo(url/src/host.rs:428:30-428:37)
  3: StorageLive(_177)
    SourceInfo(url/src/host.rs:428:30-428:32)
  4: _177 = (*_175)
    SourceInfo(url/src/host.rs:428:30-428:32)
  5: _178 = MulWithOverflow(_177, const 10_u16)
    SourceInfo(url/src/host.rs:428:30-428:37)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:428:30-428:37)
      kind: assert(!move (_178.1: bool), "attempt to compute `{} * {}`, which would overflow", move _177, const 10_u16) -> [success: bb98, unwind: bb162]
  }
  preds [bb93, bb95]
  succs [bb98, bb162]

bb95
  Terminator {
      source_info: SourceInfo(url/src/host.rs:426:21-426:28)
      kind: falseEdge -> [real: bb97, imaginary: bb94]
  }
  preds [bb93]
  succs [bb94, bb97]

bb96
  0: StorageLive(_170)
    SourceInfo(url/src/host.rs:425:42-425:60)
  1: StorageLive(_171)
    SourceInfo(url/src/host.rs:425:47-425:59)
  2: StorageLive(_172)
    SourceInfo(url/src/host.rs:425:47-425:52)
  3: _172 = _158
    SourceInfo(url/src/host.rs:425:47-425:52)
  4: _171 = move _172 as u16 (IntToInt)
    SourceInfo(url/src/host.rs:425:47-425:59)
  5: StorageDead(_172)
    SourceInfo(url/src/host.rs:425:58-425:59)
  6: _170 = core::option::Option::<u16>::Some(move _171)
    SourceInfo(url/src/host.rs:425:42-425:60)
  7: StorageDead(_171)
    SourceInfo(url/src/host.rs:425:59-425:60)
  8: _153 = move _170
    SourceInfo(url/src/host.rs:425:29-425:60)
  9: _168 = const ()
    SourceInfo(url/src/host.rs:425:29-425:60)
  10: StorageDead(_170)
    SourceInfo(url/src/host.rs:425:59-425:60)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:425:59-425:60)
      kind: goto -> bb102
  }
  preds [bb92]
  succs [bb102]

bb97
  0: StorageLive(_174)
    SourceInfo(url/src/host.rs:426:43-426:73)
  1: _174 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:426:43-426:73)
  2: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _174)
    SourceInfo(url/src/host.rs:426:39-426:74)
  3: StorageDead(_174)
    SourceInfo(url/src/host.rs:426:73-426:74)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:426:32-426:74)
      kind: goto -> bb153
  }
  preds [bb95]
  succs [bb153]

bb98
  0: _176 = move (_178.0: u16)
    SourceInfo(url/src/host.rs:428:30-428:37)
  1: StorageDead(_177)
    SourceInfo(url/src/host.rs:428:36-428:37)
  2: StorageLive(_179)
    SourceInfo(url/src/host.rs:428:40-428:52)
  3: StorageLive(_180)
    SourceInfo(url/src/host.rs:428:40-428:45)
  4: _180 = _158
    SourceInfo(url/src/host.rs:428:40-428:45)
  5: _179 = move _180 as u16 (IntToInt)
    SourceInfo(url/src/host.rs:428:40-428:52)
  6: StorageDead(_180)
    SourceInfo(url/src/host.rs:428:51-428:52)
  7: _181 = AddWithOverflow(_176, _179)
    SourceInfo(url/src/host.rs:428:30-428:52)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:428:30-428:52)
      kind: assert(!move (_181.1: bool), "attempt to compute `{} + {}`, which would overflow", move _176, move _179) -> [success: bb99, unwind: bb162]
  }
  preds [bb94]
  succs [bb99, bb162]

bb99
  0: (*_175) = move (_181.0: u16)
    SourceInfo(url/src/host.rs:428:25-428:52)
  1: StorageDead(_179)
    SourceInfo(url/src/host.rs:428:51-428:52)
  2: StorageDead(_176)
    SourceInfo(url/src/host.rs:428:51-428:52)
  3: StorageLive(_182)
    SourceInfo(url/src/host.rs:429:28-429:36)
  4: StorageLive(_183)
    SourceInfo(url/src/host.rs:429:28-429:30)
  5: _183 = (*_175)
    SourceInfo(url/src/host.rs:429:28-429:30)
  6: _182 = Gt(move _183, const 255_u16)
    SourceInfo(url/src/host.rs:429:28-429:36)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:429:28-429:36)
      kind: switchInt(move _182) -> [0: bb101, otherwise: bb100]
  }
  preds [bb98]
  succs [bb100, bb101]

bb100
  0: StorageDead(_183)
    SourceInfo(url/src/host.rs:429:35-429:36)
  1: StorageLive(_185)
    SourceInfo(url/src/host.rs:430:40-430:70)
  2: _185 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:430:40-430:70)
  3: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _185)
    SourceInfo(url/src/host.rs:430:36-430:71)
  4: StorageDead(_185)
    SourceInfo(url/src/host.rs:430:70-430:71)
  5: StorageDead(_182)
    SourceInfo(url/src/host.rs:431:25-431:26)
  6: StorageDead(_175)
    SourceInfo(url/src/host.rs:432:21-432:22)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb153
  }
  preds [bb99]
  succs [bb153]

bb101
  0: StorageDead(_183)
    SourceInfo(url/src/host.rs:429:35-429:36)
  1: _168 = const ()
    SourceInfo(url/src/host.rs:431:26-431:26)
  2: StorageDead(_182)
    SourceInfo(url/src/host.rs:431:25-431:26)
  3: StorageDead(_175)
    SourceInfo(url/src/host.rs:432:21-432:22)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:432:21-432:22)
      kind: goto -> bb102
  }
  preds [bb99]
  succs [bb102]

bb102
  0: StorageDead(_168)
    SourceInfo(url/src/host.rs:433:17-433:18)
  1: _186 = AddWithOverflow(_10, const 1_usize)
    SourceInfo(url/src/host.rs:434:17-434:23)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:434:17-434:23)
      kind: assert(!move (_186.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb103, unwind: bb162]
  }
  preds [bb96, bb101]
  succs [bb103, bb162]

bb103
  0: _10 = move (_186.0: usize)
    SourceInfo(url/src/host.rs:434:17-434:23)
  1: _32 = const ()
    SourceInfo(url/src/host.rs:419:27-435:14)
  2: StorageDead(_158)
    SourceInfo(url/src/host.rs:435:13-435:14)
  3: StorageDead(_155)
    SourceInfo(url/src/host.rs:435:13-435:14)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:419:13-435:14)
      kind: goto -> bb82
  }
  preds [bb102]
  succs [bb82]

bb104
  0: StorageDead(_157)
    SourceInfo(url/src/host.rs:419:25-419:26)
  1: StorageDead(_156)
    SourceInfo(url/src/host.rs:419:25-419:26)
  2: StorageLive(_188)
    SourceInfo(url/src/host.rs:419:13-435:14)
  3: _154 = const ()
    SourceInfo(url/src/host.rs:419:13-435:14)
  4: StorageDead(_188)
    SourceInfo(url/src/host.rs:435:13-435:14)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb105
  }
  preds [bb83]
  succs [bb105]

bb105
  0: StorageDead(_155)
    SourceInfo(url/src/host.rs:435:13-435:14)
  1: StorageDead(_154)
    SourceInfo(url/src/host.rs:435:13-435:14)
  2: StorageLive(_190)
    SourceInfo(url/src/host.rs:437:37-441:14)
  3: PlaceMention(_153)
    SourceInfo(url/src/host.rs:437:54-437:64)
  4: _191 = discriminant(_153)
    SourceInfo(url/src/host.rs:437:54-437:64)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:437:44-437:51)
      kind: switchInt(move _191) -> [1: bb106, otherwise: bb111]
  }
  preds [bb86, bb104]
  succs [bb106, bb111]

bb106
  Terminator {
      source_info: SourceInfo(url/src/host.rs:437:44-437:51)
      kind: falseEdge -> [real: bb107, imaginary: bb111]
  }
  preds [bb105]
  succs [bb107, bb111]

bb107
  0: StorageLive(_192)
    SourceInfo(url/src/host.rs:437:49-437:50)
  1: _192 = ((_153 as Some).0: u16)
    SourceInfo(url/src/host.rs:437:49-437:50)
  2: StorageLive(_193)
    SourceInfo(url/src/host.rs:438:17-438:46)
  3: StorageLive(_194)
    SourceInfo(url/src/host.rs:438:17-438:38)
  4: StorageLive(_195)
    SourceInfo(url/src/host.rs:438:24-438:37)
  5: _195 = _8
    SourceInfo(url/src/host.rs:438:24-438:37)
  6: _196 = Len(_7)
    SourceInfo(url/src/host.rs:438:17-438:38)
  7: _197 = Lt(_195, _196)
    SourceInfo(url/src/host.rs:438:17-438:38)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:438:17-438:38)
      kind: assert(move _197, "index out of bounds: the length is {} but the index is {}", move _196, _195) -> [success: bb108, unwind: bb162]
  }
  preds [bb106]
  succs [bb108, bb162]

bb108
  0: _194 = _7[_195]
    SourceInfo(url/src/host.rs:438:17-438:38)
  1: _198 = MulWithOverflow(_194, const 256_u16)
    SourceInfo(url/src/host.rs:438:17-438:46)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:438:17-438:46)
      kind: assert(!move (_198.1: bool), "attempt to compute `{} * {}`, which would overflow", move _194, const 256_u16) -> [success: bb109, unwind: bb162]
  }
  preds [bb107]
  succs [bb109, bb162]

bb109
  0: _193 = move (_198.0: u16)
    SourceInfo(url/src/host.rs:438:17-438:46)
  1: StorageDead(_194)
    SourceInfo(url/src/host.rs:438:45-438:46)
  2: StorageLive(_199)
    SourceInfo(url/src/host.rs:438:49-438:50)
  3: _199 = _192
    SourceInfo(url/src/host.rs:438:49-438:50)
  4: _200 = AddWithOverflow(_193, _199)
    SourceInfo(url/src/host.rs:438:17-438:50)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:438:17-438:50)
      kind: assert(!move (_200.1: bool), "attempt to compute `{} + {}`, which would overflow", move _193, move _199) -> [success: bb110, unwind: bb162]
  }
  preds [bb108]
  succs [bb110, bb162]

bb110
  0: _190 = move (_200.0: u16)
    SourceInfo(url/src/host.rs:438:17-438:50)
  1: StorageDead(_199)
    SourceInfo(url/src/host.rs:438:49-438:50)
  2: StorageDead(_193)
    SourceInfo(url/src/host.rs:438:49-438:50)
  3: StorageDead(_195)
    SourceInfo(url/src/host.rs:439:13-439:14)
  4: StorageDead(_192)
    SourceInfo(url/src/host.rs:439:13-439:14)
  5: StorageLive(_203)
    SourceInfo(url/src/host.rs:437:20-437:33)
  6: _203 = _8
    SourceInfo(url/src/host.rs:437:20-437:33)
  7: _204 = Len(_7)
    SourceInfo(url/src/host.rs:437:13-437:34)
  8: _205 = Lt(_203, _204)
    SourceInfo(url/src/host.rs:437:13-437:34)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:437:13-437:34)
      kind: assert(move _205, "index out of bounds: the length is {} but the index is {}", move _204, _203) -> [success: bb112, unwind: bb162]
  }
  preds [bb109]
  succs [bb112, bb162]

bb111
  0: StorageLive(_202)
    SourceInfo(url/src/host.rs:440:28-440:58)
  1: _202 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:440:28-440:58)
  2: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _202)
    SourceInfo(url/src/host.rs:440:24-440:59)
  3: StorageDead(_202)
    SourceInfo(url/src/host.rs:440:58-440:59)
  4: StorageDead(_190)
    SourceInfo(url/src/host.rs:441:13-441:14)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb154
  }
  preds [bb105, bb106]
  succs [bb154]

bb112
  0: _7[_203] = move _190
    SourceInfo(url/src/host.rs:437:13-441:14)
  1: StorageDead(_190)
    SourceInfo(url/src/host.rs:441:13-441:14)
  2: StorageDead(_203)
    SourceInfo(url/src/host.rs:441:14-441:15)
  3: _206 = AddWithOverflow(_132, const 1_i32)
    SourceInfo(url/src/host.rs:442:13-442:30)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:442:13-442:30)
      kind: assert(!move (_206.1: bool), "attempt to compute `{} + {}`, which would overflow", _132, const 1_i32) -> [success: bb113, unwind: bb162]
  }
  preds [bb110]
  succs [bb113, bb162]

bb113
  0: _132 = move (_206.0: i32)
    SourceInfo(url/src/host.rs:442:13-442:30)
  1: StorageLive(_207)
    SourceInfo(url/src/host.rs:444:16-444:33)
  2: StorageLive(_208)
    SourceInfo(url/src/host.rs:444:16-444:28)
  3: _208 = _132
    SourceInfo(url/src/host.rs:444:16-444:28)
  4: _207 = Eq(move _208, const 2_i32)
    SourceInfo(url/src/host.rs:444:16-444:33)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:444:16-444:33)
      kind: switchInt(move _207) -> [0: bb115, otherwise: bb114]
  }
  preds [bb112]
  succs [bb114, bb115]

bb114
  0: StorageDead(_208)
    SourceInfo(url/src/host.rs:444:32-444:33)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:444:55-446:14)
      kind: goto -> bb117
  }
  preds [bb113]
  succs [bb117]

bb115
  0: StorageDead(_208)
    SourceInfo(url/src/host.rs:444:32-444:33)
  1: StorageLive(_209)
    SourceInfo(url/src/host.rs:444:37-444:54)
  2: StorageLive(_210)
    SourceInfo(url/src/host.rs:444:37-444:49)
  3: _210 = _132
    SourceInfo(url/src/host.rs:444:37-444:49)
  4: _209 = Eq(move _210, const 4_i32)
    SourceInfo(url/src/host.rs:444:37-444:54)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:444:37-444:54)
      kind: switchInt(move _209) -> [0: bb119, otherwise: bb116]
  }
  preds [bb113]
  succs [bb116, bb119]

bb116
  0: StorageDead(_210)
    SourceInfo(url/src/host.rs:444:53-444:54)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:444:55-446:14)
      kind: goto -> bb117
  }
  preds [bb115]
  succs [bb117]

bb117
  0: _211 = AddWithOverflow(_8, const 1_usize)
    SourceInfo(url/src/host.rs:445:17-445:35)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:445:17-445:35)
      kind: assert(!move (_211.1: bool), "attempt to compute `{} + {}`, which would overflow", _8, const 1_usize) -> [success: bb118, unwind: bb162]
  }
  preds [bb114, bb116]
  succs [bb118, bb162]

bb118
  0: _8 = move (_211.0: usize)
    SourceInfo(url/src/host.rs:445:17-445:35)
  1: _32 = const ()
    SourceInfo(url/src/host.rs:444:55-446:14)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:444:13-446:14)
      kind: goto -> bb120
  }
  preds [bb117]
  succs [bb120]

bb119
  0: StorageDead(_210)
    SourceInfo(url/src/host.rs:444:53-444:54)
  1: _32 = const ()
    SourceInfo(url/src/host.rs:446:14-446:14)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:444:13-446:14)
      kind: goto -> bb120
  }
  preds [bb115]
  succs [bb120]

bb120
  0: StorageDead(_209)
    SourceInfo(url/src/host.rs:446:13-446:14)
  1: StorageDead(_207)
    SourceInfo(url/src/host.rs:446:13-446:14)
  2: StorageDead(_153)
    SourceInfo(url/src/host.rs:447:9-447:10)
  3: StorageDead(_134)
    SourceInfo(url/src/host.rs:447:9-447:10)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:409:9-447:10)
      kind: goto -> bb67
  }
  preds [bb118, bb119]
  succs [bb67]

bb121
  0: StorageDead(_136)
    SourceInfo(url/src/host.rs:409:21-409:22)
  1: StorageDead(_135)
    SourceInfo(url/src/host.rs:409:21-409:22)
  2: StorageLive(_213)
    SourceInfo(url/src/host.rs:409:9-447:10)
  3: _133 = const ()
    SourceInfo(url/src/host.rs:409:9-447:10)
  4: StorageDead(_213)
    SourceInfo(url/src/host.rs:447:9-447:10)
  5: StorageDead(_134)
    SourceInfo(url/src/host.rs:447:9-447:10)
  6: StorageDead(_133)
    SourceInfo(url/src/host.rs:447:9-447:10)
  7: StorageLive(_215)
    SourceInfo(url/src/host.rs:449:12-449:29)
  8: StorageLive(_216)
    SourceInfo(url/src/host.rs:449:12-449:24)
  9: _216 = _132
    SourceInfo(url/src/host.rs:449:12-449:24)
  10: _215 = Ne(move _216, const 4_i32)
    SourceInfo(url/src/host.rs:449:12-449:29)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:449:12-449:29)
      kind: switchInt(move _215) -> [0: bb123, otherwise: bb122]
  }
  preds [bb68]
  succs [bb122, bb123]

bb122
  0: StorageDead(_216)
    SourceInfo(url/src/host.rs:449:28-449:29)
  1: StorageLive(_218)
    SourceInfo(url/src/host.rs:450:24-450:54)
  2: _218 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:450:24-450:54)
  3: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _218)
    SourceInfo(url/src/host.rs:450:20-450:55)
  4: StorageDead(_218)
    SourceInfo(url/src/host.rs:450:54-450:55)
  5: StorageDead(_215)
    SourceInfo(url/src/host.rs:451:9-451:10)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb156
  }
  preds [bb121]
  succs [bb156]

bb123
  0: StorageDead(_216)
    SourceInfo(url/src/host.rs:449:28-449:29)
  1: _125 = const ()
    SourceInfo(url/src/host.rs:451:10-451:10)
  2: StorageDead(_215)
    SourceInfo(url/src/host.rs:451:9-451:10)
  3: StorageDead(_132)
    SourceInfo(url/src/host.rs:452:5-452:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:404:5-452:6)
      kind: goto -> bb125
  }
  preds [bb121]
  succs [bb125]

bb124
  0: _125 = const ()
    SourceInfo(url/src/host.rs:452:6-452:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:404:5-452:6)
      kind: goto -> bb125
  }
  preds [bb63]
  succs [bb125]

bb125
  0: StorageDead(_126)
    SourceInfo(url/src/host.rs:452:5-452:6)
  1: StorageDead(_125)
    SourceInfo(url/src/host.rs:452:5-452:6)
  2: StorageLive(_219)
    SourceInfo(url/src/host.rs:454:5-456:6)
  3: StorageLive(_220)
    SourceInfo(url/src/host.rs:454:8-454:15)
  4: StorageLive(_221)
    SourceInfo(url/src/host.rs:454:8-454:9)
  5: _221 = _10
    SourceInfo(url/src/host.rs:454:8-454:9)
  6: StorageLive(_222)
    SourceInfo(url/src/host.rs:454:12-454:15)
  7: _222 = _4
    SourceInfo(url/src/host.rs:454:12-454:15)
  8: _220 = Lt(move _221, move _222)
    SourceInfo(url/src/host.rs:454:8-454:15)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:454:8-454:15)
      kind: switchInt(move _220) -> [0: bb127, otherwise: bb126]
  }
  preds [bb123, bb124]
  succs [bb126, bb127]

bb126
  0: StorageDead(_222)
    SourceInfo(url/src/host.rs:454:14-454:15)
  1: StorageDead(_221)
    SourceInfo(url/src/host.rs:454:14-454:15)
  2: StorageLive(_224)
    SourceInfo(url/src/host.rs:455:20-455:50)
  3: _224 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:455:20-455:50)
  4: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _224)
    SourceInfo(url/src/host.rs:455:16-455:51)
  5: StorageDead(_224)
    SourceInfo(url/src/host.rs:455:50-455:51)
  6: StorageDead(_220)
    SourceInfo(url/src/host.rs:456:5-456:6)
  7: StorageDead(_219)
    SourceInfo(url/src/host.rs:456:5-456:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb160
  }
  preds [bb125]
  succs [bb160]

bb127
  0: StorageDead(_222)
    SourceInfo(url/src/host.rs:454:14-454:15)
  1: StorageDead(_221)
    SourceInfo(url/src/host.rs:454:14-454:15)
  2: _219 = const ()
    SourceInfo(url/src/host.rs:456:6-456:6)
  3: StorageDead(_220)
    SourceInfo(url/src/host.rs:456:5-456:6)
  4: StorageDead(_219)
    SourceInfo(url/src/host.rs:456:5-456:6)
  5: StorageLive(_225)
    SourceInfo(url/src/host.rs:458:5-473:6)
  6: PlaceMention(_9)
    SourceInfo(url/src/host.rs:458:11-458:27)
  7: _226 = discriminant(_9)
    SourceInfo(url/src/host.rs:458:11-458:27)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:458:5-458:27)
      kind: switchInt(move _226) -> [1: bb129, otherwise: bb128]
  }
  preds [bb125]
  succs [bb128, bb129]

bb128
  0: StorageLive(_249)
    SourceInfo(url/src/host.rs:469:16-469:34)
  1: StorageLive(_250)
    SourceInfo(url/src/host.rs:469:16-469:29)
  2: _250 = _8
    SourceInfo(url/src/host.rs:469:16-469:29)
  3: _249 = Ne(move _250, const 8_usize)
    SourceInfo(url/src/host.rs:469:16-469:34)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:469:16-469:34)
      kind: switchInt(move _249) -> [0: bb142, otherwise: bb141]
  }
  preds [bb127, bb129]
  succs [bb141, bb142]

bb129
  Terminator {
      source_info: SourceInfo(url/src/host.rs:459:9-459:31)
      kind: falseEdge -> [real: bb130, imaginary: bb128]
  }
  preds [bb127]
  succs [bb128, bb130]

bb130
  0: StorageLive(_227)
    SourceInfo(url/src/host.rs:459:14-459:30)
  1: _227 = ((_9 as Some).0: usize)
    SourceInfo(url/src/host.rs:459:14-459:30)
  2: StorageLive(_228)
    SourceInfo(url/src/host.rs:460:17-460:26)
  3: StorageLive(_229)
    SourceInfo(url/src/host.rs:460:29-460:42)
  4: _229 = _8
    SourceInfo(url/src/host.rs:460:29-460:42)
  5: StorageLive(_230)
    SourceInfo(url/src/host.rs:460:45-460:61)
  6: _230 = _227
    SourceInfo(url/src/host.rs:460:45-460:61)
  7: _231 = SubWithOverflow(_229, _230)
    SourceInfo(url/src/host.rs:460:29-460:61)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:460:29-460:61)
      kind: assert(!move (_231.1: bool), "attempt to compute `{} - {}`, which would overflow", move _229, move _230) -> [success: bb131, unwind: bb162]
  }
  preds [bb129]
  succs [bb131, bb162]

bb131
  0: _228 = move (_231.0: usize)
    SourceInfo(url/src/host.rs:460:29-460:61)
  1: StorageDead(_230)
    SourceInfo(url/src/host.rs:460:60-460:61)
  2: StorageDead(_229)
    SourceInfo(url/src/host.rs:460:60-460:61)
  3: FakeRead(ForLet(None), _228)
    SourceInfo(url/src/host.rs:460:17-460:26)
  4: _8 = const 7_usize
    SourceInfo(url/src/host.rs:461:13-461:30)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:462:13-466:14)
      kind: goto -> bb132
  }
  preds [bb130]
  succs [bb132]

bb132
  Terminator {
      source_info: SourceInfo(url/src/host.rs:462:13-466:14)
      kind: falseUnwind -> [real: bb133, unwind: bb162]
  }
  preds [bb131, bb139]
  succs [bb133, bb162]

bb133
  0: StorageLive(_232)
    SourceInfo(url/src/host.rs:462:19-462:28)
  1: StorageLive(_233)
    SourceInfo(url/src/host.rs:462:19-462:24)
  2: _233 = _228
    SourceInfo(url/src/host.rs:462:19-462:24)
  3: _232 = Gt(move _233, const 0_usize)
    SourceInfo(url/src/host.rs:462:19-462:28)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:462:19-462:28)
      kind: switchInt(move _232) -> [0: bb140, otherwise: bb134]
  }
  preds [bb132]
  succs [bb134, bb140]

bb134
  0: StorageDead(_233)
    SourceInfo(url/src/host.rs:462:27-462:28)
  1: StorageLive(_234)
    SourceInfo(url/src/host.rs:463:17-463:73)
  2: StorageLive(_235)
    SourceInfo(url/src/host.rs:463:17-463:23)
  3: StorageLive(_236)
    SourceInfo(url/src/host.rs:463:17-463:23)
  4: _236 = &mut _7
    SourceInfo(url/src/host.rs:463:17-463:23)
  5: _235 = move _236 as &mut [u16] (PointerCoercion(Unsize))
    SourceInfo(url/src/host.rs:463:17-463:23)
  6: StorageDead(_236)
    SourceInfo(url/src/host.rs:463:22-463:23)
  7: StorageLive(_237)
    SourceInfo(url/src/host.rs:463:29-463:42)
  8: _237 = _8
    SourceInfo(url/src/host.rs:463:29-463:42)
  9: StorageLive(_238)
    SourceInfo(url/src/host.rs:463:44-463:72)
  10: StorageLive(_239)
    SourceInfo(url/src/host.rs:463:44-463:68)
  11: StorageLive(_240)
    SourceInfo(url/src/host.rs:463:44-463:60)
  12: _240 = _227
    SourceInfo(url/src/host.rs:463:44-463:60)
  13: StorageLive(_241)
    SourceInfo(url/src/host.rs:463:63-463:68)
  14: _241 = _228
    SourceInfo(url/src/host.rs:463:63-463:68)
  15: _242 = AddWithOverflow(_240, _241)
    SourceInfo(url/src/host.rs:463:44-463:68)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:463:44-463:68)
      kind: assert(!move (_242.1: bool), "attempt to compute `{} + {}`, which would overflow", move _240, move _241) -> [success: bb135, unwind: bb162]
  }
  preds [bb133]
  succs [bb135, bb162]

bb135
  0: _239 = move (_242.0: usize)
    SourceInfo(url/src/host.rs:463:44-463:68)
  1: StorageDead(_241)
    SourceInfo(url/src/host.rs:463:67-463:68)
  2: StorageDead(_240)
    SourceInfo(url/src/host.rs:463:67-463:68)
  3: _243 = SubWithOverflow(_239, const 1_usize)
    SourceInfo(url/src/host.rs:463:44-463:72)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:463:44-463:72)
      kind: assert(!move (_243.1: bool), "attempt to compute `{} - {}`, which would overflow", move _239, const 1_usize) -> [success: bb136, unwind: bb162]
  }
  preds [bb134]
  succs [bb136, bb162]

bb136
  0: _238 = move (_243.0: usize)
    SourceInfo(url/src/host.rs:463:44-463:72)
  1: StorageDead(_239)
    SourceInfo(url/src/host.rs:463:71-463:72)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:463:17-463:73)
      kind: _234 = core::slice::<impl [u16]>::swap(move _235, move _237, move _238) -> [return: bb137, unwind: bb162]
  }
  preds [bb135]
  succs [bb137, bb162]

bb137
  0: StorageDead(_238)
    SourceInfo(url/src/host.rs:463:72-463:73)
  1: StorageDead(_237)
    SourceInfo(url/src/host.rs:463:72-463:73)
  2: StorageDead(_235)
    SourceInfo(url/src/host.rs:463:72-463:73)
  3: StorageDead(_234)
    SourceInfo(url/src/host.rs:463:73-463:74)
  4: _244 = SubWithOverflow(_228, const 1_usize)
    SourceInfo(url/src/host.rs:464:17-464:27)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:464:17-464:27)
      kind: assert(!move (_244.1: bool), "attempt to compute `{} - {}`, which would overflow", _228, const 1_usize) -> [success: bb138, unwind: bb162]
  }
  preds [bb136]
  succs [bb138, bb162]

bb138
  0: _228 = move (_244.0: usize)
    SourceInfo(url/src/host.rs:464:17-464:27)
  1: _245 = SubWithOverflow(_8, const 1_usize)
    SourceInfo(url/src/host.rs:465:17-465:35)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:465:17-465:35)
      kind: assert(!move (_245.1: bool), "attempt to compute `{} - {}`, which would overflow", _8, const 1_usize) -> [success: bb139, unwind: bb162]
  }
  preds [bb137]
  succs [bb139, bb162]

bb139
  0: _8 = move (_245.0: usize)
    SourceInfo(url/src/host.rs:465:17-465:35)
  1: _32 = const ()
    SourceInfo(url/src/host.rs:462:29-466:14)
  2: StorageDead(_232)
    SourceInfo(url/src/host.rs:466:13-466:14)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:462:13-466:14)
      kind: goto -> bb132
  }
  preds [bb138]
  succs [bb132]

bb140
  0: StorageDead(_233)
    SourceInfo(url/src/host.rs:462:27-462:28)
  1: StorageLive(_247)
    SourceInfo(url/src/host.rs:462:13-466:14)
  2: _225 = const ()
    SourceInfo(url/src/host.rs:462:13-466:14)
  3: StorageDead(_247)
    SourceInfo(url/src/host.rs:466:13-466:14)
  4: StorageDead(_232)
    SourceInfo(url/src/host.rs:466:13-466:14)
  5: StorageDead(_228)
    SourceInfo(url/src/host.rs:467:9-467:10)
  6: StorageDead(_227)
    SourceInfo(url/src/host.rs:467:9-467:10)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:467:9-467:10)
      kind: goto -> bb143
  }
  preds [bb133]
  succs [bb143]

bb141
  0: StorageDead(_250)
    SourceInfo(url/src/host.rs:469:33-469:34)
  1: StorageLive(_252)
    SourceInfo(url/src/host.rs:470:28-470:58)
  2: _252 = parser::ParseError::InvalidIpv6Address
    SourceInfo(url/src/host.rs:470:28-470:58)
  3: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Err(move _252)
    SourceInfo(url/src/host.rs:470:24-470:59)
  4: StorageDead(_252)
    SourceInfo(url/src/host.rs:470:58-470:59)
  5: StorageDead(_249)
    SourceInfo(url/src/host.rs:471:13-471:14)
  6: StorageDead(_225)
    SourceInfo(url/src/host.rs:473:5-473:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb160
  }
  preds [bb128]
  succs [bb160]

bb142
  0: StorageDead(_250)
    SourceInfo(url/src/host.rs:469:33-469:34)
  1: _225 = const ()
    SourceInfo(url/src/host.rs:471:14-471:14)
  2: StorageDead(_249)
    SourceInfo(url/src/host.rs:471:13-471:14)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:471:13-471:14)
      kind: goto -> bb143
  }
  preds [bb128]
  succs [bb143]

bb143
  0: StorageDead(_225)
    SourceInfo(url/src/host.rs:473:5-473:6)
  1: StorageLive(_253)
    SourceInfo(url/src/host.rs:474:8-476:6)
  2: StorageLive(_254)
    SourceInfo(url/src/host.rs:475:9-475:18)
  3: StorageLive(_255)
    SourceInfo(url/src/host.rs:475:16-475:17)
  4: _255 = const 0_usize
    SourceInfo(url/src/host.rs:475:16-475:17)
  5: _256 = Len(_7)
    SourceInfo(url/src/host.rs:475:9-475:18)
  6: _257 = Lt(_255, _256)
    SourceInfo(url/src/host.rs:475:9-475:18)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:475:9-475:18)
      kind: assert(move _257, "index out of bounds: the length is {} but the index is {}", move _256, _255) -> [success: bb144, unwind: bb162]
  }
  preds [bb140, bb142]
  succs [bb144, bb162]

bb144
  0: _254 = _7[_255]
    SourceInfo(url/src/host.rs:475:9-475:18)
  1: StorageLive(_258)
    SourceInfo(url/src/host.rs:475:20-475:29)
  2: StorageLive(_259)
    SourceInfo(url/src/host.rs:475:27-475:28)
  3: _259 = const 1_usize
    SourceInfo(url/src/host.rs:475:27-475:28)
  4: _260 = Len(_7)
    SourceInfo(url/src/host.rs:475:20-475:29)
  5: _261 = Lt(_259, _260)
    SourceInfo(url/src/host.rs:475:20-475:29)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:475:20-475:29)
      kind: assert(move _261, "index out of bounds: the length is {} but the index is {}", move _260, _259) -> [success: bb145, unwind: bb162]
  }
  preds [bb143]
  succs [bb145, bb162]

bb145
  0: _258 = _7[_259]
    SourceInfo(url/src/host.rs:475:20-475:29)
  1: StorageLive(_262)
    SourceInfo(url/src/host.rs:475:31-475:40)
  2: StorageLive(_263)
    SourceInfo(url/src/host.rs:475:38-475:39)
  3: _263 = const 2_usize
    SourceInfo(url/src/host.rs:475:38-475:39)
  4: _264 = Len(_7)
    SourceInfo(url/src/host.rs:475:31-475:40)
  5: _265 = Lt(_263, _264)
    SourceInfo(url/src/host.rs:475:31-475:40)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:475:31-475:40)
      kind: assert(move _265, "index out of bounds: the length is {} but the index is {}", move _264, _263) -> [success: bb146, unwind: bb162]
  }
  preds [bb144]
  succs [bb146, bb162]

bb146
  0: _262 = _7[_263]
    SourceInfo(url/src/host.rs:475:31-475:40)
  1: StorageLive(_266)
    SourceInfo(url/src/host.rs:475:42-475:51)
  2: StorageLive(_267)
    SourceInfo(url/src/host.rs:475:49-475:50)
  3: _267 = const 3_usize
    SourceInfo(url/src/host.rs:475:49-475:50)
  4: _268 = Len(_7)
    SourceInfo(url/src/host.rs:475:42-475:51)
  5: _269 = Lt(_267, _268)
    SourceInfo(url/src/host.rs:475:42-475:51)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:475:42-475:51)
      kind: assert(move _269, "index out of bounds: the length is {} but the index is {}", move _268, _267) -> [success: bb147, unwind: bb162]
  }
  preds [bb145]
  succs [bb147, bb162]

bb147
  0: _266 = _7[_267]
    SourceInfo(url/src/host.rs:475:42-475:51)
  1: StorageLive(_270)
    SourceInfo(url/src/host.rs:475:53-475:62)
  2: StorageLive(_271)
    SourceInfo(url/src/host.rs:475:60-475:61)
  3: _271 = const 4_usize
    SourceInfo(url/src/host.rs:475:60-475:61)
  4: _272 = Len(_7)
    SourceInfo(url/src/host.rs:475:53-475:62)
  5: _273 = Lt(_271, _272)
    SourceInfo(url/src/host.rs:475:53-475:62)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:475:53-475:62)
      kind: assert(move _273, "index out of bounds: the length is {} but the index is {}", move _272, _271) -> [success: bb148, unwind: bb162]
  }
  preds [bb146]
  succs [bb148, bb162]

bb148
  0: _270 = _7[_271]
    SourceInfo(url/src/host.rs:475:53-475:62)
  1: StorageLive(_274)
    SourceInfo(url/src/host.rs:475:64-475:73)
  2: StorageLive(_275)
    SourceInfo(url/src/host.rs:475:71-475:72)
  3: _275 = const 5_usize
    SourceInfo(url/src/host.rs:475:71-475:72)
  4: _276 = Len(_7)
    SourceInfo(url/src/host.rs:475:64-475:73)
  5: _277 = Lt(_275, _276)
    SourceInfo(url/src/host.rs:475:64-475:73)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:475:64-475:73)
      kind: assert(move _277, "index out of bounds: the length is {} but the index is {}", move _276, _275) -> [success: bb149, unwind: bb162]
  }
  preds [bb147]
  succs [bb149, bb162]

bb149
  0: _274 = _7[_275]
    SourceInfo(url/src/host.rs:475:64-475:73)
  1: StorageLive(_278)
    SourceInfo(url/src/host.rs:475:75-475:84)
  2: StorageLive(_279)
    SourceInfo(url/src/host.rs:475:82-475:83)
  3: _279 = const 6_usize
    SourceInfo(url/src/host.rs:475:82-475:83)
  4: _280 = Len(_7)
    SourceInfo(url/src/host.rs:475:75-475:84)
  5: _281 = Lt(_279, _280)
    SourceInfo(url/src/host.rs:475:75-475:84)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:475:75-475:84)
      kind: assert(move _281, "index out of bounds: the length is {} but the index is {}", move _280, _279) -> [success: bb150, unwind: bb162]
  }
  preds [bb148]
  succs [bb150, bb162]

bb150
  0: _278 = _7[_279]
    SourceInfo(url/src/host.rs:475:75-475:84)
  1: StorageLive(_282)
    SourceInfo(url/src/host.rs:475:86-475:95)
  2: StorageLive(_283)
    SourceInfo(url/src/host.rs:475:93-475:94)
  3: _283 = const 7_usize
    SourceInfo(url/src/host.rs:475:93-475:94)
  4: _284 = Len(_7)
    SourceInfo(url/src/host.rs:475:86-475:95)
  5: _285 = Lt(_283, _284)
    SourceInfo(url/src/host.rs:475:86-475:95)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:475:86-475:95)
      kind: assert(move _285, "index out of bounds: the length is {} but the index is {}", move _284, _283) -> [success: bb151, unwind: bb162]
  }
  preds [bb149]
  succs [bb151, bb162]

bb151
  0: _282 = _7[_283]
    SourceInfo(url/src/host.rs:475:86-475:95)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:474:8-476:6)
      kind: _253 = core::net::Ipv6Addr::new(move _254, move _258, move _262, move _266, move _270, move _274, move _278, move _282) -> [return: bb152, unwind: bb162]
  }
  preds [bb150]
  succs [bb152, bb162]

bb152
  0: StorageDead(_282)
    SourceInfo(url/src/host.rs:476:5-476:6)
  1: StorageDead(_278)
    SourceInfo(url/src/host.rs:476:5-476:6)
  2: StorageDead(_274)
    SourceInfo(url/src/host.rs:476:5-476:6)
  3: StorageDead(_270)
    SourceInfo(url/src/host.rs:476:5-476:6)
  4: StorageDead(_266)
    SourceInfo(url/src/host.rs:476:5-476:6)
  5: StorageDead(_262)
    SourceInfo(url/src/host.rs:476:5-476:6)
  6: StorageDead(_258)
    SourceInfo(url/src/host.rs:476:5-476:6)
  7: StorageDead(_254)
    SourceInfo(url/src/host.rs:476:5-476:6)
  8: _0 = core::result::Result::<core::net::Ipv6Addr, parser::ParseError>::Ok(move _253)
    SourceInfo(url/src/host.rs:474:5-476:7)
  9: StorageDead(_253)
    SourceInfo(url/src/host.rs:476:6-476:7)
  10: StorageDead(_10)
    SourceInfo(url/src/host.rs:477:1-477:2)
  11: StorageDead(_9)
    SourceInfo(url/src/host.rs:477:1-477:2)
  12: StorageDead(_8)
    SourceInfo(url/src/host.rs:477:1-477:2)
  13: StorageDead(_7)
    SourceInfo(url/src/host.rs:477:1-477:2)
  14: StorageDead(_6)
    SourceInfo(url/src/host.rs:477:1-477:2)
  15: StorageDead(_4)
    SourceInfo(url/src/host.rs:477:1-477:2)
  16: StorageDead(_2)
    SourceInfo(url/src/host.rs:477:1-477:2)
  17: StorageDead(_283)
    SourceInfo(url/src/host.rs:477:1-477:2)
  18: StorageDead(_279)
    SourceInfo(url/src/host.rs:477:1-477:2)
  19: StorageDead(_275)
    SourceInfo(url/src/host.rs:477:1-477:2)
  20: StorageDead(_271)
    SourceInfo(url/src/host.rs:477:1-477:2)
  21: StorageDead(_267)
    SourceInfo(url/src/host.rs:477:1-477:2)
  22: StorageDead(_263)
    SourceInfo(url/src/host.rs:477:1-477:2)
  23: StorageDead(_259)
    SourceInfo(url/src/host.rs:477:1-477:2)
  24: StorageDead(_255)
    SourceInfo(url/src/host.rs:477:1-477:2)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:477:2-477:2)
      kind: goto -> bb161
  }
  preds [bb151]
  succs [bb161]

bb153
  0: StorageDead(_168)
    SourceInfo(url/src/host.rs:433:17-433:18)
  1: StorageDead(_158)
    SourceInfo(url/src/host.rs:435:13-435:14)
  2: StorageDead(_155)
    SourceInfo(url/src/host.rs:435:13-435:14)
  3: StorageDead(_154)
    SourceInfo(url/src/host.rs:435:13-435:14)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb154
  }
  preds [bb97, bb100]
  succs [bb154]

bb154
  0: StorageDead(_153)
    SourceInfo(url/src/host.rs:447:9-447:10)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb155
  }
  preds [bb111, bb153]
  succs [bb155]

bb155
  0: StorageDead(_134)
    SourceInfo(url/src/host.rs:447:9-447:10)
  1: StorageDead(_133)
    SourceInfo(url/src/host.rs:447:9-447:10)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb156
  }
  preds [bb79, bb154]
  succs [bb156]

bb156
  0: StorageDead(_132)
    SourceInfo(url/src/host.rs:452:5-452:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb157
  }
  preds [bb122, bb155]
  succs [bb157]

bb157
  0: StorageDead(_126)
    SourceInfo(url/src/host.rs:452:5-452:6)
  1: StorageDead(_125)
    SourceInfo(url/src/host.rs:452:5-452:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb160
  }
  preds [bb65, bb156]
  succs [bb160]

bb158
  0: StorageDead(_91)
    SourceInfo(url/src/host.rs:396:9-396:10)
  1: StorageDead(_88)
    SourceInfo(url/src/host.rs:396:9-396:10)
  2: StorageDead(_87)
    SourceInfo(url/src/host.rs:396:9-396:10)
  3: StorageDead(_63)
    SourceInfo(url/src/host.rs:402:5-402:6)
  4: StorageDead(_58)
    SourceInfo(url/src/host.rs:402:5-402:6)
  5: StorageDead(_57)
    SourceInfo(url/src/host.rs:402:5-402:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb159
  }
  preds [bb43, bb47, bb49, bb53]
  succs [bb159]

bb159
  0: StorageDead(_33)
    SourceInfo(url/src/host.rs:402:5-402:6)
  1: StorageDead(_31)
    SourceInfo(url/src/host.rs:402:5-402:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb160
  }
  preds [bb15, bb20, bb158]
  succs [bb160]

bb160
  0: StorageDead(_10)
    SourceInfo(url/src/host.rs:477:1-477:2)
  1: StorageDead(_9)
    SourceInfo(url/src/host.rs:477:1-477:2)
  2: StorageDead(_8)
    SourceInfo(url/src/host.rs:477:1-477:2)
  3: StorageDead(_7)
    SourceInfo(url/src/host.rs:477:1-477:2)
  4: StorageDead(_6)
    SourceInfo(url/src/host.rs:477:1-477:2)
  5: StorageDead(_4)
    SourceInfo(url/src/host.rs:477:1-477:2)
  6: StorageDead(_2)
    SourceInfo(url/src/host.rs:477:1-477:2)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:477:2-477:2)
      kind: goto -> bb161
  }
  preds [bb3, bb8, bb126, bb141, bb157, bb159]
  succs [bb161]

bb161
  Terminator {
      source_info: SourceInfo(url/src/host.rs:477:2-477:2)
      kind: return
  }
  preds [bb152, bb160]
  succs []

bb162
  Terminator {
      source_info: SourceInfo(url/src/host.rs:329:1-477:2)
      kind: resume
  }
  preds [bb0, bb1, bb4, bb6, bb12, bb16, bb18, bb21, bb22, bb24, bb25, bb27, bb29, bb30, bb35, bb36, bb37, bb41, bb51, bb59, bb60, bb67, bb72, bb74, bb82, bb84, bb89, bb94, bb98, bb102, bb107, bb108, bb109, bb110, bb112, bb117, bb130, bb132, bb134, bb135, bb136, bb137, bb138, bb143, bb144, bb145, bb146, bb147, bb148, bb149, bb150, bb151]
  succs []

