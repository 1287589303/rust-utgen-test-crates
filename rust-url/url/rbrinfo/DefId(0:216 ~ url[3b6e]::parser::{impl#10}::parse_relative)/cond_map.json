{
  "url/src/parser.rs:814:39:814:58": [
    {
      "Match": {
        "match_source": "url/src/parser.rs:814:39:814:58",
        "match_str": "input.split_first()",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "url/src/parser.rs:815:21:815:43": {
            "pat": {
              "pat_str": "(Some('/'), remaining)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "url/src/parser.rs:815:22:815:31"
                  ],
                  "1": [
                    null,
                    "url/src/parser.rs:815:33:815:42"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:815:47:820:22"
          },
          "url/src/parser.rs:821:21:821:22": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "url/src/parser.rs:821:26:823:22"
          }
        }
      }
    }
  ],
  "url/src/parser.rs:744:42:744:89": [
    {
      "Match": {
        "match_source": "url/src/parser.rs:744:42:744:89",
        "match_str": "(base_url.query_start, base_url.fragment_start)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "url/src/parser.rs:746:21:746:33": {
            "pat": {
              "pat_str": "(Some(i), _)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "url/src/parser.rs:746:22:746:29"
                  ],
                  "1": [
                    null,
                    "url/src/parser.rs:746:31:746:32"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:746:55:746:74"
          },
          "url/src/parser.rs:745:21:745:33": {
            "pat": {
              "pat_str": "(None, None)",
              "kind": {
                "StructLike": {
                  "1": [
                    null,
                    "url/src/parser.rs:745:28:745:32"
                  ],
                  "0": [
                    null,
                    "url/src/parser.rs:745:22:745:26"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:745:37:745:61"
          },
          "url/src/parser.rs:746:36:746:51": {
            "pat": {
              "pat_str": "(None, Some(i))",
              "kind": {
                "StructLike": {
                  "1": [
                    null,
                    "url/src/parser.rs:746:43:746:50"
                  ],
                  "0": [
                    null,
                    "url/src/parser.rs:746:37:746:41"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:746:55:746:74"
          }
        }
      }
    }
  ],
  "url/src/parser.rs:761:20:761:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Ge",
          "expr": "slashes_count >= 2",
          "lhs": "slashes_count",
          "rhs": "2",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/parser.rs:809:20:809:76": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.serialization.len() == base_url.path_start as usize",
          "lhs": "self.serialization.len()",
          "rhs": "base_url.path_start as usize",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/parser.rs:726:23:726:52": [
    {
      "Bool": {
        "Other": "self.serialization.is_empty()"
      }
    }
  ],
  "url/src/parser.rs:773:24:773:73": [
    {
      "Bool": {
        "Other": "let Some(after_prefix) = input.split_prefix(\"//\")"
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12:316:42": [
    {
      "Bool": {
        "Other": "$crate::cfg!(debug_assertions)"
      }
    }
  ],
  "url/src/parser.rs:810:78:810:94": [
    {
      "Bool": {
        "Other": "input.is_empty()"
      }
    }
  ],
  "url/src/parser.rs:728:15:728:25": [
    {
      "Match": {
        "match_source": "url/src/parser.rs:728:15:728:25",
        "match_str": "first_char",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "url/src/parser.rs:729:13:729:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:729:21:741:14"
          },
          "url/src/parser.rs:759:25:759:35": {
            "pat": {
              "pat_str": "Some('\\\\')",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:759:39:798:14"
          },
          "url/src/parser.rs:758:13:758:22": {
            "pat": {
              "pat_str": "Some('#')",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:758:26:758:61"
          },
          "url/src/parser.rs:759:13:759:22": {
            "pat": {
              "pat_str": "Some('/')",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:759:39:798:14"
          },
          "url/src/parser.rs:799:13:799:14": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "url/src/parser.rs:799:18:836:14"
          },
          "url/src/parser.rs:742:13:742:22": {
            "pat": {
              "pat_str": "Some('?')",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:742:26:757:14"
          }
        }
      }
    }
  ],
  "url/src/parser.rs:731:45:731:68": [
    {
      "Match": {
        "match_source": "url/src/parser.rs:731:45:731:68",
        "match_str": "base_url.fragment_start",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "url/src/parser.rs:732:21:732:28": {
            "pat": {
              "pat_str": "Some(i)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:732:32:732:69"
          },
          "url/src/parser.rs:733:21:733:25": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:733:29:733:53"
          }
        }
      }
    }
  ],
  "url/src/parser.rs:750:21:750:92": [
    {
      "Try": "self.parse_query_and_fragment(scheme_type, base_url.scheme_end, input)?"
    }
  ],
  "url/src/parser.rs:810:25:810:73": [
    {
      "Bool": {
        "Other": "SchemeType::from(base_url.scheme()).is_special()"
      }
    }
  ],
  "url/src/parser.rs:770:35:770:71": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "base_url.byte_at(scheme_end) == b':'",
          "lhs": "base_url.byte_at(scheme_end)",
          "rhs": "b':'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/parser.rs:772:52:772:66": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "scheme_end + 1",
          "lhs": "scheme_end",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/parser.rs:800:42:800:89": [
    {
      "Match": {
        "match_source": "url/src/parser.rs:800:42:800:89",
        "match_str": "(base_url.query_start, base_url.fragment_start)",
        "match_kind": {
          "StructLike": null
        },
        "arms": {
          "url/src/parser.rs:802:21:802:33": {
            "pat": {
              "pat_str": "(Some(i), _)",
              "kind": {
                "StructLike": {
                  "0": [
                    null,
                    "url/src/parser.rs:802:22:802:29"
                  ],
                  "1": [
                    null,
                    "url/src/parser.rs:802:31:802:32"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:802:55:802:74"
          },
          "url/src/parser.rs:801:21:801:33": {
            "pat": {
              "pat_str": "(None, None)",
              "kind": {
                "StructLike": {
                  "1": [
                    null,
                    "url/src/parser.rs:801:28:801:32"
                  ],
                  "0": [
                    null,
                    "url/src/parser.rs:801:22:801:26"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:801:37:801:61"
          },
          "url/src/parser.rs:802:36:802:51": {
            "pat": {
              "pat_str": "(None, Some(i))",
              "kind": {
                "StructLike": {
                  "1": [
                    null,
                    "url/src/parser.rs:802:43:802:50"
                  ],
                  "0": [
                    null,
                    "url/src/parser.rs:802:37:802:41"
                  ]
                }
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:802:55:802:74"
          }
        }
      }
    }
  ]
}