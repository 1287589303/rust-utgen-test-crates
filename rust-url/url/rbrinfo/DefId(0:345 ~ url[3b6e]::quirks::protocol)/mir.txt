bb0
  0: StorageLive(_2)
    SourceInfo(url/src/quirks.rs:100:5-100:52)
  1: StorageLive(_3)
    SourceInfo(url/src/quirks.rs:100:18-100:52)
  2: StorageLive(_4)
    SourceInfo(url/src/quirks.rs:100:6-100:18)
  3: StorageLive(_5)
    SourceInfo(url/src/quirks.rs:100:6-100:18)
  4: StorageLive(_6)
    SourceInfo(url/src/quirks.rs:100:6-100:9)
  5: _6 = &(*_1)
    SourceInfo(url/src/quirks.rs:100:6-100:9)
  Terminator {
      source_info: SourceInfo(url/src/quirks.rs:100:6-100:18)
      kind: _5 = Url::as_str(move _6) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: _4 = &(*_5)
    SourceInfo(url/src/quirks.rs:100:6-100:18)
  1: StorageDead(_6)
    SourceInfo(url/src/quirks.rs:100:17-100:18)
  2: StorageLive(_7)
    SourceInfo(url/src/quirks.rs:100:19-100:51)
  3: StorageLive(_8)
    SourceInfo(url/src/quirks.rs:100:21-100:51)
  4: StorageLive(_9)
    SourceInfo(url/src/quirks.rs:100:21-100:39)
  5: StorageLive(_10)
    SourceInfo(url/src/quirks.rs:100:21-100:33)
  6: StorageLive(_11)
    SourceInfo(url/src/quirks.rs:100:21-100:33)
  7: StorageLive(_12)
    SourceInfo(url/src/quirks.rs:100:21-100:24)
  8: _12 = &(*_1)
    SourceInfo(url/src/quirks.rs:100:21-100:24)
  Terminator {
      source_info: SourceInfo(url/src/quirks.rs:100:21-100:33)
      kind: _11 = Url::scheme(move _12) -> [return: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: _10 = &(*_11)
    SourceInfo(url/src/quirks.rs:100:21-100:33)
  1: StorageDead(_12)
    SourceInfo(url/src/quirks.rs:100:32-100:33)
  Terminator {
      source_info: SourceInfo(url/src/quirks.rs:100:21-100:39)
      kind: _9 = core::str::<impl str>::len(move _10) -> [return: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: StorageDead(_10)
    SourceInfo(url/src/quirks.rs:100:38-100:39)
  1: StorageLive(_13)
    SourceInfo(url/src/quirks.rs:100:42-100:51)
  2: StorageLive(_14)
    SourceInfo(url/src/quirks.rs:100:42-100:45)
  3: StorageLive(_15)
    SourceInfo(url/src/quirks.rs:100:42-100:45)
  4: _15 = const ":"
    SourceInfo(url/src/quirks.rs:100:42-100:45)
  5: _14 = &(*_15)
    SourceInfo(url/src/quirks.rs:100:42-100:45)
  Terminator {
      source_info: SourceInfo(url/src/quirks.rs:100:42-100:51)
      kind: _13 = core::str::<impl str>::len(move _14) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: StorageDead(_14)
    SourceInfo(url/src/quirks.rs:100:50-100:51)
  1: _16 = AddWithOverflow(_9, _13)
    SourceInfo(url/src/quirks.rs:100:21-100:51)
  Terminator {
      source_info: SourceInfo(url/src/quirks.rs:100:21-100:51)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, move _13) -> [success: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: _8 = move (_16.0: usize)
    SourceInfo(url/src/quirks.rs:100:21-100:51)
  1: StorageDead(_13)
    SourceInfo(url/src/quirks.rs:100:50-100:51)
  2: StorageDead(_9)
    SourceInfo(url/src/quirks.rs:100:50-100:51)
  3: _7 = core::ops::RangeTo::<usize> { end: move _8 }
    SourceInfo(url/src/quirks.rs:100:19-100:51)
  4: StorageDead(_8)
    SourceInfo(url/src/quirks.rs:100:50-100:51)
  Terminator {
      source_info: SourceInfo(url/src/quirks.rs:100:18-100:52)
      kind: _3 = <str as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _4, move _7) -> [return: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_7)
    SourceInfo(url/src/quirks.rs:100:51-100:52)
  1: StorageDead(_4)
    SourceInfo(url/src/quirks.rs:100:51-100:52)
  2: _2 = &(*_3)
    SourceInfo(url/src/quirks.rs:100:5-100:52)
  3: _0 = &(*_2)
    SourceInfo(url/src/quirks.rs:100:5-100:52)
  4: StorageDead(_15)
    SourceInfo(url/src/quirks.rs:101:1-101:2)
  5: StorageDead(_11)
    SourceInfo(url/src/quirks.rs:101:1-101:2)
  6: StorageDead(_5)
    SourceInfo(url/src/quirks.rs:101:1-101:2)
  7: StorageDead(_3)
    SourceInfo(url/src/quirks.rs:101:1-101:2)
  8: StorageDead(_2)
    SourceInfo(url/src/quirks.rs:101:1-101:2)
  Terminator {
      source_info: SourceInfo(url/src/quirks.rs:101:2-101:2)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(url/src/quirks.rs:99:1-101:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5]
  succs []

