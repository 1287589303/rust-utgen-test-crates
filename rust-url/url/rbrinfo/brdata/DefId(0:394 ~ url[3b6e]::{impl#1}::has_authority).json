{
  "name": "url::{impl#1}::has_authority",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:950:5:953:6",
  "doc": "/// Return whether the URL has an 'authority',\n/// which can contain a username, password, host, and port number.\n///\n/// URLs that do *not* are either path-only like `unix:/run/foo.socket`\n/// or cannot-be-a-base like `data:text/plain,Stuff`.\n///\n/// See also the `authority` method.\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"ftp://rms@example.com\")?;\n/// assert!(url.has_authority());\n///\n/// let url = Url::parse(\"unix:/run/foo.socket\")?;\n/// assert!(!url.has_authority());\n///\n/// let url = Url::parse(\"data:text/plain,Stuff\")?;\n/// assert!(!url.has_authority());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn has_authority(&self) -> bool {",
    "    debug_assert!(self.byte_at(self.scheme_end) == b':');",
    "    self.slice(self.scheme_end..).starts_with(\"://\")",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 951,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "true",
          "line": 951,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}