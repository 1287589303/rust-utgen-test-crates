{
  "name": "url::{impl#1}::host",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1192:5:1199:6",
  "doc": "/// Return the parsed representation of the host for this URL.\n/// Non-ASCII domain labels are punycode-encoded per IDNA if this is the host\n/// of a special URL, or percent encoded for non-special URLs.\n///\n/// Cannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\n/// donâ€™t have a host.\n///\n/// See also the `host_str` method.\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"https://127.0.0.1/index.html\")?;\n/// assert!(url.host().is_some());\n///\n/// let url = Url::parse(\"ftp://rms@example.com\")?;\n/// assert!(url.host().is_some());\n///\n/// let url = Url::parse(\"unix:/run/foo.socket\")?;\n/// assert!(url.host().is_none());\n///\n/// let url = Url::parse(\"data:text/plain,Stuff\")?;\n/// assert!(url.host().is_none());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn host(&self) -> Option<Host<&str>> {",
    "    match self.host {",
    "        HostInternal::None => None,",
    "        HostInternal::Domain => Some(Host::Domain(self.slice(self.host_start..self.host_end))),",
    "        HostInternal::Ipv4(address) => Some(Host::Ipv4(address)),",
    "        HostInternal::Ipv6(address) => Some(Host::Ipv6(address)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.host matches HostInternal::Ipv6(address)",
          "norm": null,
          "value": "true",
          "line": 1193,
          "bound": null
        }
      ],
      "ret": "Some(Host::Ipv6(address))",
      "path": [
        0,
        5,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.host matches HostInternal::Ipv4(address)",
          "norm": null,
          "value": "true",
          "line": 1193,
          "bound": null
        },
        {
          "cond": "self.host matches HostInternal::Ipv4(address)",
          "norm": null,
          "value": "true",
          "line": 1193,
          "bound": null
        }
      ],
      "ret": "Some(Host::Ipv4(address))",
      "path": [
        0,
        4,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.host matches HostInternal::Domain",
          "norm": null,
          "value": "true",
          "line": 1193,
          "bound": null
        },
        {
          "cond": "self.host matches HostInternal::Domain",
          "norm": null,
          "value": "true",
          "line": 1193,
          "bound": null
        }
      ],
      "ret": "Some(Host::Domain(self.slice(self.host_start..self.host_end)))",
      "path": [
        0,
        3,
        7,
        8,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.host matches HostInternal::None",
          "norm": null,
          "value": "true",
          "line": 1193,
          "bound": null
        },
        {
          "cond": "self.host matches HostInternal::None",
          "norm": null,
          "value": "true",
          "line": 1193,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        6,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}