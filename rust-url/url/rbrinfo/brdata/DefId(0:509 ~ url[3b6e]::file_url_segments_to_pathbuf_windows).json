{
  "name": "url::file_url_segments_to_pathbuf_windows",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:3115:1:3179:2",
  "doc": "",
  "code": [
    "fn file_url_segments_to_pathbuf_windows(",
    "    estimated_capacity: usize,",
    "    host: Option<&str>,",
    "    mut segments: str::Split<'_, char>,",
    ") -> Result<PathBuf, ()> {",
    "    use percent_encoding::percent_decode_str;",
    "    let mut string = String::new();",
    "    string.try_reserve(estimated_capacity).map_err(|_| ())?;",
    "    if let Some(host) = host {",
    "        string.push_str(r\"\\\\\");",
    "        string.push_str(host);",
    "    } else {",
    "        let first = segments.next().ok_or(())?;",
    "",
    "        match first.len() {",
    "            2 => {",
    "                if !first.starts_with(parser::ascii_alpha) || first.as_bytes()[1] != b':' {",
    "                    return Err(());",
    "                }",
    "",
    "                string.push_str(first);",
    "            }",
    "",
    "            4 => {",
    "                if !first.starts_with(parser::ascii_alpha) {",
    "                    return Err(());",
    "                }",
    "                let bytes = first.as_bytes();",
    "                if bytes[1] != b'%' || bytes[2] != b'3' || (bytes[3] != b'a' && bytes[3] != b'A') {",
    "                    return Err(());",
    "                }",
    "",
    "                string.push_str(&first[0..1]);",
    "                string.push(':');",
    "            }",
    "",
    "            _ => return Err(()),",
    "        }",
    "    };",
    "",
    "    for segment in segments {",
    "        string.push('\\\\');",
    "",
    "        // Currently non-unicode windows paths cannot be represented",
    "        match percent_decode_str(segment).decode_utf8() {",
    "            Ok(s) => string.push_str(&s),",
    "            Err(..) => return Err(()),",
    "        }",
    "    }",
    "    // ensure our estimated capacity was good",
    "    if cfg!(test) {",
    "        debug_assert!(",
    "            string.len() <= estimated_capacity,",
    "            \"len: {}, capacity: {}\",",
    "            string.len(),",
    "            estimated_capacity",
    "        );",
    "    }",
    "    let path = PathBuf::from(string);",
    "    debug_assert!(",
    "        path.is_absolute(),",
    "        \"to_file_path() failed to produce an absolute Path\"",
    "    );",
    "    Ok(path)",
    "}"
  ],
  "size": {
    "chain": 29,
    "contra": 8,
    "min_set": 13
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Err/None",
          "line": 3122,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Err/None",
          "line": 3127,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        19,
        21,
        22,
        106,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3130,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches _",
          "norm": null,
          "value": "true",
          "line": 3151,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        24,
        105,
        106,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "true",
          "line": 3143,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        43,
        52,
        105,
        106,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "true",
          "line": 3143,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        46,
        52,
        105,
        106,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "true",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'A'",
          "norm": "b'A' != bytes[3]",
          "value": "true",
          "line": 3143,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        49,
        50,
        51,
        52,
        105,
        106,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "true",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'A'",
          "norm": "b'A' != bytes[3]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Err(..)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        49,
        50,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        74,
        104,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "true",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'A'",
          "norm": "b'A' != bytes[3]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": "Ok(path)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        49,
        50,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        73,
        75,
        76,
        77,
        78,
        79,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        97,
        100,
        101,
        102,
        103,
        109
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "true",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'A'",
          "norm": "b'A' != bytes[3]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "false",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        49,
        50,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        73,
        75,
        76,
        77,
        78,
        79,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        98,
        110,
        114,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "true",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'A'",
          "norm": "b'A' != bytes[3]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": "Ok(path)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        49,
        50,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        97,
        100,
        101,
        102,
        103,
        109
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "true",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'A'",
          "norm": "b'A' != bytes[3]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "false",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        49,
        50,
        53,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        98,
        110,
        114,
        115
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Err(..)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        74,
        104,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": "Ok(path)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        73,
        75,
        76,
        77,
        78,
        79,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        97,
        100,
        101,
        102,
        103,
        109
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "false",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        73,
        75,
        76,
        77,
        78,
        79,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        98,
        110,
        114,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": "Ok(path)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        97,
        100,
        101,
        102,
        103,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3139,
          "bound": null
        },
        {
          "cond": "bytes[1] != b'%'",
          "norm": "b'%' != bytes[1]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[2] != b'3'",
          "norm": "b'3' != bytes[2]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "bytes[3] != b'a'",
          "norm": "b'a' != bytes[3]",
          "value": "false",
          "line": 3143,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "false",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        39,
        41,
        42,
        44,
        45,
        47,
        48,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        98,
        110,
        114,
        115
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3138,
          "bound": null
        },
        {
          "cond": "first.len() matches 4",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "false",
          "line": 3139,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        26,
        37,
        38,
        40,
        105,
        106,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3130,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "first.as_bytes()[1] != b':'",
          "norm": "b':' != first.as_bytes()[1]",
          "value": "true",
          "line": 3131,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        25,
        27,
        28,
        29,
        31,
        32,
        33,
        34,
        105,
        106,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3130,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "first.as_bytes()[1] != b':'",
          "norm": "b':' != first.as_bytes()[1]",
          "value": "false",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Err(..)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        25,
        27,
        28,
        29,
        31,
        32,
        35,
        36,
        59,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        74,
        104,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3130,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "first.as_bytes()[1] != b':'",
          "norm": "b':' != first.as_bytes()[1]",
          "value": "false",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": "Ok(path)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        25,
        27,
        28,
        29,
        31,
        32,
        35,
        36,
        59,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        73,
        75,
        76,
        77,
        78,
        79,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        97,
        100,
        101,
        102,
        103,
        109
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3130,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "first.as_bytes()[1] != b':'",
          "norm": "b':' != first.as_bytes()[1]",
          "value": "false",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "false",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        25,
        27,
        28,
        29,
        31,
        32,
        35,
        36,
        59,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        73,
        75,
        76,
        77,
        78,
        79,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        98,
        110,
        114,
        115
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3130,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "first.as_bytes()[1] != b':'",
          "norm": "b':' != first.as_bytes()[1]",
          "value": "false",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": "Ok(path)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        25,
        27,
        28,
        29,
        31,
        32,
        35,
        36,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        97,
        100,
        101,
        102,
        103,
        109
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3130,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "true",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "first.as_bytes()[1] != b':'",
          "norm": "b':' != first.as_bytes()[1]",
          "value": "false",
          "line": 3131,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "false",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        25,
        27,
        28,
        29,
        31,
        32,
        35,
        36,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        98,
        110,
        114,
        115
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segments.next().ok_or(())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3127,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3130,
          "bound": null
        },
        {
          "cond": "first.len() matches 2",
          "norm": null,
          "value": "true",
          "line": 3129,
          "bound": null
        },
        {
          "cond": "first.starts_with(parser::ascii_alpha)",
          "norm": null,
          "value": "false",
          "line": 3131,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        15,
        16,
        17,
        20,
        23,
        25,
        27,
        28,
        30,
        34,
        105,
        106,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Err(..)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        11,
        12,
        13,
        14,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        74,
        104,
        107,
        108,
        109
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": "Ok(path)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        11,
        12,
        13,
        14,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        73,
        75,
        76,
        77,
        78,
        79,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        97,
        100,
        101,
        102,
        103,
        109
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "true",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "percent_decode_str(segment).decode_utf8() matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 3159,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "false",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        11,
        12,
        13,
        14,
        60,
        61,
        62,
        63,
        64,
        67,
        69,
        70,
        71,
        73,
        75,
        76,
        77,
        78,
        79,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        98,
        110,
        114,
        115
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": "Ok(path)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        11,
        12,
        13,
        14,
        60,
        61,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        97,
        100,
        101,
        102,
        103,
        109
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "string.try_reserve(estimated_capacity).map_err(|_| ())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 3122,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 3123,
          "bound": null
        },
        {
          "cond": "segment in segments",
          "norm": null,
          "value": "false",
          "line": 3155,
          "bound": null
        },
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "false",
          "line": 3175,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        11,
        12,
        13,
        14,
        60,
        61,
        62,
        63,
        64,
        66,
        68,
        81,
        92,
        93,
        94,
        95,
        96,
        98,
        110,
        114,
        115
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}