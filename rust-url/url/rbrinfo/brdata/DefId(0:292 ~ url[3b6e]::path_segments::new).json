{
  "name": "url::path_segments::new",
  "mod_info": {
    "name": "path_segments",
    "loc": "url/src/lib.rs:219:1:219:19"
  },
  "visible": true,
  "loc": "url/src/path_segments.rs:50:1:68:2",
  "doc": "",
  "code": [
    "pub fn new(url: &mut Url) -> PathSegmentsMut<'_> {",
    "    let after_path = url.take_after_path();",
    "    let old_after_path_position = to_u32(url.serialization.len()).unwrap();",
    "    // Special urls always have a non empty path",
    "    if SchemeType::from(url.scheme()).is_special() {",
    "        debug_assert!(url.byte_at(url.path_start) == b'/');",
    "    } else {",
    "        debug_assert!(",
    "            url.serialization.len() == url.path_start as usize",
    "                || url.byte_at(url.path_start) == b'/'",
    "        );",
    "    }",
    "    PathSegmentsMut {",
    "        after_first_slash: url.path_start as usize + \"/\".len(),",
    "        url,",
    "        old_after_path_position,",
    "        after_path,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "SchemeType::from(url.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 54,
          "bound": null
        },
        {
          "cond": "url.byte_at(url.path_start) == b'/'",
          "norm": "b'/' == url.byte_at(url.path_start)",
          "value": "false",
          "line": 55,
          "bound": null
        }
      ],
      "ret": "PathSegmentsMut {\n        after_first_slash: url.path_start as usize + \"/\".len(),\n        url,\n        old_after_path_position,\n        after_path,\n    }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        26,
        27,
        28,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "SchemeType::from(url.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 54,
          "bound": null
        },
        {
          "cond": "url.byte_at(url.path_start) == b'/'",
          "norm": "b'/' == url.byte_at(url.path_start)",
          "value": "true",
          "line": 55,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "SchemeType::from(url.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 54,
          "bound": null
        },
        {
          "cond": "url.serialization.len() == url.path_start as usize",
          "norm": "url.path_start as usize == url.serialization.len()",
          "value": "true",
          "line": 58,
          "bound": null
        }
      ],
      "ret": "PathSegmentsMut {\n        after_first_slash: url.path_start as usize + \"/\".len(),\n        url,\n        old_after_path_position,\n        after_path,\n    }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        23,
        25,
        26,
        27,
        28,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "SchemeType::from(url.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 54,
          "bound": null
        },
        {
          "cond": "url.serialization.len() == url.path_start as usize",
          "norm": "url.path_start as usize == url.serialization.len()",
          "value": "false",
          "line": 58,
          "bound": null
        },
        {
          "cond": "url.byte_at(url.path_start) == b'/'",
          "norm": "b'/' == url.byte_at(url.path_start)",
          "value": "false",
          "line": 59,
          "bound": null
        }
      ],
      "ret": "PathSegmentsMut {\n        after_first_slash: url.path_start as usize + \"/\".len(),\n        url,\n        old_after_path_position,\n        after_path,\n    }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        19,
        20,
        21,
        23,
        25,
        26,
        27,
        28,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "SchemeType::from(url.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 54,
          "bound": null
        },
        {
          "cond": "url.serialization.len() == url.path_start as usize",
          "norm": "url.path_start as usize == url.serialization.len()",
          "value": "false",
          "line": 58,
          "bound": null
        },
        {
          "cond": "url.byte_at(url.path_start) == b'/'",
          "norm": "b'/' == url.byte_at(url.path_start)",
          "value": "true",
          "line": 59,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        19,
        20,
        22,
        31,
        32
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}