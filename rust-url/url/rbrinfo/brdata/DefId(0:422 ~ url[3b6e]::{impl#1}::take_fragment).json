{
  "name": "url::{impl#1}::take_fragment",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1586:5:1593:6",
  "doc": "",
  "code": [
    "fn take_fragment(&mut self) -> Option<String> {",
    "    self.fragment_start.take().map(|start| {",
    "        debug_assert!(self.byte_at(start) == b'#');",
    "        let fragment = self.slice(start + 1..).to_owned();",
    "        self.serialization.truncate(start as usize);",
    "        fragment",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}