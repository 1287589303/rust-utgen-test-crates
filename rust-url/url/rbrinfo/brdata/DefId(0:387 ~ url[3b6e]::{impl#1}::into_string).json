{
  "name": "url::{impl#1}::into_string",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:671:5:673:6",
  "doc": "/// Return the serialization of this URL.\n///\n/// This consumes the `Url` and takes ownership of the `String` stored in it.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url_str = \"https://example.net/\";\n/// let url = Url::parse(url_str)?;\n/// assert_eq!(String::from(url), url_str);\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn into_string(self) -> String {",
    "    self.into()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}