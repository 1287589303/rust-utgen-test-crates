{
  "name": "url::{impl#1}::parse_with_params",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:370:5:384:6",
  "doc": "/// Parse an absolute URL from a string and add params to its query string.\n///\n/// Existing params are not removed.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse_with_params(\"https://example.net?dont=clobberme\",\n///                                  &[(\"lang\", \"rust\"), (\"browser\", \"servo\")])?;\n/// assert_eq!(\"https://example.net/?dont=clobberme&lang=rust&browser=servo\", url.as_str());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// # Errors\n///\n/// If the function can not parse an absolute URL from the given string,\n/// a [`ParseError`] variant will be returned.\n///\n/// [`ParseError`]: enum.ParseError.html\n",
  "code": [
    "pub fn parse_with_params<I, K, V>(input: &str, iter: I) -> Result<Url, crate::ParseError>",
    "where",
    "    I: IntoIterator,",
    "    I::Item: Borrow<(K, V)>,",
    "    K: AsRef<str>,",
    "    V: AsRef<str>,",
    "{",
    "    let mut url = Url::options().parse(input);",
    "",
    "    if let Ok(ref mut url) = url {",
    "        url.query_pairs_mut().extend_pairs(iter);",
    "    }",
    "",
    "    url",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Ok(ref mut url) = url",
          "norm": null,
          "value": "true",
          "line": 379,
          "bound": null
        }
      ],
      "ret": "url",
      "path": [
        0,
        1,
        2,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Ok(ref mut url) = url",
          "norm": null,
          "value": "false",
          "line": 379,
          "bound": null
        }
      ],
      "ret": "url",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}