{
  "name": "url::{impl#1}::port_or_known_default",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1288:5:1290:6",
  "doc": "/// Return the port number for this URL, or the default port number if it is known.\n///\n/// This method only knows the default port number\n/// of the `http`, `https`, `ws`, `wss` and `ftp` schemes.\n///\n/// For URLs in these schemes, this method always returns `Some(_)`.\n/// For other schemes, it is the same as `Url::port()`.\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"foo://example.com\")?;\n/// assert_eq!(url.port_or_known_default(), None);\n///\n/// let url = Url::parse(\"foo://example.com:1456\")?;\n/// assert_eq!(url.port_or_known_default(), Some(1456));\n///\n/// let url = Url::parse(\"https://example.com\")?;\n/// assert_eq!(url.port_or_known_default(), Some(443));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn port_or_known_default(&self) -> Option<u16> {",
    "    self.port.or_else(|| parser::default_port(self.scheme()))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}