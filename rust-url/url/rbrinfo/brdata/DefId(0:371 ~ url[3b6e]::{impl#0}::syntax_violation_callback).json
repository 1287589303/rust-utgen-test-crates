{
  "name": "url::{impl#0}::syntax_violation_callback",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:299:5:302:6",
  "doc": "/// Call the provided function or closure for a non-fatal `SyntaxViolation`\n/// when it occurs during parsing. Note that since the provided function is\n/// `Fn`, the caller might need to utilize _interior mutability_, such as with\n/// a `RefCell`, to collect the violations.\n///\n/// ## Example\n/// ```\n/// use std::cell::RefCell;\n/// use url::{Url, SyntaxViolation};\n/// # use url::ParseError;\n/// # fn run() -> Result<(), url::ParseError> {\n/// let violations = RefCell::new(Vec::new());\n/// let url = Url::options()\n///     .syntax_violation_callback(Some(&|v| violations.borrow_mut().push(v)))\n///     .parse(\"https:////example.com\")?;\n/// assert_eq!(url.as_str(), \"https://example.com/\");\n/// assert_eq!(violations.into_inner(),\n///            vec!(SyntaxViolation::ExpectedDoubleSlash));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn syntax_violation_callback(mut self, new: Option<&'a dyn Fn(SyntaxViolation)>) -> Self {",
    "    self.violation_fn = new;",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}