{
  "name": "url::path_segments::{impl#1}::pop_if_empty",
  "mod_info": {
    "name": "path_segments",
    "loc": "url/src/lib.rs:219:1:219:19"
  },
  "visible": true,
  "loc": "url/src/path_segments.rs:138:5:146:6",
  "doc": "/// Remove the last segment of this URLâ€™s path if it is empty,\n/// except if these was only one segment to begin with.\n///\n/// In other words, remove one path trailing slash, if any,\n/// unless it is also the initial slash (so this does nothing if `url.path() == \"/\")`.\n///\n/// Returns `&mut Self` so that method calls can be chained.\n///\n/// Example:\n///\n/// ```rust\n/// use url::Url;\n///\n/// # #[cfg(feature = \"std\")]\n/// # use std::error::Error;\n/// # #[cfg(not(feature = \"std\"))]\n/// # use core::error::Error;\n///\n/// # fn run() -> Result<(), Box<dyn Error>> {\n/// let mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\n/// url.path_segments_mut().map_err(|_| \"cannot be base\")?\n///     .push(\"pulls\");\n/// assert_eq!(url.as_str(), \"https://github.com/servo/rust-url//pulls\");\n///\n/// let mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\n/// url.path_segments_mut().map_err(|_| \"cannot be base\")?\n///     .pop_if_empty().push(\"pulls\");\n/// assert_eq!(url.as_str(), \"https://github.com/servo/rust-url/pulls\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn pop_if_empty(&mut self) -> &mut Self {",
    "    if self.after_first_slash >= self.url.serialization.len() {",
    "        return self;",
    "    }",
    "    if self.url.serialization[self.after_first_slash..].ends_with('/') {",
    "        self.url.serialization.pop();",
    "    }",
    "    self",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.after_first_slash >= self.url.serialization.len()",
          "norm": null,
          "value": "true",
          "line": 139,
          "bound": "self.after_first_slash == self.url.serialization.len()"
        }
      ],
      "ret": "self",
      "path": [
        0,
        1,
        2,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.after_first_slash >= self.url.serialization.len()",
          "norm": null,
          "value": "false",
          "line": 139,
          "bound": null
        },
        {
          "cond": "self.url.serialization[self.after_first_slash..].ends_with('/')",
          "norm": null,
          "value": "true",
          "line": 142,
          "bound": null
        }
      ],
      "ret": "self",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.after_first_slash >= self.url.serialization.len()",
          "norm": null,
          "value": "false",
          "line": 139,
          "bound": null
        },
        {
          "cond": "self.url.serialization[self.after_first_slash..].ends_with('/')",
          "norm": null,
          "value": "false",
          "line": 142,
          "bound": null
        }
      ],
      "ret": "self",
      "path": [
        0,
        1,
        3,
        4,
        5,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}