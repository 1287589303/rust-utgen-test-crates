{
  "name": "url::{impl#1}::set_username",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:2287:5:2336:6",
  "doc": "/// Change this URLâ€™s username.\n///\n/// If this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n/// # Examples\n///\n/// Cannot setup username from mailto(cannot-be-base)\n///\n/// ```rust\n/// use url::{Url, ParseError};\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"mailto:rmz@example.com\")?;\n/// let result = url.set_username(\"user1\");\n/// assert_eq!(url.as_str(), \"mailto:rmz@example.com\");\n/// assert!(result.is_err());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// Setup username to user1\n///\n/// ```rust\n/// use url::{Url, ParseError};\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"ftp://:secre1@example.com/\")?;\n/// let result = url.set_username(\"user1\");\n/// assert!(result.is_ok());\n/// assert_eq!(url.username(), \"user1\");\n/// assert_eq!(url.as_str(), \"ftp://user1:secre1@example.com/\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn set_username(&mut self, username: &str) -> Result<(), ()> {",
    "    // has_host implies !cannot_be_a_base",
    "    if !self.has_host() || self.host() == Some(Host::Domain(\"\")) || self.scheme() == \"file\" {",
    "        return Err(());",
    "    }",
    "    let username_start = self.scheme_end + 3;",
    "    debug_assert!(self.slice(self.scheme_end..username_start) == \"://\");",
    "    if self.slice(username_start..self.username_end) == username {",
    "        return Ok(());",
    "    }",
    "    let after_username = self.slice(self.username_end..).to_owned();",
    "    self.serialization.truncate(username_start as usize);",
    "    self.serialization",
    "        .extend(utf8_percent_encode(username, USERINFO));",
    "",
    "    let mut removed_bytes = self.username_end;",
    "    self.username_end = to_u32(self.serialization.len()).unwrap();",
    "    let mut added_bytes = self.username_end;",
    "",
    "    let new_username_is_empty = self.username_end == username_start;",
    "    match (new_username_is_empty, after_username.chars().next()) {",
    "        (true, Some('@')) => {",
    "            removed_bytes += 1;",
    "            self.serialization.push_str(&after_username[1..]);",
    "        }",
    "        (false, Some('@')) | (_, Some(':')) | (true, _) => {",
    "            self.serialization.push_str(&after_username);",
    "        }",
    "        (false, _) => {",
    "            added_bytes += 1;",
    "            self.serialization.push('@');",
    "            self.serialization.push_str(&after_username);",
    "        }",
    "    }",
    "",
    "    let adjust = |index: &mut u32| {",
    "        *index -= removed_bytes;",
    "        *index += added_bytes;",
    "    };",
    "    adjust(&mut self.host_start);",
    "    adjust(&mut self.host_end);",
    "    adjust(&mut self.path_start);",
    "    if let Some(ref mut index) = self.query_start {",
    "        adjust(index)",
    "    }",
    "    if let Some(ref mut index) = self.fragment_start {",
    "        adjust(index)",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 93,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "true",
          "line": 2289,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        11,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "true",
          "line": 2289,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "true",
          "line": 2294,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        23,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, Some('@'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        39,
        46,
        47,
        48,
        49,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, Some('@'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        39,
        46,
        47,
        48,
        49,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, Some('@'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        39,
        46,
        47,
        48,
        49,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, Some('@'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        37,
        38,
        39,
        46,
        47,
        48,
        49,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        42,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (false, _)",
          "norm": null,
          "value": "true",
          "line": 2315,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        42,
        44,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        36,
        43,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        64,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        69,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "true",
          "line": 2293,
          "bound": null
        },
        {
          "cond": "self.slice(username_start..self.username_end) == username",
          "norm": null,
          "value": "false",
          "line": 2294,
          "bound": null
        },
        {
          "cond": "(new_username_is_empty, after_username.chars().next()) matches (true, _) or (false, Some('@')) or (_, Some(':'))",
          "norm": null,
          "value": "true",
          "line": 2307,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2329,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2332,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        40,
        41,
        45,
        50,
        51,
        52,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        65,
        66,
        67,
        68,
        70,
        71,
        72
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2289,
          "bound": null
        },
        {
          "cond": "self.slice(self.scheme_end..username_start) == \"://\"",
          "norm": "\"://\" == self.slice(self.scheme_end..username_start)",
          "value": "false",
          "line": 2293,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        18,
        74
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2289,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        11,
        72
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}