{
  "name": "url::{impl#1}::query",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1458:5:1470:6",
  "doc": "/// Return this URL’s query string, if any, as a percent-encoded ASCII string.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"https://example.com/products?page=2\")?;\n/// let query = url.query();\n/// assert_eq!(query, Some(\"page=2\"));\n///\n/// let url = Url::parse(\"https://example.com/products\")?;\n/// let query = url.query();\n/// assert!(query.is_none());\n///\n/// let url = Url::parse(\"https://example.com/?country=español\")?;\n/// let query = url.query();\n/// assert_eq!(query, Some(\"country=espa%C3%B1ol\"));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn query(&self) -> Option<&str> {",
    "    match (self.query_start, self.fragment_start) {",
    "        (None, _) => None,",
    "        (Some(query_start), None) => {",
    "            debug_assert!(self.byte_at(query_start) == b'?');",
    "            Some(self.slice(query_start + 1..))",
    "        }",
    "        (Some(query_start), Some(fragment_start)) => {",
    "            debug_assert!(self.byte_at(query_start) == b'?');",
    "            Some(self.slice(query_start + 1..fragment_start))",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.byte_at(query_start) == b'?'",
          "norm": "b'?' == self.byte_at(query_start)",
          "value": "false",
          "line": 1466,
          "bound": null
        }
      ],
      "ret": "Some(self.slice(query_start + 1..fragment_start))",
      "path": [
        0,
        3,
        5,
        16,
        17,
        18,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.byte_at(query_start) == b'?'",
          "norm": "b'?' == self.byte_at(query_start)",
          "value": "true",
          "line": 1466,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        5,
        16,
        17,
        19,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(self.query_start, self.fragment_start) matches (Some(query_start), None)",
          "norm": null,
          "value": "true",
          "line": 1459,
          "bound": null
        },
        {
          "cond": "self.byte_at(query_start) == b'?'",
          "norm": "b'?' == self.byte_at(query_start)",
          "value": "false",
          "line": 1462,
          "bound": null
        }
      ],
      "ret": "Some(self.slice(query_start + 1..))",
      "path": [
        0,
        3,
        4,
        7,
        8,
        9,
        10,
        13,
        14,
        15,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(self.query_start, self.fragment_start) matches (Some(query_start), None)",
          "norm": null,
          "value": "true",
          "line": 1459,
          "bound": null
        },
        {
          "cond": "self.byte_at(query_start) == b'?'",
          "norm": "b'?' == self.byte_at(query_start)",
          "value": "true",
          "line": 1462,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        4,
        7,
        8,
        9,
        11,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(self.query_start, self.fragment_start) matches (None, _)",
          "norm": null,
          "value": "true",
          "line": 1459,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        2,
        6,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}