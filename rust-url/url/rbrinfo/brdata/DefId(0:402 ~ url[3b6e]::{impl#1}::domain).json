{
  "name": "url::{impl#1}::domain",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1224:5:1229:6",
  "doc": "/// If this URL has a host and it is a domain name (not an IP address), return it.\n/// Non-ASCII domains are punycode-encoded per IDNA if this is the host\n/// of a special URL, or percent encoded for non-special URLs.\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"https://127.0.0.1/\")?;\n/// assert_eq!(url.domain(), None);\n///\n/// let url = Url::parse(\"mailto:rms@example.net\")?;\n/// assert_eq!(url.domain(), None);\n///\n/// let url = Url::parse(\"https://example.com/\")?;\n/// assert_eq!(url.domain(), Some(\"example.com\"));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn domain(&self) -> Option<&str> {",
    "    match self.host {",
    "        HostInternal::Domain => Some(self.slice(self.host_start..self.host_end)),",
    "        _ => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.host matches _",
          "norm": null,
          "value": "true",
          "line": 1227,
          "bound": null
        },
        {
          "cond": "self.host matches HostInternal::Domain",
          "norm": null,
          "value": "false",
          "line": 1226,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.host matches HostInternal::Domain",
          "norm": null,
          "value": "true",
          "line": 1225,
          "bound": null
        },
        {
          "cond": "self.host matches HostInternal::Domain",
          "norm": null,
          "value": "true",
          "line": 1225,
          "bound": null
        }
      ],
      "ret": "Some(self.slice(self.host_start..self.host_end))",
      "path": [
        0,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}