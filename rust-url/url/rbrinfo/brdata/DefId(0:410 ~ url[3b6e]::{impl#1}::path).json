{
  "name": "url::{impl#1}::path",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1378:5:1385:6",
  "doc": "/// Return the path for this URL, as a percent-encoded ASCII string.\n/// For cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with '/'.\n/// For other URLs, this starts with a '/' slash\n/// and continues with slash-separated path segments.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::{Url, ParseError};\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"https://example.com/api/versions?page=2\")?;\n/// assert_eq!(url.path(), \"/api/versions\");\n///\n/// let url = Url::parse(\"https://example.com\")?;\n/// assert_eq!(url.path(), \"/\");\n///\n/// let url = Url::parse(\"https://example.com/countries/việt nam\")?;\n/// assert_eq!(url.path(), \"/countries/vi%E1%BB%87t%20nam\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn path(&self) -> &str {",
    "    match (self.query_start, self.fragment_start) {",
    "        (None, None) => self.slice(self.path_start..),",
    "        (Some(next_component_start), _) | (None, Some(next_component_start)) => {",
    "            self.slice(self.path_start..next_component_start)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(self.query_start, self.fragment_start) matches (Some(next_component_start), _)",
          "norm": null,
          "value": "true",
          "line": 1379,
          "bound": null
        }
      ],
      "ret": "self.slice(self.path_start..next_component_start)",
      "path": [
        0,
        5,
        9,
        8,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [],
      "ret": "self.slice(self.path_start..next_component_start)",
      "path": [
        0,
        2,
        4,
        8,
        10,
        11
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(self.query_start, self.fragment_start) matches (None, None)",
          "norm": null,
          "value": "true",
          "line": 1379,
          "bound": null
        }
      ],
      "ret": "self.slice(self.path_start..)",
      "path": [
        0,
        2,
        3,
        6,
        7,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}