{
  "name": "url::host::{impl#2}::parse_opaque",
  "mod_info": {
    "name": "host",
    "loc": "url/src/lib.rs:216:1:216:10"
  },
  "visible": true,
  "loc": "url/src/host.rs:106:5:143:6",
  "doc": "",
  "code": [
    "pub fn parse_opaque(input: &str) -> Result<Self, ParseError> {",
    "    if input.starts_with('[') {",
    "        if !input.ends_with(']') {",
    "            return Err(ParseError::InvalidIpv6Address);",
    "        }",
    "        return parse_ipv6addr(&input[1..input.len() - 1]).map(Host::Ipv6);",
    "    }",
    "",
    "    let is_invalid_host_char = |c| {",
    "        matches!(",
    "            c,",
    "            '\\0' | '\\t'",
    "                | '\\n'",
    "                | '\\r'",
    "                | ' '",
    "                | '#'",
    "                | '/'",
    "                | ':'",
    "                | '<'",
    "                | '>'",
    "                | '?'",
    "                | '@'",
    "                | '['",
    "                | '\\\\'",
    "                | ']'",
    "                | '^'",
    "                | '|'",
    "        )",
    "    };",
    "",
    "    if input.find(is_invalid_host_char).is_some() {",
    "        Err(ParseError::InvalidDomainCharacter)",
    "    } else {",
    "        Ok(Host::Domain(",
    "            utf8_percent_encode(input, CONTROLS).to_string(),",
    "        ))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "input.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 108,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 107,
          "bound": null
        },
        {
          "cond": "input.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 108,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv6Address)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "input.find(is_invalid_host_char).is_some()",
          "norm": null,
          "value": "true",
          "line": 136,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidDomainCharacter)",
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        20,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 107,
          "bound": null
        },
        {
          "cond": "input.find(is_invalid_host_char).is_some()",
          "norm": null,
          "value": "false",
          "line": 136,
          "bound": null
        }
      ],
      "ret": "Ok(Host::Domain(\n                utf8_percent_encode(input, CONTROLS).to_string(),\n            ))",
      "path": [
        0,
        1,
        11,
        12,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}