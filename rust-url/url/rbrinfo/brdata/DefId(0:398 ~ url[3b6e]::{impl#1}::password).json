{
  "name": "url::{impl#1}::password",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1081:5:1093:6",
  "doc": "/// Return the password for this URL, if any, as a percent-encoded ASCII string.\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"ftp://rms:secret123@example.com\")?;\n/// assert_eq!(url.password(), Some(\"secret123\"));\n///\n/// let url = Url::parse(\"ftp://:secret123@example.com\")?;\n/// assert_eq!(url.password(), Some(\"secret123\"));\n///\n/// let url = Url::parse(\"ftp://rms@example.com\")?;\n/// assert_eq!(url.password(), None);\n///\n/// let url = Url::parse(\"https://example.com\")?;\n/// assert_eq!(url.password(), None);\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn password(&self) -> Option<&str> {",
    "    // This ':' is not the one marking a port number since a host can not be empty.",
    "    // (Except for file: URLs, which do not have port numbers.)",
    "    if self.has_authority()",
    "        && self.username_end != self.serialization.len() as u32",
    "        && self.byte_at(self.username_end) == b':'",
    "    {",
    "        debug_assert!(self.byte_at(self.host_start - 1) == b'@');",
    "        Some(self.slice(self.username_end + 1..self.host_start - 1))",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 1084,
          "bound": null
        },
        {
          "cond": "self.username_end != self.serialization.len() as u32",
          "norm": "self.serialization.len() as u32 != self.username_end",
          "value": "true",
          "line": 1085,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 1086,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.host_start - 1) == b'@'",
          "norm": "b'@' == self.byte_at(self.host_start - 1)",
          "value": "false",
          "line": 1088,
          "bound": null
        }
      ],
      "ret": "Some(self.slice(self.username_end + 1..self.host_start - 1))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        14,
        15,
        16,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 1084,
          "bound": null
        },
        {
          "cond": "self.username_end != self.serialization.len() as u32",
          "norm": "self.serialization.len() as u32 != self.username_end",
          "value": "true",
          "line": 1085,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 1086,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.host_start - 1) == b'@'",
          "norm": "b'@' == self.byte_at(self.host_start - 1)",
          "value": "true",
          "line": 1088,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 1084,
          "bound": null
        },
        {
          "cond": "self.username_end != self.serialization.len() as u32",
          "norm": "self.serialization.len() as u32 != self.username_end",
          "value": "true",
          "line": 1085,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "true",
          "line": 1086,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        17,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 1084,
          "bound": null
        },
        {
          "cond": "self.username_end != self.serialization.len() as u32",
          "norm": "self.serialization.len() as u32 != self.username_end",
          "value": "false",
          "line": 1085,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        18,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 1084,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}