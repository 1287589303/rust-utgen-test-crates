{
  "name": "url::{impl#1}::set_ip_host",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:2153:5:2164:6",
  "doc": "/// Change this URLâ€™s host to the given IP address.\n///\n/// If this URL is cannot-be-a-base, do nothing and return `Err`.\n///\n/// Compared to `Url::set_host`, this skips the host parser.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::{Url, ParseError};\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"http://example.com\")?;\n/// url.set_ip_host(\"127.0.0.1\".parse().unwrap());\n/// assert_eq!(url.host_str(), Some(\"127.0.0.1\"));\n/// assert_eq!(url.as_str(), \"http://127.0.0.1/\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// Cannot change URL's from mailto(cannot-be-base) to ip:\n///\n/// ```rust\n/// use url::{Url, ParseError};\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"mailto:rms@example.com\")?;\n/// let result = url.set_ip_host(\"127.0.0.1\".parse().unwrap());\n///\n/// assert_eq!(url.as_str(), \"mailto:rms@example.com\");\n/// assert!(result.is_err());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n",
  "code": [
    "pub fn set_ip_host(&mut self, address: IpAddr) -> Result<(), ()> {",
    "    if self.cannot_be_a_base() {",
    "        return Err(());",
    "    }",
    "",
    "    let address = match address {",
    "        IpAddr::V4(address) => Host::Ipv4(address),",
    "        IpAddr::V6(address) => Host::Ipv6(address),",
    "    };",
    "    self.set_host_internal(address, None);",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "true",
          "line": 2154,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2154,
          "bound": null
        },
        {
          "cond": "address matches IpAddr::V6(address)",
          "norm": null,
          "value": "true",
          "line": 2158,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        6,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2154,
          "bound": null
        },
        {
          "cond": "address matches IpAddr::V4(address)",
          "norm": null,
          "value": "true",
          "line": 2158,
          "bound": null
        },
        {
          "cond": "address matches IpAddr::V4(address)",
          "norm": null,
          "value": "true",
          "line": 2158,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}