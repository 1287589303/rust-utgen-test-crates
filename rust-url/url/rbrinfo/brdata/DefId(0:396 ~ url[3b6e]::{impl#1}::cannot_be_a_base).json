{
  "name": "url::{impl#1}::cannot_be_a_base",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1022:5:1024:6",
  "doc": "/// Return whether this URL is a cannot-be-a-base URL,\n/// meaning that parsing a relative URL string with this URL as the base will return an error.\n///\n/// This is the case if the scheme and `:` delimiter are not followed by a `/` slash,\n/// as is typically the case of `data:` and `mailto:` URLs.\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"ftp://rms@example.com\")?;\n/// assert!(!url.cannot_be_a_base());\n///\n/// let url = Url::parse(\"unix:/run/foo.socket\")?;\n/// assert!(!url.cannot_be_a_base());\n///\n/// let url = Url::parse(\"data:text/plain,Stuff\")?;\n/// assert!(url.cannot_be_a_base());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn cannot_be_a_base(&self) -> bool {",
    "    !self.slice(self.scheme_end + 1..).starts_with('/')",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "!self.slice(self.scheme_end + 1..).starts_with('/')",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}