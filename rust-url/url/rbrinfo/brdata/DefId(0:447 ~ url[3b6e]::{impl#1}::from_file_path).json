{
  "name": "url::{impl#1}::from_file_path",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:2540:5:2556:6",
  "doc": "/// Convert a file name as `std::path::Path` into an URL in the `file` scheme.\n///\n/// This returns `Err` if the given path is not absolute or,\n/// on Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n///\n/// # Examples\n///\n/// On Unix-like platforms:\n///\n/// ```\n/// # if cfg!(unix) {\n/// use url::Url;\n///\n/// # fn run() -> Result<(), ()> {\n/// let url = Url::from_file_path(\"/tmp/foo.txt\")?;\n/// assert_eq!(url.as_str(), \"file:///tmp/foo.txt\");\n///\n/// let url = Url::from_file_path(\"../foo.txt\");\n/// assert!(url.is_err());\n///\n/// let url = Url::from_file_path(\"https://google.com/\");\n/// assert!(url.is_err());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// # }\n/// ```\n///\n/// This method is only available if the `std` Cargo feature is enabled.\n",
  "code": [
    "pub fn from_file_path<P: AsRef<std::path::Path>>(path: P) -> Result<Url, ()> {",
    "    let mut serialization = \"file://\".to_owned();",
    "    let host_start = serialization.len() as u32;",
    "    let (host_end, host) = path_to_file_url_segments(path.as_ref(), &mut serialization)?;",
    "    Ok(Url {",
    "        serialization,",
    "        scheme_end: \"file\".len() as u32,",
    "        username_end: host_start,",
    "        host_start,",
    "        host_end,",
    "        host,",
    "        port: None,",
    "        path_start: host_end,",
    "        query_start: None,",
    "        fragment_start: None,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "path_to_file_url_segments(path.as_ref(), &mut serialization)?",
          "norm": null,
          "value": "Err/None",
          "line": 2543,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "path_to_file_url_segments(path.as_ref(), &mut serialization)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2543,
          "bound": null
        }
      ],
      "ret": "Ok(Url {\n            serialization,\n            scheme_end: \"file\".len() as u32,\n            username_end: host_start,\n            host_start,\n            host_end,\n            host,\n            port: None,\n            path_start: host_end,\n            query_start: None,\n            fragment_start: None,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}