{
  "name": "url::path_segments::{impl#1}::pop",
  "mod_info": {
    "name": "path_segments",
    "loc": "url/src/lib.rs:219:1:219:19"
  },
  "visible": true,
  "loc": "url/src/path_segments.rs:153:5:164:6",
  "doc": "/// Remove the last segment of this URLâ€™s path.\n///\n/// If the path only has one segment, make it empty such that `url.path() == \"/\"`.\n///\n/// Returns `&mut Self` so that method calls can be chained.\n",
  "code": [
    "pub fn pop(&mut self) -> &mut Self {",
    "    if self.after_first_slash >= self.url.serialization.len() {",
    "        return self;",
    "    }",
    "    let last_slash = self.url.serialization[self.after_first_slash..]",
    "        .rfind('/')",
    "        .unwrap_or(0);",
    "    self.url",
    "        .serialization",
    "        .truncate(self.after_first_slash + last_slash);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.after_first_slash >= self.url.serialization.len()",
          "norm": null,
          "value": "true",
          "line": 154,
          "bound": "self.after_first_slash == self.url.serialization.len()"
        }
      ],
      "ret": "self",
      "path": [
        0,
        1,
        2,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.after_first_slash >= self.url.serialization.len()",
          "norm": null,
          "value": "false",
          "line": 154,
          "bound": null
        }
      ],
      "ret": "self",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}