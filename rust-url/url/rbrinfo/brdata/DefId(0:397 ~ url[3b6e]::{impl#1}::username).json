{
  "name": "url::{impl#1}::username",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1048:5:1055:6",
  "doc": "/// Return the username for this URL (typically the empty string)\n/// as a percent-encoded ASCII string.\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"ftp://rms@example.com\")?;\n/// assert_eq!(url.username(), \"rms\");\n///\n/// let url = Url::parse(\"ftp://:secret123@example.com\")?;\n/// assert_eq!(url.username(), \"\");\n///\n/// let url = Url::parse(\"https://example.com\")?;\n/// assert_eq!(url.username(), \"\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn username(&self) -> &str {",
    "    let scheme_separator_len = \"://\".len() as u32;",
    "    if self.has_authority() && self.username_end > self.scheme_end + scheme_separator_len {",
    "        self.slice(self.scheme_end + scheme_separator_len..self.username_end)",
    "    } else {",
    "        \"\"",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 1050,
          "bound": null
        },
        {
          "cond": "self.username_end > self.scheme_end + scheme_separator_len",
          "norm": "self.scheme_end + scheme_separator_len < self.username_end",
          "value": "true",
          "line": 1050,
          "bound": null
        }
      ],
      "ret": "self.slice(self.scheme_end + scheme_separator_len..self.username_end)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 1050,
          "bound": null
        },
        {
          "cond": "self.username_end > self.scheme_end + scheme_separator_len",
          "norm": "self.scheme_end + scheme_separator_len < self.username_end",
          "value": "false",
          "line": 1050,
          "bound": "self.username_end == self.scheme_end + scheme_separator_len"
        }
      ],
      "ret": "\"\"",
      "path": [
        0,
        1,
        2,
        3,
        4,
        8,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 1050,
          "bound": null
        }
      ],
      "ret": "\"\"",
      "path": [
        0,
        1,
        2,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}