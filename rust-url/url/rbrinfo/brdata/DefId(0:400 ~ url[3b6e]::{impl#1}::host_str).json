{
  "name": "url::{impl#1}::host_str",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1153:5:1159:6",
  "doc": "/// Return the string representation of the host (domain or IP address) for this URL, if any.\n///\n/// Non-ASCII domains are punycode-encoded per IDNA if this is the host\n/// of a special URL, or percent encoded for non-special URLs.\n/// IPv6 addresses are given between `[` and `]` brackets.\n///\n/// Cannot-be-a-base URLs (typical of `data:` and `mailto:`) and some `file:` URLs\n/// donâ€™t have a host.\n///\n/// See also the `host` method.\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"https://127.0.0.1/index.html\")?;\n/// assert_eq!(url.host_str(), Some(\"127.0.0.1\"));\n///\n/// let url = Url::parse(\"ftp://rms@example.com\")?;\n/// assert_eq!(url.host_str(), Some(\"example.com\"));\n///\n/// let url = Url::parse(\"unix:/run/foo.socket\")?;\n/// assert_eq!(url.host_str(), None);\n///\n/// let url = Url::parse(\"data:text/plain,Stuff\")?;\n/// assert_eq!(url.host_str(), None);\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn host_str(&self) -> Option<&str> {",
    "    if self.has_host() {",
    "        Some(self.slice(self.host_start..self.host_end))",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 1154,
          "bound": null
        }
      ],
      "ret": "Some(self.slice(self.host_start..self.host_end))",
      "path": [
        0,
        1,
        2,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 1154,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}