{
  "name": "url::parser::{impl#10}::pop_path",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": false,
  "loc": "url/src/parser.rs:1411:5:1423:6",
  "doc": "/// https://url.spec.whatwg.org/#pop-a-urls-path\n",
  "code": [
    "fn pop_path(&mut self, scheme_type: SchemeType, path_start: usize) {",
    "    if self.serialization.len() > path_start {",
    "        let slash_position = self.serialization[path_start..].rfind('/').unwrap();",
    "        // + 1 since rfind returns the position before the slash.",
    "        let segment_start = path_start + slash_position + 1;",
    "        // Donâ€™t pop a Windows drive letter",
    "        if !(scheme_type.is_file()",
    "            && is_normalized_windows_drive_letter(&self.serialization[segment_start..]))",
    "        {",
    "            self.serialization.truncate(segment_start);",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.serialization.len() > path_start",
          "norm": "path_start < self.serialization.len()",
          "value": "true",
          "line": 1412,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "is_normalized_windows_drive_letter(&self.serialization[segment_start..])",
          "norm": null,
          "value": "true",
          "line": 1418,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        17,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.serialization.len() > path_start",
          "norm": "path_start < self.serialization.len()",
          "value": "true",
          "line": 1412,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 1417,
          "bound": null
        },
        {
          "cond": "is_normalized_windows_drive_letter(&self.serialization[segment_start..])",
          "norm": null,
          "value": "false",
          "line": 1418,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        17,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.serialization.len() > path_start",
          "norm": "path_start < self.serialization.len()",
          "value": "true",
          "line": 1412,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 1417,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        14,
        15,
        16,
        17,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.serialization.len() > path_start",
          "norm": "path_start < self.serialization.len()",
          "value": "false",
          "line": 1412,
          "bound": "self.serialization.len() == path_start"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}