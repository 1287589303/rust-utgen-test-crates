{
  "name": "url::{impl#1}::set_query",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1624:5:1654:6",
  "doc": "/// Change this URLâ€™s query string. If `query` is `None`, this URL's\n/// query string will be cleared.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"https://example.com/products\")?;\n/// assert_eq!(url.as_str(), \"https://example.com/products\");\n///\n/// url.set_query(Some(\"page=2\"));\n/// assert_eq!(url.as_str(), \"https://example.com/products?page=2\");\n/// assert_eq!(url.query(), Some(\"page=2\"));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn set_query(&mut self, query: Option<&str>) {",
    "    let fragment = self.take_fragment();",
    "",
    "    // Remove any previous query",
    "    if let Some(start) = self.query_start.take() {",
    "        debug_assert!(self.byte_at(start) == b'?');",
    "        self.serialization.truncate(start as usize);",
    "    }",
    "    // Write the new query, if any",
    "    if let Some(input) = query {",
    "        self.query_start = Some(to_u32(self.serialization.len()).unwrap());",
    "        self.serialization.push('?');",
    "        let scheme_type = SchemeType::from(self.scheme());",
    "        let scheme_end = self.scheme_end;",
    "        self.mutate(|parser| {",
    "            let vfn = parser.violation_fn;",
    "            parser.parse_query(",
    "                scheme_type,",
    "                scheme_end,",
    "                parser::Input::new_trim_tab_and_newlines(input, vfn),",
    "            )",
    "        });",
    "    } else {",
    "        self.query_start = None;",
    "        if fragment.is_none() {",
    "            self.strip_trailing_spaces_from_opaque_path();",
    "        }",
    "    }",
    "",
    "    self.restore_already_parsed_fragment(fragment);",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(start) = self.query_start.take()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "let Some(input) = query",
          "norm": null,
          "value": "true",
          "line": 1633,
          "bound": null
        },
        {
          "cond": "fragment.is_none()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        12,
        13,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(start) = self.query_start.take()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "let Some(input) = query",
          "norm": null,
          "value": "true",
          "line": 1633,
          "bound": null
        },
        {
          "cond": "fragment.is_none()",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        12,
        13,
        23,
        24,
        27,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(start) = self.query_start.take()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "let Some(input) = query",
          "norm": null,
          "value": "true",
          "line": 1633,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(start) = self.query_start.take()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "self.byte_at(start) == b'?'",
          "norm": "b'?' == self.byte_at(start)",
          "value": "false",
          "line": 1629,
          "bound": null
        },
        {
          "cond": "let Some(input) = query",
          "norm": null,
          "value": "true",
          "line": 1633,
          "bound": null
        },
        {
          "cond": "fragment.is_none()",
          "norm": null,
          "value": "true",
          "line": 1648,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        13,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(start) = self.query_start.take()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "self.byte_at(start) == b'?'",
          "norm": "b'?' == self.byte_at(start)",
          "value": "false",
          "line": 1629,
          "bound": null
        },
        {
          "cond": "let Some(input) = query",
          "norm": null,
          "value": "true",
          "line": 1633,
          "bound": null
        },
        {
          "cond": "fragment.is_none()",
          "norm": null,
          "value": "false",
          "line": 1648,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        13,
        23,
        24,
        27,
        28,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let Some(start) = self.query_start.take()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "self.byte_at(start) == b'?'",
          "norm": "b'?' == self.byte_at(start)",
          "value": "false",
          "line": 1629,
          "bound": null
        },
        {
          "cond": "let Some(input) = query",
          "norm": null,
          "value": "true",
          "line": 1633,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        11,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        29,
        30,
        31
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "let Some(start) = self.query_start.take()",
          "norm": null,
          "value": "true",
          "line": 1628,
          "bound": null
        },
        {
          "cond": "self.byte_at(start) == b'?'",
          "norm": "b'?' == self.byte_at(start)",
          "value": "true",
          "line": 1629,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        33,
        34
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}