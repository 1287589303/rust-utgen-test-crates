{
  "name": "url::parser::{impl#10}::parse_port",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": true,
  "loc": "url/src/parser.rs:1112:5:1146:6",
  "doc": "",
  "code": [
    "pub fn parse_port<P>(",
    "    mut input: Input<'_>,",
    "    default_port: P,",
    "    context: Context,",
    ") -> ParseResult<(Option<u16>, Input<'_>)>",
    "where",
    "    P: Fn() -> Option<u16>,",
    "{",
    "    let mut port: u32 = 0;",
    "    let mut has_any_digit = false;",
    "    while let (Some(c), remaining) = input.split_first() {",
    "        if let Some(digit) = c.to_digit(10) {",
    "            port = port * 10 + digit;",
    "            if port > u16::MAX as u32 {",
    "                return Err(ParseError::InvalidPort);",
    "            }",
    "            has_any_digit = true;",
    "        } else if context == Context::UrlParser && !matches!(c, '/' | '\\\\' | '?' | '#') {",
    "            return Err(ParseError::InvalidPort);",
    "        } else {",
    "            break;",
    "        }",
    "        input = remaining;",
    "    }",
    "",
    "    if !has_any_digit && context == Context::Setter && !input.is_empty() {",
    "        return Err(ParseError::InvalidPort);",
    "    }",
    "",
    "    let mut opt_port = Some(port as u16);",
    "    if !has_any_digit || opt_port == default_port() {",
    "        opt_port = None;",
    "    }",
    "    Ok((opt_port, input))",
    "}"
  ],
  "size": {
    "chain": 72,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        23,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        23,
        24,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        23,
        24,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidPort)",
      "path": [
        0,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        31,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidPort)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        16,
        19,
        20,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidPort)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        30,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '#'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidPort)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        30,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidPort)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        30,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '\\\\'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidPort)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        27,
        28,
        30,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "c matches '/' or '\\\\' or '#' or '?'",
          "norm": null,
          "value": "true",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        15,
        17,
        18,
        19,
        22,
        24,
        25,
        26,
        31,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "false",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        21,
        22,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "false",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        21,
        22,
        24,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "false",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        21,
        22,
        24,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "false",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "false",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "false",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "false",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidPort)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        21,
        22,
        24,
        25,
        26,
        27,
        28,
        30,
        41,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "false",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        21,
        22,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "false",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        21,
        22,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "context == Context::UrlParser",
          "norm": "Context::UrlParser == context",
          "value": "false",
          "line": 1129,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        13,
        14,
        21,
        22,
        24,
        25,
        26,
        31,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "true",
          "line": 1125,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidPort)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        40,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": "port == u16::MAX as u32"
        },
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        1,
        2,
        3,
        23,
        24,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": "port == u16::MAX as u32"
        },
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        1,
        2,
        3,
        23,
        24,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": "port == u16::MAX as u32"
        },
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        1,
        2,
        3,
        23,
        24,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": "port == u16::MAX as u32"
        },
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": "port == u16::MAX as u32"
        },
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": "port == u16::MAX as u32"
        },
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": "port == u16::MAX as u32"
        },
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "true",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidPort)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        27,
        28,
        30,
        41,
        42
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": "port == u16::MAX as u32"
        },
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": "port == u16::MAX as u32"
        },
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "opt_port == default_port()",
          "norm": "default_port() == opt_port",
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        31,
        32,
        33,
        34,
        35,
        38,
        39,
        42
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "let Some(digit) = c.to_digit(10)",
          "norm": null,
          "value": "true",
          "line": 1123,
          "bound": null
        },
        {
          "cond": "port > u16::MAX as u32",
          "norm": null,
          "value": "false",
          "line": 1125,
          "bound": "port == u16::MAX as u32"
        },
        {
          "cond": "let (Some(c), remaining) = input.split_first()",
          "norm": null,
          "value": "true",
          "line": 1122,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "context == Context::Setter",
          "norm": "Context::Setter == context",
          "value": "false",
          "line": 1137,
          "bound": null
        },
        {
          "cond": "has_any_digit",
          "norm": null,
          "value": "false",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Ok((opt_port, input))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        1,
        2,
        3,
        23,
        24,
        25,
        26,
        31,
        32,
        37,
        39,
        42
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}