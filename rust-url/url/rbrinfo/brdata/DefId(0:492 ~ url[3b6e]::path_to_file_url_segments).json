{
  "name": "url::path_to_file_url_segments",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:2935:1:2970:2",
  "doc": "",
  "code": [
    "fn path_to_file_url_segments(",
    "    path: &Path,",
    "    serialization: &mut String,",
    ") -> Result<(u32, HostInternal), ()> {",
    "    use parser::SPECIAL_PATH_SEGMENT;",
    "    use percent_encoding::percent_encode;",
    "    #[cfg(target_os = \"hermit\")]",
    "    use std::os::hermit::ffi::OsStrExt;",
    "    #[cfg(any(unix, target_os = \"redox\"))]",
    "    use std::os::unix::prelude::OsStrExt;",
    "    if !path.is_absolute() {",
    "        return Err(());",
    "    }",
    "    let host_end = to_u32(serialization.len()).unwrap();",
    "    let mut empty = true;",
    "    // skip the root component",
    "    for component in path.components().skip(1) {",
    "        empty = false;",
    "        serialization.push('/');",
    "        #[cfg(not(target_os = \"wasi\"))]",
    "        serialization.extend(percent_encode(",
    "            component.as_os_str().as_bytes(),",
    "            SPECIAL_PATH_SEGMENT,",
    "        ));",
    "        #[cfg(target_os = \"wasi\")]",
    "        serialization.extend(percent_encode(",
    "            component.as_os_str().to_string_lossy().as_bytes(),",
    "            SPECIAL_PATH_SEGMENT,",
    "        ));",
    "    }",
    "    if empty {",
    "        // An URLâ€™s path must not be empty.",
    "        serialization.push('/');",
    "    }",
    "    Ok((host_end, HostInternal::None))",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 2945,
          "bound": null
        },
        {
          "cond": "component in path.components().skip(1)",
          "norm": null,
          "value": "true",
          "line": 2951,
          "bound": null
        },
        {
          "cond": "component in path.components().skip(1)",
          "norm": null,
          "value": "false",
          "line": 2951,
          "bound": null
        },
        {
          "cond": "empty",
          "norm": null,
          "value": "true",
          "line": 2965,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, HostInternal::None))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        18,
        19,
        20,
        21,
        10,
        11,
        12,
        14,
        16,
        22,
        24,
        25,
        26
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 2945,
          "bound": null
        },
        {
          "cond": "component in path.components().skip(1)",
          "norm": null,
          "value": "true",
          "line": 2951,
          "bound": null
        },
        {
          "cond": "component in path.components().skip(1)",
          "norm": null,
          "value": "false",
          "line": 2951,
          "bound": null
        },
        {
          "cond": "empty",
          "norm": null,
          "value": "false",
          "line": 2965,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, HostInternal::None))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        17,
        18,
        19,
        20,
        21,
        10,
        11,
        12,
        14,
        16,
        23,
        25,
        26
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 2945,
          "bound": null
        },
        {
          "cond": "component in path.components().skip(1)",
          "norm": null,
          "value": "false",
          "line": 2951,
          "bound": null
        },
        {
          "cond": "empty",
          "norm": null,
          "value": "true",
          "line": 2965,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, HostInternal::None))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        22,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "true",
          "line": 2945,
          "bound": null
        },
        {
          "cond": "component in path.components().skip(1)",
          "norm": null,
          "value": "false",
          "line": 2951,
          "bound": null
        },
        {
          "cond": "empty",
          "norm": null,
          "value": "false",
          "line": 2965,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, HostInternal::None))",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        16,
        23,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "path.is_absolute()",
          "norm": null,
          "value": "false",
          "line": 2945,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        26
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}