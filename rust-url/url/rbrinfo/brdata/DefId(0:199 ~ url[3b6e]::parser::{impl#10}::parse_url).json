{
  "name": "url::parser::{impl#10}::parse_url",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": true,
  "loc": "url/src/parser.rs:375:5:398:6",
  "doc": "/// https://url.spec.whatwg.org/#concept-basic-url-parser\n",
  "code": [
    "pub fn parse_url(mut self, input: &str) -> ParseResult<Url> {",
    "    let input = Input::new_trim_c0_control_and_space(input, self.violation_fn);",
    "    if let Ok(remaining) = self.parse_scheme(input.clone()) {",
    "        return self.parse_with_scheme(remaining);",
    "    }",
    "",
    "    // No-scheme state",
    "    if let Some(base_url) = self.base_url {",
    "        if input.starts_with('#') {",
    "            self.fragment_only(base_url, input)",
    "        } else if base_url.cannot_be_a_base() {",
    "            Err(ParseError::RelativeUrlWithCannotBeABaseBase)",
    "        } else {",
    "            let scheme_type = SchemeType::from(base_url.scheme());",
    "            if scheme_type.is_file() {",
    "                self.parse_file(input, scheme_type, Some(base_url))",
    "            } else {",
    "                self.parse_relative(input, scheme_type, base_url)",
    "            }",
    "        }",
    "    } else {",
    "        Err(ParseError::RelativeUrlWithoutBase)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Ok(remaining) = self.parse_scheme(input.clone())",
          "norm": null,
          "value": "true",
          "line": 377,
          "bound": null
        },
        {
          "cond": "let Some(base_url) = self.base_url",
          "norm": null,
          "value": "true",
          "line": 382,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::RelativeUrlWithoutBase)",
      "path": [
        0,
        1,
        2,
        3,
        7,
        8,
        28,
        29
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Ok(remaining) = self.parse_scheme(input.clone())",
          "norm": null,
          "value": "true",
          "line": 377,
          "bound": null
        },
        {
          "cond": "let Some(base_url) = self.base_url",
          "norm": null,
          "value": "true",
          "line": 382,
          "bound": null
        },
        {
          "cond": "input.starts_with('#')",
          "norm": null,
          "value": "true",
          "line": 383,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        7,
        9,
        10,
        11,
        12,
        13,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Ok(remaining) = self.parse_scheme(input.clone())",
          "norm": null,
          "value": "true",
          "line": 377,
          "bound": null
        },
        {
          "cond": "let Some(base_url) = self.base_url",
          "norm": null,
          "value": "true",
          "line": 382,
          "bound": null
        },
        {
          "cond": "input.starts_with('#')",
          "norm": null,
          "value": "false",
          "line": 383,
          "bound": null
        },
        {
          "cond": "base_url.cannot_be_a_base()",
          "norm": null,
          "value": "true",
          "line": 385,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::RelativeUrlWithCannotBeABaseBase)",
      "path": [
        0,
        1,
        2,
        3,
        7,
        9,
        10,
        11,
        14,
        15,
        16,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Ok(remaining) = self.parse_scheme(input.clone())",
          "norm": null,
          "value": "true",
          "line": 377,
          "bound": null
        },
        {
          "cond": "let Some(base_url) = self.base_url",
          "norm": null,
          "value": "true",
          "line": 382,
          "bound": null
        },
        {
          "cond": "input.starts_with('#')",
          "norm": null,
          "value": "false",
          "line": 383,
          "bound": null
        },
        {
          "cond": "base_url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 385,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 389,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        7,
        9,
        10,
        11,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Ok(remaining) = self.parse_scheme(input.clone())",
          "norm": null,
          "value": "true",
          "line": 377,
          "bound": null
        },
        {
          "cond": "let Some(base_url) = self.base_url",
          "norm": null,
          "value": "true",
          "line": 382,
          "bound": null
        },
        {
          "cond": "input.starts_with('#')",
          "norm": null,
          "value": "false",
          "line": 383,
          "bound": null
        },
        {
          "cond": "base_url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 385,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 389,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        7,
        9,
        10,
        11,
        14,
        15,
        17,
        18,
        19,
        20,
        23,
        24,
        25,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "let Ok(remaining) = self.parse_scheme(input.clone())",
          "norm": null,
          "value": "false",
          "line": 377,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        29
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}