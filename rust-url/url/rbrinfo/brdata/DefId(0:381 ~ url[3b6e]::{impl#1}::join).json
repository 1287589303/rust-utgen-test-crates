{
  "name": "url::{impl#1}::join",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:465:5:467:6",
  "doc": "/// Parse a string as an URL, with this URL as the base URL.\n///\n/// The inverse of this is [`make_relative`].\n///\n/// # Notes\n///\n/// - A trailing slash is significant.\n///   Without it, the last path component is considered to be a “file” name\n///   to be removed to get at the “directory” that is used as the base.\n/// - A [scheme relative special URL](https://url.spec.whatwg.org/#scheme-relative-special-url-string)\n///   as input replaces everything in the base URL after the scheme.\n/// - An absolute URL (with a scheme) as input replaces the whole base URL (even the scheme).\n///\n/// # Examples\n///\n/// ```rust\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// // Base without a trailing slash\n/// # fn run() -> Result<(), ParseError> {\n/// let base = Url::parse(\"https://example.net/a/b.html\")?;\n/// let url = base.join(\"c.png\")?;\n/// assert_eq!(url.as_str(), \"https://example.net/a/c.png\");  // Not /a/b.html/c.png\n///\n/// // Base with a trailing slash\n/// let base = Url::parse(\"https://example.net/a/b/\")?;\n/// let url = base.join(\"c.png\")?;\n/// assert_eq!(url.as_str(), \"https://example.net/a/b/c.png\");\n///\n/// // Input as scheme relative special URL\n/// let base = Url::parse(\"https://alice.com/a\")?;\n/// let url = base.join(\"//eve.com/b\")?;\n/// assert_eq!(url.as_str(), \"https://eve.com/b\");\n///\n/// // Input as absolute URL\n/// let base = Url::parse(\"https://alice.com/a\")?;\n/// let url = base.join(\"http://eve.com/b\")?;\n/// assert_eq!(url.as_str(), \"http://eve.com/b\");  // http instead of https\n///\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// # Errors\n///\n/// If the function can not parse an URL from the given string\n/// with this URL as the base URL, a [`ParseError`] variant will be returned.\n///\n/// [`ParseError`]: enum.ParseError.html\n/// [`make_relative`]: #method.make_relative\n",
  "code": [
    "pub fn join(&self, input: &str) -> Result<Url, crate::ParseError> {",
    "    Url::options().base_url(Some(self)).parse(input)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}