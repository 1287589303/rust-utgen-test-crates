{
  "name": "url::{impl#1}::query_pairs_mut",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1688:5:1706:6",
  "doc": "/// Manipulate this URLâ€™s query string, viewed as a sequence of name/value pairs\n/// in `application/x-www-form-urlencoded` syntax.\n///\n/// The return value has a method-chaining API:\n///\n/// ```rust\n/// # use url::{Url, ParseError};\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"https://example.net?lang=fr#nav\")?;\n/// assert_eq!(url.query(), Some(\"lang=fr\"));\n///\n/// url.query_pairs_mut().append_pair(\"foo\", \"bar\");\n/// assert_eq!(url.query(), Some(\"lang=fr&foo=bar\"));\n/// assert_eq!(url.as_str(), \"https://example.net/?lang=fr&foo=bar#nav\");\n///\n/// url.query_pairs_mut()\n///     .clear()\n///     .append_pair(\"foo\", \"bar & baz\")\n///     .append_pair(\"saisons\", \"\\u{00C9}t\\u{00E9}+hiver\");\n/// assert_eq!(url.query(), Some(\"foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver\"));\n/// assert_eq!(url.as_str(),\n///            \"https://example.net/?foo=bar+%26+baz&saisons=%C3%89t%C3%A9%2Bhiver#nav\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// Note: `url.query_pairs_mut().clear();` is equivalent to `url.set_query(Some(\"\"))`,\n/// not `url.set_query(None)`.\n///\n/// The state of `Url` is unspecified if this return value is leaked without being dropped.\n",
  "code": [
    "pub fn query_pairs_mut(&mut self) -> form_urlencoded::Serializer<'_, UrlQuery<'_>> {",
    "    let fragment = self.take_fragment();",
    "",
    "    let query_start;",
    "    if let Some(start) = self.query_start {",
    "        debug_assert!(self.byte_at(start) == b'?');",
    "        query_start = start as usize;",
    "    } else {",
    "        query_start = self.serialization.len();",
    "        self.query_start = Some(to_u32(query_start).unwrap());",
    "        self.serialization.push('?');",
    "    }",
    "",
    "    let query = UrlQuery {",
    "        url: Some(self),",
    "        fragment,",
    "    };",
    "    form_urlencoded::Serializer::for_suffix(query, query_start + \"?\".len())",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(start) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 1692,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(start) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 1692,
          "bound": null
        },
        {
          "cond": "self.byte_at(start) == b'?'",
          "norm": "b'?' == self.byte_at(start)",
          "value": "false",
          "line": 1693,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        9,
        15,
        16,
        17,
        18,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(start) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 1692,
          "bound": null
        },
        {
          "cond": "self.byte_at(start) == b'?'",
          "norm": "b'?' == self.byte_at(start)",
          "value": "true",
          "line": 1693,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}