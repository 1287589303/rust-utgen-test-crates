{
  "name": "url::{impl#1}::options",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:620:5:626:6",
  "doc": "/// Return a default `ParseOptions` that can fully configure the URL parser.\n///\n/// # Examples\n///\n/// Get default `ParseOptions`, then change base url\n///\n/// ```rust\n/// use url::Url;\n/// # use url::ParseError;\n/// # fn run() -> Result<(), ParseError> {\n/// let options = Url::options();\n/// let api = Url::parse(\"https://api.example.com\")?;\n/// let base_url = options.base_url(Some(&api));\n/// let version_url = base_url.parse(\"version.json\")?;\n/// assert_eq!(version_url.as_str(), \"https://api.example.com/version.json\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn options<'a>() -> ParseOptions<'a> {",
    "    ParseOptions {",
    "        base_url: None,",
    "        encoding_override: None,",
    "        violation_fn: None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "ParseOptions {\n            base_url: None,\n            encoding_override: None,\n            violation_fn: None,\n        }",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}