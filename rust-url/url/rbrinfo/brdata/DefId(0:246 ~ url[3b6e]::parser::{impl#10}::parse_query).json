{
  "name": "url::parser::{impl#10}::parse_query",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": true,
  "loc": "url/src/parser.rs:1542:5:1621:6",
  "doc": "",
  "code": [
    "pub fn parse_query<'i>(",
    "    &mut self,",
    "    scheme_type: SchemeType,",
    "    scheme_end: u32,",
    "    input: Input<'i>,",
    ") -> Option<Input<'i>> {",
    "    struct QueryPartIter<'i, 'p> {",
    "        is_url_parser: bool,",
    "        input: Input<'i>,",
    "        violation_fn: Option<&'p dyn Fn(SyntaxViolation)>,",
    "    }",
    "",
    "    impl<'i> Iterator for QueryPartIter<'i, '_> {",
    "        type Item = (&'i str, bool);",
    "",
    "        fn next(&mut self) -> Option<Self::Item> {",
    "            let start = self.input.chars.as_str();",
    "            // bypass self.input.next() in order to get string slices",
    "            // which are faster to operate on",
    "            while let Some(c) = self.input.chars.next() {",
    "                match c {",
    "                    ascii_tab_or_new_line_pattern!() => {",
    "                        return Some((",
    "                            &start[..start.len() - self.input.chars.as_str().len() - 1],",
    "                            false,",
    "                        ));",
    "                    }",
    "                    '#' if self.is_url_parser => {",
    "                        return Some((",
    "                            &start[..start.len() - self.input.chars.as_str().len() - 1],",
    "                            true,",
    "                        ));",
    "                    }",
    "                    c => {",
    "                        if let Some(vfn) = &self.violation_fn {",
    "                            check_url_code_point(vfn, c, &self.input);",
    "                        }",
    "                    }",
    "                }",
    "            }",
    "            if start.is_empty() {",
    "                None",
    "            } else {",
    "                Some((start, false))",
    "            }",
    "        }",
    "    }",
    "",
    "    let mut part_iter = QueryPartIter {",
    "        is_url_parser: self.context == Context::UrlParser,",
    "        input,",
    "        violation_fn: self.violation_fn,",
    "    };",
    "    let set = if scheme_type.is_special() {",
    "        SPECIAL_QUERY",
    "    } else {",
    "        QUERY",
    "    };",
    "    let query_encoding_override = self.query_encoding_override.filter(|_| {",
    "        matches!(",
    "            &self.serialization[..scheme_end as usize],",
    "            \"http\" | \"https\" | \"file\" | \"ftp\"",
    "        )",
    "    });",
    "",
    "    while let Some((part, is_finished)) = part_iter.next() {",
    "        match query_encoding_override {",
    "            // slightly faster to be repetitive and not convert text to Cow",
    "            Some(o) => self.serialization.extend(percent_encode(&o(part), set)),",
    "            None => self",
    "                .serialization",
    "                .extend(percent_encode(part.as_bytes(), set)),",
    "        }",
    "        if is_finished {",
    "            return Some(part_iter.input);",
    "        }",
    "    }",
    "",
    "    None",
    "}"
  ],
  "size": {
    "chain": 10,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 1595,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 1595,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches Some(o)",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches Some(o)",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "is_finished",
          "norm": null,
          "value": "true",
          "line": 1615,
          "bound": null
        }
      ],
      "ret": "Some(part_iter.input)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        24,
        25,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 1595,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches Some(o)",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches Some(o)",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "is_finished",
          "norm": null,
          "value": "false",
          "line": 1615,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        24,
        26,
        7,
        8,
        9,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 1595,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches None",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "is_finished",
          "norm": null,
          "value": "true",
          "line": 1615,
          "bound": null
        }
      ],
      "ret": "Some(part_iter.input)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        21,
        22,
        23,
        24,
        25,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 1595,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches None",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "is_finished",
          "norm": null,
          "value": "false",
          "line": 1615,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        21,
        22,
        23,
        24,
        26,
        7,
        8,
        9,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 1595,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 1595,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches Some(o)",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches Some(o)",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "is_finished",
          "norm": null,
          "value": "true",
          "line": 1615,
          "bound": null
        }
      ],
      "ret": "Some(part_iter.input)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        24,
        25,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 1595,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches Some(o)",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches Some(o)",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "is_finished",
          "norm": null,
          "value": "false",
          "line": 1615,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        16,
        17,
        18,
        19,
        20,
        24,
        26,
        7,
        8,
        9,
        27,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 1595,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches None",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "is_finished",
          "norm": null,
          "value": "true",
          "line": 1615,
          "bound": null
        }
      ],
      "ret": "Some(part_iter.input)",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        21,
        22,
        23,
        24,
        25,
        28
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 1595,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        },
        {
          "cond": "query_encoding_override matches None",
          "norm": null,
          "value": "true",
          "line": 1608,
          "bound": null
        },
        {
          "cond": "is_finished",
          "norm": null,
          "value": "false",
          "line": 1615,
          "bound": null
        },
        {
          "cond": "let Some((part, is_finished)) = part_iter.next()",
          "norm": null,
          "value": "true",
          "line": 1607,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        21,
        22,
        23,
        24,
        26,
        7,
        8,
        9,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}