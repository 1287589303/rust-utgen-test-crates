{
  "name": "url::parser::{impl#10}::after_double_slash",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": false,
  "loc": "url/src/parser.rs:840:5:873:6",
  "doc": "",
  "code": [
    "fn after_double_slash(",
    "    mut self,",
    "    input: Input<'_>,",
    "    scheme_type: SchemeType,",
    "    scheme_end: u32,",
    ") -> ParseResult<Url> {",
    "    self.serialization.push('/');",
    "    self.serialization.push('/');",
    "    // authority state",
    "    let before_authority = self.serialization.len();",
    "    let (username_end, remaining) = self.parse_userinfo(input, scheme_type)?;",
    "    let has_authority = before_authority != self.serialization.len();",
    "    // host state",
    "    let host_start = to_u32(self.serialization.len())?;",
    "    let (host_end, host, port, remaining) =",
    "        self.parse_host_and_port(remaining, scheme_end, scheme_type)?;",
    "    if host == HostInternal::None && has_authority {",
    "        return Err(ParseError::EmptyHost);",
    "    }",
    "    // path state",
    "    let path_start = to_u32(self.serialization.len())?;",
    "    let remaining = self.parse_path_start(scheme_type, &mut true, remaining);",
    "    self.with_query_and_fragment(",
    "        scheme_type,",
    "        scheme_end,",
    "        username_end,",
    "        host_start,",
    "        host_end,",
    "        host,",
    "        port,",
    "        path_start,",
    "        remaining,",
    "    )",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.parse_userinfo(input, scheme_type)?",
          "norm": null,
          "value": "Err/None",
          "line": 850,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        44,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.parse_userinfo(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 850,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Err/None",
          "line": 853,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        16,
        18,
        19,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.parse_userinfo(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 850,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 853,
          "bound": null
        },
        {
          "cond": "self.parse_host_and_port(remaining, scheme_end, scheme_type)?",
          "norm": null,
          "value": "Err/None",
          "line": 855,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        17,
        20,
        21,
        23,
        25,
        26,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.parse_userinfo(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 850,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 853,
          "bound": null
        },
        {
          "cond": "self.parse_host_and_port(remaining, scheme_end, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 855,
          "bound": null
        },
        {
          "cond": "host == HostInternal::None",
          "norm": "HostInternal::None == host",
          "value": "true",
          "line": 856,
          "bound": null
        },
        {
          "cond": "has_authority",
          "norm": null,
          "value": "true",
          "line": 856,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::EmptyHost)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        17,
        20,
        21,
        24,
        27,
        28,
        29,
        42,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.parse_userinfo(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 850,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 853,
          "bound": null
        },
        {
          "cond": "self.parse_host_and_port(remaining, scheme_end, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 855,
          "bound": null
        },
        {
          "cond": "host == HostInternal::None",
          "norm": "HostInternal::None == host",
          "value": "true",
          "line": 856,
          "bound": null
        },
        {
          "cond": "has_authority",
          "norm": null,
          "value": "false",
          "line": 856,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Err/None",
          "line": 860,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        17,
        20,
        21,
        24,
        27,
        28,
        31,
        32,
        33,
        34,
        36,
        38,
        39,
        42,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.parse_userinfo(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 850,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 853,
          "bound": null
        },
        {
          "cond": "self.parse_host_and_port(remaining, scheme_end, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 855,
          "bound": null
        },
        {
          "cond": "host == HostInternal::None",
          "norm": "HostInternal::None == host",
          "value": "true",
          "line": 856,
          "bound": null
        },
        {
          "cond": "has_authority",
          "norm": null,
          "value": "false",
          "line": 856,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 860,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        17,
        20,
        21,
        24,
        27,
        28,
        31,
        32,
        33,
        34,
        37,
        40,
        41,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.parse_userinfo(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 850,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 853,
          "bound": null
        },
        {
          "cond": "self.parse_host_and_port(remaining, scheme_end, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 855,
          "bound": null
        },
        {
          "cond": "host == HostInternal::None",
          "norm": "HostInternal::None == host",
          "value": "false",
          "line": 856,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Err/None",
          "line": 860,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        17,
        20,
        21,
        24,
        27,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        39,
        42,
        43,
        44,
        45
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.parse_userinfo(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 850,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 853,
          "bound": null
        },
        {
          "cond": "self.parse_host_and_port(remaining, scheme_end, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 855,
          "bound": null
        },
        {
          "cond": "host == HostInternal::None",
          "norm": "HostInternal::None == host",
          "value": "false",
          "line": 856,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 860,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        17,
        20,
        21,
        24,
        27,
        30,
        31,
        32,
        33,
        34,
        37,
        40,
        41,
        45
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}