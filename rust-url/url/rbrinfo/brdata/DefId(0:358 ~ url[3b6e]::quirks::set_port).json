{
  "name": "url::quirks::set_port",
  "mod_info": {
    "name": "quirks",
    "loc": "url/src/lib.rs:223:1:223:16"
  },
  "visible": true,
  "loc": "url/src/quirks.rs:245:1:265:2",
  "doc": "/// Setter for <https://url.spec.whatwg.org/#dom-url-port>\n",
  "code": [
    "pub fn set_port(url: &mut Url, new_port: &str) -> Result<(), ()> {",
    "    let result;",
    "    {",
    "        // has_host implies !cannot_be_a_base",
    "        let scheme = url.scheme();",
    "        if !url.has_host() || url.host() == Some(Host::Domain(\"\")) || scheme == \"file\" {",
    "            return Err(());",
    "        }",
    "        result = Parser::parse_port(",
    "            Input::new_no_trim(new_port),",
    "            || default_port(scheme),",
    "            Context::Setter,",
    "        )",
    "    }",
    "    if let Ok((new_port, _remaining)) = result {",
    "        url.set_port_internal(new_port);",
    "        Ok(())",
    "    } else {",
    "        Err(())",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "url.has_host()",
          "norm": null,
          "value": "true",
          "line": 250,
          "bound": null
        },
        {
          "cond": "url.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == url.host()",
          "value": "true",
          "line": 250,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        11,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "url.has_host()",
          "norm": null,
          "value": "true",
          "line": 250,
          "bound": null
        },
        {
          "cond": "url.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == url.host()",
          "value": "false",
          "line": 250,
          "bound": null
        },
        {
          "cond": "scheme == \"file\"",
          "norm": "\"file\" == scheme",
          "value": "true",
          "line": 250,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        8,
        9,
        10,
        11,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "url.has_host()",
          "norm": null,
          "value": "true",
          "line": 250,
          "bound": null
        },
        {
          "cond": "url.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == url.host()",
          "value": "false",
          "line": 250,
          "bound": null
        },
        {
          "cond": "scheme == \"file\"",
          "norm": "\"file\" == scheme",
          "value": "false",
          "line": 250,
          "bound": null
        },
        {
          "cond": "let Ok((new_port, _remaining)) = result",
          "norm": null,
          "value": "true",
          "line": 259,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        8,
        9,
        12,
        13,
        14,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "url.has_host()",
          "norm": null,
          "value": "true",
          "line": 250,
          "bound": null
        },
        {
          "cond": "url.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == url.host()",
          "value": "false",
          "line": 250,
          "bound": null
        },
        {
          "cond": "scheme == \"file\"",
          "norm": "\"file\" == scheme",
          "value": "false",
          "line": 250,
          "bound": null
        },
        {
          "cond": "let Ok((new_port, _remaining)) = result",
          "norm": null,
          "value": "false",
          "line": 259,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "url.has_host()",
          "norm": null,
          "value": "false",
          "line": 250,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        4,
        11,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}