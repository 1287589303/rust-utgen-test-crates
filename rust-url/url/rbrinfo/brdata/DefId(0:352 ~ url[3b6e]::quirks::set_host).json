{
  "name": "url::quirks::set_host",
  "mod_info": {
    "name": "quirks",
    "loc": "url/src/lib.rs:223:1:223:16"
  },
  "visible": true,
  "loc": "url/src/quirks.rs:150:1:193:2",
  "doc": "/// Setter for <https://url.spec.whatwg.org/#dom-url-host>\n",
  "code": [
    "pub fn set_host(url: &mut Url, new_host: &str) -> Result<(), ()> {",
    "    // If context object’s url’s cannot-be-a-base-URL flag is set, then return.",
    "    if url.cannot_be_a_base() {",
    "        return Err(());",
    "    }",
    "    // Host parsing rules are strict,",
    "    // We don't want to trim the input",
    "    let input = Input::new_no_trim(new_host);",
    "    let host;",
    "    let opt_port;",
    "    {",
    "        let scheme = url.scheme();",
    "        let scheme_type = SchemeType::from(scheme);",
    "        if scheme_type == SchemeType::File && new_host.is_empty() {",
    "            url.set_host_internal(Host::Domain(String::new()), None);",
    "            return Ok(());",
    "        }",
    "",
    "        if let Ok((h, remaining)) = Parser::parse_host(input, scheme_type) {",
    "            host = h;",
    "            opt_port = if let Some(remaining) = remaining.split_prefix(':') {",
    "                if remaining.is_empty() {",
    "                    None",
    "                } else {",
    "                    Parser::parse_port(remaining, || default_port(scheme), Context::Setter)",
    "                        .ok()",
    "                        .map(|(port, _remaining)| port)",
    "                }",
    "            } else {",
    "                None",
    "            };",
    "        } else {",
    "            return Err(());",
    "        }",
    "    }",
    "    // Make sure we won't set an empty host to a url with a username or a port",
    "    if host == Host::Domain(\"\".to_string())",
    "        && (!username(url).is_empty() || matches!(opt_port, Some(Some(_))) || url.port().is_some())",
    "    {",
    "        return Err(());",
    "    }",
    "    url.set_host_internal(host, opt_port);",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 46,
    "contra": 12,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "true",
          "line": 152,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        67
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 163,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        64,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        35,
        63,
        64,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        49,
        50,
        51,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        46,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "false",
          "line": 186,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        58,
        59,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        49,
        50,
        51,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        46,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "false",
          "line": 186,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        58,
        59,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        49,
        50,
        51,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        46,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 163,
          "bound": null
        },
        {
          "cond": "new_host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "false",
          "line": 186,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        58,
        59,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        35,
        63,
        64,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        49,
        50,
        51,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        46,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "false",
          "line": 186,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        33,
        34,
        36,
        37,
        38,
        39,
        40,
        58,
        59,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        49,
        50,
        51,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        46,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "false",
          "line": 186,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        58,
        59,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        55,
        56,
        65,
        66,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        },
        {
          "cond": "url.port().is_some()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        47,
        51,
        52,
        53,
        54,
        57,
        60,
        61,
        62,
        67
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        },
        {
          "cond": "opt_port matches Some(Some(_))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        48,
        49,
        50,
        51,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "true",
          "line": 186,
          "bound": null
        },
        {
          "cond": "username(url).is_empty()",
          "norm": null,
          "value": "false",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        46,
        56,
        65,
        66,
        67
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 163,
          "bound": null
        },
        {
          "cond": "let Ok((h, remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 170,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 171,
          "bound": null
        },
        {
          "cond": "host == Host::Domain(\"\".to_string())",
          "norm": "Host::Domain(\"\".to_string()) == host",
          "value": "false",
          "line": 186,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        39,
        40,
        58,
        59,
        60,
        61,
        62,
        67
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}