{
  "name": "url::{impl#1}::set_scheme",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:2449:5:2498:6",
  "doc": "/// Change this URL’s scheme.\n///\n/// Do nothing and return `Err` under the following circumstances:\n///\n/// * If the new scheme is not in `[a-zA-Z][a-zA-Z0-9+.-]+`\n/// * If this URL is cannot-be-a-base and the new scheme is one of\n///   `http`, `https`, `ws`, `wss` or `ftp`\n/// * If either the old or new scheme is `http`, `https`, `ws`,\n///   `wss` or `ftp` and the other is not one of these\n/// * If the new scheme is `file` and this URL includes credentials\n///   or has a non-null port\n/// * If this URL's scheme is `file` and its host is empty or null\n///\n/// See also [the URL specification's section on legal scheme state\n/// overrides](https://url.spec.whatwg.org/#scheme-state).\n///\n/// # Examples\n///\n/// Change the URL’s scheme from `https` to `http`:\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"https://example.net\")?;\n/// let result = url.set_scheme(\"http\");\n/// assert_eq!(url.as_str(), \"http://example.net/\");\n/// assert!(result.is_ok());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n/// Change the URL’s scheme from `foo` to `bar`:\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"foo://example.net\")?;\n/// let result = url.set_scheme(\"bar\");\n/// assert_eq!(url.as_str(), \"bar://example.net\");\n/// assert!(result.is_ok());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// Cannot change URL’s scheme from `https` to `foõ`:\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"https://example.net\")?;\n/// let result = url.set_scheme(\"foõ\");\n/// assert_eq!(url.as_str(), \"https://example.net/\");\n/// assert!(result.is_err());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// Cannot change URL’s scheme from `mailto` (cannot-be-a-base) to `https`:\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"mailto:rms@example.net\")?;\n/// let result = url.set_scheme(\"https\");\n/// assert_eq!(url.as_str(), \"mailto:rms@example.net\");\n/// assert!(result.is_err());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n/// Cannot change the URL’s scheme from `foo` to `https`:\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"foo://example.net\")?;\n/// let result = url.set_scheme(\"https\");\n/// assert_eq!(url.as_str(), \"foo://example.net\");\n/// assert!(result.is_err());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n/// Cannot change the URL’s scheme from `http` to `foo`:\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"http://example.net\")?;\n/// let result = url.set_scheme(\"foo\");\n/// assert_eq!(url.as_str(), \"http://example.net/\");\n/// assert!(result.is_err());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn set_scheme(&mut self, scheme: &str) -> Result<(), ()> {",
    "    let mut parser = Parser::for_setter(String::new());",
    "    let remaining = parser.parse_scheme(parser::Input::new_no_trim(scheme))?;",
    "    let new_scheme_type = SchemeType::from(&parser.serialization);",
    "    let old_scheme_type = SchemeType::from(self.scheme());",
    "    // If url’s scheme is a special scheme and buffer is not a special scheme, then return.",
    "    if (new_scheme_type.is_special() && !old_scheme_type.is_special()) ||",
    "        // If url’s scheme is not a special scheme and buffer is a special scheme, then return.",
    "        (!new_scheme_type.is_special() && old_scheme_type.is_special()) ||",
    "        // If url includes credentials or has a non-null port, and buffer is \"file\", then return.",
    "        // If url’s scheme is \"file\" and its host is an empty host or null, then return.",
    "        (new_scheme_type.is_file() && self.has_authority())",
    "    {",
    "        return Err(());",
    "    }",
    "",
    "    if !remaining.is_empty() || (!self.has_host() && new_scheme_type.is_special()) {",
    "        return Err(());",
    "    }",
    "    let old_scheme_end = self.scheme_end;",
    "    let new_scheme_end = to_u32(parser.serialization.len()).unwrap();",
    "    let adjust = |index: &mut u32| {",
    "        *index -= old_scheme_end;",
    "        *index += new_scheme_end;",
    "    };",
    "",
    "    self.scheme_end = new_scheme_end;",
    "    adjust(&mut self.username_end);",
    "    adjust(&mut self.host_start);",
    "    adjust(&mut self.host_end);",
    "    adjust(&mut self.path_start);",
    "    if let Some(ref mut index) = self.query_start {",
    "        adjust(index)",
    "    }",
    "    if let Some(ref mut index) = self.fragment_start {",
    "        adjust(index)",
    "    }",
    "",
    "    parser.serialization.push_str(self.slice(old_scheme_end..));",
    "    self.serialization = parser.serialization;",
    "",
    "    // Update the port so it can be removed",
    "    // If it is the scheme's default",
    "    // we don't mind it silently failing",
    "    // if there was no port in the first place",
    "    let previous_port = self.port();",
    "    let _ = self.set_port(previous_port);",
    "",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 88,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Err/None",
          "line": 2451,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        38,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        38,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        25,
        32,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        38,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        38,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        32,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        31,
        32,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        38,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        22,
        27,
        28,
        34,
        35,
        36,
        38,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2457,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        25,
        32,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        33,
        35,
        36,
        38,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        40,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        43,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        57,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        62,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2480,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2483,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        37,
        39,
        41,
        42,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        58,
        59,
        60,
        61,
        63,
        64,
        65,
        66,
        68,
        69,
        70,
        71,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "parser.parse_scheme(parser::Input::new_no_trim(scheme))?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2451,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2455,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "old_scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2457,
          "bound": null
        },
        {
          "cond": "new_scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2460,
          "bound": null
        },
        {
          "cond": "remaining.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2465,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        19,
        20,
        21,
        23,
        24,
        26,
        27,
        28,
        34,
        35,
        36,
        38,
        44,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}