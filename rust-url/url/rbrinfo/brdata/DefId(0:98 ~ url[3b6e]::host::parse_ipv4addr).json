{
  "name": "url::host::parse_ipv4addr",
  "mod_info": {
    "name": "host",
    "loc": "url/src/lib.rs:216:1:216:10"
  },
  "visible": false,
  "loc": "url/src/host.rs:298:1:326:2",
  "doc": "/// <https://url.spec.whatwg.org/#concept-ipv4-parser>\n",
  "code": [
    "fn parse_ipv4addr(input: &str) -> ParseResult<Ipv4Addr> {",
    "    let mut parts: Vec<&str> = input.split('.').collect();",
    "    if parts.last() == Some(&\"\") {",
    "        parts.pop();",
    "    }",
    "    if parts.len() > 4 {",
    "        return Err(ParseError::InvalidIpv4Address);",
    "    }",
    "    let mut numbers: Vec<u32> = Vec::new();",
    "    for part in parts {",
    "        match parse_ipv4number(part) {",
    "            Ok(Some(n)) => numbers.push(n),",
    "            Ok(None) => return Err(ParseError::InvalidIpv4Address), // u32 overflow",
    "            Err(()) => return Err(ParseError::InvalidIpv4Address),",
    "        };",
    "    }",
    "    let mut ipv4 = numbers.pop().expect(\"a non-empty list of numbers\");",
    "    // Equivalent to: ipv4 >= 256 ** (4 âˆ’ numbers.len())",
    "    if ipv4 > u32::MAX >> (8 * numbers.len() as u32) {",
    "        return Err(ParseError::InvalidIpv4Address);",
    "    }",
    "    if numbers.iter().any(|x| *x > 255) {",
    "        return Err(ParseError::InvalidIpv4Address);",
    "    }",
    "    for (counter, n) in numbers.iter().enumerate() {",
    "        ipv4 += n << (8 * (3 - counter as u32))",
    "    }",
    "    Ok(Ipv4Addr::from(ipv4))",
    "}"
  ],
  "size": {
    "chain": 22,
    "contra": 10,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        11,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Err(())",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        27,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Err(())",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "true",
          "line": 316,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        24,
        25,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        63,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Err(())",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "true",
          "line": 319,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        24,
        25,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        63,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Err(())",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "false",
          "line": 319,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 322,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 322,
          "bound": null
        }
      ],
      "ret": "Ok(Ipv4Addr::from(ipv4))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        24,
        25,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        54,
        56,
        57,
        58,
        59,
        49,
        50,
        51,
        53,
        55,
        60,
        61,
        62,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Err(())",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "false",
          "line": 319,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 322,
          "bound": null
        }
      ],
      "ret": "Ok(Ipv4Addr::from(ipv4))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        24,
        25,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        55,
        60,
        61,
        62,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None)",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        24,
        26,
        30,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "true",
          "line": 316,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        63,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "true",
          "line": 319,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        63,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "false",
          "line": 319,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 322,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 322,
          "bound": null
        }
      ],
      "ret": "Ok(Ipv4Addr::from(ipv4))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        54,
        56,
        57,
        58,
        59,
        49,
        50,
        51,
        53,
        55,
        60,
        61,
        62,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "true",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "false",
          "line": 319,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 322,
          "bound": null
        }
      ],
      "ret": "Ok(Ipv4Addr::from(ipv4))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        55,
        60,
        61,
        62,
        71
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "true",
          "line": 303,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        11,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Err(())",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        27,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Err(())",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "true",
          "line": 316,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        24,
        25,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        63,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Err(())",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "true",
          "line": 319,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        24,
        25,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        63,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Err(())",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "false",
          "line": 319,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 322,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 322,
          "bound": null
        }
      ],
      "ret": "Ok(Ipv4Addr::from(ipv4))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        24,
        25,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        54,
        56,
        57,
        58,
        59,
        49,
        50,
        51,
        53,
        55,
        60,
        61,
        62,
        71
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Err(())",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "false",
          "line": 319,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 322,
          "bound": null
        }
      ],
      "ret": "Ok(Ipv4Addr::from(ipv4))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        24,
        25,
        28,
        29,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        55,
        60,
        61,
        62,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "true",
          "line": 307,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None) or Ok(Some(n))",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        },
        {
          "cond": "parse_ipv4number(part) matches Ok(None)",
          "norm": null,
          "value": "true",
          "line": 308,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        22,
        24,
        26,
        30,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "true",
          "line": 316,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        63,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "true",
          "line": 319,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv4Address)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        43,
        63,
        67,
        68,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "false",
          "line": 319,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 322,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 322,
          "bound": null
        }
      ],
      "ret": "Ok(Ipv4Addr::from(ipv4))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        54,
        56,
        57,
        58,
        59,
        49,
        50,
        51,
        53,
        55,
        60,
        61,
        62,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "parts.last() == Some(&\"\")",
          "norm": "Some(&\"\") == parts.last()",
          "value": "false",
          "line": 300,
          "bound": null
        },
        {
          "cond": "parts.len() > 4",
          "norm": "4 < parts.len()",
          "value": "false",
          "line": 303,
          "bound": "parts.len() == 4"
        },
        {
          "cond": "part in parts",
          "norm": null,
          "value": "false",
          "line": 307,
          "bound": null
        },
        {
          "cond": "ipv4 > u32::MAX >> (8 * numbers.len() as u32)",
          "norm": null,
          "value": "false",
          "line": 316,
          "bound": "ipv4 == u32::MAX >> (8 * numbers.len() as u32)"
        },
        {
          "cond": "numbers.iter().any(|x| *x > 255)",
          "norm": null,
          "value": "false",
          "line": 319,
          "bound": null
        },
        {
          "cond": "(counter, n) in numbers.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 322,
          "bound": null
        }
      ],
      "ret": "Ok(Ipv4Addr::from(ipv4))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        39,
        40,
        41,
        42,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        53,
        55,
        60,
        61,
        62,
        71
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}