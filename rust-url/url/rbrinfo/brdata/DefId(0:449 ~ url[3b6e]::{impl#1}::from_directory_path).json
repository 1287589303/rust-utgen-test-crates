{
  "name": "url::{impl#1}::from_directory_path",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:2588:5:2594:6",
  "doc": "/// Convert a directory name as `std::path::Path` into an URL in the `file` scheme.\n///\n/// This returns `Err` if the given path is not absolute or,\n/// on Windows, if the prefix is not a disk prefix (e.g. `C:`) or a UNC prefix (`\\\\`).\n///\n/// Compared to `from_file_path`, this ensure that URLâ€™s the path has a trailing slash\n/// so that the entire path is considered when using this URL as a base URL.\n///\n/// For example:\n///\n/// * `\"index.html\"` parsed with `Url::from_directory_path(Path::new(\"/var/www\"))`\n///   as the base URL is `file:///var/www/index.html`\n/// * `\"index.html\"` parsed with `Url::from_file_path(Path::new(\"/var/www\"))`\n///   as the base URL is `file:///var/index.html`, which might not be what was intended.\n///\n/// Note that `std::path` does not consider trailing slashes significant\n/// and usually does not include them (e.g. in `Path::parent()`).\n///\n/// This method is only available if the `std` Cargo feature is enabled.\n",
  "code": [
    "pub fn from_directory_path<P: AsRef<std::path::Path>>(path: P) -> Result<Url, ()> {",
    "    let mut url = Url::from_file_path(path)?;",
    "    if !url.serialization.ends_with('/') {",
    "        url.serialization.push('/')",
    "    }",
    "    Ok(url)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "Url::from_file_path(path)?",
          "norm": null,
          "value": "Err/None",
          "line": 2589,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        18,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "Url::from_file_path(path)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2589,
          "bound": null
        },
        {
          "cond": "url.serialization.ends_with('/')",
          "norm": null,
          "value": "true",
          "line": 2590,
          "bound": null
        }
      ],
      "ret": "Ok(url)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        15,
        16,
        17,
        19
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "Url::from_file_path(path)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2589,
          "bound": null
        },
        {
          "cond": "url.serialization.ends_with('/')",
          "norm": null,
          "value": "false",
          "line": 2590,
          "bound": null
        }
      ],
      "ret": "Ok(url)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        13,
        14,
        15,
        16,
        17,
        19
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}