{
  "name": "url::{impl#1}::set_fragment",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1569:5:1584:6",
  "doc": "/// Change this URLâ€™s fragment identifier.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"https://example.com/data.csv\")?;\n/// assert_eq!(url.as_str(), \"https://example.com/data.csv\");\n///\n/// url.set_fragment(Some(\"cell=4,1-6,2\"));\n/// assert_eq!(url.as_str(), \"https://example.com/data.csv#cell=4,1-6,2\");\n/// assert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n///\n/// url.set_fragment(None);\n/// assert_eq!(url.as_str(), \"https://example.com/data.csv\");\n/// assert!(url.fragment().is_none());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn set_fragment(&mut self, fragment: Option<&str>) {",
    "    // Remove any previous fragment",
    "    if let Some(start) = self.fragment_start {",
    "        debug_assert!(self.byte_at(start) == b'#');",
    "        self.serialization.truncate(start as usize);",
    "    }",
    "    // Write the new one",
    "    if let Some(input) = fragment {",
    "        self.fragment_start = Some(to_u32(self.serialization.len()).unwrap());",
    "        self.serialization.push('#');",
    "        self.mutate(|parser| parser.parse_fragment(parser::Input::new_no_trim(input)))",
    "    } else {",
    "        self.fragment_start = None;",
    "        self.strip_trailing_spaces_from_opaque_path();",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(start) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 1571,
          "bound": null
        },
        {
          "cond": "let Some(input) = fragment",
          "norm": null,
          "value": "true",
          "line": 1576,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        10,
        11,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(start) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 1571,
          "bound": null
        },
        {
          "cond": "let Some(input) = fragment",
          "norm": null,
          "value": "true",
          "line": 1576,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(start) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 1571,
          "bound": null
        },
        {
          "cond": "self.byte_at(start) == b'#'",
          "norm": "b'#' == self.byte_at(start)",
          "value": "false",
          "line": 1572,
          "bound": null
        },
        {
          "cond": "let Some(input) = fragment",
          "norm": null,
          "value": "true",
          "line": 1576,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        11,
        19,
        20,
        21
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(start) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 1571,
          "bound": null
        },
        {
          "cond": "self.byte_at(start) == b'#'",
          "norm": "b'#' == self.byte_at(start)",
          "value": "false",
          "line": 1572,
          "bound": null
        },
        {
          "cond": "let Some(input) = fragment",
          "norm": null,
          "value": "true",
          "line": 1576,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some(start) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 1571,
          "bound": null
        },
        {
          "cond": "self.byte_at(start) == b'#'",
          "norm": "b'#' == self.byte_at(start)",
          "value": "true",
          "line": 1572,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}