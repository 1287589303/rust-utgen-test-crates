{
  "name": "url::{impl#1}::origin",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:877:5:879:6",
  "doc": "/// Return the origin of this URL (<https://url.spec.whatwg.org/#origin>)\n///\n/// Note: this returns an opaque origin for `file:` URLs, which causes\n/// `url.origin() != url.origin()`.\n///\n/// # Examples\n///\n/// URL with `ftp` scheme:\n///\n/// ```rust\n/// use url::{Host, Origin, Url};\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"ftp://example.com/foo\")?;\n/// assert_eq!(url.origin(),\n///            Origin::Tuple(\"ftp\".into(),\n///                          Host::Domain(\"example.com\".into()),\n///                          21));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// URL with `blob` scheme:\n///\n/// ```rust\n/// use url::{Host, Origin, Url};\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"blob:https://example.com/foo\")?;\n/// assert_eq!(url.origin(),\n///            Origin::Tuple(\"https\".into(),\n///                          Host::Domain(\"example.com\".into()),\n///                          443));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// URL with `file` scheme:\n///\n/// ```rust\n/// use url::{Host, Origin, Url};\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"file:///tmp/foo\")?;\n/// assert!(!url.origin().is_tuple());\n///\n/// let other_url = Url::parse(\"file:///tmp/foo\")?;\n/// assert!(url.origin() != other_url.origin());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// URL with other scheme:\n///\n/// ```rust\n/// use url::{Host, Origin, Url};\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"foo:bar\")?;\n/// assert!(!url.origin().is_tuple());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn origin(&self) -> Origin {",
    "    origin::url_origin(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}