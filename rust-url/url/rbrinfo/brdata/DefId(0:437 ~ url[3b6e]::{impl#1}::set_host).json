{
  "name": "url::{impl#1}::set_host",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:2008:5:2070:6",
  "doc": "/// Change this URLâ€™s host.\n///\n/// Removing the host (calling this with `None`)\n/// will also remove any username, password, and port number.\n///\n/// # Examples\n///\n/// Change host:\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"https://example.net\")?;\n/// let result = url.set_host(Some(\"rust-lang.org\"));\n/// assert!(result.is_ok());\n/// assert_eq!(url.as_str(), \"https://rust-lang.org/\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// Remove host:\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"foo://example.net\")?;\n/// let result = url.set_host(None);\n/// assert!(result.is_ok());\n/// assert_eq!(url.as_str(), \"foo:/\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// Cannot remove host for 'special' schemes (e.g. `http`):\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"https://example.net\")?;\n/// let result = url.set_host(None);\n/// assert!(result.is_err());\n/// assert_eq!(url.as_str(), \"https://example.net/\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// Cannot change or remove host for cannot-be-a-base URLs:\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"mailto:rms@example.net\")?;\n///\n/// let result = url.set_host(Some(\"rust-lang.org\"));\n/// assert!(result.is_err());\n/// assert_eq!(url.as_str(), \"mailto:rms@example.net\");\n///\n/// let result = url.set_host(None);\n/// assert!(result.is_err());\n/// assert_eq!(url.as_str(), \"mailto:rms@example.net\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// # Errors\n///\n/// If this URL is cannot-be-a-base or there is an error parsing the given `host`,\n/// a [`ParseError`] variant will be returned.\n///\n/// [`ParseError`]: enum.ParseError.html\n",
  "code": [
    "pub fn set_host(&mut self, host: Option<&str>) -> Result<(), ParseError> {",
    "    if self.cannot_be_a_base() {",
    "        return Err(ParseError::SetHostOnCannotBeABaseUrl);",
    "    }",
    "",
    "    let scheme_type = SchemeType::from(self.scheme());",
    "",
    "    if let Some(host) = host {",
    "        if host.is_empty() && scheme_type.is_special() && !scheme_type.is_file() {",
    "            return Err(ParseError::EmptyHost);",
    "        }",
    "        let mut host_substr = host;",
    "        // Otherwise, if c is U+003A (:) and the [] flag is unset, then",
    "        if !host.starts_with('[') || !host.ends_with(']') {",
    "            match host.find(':') {",
    "                Some(0) => {",
    "                    // If buffer is the empty string, validation error, return failure.",
    "                    return Err(ParseError::InvalidDomainCharacter);",
    "                }",
    "                // Let host be the result of host parsing buffer",
    "                Some(colon_index) => {",
    "                    host_substr = &host[..colon_index];",
    "                }",
    "                None => {}",
    "            }",
    "        }",
    "        if SchemeType::from(self.scheme()).is_special() {",
    "            self.set_host_internal(Host::parse(host_substr)?, None);",
    "        } else {",
    "            self.set_host_internal(Host::parse_opaque(host_substr)?, None);",
    "        }",
    "    } else if self.has_host() {",
    "        if scheme_type.is_special() && !scheme_type.is_file() {",
    "            return Err(ParseError::EmptyHost);",
    "        } else if self.serialization.len() == self.path_start as usize {",
    "            self.serialization.push('/');",
    "        }",
    "        debug_assert!(self.byte_at(self.scheme_end) == b':');",
    "        debug_assert!(self.byte_at(self.path_start) == b'/');",
    "",
    "        let new_path_start = if scheme_type.is_file() {",
    "            self.scheme_end + 3",
    "        } else {",
    "            self.scheme_end + 1",
    "        };",
    "",
    "        self.serialization",
    "            .drain(new_path_start as usize..self.path_start as usize);",
    "        let offset = self.path_start - new_path_start;",
    "        self.path_start = new_path_start;",
    "        self.username_end = new_path_start;",
    "        self.host_start = new_path_start;",
    "        self.host_end = new_path_start;",
    "        self.port = None;",
    "        if let Some(ref mut index) = self.query_start {",
    "            *index -= offset",
    "        }",
    "        if let Some(ref mut index) = self.fragment_start {",
    "            *index -= offset",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 110,
    "contra": 0,
    "min_set": 13
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "true",
          "line": 2009,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::SetHostOnCannotBeABaseUrl)",
      "path": [
        0,
        1,
        2,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        101,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        101,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "true",
          "line": 2046,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        86,
        124
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "true",
          "line": 2045,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        81,
        124
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        101,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        101,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "true",
          "line": 2046,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        86,
        124
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "true",
          "line": 2045,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        75,
        76,
        77,
        79,
        81,
        124
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::EmptyHost)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        116,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        101,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        101,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "true",
          "line": 2046,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        86,
        124
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "true",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "true",
          "line": 2045,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        73,
        74,
        76,
        77,
        79,
        81,
        124
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        101,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        101,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        101,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        106,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "false",
          "line": 2046,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2048,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2062,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2065,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        85,
        88,
        89,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        102,
        103,
        104,
        105,
        107,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 41,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 2045,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.path_start) == b'/'",
          "norm": "b'/' == self.byte_at(self.path_start)",
          "value": "true",
          "line": 2046,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        75,
        76,
        77,
        79,
        80,
        82,
        83,
        84,
        86,
        124
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 42,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2039,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2040,
          "bound": null
        },
        {
          "cond": "self.serialization.len() == self.path_start as usize",
          "norm": "self.path_start as usize == self.serialization.len()",
          "value": "false",
          "line": 2042,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "true",
          "line": 2045,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        64,
        65,
        70,
        71,
        72,
        75,
        76,
        77,
        79,
        81,
        124
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 43,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2039,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        62,
        63,
        108,
        109,
        110,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 44,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 45,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 46,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 47,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 48,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 49,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 50,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 51,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 52,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidDomainCharacter)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        29,
        31,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 53,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 54,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 55,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 56,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 57,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 58,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 59,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 60,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 61,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidDomainCharacter)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        20,
        24,
        25,
        27,
        29,
        31,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 62,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 63,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 64,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 65,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 66,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_file()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::EmptyHost)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 67,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 68,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 69,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 70,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 71,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 72,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 73,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 74,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 75,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidDomainCharacter)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        29,
        31,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 76,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 77,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 78,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 79,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 80,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 81,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 82,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 83,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 84,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidDomainCharacter)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        20,
        24,
        25,
        27,
        29,
        31,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 85,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 86,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 87,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 88,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        15,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 89,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 90,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 91,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 92,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        22,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 93,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 94,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 95,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 96,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 97,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidDomainCharacter)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        27,
        29,
        31,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 98,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 99,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 100,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 101,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 102,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 103,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 104,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 105,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "false",
          "line": 2023,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "false",
          "line": 2028,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "false",
          "line": 2031,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        20,
        24,
        25,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 106,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0) or Some(colon_index)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "host.find(':') matches Some(0)",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidDomainCharacter)",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        20,
        24,
        25,
        27,
        29,
        31,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 107,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        112,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 108,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "true",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2035,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 109,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Err/None",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        54,
        56,
        57,
        111,
        113,
        114,
        115,
        116,
        117
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 110,
      "conds": [
        {
          "cond": "self.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 2009,
          "bound": null
        },
        {
          "cond": "let Some(host) = host",
          "norm": null,
          "value": "true",
          "line": 2015,
          "bound": null
        },
        {
          "cond": "host.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2016,
          "bound": null
        },
        {
          "cond": "host.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 2021,
          "bound": null
        },
        {
          "cond": "host.find(':') matches None",
          "norm": null,
          "value": "true",
          "line": 2022,
          "bound": null
        },
        {
          "cond": "SchemeType::from(self.scheme()).is_special()",
          "norm": null,
          "value": "false",
          "line": 2034,
          "bound": null
        },
        {
          "cond": "Host::parse_opaque(host_substr)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2037,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        16,
        17,
        18,
        20,
        24,
        25,
        30,
        34,
        35,
        36,
        37,
        38,
        50,
        51,
        52,
        55,
        58,
        59,
        60,
        61,
        110,
        117
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}