{
  "name": "url::{impl#1}::fragment",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1532:5:1537:6",
  "doc": "/// Return this URLâ€™s fragment identifier, if any.\n///\n/// A fragment is the part of the URL after the `#` symbol.\n/// The fragment is optional and, if present, contains a fragment identifier\n/// that identifies a secondary resource, such as a section heading\n/// of a document.\n///\n/// In HTML, the fragment identifier is usually the id attribute of a an element\n/// that is scrolled to on load. Browsers typically will not send the fragment portion\n/// of a URL to the server.\n///\n/// **Note:** the parser did *not* percent-encode this component,\n/// but the input may have been percent-encoded already.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"https://example.com/data.csv#row=4\")?;\n///\n/// assert_eq!(url.fragment(), Some(\"row=4\"));\n///\n/// let url = Url::parse(\"https://example.com/data.csv#cell=4,1-6,2\")?;\n///\n/// assert_eq!(url.fragment(), Some(\"cell=4,1-6,2\"));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn fragment(&self) -> Option<&str> {",
    "    self.fragment_start.map(|start| {",
    "        debug_assert!(self.byte_at(start) == b'#');",
    "        self.slice(start + 1..)",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}