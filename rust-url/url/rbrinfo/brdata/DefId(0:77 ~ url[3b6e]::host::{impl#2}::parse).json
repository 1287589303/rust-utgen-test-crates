{
  "name": "url::host::{impl#2}::parse",
  "mod_info": {
    "name": "host",
    "loc": "url/src/lib.rs:216:1:216:10"
  },
  "visible": true,
  "loc": "url/src/host.rs:82:5:103:6",
  "doc": "/// Parse a host: either an IPv6 address in [] square brackets, or a domain.\n///\n/// <https://url.spec.whatwg.org/#host-parsing>\n",
  "code": [
    "pub fn parse(input: &str) -> Result<Self, ParseError> {",
    "    if input.starts_with('[') {",
    "        if !input.ends_with(']') {",
    "            return Err(ParseError::InvalidIpv6Address);",
    "        }",
    "        return parse_ipv6addr(&input[1..input.len() - 1]).map(Host::Ipv6);",
    "    }",
    "    let domain: Cow<'_, [u8]> = percent_decode(input.as_bytes()).into();",
    "",
    "    let domain = Self::domain_to_ascii(&domain)?;",
    "",
    "    if domain.is_empty() {",
    "        return Err(ParseError::EmptyHost);",
    "    }",
    "",
    "    if ends_in_a_number(&domain) {",
    "        let address = parse_ipv4addr(&domain)?;",
    "        Ok(Host::Ipv4(address))",
    "    } else {",
    "        Ok(Host::Domain(domain.to_string()))",
    "    }",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "input.ends_with(']')",
          "norm": null,
          "value": "true",
          "line": 84,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "true",
          "line": 83,
          "bound": null
        },
        {
          "cond": "input.ends_with(']')",
          "norm": null,
          "value": "false",
          "line": 84,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::InvalidIpv6Address)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        52,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": null
        },
        {
          "cond": "Self::domain_to_ascii(&domain)?",
          "norm": null,
          "value": "Err/None",
          "line": 91,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        22,
        49,
        50,
        51,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": null
        },
        {
          "cond": "Self::domain_to_ascii(&domain)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 91,
          "bound": null
        },
        {
          "cond": "domain.is_empty()",
          "norm": null,
          "value": "true",
          "line": 93,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::EmptyHost)",
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        23,
        24,
        25,
        26,
        27,
        48,
        50,
        51,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": null
        },
        {
          "cond": "Self::domain_to_ascii(&domain)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 91,
          "bound": null
        },
        {
          "cond": "domain.is_empty()",
          "norm": null,
          "value": "false",
          "line": 93,
          "bound": null
        },
        {
          "cond": "ends_in_a_number(&domain)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "parse_ipv4addr(&domain)?",
          "norm": null,
          "value": "Err/None",
          "line": 98,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        36,
        38,
        39,
        48,
        50,
        51,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": null
        },
        {
          "cond": "Self::domain_to_ascii(&domain)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 91,
          "bound": null
        },
        {
          "cond": "domain.is_empty()",
          "norm": null,
          "value": "false",
          "line": 93,
          "bound": null
        },
        {
          "cond": "ends_in_a_number(&domain)",
          "norm": null,
          "value": "true",
          "line": 97,
          "bound": null
        },
        {
          "cond": "parse_ipv4addr(&domain)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 98,
          "bound": null
        }
      ],
      "ret": "Ok(Host::Ipv4(address))",
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        37,
        40,
        45,
        46,
        47,
        53
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "input.starts_with('[')",
          "norm": null,
          "value": "false",
          "line": 83,
          "bound": null
        },
        {
          "cond": "Self::domain_to_ascii(&domain)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 91,
          "bound": null
        },
        {
          "cond": "domain.is_empty()",
          "norm": null,
          "value": "false",
          "line": 93,
          "bound": null
        },
        {
          "cond": "ends_in_a_number(&domain)",
          "norm": null,
          "value": "false",
          "line": 97,
          "bound": null
        }
      ],
      "ret": "Ok(Host::Domain(domain.to_string()))",
      "path": [
        0,
        1,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        53
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}