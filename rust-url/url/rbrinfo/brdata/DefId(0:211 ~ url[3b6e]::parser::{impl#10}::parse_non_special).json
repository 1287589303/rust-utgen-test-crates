{
  "name": "url::parser::{impl#10}::parse_non_special",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": false,
  "loc": "url/src/parser.rs:472:5:506:6",
  "doc": "/// Scheme other than file, http, https, ws, ws, ftp.\n",
  "code": [
    "fn parse_non_special(",
    "    mut self,",
    "    input: Input<'_>,",
    "    scheme_type: SchemeType,",
    "    scheme_end: u32,",
    ") -> ParseResult<Url> {",
    "    // path or authority state (",
    "    if let Some(input) = input.split_prefix(\"//\") {",
    "        return self.after_double_slash(input, scheme_type, scheme_end);",
    "    }",
    "    // Anarchist URL (no authority)",
    "    let path_start = to_u32(self.serialization.len())?;",
    "    let username_end = path_start;",
    "    let host_start = path_start;",
    "    let host_end = path_start;",
    "    let host = HostInternal::None;",
    "    let port = None;",
    "    let remaining = if let Some(input) = input.split_prefix('/') {",
    "        self.serialization.push('/');",
    "        self.parse_path(scheme_type, &mut false, path_start as usize, input)",
    "    } else {",
    "        self.parse_cannot_be_a_base_path(input)",
    "    };",
    "    self.with_query_and_fragment(",
    "        scheme_type,",
    "        scheme_end,",
    "        username_end,",
    "        host_start,",
    "        host_end,",
    "        host,",
    "        port,",
    "        path_start,",
    "        remaining,",
    "    )",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(input) = input.split_prefix(\"//\")",
          "norm": null,
          "value": "true",
          "line": 479,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Err/None",
          "line": 483,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(input) = input.split_prefix(\"//\")",
          "norm": null,
          "value": "true",
          "line": 479,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(input) = input.split_prefix('/')",
          "norm": null,
          "value": "true",
          "line": 489,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        11,
        14,
        19,
        20,
        21,
        22,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(input) = input.split_prefix(\"//\")",
          "norm": null,
          "value": "true",
          "line": 479,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 483,
          "bound": null
        },
        {
          "cond": "let Some(input) = input.split_prefix('/')",
          "norm": null,
          "value": "true",
          "line": 489,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        11,
        14,
        15,
        16,
        17,
        18,
        21,
        22,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(input) = input.split_prefix(\"//\")",
          "norm": null,
          "value": "true",
          "line": 479,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        23,
        24
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}