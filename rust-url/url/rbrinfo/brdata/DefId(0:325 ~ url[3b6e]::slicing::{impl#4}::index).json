{
  "name": "url::slicing::{impl#4}::index",
  "mod_info": {
    "name": "slicing",
    "loc": "url/src/lib.rs:220:1:220:13"
  },
  "visible": false,
  "loc": "url/src/slicing.rs:126:5:217:6",
  "doc": "",
  "code": [
    "fn index(&self, position: Position) -> usize {",
    "    match position {",
    "        Position::BeforeScheme => 0,",
    "",
    "        Position::AfterScheme => self.scheme_end as usize,",
    "",
    "        Position::BeforeUsername => {",
    "            if self.has_authority() {",
    "                self.scheme_end as usize + \"://\".len()",
    "            } else {",
    "                debug_assert!(self.byte_at(self.scheme_end) == b':');",
    "                debug_assert!(self.scheme_end + \":\".len() as u32 == self.username_end);",
    "                self.scheme_end as usize + \":\".len()",
    "            }",
    "        }",
    "",
    "        Position::AfterUsername => self.username_end as usize,",
    "",
    "        Position::BeforePassword => {",
    "            if self.has_authority() && self.byte_at(self.username_end) == b':' {",
    "                self.username_end as usize + \":\".len()",
    "            } else {",
    "                debug_assert!(self.username_end == self.host_start);",
    "                self.username_end as usize",
    "            }",
    "        }",
    "",
    "        Position::AfterPassword => {",
    "            if self.has_authority() && self.byte_at(self.username_end) == b':' {",
    "                debug_assert!(self.byte_at(self.host_start - \"@\".len() as u32) == b'@');",
    "                self.host_start as usize - \"@\".len()",
    "            } else {",
    "                debug_assert!(self.username_end == self.host_start);",
    "                self.host_start as usize",
    "            }",
    "        }",
    "",
    "        Position::BeforeHost => self.host_start as usize,",
    "",
    "        Position::AfterHost => self.host_end as usize,",
    "",
    "        Position::BeforePort => {",
    "            if self.port.is_some() {",
    "                debug_assert!(self.byte_at(self.host_end) == b':');",
    "                self.host_end as usize + \":\".len()",
    "            } else {",
    "                self.host_end as usize",
    "            }",
    "        }",
    "",
    "        Position::AfterPort => {",
    "            if let Some(port) = self.port {",
    "                debug_assert!(self.byte_at(self.host_end) == b':');",
    "                self.host_end as usize + \":\".len() + count_digits(port)",
    "            } else {",
    "                self.host_end as usize",
    "            }",
    "        }",
    "",
    "        Position::BeforePath => self.path_start as usize,",
    "",
    "        Position::AfterPath => match (self.query_start, self.fragment_start) {",
    "            (Some(q), _) => q as usize,",
    "            (None, Some(f)) => f as usize,",
    "            (None, None) => self.serialization.len(),",
    "        },",
    "",
    "        Position::BeforeQuery => match (self.query_start, self.fragment_start) {",
    "            (Some(q), _) => {",
    "                debug_assert!(self.byte_at(q) == b'?');",
    "                q as usize + \"?\".len()",
    "            }",
    "            (None, Some(f)) => f as usize,",
    "            (None, None) => self.serialization.len(),",
    "        },",
    "",
    "        Position::AfterQuery => match self.fragment_start {",
    "            None => self.serialization.len(),",
    "            Some(f) => f as usize,",
    "        },",
    "",
    "        Position::BeforeFragment => match self.fragment_start {",
    "            Some(f) => {",
    "                debug_assert!(self.byte_at(f) == b'#');",
    "                f as usize + \"#\".len()",
    "            }",
    "            None => self.serialization.len(),",
    "        },",
    "",
    "        Position::AfterFragment => self.serialization.len(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 40,
    "contra": 0,
    "min_set": 35
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "position matches Position::AfterFragment",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        17,
        161,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "position matches Position::BeforeFragment",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeFragment",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.fragment_start matches Some(f)",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "self.fragment_start matches Some(f)",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "self.byte_at(f) == b'#'",
          "norm": "b'#' == self.byte_at(f)",
          "value": "false",
          "line": 209,
          "bound": null
        }
      ],
      "ret": "f as usize + \"#\".len()",
      "path": [
        0,
        16,
        147,
        149,
        151,
        152,
        153,
        154,
        157,
        158,
        159,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "position matches Position::BeforeFragment",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeFragment",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.fragment_start matches Some(f)",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "self.fragment_start matches Some(f)",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        },
        {
          "cond": "self.byte_at(f) == b'#'",
          "norm": "b'#' == self.byte_at(f)",
          "value": "true",
          "line": 209,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        16,
        147,
        149,
        151,
        152,
        153,
        155,
        163
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "position matches Position::BeforeFragment",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeFragment",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.fragment_start matches None",
          "norm": null,
          "value": "true",
          "line": 207,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        16,
        147,
        150,
        160,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "position matches Position::AfterQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.fragment_start matches Some(f)",
          "norm": null,
          "value": "true",
          "line": 202,
          "bound": null
        }
      ],
      "ret": "f as usize",
      "path": [
        0,
        15,
        141,
        144,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "position matches Position::AfterQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.fragment_start matches None",
          "norm": null,
          "value": "true",
          "line": 202,
          "bound": null
        },
        {
          "cond": "self.fragment_start matches None",
          "norm": null,
          "value": "true",
          "line": 202,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        15,
        141,
        143,
        145,
        146,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "position matches Position::BeforeQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "(self.query_start, self.fragment_start) matches (Some(q), _)",
          "norm": null,
          "value": "true",
          "line": 193,
          "bound": null
        },
        {
          "cond": "self.byte_at(q) == b'?'",
          "norm": "b'?' == self.byte_at(q)",
          "value": "false",
          "line": 195,
          "bound": null
        }
      ],
      "ret": "q as usize + \"?\".len()",
      "path": [
        0,
        14,
        123,
        125,
        129,
        130,
        131,
        132,
        135,
        136,
        137,
        140,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "position matches Position::BeforeQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "(self.query_start, self.fragment_start) matches (Some(q), _)",
          "norm": null,
          "value": "true",
          "line": 193,
          "bound": null
        },
        {
          "cond": "self.byte_at(q) == b'?'",
          "norm": "b'?' == self.byte_at(q)",
          "value": "true",
          "line": 195,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        14,
        123,
        125,
        129,
        130,
        131,
        133,
        163
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "position matches Position::BeforeQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "(self.query_start, self.fragment_start) matches (None, Some(f))",
          "norm": null,
          "value": "true",
          "line": 193,
          "bound": null
        }
      ],
      "ret": "f as usize",
      "path": [
        0,
        14,
        123,
        126,
        127,
        138,
        140,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "position matches Position::BeforeQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeQuery",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "(self.query_start, self.fragment_start) matches (None, None)",
          "norm": null,
          "value": "true",
          "line": 199,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        14,
        123,
        126,
        128,
        139,
        140,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "position matches Position::AfterPath",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPath",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "(self.query_start, self.fragment_start) matches (Some(q), _)",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "q as usize",
      "path": [
        0,
        13,
        113,
        115,
        119,
        122,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "position matches Position::AfterPath",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPath",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "(self.query_start, self.fragment_start) matches (None, Some(f))",
          "norm": null,
          "value": "true",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "f as usize",
      "path": [
        0,
        13,
        113,
        116,
        117,
        120,
        122,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "position matches Position::AfterPath",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPath",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "(self.query_start, self.fragment_start) matches (None, None)",
          "norm": null,
          "value": "true",
          "line": 190,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        13,
        113,
        116,
        118,
        121,
        122,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "position matches Position::BeforePath",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforePath",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "self.path_start as usize",
      "path": [
        0,
        12,
        112,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "position matches Position::AfterPort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "let Some(port) = self.port",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        }
      ],
      "ret": "self.host_end as usize",
      "path": [
        0,
        11,
        98,
        111,
        162
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "position matches Position::AfterPort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "let Some(port) = self.port",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.host_end) == b':'",
          "norm": "b':' == self.byte_at(self.host_end)",
          "value": "false",
          "line": 178,
          "bound": null
        }
      ],
      "ret": "self.host_end as usize + \":\".len() + count_digits(port)",
      "path": [
        0,
        11,
        98,
        99,
        100,
        101,
        102,
        103,
        106,
        107,
        108,
        109,
        110,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "position matches Position::AfterPort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "let Some(port) = self.port",
          "norm": null,
          "value": "true",
          "line": 177,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.host_end) == b':'",
          "norm": "b':' == self.byte_at(self.host_end)",
          "value": "true",
          "line": 178,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        11,
        98,
        99,
        100,
        101,
        102,
        104,
        163
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "position matches Position::BeforePort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforePort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.port.is_some()",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.host_end) == b':'",
          "norm": "b':' == self.byte_at(self.host_end)",
          "value": "false",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "self.host_end as usize + \":\".len()",
      "path": [
        0,
        10,
        85,
        86,
        87,
        88,
        89,
        90,
        93,
        94,
        95,
        97,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 19,
      "conds": [
        {
          "cond": "position matches Position::BeforePort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforePort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.port.is_some()",
          "norm": null,
          "value": "true",
          "line": 168,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.host_end) == b':'",
          "norm": "b':' == self.byte_at(self.host_end)",
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        10,
        85,
        86,
        87,
        88,
        89,
        91,
        163
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 20,
      "conds": [
        {
          "cond": "position matches Position::BeforePort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforePort",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.port.is_some()",
          "norm": null,
          "value": "false",
          "line": 168,
          "bound": null
        }
      ],
      "ret": "self.host_end as usize",
      "path": [
        0,
        10,
        85,
        86,
        96,
        97,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 21,
      "conds": [
        {
          "cond": "position matches Position::AfterHost",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterHost",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "self.host_end as usize",
      "path": [
        0,
        9,
        84,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 22,
      "conds": [
        {
          "cond": "position matches Position::BeforeHost",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeHost",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "self.host_start as usize",
      "path": [
        0,
        8,
        83,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 23,
      "conds": [
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 154,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.host_start - \"@\".len() as u32) == b'@'",
          "norm": "b'@' == self.byte_at(self.host_start - \"@\".len() as u32)",
          "value": "false",
          "line": 155,
          "bound": null
        }
      ],
      "ret": "self.host_start as usize - \"@\".len()",
      "path": [
        0,
        7,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        73,
        82,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 24,
      "conds": [
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 154,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.host_start - \"@\".len() as u32) == b'@'",
          "norm": "b'@' == self.byte_at(self.host_start - \"@\".len() as u32)",
          "value": "true",
          "line": 155,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        163
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 25,
      "conds": [
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 154,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "true",
          "line": 154,
          "bound": null
        },
        {
          "cond": "self.username_end == self.host_start",
          "norm": "self.host_start == self.username_end",
          "value": "true",
          "line": 158,
          "bound": null
        }
      ],
      "ret": "self.host_start as usize",
      "path": [
        0,
        7,
        59,
        60,
        61,
        62,
        74,
        76,
        77,
        78,
        81,
        82,
        162
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 26,
      "conds": [
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 154,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "true",
          "line": 154,
          "bound": null
        },
        {
          "cond": "self.username_end == self.host_start",
          "norm": "self.host_start == self.username_end",
          "value": "false",
          "line": 158,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        59,
        60,
        61,
        62,
        74,
        76,
        77,
        79,
        163
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 27,
      "conds": [
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "self.username_end == self.host_start",
          "norm": "self.host_start == self.username_end",
          "value": "true",
          "line": 158,
          "bound": null
        }
      ],
      "ret": "self.host_start as usize",
      "path": [
        0,
        7,
        59,
        60,
        75,
        76,
        77,
        78,
        81,
        82,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 28,
      "conds": [
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterPassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 154,
          "bound": null
        },
        {
          "cond": "self.username_end == self.host_start",
          "norm": "self.host_start == self.username_end",
          "value": "false",
          "line": 158,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        7,
        59,
        60,
        75,
        76,
        77,
        79,
        163
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 29,
      "conds": [
        {
          "cond": "position matches Position::BeforePassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforePassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 145,
          "bound": null
        }
      ],
      "ret": "self.username_end as usize + \":\".len()",
      "path": [
        0,
        6,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        58,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 30,
      "conds": [
        {
          "cond": "position matches Position::BeforePassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforePassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "self.username_end == self.host_start",
          "norm": "self.host_start == self.username_end",
          "value": "true",
          "line": 148,
          "bound": null
        }
      ],
      "ret": "self.username_end as usize",
      "path": [
        0,
        6,
        43,
        44,
        45,
        46,
        50,
        52,
        53,
        54,
        57,
        58,
        162
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 31,
      "conds": [
        {
          "cond": "position matches Position::BeforePassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforePassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "true",
          "line": 145,
          "bound": null
        },
        {
          "cond": "self.username_end == self.host_start",
          "norm": "self.host_start == self.username_end",
          "value": "false",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        43,
        44,
        45,
        46,
        50,
        52,
        53,
        55,
        163
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 32,
      "conds": [
        {
          "cond": "position matches Position::BeforePassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforePassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "self.username_end == self.host_start",
          "norm": "self.host_start == self.username_end",
          "value": "true",
          "line": 148,
          "bound": null
        }
      ],
      "ret": "self.username_end as usize",
      "path": [
        0,
        6,
        43,
        44,
        51,
        52,
        53,
        54,
        57,
        58,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 33,
      "conds": [
        {
          "cond": "position matches Position::BeforePassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforePassword",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 145,
          "bound": null
        },
        {
          "cond": "self.username_end == self.host_start",
          "norm": "self.host_start == self.username_end",
          "value": "false",
          "line": 148,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        6,
        43,
        44,
        51,
        52,
        53,
        55,
        163
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 34,
      "conds": [
        {
          "cond": "position matches Position::AfterUsername",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterUsername",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "self.username_end as usize",
      "path": [
        0,
        5,
        42,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 35,
      "conds": [
        {
          "cond": "position matches Position::BeforeUsername",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeUsername",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "true",
          "line": 133,
          "bound": null
        }
      ],
      "ret": "self.scheme_end as usize + \"://\".len()",
      "path": [
        0,
        4,
        20,
        21,
        22,
        23,
        24,
        41,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 36,
      "conds": [
        {
          "cond": "position matches Position::BeforeUsername",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeUsername",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 133,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 136,
          "bound": null
        },
        {
          "cond": "self.scheme_end + \":\".len() as u32 == self.username_end",
          "norm": null,
          "value": "true",
          "line": 137,
          "bound": null
        }
      ],
      "ret": "self.scheme_end as usize + \":\".len()",
      "path": [
        0,
        4,
        20,
        21,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        35,
        38,
        39,
        40,
        41,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 37,
      "conds": [
        {
          "cond": "position matches Position::BeforeUsername",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeUsername",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 133,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "false",
          "line": 136,
          "bound": null
        },
        {
          "cond": "self.scheme_end + \":\".len() as u32 == self.username_end",
          "norm": null,
          "value": "false",
          "line": 137,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        20,
        21,
        25,
        26,
        27,
        28,
        31,
        32,
        33,
        34,
        36,
        163
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 38,
      "conds": [
        {
          "cond": "position matches Position::BeforeUsername",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeUsername",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "self.has_authority()",
          "norm": null,
          "value": "false",
          "line": 133,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.scheme_end) == b':'",
          "norm": "b':' == self.byte_at(self.scheme_end)",
          "value": "true",
          "line": 136,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        20,
        21,
        25,
        26,
        27,
        29,
        163
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 39,
      "conds": [
        {
          "cond": "position matches Position::AfterScheme",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::AfterScheme",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "self.scheme_end as usize",
      "path": [
        0,
        3,
        19,
        162
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 40,
      "conds": [
        {
          "cond": "position matches Position::BeforeScheme",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        },
        {
          "cond": "position matches Position::BeforeScheme",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "0",
      "path": [
        0,
        2,
        18,
        162
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}