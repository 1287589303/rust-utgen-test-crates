{
  "name": "url::parser::{impl#10}::parse_host_and_port",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": false,
  "loc": "url/src/parser.rs:950:5:985:6",
  "doc": "",
  "code": [
    "fn parse_host_and_port<'i>(",
    "    &mut self,",
    "    input: Input<'i>,",
    "    scheme_end: u32,",
    "    scheme_type: SchemeType,",
    ") -> ParseResult<(u32, HostInternal, Option<u16>, Input<'i>)> {",
    "    let (host, remaining) = Parser::parse_host(input, scheme_type)?;",
    "    write!(&mut self.serialization, \"{}\", host).unwrap();",
    "    let host_end = to_u32(self.serialization.len())?;",
    "    if let Host::Domain(h) = &host {",
    "        if h.is_empty() {",
    "            // Port with an empty host",
    "            if remaining.starts_with(\":\") {",
    "                return Err(ParseError::EmptyHost);",
    "            }",
    "            if scheme_type.is_special() {",
    "                return Err(ParseError::EmptyHost);",
    "            }",
    "        }",
    "    };",
    "",
    "    let (port, remaining) = if let Some(remaining) = remaining.split_prefix(':') {",
    "        let scheme = || default_port(&self.serialization[..scheme_end as usize]);",
    "        let (port, remaining) = Parser::parse_port(remaining, scheme, self.context)?;",
    "        if let Some(port) = port {",
    "            self.serialization.push(':');",
    "            let mut buffer = [0u8; 5];",
    "            let port_str = fast_u16_to_str(&mut buffer, port);",
    "            self.serialization.push_str(port_str);",
    "        }",
    "        (port, remaining)",
    "    } else {",
    "        (None, remaining)",
    "    };",
    "    Ok((host_end, host.into(), port, remaining))",
    "}"
  ],
  "size": {
    "chain": 16,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Err/None",
          "line": 956,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        61,
        62
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Err/None",
          "line": 958,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        22,
        59,
        60,
        62
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "true",
          "line": 959,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, host.into(), port, remaining))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        23,
        36,
        37,
        54,
        55,
        56,
        57,
        62
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "true",
          "line": 959,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "Parser::parse_port(remaining, scheme, self.context)?",
          "norm": null,
          "value": "Err/None",
          "line": 973,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        23,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        59,
        60,
        62
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "true",
          "line": 959,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "Parser::parse_port(remaining, scheme, self.context)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "let Some(port) = port",
          "norm": null,
          "value": "true",
          "line": 974,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, host.into(), port, remaining))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        23,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        53,
        55,
        56,
        57,
        62
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "true",
          "line": 959,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "Parser::parse_port(remaining, scheme, self.context)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "let Some(port) = port",
          "norm": null,
          "value": "true",
          "line": 974,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, host.into(), port, remaining))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        23,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        48,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        62
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 960,
          "bound": null
        },
        {
          "cond": "remaining.starts_with(\":\")",
          "norm": null,
          "value": "true",
          "line": 962,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::EmptyHost)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        27,
        28,
        29,
        58,
        59,
        60,
        62
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 960,
          "bound": null
        },
        {
          "cond": "remaining.starts_with(\":\")",
          "norm": null,
          "value": "false",
          "line": 962,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "true",
          "line": 965,
          "bound": null
        }
      ],
      "ret": "Err(ParseError::EmptyHost)",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        32,
        58,
        59,
        60,
        62
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 960,
          "bound": null
        },
        {
          "cond": "remaining.starts_with(\":\")",
          "norm": null,
          "value": "false",
          "line": 962,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 965,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, host.into(), port, remaining))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        33,
        35,
        36,
        37,
        54,
        55,
        56,
        57,
        62
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 960,
          "bound": null
        },
        {
          "cond": "remaining.starts_with(\":\")",
          "norm": null,
          "value": "false",
          "line": 962,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 965,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "Parser::parse_port(remaining, scheme, self.context)?",
          "norm": null,
          "value": "Err/None",
          "line": 973,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        59,
        60,
        62
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 960,
          "bound": null
        },
        {
          "cond": "remaining.starts_with(\":\")",
          "norm": null,
          "value": "false",
          "line": 962,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 965,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "Parser::parse_port(remaining, scheme, self.context)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "let Some(port) = port",
          "norm": null,
          "value": "true",
          "line": 974,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, host.into(), port, remaining))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        53,
        55,
        56,
        57,
        62
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 960,
          "bound": null
        },
        {
          "cond": "remaining.starts_with(\":\")",
          "norm": null,
          "value": "false",
          "line": 962,
          "bound": null
        },
        {
          "cond": "scheme_type.is_special()",
          "norm": null,
          "value": "false",
          "line": 965,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "Parser::parse_port(remaining, scheme, self.context)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "let Some(port) = port",
          "norm": null,
          "value": "true",
          "line": 974,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, host.into(), port, remaining))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        27,
        28,
        30,
        31,
        33,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        48,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        62
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "false",
          "line": 960,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, host.into(), port, remaining))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        34,
        35,
        36,
        37,
        54,
        55,
        56,
        57,
        62
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "false",
          "line": 960,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "Parser::parse_port(remaining, scheme, self.context)?",
          "norm": null,
          "value": "Err/None",
          "line": 973,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        59,
        60,
        62
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "false",
          "line": 960,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "Parser::parse_port(remaining, scheme, self.context)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "let Some(port) = port",
          "norm": null,
          "value": "true",
          "line": 974,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, host.into(), port, remaining))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        47,
        53,
        55,
        56,
        57,
        62
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "Parser::parse_host(input, scheme_type)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 956,
          "bound": null
        },
        {
          "cond": "to_u32(self.serialization.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 958,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "false",
          "line": 960,
          "bound": null
        },
        {
          "cond": "let Some(remaining) = remaining.split_prefix(':')",
          "norm": null,
          "value": "true",
          "line": 971,
          "bound": null
        },
        {
          "cond": "Parser::parse_port(remaining, scheme, self.context)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 973,
          "bound": null
        },
        {
          "cond": "let Some(port) = port",
          "norm": null,
          "value": "true",
          "line": 974,
          "bound": null
        }
      ],
      "ret": "Ok((host_end, host.into(), port, remaining))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        24,
        25,
        26,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        44,
        48,
        49,
        50,
        51,
        52,
        53,
        55,
        56,
        57,
        62
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}