{
  "name": "url::{impl#1}::path_segments",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1429:5:1432:6",
  "doc": "/// Unless this URL is cannot-be-a-base,\n/// return an iterator of '/' slash-separated path segments,\n/// each as a percent-encoded ASCII string.\n///\n/// Return `None` for cannot-be-a-base URLs.\n///\n/// When `Some` is returned, the iterator always contains at least one string\n/// (which may be empty).\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n///\n/// # #[cfg(feature = \"std\")]\n/// # use std::error::Error;\n/// # #[cfg(not(feature = \"std\"))]\n/// # use core::error::Error;\n///\n/// # fn run() -> Result<(), Box<dyn Error>> {\n/// let url = Url::parse(\"https://example.com/foo/bar\")?;\n/// let mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\n/// assert_eq!(path_segments.next(), Some(\"foo\"));\n/// assert_eq!(path_segments.next(), Some(\"bar\"));\n/// assert_eq!(path_segments.next(), None);\n///\n/// let url = Url::parse(\"https://example.com\")?;\n/// let mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\n/// assert_eq!(path_segments.next(), Some(\"\"));\n/// assert_eq!(path_segments.next(), None);\n///\n/// let url = Url::parse(\"data:text/plain,HelloWorld\")?;\n/// assert!(url.path_segments().is_none());\n///\n/// let url = Url::parse(\"https://example.com/countries/viá»‡t nam\")?;\n/// let mut path_segments = url.path_segments().ok_or_else(|| \"cannot be base\")?;\n/// assert_eq!(path_segments.next(), Some(\"countries\"));\n/// assert_eq!(path_segments.next(), Some(\"vi%E1%BB%87t%20nam\"));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn path_segments(&self) -> Option<str::Split<'_, char>> {",
    "    let path = self.path();",
    "    path.strip_prefix('/').map(|remainder| remainder.split('/'))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}