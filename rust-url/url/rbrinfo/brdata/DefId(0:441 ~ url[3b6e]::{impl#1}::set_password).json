{
  "name": "url::{impl#1}::set_password",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:2193:5:2249:6",
  "doc": "/// Change this URLâ€™s password.\n///\n/// If this URL is cannot-be-a-base or does not have a host, do nothing and return `Err`.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::{Url, ParseError};\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"mailto:rmz@example.com\")?;\n/// let result = url.set_password(Some(\"secret_password\"));\n/// assert!(result.is_err());\n///\n/// let mut url = Url::parse(\"ftp://user1:secret1@example.com\")?;\n/// let result = url.set_password(Some(\"secret_password\"));\n/// assert_eq!(url.password(), Some(\"secret_password\"));\n///\n/// let mut url = Url::parse(\"ftp://user2:@example.com\")?;\n/// let result = url.set_password(Some(\"secret2\"));\n/// assert!(result.is_ok());\n/// assert_eq!(url.password(), Some(\"secret2\"));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn set_password(&mut self, password: Option<&str>) -> Result<(), ()> {",
    "    // has_host implies !cannot_be_a_base",
    "    if !self.has_host() || self.host() == Some(Host::Domain(\"\")) || self.scheme() == \"file\" {",
    "        return Err(());",
    "    }",
    "    let password = password.unwrap_or_default();",
    "    if !password.is_empty() {",
    "        let host_and_after = self.slice(self.host_start..).to_owned();",
    "        self.serialization.truncate(self.username_end as usize);",
    "        self.serialization.push(':');",
    "        self.serialization",
    "            .extend(utf8_percent_encode(password, USERINFO));",
    "        self.serialization.push('@');",
    "",
    "        let old_host_start = self.host_start;",
    "        let new_host_start = to_u32(self.serialization.len()).unwrap();",
    "        let adjust = |index: &mut u32| {",
    "            *index -= old_host_start;",
    "            *index += new_host_start;",
    "        };",
    "        self.host_start = new_host_start;",
    "        adjust(&mut self.host_end);",
    "        adjust(&mut self.path_start);",
    "        if let Some(ref mut index) = self.query_start {",
    "            adjust(index)",
    "        }",
    "        if let Some(ref mut index) = self.fragment_start {",
    "            adjust(index)",
    "        }",
    "",
    "        self.serialization.push_str(&host_and_after);",
    "    } else if self.byte_at(self.username_end) == b':' {",
    "        // If there is a password to remove",
    "        let has_username_or_password = self.byte_at(self.host_start - 1) == b'@';",
    "        debug_assert!(has_username_or_password);",
    "        let username_start = self.scheme_end + 3;",
    "        let empty_username = username_start == self.username_end;",
    "        let start = self.username_end; // Remove the ':'",
    "        let end = if empty_username {",
    "            self.host_start // Remove the '@' as well",
    "        } else {",
    "            self.host_start - 1 // Keep the '@' to separate the username from the host",
    "        };",
    "        self.serialization.drain(start as usize..end as usize);",
    "        let offset = end - start;",
    "        self.host_start -= offset;",
    "        self.host_end -= offset;",
    "        self.path_start -= offset;",
    "        if let Some(ref mut index) = self.query_start {",
    "            *index -= offset",
    "        }",
    "        if let Some(ref mut index) = self.fragment_start {",
    "            *index -= offset",
    "        }",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 17,
    "contra": 0,
    "min_set": 8
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "true",
          "line": 2195,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        11,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "true",
          "line": 2195,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 2224,
          "bound": null
        },
        {
          "cond": "has_username_or_password",
          "norm": null,
          "value": "true",
          "line": 2227,
          "bound": null
        },
        {
          "cond": "empty_username",
          "norm": null,
          "value": "true",
          "line": 2231,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2241,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2244,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        51,
        52,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        65,
        66,
        70,
        71,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 2224,
          "bound": null
        },
        {
          "cond": "has_username_or_password",
          "norm": null,
          "value": "true",
          "line": 2227,
          "bound": null
        },
        {
          "cond": "empty_username",
          "norm": null,
          "value": "true",
          "line": 2231,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2241,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2244,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        51,
        52,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        69,
        71,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 2224,
          "bound": null
        },
        {
          "cond": "has_username_or_password",
          "norm": null,
          "value": "true",
          "line": 2227,
          "bound": null
        },
        {
          "cond": "empty_username",
          "norm": null,
          "value": "true",
          "line": 2231,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2241,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2244,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        51,
        52,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        70,
        71,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 2224,
          "bound": null
        },
        {
          "cond": "has_username_or_password",
          "norm": null,
          "value": "true",
          "line": 2227,
          "bound": null
        },
        {
          "cond": "empty_username",
          "norm": null,
          "value": "true",
          "line": 2231,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2241,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2244,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        51,
        52,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 2224,
          "bound": null
        },
        {
          "cond": "has_username_or_password",
          "norm": null,
          "value": "true",
          "line": 2227,
          "bound": null
        },
        {
          "cond": "empty_username",
          "norm": null,
          "value": "false",
          "line": 2231,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2241,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2244,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        51,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        65,
        66,
        70,
        71,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 2224,
          "bound": null
        },
        {
          "cond": "has_username_or_password",
          "norm": null,
          "value": "true",
          "line": 2227,
          "bound": null
        },
        {
          "cond": "empty_username",
          "norm": null,
          "value": "false",
          "line": 2231,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2241,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2244,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        51,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        65,
        66,
        67,
        68,
        69,
        71,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 2224,
          "bound": null
        },
        {
          "cond": "has_username_or_password",
          "norm": null,
          "value": "true",
          "line": 2227,
          "bound": null
        },
        {
          "cond": "empty_username",
          "norm": null,
          "value": "false",
          "line": 2231,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2241,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2244,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        51,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        70,
        71,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 2224,
          "bound": null
        },
        {
          "cond": "has_username_or_password",
          "norm": null,
          "value": "true",
          "line": 2227,
          "bound": null
        },
        {
          "cond": "empty_username",
          "norm": null,
          "value": "false",
          "line": 2231,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2241,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2244,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        42,
        43,
        44,
        45,
        46,
        48,
        50,
        51,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        66,
        67,
        68,
        69,
        71,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "false",
          "line": 2224,
          "bound": null
        },
        {
          "cond": "has_username_or_password",
          "norm": null,
          "value": "false",
          "line": 2227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        42,
        43,
        44,
        45,
        46,
        47,
        77
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "true",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "self.byte_at(self.username_end) == b':'",
          "norm": "b':' == self.byte_at(self.username_end)",
          "value": "true",
          "line": 2224,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        42,
        72,
        73,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2216,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2219,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        32,
        33,
        37,
        38,
        39,
        40,
        41,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2216,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2219,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        32,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        41,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2216,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2219,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        33,
        37,
        38,
        39,
        40,
        41,
        74,
        75
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 2195,
          "bound": null
        },
        {
          "cond": "password.is_empty()",
          "norm": null,
          "value": "false",
          "line": 2199,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.query_start",
          "norm": null,
          "value": "true",
          "line": 2216,
          "bound": null
        },
        {
          "cond": "let Some(ref mut index) = self.fragment_start",
          "norm": null,
          "value": "true",
          "line": 2219,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        33,
        34,
        35,
        36,
        38,
        39,
        40,
        41,
        74,
        75
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 2195,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        11,
        75
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}