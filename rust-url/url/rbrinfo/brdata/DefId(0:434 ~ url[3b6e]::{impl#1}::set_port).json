{
  "name": "url::{impl#1}::set_port",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1875:5:1885:6",
  "doc": "/// Change this URLâ€™s port number.\n///\n/// Note that default port numbers are not reflected in the serialization.\n///\n/// If this URL is cannot-be-a-base, does not have a host, or has the `file` scheme;\n/// do nothing and return `Err`.\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n///\n/// # #[cfg(feature = \"std\")]\n/// # use std::error::Error;\n/// # #[cfg(not(feature = \"std\"))]\n/// # use core::error::Error;\n///\n/// # fn run() -> Result<(), Box<dyn Error>> {\n/// let mut url = Url::parse(\"ssh://example.net:2048/\")?;\n///\n/// url.set_port(Some(4096)).map_err(|_| \"cannot be base\")?;\n/// assert_eq!(url.as_str(), \"ssh://example.net:4096/\");\n///\n/// url.set_port(None).map_err(|_| \"cannot be base\")?;\n/// assert_eq!(url.as_str(), \"ssh://example.net/\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// Known default port numbers are not reflected:\n///\n/// ```rust\n/// use url::Url;\n///\n/// # #[cfg(feature = \"std\")]\n/// # use std::error::Error;\n/// # #[cfg(not(feature = \"std\"))]\n/// # use core::error::Error;\n///\n/// # fn run() -> Result<(), Box<dyn Error>> {\n/// let mut url = Url::parse(\"https://example.org/\")?;\n///\n/// url.set_port(Some(443)).map_err(|_| \"cannot be base\")?;\n/// assert!(url.port().is_none());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// Cannot set port for cannot-be-a-base URLs:\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"mailto:rms@example.net\")?;\n///\n/// let result = url.set_port(Some(80));\n/// assert!(result.is_err());\n///\n/// let result = url.set_port(None);\n/// assert!(result.is_err());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn set_port(&mut self, mut port: Option<u16>) -> Result<(), ()> {",
    "    // has_host implies !cannot_be_a_base",
    "    if !self.has_host() || self.host() == Some(Host::Domain(\"\")) || self.scheme() == \"file\" {",
    "        return Err(());",
    "    }",
    "    if port.is_some() && port == parser::default_port(self.scheme()) {",
    "        port = None",
    "    }",
    "    self.set_port_internal(port);",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "true",
          "line": 1877,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6,
        11,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "true",
          "line": 1877,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        10,
        11,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "port.is_some()",
          "norm": null,
          "value": "true",
          "line": 1880,
          "bound": null
        },
        {
          "cond": "port == parser::default_port(self.scheme())",
          "norm": "parser::default_port(self.scheme()) == port",
          "value": "true",
          "line": 1880,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "port.is_some()",
          "norm": null,
          "value": "true",
          "line": 1880,
          "bound": null
        },
        {
          "cond": "port == parser::default_port(self.scheme())",
          "norm": "parser::default_port(self.scheme()) == port",
          "value": "false",
          "line": 1880,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "true",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "self.host() == Some(Host::Domain(\"\"))",
          "norm": "Some(Host::Domain(\"\")) == self.host()",
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "self.scheme() == \"file\"",
          "norm": "\"file\" == self.scheme()",
          "value": "false",
          "line": 1877,
          "bound": null
        },
        {
          "cond": "port.is_some()",
          "norm": null,
          "value": "false",
          "line": 1880,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        4,
        5,
        7,
        8,
        9,
        12,
        13,
        20,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "self.has_host()",
          "norm": null,
          "value": "false",
          "line": 1877,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        11,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}