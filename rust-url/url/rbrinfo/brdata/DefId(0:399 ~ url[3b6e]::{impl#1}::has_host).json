{
  "name": "url::{impl#1}::has_host",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1116:5:1118:6",
  "doc": "/// Equivalent to `url.host().is_some()`.\n///\n/// # Examples\n///\n/// ```\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"ftp://rms@example.com\")?;\n/// assert!(url.has_host());\n///\n/// let url = Url::parse(\"unix:/run/foo.socket\")?;\n/// assert!(!url.has_host());\n///\n/// let url = Url::parse(\"data:text/plain,Stuff\")?;\n/// assert!(!url.has_host());\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn has_host(&self) -> bool {",
    "    !matches!(self.host, HostInternal::None)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.host matches HostInternal::None",
          "norm": null,
          "value": "false",
          "line": 1117,
          "bound": null
        },
        {
          "cond": "self.host matches _",
          "norm": null,
          "value": "true",
          "line": 459,
          "bound": null
        }
      ],
      "ret": "!matches!(self.host, HostInternal::None)",
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.host matches HostInternal::None",
          "norm": null,
          "value": "true",
          "line": 1117,
          "bound": null
        },
        {
          "cond": "self.host matches HostInternal::None",
          "norm": null,
          "value": "true",
          "line": 1117,
          "bound": null
        }
      ],
      "ret": "!matches!(self.host, HostInternal::None)",
      "path": [
        0,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}