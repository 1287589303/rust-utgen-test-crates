{
  "name": "url::path_segments::{impl#1}::clear",
  "mod_info": {
    "name": "path_segments",
    "loc": "url/src/lib.rs:219:1:219:19"
  },
  "visible": true,
  "loc": "url/src/path_segments.rs:101:5:104:6",
  "doc": "/// Remove all segments in the path, leaving the minimal `url.path() == \"/\"`.\n///\n/// Returns `&mut Self` so that method calls can be chained.\n///\n/// Example:\n///\n/// ```rust\n/// use url::Url;\n///\n/// # #[cfg(feature = \"std\")]\n/// # use std::error::Error;\n/// # #[cfg(not(feature = \"std\"))]\n/// # use core::error::Error;\n///\n/// # fn run() -> Result<(), Box<dyn Error>> {\n/// let mut url = Url::parse(\"https://github.com/servo/rust-url/\")?;\n/// url.path_segments_mut().map_err(|_| \"cannot be base\")?\n///     .clear().push(\"logout\");\n/// assert_eq!(url.as_str(), \"https://github.com/logout\");\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn clear(&mut self) -> &mut Self {",
    "    self.url.serialization.truncate(self.after_first_slash);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}