{
  "name": "url::{impl#1}::parse",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:340:5:342:6",
  "doc": "/// Parse an absolute URL from a string.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"https://example.net\")?;\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n///\n/// # Errors\n///\n/// If the function can not parse an absolute URL from the given string,\n/// a [`ParseError`] variant will be returned.\n///\n/// [`ParseError`]: enum.ParseError.html\n",
  "code": [
    "pub fn parse(input: &str) -> Result<Url, crate::ParseError> {",
    "    Url::options().parse(input)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}