{
  "name": "url::{impl#1}::query_pairs",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1496:5:1498:6",
  "doc": "/// Parse the URLâ€™s query string, if any, as `application/x-www-form-urlencoded`\n/// and return an iterator of (key, value) pairs.\n///\n/// # Examples\n///\n/// ```rust\n/// use std::borrow::Cow;\n///\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let url = Url::parse(\"https://example.com/products?page=2&sort=desc\")?;\n/// let mut pairs = url.query_pairs();\n///\n/// assert_eq!(pairs.count(), 2);\n///\n/// assert_eq!(pairs.next(), Some((Cow::Borrowed(\"page\"), Cow::Borrowed(\"2\"))));\n/// assert_eq!(pairs.next(), Some((Cow::Borrowed(\"sort\"), Cow::Borrowed(\"desc\"))));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn query_pairs(&self) -> form_urlencoded::Parse<'_> {",
    "    form_urlencoded::parse(self.query().unwrap_or(\"\").as_bytes())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}