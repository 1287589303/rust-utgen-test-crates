{
  "name": "url::quirks::set_hostname",
  "mod_info": {
    "name": "quirks",
    "loc": "url/src/lib.rs:223:1:223:16"
  },
  "visible": true,
  "loc": "url/src/quirks.rs:203:1:235:2",
  "doc": "/// Setter for <https://url.spec.whatwg.org/#dom-url-hostname>\n",
  "code": [
    "pub fn set_hostname(url: &mut Url, new_hostname: &str) -> Result<(), ()> {",
    "    if url.cannot_be_a_base() {",
    "        return Err(());",
    "    }",
    "    // Host parsing rules are strict we don't want to trim the input",
    "    let input = Input::new_no_trim(new_hostname);",
    "    let scheme_type = SchemeType::from(url.scheme());",
    "    if scheme_type == SchemeType::File && new_hostname.is_empty() {",
    "        url.set_host_internal(Host::Domain(String::new()), None);",
    "        return Ok(());",
    "    }",
    "",
    "    if let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type) {",
    "        if let Host::Domain(h) = &host {",
    "            if h.is_empty() {",
    "                // Empty host on special not file url",
    "                if SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
    "                    // Port with an empty host",
    "                    ||!port(url).is_empty()",
    "                    // Empty host that includes credentials",
    "                    || !url.username().is_empty()",
    "                    || !url.password().unwrap_or(\"\").is_empty()",
    "                {",
    "                    return Err(());",
    "                }",
    "            }",
    "        }",
    "        url.set_host_internal(host, None);",
    "        Ok(())",
    "    } else {",
    "        Err(())",
    "    }",
    "}"
  ],
  "size": {
    "chain": 18,
    "contra": 0,
    "min_set": 10
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "true",
          "line": 204,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        2,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "new_hostname.is_empty()",
          "norm": null,
          "value": "true",
          "line": 210,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "new_hostname.is_empty()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        48,
        50,
        51,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "new_hostname.is_empty()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        45,
        46,
        47,
        49,
        50,
        51,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "new_hostname.is_empty()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
          "norm": "SchemeType::SpecialNotFile == SchemeType::from(url.scheme())",
          "value": "true",
          "line": 219,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        42,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "new_hostname.is_empty()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
          "norm": "SchemeType::SpecialNotFile == SchemeType::from(url.scheme())",
          "value": "false",
          "line": 219,
          "bound": null
        },
        {
          "cond": "port(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "url.username().is_empty()",
          "norm": null,
          "value": "true",
          "line": 223,
          "bound": null
        },
        {
          "cond": "url.password().unwrap_or(\"\").is_empty()",
          "norm": null,
          "value": "true",
          "line": 224,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        33,
        34,
        35,
        37,
        38,
        39,
        40,
        44,
        46,
        47,
        49,
        50,
        51,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "new_hostname.is_empty()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
          "norm": "SchemeType::SpecialNotFile == SchemeType::from(url.scheme())",
          "value": "false",
          "line": 219,
          "bound": null
        },
        {
          "cond": "port(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "url.username().is_empty()",
          "norm": null,
          "value": "true",
          "line": 223,
          "bound": null
        },
        {
          "cond": "url.password().unwrap_or(\"\").is_empty()",
          "norm": null,
          "value": "false",
          "line": 224,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        33,
        34,
        35,
        37,
        38,
        39,
        41,
        42,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "new_hostname.is_empty()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
          "norm": "SchemeType::SpecialNotFile == SchemeType::from(url.scheme())",
          "value": "false",
          "line": 219,
          "bound": null
        },
        {
          "cond": "port(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "url.username().is_empty()",
          "norm": null,
          "value": "false",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        33,
        34,
        36,
        42,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "new_hostname.is_empty()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
          "norm": "SchemeType::SpecialNotFile == SchemeType::from(url.scheme())",
          "value": "false",
          "line": 219,
          "bound": null
        },
        {
          "cond": "port(url).is_empty()",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        32,
        42,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "true",
          "line": 210,
          "bound": null
        },
        {
          "cond": "new_hostname.is_empty()",
          "norm": null,
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        43,
        44,
        46,
        47,
        49,
        50,
        51,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "true",
          "line": 215,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        48,
        50,
        51,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "true",
          "line": 216,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        45,
        46,
        47,
        49,
        50,
        51,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
          "norm": "SchemeType::SpecialNotFile == SchemeType::from(url.scheme())",
          "value": "true",
          "line": 219,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        42,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
          "norm": "SchemeType::SpecialNotFile == SchemeType::from(url.scheme())",
          "value": "false",
          "line": 219,
          "bound": null
        },
        {
          "cond": "port(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "url.username().is_empty()",
          "norm": null,
          "value": "true",
          "line": 223,
          "bound": null
        },
        {
          "cond": "url.password().unwrap_or(\"\").is_empty()",
          "norm": null,
          "value": "true",
          "line": 224,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        33,
        34,
        35,
        37,
        38,
        39,
        40,
        44,
        46,
        47,
        49,
        50,
        51,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 15,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
          "norm": "SchemeType::SpecialNotFile == SchemeType::from(url.scheme())",
          "value": "false",
          "line": 219,
          "bound": null
        },
        {
          "cond": "port(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "url.username().is_empty()",
          "norm": null,
          "value": "true",
          "line": 223,
          "bound": null
        },
        {
          "cond": "url.password().unwrap_or(\"\").is_empty()",
          "norm": null,
          "value": "false",
          "line": 224,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        33,
        34,
        35,
        37,
        38,
        39,
        41,
        42,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 16,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
          "norm": "SchemeType::SpecialNotFile == SchemeType::from(url.scheme())",
          "value": "false",
          "line": 219,
          "bound": null
        },
        {
          "cond": "port(url).is_empty()",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        },
        {
          "cond": "url.username().is_empty()",
          "norm": null,
          "value": "false",
          "line": 223,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        31,
        33,
        34,
        36,
        42,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 17,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "SchemeType::from(url.scheme()) == SchemeType::SpecialNotFile",
          "norm": "SchemeType::SpecialNotFile == SchemeType::from(url.scheme())",
          "value": "false",
          "line": 219,
          "bound": null
        },
        {
          "cond": "port(url).is_empty()",
          "norm": null,
          "value": "false",
          "line": 221,
          "bound": null
        }
      ],
      "ret": "Err(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        28,
        29,
        30,
        32,
        42,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 18,
      "conds": [
        {
          "cond": "url.cannot_be_a_base()",
          "norm": null,
          "value": "false",
          "line": 204,
          "bound": null
        },
        {
          "cond": "scheme_type == SchemeType::File",
          "norm": "SchemeType::File == scheme_type",
          "value": "false",
          "line": 210,
          "bound": null
        },
        {
          "cond": "let Ok((host, _remaining)) = Parser::parse_host(input, scheme_type)",
          "norm": null,
          "value": "false",
          "line": 215,
          "bound": null
        },
        {
          "cond": "let Host::Domain(h) = &host",
          "norm": null,
          "value": "false",
          "line": 216,
          "bound": null
        },
        {
          "cond": "h.is_empty()",
          "norm": null,
          "value": "false",
          "line": 217,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        43,
        44,
        46,
        47,
        49,
        50,
        51,
        54
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}