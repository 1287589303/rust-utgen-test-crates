{
  "name": "url::{impl#1}::set_path",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1754:5:1777:6",
  "doc": "/// Change this URLâ€™s path.\n///\n/// # Examples\n///\n/// ```rust\n/// use url::Url;\n/// # use url::ParseError;\n///\n/// # fn run() -> Result<(), ParseError> {\n/// let mut url = Url::parse(\"https://example.com\")?;\n/// url.set_path(\"api/comments\");\n/// assert_eq!(url.as_str(), \"https://example.com/api/comments\");\n/// assert_eq!(url.path(), \"/api/comments\");\n///\n/// let mut url = Url::parse(\"https://example.com/api\")?;\n/// url.set_path(\"data/report.csv\");\n/// assert_eq!(url.as_str(), \"https://example.com/data/report.csv\");\n/// assert_eq!(url.path(), \"/data/report.csv\");\n///\n/// // `set_path` percent-encodes the given string if it's not already percent-encoded.\n/// let mut url = Url::parse(\"https://example.com\")?;\n/// url.set_path(\"api/some comments\");\n/// assert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\n/// assert_eq!(url.path(), \"/api/some%20comments\");\n///\n/// // `set_path` will not double percent-encode the string if it's already percent-encoded.\n/// let mut url = Url::parse(\"https://example.com\")?;\n/// url.set_path(\"api/some%20comments\");\n/// assert_eq!(url.as_str(), \"https://example.com/api/some%20comments\");\n/// assert_eq!(url.path(), \"/api/some%20comments\");\n///\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n",
  "code": [
    "pub fn set_path(&mut self, mut path: &str) {",
    "    let after_path = self.take_after_path();",
    "    let old_after_path_pos = to_u32(self.serialization.len()).unwrap();",
    "    let cannot_be_a_base = self.cannot_be_a_base();",
    "    let scheme_type = SchemeType::from(self.scheme());",
    "    self.serialization.truncate(self.path_start as usize);",
    "    self.mutate(|parser| {",
    "        if cannot_be_a_base {",
    "            if path.starts_with('/') {",
    "                parser.serialization.push_str(\"%2F\");",
    "                path = &path[1..];",
    "            }",
    "            parser.parse_cannot_be_a_base_path(parser::Input::new_no_trim(path));",
    "        } else {",
    "            let mut has_host = true; // FIXME",
    "            parser.parse_path_start(",
    "                scheme_type,",
    "                &mut has_host,",
    "                parser::Input::new_no_trim(path),",
    "            );",
    "        }",
    "    });",
    "    self.restore_after_path(old_after_path_pos, &after_path);",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}