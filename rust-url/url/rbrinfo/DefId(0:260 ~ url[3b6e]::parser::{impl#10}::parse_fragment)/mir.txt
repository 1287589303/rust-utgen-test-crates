bb0
  0: StorageLive(_3)
    SourceInfo(url/src/parser.rs:1683:13-1683:22)
  1: StorageLive(_4)
    SourceInfo(url/src/parser.rs:1684:13-1684:18)
  2: _4 = move _2
    SourceInfo(url/src/parser.rs:1684:13-1684:18)
  3: StorageLive(_5)
    SourceInfo(url/src/parser.rs:1685:27-1685:44)
  4: _5 = ((*_1).3: core::option::Option<&dyn core::ops::Fn(parser::SyntaxViolation)>)
    SourceInfo(url/src/parser.rs:1685:27-1685:44)
  5: _3 = parser::Parser::<'a>::parse_fragment::FragmentPartIter::<'_, '_> { input: move _4, violation_fn: move _5 }
    SourceInfo(url/src/parser.rs:1683:25-1686:10)
  6: StorageDead(_5)
    SourceInfo(url/src/parser.rs:1686:9-1686:10)
  7: StorageDead(_4)
    SourceInfo(url/src/parser.rs:1686:9-1686:10)
  8: FakeRead(ForLet(None), _3)
    SourceInfo(url/src/parser.rs:1683:13-1683:22)
  9: StorageLive(_6)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  10: StorageLive(_7)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  11: _7 = move _3
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1688:21-1688:30)
      kind: _6 = <parser::Parser<'a>::parse_fragment::FragmentPartIter<'_, '_> as core::iter::IntoIterator>::into_iter(move _7) -> [return: bb1, unwind: bb11]
  }
  preds []
  succs [bb1, bb11]

bb1
  0: StorageDead(_7)
    SourceInfo(url/src/parser.rs:1688:29-1688:30)
  1: PlaceMention(_6)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  2: StorageLive(_8)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  3: _8 = move _6
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1688:9-1691:10)
      kind: goto -> bb2
  }
  preds [bb0]
  succs [bb2]

bb2
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1688:9-1691:10)
      kind: falseUnwind -> [real: bb3, unwind: bb11]
  }
  preds [bb1, bb10]
  succs [bb3, bb11]

bb3
  0: StorageLive(_10)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  1: StorageLive(_11)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  2: StorageLive(_12)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  3: StorageLive(_13)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  4: _13 = &mut _8
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  5: _12 = &mut (*_13)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1688:21-1688:30)
      kind: _11 = <parser::Parser<'a>::parse_fragment::FragmentPartIter<'_, '_> as core::iter::Iterator>::next(move _12) -> [return: bb4, unwind: bb11]
  }
  preds [bb2]
  succs [bb4, bb11]

bb4
  0: StorageDead(_12)
    SourceInfo(url/src/parser.rs:1688:29-1688:30)
  1: PlaceMention(_11)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  2: _14 = discriminant(_11)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1688:21-1688:30)
      kind: switchInt(move _14) -> [0: bb6, 1: bb7, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6, bb7]

bb5
  0: FakeRead(ForMatchedPlace(None), _11)
    SourceInfo(url/src/parser.rs:1688:21-1688:30)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1688:21-1688:30)
      kind: unreachable
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1688:9-1691:10)
      kind: falseEdge -> [real: bb8, imaginary: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb7
  0: StorageLive(_16)
    SourceInfo(url/src/parser.rs:1688:13-1688:17)
  1: _16 = ((_11 as Some).0: &str)
    SourceInfo(url/src/parser.rs:1688:13-1688:17)
  2: StorageLive(_17)
    SourceInfo(url/src/parser.rs:1689:13-1690:61)
  3: StorageLive(_18)
    SourceInfo(url/src/parser.rs:1689:13-1689:31)
  4: _18 = &mut ((*_1).0: std::string::String)
    SourceInfo(url/src/parser.rs:1689:13-1689:31)
  5: StorageLive(_19)
    SourceInfo(url/src/parser.rs:1690:25-1690:60)
  6: StorageLive(_20)
    SourceInfo(url/src/parser.rs:1690:45-1690:49)
  7: _20 = &(*_16)
    SourceInfo(url/src/parser.rs:1690:45-1690:49)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1690:25-1690:60)
      kind: _19 = percent_encoding::utf8_percent_encode(move _20, const parser::FRAGMENT) -> [return: bb9, unwind: bb11]
  }
  preds [bb4, bb6]
  succs [bb9, bb11]

bb8
  0: _0 = const ()
    SourceInfo(url/src/parser.rs:1688:9-1691:10)
  1: StorageDead(_13)
    SourceInfo(url/src/parser.rs:1691:9-1691:10)
  2: StorageDead(_11)
    SourceInfo(url/src/parser.rs:1691:9-1691:10)
  3: StorageDead(_10)
    SourceInfo(url/src/parser.rs:1691:9-1691:10)
  4: StorageDead(_8)
    SourceInfo(url/src/parser.rs:1691:9-1691:10)
  5: StorageDead(_6)
    SourceInfo(url/src/parser.rs:1691:9-1691:10)
  6: StorageDead(_3)
    SourceInfo(url/src/parser.rs:1692:5-1692:6)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1692:6-1692:6)
      kind: return
  }
  preds [bb6]
  succs []

bb9
  0: StorageDead(_20)
    SourceInfo(url/src/parser.rs:1690:59-1690:60)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1689:13-1690:61)
      kind: _17 = <std::string::String as core::iter::Extend<&str>>::extend::<percent_encoding::PercentEncode<'_>>(move _18, move _19) -> [return: bb10, unwind: bb11]
  }
  preds [bb7]
  succs [bb10, bb11]

bb10
  0: StorageDead(_19)
    SourceInfo(url/src/parser.rs:1690:60-1690:61)
  1: StorageDead(_18)
    SourceInfo(url/src/parser.rs:1690:60-1690:61)
  2: StorageDead(_17)
    SourceInfo(url/src/parser.rs:1690:61-1690:62)
  3: _10 = const ()
    SourceInfo(url/src/parser.rs:1688:31-1691:10)
  4: StorageDead(_16)
    SourceInfo(url/src/parser.rs:1691:9-1691:10)
  5: StorageDead(_13)
    SourceInfo(url/src/parser.rs:1691:9-1691:10)
  6: StorageDead(_11)
    SourceInfo(url/src/parser.rs:1691:9-1691:10)
  7: StorageDead(_10)
    SourceInfo(url/src/parser.rs:1691:9-1691:10)
  8: _9 = const ()
    SourceInfo(url/src/parser.rs:1688:9-1691:10)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1688:9-1691:10)
      kind: goto -> bb2
  }
  preds [bb9]
  succs [bb2]

bb11
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1643:5-1692:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb7, bb9]
  succs []

