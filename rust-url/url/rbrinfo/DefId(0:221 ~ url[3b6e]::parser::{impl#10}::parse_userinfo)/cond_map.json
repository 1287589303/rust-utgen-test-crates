{
  "url/src/parser.rs:932:21:932:33": [
    {
      "Bool": {
        "Other": "has_password"
      }
    }
  ],
  "url/src/parser.rs:925:37:925:70": [
    {
      "Try": "to_u32(self.serialization.len())?"
    }
  ],
  "url/src/parser.rs:912:28:912:61": [
    {
      "Try": "to_u32(self.serialization.len())?"
    }
  ],
  "url/src/parser.rs:908:24:908:32": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "c == '/'",
          "lhs": "c",
          "rhs": "'/'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/parser.rs:908:48:908:56": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "c == '#'",
          "lhs": "c",
          "rhs": "'#'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/parser.rs:885:19:885:20": [
    {
      "Match": {
        "match_source": "url/src/parser.rs:885:19:885:20",
        "match_str": "c",
        "match_kind": "Other",
        "arms": {
          "url/src/parser.rs:895:17:895:21": {
            "pat": {
              "pat_str": "'\\\\'",
              "kind": {
                "Other": 92
              }
            },
            "guard": {
              "url/src/parser.rs:895:25:895:49": [
                {
                  "Bool": {
                    "Other": "scheme_type.is_special()"
                  }
                }
              ]
            },
            "body_source": "url/src/parser.rs:895:53:895:58"
          },
          "url/src/parser.rs:894:29:894:32": {
            "pat": {
              "pat_str": "'#'",
              "kind": {
                "Other": 35
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:894:36:894:41"
          },
          "url/src/parser.rs:894:23:894:26": {
            "pat": {
              "pat_str": "'?'",
              "kind": {
                "Other": 63
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:894:36:894:41"
          },
          "url/src/parser.rs:886:17:886:20": {
            "pat": {
              "pat_str": "'@'",
              "kind": {
                "Other": 64
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:886:24:893:18"
          },
          "url/src/parser.rs:896:17:896:18": {
            "pat": {
              "pat_str": "_",
              "kind": "Wild"
            },
            "guard": null,
            "body_source": "url/src/parser.rs:896:22:896:24"
          },
          "url/src/parser.rs:894:17:894:20": {
            "pat": {
              "pat_str": "'/'",
              "kind": {
                "Other": 47
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:894:36:894:41"
          }
        }
      }
    }
  ],
  "url/src/parser.rs:908:36:908:44": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "c == '?'",
          "lhs": "c",
          "rhs": "'?'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/parser.rs:907:20:907:62": [
    {
      "Bool": {
        "Other": "let (Some(c), _) = remaining.split_first()"
      }
    }
  ],
  "url/src/parser.rs:908:89:908:98": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "c == '\\\\'",
          "lhs": "c",
          "rhs": "'\\\\'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/parser.rs:923:16:923:24": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "c == ':'",
          "lhs": "c",
          "rhs": "':'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/parser.rs:940:34:940:46": [
    {
      "Match": {
        "match_source": "url/src/parser.rs:940:34:940:46",
        "match_str": "username_end",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "url/src/parser.rs:941:13:941:20": {
            "pat": {
              "pat_str": "Some(i)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:941:24:941:25"
          },
          "url/src/parser.rs:942:13:942:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:942:21:942:54"
          }
        }
      }
    }
  ],
  "url/src/parser.rs:944:28:944:40": [
    {
      "Bool": {
        "Other": "has_password"
      }
    }
  ],
  "url/src/parser.rs:923:28:923:50": [
    {
      "Bool": {
        "Other": "username_end.is_none()"
      }
    }
  ],
  "url/src/parser.rs:920:15:920:38": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "userinfo_char_count > 0",
          "lhs": "userinfo_char_count",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/parser.rs:927:20:927:43": [
    {
      "Bool": {
        "Binary": {
          "kind": "Gt",
          "expr": "userinfo_char_count > 0",
          "lhs": "userinfo_char_count",
          "rhs": "0",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/parser.rs:884:15:884:45": [
    {
      "Bool": {
        "Other": "let Some(c) = remaining.next()"
      }
    }
  ],
  "url/src/parser.rs:908:61:908:85": [
    {
      "Bool": {
        "Other": "scheme_type.is_special()"
      }
    }
  ],
  "url/src/parser.rs:944:12:944:24": [
    {
      "Bool": {
        "Other": "has_username"
      }
    }
  ],
  "url/src/parser.rs:887:24:887:41": [
    {
      "Bool": {
        "Other": "last_at.is_some()"
      }
    }
  ],
  "url/src/parser.rs:895:25:895:49": [
    {
      "Bool": {
        "Other": "scheme_type.is_special()"
      }
    }
  ],
  "url/src/parser.rs:942:21:942:54": [
    {
      "Try": "to_u32(self.serialization.len())?"
    }
  ],
  "url/src/parser.rs:901:32:901:65": [
    {
      "Try": "to_u32(self.serialization.len())?"
    }
  ],
  "url/src/parser.rs:900:58:900:65": [
    {
      "Match": {
        "match_source": "url/src/parser.rs:900:58:900:65",
        "match_str": "last_at",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "url/src/parser.rs:914:13:914:20": {
            "pat": {
              "pat_str": "Some(x)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:914:24:914:25"
          },
          "url/src/parser.rs:901:13:901:17": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:901:21:901:74"
          },
          "url/src/parser.rs:902:13:902:33": {
            "pat": {
              "pat_str": "Some((0, remaining))",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/parser.rs:902:37:913:14"
          }
        }
      }
    }
  ]
}