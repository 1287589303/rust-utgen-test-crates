{
  "url/src/lib.rs:2015:12:2015:33": [
    {
      "Bool": {
        "Other": "let Some(host) = host"
      }
    }
  ],
  "url/src/lib.rs:2022:23:2022:37": [
    {
      "Match": {
        "match_source": "url/src/lib.rs:2022:23:2022:37",
        "match_str": "host.find(':')",
        "match_kind": {
          "Enum": [
            "None",
            "Some"
          ]
        },
        "arms": {
          "url/src/lib.rs:2023:21:2023:28": {
            "pat": {
              "pat_str": "Some(0)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/lib.rs:2023:32:2026:22"
          },
          "url/src/lib.rs:2028:21:2028:38": {
            "pat": {
              "pat_str": "Some(colon_index)",
              "kind": {
                "Enum": 1
              }
            },
            "guard": null,
            "body_source": "url/src/lib.rs:2028:42:2030:22"
          },
          "url/src/lib.rs:2031:21:2031:25": {
            "pat": {
              "pat_str": "None",
              "kind": {
                "Enum": 0
              }
            },
            "guard": null,
            "body_source": "url/src/lib.rs:2031:29:2031:31"
          }
        }
      }
    }
  ],
  "url/src/lib.rs:2016:16:2016:31": [
    {
      "Bool": {
        "Other": "host.is_empty()"
      }
    }
  ],
  "url/src/lib.rs:2042:23:2042:75": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.serialization.len() == self.path_start as usize",
          "lhs": "self.serialization.len()",
          "rhs": "self.path_start as usize",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/lib.rs:2035:40:2035:65": [
    {
      "Try": "Host::parse(host_substr)?"
    }
  ],
  "url/src/lib.rs:2046:27:2046:64": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.byte_at(self.path_start) == b'/'",
          "lhs": "self.byte_at(self.path_start)",
          "rhs": "b'/'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/lib.rs:2034:16:2034:60": [
    {
      "Bool": {
        "Other": "SchemeType::from(self.scheme()).is_special()"
      }
    }
  ],
  "url/src/lib.rs:2051:17:2051:36": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.scheme_end + 1",
          "lhs": "self.scheme_end",
          "rhs": "1",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/lib.rs:2039:19:2039:34": [
    {
      "Bool": {
        "Other": "self.has_host()"
      }
    }
  ],
  "/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12:316:42": [
    {
      "Bool": {
        "Other": "$crate::cfg!(debug_assertions)"
      }
    }
  ],
  "url/src/lib.rs:2045:27:2045:64": [
    {
      "Bool": {
        "Binary": {
          "kind": "Eq",
          "expr": "self.byte_at(self.scheme_end) == b':'",
          "lhs": "self.byte_at(self.scheme_end)",
          "rhs": "b':'",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/lib.rs:2056:26:2056:58": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.path_start - new_path_start",
          "lhs": "self.path_start",
          "rhs": "new_path_start",
          "cmp_with_int": false
        }
      }
    }
  ],
  "url/src/lib.rs:2049:17:2049:36": [
    {
      "Bool": {
        "Binary": {
          "kind": "Other",
          "expr": "self.scheme_end + 3",
          "lhs": "self.scheme_end",
          "rhs": "3",
          "cmp_with_int": true
        }
      }
    }
  ],
  "url/src/lib.rs:2065:16:2065:61": [
    {
      "Bool": {
        "Other": "let Some(ref mut index) = self.fragment_start"
      }
    }
  ],
  "url/src/lib.rs:2048:37:2048:58": [
    {
      "Bool": {
        "Other": "scheme_type.is_file()"
      }
    }
  ],
  "url/src/lib.rs:2040:16:2040:40": [
    {
      "Bool": {
        "Other": "scheme_type.is_special()"
      }
    }
  ],
  "url/src/lib.rs:2062:16:2062:58": [
    {
      "Bool": {
        "Other": "let Some(ref mut index) = self.query_start"
      }
    }
  ],
  "url/src/lib.rs:2021:43:2021:62": [
    {
      "Bool": {
        "Other": "host.ends_with(']')"
      }
    }
  ],
  "url/src/lib.rs:2021:17:2021:38": [
    {
      "Bool": {
        "Other": "host.starts_with('[')"
      }
    }
  ],
  "url/src/lib.rs:2009:12:2009:35": [
    {
      "Bool": {
        "Other": "self.cannot_be_a_base()"
      }
    }
  ],
  "url/src/lib.rs:2016:35:2016:59": [
    {
      "Bool": {
        "Other": "scheme_type.is_special()"
      }
    }
  ],
  "url/src/lib.rs:2016:64:2016:85": [
    {
      "Bool": {
        "Other": "scheme_type.is_file()"
      }
    }
  ],
  "url/src/lib.rs:2037:40:2037:72": [
    {
      "Try": "Host::parse_opaque(host_substr)?"
    }
  ],
  "url/src/lib.rs:2040:45:2040:66": [
    {
      "Bool": {
        "Other": "scheme_type.is_file()"
      }
    }
  ]
}