bb0
  0: PlaceMention((*_1))
    SourceInfo(url/src/host.rs:70:15-70:20)
  1: _2 = discriminant((*_1))
    SourceInfo(url/src/host.rs:70:15-70:20)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:70:9-70:20)
      kind: switchInt(move _2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(url/src/host.rs:70:15-70:20)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:70:15-70:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(url/src/host.rs:71:13-71:33)
      kind: falseEdge -> [real: bb5, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb5]

bb3
  Terminator {
      source_info: SourceInfo(url/src/host.rs:72:13-72:32)
      kind: falseEdge -> [real: bb8, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb8]

bb4
  0: StorageLive(_8)
    SourceInfo(url/src/host.rs:73:24-73:31)
  1: _8 = (((*_1) as Ipv6).0: core::net::Ipv6Addr)
    SourceInfo(url/src/host.rs:73:24-73:31)
  2: StorageLive(_9)
    SourceInfo(url/src/host.rs:73:47-73:54)
  3: _9 = _8
    SourceInfo(url/src/host.rs:73:47-73:54)
  4: _0 = host::Host::Ipv6(move _9)
    SourceInfo(url/src/host.rs:73:36-73:55)
  5: StorageDead(_9)
    SourceInfo(url/src/host.rs:73:54-73:55)
  6: StorageDead(_8)
    SourceInfo(url/src/host.rs:73:54-73:55)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:73:54-73:55)
      kind: goto -> bb9
  }
  preds [bb0, bb3]
  succs [bb9]

bb5
  0: StorageLive(_3)
    SourceInfo(url/src/host.rs:71:26-71:32)
  1: _3 = (((*_1) as Domain).0: &str)
    SourceInfo(url/src/host.rs:71:26-71:32)
  2: StorageLive(_4)
    SourceInfo(url/src/host.rs:71:50-71:67)
  3: StorageLive(_5)
    SourceInfo(url/src/host.rs:71:50-71:56)
  4: _5 = &(*_3)
    SourceInfo(url/src/host.rs:71:50-71:56)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:71:50-71:67)
      kind: _4 = <str as std::borrow::ToOwned>::to_owned(move _5) -> [return: bb6, unwind: bb10]
  }
  preds [bb2]
  succs [bb6, bb10]

bb6
  0: StorageDead(_5)
    SourceInfo(url/src/host.rs:71:66-71:67)
  1: _0 = host::Host::Domain(move _4)
    SourceInfo(url/src/host.rs:71:37-71:68)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:71:67-71:68)
      kind: drop(_4) -> [return: bb7, unwind: bb10]
  }
  preds [bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_4)
    SourceInfo(url/src/host.rs:71:67-71:68)
  1: StorageDead(_3)
    SourceInfo(url/src/host.rs:71:67-71:68)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:71:67-71:68)
      kind: goto -> bb9
  }
  preds [bb6]
  succs [bb9]

bb8
  0: StorageLive(_6)
    SourceInfo(url/src/host.rs:72:24-72:31)
  1: _6 = (((*_1) as Ipv4).0: core::net::Ipv4Addr)
    SourceInfo(url/src/host.rs:72:24-72:31)
  2: StorageLive(_7)
    SourceInfo(url/src/host.rs:72:47-72:54)
  3: _7 = _6
    SourceInfo(url/src/host.rs:72:47-72:54)
  4: _0 = host::Host::Ipv4(move _7)
    SourceInfo(url/src/host.rs:72:36-72:55)
  5: StorageDead(_7)
    SourceInfo(url/src/host.rs:72:54-72:55)
  6: StorageDead(_6)
    SourceInfo(url/src/host.rs:72:54-72:55)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:72:54-72:55)
      kind: goto -> bb9
  }
  preds [bb3]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(url/src/host.rs:75:6-75:6)
      kind: return
  }
  preds [bb4, bb7, bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(url/src/host.rs:69:5-75:6)
      kind: resume
  }
  preds [bb5, bb6]
  succs []

