bb0
  0: StorageLive(_2)
    SourceInfo(url/src/host.rs:299:9-299:18)
  1: StorageLive(_3)
    SourceInfo(url/src/host.rs:299:32-299:48)
  2: StorageLive(_4)
    SourceInfo(url/src/host.rs:299:32-299:37)
  3: _4 = &(*_1)
    SourceInfo(url/src/host.rs:299:32-299:37)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:299:32-299:48)
      kind: _3 = core::str::<impl str>::split::<'_, char>(move _4, const '.') -> [return: bb1, unwind: bb77]
  }
  preds []
  succs [bb1, bb77]

bb1
  0: StorageDead(_4)
    SourceInfo(url/src/host.rs:299:47-299:48)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:299:32-299:58)
      kind: _2 = <core::str::Split<'_, char> as core::iter::Iterator>::collect::<std::vec::Vec<&str>>(move _3) -> [return: bb2, unwind: bb77]
  }
  preds [bb0]
  succs [bb2, bb77]

bb2
  0: StorageDead(_3)
    SourceInfo(url/src/host.rs:299:57-299:58)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(url/src/host.rs:299:9-299:18)
  2: AscribeUserType(_2, o, UserTypeProjection { base: UserType(1), projs: [] })
    SourceInfo(url/src/host.rs:299:20-299:29)
  3: StorageLive(_5)
    SourceInfo(url/src/host.rs:300:5-302:6)
  4: StorageLive(_6)
    SourceInfo(url/src/host.rs:300:8-300:33)
  5: StorageLive(_7)
    SourceInfo(url/src/host.rs:300:8-300:20)
  6: StorageLive(_8)
    SourceInfo(url/src/host.rs:300:8-300:20)
  7: StorageLive(_9)
    SourceInfo(url/src/host.rs:300:8-300:13)
  8: StorageLive(_10)
    SourceInfo(url/src/host.rs:300:8-300:20)
  9: StorageLive(_11)
    SourceInfo(url/src/host.rs:300:8-300:13)
  10: _11 = &_2
    SourceInfo(url/src/host.rs:300:8-300:13)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:300:8-300:20)
      kind: _10 = <std::vec::Vec<&str> as core::ops::Deref>::deref(move _11) -> [return: bb3, unwind: bb76]
  }
  preds [bb1]
  succs [bb3, bb76]

bb3
  0: _9 = &(*_10)
    SourceInfo(url/src/host.rs:300:8-300:13)
  1: StorageDead(_11)
    SourceInfo(url/src/host.rs:300:12-300:13)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:300:8-300:20)
      kind: _8 = core::slice::<impl [&str]>::last(move _9) -> [return: bb4, unwind: bb76]
  }
  preds [bb2]
  succs [bb4, bb76]

bb4
  0: _7 = &_8
    SourceInfo(url/src/host.rs:300:8-300:20)
  1: StorageDead(_9)
    SourceInfo(url/src/host.rs:300:19-300:20)
  2: StorageLive(_12)
    SourceInfo(url/src/host.rs:300:24-300:33)
  3: StorageLive(_13)
    SourceInfo(url/src/host.rs:300:24-300:33)
  4: StorageLive(_14)
    SourceInfo(url/src/host.rs:300:29-300:32)
  5: StorageLive(_15)
    SourceInfo(url/src/host.rs:300:29-300:32)
  6: StorageLive(_16)
    SourceInfo(url/src/host.rs:300:30-300:32)
  7: _16 = const ""
    SourceInfo(url/src/host.rs:300:30-300:32)
  8: _15 = &_16
    SourceInfo(url/src/host.rs:300:29-300:32)
  9: _14 = &(*_15)
    SourceInfo(url/src/host.rs:300:29-300:32)
  10: _13 = core::option::Option::<&&str>::Some(move _14)
    SourceInfo(url/src/host.rs:300:24-300:33)
  11: _12 = &_13
    SourceInfo(url/src/host.rs:300:24-300:33)
  12: StorageDead(_14)
    SourceInfo(url/src/host.rs:300:32-300:33)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:300:8-300:33)
      kind: _6 = <core::option::Option<&&str> as core::cmp::PartialEq>::eq(move _7, move _12) -> [return: bb5, unwind: bb76]
  }
  preds [bb3]
  succs [bb5, bb76]

bb5
  Terminator {
      source_info: SourceInfo(url/src/host.rs:300:8-300:33)
      kind: switchInt(move _6) -> [0: bb8, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_16)
    SourceInfo(url/src/host.rs:300:32-300:33)
  1: StorageDead(_15)
    SourceInfo(url/src/host.rs:300:32-300:33)
  2: StorageDead(_13)
    SourceInfo(url/src/host.rs:300:32-300:33)
  3: StorageDead(_12)
    SourceInfo(url/src/host.rs:300:32-300:33)
  4: StorageDead(_10)
    SourceInfo(url/src/host.rs:300:32-300:33)
  5: StorageDead(_8)
    SourceInfo(url/src/host.rs:300:32-300:33)
  6: StorageDead(_7)
    SourceInfo(url/src/host.rs:300:32-300:33)
  7: StorageLive(_17)
    SourceInfo(url/src/host.rs:301:9-301:20)
  8: StorageLive(_18)
    SourceInfo(url/src/host.rs:301:9-301:14)
  9: _18 = &mut _2
    SourceInfo(url/src/host.rs:301:9-301:14)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:301:9-301:20)
      kind: _17 = std::vec::Vec::<&str>::pop(move _18) -> [return: bb7, unwind: bb76]
  }
  preds [bb5]
  succs [bb7, bb76]

bb7
  0: StorageDead(_18)
    SourceInfo(url/src/host.rs:301:19-301:20)
  1: StorageDead(_17)
    SourceInfo(url/src/host.rs:301:20-301:21)
  2: _5 = const ()
    SourceInfo(url/src/host.rs:300:34-302:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:300:5-302:6)
      kind: goto -> bb9
  }
  preds [bb6]
  succs [bb9]

bb8
  0: StorageDead(_16)
    SourceInfo(url/src/host.rs:300:32-300:33)
  1: StorageDead(_15)
    SourceInfo(url/src/host.rs:300:32-300:33)
  2: StorageDead(_13)
    SourceInfo(url/src/host.rs:300:32-300:33)
  3: StorageDead(_12)
    SourceInfo(url/src/host.rs:300:32-300:33)
  4: StorageDead(_10)
    SourceInfo(url/src/host.rs:300:32-300:33)
  5: StorageDead(_8)
    SourceInfo(url/src/host.rs:300:32-300:33)
  6: StorageDead(_7)
    SourceInfo(url/src/host.rs:300:32-300:33)
  7: _5 = const ()
    SourceInfo(url/src/host.rs:302:6-302:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:300:5-302:6)
      kind: goto -> bb9
  }
  preds [bb5]
  succs [bb9]

bb9
  0: StorageDead(_6)
    SourceInfo(url/src/host.rs:302:5-302:6)
  1: StorageDead(_5)
    SourceInfo(url/src/host.rs:302:5-302:6)
  2: StorageLive(_19)
    SourceInfo(url/src/host.rs:303:5-305:6)
  3: StorageLive(_20)
    SourceInfo(url/src/host.rs:303:8-303:23)
  4: StorageLive(_21)
    SourceInfo(url/src/host.rs:303:8-303:19)
  5: StorageLive(_22)
    SourceInfo(url/src/host.rs:303:8-303:13)
  6: _22 = &_2
    SourceInfo(url/src/host.rs:303:8-303:13)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:303:8-303:19)
      kind: _21 = std::vec::Vec::<&str>::len(move _22) -> [return: bb10, unwind: bb76]
  }
  preds [bb7, bb8]
  succs [bb10, bb76]

bb10
  0: StorageDead(_22)
    SourceInfo(url/src/host.rs:303:18-303:19)
  1: _20 = Gt(move _21, const 4_usize)
    SourceInfo(url/src/host.rs:303:8-303:23)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:303:8-303:23)
      kind: switchInt(move _20) -> [0: bb12, otherwise: bb11]
  }
  preds [bb9]
  succs [bb11, bb12]

bb11
  0: StorageDead(_21)
    SourceInfo(url/src/host.rs:303:22-303:23)
  1: StorageLive(_24)
    SourceInfo(url/src/host.rs:304:20-304:50)
  2: _24 = parser::ParseError::InvalidIpv4Address
    SourceInfo(url/src/host.rs:304:20-304:50)
  3: _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Err(move _24)
    SourceInfo(url/src/host.rs:304:16-304:51)
  4: StorageDead(_24)
    SourceInfo(url/src/host.rs:304:50-304:51)
  5: StorageDead(_20)
    SourceInfo(url/src/host.rs:305:5-305:6)
  6: StorageDead(_19)
    SourceInfo(url/src/host.rs:305:5-305:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb69
  }
  preds [bb10]
  succs [bb69]

bb12
  0: StorageDead(_21)
    SourceInfo(url/src/host.rs:303:22-303:23)
  1: _19 = const ()
    SourceInfo(url/src/host.rs:305:6-305:6)
  2: StorageDead(_20)
    SourceInfo(url/src/host.rs:305:5-305:6)
  3: StorageDead(_19)
    SourceInfo(url/src/host.rs:305:5-305:6)
  4: StorageLive(_25)
    SourceInfo(url/src/host.rs:306:9-306:20)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:306:33-306:43)
      kind: _25 = std::vec::Vec::<u32>::new() -> [return: bb13, unwind: bb76]
  }
  preds [bb10]
  succs [bb13, bb76]

bb13
  0: FakeRead(ForLet(None), _25)
    SourceInfo(url/src/host.rs:306:9-306:20)
  1: AscribeUserType(_25, o, UserTypeProjection { base: UserType(4), projs: [] })
    SourceInfo(url/src/host.rs:306:22-306:30)
  2: StorageLive(_26)
    SourceInfo(url/src/host.rs:307:5-313:6)
  3: StorageLive(_27)
    SourceInfo(url/src/host.rs:307:17-307:22)
  4: StorageLive(_28)
    SourceInfo(url/src/host.rs:307:17-307:22)
  5: _28 = move _2
    SourceInfo(url/src/host.rs:307:17-307:22)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:307:17-307:22)
      kind: _27 = <std::vec::Vec<&str> as core::iter::IntoIterator>::into_iter(move _28) -> [return: bb14, unwind: bb74]
  }
  preds [bb12]
  succs [bb14, bb74]

bb14
  0: StorageDead(_28)
    SourceInfo(url/src/host.rs:307:21-307:22)
  1: PlaceMention(_27)
    SourceInfo(url/src/host.rs:307:17-307:22)
  2: StorageLive(_29)
    SourceInfo(url/src/host.rs:307:17-307:22)
  3: _29 = move _27
    SourceInfo(url/src/host.rs:307:17-307:22)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:307:5-313:6)
      kind: goto -> bb15
  }
  preds [bb13]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(url/src/host.rs:307:5-313:6)
      kind: falseUnwind -> [real: bb16, unwind: bb72]
  }
  preds [bb14, bb29]
  succs [bb16, bb72]

bb16
  0: StorageLive(_31)
    SourceInfo(url/src/host.rs:307:17-307:22)
  1: StorageLive(_32)
    SourceInfo(url/src/host.rs:307:17-307:22)
  2: StorageLive(_33)
    SourceInfo(url/src/host.rs:307:17-307:22)
  3: StorageLive(_34)
    SourceInfo(url/src/host.rs:307:17-307:22)
  4: _34 = &mut _29
    SourceInfo(url/src/host.rs:307:17-307:22)
  5: _33 = &mut (*_34)
    SourceInfo(url/src/host.rs:307:17-307:22)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:307:17-307:22)
      kind: _32 = <std::vec::IntoIter<&str> as core::iter::Iterator>::next(move _33) -> [return: bb17, unwind: bb72]
  }
  preds [bb15]
  succs [bb17, bb72]

bb17
  0: StorageDead(_33)
    SourceInfo(url/src/host.rs:307:21-307:22)
  1: PlaceMention(_32)
    SourceInfo(url/src/host.rs:307:17-307:22)
  2: _35 = discriminant(_32)
    SourceInfo(url/src/host.rs:307:17-307:22)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:307:17-307:22)
      kind: switchInt(move _35) -> [0: bb19, 1: bb20, otherwise: bb18]
  }
  preds [bb16]
  succs [bb18, bb19, bb20]

bb18
  0: FakeRead(ForMatchedPlace(None), _32)
    SourceInfo(url/src/host.rs:307:17-307:22)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:307:17-307:22)
      kind: unreachable
  }
  preds [bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(url/src/host.rs:307:5-313:6)
      kind: falseEdge -> [real: bb21, imaginary: bb20]
  }
  preds [bb17]
  succs [bb20, bb21]

bb20
  0: StorageLive(_37)
    SourceInfo(url/src/host.rs:307:9-307:13)
  1: _37 = ((_32 as Some).0: &str)
    SourceInfo(url/src/host.rs:307:9-307:13)
  2: StorageLive(_38)
    SourceInfo(url/src/host.rs:308:9-312:10)
  3: StorageLive(_39)
    SourceInfo(url/src/host.rs:308:15-308:37)
  4: StorageLive(_40)
    SourceInfo(url/src/host.rs:308:32-308:36)
  5: _40 = &(*_37)
    SourceInfo(url/src/host.rs:308:32-308:36)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:308:15-308:37)
      kind: _39 = host::parse_ipv4number(move _40) -> [return: bb22, unwind: bb72]
  }
  preds [bb17, bb19]
  succs [bb22, bb72]

bb21
  0: _26 = const ()
    SourceInfo(url/src/host.rs:307:5-313:6)
  1: StorageDead(_34)
    SourceInfo(url/src/host.rs:313:5-313:6)
  2: StorageDead(_32)
    SourceInfo(url/src/host.rs:313:5-313:6)
  3: StorageDead(_31)
    SourceInfo(url/src/host.rs:313:5-313:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:313:5-313:6)
      kind: drop(_29) -> [return: bb31, unwind: bb73]
  }
  preds [bb19]
  succs [bb31, bb73]

bb22
  0: StorageDead(_40)
    SourceInfo(url/src/host.rs:308:36-308:37)
  1: PlaceMention(_39)
    SourceInfo(url/src/host.rs:308:15-308:37)
  2: _42 = discriminant(_39)
    SourceInfo(url/src/host.rs:308:15-308:37)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:308:9-308:37)
      kind: switchInt(move _42) -> [0: bb24, 1: bb27, otherwise: bb23]
  }
  preds [bb20]
  succs [bb23, bb24, bb27]

bb23
  0: FakeRead(ForMatchedPlace(None), _39)
    SourceInfo(url/src/host.rs:308:15-308:37)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:308:15-308:37)
      kind: unreachable
  }
  preds [bb22, bb24]
  succs []

bb24
  0: _41 = discriminant(((_39 as Ok).0: core::option::Option<u32>))
    SourceInfo(url/src/host.rs:308:15-308:37)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:308:9-308:37)
      kind: switchInt(move _41) -> [0: bb26, 1: bb25, otherwise: bb23]
  }
  preds [bb22]
  succs [bb23, bb25, bb26]

bb25
  Terminator {
      source_info: SourceInfo(url/src/host.rs:309:13-309:24)
      kind: falseEdge -> [real: bb28, imaginary: bb26]
  }
  preds [bb24]
  succs [bb26, bb28]

bb26
  Terminator {
      source_info: SourceInfo(url/src/host.rs:310:13-310:21)
      kind: falseEdge -> [real: bb30, imaginary: bb27]
  }
  preds [bb24, bb25]
  succs [bb27, bb30]

bb27
  0: StorageLive(_49)
    SourceInfo(url/src/host.rs:311:35-311:65)
  1: _49 = parser::ParseError::InvalidIpv4Address
    SourceInfo(url/src/host.rs:311:35-311:65)
  2: _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Err(move _49)
    SourceInfo(url/src/host.rs:311:31-311:66)
  3: StorageDead(_49)
    SourceInfo(url/src/host.rs:311:65-311:66)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:311:24-311:66)
      kind: goto -> bb64
  }
  preds [bb22, bb26]
  succs [bb64]

bb28
  0: StorageLive(_43)
    SourceInfo(url/src/host.rs:309:21-309:22)
  1: _43 = ((((_39 as Ok).0: core::option::Option<u32>) as Some).0: u32)
    SourceInfo(url/src/host.rs:309:21-309:22)
  2: StorageLive(_44)
    SourceInfo(url/src/host.rs:309:28-309:35)
  3: _44 = &mut _25
    SourceInfo(url/src/host.rs:309:28-309:35)
  4: StorageLive(_45)
    SourceInfo(url/src/host.rs:309:41-309:42)
  5: _45 = _43
    SourceInfo(url/src/host.rs:309:41-309:42)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:309:28-309:43)
      kind: _38 = std::vec::Vec::<u32>::push(move _44, move _45) -> [return: bb29, unwind: bb72]
  }
  preds [bb25]
  succs [bb29, bb72]

bb29
  0: StorageDead(_45)
    SourceInfo(url/src/host.rs:309:42-309:43)
  1: StorageDead(_44)
    SourceInfo(url/src/host.rs:309:42-309:43)
  2: StorageDead(_43)
    SourceInfo(url/src/host.rs:309:42-309:43)
  3: StorageDead(_39)
    SourceInfo(url/src/host.rs:312:10-312:11)
  4: StorageDead(_38)
    SourceInfo(url/src/host.rs:312:10-312:11)
  5: _31 = const ()
    SourceInfo(url/src/host.rs:307:23-313:6)
  6: StorageDead(_37)
    SourceInfo(url/src/host.rs:313:5-313:6)
  7: StorageDead(_34)
    SourceInfo(url/src/host.rs:313:5-313:6)
  8: StorageDead(_32)
    SourceInfo(url/src/host.rs:313:5-313:6)
  9: StorageDead(_31)
    SourceInfo(url/src/host.rs:313:5-313:6)
  10: _30 = const ()
    SourceInfo(url/src/host.rs:307:5-313:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:307:5-313:6)
      kind: goto -> bb15
  }
  preds [bb28]
  succs [bb15]

bb30
  0: StorageLive(_47)
    SourceInfo(url/src/host.rs:310:36-310:66)
  1: _47 = parser::ParseError::InvalidIpv4Address
    SourceInfo(url/src/host.rs:310:36-310:66)
  2: _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Err(move _47)
    SourceInfo(url/src/host.rs:310:32-310:67)
  3: StorageDead(_47)
    SourceInfo(url/src/host.rs:310:66-310:67)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:310:25-310:67)
      kind: goto -> bb64
  }
  preds [bb26]
  succs [bb64]

bb31
  0: StorageDead(_29)
    SourceInfo(url/src/host.rs:313:5-313:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:313:5-313:6)
      kind: drop(_27) -> [return: bb32, unwind: bb75]
  }
  preds [bb21]
  succs [bb32, bb75]

bb32
  0: StorageDead(_27)
    SourceInfo(url/src/host.rs:313:5-313:6)
  1: StorageDead(_26)
    SourceInfo(url/src/host.rs:313:5-313:6)
  2: StorageLive(_50)
    SourceInfo(url/src/host.rs:314:9-314:17)
  3: StorageLive(_51)
    SourceInfo(url/src/host.rs:314:20-314:33)
  4: StorageLive(_52)
    SourceInfo(url/src/host.rs:314:20-314:27)
  5: _52 = &mut _25
    SourceInfo(url/src/host.rs:314:20-314:27)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:314:20-314:33)
      kind: _51 = std::vec::Vec::<u32>::pop(move _52) -> [return: bb33, unwind: bb75]
  }
  preds [bb31]
  succs [bb33, bb75]

bb33
  0: StorageDead(_52)
    SourceInfo(url/src/host.rs:314:32-314:33)
  1: StorageLive(_53)
    SourceInfo(url/src/host.rs:314:41-314:70)
  2: StorageLive(_54)
    SourceInfo(url/src/host.rs:314:41-314:70)
  3: _54 = const "a non-empty list of numbers"
    SourceInfo(url/src/host.rs:314:41-314:70)
  4: _53 = &(*_54)
    SourceInfo(url/src/host.rs:314:41-314:70)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:314:20-314:71)
      kind: _50 = core::option::Option::<u32>::expect(move _51, move _53) -> [return: bb34, unwind: bb75]
  }
  preds [bb32]
  succs [bb34, bb75]

bb34
  0: StorageDead(_53)
    SourceInfo(url/src/host.rs:314:70-314:71)
  1: StorageDead(_51)
    SourceInfo(url/src/host.rs:314:70-314:71)
  2: FakeRead(ForLet(None), _50)
    SourceInfo(url/src/host.rs:314:9-314:17)
  3: StorageDead(_54)
    SourceInfo(url/src/host.rs:314:71-314:72)
  4: StorageLive(_55)
    SourceInfo(url/src/host.rs:316:5-318:6)
  5: StorageLive(_56)
    SourceInfo(url/src/host.rs:316:8-316:53)
  6: StorageLive(_57)
    SourceInfo(url/src/host.rs:316:8-316:12)
  7: _57 = _50
    SourceInfo(url/src/host.rs:316:8-316:12)
  8: StorageLive(_58)
    SourceInfo(url/src/host.rs:316:15-316:53)
  9: StorageLive(_59)
    SourceInfo(url/src/host.rs:316:27-316:53)
  10: StorageLive(_60)
    SourceInfo(url/src/host.rs:316:32-316:52)
  11: StorageLive(_61)
    SourceInfo(url/src/host.rs:316:32-316:45)
  12: StorageLive(_62)
    SourceInfo(url/src/host.rs:316:32-316:39)
  13: _62 = &_25
    SourceInfo(url/src/host.rs:316:32-316:39)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:316:32-316:45)
      kind: _61 = std::vec::Vec::<u32>::len(move _62) -> [return: bb35, unwind: bb75]
  }
  preds [bb33]
  succs [bb35, bb75]

bb35
  0: StorageDead(_62)
    SourceInfo(url/src/host.rs:316:44-316:45)
  1: _60 = move _61 as u32 (IntToInt)
    SourceInfo(url/src/host.rs:316:32-316:52)
  2: StorageDead(_61)
    SourceInfo(url/src/host.rs:316:51-316:52)
  3: _63 = MulWithOverflow(const 8_u32, _60)
    SourceInfo(url/src/host.rs:316:27-316:53)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:316:27-316:53)
      kind: assert(!move (_63.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_u32, move _60) -> [success: bb36, unwind: bb75]
  }
  preds [bb34]
  succs [bb36, bb75]

bb36
  0: _59 = move (_63.0: u32)
    SourceInfo(url/src/host.rs:316:27-316:53)
  1: StorageDead(_60)
    SourceInfo(url/src/host.rs:316:52-316:53)
  2: _64 = Lt(_59, const 32_u32)
    SourceInfo(url/src/host.rs:316:15-316:53)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:316:15-316:53)
      kind: assert(move _64, "attempt to shift right by `{}`, which would overflow", _59) -> [success: bb37, unwind: bb75]
  }
  preds [bb35]
  succs [bb37, bb75]

bb37
  0: _58 = Shr(const core::num::<impl u32>::MAX, move _59)
    SourceInfo(url/src/host.rs:316:15-316:53)
  1: StorageDead(_59)
    SourceInfo(url/src/host.rs:316:52-316:53)
  2: _56 = Gt(move _57, move _58)
    SourceInfo(url/src/host.rs:316:8-316:53)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:316:8-316:53)
      kind: switchInt(move _56) -> [0: bb39, otherwise: bb38]
  }
  preds [bb36]
  succs [bb38, bb39]

bb38
  0: StorageDead(_58)
    SourceInfo(url/src/host.rs:316:52-316:53)
  1: StorageDead(_57)
    SourceInfo(url/src/host.rs:316:52-316:53)
  2: StorageLive(_66)
    SourceInfo(url/src/host.rs:317:20-317:50)
  3: _66 = parser::ParseError::InvalidIpv4Address
    SourceInfo(url/src/host.rs:317:20-317:50)
  4: _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Err(move _66)
    SourceInfo(url/src/host.rs:317:16-317:51)
  5: StorageDead(_66)
    SourceInfo(url/src/host.rs:317:50-317:51)
  6: StorageDead(_56)
    SourceInfo(url/src/host.rs:318:5-318:6)
  7: StorageDead(_55)
    SourceInfo(url/src/host.rs:318:5-318:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb63
  }
  preds [bb37]
  succs [bb63]

bb39
  0: StorageDead(_58)
    SourceInfo(url/src/host.rs:316:52-316:53)
  1: StorageDead(_57)
    SourceInfo(url/src/host.rs:316:52-316:53)
  2: _55 = const ()
    SourceInfo(url/src/host.rs:318:6-318:6)
  3: StorageDead(_56)
    SourceInfo(url/src/host.rs:318:5-318:6)
  4: StorageDead(_55)
    SourceInfo(url/src/host.rs:318:5-318:6)
  5: StorageLive(_67)
    SourceInfo(url/src/host.rs:319:5-321:6)
  6: StorageLive(_68)
    SourceInfo(url/src/host.rs:319:8-319:40)
  7: StorageLive(_69)
    SourceInfo(url/src/host.rs:319:8-319:22)
  8: StorageLive(_70)
    SourceInfo(url/src/host.rs:319:8-319:22)
  9: StorageLive(_71)
    SourceInfo(url/src/host.rs:319:8-319:15)
  10: StorageLive(_72)
    SourceInfo(url/src/host.rs:319:8-319:22)
  11: StorageLive(_73)
    SourceInfo(url/src/host.rs:319:8-319:15)
  12: _73 = &_25
    SourceInfo(url/src/host.rs:319:8-319:15)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:319:8-319:22)
      kind: _72 = <std::vec::Vec<u32> as core::ops::Deref>::deref(move _73) -> [return: bb40, unwind: bb75]
  }
  preds [bb37]
  succs [bb40, bb75]

bb40
  0: _71 = &(*_72)
    SourceInfo(url/src/host.rs:319:8-319:15)
  1: StorageDead(_73)
    SourceInfo(url/src/host.rs:319:14-319:15)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:319:8-319:22)
      kind: _70 = core::slice::<impl [u32]>::iter(move _71) -> [return: bb41, unwind: bb75]
  }
  preds [bb39]
  succs [bb41, bb75]

bb41
  0: _69 = &mut _70
    SourceInfo(url/src/host.rs:319:8-319:22)
  1: StorageDead(_71)
    SourceInfo(url/src/host.rs:319:21-319:22)
  2: StorageLive(_74)
    SourceInfo(url/src/host.rs:319:27-319:39)
  3: _74 = {closure@url/src/host.rs:319:27: 319:30}
    SourceInfo(url/src/host.rs:319:27-319:39)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:319:8-319:40)
      kind: _68 = <core::slice::Iter<'_, u32> as core::iter::Iterator>::any::<{closure@url/src/host.rs:319:27: 319:30}>(move _69, move _74) -> [return: bb42, unwind: bb75]
  }
  preds [bb40]
  succs [bb42, bb75]

bb42
  Terminator {
      source_info: SourceInfo(url/src/host.rs:319:8-319:40)
      kind: switchInt(move _68) -> [0: bb44, otherwise: bb43]
  }
  preds [bb41]
  succs [bb43, bb44]

bb43
  0: StorageDead(_74)
    SourceInfo(url/src/host.rs:319:39-319:40)
  1: StorageDead(_72)
    SourceInfo(url/src/host.rs:319:39-319:40)
  2: StorageDead(_70)
    SourceInfo(url/src/host.rs:319:39-319:40)
  3: StorageDead(_69)
    SourceInfo(url/src/host.rs:319:39-319:40)
  4: StorageLive(_76)
    SourceInfo(url/src/host.rs:320:20-320:50)
  5: _76 = parser::ParseError::InvalidIpv4Address
    SourceInfo(url/src/host.rs:320:20-320:50)
  6: _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Err(move _76)
    SourceInfo(url/src/host.rs:320:16-320:51)
  7: StorageDead(_76)
    SourceInfo(url/src/host.rs:320:50-320:51)
  8: StorageDead(_68)
    SourceInfo(url/src/host.rs:321:5-321:6)
  9: StorageDead(_67)
    SourceInfo(url/src/host.rs:321:5-321:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb63
  }
  preds [bb42]
  succs [bb63]

bb44
  0: StorageDead(_74)
    SourceInfo(url/src/host.rs:319:39-319:40)
  1: StorageDead(_72)
    SourceInfo(url/src/host.rs:319:39-319:40)
  2: StorageDead(_70)
    SourceInfo(url/src/host.rs:319:39-319:40)
  3: StorageDead(_69)
    SourceInfo(url/src/host.rs:319:39-319:40)
  4: _67 = const ()
    SourceInfo(url/src/host.rs:321:6-321:6)
  5: StorageDead(_68)
    SourceInfo(url/src/host.rs:321:5-321:6)
  6: StorageDead(_67)
    SourceInfo(url/src/host.rs:321:5-321:6)
  7: StorageLive(_77)
    SourceInfo(url/src/host.rs:322:5-324:6)
  8: StorageLive(_78)
    SourceInfo(url/src/host.rs:322:25-322:51)
  9: StorageLive(_79)
    SourceInfo(url/src/host.rs:322:25-322:51)
  10: StorageLive(_80)
    SourceInfo(url/src/host.rs:322:25-322:39)
  11: StorageLive(_81)
    SourceInfo(url/src/host.rs:322:25-322:32)
  12: StorageLive(_82)
    SourceInfo(url/src/host.rs:322:25-322:39)
  13: StorageLive(_83)
    SourceInfo(url/src/host.rs:322:25-322:32)
  14: _83 = &_25
    SourceInfo(url/src/host.rs:322:25-322:32)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:25-322:39)
      kind: _82 = <std::vec::Vec<u32> as core::ops::Deref>::deref(move _83) -> [return: bb45, unwind: bb75]
  }
  preds [bb42]
  succs [bb45, bb75]

bb45
  0: _81 = &(*_82)
    SourceInfo(url/src/host.rs:322:25-322:32)
  1: StorageDead(_83)
    SourceInfo(url/src/host.rs:322:31-322:32)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:25-322:39)
      kind: _80 = core::slice::<impl [u32]>::iter(move _81) -> [return: bb46, unwind: bb75]
  }
  preds [bb44]
  succs [bb46, bb75]

bb46
  0: StorageDead(_81)
    SourceInfo(url/src/host.rs:322:38-322:39)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:25-322:51)
      kind: _79 = <core::slice::Iter<'_, u32> as core::iter::Iterator>::enumerate(move _80) -> [return: bb47, unwind: bb75]
  }
  preds [bb45]
  succs [bb47, bb75]

bb47
  0: StorageDead(_80)
    SourceInfo(url/src/host.rs:322:50-322:51)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:25-322:51)
      kind: _78 = <core::iter::Enumerate<core::slice::Iter<'_, u32>> as core::iter::IntoIterator>::into_iter(move _79) -> [return: bb48, unwind: bb75]
  }
  preds [bb46]
  succs [bb48, bb75]

bb48
  0: StorageDead(_79)
    SourceInfo(url/src/host.rs:322:50-322:51)
  1: PlaceMention(_78)
    SourceInfo(url/src/host.rs:322:25-322:51)
  2: StorageLive(_84)
    SourceInfo(url/src/host.rs:322:25-322:51)
  3: _84 = move _78
    SourceInfo(url/src/host.rs:322:25-322:51)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:5-324:6)
      kind: goto -> bb49
  }
  preds [bb47]
  succs [bb49]

bb49
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:5-324:6)
      kind: falseUnwind -> [real: bb50, unwind: bb75]
  }
  preds [bb48, bb59]
  succs [bb50, bb75]

bb50
  0: StorageLive(_85)
    SourceInfo(url/src/host.rs:322:25-322:51)
  1: StorageLive(_86)
    SourceInfo(url/src/host.rs:322:25-322:51)
  2: StorageLive(_87)
    SourceInfo(url/src/host.rs:322:25-322:51)
  3: StorageLive(_88)
    SourceInfo(url/src/host.rs:322:25-322:51)
  4: _88 = &mut _84
    SourceInfo(url/src/host.rs:322:25-322:51)
  5: _87 = &mut (*_88)
    SourceInfo(url/src/host.rs:322:25-322:51)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:25-322:51)
      kind: _86 = <core::iter::Enumerate<core::slice::Iter<'_, u32>> as core::iter::Iterator>::next(move _87) -> [return: bb51, unwind: bb75]
  }
  preds [bb49]
  succs [bb51, bb75]

bb51
  0: StorageDead(_87)
    SourceInfo(url/src/host.rs:322:50-322:51)
  1: PlaceMention(_86)
    SourceInfo(url/src/host.rs:322:25-322:51)
  2: _89 = discriminant(_86)
    SourceInfo(url/src/host.rs:322:25-322:51)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:25-322:51)
      kind: switchInt(move _89) -> [0: bb53, 1: bb54, otherwise: bb52]
  }
  preds [bb50]
  succs [bb52, bb53, bb54]

bb52
  0: FakeRead(ForMatchedPlace(None), _86)
    SourceInfo(url/src/host.rs:322:25-322:51)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:25-322:51)
      kind: unreachable
  }
  preds [bb51]
  succs []

bb53
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:5-324:6)
      kind: falseEdge -> [real: bb55, imaginary: bb54]
  }
  preds [bb51]
  succs [bb54, bb55]

bb54
  0: StorageLive(_91)
    SourceInfo(url/src/host.rs:322:10-322:17)
  1: _91 = (((_86 as Some).0: (usize, &u32)).0: usize)
    SourceInfo(url/src/host.rs:322:10-322:17)
  2: StorageLive(_92)
    SourceInfo(url/src/host.rs:322:19-322:20)
  3: _92 = (((_86 as Some).0: (usize, &u32)).1: &u32)
    SourceInfo(url/src/host.rs:322:19-322:20)
  4: StorageLive(_93)
    SourceInfo(url/src/host.rs:323:17-323:48)
  5: StorageLive(_94)
    SourceInfo(url/src/host.rs:323:17-323:18)
  6: _94 = _92
    SourceInfo(url/src/host.rs:323:17-323:18)
  7: StorageLive(_95)
    SourceInfo(url/src/host.rs:323:22-323:48)
  8: StorageLive(_96)
    SourceInfo(url/src/host.rs:323:27-323:47)
  9: StorageLive(_97)
    SourceInfo(url/src/host.rs:323:32-323:46)
  10: StorageLive(_98)
    SourceInfo(url/src/host.rs:323:32-323:39)
  11: _98 = _91
    SourceInfo(url/src/host.rs:323:32-323:39)
  12: _97 = move _98 as u32 (IntToInt)
    SourceInfo(url/src/host.rs:323:32-323:46)
  13: StorageDead(_98)
    SourceInfo(url/src/host.rs:323:45-323:46)
  14: _99 = SubWithOverflow(const 3_u32, _97)
    SourceInfo(url/src/host.rs:323:27-323:47)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:323:27-323:47)
      kind: assert(!move (_99.1: bool), "attempt to compute `{} - {}`, which would overflow", const 3_u32, move _97) -> [success: bb56, unwind: bb75]
  }
  preds [bb51, bb53]
  succs [bb56, bb75]

bb55
  0: _77 = const ()
    SourceInfo(url/src/host.rs:322:5-324:6)
  1: StorageDead(_88)
    SourceInfo(url/src/host.rs:324:5-324:6)
  2: StorageDead(_86)
    SourceInfo(url/src/host.rs:324:5-324:6)
  3: StorageDead(_85)
    SourceInfo(url/src/host.rs:324:5-324:6)
  4: StorageDead(_84)
    SourceInfo(url/src/host.rs:324:5-324:6)
  5: StorageDead(_82)
    SourceInfo(url/src/host.rs:324:5-324:6)
  6: StorageDead(_78)
    SourceInfo(url/src/host.rs:324:5-324:6)
  7: StorageDead(_77)
    SourceInfo(url/src/host.rs:324:5-324:6)
  8: StorageLive(_102)
    SourceInfo(url/src/host.rs:325:8-325:28)
  9: StorageLive(_103)
    SourceInfo(url/src/host.rs:325:23-325:27)
  10: _103 = _50
    SourceInfo(url/src/host.rs:325:23-325:27)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:325:8-325:28)
      kind: _102 = <core::net::Ipv4Addr as core::convert::From<u32>>::from(move _103) -> [return: bb60, unwind: bb75]
  }
  preds [bb53]
  succs [bb60, bb75]

bb56
  0: _96 = move (_99.0: u32)
    SourceInfo(url/src/host.rs:323:27-323:47)
  1: StorageDead(_97)
    SourceInfo(url/src/host.rs:323:46-323:47)
  2: _100 = MulWithOverflow(const 8_u32, _96)
    SourceInfo(url/src/host.rs:323:22-323:48)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:323:22-323:48)
      kind: assert(!move (_100.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_u32, move _96) -> [success: bb57, unwind: bb75]
  }
  preds [bb54]
  succs [bb57, bb75]

bb57
  0: _95 = move (_100.0: u32)
    SourceInfo(url/src/host.rs:323:22-323:48)
  1: StorageDead(_96)
    SourceInfo(url/src/host.rs:323:47-323:48)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:323:17-323:48)
      kind: _93 = <&u32 as core::ops::Shl<u32>>::shl(move _94, move _95) -> [return: bb58, unwind: bb75]
  }
  preds [bb56]
  succs [bb58, bb75]

bb58
  0: StorageDead(_95)
    SourceInfo(url/src/host.rs:323:47-323:48)
  1: StorageDead(_94)
    SourceInfo(url/src/host.rs:323:47-323:48)
  2: _101 = AddWithOverflow(_50, _93)
    SourceInfo(url/src/host.rs:323:9-323:48)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:323:9-323:48)
      kind: assert(!move (_101.1: bool), "attempt to compute `{} + {}`, which would overflow", _50, move _93) -> [success: bb59, unwind: bb75]
  }
  preds [bb57]
  succs [bb59, bb75]

bb59
  0: _50 = move (_101.0: u32)
    SourceInfo(url/src/host.rs:323:9-323:48)
  1: _85 = const ()
    SourceInfo(url/src/host.rs:323:9-323:48)
  2: StorageDead(_93)
    SourceInfo(url/src/host.rs:323:47-323:48)
  3: StorageDead(_92)
    SourceInfo(url/src/host.rs:324:5-324:6)
  4: StorageDead(_91)
    SourceInfo(url/src/host.rs:324:5-324:6)
  5: StorageDead(_88)
    SourceInfo(url/src/host.rs:324:5-324:6)
  6: StorageDead(_86)
    SourceInfo(url/src/host.rs:324:5-324:6)
  7: StorageDead(_85)
    SourceInfo(url/src/host.rs:324:5-324:6)
  8: _30 = const ()
    SourceInfo(url/src/host.rs:322:5-324:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:322:5-324:6)
      kind: goto -> bb49
  }
  preds [bb58]
  succs [bb49]

bb60
  0: StorageDead(_103)
    SourceInfo(url/src/host.rs:325:27-325:28)
  1: _0 = core::result::Result::<core::net::Ipv4Addr, parser::ParseError>::Ok(move _102)
    SourceInfo(url/src/host.rs:325:5-325:29)
  2: StorageDead(_102)
    SourceInfo(url/src/host.rs:325:28-325:29)
  3: StorageDead(_50)
    SourceInfo(url/src/host.rs:326:1-326:2)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:326:1-326:2)
      kind: drop(_25) -> [return: bb61, unwind: bb76]
  }
  preds [bb55]
  succs [bb61, bb76]

bb61
  0: StorageDead(_25)
    SourceInfo(url/src/host.rs:326:1-326:2)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:326:1-326:2)
      kind: drop(_2) -> [return: bb62, unwind: bb77]
  }
  preds [bb60]
  succs [bb62, bb77]

bb62
  0: StorageDead(_2)
    SourceInfo(url/src/host.rs:326:1-326:2)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:326:2-326:2)
      kind: goto -> bb71
  }
  preds [bb61]
  succs [bb71]

bb63
  0: StorageDead(_50)
    SourceInfo(url/src/host.rs:326:1-326:2)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb67
  }
  preds [bb38, bb43]
  succs [bb67]

bb64
  0: StorageDead(_39)
    SourceInfo(url/src/host.rs:312:10-312:11)
  1: StorageDead(_38)
    SourceInfo(url/src/host.rs:312:10-312:11)
  2: StorageDead(_37)
    SourceInfo(url/src/host.rs:313:5-313:6)
  3: StorageDead(_34)
    SourceInfo(url/src/host.rs:313:5-313:6)
  4: StorageDead(_32)
    SourceInfo(url/src/host.rs:313:5-313:6)
  5: StorageDead(_31)
    SourceInfo(url/src/host.rs:313:5-313:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:313:5-313:6)
      kind: drop(_29) -> [return: bb65, unwind: bb73]
  }
  preds [bb27, bb30]
  succs [bb65, bb73]

bb65
  0: StorageDead(_29)
    SourceInfo(url/src/host.rs:313:5-313:6)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:313:5-313:6)
      kind: drop(_27) -> [return: bb66, unwind: bb75]
  }
  preds [bb64]
  succs [bb66, bb75]

bb66
  0: StorageDead(_27)
    SourceInfo(url/src/host.rs:313:5-313:6)
  1: StorageDead(_26)
    SourceInfo(url/src/host.rs:313:5-313:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb67
  }
  preds [bb65]
  succs [bb67]

bb67
  Terminator {
      source_info: SourceInfo(url/src/host.rs:326:1-326:2)
      kind: drop(_25) -> [return: bb68, unwind: bb76]
  }
  preds [bb63, bb66]
  succs [bb68, bb76]

bb68
  0: StorageDead(_25)
    SourceInfo(url/src/host.rs:326:1-326:2)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:1:1-1:1)
      kind: goto -> bb69
  }
  preds [bb67]
  succs [bb69]

bb69
  Terminator {
      source_info: SourceInfo(url/src/host.rs:326:1-326:2)
      kind: drop(_2) -> [return: bb70, unwind: bb77]
  }
  preds [bb11, bb68]
  succs [bb70, bb77]

bb70
  0: StorageDead(_2)
    SourceInfo(url/src/host.rs:326:1-326:2)
  Terminator {
      source_info: SourceInfo(url/src/host.rs:326:2-326:2)
      kind: goto -> bb71
  }
  preds [bb69]
  succs [bb71]

bb71
  Terminator {
      source_info: SourceInfo(url/src/host.rs:326:2-326:2)
      kind: return
  }
  preds [bb62, bb70]
  succs []

bb72
  Terminator {
      source_info: SourceInfo(url/src/host.rs:313:5-313:6)
      kind: drop(_29) -> [return: bb73, unwind terminate(cleanup)]
  }
  preds [bb15, bb16, bb20, bb28]
  succs [bb73]

bb73
  Terminator {
      source_info: SourceInfo(url/src/host.rs:313:5-313:6)
      kind: drop(_27) -> [return: bb75, unwind terminate(cleanup)]
  }
  preds [bb21, bb64, bb72]
  succs [bb75]

bb74
  Terminator {
      source_info: SourceInfo(url/src/host.rs:307:21-307:22)
      kind: drop(_28) -> [return: bb75, unwind terminate(cleanup)]
  }
  preds [bb13]
  succs [bb75]

bb75
  Terminator {
      source_info: SourceInfo(url/src/host.rs:326:1-326:2)
      kind: drop(_25) -> [return: bb76, unwind terminate(cleanup)]
  }
  preds [bb31, bb32, bb33, bb34, bb35, bb36, bb39, bb40, bb41, bb44, bb45, bb46, bb47, bb49, bb50, bb54, bb55, bb56, bb57, bb58, bb65, bb73, bb74]
  succs [bb76]

bb76
  Terminator {
      source_info: SourceInfo(url/src/host.rs:326:1-326:2)
      kind: drop(_2) -> [return: bb77, unwind terminate(cleanup)]
  }
  preds [bb2, bb3, bb4, bb6, bb9, bb12, bb60, bb67, bb75]
  succs [bb77]

bb77
  Terminator {
      source_info: SourceInfo(url/src/host.rs:298:1-326:2)
      kind: resume
  }
  preds [bb0, bb1, bb61, bb69, bb76]
  succs []

