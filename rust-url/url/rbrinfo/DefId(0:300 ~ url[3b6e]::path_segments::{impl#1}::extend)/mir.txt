bb0
  0: StorageLive(_3)
    SourceInfo(url/src/path_segments.rs:265:9-265:13)
  1: StorageLive(_4)
    SourceInfo(url/src/path_segments.rs:241:13-241:24)
  2: StorageLive(_5)
    SourceInfo(url/src/path_segments.rs:241:44-241:61)
  3: StorageLive(_6)
    SourceInfo(url/src/path_segments.rs:241:44-241:52)
  4: _6 = &(*((*_1).0: &mut Url))
    SourceInfo(url/src/path_segments.rs:241:44-241:52)
  Terminator {
      source_info: SourceInfo(url/src/path_segments.rs:241:44-241:61)
      kind: _5 = Url::scheme(move _6) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_6)
    SourceInfo(url/src/path_segments.rs:241:60-241:61)
  Terminator {
      source_info: SourceInfo(url/src/path_segments.rs:241:27-241:62)
      kind: _4 = <parser::SchemeType as core::convert::From<&str>>::from(move _5) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_5)
    SourceInfo(url/src/path_segments.rs:241:61-241:62)
  1: FakeRead(ForLet(None), _4)
    SourceInfo(url/src/path_segments.rs:241:13-241:24)
  2: StorageLive(_7)
    SourceInfo(url/src/path_segments.rs:242:13-242:23)
  3: StorageLive(_8)
    SourceInfo(url/src/path_segments.rs:242:26-242:45)
  4: _8 = ((*((*_1).0: &mut Url)).7: u32)
    SourceInfo(url/src/path_segments.rs:242:26-242:45)
  5: _7 = move _8 as usize (IntToInt)
    SourceInfo(url/src/path_segments.rs:242:26-242:54)
  6: StorageDead(_8)
    SourceInfo(url/src/path_segments.rs:242:53-242:54)
  7: FakeRead(ForLet(None), _7)
    SourceInfo(url/src/path_segments.rs:242:13-242:23)
  8: StorageLive(_9)
    SourceInfo(url/src/path_segments.rs:243:9-264:11)
  9: StorageLive(_10)
    SourceInfo(url/src/path_segments.rs:243:9-243:17)
  10: _10 = &mut (*((*_1).0: &mut Url))
    SourceInfo(url/src/path_segments.rs:243:9-243:17)
  11: StorageLive(_11)
    SourceInfo(url/src/path_segments.rs:243:25-264:10)
  12: StorageLive(_12)
    SourceInfo(url/src/path_segments.rs:243:25-264:10)
  13: _12 = &_7
    SourceInfo(url/src/path_segments.rs:243:25-264:10)
  14: StorageLive(_13)
    SourceInfo(url/src/path_segments.rs:243:25-264:10)
  15: _13 = &_4
    SourceInfo(url/src/path_segments.rs:243:25-264:10)
  16: _11 = {closure@url/src/path_segments.rs:243:25: 243:33} { segments: move _2, path_start: move _12, scheme_type: move _13 }
    SourceInfo(url/src/path_segments.rs:243:25-264:10)
  17: StorageDead(_13)
    SourceInfo(url/src/path_segments.rs:243:32-243:33)
  18: StorageDead(_12)
    SourceInfo(url/src/path_segments.rs:243:32-243:33)
  Terminator {
      source_info: SourceInfo(url/src/path_segments.rs:243:9-264:11)
      kind: _9 = Url::mutate::<{closure@url/src/path_segments.rs:243:25: 243:33}, ()>(move _10, move _11) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_11)
    SourceInfo(url/src/path_segments.rs:264:10-264:11)
  1: StorageDead(_10)
    SourceInfo(url/src/path_segments.rs:264:10-264:11)
  2: StorageDead(_9)
    SourceInfo(url/src/path_segments.rs:264:11-264:12)
  3: _3 = &mut (*_1)
    SourceInfo(url/src/path_segments.rs:265:9-265:13)
  4: StorageDead(_7)
    SourceInfo(url/src/path_segments.rs:266:5-266:6)
  5: StorageDead(_4)
    SourceInfo(url/src/path_segments.rs:266:5-266:6)
  6: _0 = &mut (*_3)
    SourceInfo(url/src/path_segments.rs:265:9-265:13)
  7: StorageDead(_3)
    SourceInfo(url/src/path_segments.rs:266:5-266:6)
  Terminator {
      source_info: SourceInfo(url/src/path_segments.rs:266:5-266:6)
      kind: drop(_2) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  Terminator {
      source_info: SourceInfo(url/src/path_segments.rs:266:6-266:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(url/src/path_segments.rs:264:10-264:11)
      kind: drop(_11) -> [return: bb6, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(url/src/path_segments.rs:266:5-266:6)
      kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)]
  }
  preds [bb0, bb1, bb5]
  succs [bb7]

bb7
  Terminator {
      source_info: SourceInfo(url/src/path_segments.rs:236:5-266:6)
      kind: resume
  }
  preds [bb3, bb6]
  succs []

