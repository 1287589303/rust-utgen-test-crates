bb0
  0: StorageLive(_3)
    SourceInfo(url/src/lib.rs:2759:9-2759:38)
  1: StorageLive(_4)
    SourceInfo(url/src/lib.rs:2759:9-2759:27)
  2: _4 = &((*_1).0: std::string::String)
    SourceInfo(url/src/lib.rs:2759:9-2759:27)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:2759:9-2759:38)
      kind: _3 = std::string::String::as_bytes(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(url/src/lib.rs:2759:37-2759:38)
  1: StorageLive(_5)
    SourceInfo(url/src/lib.rs:2759:39-2759:49)
  2: StorageLive(_6)
    SourceInfo(url/src/lib.rs:2759:39-2759:40)
  3: _6 = _2
    SourceInfo(url/src/lib.rs:2759:39-2759:40)
  4: _5 = move _6 as usize (IntToInt)
    SourceInfo(url/src/lib.rs:2759:39-2759:49)
  5: StorageDead(_6)
    SourceInfo(url/src/lib.rs:2759:48-2759:49)
  6: _7 = Len((*_3))
    SourceInfo(url/src/lib.rs:2759:9-2759:50)
  7: _8 = Lt(_5, _7)
    SourceInfo(url/src/lib.rs:2759:9-2759:50)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:2759:9-2759:50)
      kind: assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _5) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = (*_3)[_5]
    SourceInfo(url/src/lib.rs:2759:9-2759:50)
  1: StorageDead(_5)
    SourceInfo(url/src/lib.rs:2760:5-2760:6)
  2: StorageDead(_3)
    SourceInfo(url/src/lib.rs:2760:5-2760:6)
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:2760:6-2760:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(url/src/lib.rs:2758:5-2760:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

