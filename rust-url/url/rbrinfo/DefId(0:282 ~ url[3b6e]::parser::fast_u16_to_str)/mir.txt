bb0
  0: StorageLive(_3)
    SourceInfo(url/src/parser.rs:1820:9-1820:18)
  1: StorageLive(_4)
    SourceInfo(url/src/parser.rs:1820:21-1820:27)
  2: StorageLive(_5)
    SourceInfo(url/src/parser.rs:1820:21-1820:27)
  3: _5 = &(*_1)
    SourceInfo(url/src/parser.rs:1820:21-1820:27)
  4: _4 = move _5 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(url/src/parser.rs:1820:21-1820:27)
  5: StorageDead(_5)
    SourceInfo(url/src/parser.rs:1820:26-1820:27)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1820:21-1820:33)
      kind: _3 = core::slice::<impl [u8]>::len(move _4) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: StorageDead(_4)
    SourceInfo(url/src/parser.rs:1820:32-1820:33)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(url/src/parser.rs:1820:9-1820:18)
  2: StorageLive(_6)
    SourceInfo(url/src/parser.rs:1822:5-1829:6)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1822:5-1829:6)
      kind: goto -> bb2
  }
  preds [bb0]
  succs [bb2]

bb2
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1822:5-1829:6)
      kind: falseUnwind -> [real: bb3, unwind: bb13]
  }
  preds [bb1, bb10]
  succs [bb3, bb13]

bb3
  0: _8 = SubWithOverflow(_3, const 1_usize)
    SourceInfo(url/src/parser.rs:1823:9-1823:19)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1823:9-1823:19)
      kind: assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", _3, const 1_usize) -> [success: bb4, unwind: bb13]
  }
  preds [bb2]
  succs [bb4, bb13]

bb4
  0: _3 = move (_8.0: usize)
    SourceInfo(url/src/parser.rs:1823:9-1823:19)
  1: StorageLive(_9)
    SourceInfo(url/src/parser.rs:1824:32-1824:50)
  2: StorageLive(_10)
    SourceInfo(url/src/parser.rs:1824:32-1824:44)
  3: StorageLive(_11)
    SourceInfo(url/src/parser.rs:1824:33-1824:38)
  4: _11 = _2
    SourceInfo(url/src/parser.rs:1824:33-1824:38)
  5: _12 = Eq(const 10_u16, const 0_u16)
    SourceInfo(url/src/parser.rs:1824:32-1824:44)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1824:32-1824:44)
      kind: assert(!move _12, "attempt to calculate the remainder of `{}` with a divisor of zero", _11) -> [success: bb5, unwind: bb13]
  }
  preds [bb3]
  succs [bb5, bb13]

bb5
  0: _10 = Rem(move _11, const 10_u16)
    SourceInfo(url/src/parser.rs:1824:32-1824:44)
  1: StorageDead(_11)
    SourceInfo(url/src/parser.rs:1824:43-1824:44)
  2: _9 = move _10 as u8 (IntToInt)
    SourceInfo(url/src/parser.rs:1824:32-1824:50)
  3: StorageDead(_10)
    SourceInfo(url/src/parser.rs:1824:49-1824:50)
  4: _13 = AddWithOverflow(const 48_u8, _9)
    SourceInfo(url/src/parser.rs:1824:25-1824:50)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1824:25-1824:50)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", const 48_u8, move _9) -> [success: bb6, unwind: bb13]
  }
  preds [bb4]
  succs [bb6, bb13]

bb6
  0: StorageLive(_14)
    SourceInfo(url/src/parser.rs:1824:16-1824:21)
  1: _14 = _3
    SourceInfo(url/src/parser.rs:1824:16-1824:21)
  2: _15 = Len((*_1))
    SourceInfo(url/src/parser.rs:1824:9-1824:22)
  3: _16 = Lt(_14, _15)
    SourceInfo(url/src/parser.rs:1824:9-1824:22)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1824:9-1824:22)
      kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> [success: bb7, unwind: bb13]
  }
  preds [bb5]
  succs [bb7, bb13]

bb7
  0: (*_1)[_14] = move (_13.0: u8)
    SourceInfo(url/src/parser.rs:1824:9-1824:50)
  1: StorageDead(_9)
    SourceInfo(url/src/parser.rs:1824:49-1824:50)
  2: StorageDead(_14)
    SourceInfo(url/src/parser.rs:1824:50-1824:51)
  3: _17 = Eq(const 10_u16, const 0_u16)
    SourceInfo(url/src/parser.rs:1825:9-1825:20)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1825:9-1825:20)
      kind: assert(!move _17, "attempt to divide `{}` by zero", _2) -> [success: bb8, unwind: bb13]
  }
  preds [bb6]
  succs [bb8, bb13]

bb8
  0: _2 = Div(_2, const 10_u16)
    SourceInfo(url/src/parser.rs:1825:9-1825:20)
  1: StorageLive(_18)
    SourceInfo(url/src/parser.rs:1826:12-1826:22)
  2: StorageLive(_19)
    SourceInfo(url/src/parser.rs:1826:12-1826:17)
  3: _19 = _2
    SourceInfo(url/src/parser.rs:1826:12-1826:17)
  4: _18 = Eq(move _19, const 0_u16)
    SourceInfo(url/src/parser.rs:1826:12-1826:22)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1826:12-1826:22)
      kind: switchInt(move _18) -> [0: bb10, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb10]

bb9
  0: StorageDead(_19)
    SourceInfo(url/src/parser.rs:1826:21-1826:22)
  1: _6 = const ()
    SourceInfo(url/src/parser.rs:1827:13-1827:18)
  2: StorageDead(_18)
    SourceInfo(url/src/parser.rs:1828:9-1828:10)
  3: StorageDead(_6)
    SourceInfo(url/src/parser.rs:1829:5-1829:6)
  4: StorageLive(_21)
    SourceInfo(url/src/parser.rs:1833:14-1833:62)
  5: StorageLive(_22)
    SourceInfo(url/src/parser.rs:1833:45-1833:61)
  6: StorageLive(_23)
    SourceInfo(url/src/parser.rs:1833:45-1833:61)
  7: StorageLive(_24)
    SourceInfo(url/src/parser.rs:1833:52-1833:61)
  8: StorageLive(_25)
    SourceInfo(url/src/parser.rs:1833:46-1833:52)
  9: _25 = &(*_1)
    SourceInfo(url/src/parser.rs:1833:46-1833:52)
  10: StorageLive(_26)
    SourceInfo(url/src/parser.rs:1833:53-1833:60)
  11: StorageLive(_27)
    SourceInfo(url/src/parser.rs:1833:53-1833:58)
  12: _27 = _3
    SourceInfo(url/src/parser.rs:1833:53-1833:58)
  13: _26 = core::ops::RangeFrom::<usize> { start: move _27 }
    SourceInfo(url/src/parser.rs:1833:53-1833:60)
  14: StorageDead(_27)
    SourceInfo(url/src/parser.rs:1833:59-1833:60)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1833:52-1833:61)
      kind: _24 = <[u8; 5] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _25, move _26) -> [return: bb11, unwind: bb13]
  }
  preds [bb8]
  succs [bb11, bb13]

bb10
  0: StorageDead(_19)
    SourceInfo(url/src/parser.rs:1826:21-1826:22)
  1: _7 = const ()
    SourceInfo(url/src/parser.rs:1828:10-1828:10)
  2: StorageDead(_18)
    SourceInfo(url/src/parser.rs:1828:9-1828:10)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1822:5-1829:6)
      kind: goto -> bb2
  }
  preds [bb8]
  succs [bb2]

bb11
  0: StorageDead(_26)
    SourceInfo(url/src/parser.rs:1833:60-1833:61)
  1: StorageDead(_25)
    SourceInfo(url/src/parser.rs:1833:60-1833:61)
  2: _23 = &(*_24)
    SourceInfo(url/src/parser.rs:1833:45-1833:61)
  3: _22 = &(*_23)
    SourceInfo(url/src/parser.rs:1833:45-1833:61)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1833:14-1833:62)
      kind: _21 = core::str::from_utf8_unchecked(move _22) -> [return: bb12, unwind: bb13]
  }
  preds [bb9]
  succs [bb12, bb13]

bb12
  0: _0 = &(*_21)
    SourceInfo(url/src/parser.rs:1833:14-1833:62)
  1: StorageDead(_22)
    SourceInfo(url/src/parser.rs:1833:61-1833:62)
  2: StorageDead(_3)
    SourceInfo(url/src/parser.rs:1834:1-1834:2)
  3: StorageDead(_24)
    SourceInfo(url/src/parser.rs:1834:1-1834:2)
  4: StorageDead(_23)
    SourceInfo(url/src/parser.rs:1834:1-1834:2)
  5: StorageDead(_21)
    SourceInfo(url/src/parser.rs:1834:1-1834:2)
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1834:2-1834:2)
      kind: return
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(url/src/parser.rs:1815:1-1834:2)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb4, bb5, bb6, bb7, bb9, bb11]
  succs []

