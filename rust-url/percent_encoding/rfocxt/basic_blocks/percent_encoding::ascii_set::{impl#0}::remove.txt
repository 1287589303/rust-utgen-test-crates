[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = ((*_1).0: [u32; 4]),
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _2,
            _7 = move _8 as usize (IntToInt),
            StorageDead(_8),
            _9 = Eq(const ascii_set::BITS_PER_CHUNK, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:64:56: 64:88 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _9, "attempt to calculate the remainder of `{}` with a divisor of zero", _7) -> [success: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = Rem(move _7, const ascii_set::BITS_PER_CHUNK),
            StorageDead(_7),
            _10 = Lt(_6, const 32_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:64:50: 64:89 (#0),
                    scope: scope[1],
                },
                kind: assert(move _10, "attempt to shift left by `{}`, which would overflow", _6) -> [success: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = Shl(const 1_u32, move _6),
            StorageDead(_6),
            _4 = Not(move _5),
            StorageDead(_5),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _2,
            _12 = move _13 as usize (IntToInt),
            StorageDead(_13),
            _14 = Eq(const ascii_set::BITS_PER_CHUNK, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:64:14: 64:44 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _14, "attempt to divide `{}` by zero", _12) -> [success: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = Div(move _12, const ascii_set::BITS_PER_CHUNK),
            StorageDead(_12),
            _15 = Len(_3),
            _16 = Lt(_11, _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:64:9: 64:45 (#0),
                    scope: scope[1],
                },
                kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _11) -> [success: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3[_11] = BitAnd(_3[_11], move _4),
            StorageDead(_4),
            StorageDead(_11),
            StorageLive(_17),
            _17 = _3,
            _0 = ascii_set::AsciiSet { mask: move _17 },
            StorageDead(_17),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:66:6: 66:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:62:5: 66:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ascii_set::AsciiSet,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:62:45: 62:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ascii_set::AsciiSet,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:62:25: 62:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            percent_encoding/src/ascii_set.rs:62:38: 62:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                percent_encoding/src/ascii_set.rs:62:32: 62:36 (#0),
                            ),
                        ),
                        pat_span: percent_encoding/src/ascii_set.rs:62:32: 62:36 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:62:32: 62:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                percent_encoding/src/ascii_set.rs:63:24: 63:33 (#0),
                            ),
                        ),
                        pat_span: percent_encoding/src/ascii_set.rs:63:13: 63:21 (#0),
                    },
                ),
            ),
        ),
        ty: [u32; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:63:13: 63:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:49: 64:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:50: 64:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:56: 64:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:57: 64:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:57: 64:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:56: 64:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:50: 64:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:14: 64:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:14: 64:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:14: 64:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:14: 64:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:9: 64:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:64:9: 64:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [u32; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:65:20: 65:24 (#0),
            scope: scope[0],
        },
    },
]