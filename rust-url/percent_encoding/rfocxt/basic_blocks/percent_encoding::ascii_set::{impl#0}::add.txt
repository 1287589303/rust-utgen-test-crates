[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = ((*_1).0: [u32; 4]),
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _2,
            _6 = move _7 as usize (IntToInt),
            StorageDead(_7),
            _8 = Eq(const ascii_set::BITS_PER_CHUNK, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:58:54: 58:86 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> [success: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = Rem(move _6, const ascii_set::BITS_PER_CHUNK),
            StorageDead(_6),
            _9 = Lt(_5, const 32_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:58:49: 58:86 (#0),
                    scope: scope[1],
                },
                kind: assert(move _9, "attempt to shift left by `{}`, which would overflow", _5) -> [success: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = Shl(const 1_u32, move _5),
            StorageDead(_5),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _2,
            _11 = move _12 as usize (IntToInt),
            StorageDead(_12),
            _13 = Eq(const ascii_set::BITS_PER_CHUNK, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:58:14: 58:44 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _13, "attempt to divide `{}` by zero", _11) -> [success: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = Div(move _11, const ascii_set::BITS_PER_CHUNK),
            StorageDead(_11),
            _14 = Len(_3),
            _15 = Lt(_10, _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:58:9: 58:45 (#0),
                    scope: scope[1],
                },
                kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _10) -> [success: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3[_10] = BitOr(_3[_10], move _4),
            StorageDead(_4),
            StorageDead(_10),
            StorageLive(_16),
            _16 = _3,
            _0 = ascii_set::AsciiSet { mask: move _16 },
            StorageDead(_16),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:60:6: 60:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:56:5: 60:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ascii_set::AsciiSet,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:56:42: 56:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ascii_set::AsciiSet,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:56:22: 56:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            percent_encoding/src/ascii_set.rs:56:35: 56:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                percent_encoding/src/ascii_set.rs:56:29: 56:33 (#0),
                            ),
                        ),
                        pat_span: percent_encoding/src/ascii_set.rs:56:29: 56:33 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:56:29: 56:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                percent_encoding/src/ascii_set.rs:57:24: 57:33 (#0),
                            ),
                        ),
                        pat_span: percent_encoding/src/ascii_set.rs:57:13: 57:21 (#0),
                    },
                ),
            ),
        ),
        ty: [u32; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:57:13: 57:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:49: 58:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:54: 58:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:55: 58:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:55: 58:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:54: 58:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:49: 58:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:14: 58:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:14: 58:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:14: 58:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:14: 58:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:9: 58:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:58:9: 58:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [u32; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:59:20: 59:24 (#0),
            scope: scope[0],
        },
    },
]