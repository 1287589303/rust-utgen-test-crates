[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = const 0_usize,
            _6 = Len(((*_1).0: [u32; 4])),
            _7 = Lt(_5, _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:81:22: 81:34 (#0),
                    scope: scope[0],
                },
                kind: assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = ((*_1).0: [u32; 4])[_5],
            _3 = Not(move _4),
            StorageDead(_4),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = const 1_usize,
            _11 = Len(((*_1).0: [u32; 4])),
            _12 = Lt(_10, _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:81:37: 81:49 (#0),
                    scope: scope[0],
                },
                kind: assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = ((*_1).0: [u32; 4])[_10],
            _8 = Not(move _9),
            StorageDead(_9),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = const 2_usize,
            _16 = Len(((*_1).0: [u32; 4])),
            _17 = Lt(_15, _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:81:52: 81:64 (#0),
                    scope: scope[0],
                },
                kind: assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = ((*_1).0: [u32; 4])[_15],
            _13 = Not(move _14),
            StorageDead(_14),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = const 3_usize,
            _21 = Len(((*_1).0: [u32; 4])),
            _22 = Lt(_20, _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:81:67: 81:79 (#0),
                    scope: scope[0],
                },
                kind: assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = ((*_1).0: [u32; 4])[_20],
            _18 = Not(move _19),
            StorageDead(_19),
            _2 = [move _3, move _8, move _13, move _18],
            StorageDead(_18),
            StorageDead(_13),
            StorageDead(_8),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_20),
            StorageDead(_15),
            StorageDead(_10),
            StorageDead(_5),
            StorageLive(_23),
            _23 = _2,
            _0 = ascii_set::AsciiSet { mask: move _23 },
            StorageDead(_23),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:83:6: 83:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/ascii_set.rs:80:5: 83:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: ascii_set::AsciiSet,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:80:39: 80:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} ascii_set::AsciiSet,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:80:29: 80:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                percent_encoding/src/ascii_set.rs:81:20: 81:80 (#0),
                            ),
                        ),
                        pat_span: percent_encoding/src/ascii_set.rs:81:13: 81:17 (#0),
                    },
                ),
            ),
        ),
        ty: [u32; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:13: 81:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:21: 81:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:22: 81:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:32: 81:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:22: 81:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:22: 81:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:36: 81:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:37: 81:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:47: 81:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:37: 81:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:37: 81:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:51: 81:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:52: 81:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:62: 81:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:52: 81:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:52: 81:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:66: 81:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:67: 81:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:77: 81:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:67: 81:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:81:67: 81:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [u32; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/ascii_set.rs:82:20: 82:24 (#0),
            scope: scope[0],
        },
    },
]