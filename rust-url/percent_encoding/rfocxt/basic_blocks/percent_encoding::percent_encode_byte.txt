[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/lib.rs:93:17: 93:34 (#0),
                    scope: scope[0],
                },
                kind: _3 = <usize as core::convert::From<u8>>::from(move _4) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _5 = MulWithOverflow(_3, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/lib.rs:93:17: 93:38 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, const 3_usize) -> [success: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move (_5.0: usize),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = const {alloc5: &&[u8; 768]},
            _10 = &(*(*_11)),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _2,
            StorageLive(_14),
            StorageLive(_15),
            _15 = _2,
            _16 = AddWithOverflow(_15, const 3_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/lib.rs:96:57: 96:66 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 3_usize) -> [success: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = move (_16.0: usize),
            StorageDead(_15),
            _12 = core::ops::Range::<usize> { start: move _13, end: move _14 },
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/lib.rs:96:49: 96:67 (#0),
                    scope: scope[1],
                },
                kind: _9 = <[u8; 768] as core::ops::Index<core::ops::Range<usize>>>::index(move _10, move _12) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            _8 = &(*_9),
            _7 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/lib.rs:96:14: 96:68 (#0),
                    scope: scope[1],
                },
                kind: _6 = core::str::from_utf8_unchecked(move _7) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = &(*_6),
            StorageDead(_7),
            StorageDead(_2),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/lib.rs:97:2: 97:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: percent_encoding/src/lib.rs:73:1: 97:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:73:41: 73:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            percent_encoding/src/lib.rs:73:34: 73:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                percent_encoding/src/lib.rs:73:28: 73:32 (#0),
                            ),
                        ),
                        pat_span: percent_encoding/src/lib.rs:73:28: 73:32 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:73:28: 73:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                percent_encoding/src/lib.rs:93:17: 93:38 (#0),
                            ),
                        ),
                        pat_span: percent_encoding/src/lib.rs:93:9: 93:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:93:9: 93:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:93:17: 93:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:93:29: 93:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:93:17: 93:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: percent_encoding/src/lib.rs:96:14: 96:68 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:14: 96:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: percent_encoding/src/lib.rs:96:14: 96:68 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:39: 96:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: percent_encoding/src/lib.rs:96:14: 96:68 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:39: 96:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: percent_encoding/src/lib.rs:96:14: 96:68 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:49: 96:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: percent_encoding/src/lib.rs:96:14: 96:68 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8; 768_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:40: 96:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            StaticRef {
                def_id: DefId(0:46 ~ percent_encoding[f6c5]::percent_encode_byte::ENC_TABLE),
                is_thread_local: false,
            },
        ),
        ty: &'{erased} &'{erased} [u8; 768_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:40: 96:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: percent_encoding/src/lib.rs:96:14: 96:68 (#0),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:50: 96:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:50: 96:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:57: 96:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: percent_encoding/src/lib.rs:96:14: 96:68 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:57: 96:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: percent_encoding/src/lib.rs:96:57: 96:66 (#0),
            scope: scope[0],
        },
    },
]