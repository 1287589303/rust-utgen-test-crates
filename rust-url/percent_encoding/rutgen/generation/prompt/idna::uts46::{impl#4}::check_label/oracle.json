{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\npub struct Uts46 {\n    data: idna_adapter::Adapter,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[non_exhaustive]\npub enum Hyphens {\n    /// _CheckHyphens=false_: Do not place positional restrictions on hyphens.\n    ///\n    /// This mode is used by the WHATWG URL Standard for normal User Agent processing\n    /// (i.e. not conformance checking).\n    Allow,\n    /// Prohibit hyphens in the first and last position in the label but allow in\n    /// the third and fourth position.\n    ///\n    /// Note that this mode rejects real-world names, including some GitHub user pages.\n    CheckFirstLast,\n    /// _CheckHyphens=true_: Prohibit hyphens in the first, third, fourth,\n    /// and last position in the label.\n    ///\n    /// Note that this mode rejects real-world names, including YouTube CDN nodes\n    /// and some GitHub user pages.\n    Check,\n}\nimpl Uts46 {\n    #[cfg(feature = \"compiled_data\")]\n    pub const fn new() -> Self {\n        Self {\n            data: idna_adapter::Adapter::new(),\n        }\n    }\n    pub fn to_ascii<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        dns_length: DnsLength,\n    ) -> Result<Cow<'a, str>, crate::Errors> {}\n    pub fn to_unicode<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {}\n    pub fn to_user_interface<'a, OutputUnicode: FnMut(&[char], &[char], bool) -> bool>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        output_as_unicode: OutputUnicode,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {}\n    #[allow(clippy::too_many_arguments)]\n    pub fn process<\n        W: Write + ?Sized,\n        OutputUnicode: FnMut(&[char], &[char], bool) -> bool,\n    >(\n        &self,\n        domain_name: &[u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        error_policy: ErrorPolicy,\n        mut output_as_unicode: OutputUnicode,\n        sink: &mut W,\n        ascii_sink: Option<&mut W>,\n    ) -> Result<ProcessingSuccess, ProcessingError> {}\n    #[inline(always)]\n    fn process_inner<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n    ) -> (usize, bool, bool) {}\n    #[allow(clippy::too_many_arguments)]\n    #[inline(never)]\n    fn process_innermost<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n        tail: &'a [u8],\n    ) -> (usize, bool, bool) {}\n    #[inline(never)]\n    fn after_punycode_decode(\n        &self,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        current_label_start: usize,\n        label_buffer: &[char],\n        deny_list_deny_dot: u128,\n        fail_fast: bool,\n        had_errors: &mut bool,\n    ) -> bool {}\n    #[inline(never)]\n    fn check_label(\n        &self,\n        hyphens: Hyphens,\n        mut_label: &mut [char],\n        fail_fast: bool,\n        had_errors: &mut bool,\n        first_needs_combining_mark_check: bool,\n        needs_contextj_check: bool,\n    ) -> bool {\n        if hyphens != Hyphens::Allow\n            && check_hyphens(\n                mut_label,\n                hyphens == Hyphens::CheckFirstLast,\n                fail_fast,\n                had_errors,\n            )\n        {\n            return true;\n        }\n        if first_needs_combining_mark_check {\n            if let Some(first) = mut_label.first_mut() {\n                if self.data.is_mark(*first) {\n                    if fail_fast {\n                        return true;\n                    }\n                    *had_errors = true;\n                    *first = '\\u{FFFD}';\n                }\n            }\n        }\n        if needs_contextj_check {\n            for i in 0..mut_label.len() {\n                let c = mut_label[i];\n                if !in_inclusive_range_char(c, '\\u{200C}', '\\u{200D}') {\n                    continue;\n                }\n                let (head, joiner_and_tail) = mut_label.split_at_mut(i);\n                if let Some((joiner, tail)) = joiner_and_tail.split_first_mut() {\n                    if let Some(previous) = head.last() {\n                        if self.data.is_virama(*previous) {\n                            continue;\n                        }\n                    } else {\n                        if fail_fast {\n                            return true;\n                        }\n                        *had_errors = true;\n                        *joiner = '\\u{FFFD}';\n                        continue;\n                    }\n                    if c == '\\u{200D}' {\n                        if fail_fast {\n                            return true;\n                        }\n                        *had_errors = true;\n                        *joiner = '\\u{FFFD}';\n                        continue;\n                    }\n                    debug_assert_eq!(c, '\\u{200C}');\n                    if !self\n                        .has_appropriately_joining_char(\n                            head.iter().rev().copied(),\n                            LEFT_OR_DUAL_JOINING_MASK,\n                        )\n                        || !self\n                            .has_appropriately_joining_char(\n                                tail.iter().copied(),\n                                RIGHT_OR_DUAL_JOINING_MASK,\n                            )\n                    {\n                        if fail_fast {\n                            return true;\n                        }\n                        *had_errors = true;\n                        *joiner = '\\u{FFFD}';\n                    }\n                } else {\n                    debug_assert!(false);\n                }\n            }\n        }\n        if !is_ascii(mut_label) && mut_label.len() > PUNYCODE_ENCODE_MAX_INPUT_LENGTH {\n            if fail_fast {\n                return true;\n            }\n            *had_errors = true;\n            mut_label[PUNYCODE_ENCODE_MAX_INPUT_LENGTH] = '\\u{FFFD}';\n        }\n        false\n    }\n    #[inline(always)]\n    fn has_appropriately_joining_char<I: Iterator<Item = char>>(\n        &self,\n        iter: I,\n        required_mask: JoiningTypeMask,\n    ) -> bool {}\n    #[inline(always)]\n    fn is_bidi(&self, buffer: &[char]) -> bool {}\n}\n#[inline(always)]\nfn is_ascii(label: &[char]) -> bool {\n    for c in label.iter() {\n        if !c.is_ascii() {\n            return false;\n        }\n    }\n    true\n}\n#[inline(always)]\nfn in_inclusive_range_char(c: char, start: char, end: char) -> bool {\n    u32::from(c).wrapping_sub(u32::from(start)) <= (u32::from(end) - u32::from(start))\n}\nfn check_hyphens(\n    mut_label: &mut [char],\n    allow_third_fourth: bool,\n    fail_fast: bool,\n    had_errors: &mut bool,\n) -> bool {\n    if let Some(first) = mut_label.first_mut() {\n        if *first == '-' {\n            if fail_fast {\n                return true;\n            }\n            *had_errors = true;\n            *first = '\\u{FFFD}';\n        }\n    }\n    if let Some(last) = mut_label.last_mut() {\n        if *last == '-' {\n            if fail_fast {\n                return true;\n            }\n            *had_errors = true;\n            *last = '\\u{FFFD}';\n        }\n    }\n    if allow_third_fourth {\n        return false;\n    }\n    if mut_label.len() >= 4 && mut_label[2] == '-' && mut_label[3] == '-' {\n        if fail_fast {\n            return true;\n        }\n        *had_errors = true;\n        mut_label[2] = '\\u{FFFD}';\n        mut_label[3] = '\\u{FFFD}';\n    }\n    false\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1525 fn check_label(\n1526     &self,\n1527     hyphens: Hyphens,\n1528     mut_label: &mut [char],\n1529     fail_fast: bool,\n1530     had_errors: &mut bool,\n1531     first_needs_combining_mark_check: bool,\n1532     needs_contextj_check: bool,\n1533 ) -> bool {\n1534     if hyphens != Hyphens::Allow\n1535         && check_hyphens(\n1536             mut_label,\n1537             hyphens == Hyphens::CheckFirstLast,\n1538             fail_fast,\n1539             had_errors,\n1540         )\n1541     {\n1542         return true;\n1543     }\n1544     if first_needs_combining_mark_check {\n1545         if let Some(first) = mut_label.first_mut() {\n1546             if self.data.is_mark(*first) {\n1547                 if fail_fast {\n1548                     return true;\n1549                 }\n1550                 *had_errors = true;\n1551                 *first = '\\u{FFFD}';\n1552             }\n1553         }\n1554     }\n1555     if needs_contextj_check {\n1556         // ContextJ\n1557         for i in 0..mut_label.len() {\n1558             let c = mut_label[i];\n1559             if !in_inclusive_range_char(c, '\\u{200C}', '\\u{200D}') {\n1560                 continue;\n1561             }\n1562             let (head, joiner_and_tail) = mut_label.split_at_mut(i);\n1563 \n1564             if let Some((joiner, tail)) = joiner_and_tail.split_first_mut() {\n1565                 if let Some(previous) = head.last() {\n1566                     if self.data.is_virama(*previous) {\n1567                         continue;\n1568                     }\n1569                 } else {\n1570                     // No preceding character\n1571                     if fail_fast {\n1572                         return true;\n1573                     }\n1574                     *had_errors = true;\n1575                     *joiner = '\\u{FFFD}';\n1576                     continue;\n1577                 }\n1578                 if c == '\\u{200D}' {\n1579                     // ZWJ only has the virama rule\n1580                     if fail_fast {\n1581                         return true;\n1582                     }\n1583                     *had_errors = true;\n1584                     *joiner = '\\u{FFFD}';\n1585                     continue;\n1586                 }\n1587                 debug_assert_eq!(c, '\\u{200C}');\n1588                 if !self.has_appropriately_joining_char(\n1589                     head.iter().rev().copied(),\n1590                     LEFT_OR_DUAL_JOINING_MASK,\n1591                 ) || !self.has_appropriately_joining_char(\n1592                     tail.iter().copied(),\n1593                     RIGHT_OR_DUAL_JOINING_MASK,\n1594                 ) {\n1595                     if fail_fast {\n1596                         return true;\n1597                     }\n1598                     *had_errors = true;\n1599                     *joiner = '\\u{FFFD}';\n1600                 }\n1601             } else {\n1602                 debug_assert!(false);\n1603             }\n1604         }\n1605     }\n1606 \n1607     if !is_ascii(mut_label) && mut_label.len() > PUNYCODE_ENCODE_MAX_INPUT_LENGTH {\n1608         // Limit quadratic behavior\n1609         // https://github.com/whatwg/url/issues/824\n1610         // https://unicode-org.atlassian.net/browse/ICU-13727\n1611         if fail_fast {\n1612             return true;\n1613         }\n1614         *had_errors = true;\n1615         mut_label[PUNYCODE_ENCODE_MAX_INPUT_LENGTH] = '\\u{FFFD}';\n1616     }\n1617     false\n1618 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}