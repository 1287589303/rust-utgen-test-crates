{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/punycode.rs\n// crate name is idna\nuse alloc::{string::String, vec::Vec};\nuse core::char;\nuse core::fmt::Write;\nuse core::marker::PhantomData;\nconst BASE: u32 = 36;\nconst T_MIN: u32 = 1;\nconst T_MAX: u32 = 26;\nconst SKEW: u32 = 38;\nconst DAMP: u32 = 700;\nconst INITIAL_BIAS: u32 = 72;\nconst INITIAL_N: u32 = 0x80;\npub(crate) enum PunycodeEncodeError {\n    Overflow,\n    Sink,\n}\npub fn encode(input: &[char]) -> Option<String> {\n    if input.len() > u32::MAX as usize {\n        return None;\n    }\n    let mut buf = String::with_capacity(input.len());\n    encode_into::<_, _, ExternalCaller>(input.iter().copied(), &mut buf)\n        .ok()\n        .map(|()| buf)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Convert Unicode to Punycode.\n///\n/// Return None on overflow, which can only happen on inputs that would take more than\n/// 63 encoded bytes, the DNS limit on domain name labels.\n336 pub fn encode(input: &[char]) -> Option<String> {\n337     if input.len() > u32::MAX as usize {\n338         return None;\n339     }\n340     let mut buf = String::with_capacity(input.len());\n341     encode_into::<_, _, ExternalCaller>(input.iter().copied(), &mut buf)\n342         .ok()\n343         .map(|()| buf)\n344 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}