{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[repr(transparent)]\npub struct AsciiDenyList {\n    bits: u128,\n}\nimpl AsciiDenyList {\n    pub const EMPTY: AsciiDenyList = AsciiDenyList::new(false, \"\");\n    pub const STD3: AsciiDenyList = AsciiDenyList { bits: ldh_mask() };\n    pub const URL: AsciiDenyList = AsciiDenyList::new(true, \"%#/:<>?@[\\\\]^|\");\n    pub const fn new(deny_glyphless: bool, deny_list: &str) -> Self {\n        let mut bits = UPPER_CASE_MASK;\n        if deny_glyphless {\n            bits |= GLYPHLESS_MASK;\n        }\n        let mut i = 0;\n        let bytes = deny_list.as_bytes();\n        while i < bytes.len() {\n            let b = bytes[i];\n            assert!(b < 0x80, \"ASCII deny list must be ASCII.\");\n            assert!(b != b'.', \"ASCII deny list must not contain the dot.\");\n            assert!(b != b'-', \"ASCII deny list must not contain the hyphen.\");\n            assert!(\n                ! ((b >= b'0') && (b <= b'9')),\n                \"ASCII deny list must not contain digits.\"\n            );\n            assert!(\n                ! ((b >= b'a') && (b <= b'z')),\n                \"ASCII deny list must not contain letters.\"\n            );\n            assert!(\n                ! ((b >= b'A') && (b <= b'Z')),\n                \"ASCII deny list must not contain letters.\"\n            );\n            bits |= 1u128 << b;\n            i += 1;\n        }\n        AsciiDenyList { bits }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Computes (preferably at compile time) an ASCII deny list.\n///\n/// Setting `deny_glyphless` to `true` denies U+0020 SPACE and below\n/// as well as U+007F DELETE for convenience without having to list\n/// these characters in the `deny_list` string.\n///\n/// `deny_list` is the list of ASCII characters to deny. This\n/// list must not contain any of:\n/// * Letters\n/// * Digits\n/// * Hyphen\n/// * Dot (period / full-stop)\n/// * Non-ASCII\n///\n/// # Panics\n///\n/// If the deny list contains characters listed as prohibited above.\n294 pub const fn new(deny_glyphless: bool, deny_list: &str) -> Self {\n295     let mut bits = UPPER_CASE_MASK;\n296     if deny_glyphless {\n297         bits |= GLYPHLESS_MASK;\n298     }\n299     let mut i = 0;\n300     let bytes = deny_list.as_bytes();\n301     while i < bytes.len() {\n302         let b = bytes[i];\n303         assert!(b < 0x80, \"ASCII deny list must be ASCII.\");\n304         // assert_ne not yet available in const context.\n305         assert!(b != b'.', \"ASCII deny list must not contain the dot.\");\n306         assert!(b != b'-', \"ASCII deny list must not contain the hyphen.\");\n307         assert!(\n308             !((b >= b'0') && (b <= b'9')),\n309             \"ASCII deny list must not contain digits.\"\n310         );\n311         assert!(\n312             !((b >= b'a') && (b <= b'z')),\n313             \"ASCII deny list must not contain letters.\"\n314         );\n315         assert!(\n316             !((b >= b'A') && (b <= b'Z')),\n317             \"ASCII deny list must not contain letters.\"\n318         );\n319         bits |= 1u128 << b;\n320         i += 1;\n321     }\n322     AsciiDenyList { bits }\n323 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}