{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[repr(transparent)]\npub struct AsciiDenyList {\n    bits: u128,\n}\nimpl AsciiDenyList {\n    pub const EMPTY: AsciiDenyList = AsciiDenyList::new(false, \"\");\n    pub const STD3: AsciiDenyList = AsciiDenyList { bits: ldh_mask() };\n    pub const URL: AsciiDenyList = AsciiDenyList::new(true, \"%#/:<>?@[\\\\]^|\");\n    pub const fn new(deny_glyphless: bool, deny_list: &str) -> Self {\n        let mut bits = UPPER_CASE_MASK;\n        if deny_glyphless {\n            bits |= GLYPHLESS_MASK;\n        }\n        let mut i = 0;\n        let bytes = deny_list.as_bytes();\n        while i < bytes.len() {\n            let b = bytes[i];\n            assert!(b < 0x80, \"ASCII deny list must be ASCII.\");\n            assert!(b != b'.', \"ASCII deny list must not contain the dot.\");\n            assert!(b != b'-', \"ASCII deny list must not contain the hyphen.\");\n            assert!(\n                ! ((b >= b'0') && (b <= b'9')),\n                \"ASCII deny list must not contain digits.\"\n            );\n            assert!(\n                ! ((b >= b'a') && (b <= b'z')),\n                \"ASCII deny list must not contain letters.\"\n            );\n            assert!(\n                ! ((b >= b'A') && (b <= b'Z')),\n                \"ASCII deny list must not contain letters.\"\n            );\n            bits |= 1u128 << b;\n            i += 1;\n        }\n        AsciiDenyList { bits }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Computes (preferably at compile time) an ASCII deny list.\n///\n/// Setting `deny_glyphless` to `true` denies U+0020 SPACE and below\n/// as well as U+007F DELETE for convenience without having to list\n/// these characters in the `deny_list` string.\n///\n/// `deny_list` is the list of ASCII characters to deny. This\n/// list must not contain any of:\n/// * Letters\n/// * Digits\n/// * Hyphen\n/// * Dot (period / full-stop)\n/// * Non-ASCII\n///\n/// # Panics\n///\n/// If the deny list contains characters listed as prohibited above.\n294 pub const fn new(deny_glyphless: bool, deny_list: &str) -> Self {\n295     let mut bits = UPPER_CASE_MASK;\n296     if deny_glyphless {\n297         bits |= GLYPHLESS_MASK;\n298     }\n299     let mut i = 0;\n300     let bytes = deny_list.as_bytes();\n301     while i < bytes.len() {\n302         let b = bytes[i];\n303         assert!(b < 0x80, \"ASCII deny list must be ASCII.\");\n304         // assert_ne not yet available in const context.\n305         assert!(b != b'.', \"ASCII deny list must not contain the dot.\");\n306         assert!(b != b'-', \"ASCII deny list must not contain the hyphen.\");\n307         assert!(\n308             !((b >= b'0') && (b <= b'9')),\n309             \"ASCII deny list must not contain digits.\"\n310         );\n311         assert!(\n312             !((b >= b'a') && (b <= b'z')),\n313             \"ASCII deny list must not contain letters.\"\n314         );\n315         assert!(\n316             !((b >= b'A') && (b <= b'Z')),\n317             \"ASCII deny list must not contain letters.\"\n318         );\n319         bits |= 1u128 << b;\n320         i += 1;\n321     }\n322     AsciiDenyList { bits }\n323 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}