{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/punycode.rs\n// crate name is idna\nuse alloc::{string::String, vec::Vec};\nuse core::char;\nuse core::fmt::Write;\nuse core::marker::PhantomData;\nconst BASE: u32 = 36;\nconst T_MIN: u32 = 1;\nconst T_MAX: u32 = 26;\nconst SKEW: u32 = 38;\nconst DAMP: u32 = 700;\nconst INITIAL_BIAS: u32 = 72;\nconst INITIAL_N: u32 = 0x80;\npub(crate) trait PunycodeCodeUnit {\n    fn is_delimiter(&self) -> bool;\n    fn is_ascii(&self) -> bool;\n    fn digit(&self) -> Option<u32>;\n    fn char(&self) -> char;\n    fn char_ascii_lower_case(&self) -> char;\n}\npub(crate) trait PunycodeCaller {\n    const EXTERNAL_CALLER: bool;\n}\npub(crate) struct Decode<'a, T, C>\nwhere\n    T: PunycodeCodeUnit + Copy,\n    C: PunycodeCaller,\n{\n    base: core::slice::Iter<'a, T>,\n    pub(crate) insertions: &'a [(usize, char)],\n    inserted: usize,\n    position: usize,\n    len: usize,\n    phantom: PhantomData<C>,\n}\nimpl<T: PunycodeCodeUnit + Copy, C: PunycodeCaller> Iterator for Decode<'_, T, C> {\n    type Item = char;\n    fn next(&mut self) -> Option<Self::Item> {\n        loop {\n            match self.insertions.get(self.inserted) {\n                Some((pos, c)) if *pos == self.position => {\n                    self.inserted += 1;\n                    self.position += 1;\n                    return Some(*c);\n                }\n                _ => {}\n            }\n            if let Some(c) = self.base.next() {\n                self.position += 1;\n                return Some(\n                    if C::EXTERNAL_CALLER { c.char() } else { c.char_ascii_lower_case() },\n                );\n            } else if self.inserted >= self.insertions.len() {\n                return None;\n            }\n        }\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n283 fn next(&mut self) -> Option<Self::Item> {\n284     loop {\n285         match self.insertions.get(self.inserted) {\n286             Some((pos, c)) if *pos == self.position => {\n287                 self.inserted += 1;\n288                 self.position += 1;\n289                 return Some(*c);\n290             }\n291             _ => {}\n292         }\n293         if let Some(c) = self.base.next() {\n294             self.position += 1;\n295             return Some(if C::EXTERNAL_CALLER {\n296                 c.char()\n297             } else {\n298                 c.char_ascii_lower_case()\n299             });\n300         } else if self.inserted >= self.insertions.len() {\n301             return None;\n302         }\n303     }\n304 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}