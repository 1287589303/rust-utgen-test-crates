{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/punycode.rs\n// crate name is idna\nuse alloc::{string::String, vec::Vec};\nuse core::char;\nuse core::fmt::Write;\nuse core::marker::PhantomData;\nconst BASE: u32 = 36;\nconst T_MIN: u32 = 1;\nconst T_MAX: u32 = 26;\nconst SKEW: u32 = 38;\nconst DAMP: u32 = 700;\nconst INITIAL_BIAS: u32 = 72;\nconst INITIAL_N: u32 = 0x80;\npub(crate) trait PunycodeCodeUnit {\n    fn is_delimiter(&self) -> bool;\n    fn is_ascii(&self) -> bool;\n    fn digit(&self) -> Option<u32>;\n    fn char(&self) -> char;\n    fn char_ascii_lower_case(&self) -> char;\n}\nimpl PunycodeCodeUnit for u8 {\n    fn is_delimiter(&self) -> bool {}\n    fn is_ascii(&self) -> bool {}\n    fn digit(&self) -> Option<u32> {\n        let byte = *self;\n        Some(\n            match byte {\n                byte @ b'0'..=b'9' => byte - b'0' + 26,\n                byte @ b'A'..=b'Z' => byte - b'A',\n                byte @ b'a'..=b'z' => byte - b'a',\n                _ => return None,\n            } as u32,\n        )\n    }\n    fn char(&self) -> char {\n        char::from(*self)\n    }\n    fn char_ascii_lower_case(&self) -> char {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n115 fn digit(&self) -> Option<u32> {\n116     let byte = *self;\n117     Some(match byte {\n118         byte @ b'0'..=b'9' => byte - b'0' + 26,\n119         byte @ b'A'..=b'Z' => byte - b'A',\n120         byte @ b'a'..=b'z' => byte - b'a',\n121         _ => return None,\n122     } as u32)\n123 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}