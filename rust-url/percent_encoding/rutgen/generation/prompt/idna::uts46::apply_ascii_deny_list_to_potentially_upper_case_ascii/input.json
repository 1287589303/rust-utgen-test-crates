{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\n#[inline(always)]\nfn apply_ascii_deny_list_to_potentially_upper_case_ascii(\n    b: u8,\n    deny_list: u128,\n) -> char {\n    if (deny_list & (1u128 << b)) == 0 {\n        return char::from(b);\n    }\n    if in_inclusive_range8(b, b'A', b'Z') {\n        return char::from(b + 0x20);\n    }\n    '\\u{FFFD}'\n}\n#[inline(always)]\nfn in_inclusive_range8(u: u8, start: u8, end: u8) -> bool {\n    u.wrapping_sub(start) <= (end - start)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n220 fn apply_ascii_deny_list_to_potentially_upper_case_ascii(b: u8, deny_list: u128) -> char {\n221     if (deny_list & (1u128 << b)) == 0 {\n222         return char::from(b);\n223     }\n224     if in_inclusive_range8(b, b'A', b'Z') {\n225         return char::from(b + 0x20);\n226     }\n227     '\\u{FFFD}'\n228 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}