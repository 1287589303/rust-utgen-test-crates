{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/deprecated.rs\n// crate name is idna\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse crate::uts46::*;\nuse crate::Errors;\n#[derive(Clone, Copy)]\n#[must_use]\n#[deprecated]\npub struct Config {\n    use_std3_ascii_rules: bool,\n    transitional_processing: bool,\n    verify_dns_length: bool,\n    check_hyphens: bool,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[repr(transparent)]\npub struct AsciiDenyList {\n    bits: u128,\n}\nimpl Config {\n    #[inline]\n    pub fn use_std3_ascii_rules(mut self, value: bool) -> Self {\n        self.use_std3_ascii_rules = value;\n        self\n    }\n    #[inline]\n    pub fn transitional_processing(mut self, value: bool) -> Self {\n        self.transitional_processing = value;\n        self\n    }\n    #[inline]\n    pub fn verify_dns_length(mut self, value: bool) -> Self {\n        self.verify_dns_length = value;\n        self\n    }\n    #[inline]\n    pub fn check_hyphens(mut self, value: bool) -> Self {\n        self.check_hyphens = value;\n        self\n    }\n    #[inline]\n    #[allow(unused_mut)]\n    pub fn use_idna_2008_rules(mut self, value: bool) -> Self {\n        assert!(! value, \"IDNA 2008 rules are no longer supported\");\n        self\n    }\n    fn deny_list(&self) -> AsciiDenyList {\n        if self.use_std3_ascii_rules {\n            AsciiDenyList::STD3\n        } else {\n            AsciiDenyList::EMPTY\n        }\n    }\n    fn hyphens(&self) -> Hyphens {}\n    pub fn to_ascii(self, domain: &str) -> Result<String, Errors> {}\n    pub fn to_unicode(self, domain: &str) -> (String, Result<(), Errors>) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Compute the deny list\n217 fn deny_list(&self) -> AsciiDenyList {\n218     if self.use_std3_ascii_rules {\n219         AsciiDenyList::STD3\n220     } else {\n221         AsciiDenyList::EMPTY\n222     }\n223 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}