{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\nfn check_hyphens(\n    mut_label: &mut [char],\n    allow_third_fourth: bool,\n    fail_fast: bool,\n    had_errors: &mut bool,\n) -> bool {\n    if let Some(first) = mut_label.first_mut() {\n        if *first == '-' {\n            if fail_fast {\n                return true;\n            }\n            *had_errors = true;\n            *first = '\\u{FFFD}';\n        }\n    }\n    if let Some(last) = mut_label.last_mut() {\n        if *last == '-' {\n            if fail_fast {\n                return true;\n            }\n            *had_errors = true;\n            *last = '\\u{FFFD}';\n        }\n    }\n    if allow_third_fourth {\n        return false;\n    }\n    if mut_label.len() >= 4 && mut_label[2] == '-' && mut_label[3] == '-' {\n        if fail_fast {\n            return true;\n        }\n        *had_errors = true;\n        mut_label[2] = '\\u{FFFD}';\n        mut_label[3] = '\\u{FFFD}';\n    }\n    false\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1667 fn check_hyphens(\n1668     mut_label: &mut [char],\n1669     allow_third_fourth: bool,\n1670     fail_fast: bool,\n1671     had_errors: &mut bool,\n1672 ) -> bool {\n1673     if let Some(first) = mut_label.first_mut() {\n1674         if *first == '-' {\n1675             if fail_fast {\n1676                 return true;\n1677             }\n1678             *had_errors = true;\n1679             *first = '\\u{FFFD}';\n1680         }\n1681     }\n1682     if let Some(last) = mut_label.last_mut() {\n1683         if *last == '-' {\n1684             if fail_fast {\n1685                 return true;\n1686             }\n1687             *had_errors = true;\n1688             *last = '\\u{FFFD}';\n1689         }\n1690     }\n1691     if allow_third_fourth {\n1692         return false;\n1693     }\n1694     if mut_label.len() >= 4 && mut_label[2] == '-' && mut_label[3] == '-' {\n1695         if fail_fast {\n1696             return true;\n1697         }\n1698         *had_errors = true;\n1699         mut_label[2] = '\\u{FFFD}';\n1700         mut_label[3] = '\\u{FFFD}';\n1701     }\n1702     false\n1703 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}