{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\npub fn verify_dns_length(domain_name: &str, allow_trailing_dot: bool) -> bool {\n    let bytes = domain_name.as_bytes();\n    debug_assert!(bytes.is_ascii());\n    let domain_name_without_trailing_dot = if let Some(without) = bytes\n        .strip_suffix(b\".\")\n    {\n        if !allow_trailing_dot {\n            return false;\n        }\n        without\n    } else {\n        bytes\n    };\n    if domain_name_without_trailing_dot.len() > 253 {\n        return false;\n    }\n    for label in domain_name_without_trailing_dot.split(|b| *b == b'.') {\n        if label.is_empty() {\n            return false;\n        }\n        if label.len() > 63 {\n            return false;\n        }\n    }\n    true\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Performs the _VerifyDNSLength_ check on the output of the _ToASCII_ operation.\n///\n/// If the second argument is `false`, the trailing root label dot is allowed.\n///\n/// # Panics\n///\n/// Panics in debug mode if the argument isn't ASCII.\n463 pub fn verify_dns_length(domain_name: &str, allow_trailing_dot: bool) -> bool {\n464     let bytes = domain_name.as_bytes();\n465     debug_assert!(bytes.is_ascii());\n466     let domain_name_without_trailing_dot = if let Some(without) = bytes.strip_suffix(b\".\") {\n467         if !allow_trailing_dot {\n468             return false;\n469         }\n470         without\n471     } else {\n472         bytes\n473     };\n474     if domain_name_without_trailing_dot.len() > 253 {\n475         return false;\n476     }\n477     for label in domain_name_without_trailing_dot.split(|b| *b == b'.') {\n478         if label.is_empty() {\n479             return false;\n480         }\n481         if label.len() > 63 {\n482             return false;\n483         }\n484     }\n485     true\n486 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}