{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/lib.rs\n// crate name is idna\nuse alloc::borrow::Cow;\nuse alloc::string::String;\npub use uts46::AsciiDenyList;\nuse uts46::Uts46;\n#[allow(deprecated)]\npub use crate::deprecated::{Config, Idna};\npub struct Uts46 {\n    data: idna_adapter::Adapter,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[repr(transparent)]\npub struct AsciiDenyList {\n    bits: u128,\n}\n#[derive(Default, Debug)]\n#[non_exhaustive]\npub struct Errors {}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[non_exhaustive]\npub enum Hyphens {\n    /// _CheckHyphens=false_: Do not place positional restrictions on hyphens.\n    ///\n    /// This mode is used by the WHATWG URL Standard for normal User Agent processing\n    /// (i.e. not conformance checking).\n    Allow,\n    /// Prohibit hyphens in the first and last position in the label but allow in\n    /// the third and fourth position.\n    ///\n    /// Note that this mode rejects real-world names, including some GitHub user pages.\n    CheckFirstLast,\n    /// _CheckHyphens=true_: Prohibit hyphens in the first, third, fourth,\n    /// and last position in the label.\n    ///\n    /// Note that this mode rejects real-world names, including YouTube CDN nodes\n    /// and some GitHub user pages.\n    Check,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[non_exhaustive]\npub enum DnsLength {\n    /// _VerifyDNSLength=false_. (Possibly relevant for allowing non-DNS naming systems.)\n    Ignore,\n    /// _VerifyDNSLength=true_ with the exception that the trailing root label dot is\n    /// allowed.\n    VerifyAllowRootDot,\n    /// _VerifyDNSLength=true_. (The trailing root label dot is not allowed.)\n    Verify,\n}\nimpl Uts46 {\n    #[cfg(feature = \"compiled_data\")]\n    pub const fn new() -> Self {\n        Self {\n            data: idna_adapter::Adapter::new(),\n        }\n    }\n    pub fn to_ascii<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        dns_length: DnsLength,\n    ) -> Result<Cow<'a, str>, crate::Errors> {\n        let mut s = String::new();\n        match self\n            .process(\n                domain_name,\n                ascii_deny_list,\n                hyphens,\n                ErrorPolicy::FailFast,\n                |_, _, _| false,\n                &mut s,\n                None,\n            )\n        {\n            Ok(ProcessingSuccess::Passthrough) => {\n                let cow = Cow::Borrowed(unsafe {\n                    core::str::from_utf8_unchecked(domain_name)\n                });\n                if dns_length != DnsLength::Ignore\n                    && !verify_dns_length(\n                        &cow,\n                        dns_length == DnsLength::VerifyAllowRootDot,\n                    )\n                {\n                    Err(crate::Errors::default())\n                } else {\n                    Ok(cow)\n                }\n            }\n            Ok(ProcessingSuccess::WroteToSink) => {\n                let cow: Cow<'_, str> = Cow::Owned(s);\n                if dns_length != DnsLength::Ignore\n                    && !verify_dns_length(\n                        &cow,\n                        dns_length == DnsLength::VerifyAllowRootDot,\n                    )\n                {\n                    Err(crate::Errors::default())\n                } else {\n                    Ok(cow)\n                }\n            }\n            Err(ProcessingError::ValidityError) => Err(crate::Errors::default()),\n            Err(ProcessingError::SinkError) => unreachable!(),\n        }\n    }\n    pub fn to_unicode<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {}\n    pub fn to_user_interface<'a, OutputUnicode: FnMut(&[char], &[char], bool) -> bool>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        output_as_unicode: OutputUnicode,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {}\n    #[allow(clippy::too_many_arguments)]\n    pub fn process<\n        W: Write + ?Sized,\n        OutputUnicode: FnMut(&[char], &[char], bool) -> bool,\n    >(\n        &self,\n        domain_name: &[u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        error_policy: ErrorPolicy,\n        mut output_as_unicode: OutputUnicode,\n        sink: &mut W,\n        ascii_sink: Option<&mut W>,\n    ) -> Result<ProcessingSuccess, ProcessingError> {}\n    #[inline(always)]\n    fn process_inner<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n    ) -> (usize, bool, bool) {}\n    #[allow(clippy::too_many_arguments)]\n    #[inline(never)]\n    fn process_innermost<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n        tail: &'a [u8],\n    ) -> (usize, bool, bool) {}\n    #[inline(never)]\n    fn after_punycode_decode(\n        &self,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        current_label_start: usize,\n        label_buffer: &[char],\n        deny_list_deny_dot: u128,\n        fail_fast: bool,\n        had_errors: &mut bool,\n    ) -> bool {}\n    #[inline(never)]\n    fn check_label(\n        &self,\n        hyphens: Hyphens,\n        mut_label: &mut [char],\n        fail_fast: bool,\n        had_errors: &mut bool,\n        first_needs_combining_mark_check: bool,\n        needs_contextj_check: bool,\n    ) -> bool {}\n    #[inline(always)]\n    fn has_appropriately_joining_char<I: Iterator<Item = char>>(\n        &self,\n        iter: I,\n        required_mask: JoiningTypeMask,\n    ) -> bool {}\n    #[inline(always)]\n    fn is_bidi(&self, buffer: &[char]) -> bool {}\n}\npub fn domain_to_ascii_cow(\n    domain: &[u8],\n    ascii_deny_list: AsciiDenyList,\n) -> Result<Cow<'_, str>, Errors> {\n    Uts46::new()\n        .to_ascii(\n            domain,\n            ascii_deny_list,\n            uts46::Hyphens::Allow,\n            uts46::DnsLength::Ignore,\n        )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm;\n/// version returning a `Cow`.\n///\n/// Most applications should be using this function rather than the sibling functions,\n/// and most applications should pass [`AsciiDenyList::URL`] as the second argument.\n/// Passing [`AsciiDenyList::URL`] as the second argument makes this function also\n/// perform the [forbidden domain code point](https://url.spec.whatwg.org/#forbidden-domain-code-point)\n/// check in addition to the [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii)\n/// algorithm.\n///\n/// Returns the ASCII representation a domain name,\n/// normalizing characters (upper-case to lower-case and other kinds of equivalence)\n/// and using Punycode as necessary.\n///\n/// This process may fail.\n///\n/// If you have a `&str` instead of `&[u8]`, just call `.to_bytes()` on it before\n/// passing it to this function. It's still preferable to use this function over\n/// the sibling functions that take `&str`.\n105 pub fn domain_to_ascii_cow(\n106     domain: &[u8],\n107     ascii_deny_list: AsciiDenyList,\n108 ) -> Result<Cow<'_, str>, Errors> {\n109     Uts46::new().to_ascii(\n110         domain,\n111         ascii_deny_list,\n112         uts46::Hyphens::Allow,\n113         uts46::DnsLength::Ignore,\n114     )\n115 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}