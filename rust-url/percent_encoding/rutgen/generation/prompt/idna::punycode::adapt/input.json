{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/punycode.rs\n// crate name is idna\nuse alloc::{string::String, vec::Vec};\nuse core::char;\nuse core::fmt::Write;\nuse core::marker::PhantomData;\nconst BASE: u32 = 36;\nconst T_MIN: u32 = 1;\nconst T_MAX: u32 = 26;\nconst SKEW: u32 = 38;\nconst DAMP: u32 = 700;\nconst INITIAL_BIAS: u32 = 72;\nconst INITIAL_N: u32 = 0x80;\n#[inline]\nfn adapt(mut delta: u32, num_points: u32, first_time: bool) -> u32 {\n    delta /= if first_time { DAMP } else { 2 };\n    delta += delta / num_points;\n    let mut k = 0;\n    while delta > ((BASE - T_MIN) * T_MAX) / 2 {\n        delta /= BASE - T_MIN;\n        k += BASE;\n    }\n    k + (((BASE - T_MIN + 1) * delta) / (delta + SKEW))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n31 fn adapt(mut delta: u32, num_points: u32, first_time: bool) -> u32 {\n32     delta /= if first_time { DAMP } else { 2 };\n33     delta += delta / num_points;\n34     let mut k = 0;\n35     while delta > ((BASE - T_MIN) * T_MAX) / 2 {\n36         delta /= BASE - T_MIN;\n37         k += BASE;\n38     }\n39     k + (((BASE - T_MIN + 1) * delta) / (delta + SKEW))\n40 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}