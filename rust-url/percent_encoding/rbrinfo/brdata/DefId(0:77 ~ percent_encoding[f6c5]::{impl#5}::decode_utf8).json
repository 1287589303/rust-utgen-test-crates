{
  "name": "percent_encoding::{impl#5}::decode_utf8",
  "mod_info": {
    "name": "",
    "loc": "percent_encoding/src/lib.rs:9:1:481:2"
  },
  "visible": true,
  "loc": "percent_encoding/src/lib.rs:312:5:323:6",
  "doc": "/// Decode the result of percent-decoding as UTF-8.\n///\n/// This is return `Err` when the percent-decoded bytes are not well-formed in UTF-8.\n",
  "code": [
    "pub fn decode_utf8(self) -> Result<Cow<'a, str>, str::Utf8Error> {",
    "    match self.clone().into() {",
    "        Cow::Borrowed(bytes) => match str::from_utf8(bytes) {",
    "            Ok(s) => Ok(s.into()),",
    "            Err(e) => Err(e),",
    "        },",
    "        Cow::Owned(bytes) => match String::from_utf8(bytes) {",
    "            Ok(s) => Ok(s.into()),",
    "            Err(e) => Err(e.utf8_error()),",
    "        },",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.clone().into() matches Cow::Owned(bytes)",
          "norm": null,
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "String::from_utf8(bytes) matches Err(e)",
          "norm": null,
          "value": "true",
          "line": 318,
          "bound": null
        }
      ],
      "ret": "Err(e.utf8_error())",
      "path": [
        0,
        1,
        2,
        5,
        15,
        18,
        23,
        24,
        25,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.clone().into() matches Cow::Owned(bytes)",
          "norm": null,
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "String::from_utf8(bytes) matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 318,
          "bound": null
        },
        {
          "cond": "String::from_utf8(bytes) matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 318,
          "bound": null
        }
      ],
      "ret": "Ok(s.into())",
      "path": [
        0,
        1,
        2,
        5,
        15,
        17,
        19,
        20,
        21,
        22,
        25,
        26,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.clone().into() matches Cow::Borrowed(bytes)",
          "norm": null,
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "self.clone().into() matches Cow::Borrowed(bytes)",
          "norm": null,
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "str::from_utf8(bytes) matches Err(e)",
          "norm": null,
          "value": "true",
          "line": 314,
          "bound": null
        }
      ],
      "ret": "Err(e)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        10,
        14,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.clone().into() matches Cow::Borrowed(bytes)",
          "norm": null,
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "self.clone().into() matches Cow::Borrowed(bytes)",
          "norm": null,
          "value": "true",
          "line": 313,
          "bound": null
        },
        {
          "cond": "str::from_utf8(bytes) matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 314,
          "bound": null
        },
        {
          "cond": "str::from_utf8(bytes) matches Ok(s)",
          "norm": null,
          "value": "true",
          "line": 314,
          "bound": null
        }
      ],
      "ret": "Ok(s.into())",
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        9,
        11,
        12,
        13,
        14,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}