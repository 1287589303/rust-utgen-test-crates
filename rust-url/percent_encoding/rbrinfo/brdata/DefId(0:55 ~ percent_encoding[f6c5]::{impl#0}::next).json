{
  "name": "percent_encoding::{impl#0}::next",
  "mod_info": {
    "name": "",
    "loc": "percent_encoding/src/lib.rs:9:1:481:2"
  },
  "visible": true,
  "loc": "percent_encoding/src/lib.rs:150:5:173:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<&'a str> {",
    "    if let Some((&first_byte, remaining)) = self.bytes.split_first() {",
    "        if self.ascii_set.should_percent_encode(first_byte) {",
    "            self.bytes = remaining;",
    "            Some(percent_encode_byte(first_byte))",
    "        } else {",
    "            // The unsafe blocks here are appropriate because the bytes are",
    "            // confirmed as a subset of UTF-8 in should_percent_encode.",
    "            for (i, &byte) in remaining.iter().enumerate() {",
    "                if self.ascii_set.should_percent_encode(byte) {",
    "                    // 1 for first_byte + i for previous iterations of this loop",
    "                    let (unchanged_slice, remaining) = self.bytes.split_at(1 + i);",
    "                    self.bytes = remaining;",
    "                    return Some(unsafe { str::from_utf8_unchecked(unchanged_slice) });",
    "                }",
    "            }",
    "            let unchanged_slice = self.bytes;",
    "            self.bytes = &[][..];",
    "            Some(unsafe { str::from_utf8_unchecked(unchanged_slice) })",
    "        }",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 1,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some((&first_byte, remaining)) = self.bytes.split_first()",
          "norm": null,
          "value": "true",
          "line": 151,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        27,
        28,
        29
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some((&first_byte, remaining)) = self.bytes.split_first()",
          "norm": null,
          "value": "true",
          "line": 151,
          "bound": null
        },
        {
          "cond": "self.ascii_set.should_percent_encode(first_byte)",
          "norm": null,
          "value": "true",
          "line": 152,
          "bound": null
        }
      ],
      "ret": "Some(percent_encode_byte(first_byte))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        26,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some((&first_byte, remaining)) = self.bytes.split_first()",
          "norm": null,
          "value": "true",
          "line": 151,
          "bound": null
        },
        {
          "cond": "self.ascii_set.should_percent_encode(first_byte)",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "(i, &byte) in remaining.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "self.ascii_set.should_percent_encode(byte)",
          "norm": null,
          "value": "true",
          "line": 159,
          "bound": null
        }
      ],
      "ret": "Some(unsafe { str::from_utf8_unchecked(unchanged_slice) })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        18,
        19,
        20,
        21,
        22,
        29
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some((&first_byte, remaining)) = self.bytes.split_first()",
          "norm": null,
          "value": "true",
          "line": 151,
          "bound": null
        },
        {
          "cond": "self.ascii_set.should_percent_encode(first_byte)",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "(i, &byte) in remaining.iter().enumerate()",
          "norm": null,
          "value": "true",
          "line": 158,
          "bound": null
        },
        {
          "cond": "self.ascii_set.should_percent_encode(byte)",
          "norm": null,
          "value": "false",
          "line": 159,
          "bound": null
        },
        {
          "cond": "(i, &byte) in remaining.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 158,
          "bound": null
        }
      ],
      "ret": "Some(unsafe { str::from_utf8_unchecked(unchanged_slice) })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        16,
        18,
        23,
        11,
        12,
        13,
        15,
        17,
        24,
        25,
        26,
        28,
        29
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some((&first_byte, remaining)) = self.bytes.split_first()",
          "norm": null,
          "value": "true",
          "line": 151,
          "bound": null
        },
        {
          "cond": "self.ascii_set.should_percent_encode(first_byte)",
          "norm": null,
          "value": "false",
          "line": 152,
          "bound": null
        },
        {
          "cond": "(i, &byte) in remaining.iter().enumerate()",
          "norm": null,
          "value": "false",
          "line": 158,
          "bound": null
        }
      ],
      "ret": "Some(unsafe { str::from_utf8_unchecked(unchanged_slice) })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15,
        17,
        24,
        25,
        26,
        28,
        29
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}