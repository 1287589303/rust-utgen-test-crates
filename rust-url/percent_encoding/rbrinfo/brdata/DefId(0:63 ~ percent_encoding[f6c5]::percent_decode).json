{
  "name": "percent_encoding::percent_decode",
  "mod_info": {
    "name": "",
    "loc": "percent_encoding/src/lib.rs:9:1:481:2"
  },
  "visible": true,
  "loc": "percent_encoding/src/lib.rs:240:1:244:2",
  "doc": "/// Percent-decode the given bytes.\n///\n/// <https://url.spec.whatwg.org/#percent-decode>\n///\n/// Any sequence of `%` followed by two hexadecimal digits is decoded.\n/// The return type:\n///\n/// * Implements `Into<Cow<u8>>` borrowing `input` when it contains no percent-encoded sequence,\n/// * Implements `Iterator<Item = u8>` and therefore has a `.collect::<Vec<u8>>()` method,\n/// * Has `decode_utf8()` and `decode_utf8_lossy()` methods.\n///\n/// # Examples\n///\n/// ```\n/// use percent_encoding::percent_decode;\n///\n/// assert_eq!(percent_decode(b\"foo%20bar%3f\").decode_utf8().unwrap(), \"foo bar?\");\n/// ```\n",
  "code": [
    "pub fn percent_decode(input: &[u8]) -> PercentDecode<'_> {",
    "    PercentDecode {",
    "        bytes: input.iter(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "PercentDecode {\n        bytes: input.iter(),\n    }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}