bb0
  0: StorageLive(_3)
    SourceInfo(percent_encoding/src/ascii_set.rs:63:13-63:21)
  1: _3 = ((*_1).0: [u32; 4])
    SourceInfo(percent_encoding/src/ascii_set.rs:63:24-63:33)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(percent_encoding/src/ascii_set.rs:63:13-63:21)
  3: StorageLive(_4)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:49-64:89)
  4: StorageLive(_5)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:50-64:89)
  5: StorageLive(_6)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:56-64:88)
  6: StorageLive(_7)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:57-64:70)
  7: StorageLive(_8)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:57-64:61)
  8: _8 = _2
    SourceInfo(percent_encoding/src/ascii_set.rs:64:57-64:61)
  9: _7 = move _8 as usize (IntToInt)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:57-64:70)
  10: StorageDead(_8)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:69-64:70)
  11: _9 = Eq(const ascii_set::BITS_PER_CHUNK, const 0_usize)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:56-64:88)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:64:56-64:88)
      kind: assert(!move _9, "attempt to calculate the remainder of `{}` with a divisor of zero", _7) -> [success: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _6 = Rem(move _7, const ascii_set::BITS_PER_CHUNK)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:56-64:88)
  1: StorageDead(_7)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:87-64:88)
  2: _10 = Lt(_6, const 32_usize)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:50-64:89)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:64:50-64:89)
      kind: assert(move _10, "attempt to shift left by `{}`, which would overflow", _6) -> [success: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _5 = Shl(const 1_u32, move _6)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:50-64:89)
  1: StorageDead(_6)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:88-64:89)
  2: _4 = Not(move _5)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:49-64:89)
  3: StorageDead(_5)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:88-64:89)
  4: StorageLive(_11)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:14-64:44)
  5: StorageLive(_12)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:14-64:27)
  6: StorageLive(_13)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:14-64:18)
  7: _13 = _2
    SourceInfo(percent_encoding/src/ascii_set.rs:64:14-64:18)
  8: _12 = move _13 as usize (IntToInt)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:14-64:27)
  9: StorageDead(_13)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:26-64:27)
  10: _14 = Eq(const ascii_set::BITS_PER_CHUNK, const 0_usize)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:14-64:44)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:64:14-64:44)
      kind: assert(!move _14, "attempt to divide `{}` by zero", _12) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _11 = Div(move _12, const ascii_set::BITS_PER_CHUNK)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:14-64:44)
  1: StorageDead(_12)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:43-64:44)
  2: _15 = Len(_3)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:9-64:45)
  3: _16 = Lt(_11, _15)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:9-64:45)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:64:9-64:45)
      kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _11) -> [success: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: _3[_11] = BitAnd(_3[_11], move _4)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:9-64:89)
  1: StorageDead(_4)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:88-64:89)
  2: StorageDead(_11)
    SourceInfo(percent_encoding/src/ascii_set.rs:64:89-64:90)
  3: StorageLive(_17)
    SourceInfo(percent_encoding/src/ascii_set.rs:65:20-65:24)
  4: _17 = _3
    SourceInfo(percent_encoding/src/ascii_set.rs:65:20-65:24)
  5: _0 = ascii_set::AsciiSet { mask: move _17 }
    SourceInfo(percent_encoding/src/ascii_set.rs:65:9-65:26)
  6: StorageDead(_17)
    SourceInfo(percent_encoding/src/ascii_set.rs:65:25-65:26)
  7: StorageDead(_3)
    SourceInfo(percent_encoding/src/ascii_set.rs:66:5-66:6)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:66:6-66:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:62:5-66:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

