bb0
  0: StorageLive(_3)
    SourceInfo(percent_encoding/src/ascii_set.rs:57:13-57:21)
  1: _3 = ((*_1).0: [u32; 4])
    SourceInfo(percent_encoding/src/ascii_set.rs:57:24-57:33)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(percent_encoding/src/ascii_set.rs:57:13-57:21)
  3: StorageLive(_4)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:49-58:86)
  4: StorageLive(_5)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:54-58:86)
  5: StorageLive(_6)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:55-58:68)
  6: StorageLive(_7)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:55-58:59)
  7: _7 = _2
    SourceInfo(percent_encoding/src/ascii_set.rs:58:55-58:59)
  8: _6 = move _7 as usize (IntToInt)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:55-58:68)
  9: StorageDead(_7)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:67-58:68)
  10: _8 = Eq(const ascii_set::BITS_PER_CHUNK, const 0_usize)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:54-58:86)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:58:54-58:86)
      kind: assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _6) -> [success: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _5 = Rem(move _6, const ascii_set::BITS_PER_CHUNK)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:54-58:86)
  1: StorageDead(_6)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:85-58:86)
  2: _9 = Lt(_5, const 32_usize)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:49-58:86)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:58:49-58:86)
      kind: assert(move _9, "attempt to shift left by `{}`, which would overflow", _5) -> [success: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _4 = Shl(const 1_u32, move _5)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:49-58:86)
  1: StorageDead(_5)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:85-58:86)
  2: StorageLive(_10)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:14-58:44)
  3: StorageLive(_11)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:14-58:27)
  4: StorageLive(_12)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:14-58:18)
  5: _12 = _2
    SourceInfo(percent_encoding/src/ascii_set.rs:58:14-58:18)
  6: _11 = move _12 as usize (IntToInt)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:14-58:27)
  7: StorageDead(_12)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:26-58:27)
  8: _13 = Eq(const ascii_set::BITS_PER_CHUNK, const 0_usize)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:14-58:44)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:58:14-58:44)
      kind: assert(!move _13, "attempt to divide `{}` by zero", _11) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _10 = Div(move _11, const ascii_set::BITS_PER_CHUNK)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:14-58:44)
  1: StorageDead(_11)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:43-58:44)
  2: _14 = Len(_3)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:9-58:45)
  3: _15 = Lt(_10, _14)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:9-58:45)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:58:9-58:45)
      kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _10) -> [success: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: _3[_10] = BitOr(_3[_10], move _4)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:9-58:86)
  1: StorageDead(_4)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:85-58:86)
  2: StorageDead(_10)
    SourceInfo(percent_encoding/src/ascii_set.rs:58:86-58:87)
  3: StorageLive(_16)
    SourceInfo(percent_encoding/src/ascii_set.rs:59:20-59:24)
  4: _16 = _3
    SourceInfo(percent_encoding/src/ascii_set.rs:59:20-59:24)
  5: _0 = ascii_set::AsciiSet { mask: move _16 }
    SourceInfo(percent_encoding/src/ascii_set.rs:59:9-59:26)
  6: StorageDead(_16)
    SourceInfo(percent_encoding/src/ascii_set.rs:59:25-59:26)
  7: StorageDead(_3)
    SourceInfo(percent_encoding/src/ascii_set.rs:60:5-60:6)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:60:6-60:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:56:5-60:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

