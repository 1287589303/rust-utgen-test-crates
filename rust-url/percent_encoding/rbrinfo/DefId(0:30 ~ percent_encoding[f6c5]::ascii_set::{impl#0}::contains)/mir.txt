bb0
  0: StorageLive(_3)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:13-47:18)
  1: StorageLive(_4)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:31-47:61)
  2: StorageLive(_5)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:31-47:44)
  3: StorageLive(_6)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:31-47:35)
  4: _6 = _2
    SourceInfo(percent_encoding/src/ascii_set.rs:47:31-47:35)
  5: _5 = move _6 as usize (IntToInt)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:31-47:44)
  6: StorageDead(_6)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:43-47:44)
  7: _7 = Eq(const ascii_set::BITS_PER_CHUNK, const 0_usize)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:31-47:61)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:47:31-47:61)
      kind: assert(!move _7, "attempt to divide `{}` by zero", _5) -> [success: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _4 = Div(move _5, const ascii_set::BITS_PER_CHUNK)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:31-47:61)
  1: StorageDead(_5)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:60-47:61)
  2: _8 = Len(((*_1).0: [u32; 4]))
    SourceInfo(percent_encoding/src/ascii_set.rs:47:21-47:62)
  3: _9 = Lt(_4, _8)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:21-47:62)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:47:21-47:62)
      kind: assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _4) -> [success: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _3 = ((*_1).0: [u32; 4])[_4]
    SourceInfo(percent_encoding/src/ascii_set.rs:47:21-47:62)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:13-47:18)
  2: StorageDead(_4)
    SourceInfo(percent_encoding/src/ascii_set.rs:47:62-47:63)
  3: StorageLive(_10)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:13-48:17)
  4: StorageLive(_11)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:25-48:57)
  5: StorageLive(_12)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:26-48:39)
  6: StorageLive(_13)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:26-48:30)
  7: _13 = _2
    SourceInfo(percent_encoding/src/ascii_set.rs:48:26-48:30)
  8: _12 = move _13 as usize (IntToInt)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:26-48:39)
  9: StorageDead(_13)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:38-48:39)
  10: _14 = Eq(const ascii_set::BITS_PER_CHUNK, const 0_usize)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:25-48:57)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:48:25-48:57)
      kind: assert(!move _14, "attempt to calculate the remainder of `{}` with a divisor of zero", _12) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _11 = Rem(move _12, const ascii_set::BITS_PER_CHUNK)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:25-48:57)
  1: StorageDead(_12)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:56-48:57)
  2: _15 = Lt(_11, const 32_usize)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:20-48:57)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:48:20-48:57)
      kind: assert(move _15, "attempt to shift left by `{}`, which would overflow", _11) -> [success: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: _10 = Shl(const 1_u32, move _11)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:20-48:57)
  1: StorageDead(_11)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:56-48:57)
  2: FakeRead(ForLet(None), _10)
    SourceInfo(percent_encoding/src/ascii_set.rs:48:13-48:17)
  3: StorageLive(_16)
    SourceInfo(percent_encoding/src/ascii_set.rs:49:9-49:23)
  4: StorageLive(_17)
    SourceInfo(percent_encoding/src/ascii_set.rs:49:10-49:15)
  5: _17 = _3
    SourceInfo(percent_encoding/src/ascii_set.rs:49:10-49:15)
  6: StorageLive(_18)
    SourceInfo(percent_encoding/src/ascii_set.rs:49:18-49:22)
  7: _18 = _10
    SourceInfo(percent_encoding/src/ascii_set.rs:49:18-49:22)
  8: _16 = BitAnd(move _17, move _18)
    SourceInfo(percent_encoding/src/ascii_set.rs:49:9-49:23)
  9: StorageDead(_18)
    SourceInfo(percent_encoding/src/ascii_set.rs:49:22-49:23)
  10: StorageDead(_17)
    SourceInfo(percent_encoding/src/ascii_set.rs:49:22-49:23)
  11: _0 = Ne(move _16, const 0_u32)
    SourceInfo(percent_encoding/src/ascii_set.rs:49:9-49:28)
  12: StorageDead(_16)
    SourceInfo(percent_encoding/src/ascii_set.rs:49:27-49:28)
  13: StorageDead(_10)
    SourceInfo(percent_encoding/src/ascii_set.rs:50:5-50:6)
  14: StorageDead(_3)
    SourceInfo(percent_encoding/src/ascii_set.rs:50:5-50:6)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:50:6-50:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(percent_encoding/src/ascii_set.rs:46:5-50:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

