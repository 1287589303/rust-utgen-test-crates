bb0
  0: StorageLive(_2)
    SourceInfo(percent_encoding/src/lib.rs:274:13-274:18)
  1: StorageLive(_3)
    SourceInfo(percent_encoding/src/lib.rs:274:21-274:31)
  2: _3 = &((*_1).0: core::slice::Iter<'_, u8>)
    SourceInfo(percent_encoding/src/lib.rs:274:21-274:31)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/lib.rs:274:21-274:37)
      kind: _2 = <core::slice::Iter<'_, u8> as core::iter::ExactSizeIterator>::len(move _3) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_3)
    SourceInfo(percent_encoding/src/lib.rs:274:36-274:37)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(percent_encoding/src/lib.rs:274:13-274:18)
  2: StorageLive(_4)
    SourceInfo(percent_encoding/src/lib.rs:275:10-275:25)
  3: StorageLive(_5)
    SourceInfo(percent_encoding/src/lib.rs:275:10-275:21)
  4: StorageLive(_6)
    SourceInfo(percent_encoding/src/lib.rs:275:11-275:16)
  5: _6 = _2
    SourceInfo(percent_encoding/src/lib.rs:275:11-275:16)
  6: _7 = AddWithOverflow(_6, const 2_usize)
    SourceInfo(percent_encoding/src/lib.rs:275:10-275:21)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/lib.rs:275:10-275:21)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 2_usize) -> [success: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _5 = move (_7.0: usize)
    SourceInfo(percent_encoding/src/lib.rs:275:10-275:21)
  1: StorageDead(_6)
    SourceInfo(percent_encoding/src/lib.rs:275:20-275:21)
  2: _8 = Eq(const 3_usize, const 0_usize)
    SourceInfo(percent_encoding/src/lib.rs:275:10-275:25)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/lib.rs:275:10-275:25)
      kind: assert(!move _8, "attempt to divide `{}` by zero", _5) -> [success: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: _4 = Div(move _5, const 3_usize)
    SourceInfo(percent_encoding/src/lib.rs:275:10-275:25)
  1: StorageDead(_5)
    SourceInfo(percent_encoding/src/lib.rs:275:24-275:25)
  2: StorageLive(_9)
    SourceInfo(percent_encoding/src/lib.rs:275:27-275:38)
  3: StorageLive(_10)
    SourceInfo(percent_encoding/src/lib.rs:275:32-275:37)
  4: _10 = _2
    SourceInfo(percent_encoding/src/lib.rs:275:32-275:37)
  5: _9 = core::option::Option::<usize>::Some(move _10)
    SourceInfo(percent_encoding/src/lib.rs:275:27-275:38)
  6: StorageDead(_10)
    SourceInfo(percent_encoding/src/lib.rs:275:37-275:38)
  7: _0 = (move _4, move _9)
    SourceInfo(percent_encoding/src/lib.rs:275:9-275:39)
  8: StorageDead(_9)
    SourceInfo(percent_encoding/src/lib.rs:275:38-275:39)
  9: StorageDead(_4)
    SourceInfo(percent_encoding/src/lib.rs:275:38-275:39)
  10: StorageDead(_2)
    SourceInfo(percent_encoding/src/lib.rs:276:5-276:6)
  Terminator {
      source_info: SourceInfo(percent_encoding/src/lib.rs:276:6-276:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(percent_encoding/src/lib.rs:273:5-276:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

