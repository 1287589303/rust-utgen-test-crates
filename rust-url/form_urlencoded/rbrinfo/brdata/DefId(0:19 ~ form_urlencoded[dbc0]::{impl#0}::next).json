{
  "name": "form_urlencoded::{impl#0}::next",
  "mod_info": {
    "name": "",
    "loc": "form_urlencoded/src/lib.rs:9:1:430:75"
  },
  "visible": true,
  "loc": "form_urlencoded/src/lib.rs:51:5:67:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Self::Item> {",
    "    loop {",
    "        if self.input.is_empty() {",
    "            return None;",
    "        }",
    "        let mut split2 = self.input.splitn(2, |&b| b == b'&');",
    "        let sequence = split2.next().unwrap();",
    "        self.input = split2.next().unwrap_or(&[][..]);",
    "        if sequence.is_empty() {",
    "            continue;",
    "        }",
    "        let mut split2 = sequence.splitn(2, |&b| b == b'=');",
    "        let name = split2.next().unwrap();",
    "        let value = split2.next().unwrap_or(&[][..]);",
    "        return Some((decode(name), decode(value)));",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 1,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 53,
          "bound": null
        },
        {
          "cond": "sequence.is_empty()",
          "norm": null,
          "value": "true",
          "line": 59,
          "bound": null
        },
        {
          "cond": "self.input.is_empty()",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        1,
        2,
        3,
        4,
        26
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.input.is_empty()",
          "norm": null,
          "value": "false",
          "line": 53,
          "bound": null
        },
        {
          "cond": "sequence.is_empty()",
          "norm": null,
          "value": "false",
          "line": 59,
          "bound": null
        }
      ],
      "ret": "Some((decode(name), decode(value)))",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}