{
  "name": "form_urlencoded::{impl#3}::next",
  "mod_info": {
    "name": "",
    "loc": "form_urlencoded/src/lib.rs:9:1:430:75"
  },
  "visible": true,
  "loc": "form_urlencoded/src/lib.rs:138:5:163:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<&'a str> {",
    "    if let Some((&first, tail)) = self.bytes.split_first() {",
    "        if !byte_serialized_unchanged(first) {",
    "            self.bytes = tail;",
    "            return Some(if first == b' ' {",
    "                \"+\"",
    "            } else {",
    "                percent_encode_byte(first)",
    "            });",
    "        }",
    "        let position = tail.iter().position(|&b| !byte_serialized_unchanged(b));",
    "        let (unchanged_slice, remaining) = match position {",
    "            // 1 for first_byte + i unchanged in tail",
    "            Some(i) => self.bytes.split_at(1 + i),",
    "            None => (self.bytes, &[][..]),",
    "        };",
    "        self.bytes = remaining;",
    "        // This unsafe is appropriate because we have already checked these",
    "        // bytes in byte_serialized_unchanged, which checks for a subset",
    "        // of UTF-8. So we know these bytes are valid UTF-8, and doing",
    "        // another UTF-8 check would be wasteful.",
    "        Some(unsafe { str::from_utf8_unchecked(unchanged_slice) })",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some((&first, tail)) = self.bytes.split_first()",
          "norm": null,
          "value": "true",
          "line": 139,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some((&first, tail)) = self.bytes.split_first()",
          "norm": null,
          "value": "true",
          "line": 139,
          "bound": null
        },
        {
          "cond": "byte_serialized_unchanged(first)",
          "norm": null,
          "value": "true",
          "line": 140,
          "bound": null
        },
        {
          "cond": "position matches Some(i)",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        },
        {
          "cond": "position matches Some(i)",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        }
      ],
      "ret": "Some(unsafe { str::from_utf8_unchecked(unchanged_slice) })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        11,
        12,
        14,
        16,
        17,
        18,
        20,
        21,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some((&first, tail)) = self.bytes.split_first()",
          "norm": null,
          "value": "true",
          "line": 139,
          "bound": null
        },
        {
          "cond": "byte_serialized_unchanged(first)",
          "norm": null,
          "value": "true",
          "line": 140,
          "bound": null
        },
        {
          "cond": "position matches None",
          "norm": null,
          "value": "true",
          "line": 149,
          "bound": null
        }
      ],
      "ret": "Some(unsafe { str::from_utf8_unchecked(unchanged_slice) })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        11,
        12,
        15,
        19,
        20,
        21,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some((&first, tail)) = self.bytes.split_first()",
          "norm": null,
          "value": "true",
          "line": 139,
          "bound": null
        },
        {
          "cond": "byte_serialized_unchanged(first)",
          "norm": null,
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "first == b' '",
          "norm": "b' ' == first",
          "value": "false",
          "line": 142,
          "bound": null
        }
      ],
      "ret": "Some(if first == b' ' {\n                    \"+\"\n                } else {\n                    percent_encode_byte(first)\n                })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        10,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Some((&first, tail)) = self.bytes.split_first()",
          "norm": null,
          "value": "true",
          "line": 139,
          "bound": null
        },
        {
          "cond": "byte_serialized_unchanged(first)",
          "norm": null,
          "value": "false",
          "line": 140,
          "bound": null
        },
        {
          "cond": "first == b' '",
          "norm": "b' ' == first",
          "value": "true",
          "line": 142,
          "bound": null
        }
      ],
      "ret": "Some(if first == b' ' {\n                    \"+\"\n                } else {\n                    percent_encode_byte(first)\n                })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        10,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}