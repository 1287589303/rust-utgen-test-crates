{
  "name": "form_urlencoded::{impl#6}::finish",
  "mod_info": {
    "name": "",
    "loc": "form_urlencoded/src/lib.rs:9:1:430:75"
  },
  "visible": true,
  "loc": "form_urlencoded/src/lib.rs:344:5:349:6",
  "doc": "/// If this serializer was constructed with a string, take and return that string.\n///\n/// ```rust\n/// use form_urlencoded;\n/// let encoded: String = form_urlencoded::Serializer::new(String::new())\n///     .append_pair(\"foo\", \"bar & baz\")\n///     .append_pair(\"saison\", \"Été+hiver\")\n///     .finish();\n/// assert_eq!(encoded, \"foo=bar+%26+baz&saison=%C3%89t%C3%A9%2Bhiver\");\n/// ```\n///\n/// Panics if called more than once.\n",
  "code": [
    "pub fn finish(&mut self) -> T::Finished {",
    "    self.target",
    "        .take()",
    "        .expect(\"url::form_urlencoded::Serializer double finish\")",
    "        .finish()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}