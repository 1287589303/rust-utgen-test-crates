[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).0: Parse<'_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:111:9: 112:20 (#0),
                    scope: scope[0],
                },
                kind: _2 = <Parse<'_> as core::iter::Iterator>::next(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            _4 = {closure@form_urlencoded/src/lib.rs:113:18: 113:26},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:111:9: 113:60 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<(_::borrow::Cow<'_, str>, _::borrow::Cow<'_, str>)>::map::<(_::string::String, _::string::String), {closure@form_urlencoded/src/lib.rs:113:18: 113:26}>(move _2, move _4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:114:6: 114:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:113:59: 113:60 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:110:5: 114:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(_::string::String, _::string::String)>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:110:27: 110:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut ParseIntoOwned<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:110:13: 110:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: form_urlencoded/src/lib.rs:111:9: 113:60 (#0),
                },
            ),
        ),
        ty: core::option::Option<(_::borrow::Cow<'{erased}, str>, _::borrow::Cow<'{erased}, str>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:111:9: 112:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: form_urlencoded/src/lib.rs:111:9: 113:60 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Parse<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:111:9: 111:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: form_urlencoded/src/lib.rs:111:9: 113:60 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:34 ~ form_urlencoded[dbc0]::{impl#2}::next::{closure#0}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn(((_::borrow::Cow<'{erased}, str>, _::borrow::Cow<'{erased}, str>),)) -> (_::string::String, _::string::String), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:113:18: 113:59 (#0),
            scope: scope[0],
        },
    },
]