[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:52:9: 66:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:52:9: 66:10 (#0),
                    scope: scope[0],
                },
                kind: falseUnwind -> [real: bb2, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*((*_1).0: &[u8])),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:53:16: 53:37 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [u8]>::is_empty(move _6) -> [return: bb3, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:53:16: 53:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _0 = core::option::Option::<(_::borrow::Cow<'_, str>, _::borrow::Cow<'_, str>)>::None,
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _4 = const (),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*((*_1).0: &[u8])),
            StorageLive(_10),
            _10 = {closure@form_urlencoded/src/lib.rs:56:51: 56:55},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:56:30: 56:66 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::slice::<impl [u8]>::splitn::<{closure@form_urlencoded/src/lib.rs:56:51: 56:55}>(move _9, const 2_usize, move _10) -> [return: bb6, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:57:28: 57:41 (#0),
                    scope: scope[1],
                },
                kind: _12 = <core::slice::SplitN<'_, u8, {closure@form_urlencoded/src/lib.rs:56:51: 56:55}> as core::iter::Iterator>::next(move _13) -> [return: bb7, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:57:28: 57:50 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::option::Option::<&[u8]>::unwrap(move _12) -> [return: bb8, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:58:26: 58:39 (#0),
                    scope: scope[2],
                },
                kind: _16 = <core::slice::SplitN<'_, u8, {closure@form_urlencoded/src/lib.rs:56:51: 56:55}> as core::iter::Iterator>::next(move _17) -> [return: bb9, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = [],
            _21 = &_22,
            StorageLive(_23),
            _23 = core::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:58:53: 58:57 (#0),
                    scope: scope[2],
                },
                kind: _20 = <[u8; 0] as core::ops::Index<core::ops::RangeFull>>::index(move _21, move _23) -> [return: bb10, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_21),
            _19 = &(*_20),
            _18 = &(*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:58:26: 58:58 (#0),
                    scope: scope[2],
                },
                kind: _15 = core::option::Option::<&[u8]>::unwrap_or(move _16, move _18) -> [return: bb11, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = &(*_15),
            StorageDead(_18),
            StorageDead(_16),
            ((*_1).0: &[u8]) = move _14,
            StorageDead(_14),
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_15),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:59:16: 59:35 (#0),
                    scope: scope[2],
                },
                kind: _25 = core::slice::<impl [u8]>::is_empty(move _26) -> [return: bb12, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:59:16: 59:35 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _25) -> [0: bb14, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_11),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            _24 = const (),
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &(*_11),
            StorageLive(_30),
            _30 = {closure@form_urlencoded/src/lib.rs:62:49: 62:53},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:62:30: 62:64 (#0),
                    scope: scope[2],
                },
                kind: _28 = core::slice::<impl [u8]>::splitn::<{closure@form_urlencoded/src/lib.rs:62:49: 62:53}>(move _29, const 2_usize, move _30) -> [return: bb15, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            FakeRead(ForLet(None), _28),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:63:24: 63:37 (#0),
                    scope: scope[3],
                },
                kind: _32 = <core::slice::SplitN<'_, u8, {closure@form_urlencoded/src/lib.rs:62:49: 62:53}> as core::iter::Iterator>::next(move _33) -> [return: bb16, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:63:24: 63:46 (#0),
                    scope: scope[3],
                },
                kind: _31 = core::option::Option::<&[u8]>::unwrap(move _32) -> [return: bb17, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            FakeRead(ForLet(None), _31),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &mut _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:64:25: 64:38 (#0),
                    scope: scope[4],
                },
                kind: _35 = <core::slice::SplitN<'_, u8, {closure@form_urlencoded/src/lib.rs:62:49: 62:53}> as core::iter::Iterator>::next(move _36) -> [return: bb18, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = [],
            _40 = &_41,
            StorageLive(_42),
            _42 = core::ops::RangeFull,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:64:52: 64:56 (#0),
                    scope: scope[4],
                },
                kind: _39 = <[u8; 0] as core::ops::Index<core::ops::RangeFull>>::index(move _40, move _42) -> [return: bb19, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_40),
            _38 = &(*_39),
            _37 = &(*_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:64:25: 64:57 (#0),
                    scope: scope[4],
                },
                kind: _34 = core::option::Option::<&[u8]>::unwrap_or(move _35, move _37) -> [return: bb20, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_35),
            FakeRead(ForLet(None), _34),
            StorageDead(_41),
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:65:26: 65:38 (#0),
                    scope: scope[5],
                },
                kind: _44 = decode(move _45) -> [return: bb21, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &(*_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:65:40: 65:53 (#0),
                    scope: scope[5],
                },
                kind: _46 = decode(move _47) -> [return: bb22, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            _43 = (move _44, move _46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:65:53: 65:54 (#0),
                    scope: scope[5],
                },
                kind: drop(_46) -> [return: bb23, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:65:53: 65:54 (#0),
                    scope: scope[5],
                },
                kind: drop(_44) -> [return: bb24, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            _0 = core::option::Option::<(_::borrow::Cow<'_, str>, _::borrow::Cow<'_, str>)>::Some(move _43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:65:54: 65:55 (#0),
                    scope: scope[5],
                },
                kind: drop(_43) -> [return: bb25, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_34),
            StorageDead(_31),
            StorageDead(_28),
            StorageDead(_11),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:67:6: 67:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:65:53: 65:54 (#0),
                    scope: scope[5],
                },
                kind: drop(_44) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:65:54: 65:55 (#0),
                    scope: scope[5],
                },
                kind: drop(_43) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:65:53: 65:54 (#0),
                    scope: scope[5],
                },
                kind: drop(_44) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:51:5: 67:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(_::borrow::Cow<'{erased}, str>, _::borrow::Cow<'{erased}, str>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:51:27: 51:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Parse<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:51:13: 51:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: form_urlencoded/src/lib.rs:52:9: 66:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:52:9: 66:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:51:5: 67:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:53:13: 55:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:53:16: 53:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:53:16: 53:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:53:38: 55:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:56:30: 56:66 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:56:17: 56:27 (#0),
                    },
                ),
            ),
        ),
        ty: core::slice::SplitN<'{erased}, u8, Closure(DefId(0:20 ~ form_urlencoded[dbc0]::{impl#0}::next::{closure#0}), ['{erased}, i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:56:17: 56:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:56:30: 56:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:20 ~ form_urlencoded[dbc0]::{impl#0}::next::{closure#0}),
            [
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:56:51: 56:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:57:28: 57:50 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:57:17: 57:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:57:17: 57:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:57:28: 57:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::SplitN<'{erased}, u8, Closure(DefId(0:20 ~ form_urlencoded[dbc0]::{impl#0}::next::{closure#0}), ['{erased}, i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:57:28: 57:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:58:26: 58:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:58:26: 58:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:58:26: 58:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::SplitN<'{erased}, u8, Closure(DefId(0:20 ~ form_urlencoded[dbc0]::{impl#0}::next::{closure#0}), ['{erased}, i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:58:26: 58:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:58:50: 58:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:58:50: 58:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:58:53: 58:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:58:51: 58:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:58:51: 58:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:58:54: 58:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:59:13: 61:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:59:16: 59:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:59:16: 59:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:59:36: 61:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:62:30: 62:64 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:62:17: 62:27 (#0),
                    },
                ),
            ),
        ),
        ty: core::slice::SplitN<'{erased}, u8, Closure(DefId(0:21 ~ form_urlencoded[dbc0]::{impl#0}::next::{closure#1}), ['{erased}, i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:62:17: 62:27 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:62:30: 62:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:21 ~ form_urlencoded[dbc0]::{impl#0}::next::{closure#1}),
            [
                '{erased},
                i16,
                Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:62:49: 62:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:63:24: 63:46 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:63:17: 63:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:63:17: 63:21 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:63:24: 63:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::SplitN<'{erased}, u8, Closure(DefId(0:21 ~ form_urlencoded[dbc0]::{impl#0}::next::{closure#1}), ['{erased}, i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:63:24: 63:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:64:25: 64:57 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:64:17: 64:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:64:17: 64:22 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:64:25: 64:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::SplitN<'{erased}, u8, Closure(DefId(0:21 ~ form_urlencoded[dbc0]::{impl#0}::next::{closure#1}), ['{erased}, i16, Binder { value: extern "RustCall" fn((&'^0 u8,)) -> bool, bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:64:25: 64:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:64:49: 64:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:64:49: 64:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:64:52: 64:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:64:50: 64:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:64:50: 64:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFull,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:64:53: 64:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (_::borrow::Cow<'{erased}, str>, _::borrow::Cow<'{erased}, str>),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:65:25: 65:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: _::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:65:26: 65:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:65:33: 65:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: _::borrow::Cow<'{erased}, str>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:65:40: 65:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:65:47: 65:52 (#0),
            scope: scope[0],
        },
    },
]