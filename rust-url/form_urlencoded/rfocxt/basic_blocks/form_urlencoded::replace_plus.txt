[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:80:11: 80:23 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [u8]>::iter(move _5) -> [return: bb1, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut _4,
            StorageDead(_5),
            StorageLive(_6),
            _6 = {closure@form_urlencoded/src/lib.rs:80:33: 80:37},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:80:11: 80:48 (#0),
                    scope: scope[0],
                },
                kind: _2 = <core::slice::Iter<'_, u8> as core::iter::Iterator>::position::<{closure@form_urlencoded/src/lib.rs:80:33: 80:37}>(move _3, move _6) -> [return: bb2, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
            PlaceMention(_2),
            _7 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:80:5: 80:48 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb4, 1: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:80:11: 80:48 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:81:9: 81:13 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = ((_2 as Some).0: usize),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:83:32: 83:48 (#0),
                    scope: scope[1],
                },
                kind: _10 = <[u8] as _::borrow::ToOwned>::to_owned(move _11) -> [return: bb7, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = &(*_1),
            _0 = _::borrow::Cow::<'_, [u8]>::Borrowed(move _8),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:81:36: 81:37 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _10,
            StorageLive(_14),
            _14 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:84:21: 84:37 (#0),
                    scope: scope[2],
                },
                kind: _12 = <_::vec::Vec<u8> as core::ops::IndexMut<usize>>::index_mut(move _13, move _14) -> [return: bb8, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            (*_12) = const 32_u8,
            StorageDead(_12),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut _10,
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = _9,
            _23 = AddWithOverflow(_22, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:85:39: 85:57 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _22, const 1_usize) -> [success: bb9, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = move (_23.0: usize),
            StorageDead(_22),
            _20 = core::ops::RangeFrom::<usize> { start: move _21 },
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:85:38: 85:60 (#0),
                    scope: scope[2],
                },
                kind: _18 = <_::vec::Vec<u8> as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _19, move _20) -> [return: bb10, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            _17 = &mut (*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
                    scope: scope[2],
                },
                kind: _16 = <&mut [u8] as core::iter::IntoIterator>::into_iter(move _17) -> [return: bb11, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            PlaceMention(_16),
            StorageLive(_24),
            _24 = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:85:13: 89:14 (#22),
                    scope: scope[3],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:85:13: 89:14 (#22),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb13, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut _24,
            _28 = &mut (*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
                    scope: scope[3],
                },
                kind: _27 = <core::slice::IterMut<'_, u8> as core::iter::Iterator>::next(move _28) -> [return: bb14, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            PlaceMention(_27),
            _30 = discriminant(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
                    scope: scope[3],
                },
                kind: switchInt(move _30) -> [0: bb16, 1: bb17, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:85:13: 89:14 (#22),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = move ((_27 as Some).0: &mut u8),
            StorageLive(_33),
            StorageLive(_34),
            _34 = (*_32),
            _33 = Eq(move _34, const 43_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:86:20: 86:33 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _33) -> [0: bb20, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = const (),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageLive(_35),
            _35 = move _10,
            _0 = _::borrow::Cow::<'_, [u8]>::Owned(move _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:90:32: 90:33 (#0),
                    scope: scope[2],
                },
                kind: drop(_35) -> [return: bb22, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            (*_32) = const 32_u8,
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:86:17: 88:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:86:17: 88:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
            _25 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:85:13: 89:14 (#22),
                    scope: scope[3],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:91:9: 91:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb23, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:91:9: 91:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:93:2: 93:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:91:9: 91:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:79:1: 93:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: _::borrow::Cow<'{erased}, [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:79:34: 79:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            form_urlencoded/src/lib.rs:79:24: 79:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:79:17: 79:22 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:79:17: 79:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:79:17: 79:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: form_urlencoded/src/lib.rs:80:5: 92:6 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:80:11: 80:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: form_urlencoded/src/lib.rs:80:5: 92:6 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:80:11: 80:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: form_urlencoded/src/lib.rs:80:5: 92:6 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:80:11: 80:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: form_urlencoded/src/lib.rs:80:5: 92:6 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:80:11: 80:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: form_urlencoded/src/lib.rs:80:5: 92:6 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:24 ~ form_urlencoded[dbc0]::replace_plus::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} u8,)) -> bool, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:80:33: 80:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:81:9: 81:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:81:31: 81:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                form_urlencoded/src/lib.rs:80:11: 80:48 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:82:9: 82:29 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:82:14: 82:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:83:32: 83:48 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:83:17: 83:29 (#0),
                    },
                ),
            ),
        ),
        ty: _::vec::Vec<u8, _::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:83:17: 83:29 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:83:32: 83:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:84:21: 84:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut _::vec::Vec<u8, _::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:84:13: 84:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:84:22: 84:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:13: 89:14 (#22),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::IterMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:25: 85:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:38: 85:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut _::vec::Vec<u8, _::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:30: 85:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:39: 85:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:39: 85:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:39: 85:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:39: 85:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
                    },
                ),
            ),
        ),
        ty: core::slice::IterMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:79:1: 93:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:13: 89:14 (#22),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:13: 89:14 (#22),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                form_urlencoded/src/lib.rs:85:25: 85:60 (#23),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:85:17: 85:21 (#24),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:85:17: 85:21 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: form_urlencoded/src/lib.rs:86:17: 88:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:86:20: 86:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: form_urlencoded/src/lib.rs:86:17: 88:18 (#0),
                },
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:86:20: 86:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: _::vec::Vec<u8, _::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:90:24: 90:32 (#0),
            scope: scope[0],
        },
    },
]