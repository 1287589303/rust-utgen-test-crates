[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:353:8: 353:20 (#0),
                    scope: scope[0],
                },
                kind: _4 = _::string::String::len(move _5) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = _2,
            _3 = Gt(move _4, move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:353:8: 353:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageLive(_7),
            _7 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:354:9: 354:25 (#0),
                    scope: scope[0],
                },
                kind: _0 = _::string::String::push(move _7, const '&') -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:353:5: 355:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:353:5: 355:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:356:2: 356:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:352:1: 356:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:352:74: 352:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            form_urlencoded/src/lib.rs:352:39: 352:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:352:31: 352:37 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:352:31: 352:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut _::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:352:31: 352:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            form_urlencoded/src/lib.rs:352:68: 352:73 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:352:52: 352:66 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:352:52: 352:66 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:352:52: 352:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: form_urlencoded/src/lib.rs:353:5: 355:6 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:353:8: 353:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: form_urlencoded/src/lib.rs:353:5: 355:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:353:8: 353:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: form_urlencoded/src/lib.rs:353:5: 355:6 (#0),
                },
            ),
        ),
        ty: &'{erased} _::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:353:8: 353:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: form_urlencoded/src/lib.rs:353:5: 355:6 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:353:23: 353:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: form_urlencoded/src/lib.rs:354:9: 354:25 (#0),
                },
            ),
        ),
        ty: &'{erased} mut _::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:354:9: 354:15 (#0),
            scope: scope[0],
        },
    },
]