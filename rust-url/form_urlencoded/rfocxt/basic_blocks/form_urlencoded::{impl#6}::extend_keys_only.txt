[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut ((*_1).0: core::option::Option<T>),
            _6 = &mut (*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:323:26: 323:50 (#0),
                    scope: scope[0],
                },
                kind: _5 = string::<T>(move _6) -> [return: bb1, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
                    scope: scope[1],
                },
                kind: _8 = <I as core::iter::IntoIterator>::into_iter(move _9) -> [return: bb2, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            StorageLive(_10),
            _10 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:324:13: 327:14 (#33),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:324:13: 327:14 (#33),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut _10,
            _14 = &mut (*_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
                    scope: scope[2],
                },
                kind: _13 = <<I as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::next(move _14) -> [return: bb5, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _16 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
                    scope: scope[2],
                },
                kind: switchInt(move _16) -> [0: bb7, 1: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:324:13: 327:14 (#33),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = move ((_13 as Some).0: <I as core::iter::IntoIterator>::Item),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &_18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:325:25: 325:37 (#0),
                    scope: scope[3],
                },
                kind: _21 = <<I as core::iter::IntoIterator>::Item as core::borrow::Borrow<K>>::borrow(move _22) -> [return: bb10, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:327:13: 327:14 (#33),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb15, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = &(*_21),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:325:25: 325:46 (#0),
                    scope: scope[3],
                },
                kind: _19 = <K as core::convert::AsRef<str>>::as_ref(move _20) -> [return: bb11, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            FakeRead(ForLet(None), _19),
            StorageDead(_21),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &mut (*_5),
            StorageLive(_25),
            _25 = ((*_1).1: usize),
            StorageLive(_26),
            _26 = ((*_1).2: core::option::Option<&dyn for<'a> core::ops::Fn(&'a str) -> _::borrow::Cow<'_, [u8]>>),
            StorageLive(_27),
            _27 = &(*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:326:17: 326:79 (#0),
                    scope: scope[4],
                },
                kind: _23 = append_key_only(move _24, move _25, move _26, move _27) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_23),
            _12 = const (),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:327:13: 327:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:327:13: 327:14 (#33),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb14, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:324:13: 327:14 (#33),
                    scope: scope[2],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:327:13: 327:14 (#33),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb16, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:327:13: 327:14 (#33),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb17, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_5),
            StorageDead(_4),
            _3 = &mut (*_1),
            _0 = &mut (*_3),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:330:5: 330:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb18, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:330:6: 330:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:327:13: 327:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:327:13: 327:14 (#33),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:327:13: 327:14 (#33),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:327:13: 327:14 (#33),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:324:27: 324:28 (#34),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:330:5: 330:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:316:5: 330:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Serializer<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:316:58: 316:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Serializer<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:316:35: 316:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            form_urlencoded/src/lib.rs:316:52: 316:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:316:46: 316:50 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:316:46: 316:50 (#0),
                    },
                ),
            ),
        ),
        ty: I/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:316:46: 316:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Serializer<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:329:9: 329:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: form_urlencoded/src/lib.rs:324:13: 327:14 (#33),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:13: 327:14 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:323:26: 323:50 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:323:17: 323:23 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut _::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:323:17: 323:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::option::Option<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:323:33: 323:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::option::Option<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:323:33: 323:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: form_urlencoded/src/lib.rs:324:13: 327:14 (#33),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#2,
                ],
                def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: form_urlencoded/src/lib.rs:324:13: 327:14 (#33),
                },
            ),
        ),
        ty: I/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:24: 324:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#2,
                ],
                def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:316:5: 330:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [I/#2], def_id: DefId(1:8326 ~ core[a245]::iter::traits::collect::IntoIterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [I/#2], def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [I/#2], def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:13: 327:14 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:13: 327:14 (#33),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                form_urlencoded/src/lib.rs:324:24: 324:28 (#34),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:324:17: 324:20 (#35),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#2,
                ],
                def_id: DefId(1:8326 ~ core[a245]::iter::traits::collect::IntoIterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:324:17: 324:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:325:25: 325:46 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:325:21: 325:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:325:21: 325:22 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:325:25: 325:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:325:25: 325:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [I/#2], def_id: DefId(1:8326 ~ core[a245]::iter::traits::collect::IntoIterator::Item) }),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:325:25: 325:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:326:17: 326:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut _::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:326:33: 326:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:326:41: 326:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&str,)>), bound_vars: [Region(BrNamed(DefId(0:140 ~ form_urlencoded[dbc0]::EncodingOverride::'_), '_))] }, Binder { value: Projection(Output = _::borrow::Cow<'_, [u8]>), bound_vars: [Region(BrNamed(DefId(0:140 ~ form_urlencoded[dbc0]::EncodingOverride::'_), '_))] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:326:62: 326:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:326:77: 326:78 (#0),
            scope: scope[0],
        },
    },
]