[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:214:9: 214:36 (#0),
                    scope: scope[0],
                },
                kind: _0 = Serializer::<'_, T>::for_suffix(move _2, const 0_usize) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:215:5: 215:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:215:6: 215:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:214:35: 214:36 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:215:5: 215:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: form_urlencoded/src/lib.rs:213:5: 215:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Serializer<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:213:30: 213:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            form_urlencoded/src/lib.rs:213:24: 213:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                form_urlencoded/src/lib.rs:213:16: 213:22 (#0),
                            ),
                        ),
                        pat_span: form_urlencoded/src/lib.rs:213:16: 213:22 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:213:16: 213:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: form_urlencoded/src/lib.rs:214:9: 214:36 (#0),
                },
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: form_urlencoded/src/lib.rs:214:26: 214:32 (#0),
            scope: scope[0],
        },
    },
]