{
  "name": "idna::uts46::{impl#3}::default",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": true,
  "loc": "idna/src/uts46.rs:495:5:497:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid input: an ASCII byte slice of length between 1 and 1000 (inclusive) for 'domain_name', any 'ascii_deny_list' value, any 'hyphens' configuration, and any 'error_policy' without exceeding defined limits.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"example.com\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let dns_length = DnsLength::default();",
                "    ",
                "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Uts46::default().data, idna_adapter::Adapter::new());",
                "    assert!(Uts46::default().data.is_initialized());",
                "    assert_eq!(Uts46::default().to_ascii(b\"example.com\", AsciiDenyList::default(), Hyphens::default(), DnsLength::default()).is_ok(), true);"
              ],
              "code": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"example.com\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let dns_length = DnsLength::default();",
                "    ",
                "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
                "    assert_eq!(Uts46::default().data, idna_adapter::Adapter::new());",
                "    assert!(Uts46::default().data.is_initialized());",
                "    assert_eq!(Uts46::default().to_ascii(b\"example.com\", AsciiDenyList::default(), Hyphens::default(), DnsLength::default()).is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"a\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let dns_length = DnsLength::default();",
                "",
                "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Uts46::default(), Uts46::new());",
                "    assert!(Uts46::default().to_ascii(b\"a\", AsciiDenyList::default(), Hyphens::default(), DnsLength::default()).is_ok());"
              ],
              "code": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"a\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let dns_length = DnsLength::default();",
                "",
                "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
                "    assert_eq!(Uts46::default(), Uts46::new());",
                "    assert!(Uts46::default().to_ascii(b\"a\", AsciiDenyList::default(), Hyphens::default(), DnsLength::default()).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"valid-domain-name-123\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let dns_length = DnsLength::default();",
                "    ",
                "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
                "}"
              ],
              "oracle": [
                "    let uts46 = Uts46::default();",
                "    assert!(uts46.data.is_initialized());",
                "    let domain_name: &[u8] = b\"valid-domain-name-123\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let dns_length = DnsLength::default();",
                "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
                "    assert!(result.is_ok());"
              ],
              "code": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"valid-domain-name-123\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let dns_length = DnsLength::default();",
                "    ",
                "    let _result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
                "    let uts46 = Uts46::default();",
                "    assert!(uts46.data.is_initialized());",
                "    let domain_name: &[u8] = b\"valid-domain-name-123\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let dns_length = DnsLength::default();",
                "    let result = uts46.to_ascii(domain_name, ascii_deny_list, hyphens, dns_length);",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"xn--example-6g\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "",
                "    let _result = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
                "}"
              ],
              "oracle": [
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.is_empty() == false);",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).1.is_ok());",
                "    assert_eq!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0, Cow::Borrowed(\"example\"));",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.len() <= PUNYCODE_DECODE_MAX_INPUT_LENGTH);"
              ],
              "code": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"xn--example-6g\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "",
                "    let _result = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.is_empty() == false);",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).1.is_ok());",
                "    assert_eq!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0, Cow::Borrowed(\"example\"));",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.len() <= PUNYCODE_DECODE_MAX_INPUT_LENGTH);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"a\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "",
                "    let _result = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
                "}"
              ],
              "oracle": [
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"a\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let (unicode_result, unicode_error) = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
                "    assert_eq!(unicode_error, Ok(()));",
                "    let expected_unicode_output = Cow::from(\"a\");",
                "    assert_eq!(unicode_result, expected_unicode_output);"
              ],
              "code": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"a\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "",
                "    let _result = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"a\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let (unicode_result, unicode_error) = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
                "    assert_eq!(unicode_error, Ok(()));",
                "    let expected_unicode_output = Cow::from(\"a\");",
                "    assert_eq!(unicode_result, expected_unicode_output);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"xn--example-6g\"; // Nearing limit capabilities",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "",
                "    let _result = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(uts46.data.0.len(), 0);",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).1.is_ok());",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.is_empty());",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.len() <= PUNYCODE_DECODE_MAX_INPUT_LENGTH);",
                "    assert_eq!(uts46.to_unicode(b\"\", ascii_deny_list, hyphens).1.is_ok(), true);",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.len() > 0);",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.contains(&'x'));"
              ],
              "code": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"xn--example-6g\"; // Nearing limit capabilities",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "",
                "    let _result = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
                "    assert_eq!(uts46.data.0.len(), 0);",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).1.is_ok());",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.is_empty());",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.len() <= PUNYCODE_DECODE_MAX_INPUT_LENGTH);",
                "    assert_eq!(uts46.to_unicode(b\"\", ascii_deny_list, hyphens).1.is_ok(), true);",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.len() > 0);",
                "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.contains(&'x'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"process-test.com\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let error_policy = ErrorPolicy::default();",
                "",
                "    let mut output = String::new();",
                "    let _result = uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None);",
                "}"
              ],
              "oracle": [
                "    uts46.default() == Uts46::new()",
                "    uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None).is_ok()",
                "    output.len() == 0"
              ],
              "code": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"process-test.com\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let error_policy = ErrorPolicy::default();",
                "",
                "    let mut output = String::new();",
                "    let _result = uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None);",
                "    uts46.default() == Uts46::new()",
                "    uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None).is_ok()",
                "    output.len() == 0",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"a\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let error_policy = ErrorPolicy::default();",
                "",
                "    let mut output = String::new();",
                "    let _result = uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None);",
                "}"
              ],
              "oracle": [
                "    assert!(uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None).is_ok());",
                "    assert!(output.is_empty());",
                "    assert_eq!(Uts46::default().data, idna_adapter::Adapter::new());"
              ],
              "code": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"a\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let error_policy = ErrorPolicy::default();",
                "",
                "    let mut output = String::new();",
                "    let _result = uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None);",
                "    assert!(uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None).is_ok());",
                "    assert!(output.is_empty());",
                "    assert_eq!(Uts46::default().data, idna_adapter::Adapter::new());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"valid-domain-name\"; // Nearing limit capabilities",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let error_policy = ErrorPolicy::default();",
                "",
                "    let mut output = String::new();",
                "    let _result = uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None);",
                "}"
              ],
              "oracle": [
                "    let uts46 = Uts46::default();",
                "    assert_eq!(uts46.data, idna_adapter::Adapter::new());",
                "    let domain_name: &[u8] = b\"valid-domain-name\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let error_policy = ErrorPolicy::default();",
                "    assert!(output.is_empty());",
                "    assert!(uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None).is_ok());",
                "    assert!(!output.is_empty());"
              ],
              "code": [
                "{",
                "    let uts46 = Uts46::default();",
                "    let domain_name: &[u8] = b\"valid-domain-name\"; // Nearing limit capabilities",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let error_policy = ErrorPolicy::default();",
                "",
                "    let mut output = String::new();",
                "    let _result = uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None);",
                "    let uts46 = Uts46::default();",
                "    assert_eq!(uts46.data, idna_adapter::Adapter::new());",
                "    let domain_name: &[u8] = b\"valid-domain-name\";",
                "    let ascii_deny_list = AsciiDenyList::default();",
                "    let hyphens = Hyphens::default();",
                "    let error_policy = ErrorPolicy::default();",
                "    assert!(output.is_empty());",
                "    assert!(uts46.process(domain_name, ascii_deny_list, hyphens, error_policy, |_, _, _| true, &mut output, None).is_ok());",
                "    assert!(!output.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}