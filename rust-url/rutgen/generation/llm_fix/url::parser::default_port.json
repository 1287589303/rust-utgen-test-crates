{
  "name": "url::parser::default_port",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": true,
  "loc": "url/src/parser.rs:186:1:193:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: scheme matches \"http\" at line 188 is true\n",
        "precondition: scheme matches \"ws\" or \"http\" at line 187 is true\n",
        "expected return value/type: Some(80)\n"
      ],
      "input_infer": "scheme = \"http\" or scheme = \"ws\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"http\";",
                "    let _result = default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Some(80));"
              ],
              "code": [
                "{",
                "    let scheme = \"http\";",
                "    let _result = default_port(scheme);",
                "    assert_eq!(_result, Some(80));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"ws\";",
                "    let _result = default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    _result.unwrap() == 80",
                "    _result.is_some()",
                "    _scheme == \"ws\"",
                "    _scheme == \"http\""
              ],
              "code": [
                "{",
                "    let scheme = \"ws\";",
                "    let _result = default_port(scheme);",
                "    _result.unwrap() == 80",
                "    _result.is_some()",
                "    _scheme == \"ws\"",
                "    _scheme == \"http\"",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: scheme matches \"http\" at line 188 is false\n",
        "precondition: scheme matches \"ws\" at line 188 is true\n",
        "precondition: scheme matches \"ws\" or \"http\" at line 187 is true\n",
        "expected return value/type: Some(80)\n"
      ],
      "input_infer": "scheme = \"ws\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"ws\";",
                "    let result = default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(80));"
              ],
              "code": [
                "{",
                "    let scheme = \"ws\";",
                "    let result = default_port(scheme);",
                "    assert_eq!(result, Some(80));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: scheme matches \"http\" at line 188 is false\n",
        "precondition: scheme matches \"ws\" at line 188 is false\n",
        "precondition: scheme matches \"https\" at line 189 is true\n",
        "precondition: scheme matches \"https\" or \"wss\" at line 187 is true\n",
        "expected return value/type: Some(443)\n"
      ],
      "input_infer": "scheme is \"https\" or \"wss\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"https\";",
                "    let result = default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(443));"
              ],
              "code": [
                "{",
                "    let scheme = \"https\";",
                "    let result = default_port(scheme);",
                "    assert_eq!(result, Some(443));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"wss\";",
                "    let result = default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(443));"
              ],
              "code": [
                "{",
                "    let scheme = \"wss\";",
                "    let result = default_port(scheme);",
                "    assert_eq!(result, Some(443));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: scheme matches \"http\" at line 188 is false\n",
        "precondition: scheme matches \"ws\" at line 188 is false\n",
        "precondition: scheme matches \"https\" at line 189 is false\n",
        "precondition: scheme matches \"wss\" at line 189 is true\n",
        "precondition: scheme matches \"https\" or \"wss\" at line 187 is true\n",
        "expected return value/type: Some(443)\n"
      ],
      "input_infer": "scheme = \"wss\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"wss\";",
                "    let result = default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(443));"
              ],
              "code": [
                "{",
                "    let scheme = \"wss\";",
                "    let result = default_port(scheme);",
                "    assert_eq!(result, Some(443));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: scheme matches \"http\" at line 188 is false\n",
        "precondition: scheme matches \"ws\" at line 188 is false\n",
        "precondition: scheme matches \"https\" at line 189 is false\n",
        "precondition: scheme matches \"wss\" at line 189 is false\n",
        "precondition: scheme matches \"ftp\" at line 190 is true\n",
        "precondition: scheme matches \"ftp\" at line 187 is true\n",
        "expected return value/type: Some(21)\n"
      ],
      "input_infer": "test input conditions or ranges: scheme should be \"ftp\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(21));"
              ],
              "code": [
                "{",
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"xyz\";",
                "    let result = url::default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));"
              ],
              "code": [
                "{",
                "    let scheme = \"xyz\";",
                "    let result = url::default_port(scheme);",
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"http\";",
                "    let result = url::default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));"
              ],
              "code": [
                "{",
                "    let scheme = \"http\";",
                "    let result = url::default_port(scheme);",
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"https\";",
                "    let result = url::default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));"
              ],
              "code": [
                "{",
                "    let scheme = \"https\";",
                "    let result = url::default_port(scheme);",
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"ws\";",
                "    let result = url::default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));"
              ],
              "code": [
                "{",
                "    let scheme = \"ws\";",
                "    let result = url::default_port(scheme);",
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"wss\";",
                "    let result = url::default_port(scheme);",
                "}"
              ],
              "oracle": [
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));"
              ],
              "code": [
                "{",
                "    let scheme = \"wss\";",
                "    let result = url::default_port(scheme);",
                "    let scheme = \"ftp\";",
                "    let result = url::default_port(scheme);",
                "    assert_eq!(result, Some(21));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: scheme matches \"http\" at line 188 is false\n",
        "precondition: scheme matches \"ws\" at line 188 is false\n",
        "precondition: scheme matches \"https\" at line 189 is false\n",
        "precondition: scheme matches \"wss\" at line 189 is false\n",
        "precondition: scheme matches \"ftp\" at line 190 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "test input conditions: scheme should be any string not equal to \"http\", \"ws\", \"https\", \"wss\", or \"ftp\" including empty string, unknown schemes, or non-HTTP protocols\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = default_port(\"\");",
                "}"
              ],
              "oracle": [
                "    let result = default_port(\"\");",
                "    assert_eq!(result, None);",
                "    let result = default_port(\"invalid_scheme\");",
                "    assert_eq!(result, None);",
                "    let result = default_port(\"telnet\");",
                "    assert_eq!(result, None);",
                "    let result = default_port(\"smtp\");",
                "    assert_eq!(result, None);",
                "    let result = default_port(\"gopher\");",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = default_port(\"\");",
                "    let result = default_port(\"\");",
                "    assert_eq!(result, None);",
                "    let result = default_port(\"invalid_scheme\");",
                "    assert_eq!(result, None);",
                "    let result = default_port(\"telnet\");",
                "    assert_eq!(result, None);",
                "    let result = default_port(\"smtp\");",
                "    assert_eq!(result, None);",
                "    let result = default_port(\"gopher\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = default_port(\"unknown\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = default_port(\"unknown\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = default_port(\"smtp\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = default_port(\"smtp\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = default_port(\"telnet\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = default_port(\"telnet\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = default_port(\"this_is_a_really_long_scheme_name\");",
                "}"
              ],
              "oracle": [
                "    let result = default_port(\"this_is_a_really_long_scheme_name\");",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = default_port(\"this_is_a_really_long_scheme_name\");",
                "    let result = default_port(\"this_is_a_really_long_scheme_name\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = default_port(\"http://example.com\");",
                "}"
              ],
              "oracle": [
                "    let result = default_port(\"invalid_scheme\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = default_port(\"sftp\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = default_port(\"telnet\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = default_port(\"file\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = default_port(\"mailto\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = default_port(\"gopher\");",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let result = default_port(\"http://example.com\");",
                "    let result = default_port(\"invalid_scheme\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = default_port(\"sftp\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = default_port(\"telnet\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = default_port(\"file\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = default_port(\"mailto\");",
                "    assert_eq!(result, None);",
                "    ",
                "    let result = default_port(\"gopher\");",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}