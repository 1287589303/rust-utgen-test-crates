{
  "name": "url::origin::{impl#0}::unicode_serialization",
  "mod_info": {
    "name": "origin",
    "loc": "url/src/lib.rs:217:1:217:12"
  },
  "visible": true,
  "loc": "url/src/origin.rs:92:5:110:6",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self matches Origin::Tuple(ref scheme, ref host, port) at line 93 is true\n",
        "precondition: *host matches Host::Domain(ref domain) at line 97 is false\n",
        "precondition: *host matches _ at line 101 is true\n",
        "precondition: default_port(scheme) == Some(port) at line 103 is false\n"
      ],
      "input_infer": "Valid schemes: \"http\", \"https\", \"ftp\", and \"ws\"; valid non-domain hosts: Ipv4 and Ipv6 addresses; port range 1-65535 excluding default ports for the schemes; ensure scheme not equal to \"http\", \"https\", \"ftp\", \"ws\" for opaque origin or user defined ports.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"ftp\";",
                "    let host = Host::Ipv4(\"192.168.1.1\".parse().unwrap());",
                "    let port = 22; // port 22 is not the default for ftp",
                "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
                "    let result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"ftp://192.168.1.1:22\");"
              ],
              "code": [
                "{",
                "    let scheme = \"ftp\";",
                "    let host = Host::Ipv4(\"192.168.1.1\".parse().unwrap());",
                "    let port = 22; // port 22 is not the default for ftp",
                "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
                "    let result = origin.unicode_serialization();",
                "    assert_eq!(result, \"ftp://192.168.1.1:22\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"ws\";",
                "    let host = Host::Ipv6(\"::1\".parse().unwrap());",
                "    let port = 8080; // port 8080 is not the default for ws",
                "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
                "    let result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"ws://[::1]:8080\".to_owned());"
              ],
              "code": [
                "{",
                "    let scheme = \"ws\";",
                "    let host = Host::Ipv6(\"::1\".parse().unwrap());",
                "    let port = 8080; // port 8080 is not the default for ws",
                "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
                "    let result = origin.unicode_serialization();",
                "    assert_eq!(result, \"ws://[::1]:8080\".to_owned());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"http\"; // scheme is valid",
                "    let host = Host::Ipv4(\"10.0.0.1\".parse().unwrap());",
                "    let port = 3000; // port 3000 is a valid custom port, not default for http",
                "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
                "    let result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"http://10.0.0.1:3000\");"
              ],
              "code": [
                "{",
                "    let scheme = \"http\"; // scheme is valid",
                "    let host = Host::Ipv4(\"10.0.0.1\".parse().unwrap());",
                "    let port = 3000; // port 3000 is a valid custom port, not default for http",
                "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
                "    let result = origin.unicode_serialization();",
                "    assert_eq!(result, \"http://10.0.0.1:3000\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"https\"; // scheme is valid",
                "    let host = Host::Ipv6(\"2001:db8::ff00:42:8329\".parse().unwrap());",
                "    let port = 10001; // port 10001 is not the default for https",
                "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
                "    let result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"https://[2001:db8::ff00:42:8329]:10001\".to_owned());"
              ],
              "code": [
                "{",
                "    let scheme = \"https\"; // scheme is valid",
                "    let host = Host::Ipv6(\"2001:db8::ff00:42:8329\".parse().unwrap());",
                "    let port = 10001; // port 10001 is not the default for https",
                "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
                "    let result = origin.unicode_serialization();",
                "    assert_eq!(result, \"https://[2001:db8::ff00:42:8329]:10001\".to_owned());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: *self matches Origin::Tuple(ref scheme, ref host, port) at line 93 is true\n",
        "precondition: *host matches Host::Domain(ref domain) at line 96 is true\n",
        "precondition: *host matches Host::Domain(ref domain) at line 96 is true\n",
        "precondition: default_port(scheme) == Some(port) at line 103 is true\n"
      ],
      "input_infer": "Valid inputs for scheme: \"http\", \"https\", \"ftp\"; for host: valid DNS domain names (e.g., \"example.com\", \"sub.domain.com\"); for port: 80 for \"http\" and \"ws\", 443 for \"https\" and \"wss\", 21 for \"ftp\".\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"http\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 80;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.unicode_serialization(), \"http://example.com\");"
              ],
              "code": [
                "{",
                "    let scheme = \"http\".to_owned();",
                "    let host = Host::Domain(\"example.com\".to_owned());",
                "    let port = 80;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _result = origin.unicode_serialization();",
                "    assert_eq!(origin.unicode_serialization(), \"http://example.com\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"https\".to_owned();",
                "    let host = Host::Domain(\"sub.domain.com\".to_owned());",
                "    let port = 443;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.unicode_serialization(), \"https://sub.domain.com\");"
              ],
              "code": [
                "{",
                "    let scheme = \"https\".to_owned();",
                "    let host = Host::Domain(\"sub.domain.com\".to_owned());",
                "    let port = 443;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _result = origin.unicode_serialization();",
                "    assert_eq!(origin.unicode_serialization(), \"https://sub.domain.com\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let scheme = \"ftp\".to_owned();",
                "    let host = Host::Domain(\"ftp.example.com\".to_owned());",
                "    let port = 21;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, \"ftp://ftp.example.com\");"
              ],
              "code": [
                "{",
                "    let scheme = \"ftp\".to_owned();",
                "    let host = Host::Domain(\"ftp.example.com\".to_owned());",
                "    let port = 21;",
                "    let origin = Origin::Tuple(scheme, host, port);",
                "    let _result = origin.unicode_serialization();",
                "    assert_eq!(_result, \"ftp://ftp.example.com\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: *self matches Origin::Opaque(_) at line 93 is true\n",
        "precondition: *self matches Origin::Opaque(_) at line 93 is true\n"
      ],
      "input_infer": "self is of type Origin::Opaque with various unique identifiers (OpaqueOrigin instances).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(1));",
                "    let _result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.unicode_serialization(), \"null\");"
              ],
              "code": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(1));",
                "    let _result = origin.unicode_serialization();",
                "    assert_eq!(origin.unicode_serialization(), \"null\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(2));",
                "    let _result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.unicode_serialization(), \"null\");"
              ],
              "code": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(2));",
                "    let _result = origin.unicode_serialization();",
                "    assert_eq!(origin.unicode_serialization(), \"null\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(3));",
                "    let _result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.unicode_serialization(), \"null\");"
              ],
              "code": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(3));",
                "    let _result = origin.unicode_serialization();",
                "    assert_eq!(origin.unicode_serialization(), \"null\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(usize::MAX));",
                "    let _result = origin.unicode_serialization();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.unicode_serialization(), \"null\");"
              ],
              "code": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(usize::MAX));",
                "    let _result = origin.unicode_serialization();",
                "    assert_eq!(origin.unicode_serialization(), \"null\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}