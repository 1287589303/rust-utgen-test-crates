{
  "name": "url::origin::{impl#0}::is_tuple",
  "mod_info": {
    "name": "origin",
    "loc": "url/src/lib.rs:217:1:217:12"
  },
  "visible": true,
  "loc": "url/src/origin.rs:73:5:75:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self matches _ at line 459 is true\n",
        "precondition: *self matches Origin::Tuple(..) at line 74 is false\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "Test input conditions or ranges: Origin::Opaque(OpaqueOrigin(1)), Origin::Opaque(OpaqueOrigin(0)), Origin::Opaque(OpaqueOrigin(usize::MAX)), Origin::Tuple(\"example.com\".to_owned(), Host::Domain(\"example.com\".to_owned()), 80) but with a different host or port.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(1));",
                "    let _result = origin.is_tuple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.is_tuple(), false);"
              ],
              "code": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(1));",
                "    let _result = origin.is_tuple();",
                "    assert_eq!(origin.is_tuple(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(0));",
                "    let _result = origin.is_tuple();",
                "}"
              ],
              "oracle": [
                "    let origin = Origin::Opaque(OpaqueOrigin(0));",
                "    let result = origin.is_tuple();",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(0));",
                "    let _result = origin.is_tuple();",
                "    let origin = Origin::Opaque(OpaqueOrigin(0));",
                "    let result = origin.is_tuple();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(usize::MAX));",
                "    let _result = origin.is_tuple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.is_tuple(), false);"
              ],
              "code": [
                "{",
                "    let origin = Origin::Opaque(OpaqueOrigin(usize::MAX));",
                "    let _result = origin.is_tuple();",
                "    assert_eq!(origin.is_tuple(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Tuple(\"example.com\".to_owned(), Host::Domain(\"different.com\".to_owned()), 80);",
                "    let _result = origin.is_tuple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.is_tuple(), false);"
              ],
              "code": [
                "{",
                "    let origin = Origin::Tuple(\"example.com\".to_owned(), Host::Domain(\"different.com\".to_owned()), 80);",
                "    let _result = origin.is_tuple();",
                "    assert_eq!(origin.is_tuple(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Tuple(\"example.com\".to_owned(), Host::Domain(\"example.com\".to_owned()), 81);",
                "    let _result = origin.is_tuple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(origin.is_tuple(), false);"
              ],
              "code": [
                "{",
                "    let origin = Origin::Tuple(\"example.com\".to_owned(), Host::Domain(\"example.com\".to_owned()), 81);",
                "    let _result = origin.is_tuple();",
                "    assert_eq!(origin.is_tuple(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self matches Origin::Tuple(..) at line 74 is true\n",
        "precondition: *self matches Origin::Tuple(..) at line 74 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "self = Origin::Tuple(\"http\".to_string(), Host::Domain(\"example.com\".to_string()), 80) or self = Origin::Tuple(\"https\".to_string(), Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1)), 443)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Tuple(\"http\".to_string(), Host::Domain(\"example.com\".to_string()), 80);",
                "    let result = origin.is_tuple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let origin = Origin::Tuple(\"http\".to_string(), Host::Domain(\"example.com\".to_string()), 80);",
                "    let result = origin.is_tuple();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let origin = Origin::Tuple(\"https\".to_string(), Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1)), 443);",
                "    let result = origin.is_tuple();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let origin = Origin::Tuple(\"https\".to_string(), Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1)), 443);",
                "    let result = origin.is_tuple();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}