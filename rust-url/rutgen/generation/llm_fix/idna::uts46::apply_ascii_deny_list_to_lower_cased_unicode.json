{
  "name": "idna::uts46::apply_ascii_deny_list_to_lower_cased_unicode",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:206:1:216:2",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Some(shifted) = 1u128.checked_shl(u32::from(c)) at line 207 is true\n",
        "precondition: (deny_list & shifted) == 0 at line 208 is false\n",
        "expected return value/type: c\n"
      ],
      "input_infer": "char c in the range of 'a' to 'z' and deny_list containing the bit corresponding to c; ensure denial of c in deny_list scenarios.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'a';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'a';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, c);"
              ],
              "code": [
                "{",
                "    let c = 'a';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'a';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, c);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'b';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'b';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    assert_eq!(result, c);"
              ],
              "code": [
                "{",
                "    let c = 'b';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'b';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    assert_eq!(result, c);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'c';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'c');"
              ],
              "code": [
                "{",
                "    let c = 'c';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'c');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'd';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'd';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    assert_eq!(result, c);"
              ],
              "code": [
                "{",
                "    let c = 'd';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'd';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    assert_eq!(result, c);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'e';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'e';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, c);"
              ],
              "code": [
                "{",
                "    let c = 'e';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'e';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, c);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'f';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'f');"
              ],
              "code": [
                "{",
                "    let c = 'f';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'f');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'g';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'g');"
              ],
              "code": [
                "{",
                "    let c = 'g';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'g');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'h';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'h';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    assert_eq!(result, c);"
              ],
              "code": [
                "{",
                "    let c = 'h';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'h';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    assert_eq!(result, c);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'i';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'i');"
              ],
              "code": [
                "{",
                "    let c = 'i';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'i');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'j';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, c);"
              ],
              "code": [
                "{",
                "    let c = 'j';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, c);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'k';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'k';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    assert_eq!(result, c);"
              ],
              "code": [
                "{",
                "    let c = 'k';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'k';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    assert_eq!(result, c);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'l';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'l');"
              ],
              "code": [
                "{",
                "    let c = 'l';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'l');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'm';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'm');"
              ],
              "code": [
                "{",
                "    let c = 'm';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'm');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'n';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'n');"
              ],
              "code": [
                "{",
                "    let c = 'n';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'n');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'o';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'o');"
              ],
              "code": [
                "{",
                "    let c = 'o';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'o');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'p';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'p');"
              ],
              "code": [
                "{",
                "    let c = 'p';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'p');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'q';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'q';",
                "    let deny_list = (1u128 << u32::from(c)) | (1u128 << u32::from('a'));",
                "    let expected_result = c;",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let c = 'q';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'q';",
                "    let deny_list = (1u128 << u32::from(c)) | (1u128 << u32::from('a'));",
                "    let expected_result = c;",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'r';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'r');"
              ],
              "code": [
                "{",
                "    let c = 'r';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'r');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 's';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 's');"
              ],
              "code": [
                "{",
                "    let c = 's';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 's');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 't';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 't';",
                "    let deny_list = 1u128 << u32::from(c) | (1u128 << u32::from('t'));",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 't');"
              ],
              "code": [
                "{",
                "    let c = 't';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 't';",
                "    let deny_list = 1u128 << u32::from(c) | (1u128 << u32::from('t'));",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 't');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'u';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'u');"
              ],
              "code": [
                "{",
                "    let c = 'u';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'u');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'v';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, c);"
              ],
              "code": [
                "{",
                "    let c = 'v';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, c);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'w';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'w');"
              ],
              "code": [
                "{",
                "    let c = 'w';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'w');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'x';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'x';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, c);"
              ],
              "code": [
                "{",
                "    let c = 'x';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'x';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, c);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'y';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, c);"
              ],
              "code": [
                "{",
                "    let c = 'y';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, c);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'z';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'z');"
              ],
              "code": [
                "{",
                "    let c = 'z';",
                "    let deny_list = 1u128 << u32::from(c);",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, 'z');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: let Some(shifted) = 1u128.checked_shl(u32::from(c)) at line 207 is true\n",
        "precondition: (deny_list & shifted) == 0 at line 208 is true\n",
        "expected return value/type: '\\u{FFFD}'\n"
      ],
      "input_infer": "char in range of '\\u{00}' to '\\u{7F}' with deny_list covering bits for letters between 'A' to 'Z' and 'a' to 'z' in u128 representation.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'a';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'A';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32));",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');"
              ],
              "code": [
                "{",
                "    let c = 'a';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'A';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32));",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'b';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '\\u{FFFD}');"
              ],
              "code": [
                "{",
                "    let c = 'b';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'z';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32)); // Deny 'A' and 'Z'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'Z';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, '\\u{FFFD}');",
                "    ",
                "    let c = 'A';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, '\\u{FFFD}');",
                "    ",
                "    let c = 'a';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, 'a');",
                "    ",
                "    let c = '3';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, '3');",
                "    ",
                "    let c = '.';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, '.');",
                "    ",
                "    let c = ' ';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, ' ');"
              ],
              "code": [
                "{",
                "    let c = 'z';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32)); // Deny 'A' and 'Z'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'Z';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, '\\u{FFFD}');",
                "    ",
                "    let c = 'A';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, '\\u{FFFD}');",
                "    ",
                "    let c = 'a';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, 'a');",
                "    ",
                "    let c = '3';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, '3');",
                "    ",
                "    let c = '.';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, '.');",
                "    ",
                "    let c = ' ';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'Z' as u32));",
                "    assert_eq!(result, ' ');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'A';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'C' as u32)); // Deny 'A' and 'C'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    let c = 'A';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'C' as u32));",
                "    let expected = '\\u{FFFD}';",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let c = 'A';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'C' as u32)); // Deny 'A' and 'C'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    let c = 'A';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'C' as u32));",
                "    let expected = '\\u{FFFD}';",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'B';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '\\u{FFFD}');"
              ],
              "code": [
                "{",
                "    let c = 'B';",
                "    let deny_list: u128 = (1u128 << (b'A' as u32)) | (1u128 << (b'B' as u32)); // Deny 'A' and 'B'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let c = 'Z';",
                "    let deny_list: u128 = (1u128 << (b'Z' as u32)) | (1u128 << (b'Y' as u32)); // Deny 'Z' and 'Y'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, '\\u{FFFD}');"
              ],
              "code": [
                "{",
                "    let c = 'Z';",
                "    let deny_list: u128 = (1u128 << (b'Z' as u32)) | (1u128 << (b'Y' as u32)); // Deny 'Z' and 'Y'",
                "    let result = apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list);",
                "    assert_eq!(result, '\\u{FFFD}');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}