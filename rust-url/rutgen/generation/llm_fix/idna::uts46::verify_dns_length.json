{
  "name": "idna::uts46::verify_dns_length",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": true,
  "loc": "idna/src/uts46.rs:463:1:486:2",
  "fn_tests": [
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: bytes.is_ascii() at line 465 is true\n",
        "precondition: let Some(without) = bytes.strip_suffix(b\".\") at line 466 is true\n",
        "precondition: allow_trailing_dot at line 467 is true\n",
        "precondition: domain_name_without_trailing_dot.len() > 253 at line 474 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.\" (length = 254), allow_trailing_dot = true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.\"; // length = 254",
                "    let allow_trailing_dot = true;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(verify_dns_length(\"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.\", true), false);"
              ],
              "code": [
                "{",
                "    let domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.\"; // length = 254",
                "    let allow_trailing_dot = true;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    assert_eq!(verify_dns_length(\"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.\", true), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 7,
      "prompt_conds": [
        "precondition: bytes.is_ascii() at line 465 is true\n",
        "precondition: let Some(without) = bytes.strip_suffix(b\".\") at line 466 is true\n",
        "precondition: allow_trailing_dot at line 467 is true\n",
        "precondition: domain_name_without_trailing_dot.len() > 253 at line 474 is false, with bound domain_name_without_trailing_dot.len() == 253\n",
        "precondition: label in domain_name_without_trailing_dot.split(|b| *b == b'.') at line 477 is true\n",
        "precondition: label.is_empty() at line 478 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "test input conditions: domain_name = \"example..com\", allow_trailing_dot = true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"example..com\";",
                "    let allow_trailing_dot = true;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    let domain_name = \"example..com\";",
                "    let allow_trailing_dot = true;",
                "    assert_eq!(verify_dns_length(domain_name, allow_trailing_dot), false);"
              ],
              "code": [
                "{",
                "    let domain_name = \"example..com\";",
                "    let allow_trailing_dot = true;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    let domain_name = \"example..com\";",
                "    let allow_trailing_dot = true;",
                "    assert_eq!(verify_dns_length(domain_name, allow_trailing_dot), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 8,
      "prompt_conds": [
        "precondition: bytes.is_ascii() at line 465 is true\n",
        "precondition: let Some(without) = bytes.strip_suffix(b\".\") at line 466 is true\n",
        "precondition: allow_trailing_dot at line 467 is true\n",
        "precondition: domain_name_without_trailing_dot.len() > 253 at line 474 is false, with bound domain_name_without_trailing_dot.len() == 253\n",
        "precondition: label in domain_name_without_trailing_dot.split(|b| *b == b'.') at line 477 is true\n",
        "precondition: label.is_empty() at line 478 is false\n",
        "precondition: label.len() > 63 at line 481 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "ASCII domain name string with a length of 253 characters, ending with a dot, containing at least one label longer than 63 characters, and `allow_trailing_dot` set to true.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a\".repeat(63) + \".b\".repeat(190); // 253 characters total",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(&(domain_name + \".\"), allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let domain_name = \"a\".repeat(63) + \".b\".repeat(190); // 253 characters total",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(&(domain_name + \".\"), allow_trailing_dot);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a\".repeat(64) + \".b\".repeat(189); // 253 characters total",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(&(domain_name + \".\"), allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let domain_name = \"a\".repeat(64) + \".b\".repeat(189); // 253 characters total",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(&(domain_name + \".\"), allow_trailing_dot);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 9,
      "prompt_conds": [
        "precondition: bytes.is_ascii() at line 465 is true\n",
        "precondition: let Some(without) = bytes.strip_suffix(b\".\") at line 466 is true\n",
        "precondition: allow_trailing_dot at line 467 is true\n",
        "precondition: domain_name_without_trailing_dot.len() > 253 at line 474 is false, with bound domain_name_without_trailing_dot.len() == 253\n",
        "precondition: label in domain_name_without_trailing_dot.split(|b| *b == b'.') at line 477 is true\n",
        "precondition: label.is_empty() at line 478 is false\n",
        "precondition: label.len() > 63 at line 481 is false, with bound label.len() == 63\n",
        "precondition: label in domain_name_without_trailing_dot.split(|b| *b == b'.') at line 477 is false\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "Test input conditions: domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmno\", allow_trailing_dot = true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmno.\";",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert!(result == true);"
              ],
              "code": [
                "{",
                "    let domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.abcdefghijklmnopqrstuvwxyz.abcdefghijklmnopqrstuvwxyz.abcdefghijklmno.\";",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(domain_name, allow_trailing_dot);",
                "    assert!(result == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 10,
      "prompt_conds": [
        "precondition: bytes.is_ascii() at line 465 is true\n",
        "precondition: let Some(without) = bytes.strip_suffix(b\".\") at line 466 is true\n",
        "precondition: allow_trailing_dot at line 467 is true\n",
        "precondition: domain_name_without_trailing_dot.len() > 253 at line 474 is false, with bound domain_name_without_trailing_dot.len() == 253\n",
        "precondition: label in domain_name_without_trailing_dot.split(|b| *b == b'.') at line 477 is false\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "test input conditions or ranges: domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z\" (exactly 253 ASCII characters, no trailing dot), allow_trailing_dot = true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z\"; // 253 characters",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z\"; // 253 characters",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(domain_name, allow_trailing_dot);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.\"; // 254 characters with trailing dot",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.\"; // 254 characters with trailing dot",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(domain_name, allow_trailing_dot);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z..\"; // 253 characters with empty label",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert!(!result);"
              ],
              "code": [
                "{",
                "    let domain_name = \"a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z..\"; // 253 characters with empty label",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(domain_name, allow_trailing_dot);",
                "    assert!(!result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"......\"; // No valid labels, only dots",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let domain_name = \"......\"; // No valid labels, only dots",
                "    let allow_trailing_dot = true;",
                "    let result = verify_dns_length(domain_name, allow_trailing_dot);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 11,
      "prompt_conds": [
        "precondition: bytes.is_ascii() at line 465 is true\n",
        "precondition: let Some(without) = bytes.strip_suffix(b\".\") at line 466 is true\n",
        "precondition: allow_trailing_dot at line 467 is false\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "domain_name input length: 254 to 2000 characters, only ASCII characters used, must end with a dot, allow_trailing_dot set to false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a\".repeat(254) + \".\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name.as_str(), allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert!(!verify_dns_length(\"a\".repeat(254) + \".\", false));"
              ],
              "code": [
                "{",
                "    let domain_name = \"a\".repeat(254) + \".\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name.as_str(), allow_trailing_dot);",
                "    assert!(!verify_dns_length(\"a\".repeat(254) + \".\", false));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a..\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name.as_str(), allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(verify_dns_length(\"a..\", false), false);"
              ],
              "code": [
                "{",
                "    let domain_name = \"a..\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name.as_str(), allow_trailing_dot);",
                "    assert_eq!(verify_dns_length(\"a..\", false), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a\".repeat(64) + \".b\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name.as_str(), allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert!(!verify_dns_length(\"a\".repeat(64) + \".b\", false));"
              ],
              "code": [
                "{",
                "    let domain_name = \"a\".repeat(64) + \".b\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name.as_str(), allow_trailing_dot);",
                "    assert!(!verify_dns_length(\"a\".repeat(64) + \".b\", false));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name = \"a\".repeat(63) + \".\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name.as_str(), allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(verify_dns_length(\"a\".repeat(63) + \".\", false), false);"
              ],
              "code": [
                "{",
                "    let domain_name = \"a\".repeat(63) + \".\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name.as_str(), allow_trailing_dot);",
                "    assert_eq!(verify_dns_length(\"a\".repeat(63) + \".\", false), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 12,
      "prompt_conds": [
        "precondition: bytes.is_ascii() at line 465 is false\n"
      ],
      "input_infer": "non-ASCII inputs like \"éxample.com\" or \"пример.рф\" \n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let domain_name = \"éxample.com\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    #[test]",
                "    fn test_non_ascii_input() {",
                "    let domain_name = \"éxample.com\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    }"
              ],
              "code": [
                "{",
                "    let domain_name = \"éxample.com\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_non_ascii_input() {",
                "    let domain_name = \"éxample.com\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let domain_name = \"пример.рф\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    #[test]",
                "    fn test_non_ascii_domain_name() {",
                "    let domain_name = \"пример.рф\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    }"
              ],
              "code": [
                "{",
                "    let domain_name = \"пример.рф\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_non_ascii_domain_name() {",
                "    let domain_name = \"пример.рф\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let domain_name = \"test@domain.com\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    #[test]",
                "    fn test_non_ascii_input() {",
                "    let domain_name = \"test@domain.com\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    }"
              ],
              "code": [
                "{",
                "    let domain_name = \"test@domain.com\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_non_ascii_input() {",
                "    let domain_name = \"test@domain.com\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let domain_name = \"example.com😀\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    #[test]",
                "    let domain_name_invalid_ascii = \"example.com😀\";",
                "    let allow_trailing_dot_false = false;",
                "    verify_dns_length(domain_name_invalid_ascii, allow_trailing_dot_false);"
              ],
              "code": [
                "{",
                "    let domain_name = \"example.com😀\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    #[should_panic]",
                "    #[test]",
                "    let domain_name_invalid_ascii = \"example.com😀\";",
                "    let allow_trailing_dot_false = false;",
                "    verify_dns_length(domain_name_invalid_ascii, allow_trailing_dot_false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let domain_name = \"example.测试\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    #[test]",
                "    fn test_non_ascii_character() {",
                "    let domain_name = \"example.测试\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    }"
              ],
              "code": [
                "{",
                "    let domain_name = \"example.测试\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_non_ascii_character() {",
                "    let domain_name = \"example.测试\";",
                "    let allow_trailing_dot = false;",
                "    verify_dns_length(domain_name, allow_trailing_dot);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}