{
  "name": "idna::domain_to_ascii",
  "mod_info": {
    "name": "",
    "loc": "idna/src/lib.rs:9:1:171:2"
  },
  "visible": true,
  "loc": "idna/src/lib.rs:128:1:130:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid ASCII domain names, invalid domain names with non-ASCII characters, domain names with hyphens, empty strings, domain names exceeding typical length limits (e.g., 253 characters), and varying cases (upper-case, lower-case, mixed-case).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain = \"example.com\";",
                "    let _result = domain_to_ascii(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(domain_to_ascii(\"example.com\"), Ok(\"example.com\".to_string()));",
                "    assert_eq!(domain_to_ascii(\"EXAMPLE.COM\"), Ok(\"example.com\".to_string()));",
                "    assert_eq!(domain_to_ascii(\"ex-ample.com\"), Ok(\"ex-ample.com\".to_string()));",
                "    assert!(domain_to_ascii(\"ex ample.com\").is_err());",
                "    assert_eq!(domain_to_ascii(\"xn--exmple-0h.com\"), Ok(\"example.com\".to_string()));",
                "    assert!(domain_to_ascii(\"éxample.com\").is_ok());",
                "    assert!(domain_to_ascii(\"example.ком\").is_ok());",
                "    assert!(domain_to_ascii(\"\").is_err());",
                "    assert!(domain_to_ascii(\"!example.com\").is_err());",
                "    assert!(domain_to_ascii(\"example!@#.com\").is_err());"
              ],
              "code": [
                "{",
                "    let domain = \"example.com\";",
                "    let _result = domain_to_ascii(domain);",
                "    assert_eq!(domain_to_ascii(\"example.com\"), Ok(\"example.com\".to_string()));",
                "    assert_eq!(domain_to_ascii(\"EXAMPLE.COM\"), Ok(\"example.com\".to_string()));",
                "    assert_eq!(domain_to_ascii(\"ex-ample.com\"), Ok(\"ex-ample.com\".to_string()));",
                "    assert!(domain_to_ascii(\"ex ample.com\").is_err());",
                "    assert_eq!(domain_to_ascii(\"xn--exmple-0h.com\"), Ok(\"example.com\".to_string()));",
                "    assert!(domain_to_ascii(\"éxample.com\").is_ok());",
                "    assert!(domain_to_ascii(\"example.ком\").is_ok());",
                "    assert!(domain_to_ascii(\"\").is_err());",
                "    assert!(domain_to_ascii(\"!example.com\").is_err());",
                "    assert!(domain_to_ascii(\"example!@#.com\").is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain = \"exámple.com\";",
                "    let _result = domain_to_ascii(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(\"example.com\".to_string()));",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert!(_result.is_err() == false);",
                "    assert!(matches!(_result, Ok(_)));",
                "    assert!(_result.unwrap() == \"example.com\");",
                "    assert!(_result.map_err(|_| ()).is_ok());"
              ],
              "code": [
                "{",
                "    let domain = \"exámple.com\";",
                "    let _result = domain_to_ascii(domain);",
                "    assert_eq!(_result, Ok(\"example.com\".to_string()));",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert!(_result.is_err() == false);",
                "    assert!(matches!(_result, Ok(_)));",
                "    assert!(_result.unwrap() == \"example.com\");",
                "    assert!(_result.map_err(|_| ()).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain = \"example-domain.com\";",
                "    let _result = domain_to_ascii(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(\"example-domain.com\".to_string()));",
                "    let domain_with_uppercase = \"Example-Domain.COM\";",
                "    let _result_uppercase = domain_to_ascii(domain_with_uppercase);",
                "    assert_eq!(_result_uppercase, Ok(\"example-domain.com\".to_string()));",
                "    let domain_with_unicode = \"exampél-domain.com\";",
                "    let _result_unicode = domain_to_ascii(domain_with_unicode);",
                "    assert!(matches!(_result_unicode, Ok(_)));",
                "    let invalid_domain = \"invalid_domain\";",
                "    let _result_invalid = domain_to_ascii(invalid_domain);",
                "    assert!(matches!(_result_invalid, Err(_)));",
                "    let empty_domain = \"\";",
                "    let _result_empty = domain_to_ascii(empty_domain);",
                "    assert!(matches!(_result_empty, Err(_)));",
                "    let domain_with_hyphen = \"-example-domain.com\";",
                "    let _result_hyphen = domain_to_ascii(domain_with_hyphen);",
                "    assert!(matches!(_result_hyphen, Err(_)));",
                "    let valid_punycode = \"xn--exmple-6ya.com\";",
                "    let _result_punycode = domain_to_ascii(valid_punycode);",
                "    assert_eq!(_result_punycode, Ok(\"example.com\".to_string()));"
              ],
              "code": [
                "{",
                "    let domain = \"example-domain.com\";",
                "    let _result = domain_to_ascii(domain);",
                "",
                "    let domain_with_uppercase = \"Example-Domain.COM\";",
                "    let _result_uppercase = domain_to_ascii(domain_with_uppercase);",
                "    assert_eq!(_result_uppercase, Ok(\"example-domain.com\".to_string()));",
                "    let domain_with_unicode = \"exampél-domain.com\";",
                "    let _result_unicode = domain_to_ascii(domain_with_unicode);",
                "    assert!(matches!(_result_unicode, Ok(_)));",
                "    let invalid_domain = \"invalid_domain\";",
                "    let _result_invalid = domain_to_ascii(invalid_domain);",
                "    assert!(matches!(_result_invalid, Err(_)));",
                "    let empty_domain = \"\";",
                "    let _result_empty = domain_to_ascii(empty_domain);",
                "    assert!(matches!(_result_empty, Err(_)));",
                "    let domain_with_hyphen = \"-example-domain.com\";",
                "    let _result_hyphen = domain_to_ascii(domain_with_hyphen);",
                "    assert!(matches!(_result_hyphen, Err(_)));",
                "    let valid_punycode = \"xn--exmple-6ya.com\";",
                "    let _result_punycode = domain_to_ascii(valid_punycode);",
                "    assert_eq!(_result_punycode, Ok(\"example.com\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain = \"\";",
                "    let _result = domain_to_ascii(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(domain_to_ascii(\"\"), Ok(String::from(\"\")));"
              ],
              "code": [
                "{",
                "    let domain = \"\";",
                "    let _result = domain_to_ascii(domain);",
                "    assert_eq!(domain_to_ascii(\"\"), Ok(String::from(\"\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain = \"a\".repeat(254) + \".com\"; // 254 characters before the dot",
                "    let _result = domain_to_ascii(&domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result.is_ok(), true);",
                "    assert_eq!(_result.unwrap(), \"a\".repeat(254) + \".com\");",
                "    assert_eq!(_result.unwrap().len(), 258);"
              ],
              "code": [
                "{",
                "    let domain = \"a\".repeat(254) + \".com\"; // 254 characters before the dot",
                "    let _result = domain_to_ascii(&domain);",
                "    assert_eq!(_result.is_ok(), true);",
                "    assert_eq!(_result.unwrap(), \"a\".repeat(254) + \".com\");",
                "    assert_eq!(_result.unwrap().len(), 258);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain = \"ExAmPlE.cOm\";",
                "    let _result = domain_to_ascii(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Ok(\"example.com\".to_string()));",
                "    assert!(_result.is_ok());",
                "    assert!(_result.is_err());",
                "    let domain = \"\";",
                "    assert_eq!(domain_to_ascii(domain), Ok(\"\".to_string()));",
                "    let domain = \"xn--fsq@.com\";",
                "    assert_eq!(domain_to_ascii(domain), Err(Errors::default()));",
                "    let domain = \"example..com\";",
                "    assert_eq!(domain_to_ascii(domain), Err(Errors::default()));",
                "    let domain = \"example.com\";",
                "    assert_eq!(domain_to_ascii(domain), Ok(\"example.com\".to_string()));",
                "    let domain = \"EXAMPLE.COM\";",
                "    assert_eq!(domain_to_ascii(domain), Ok(\"example.com\".to_string()));",
                "    let domain = \"ex~ample.com\";",
                "    assert_eq!(domain_to_ascii(domain), Ok(\"ex~ample.com\".to_string()));",
                "    let domain = \"exa_mple.com\";",
                "    assert_eq!(domain_to_ascii(domain), Ok(\"exa_mple.com\".to_string()));"
              ],
              "code": [
                "{",
                "    let domain = \"ExAmPlE.cOm\";",
                "    let _result = domain_to_ascii(domain);",
                "    assert_eq!(_result, Ok(\"example.com\".to_string()));",
                "    assert!(_result.is_ok());",
                "    assert!(_result.is_err());",
                "    let domain = \"\";",
                "    assert_eq!(domain_to_ascii(domain), Ok(\"\".to_string()));",
                "    let domain = \"xn--fsq@.com\";",
                "    assert_eq!(domain_to_ascii(domain), Err(Errors::default()));",
                "    let domain = \"example..com\";",
                "    assert_eq!(domain_to_ascii(domain), Err(Errors::default()));",
                "    let domain = \"example.com\";",
                "    assert_eq!(domain_to_ascii(domain), Ok(\"example.com\".to_string()));",
                "    let domain = \"EXAMPLE.COM\";",
                "    assert_eq!(domain_to_ascii(domain), Ok(\"example.com\".to_string()));",
                "    let domain = \"ex~ample.com\";",
                "    assert_eq!(domain_to_ascii(domain), Ok(\"ex~ample.com\".to_string()));",
                "    let domain = \"exa_mple.com\";",
                "    assert_eq!(domain_to_ascii(domain), Ok(\"exa_mple.com\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}