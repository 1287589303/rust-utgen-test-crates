{
  "name": "percent_encoding::percent_decode",
  "mod_info": {
    "name": "",
    "loc": "percent_encoding/src/lib.rs:9:1:481:2"
  },
  "visible": true,
  "loc": "percent_encoding/src/lib.rs:240:1:244:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: PercentDecode {\n        bytes: input.iter(),\n    }\n"
      ],
      "input_infer": "input: byte arrays containing valid percent-encoded strings (e.g., b\"foo%20bar%3f\"), invalid percent-encoded strings (e.g., b\"foo%2\"), and non-encoded strings (e.g., b\"foobar\"); also include edge cases like empty byte arrays (b\"\"), single percent sign (b\"%\"), and low boundary with only percent followed by one hex digit (b\"%1\")\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"foo%20bar%3f\";",
                "    let result = percent_decode(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bytes.as_slice(), input.iter());",
                "    assert!(result.decode_utf8().is_ok());",
                "    assert_eq!(result.decode_utf8_lossy(), \"foo bar?\");",
                "    assert!(result.collect::<Vec<u8>>() == vec![102, 111, 111, 32, 98, 97, 114, 63]);",
                "    assert!(matches!(result, PercentDecode { .. }));"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"foo%20bar%3f\";",
                "    let result = percent_decode(input);",
                "    assert_eq!(result.bytes.as_slice(), input.iter());",
                "    assert!(result.decode_utf8().is_ok());",
                "    assert_eq!(result.decode_utf8_lossy(), \"foo bar?\");",
                "    assert!(result.collect::<Vec<u8>>() == vec![102, 111, 111, 32, 98, 97, 114, 63]);",
                "    assert!(matches!(result, PercentDecode { .. }));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"foo%2\"; // incomplete percent-encoding",
                "    let result = percent_decode(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bytes.as_ptr(), input.as_ptr());",
                "    assert!(result.bytes.len() == input.len());",
                "    assert!(result.bytes.next() == Some(&b'f'));",
                "    assert!(result.bytes.next() == Some(&b'o'));",
                "    assert!(result.bytes.next() == Some(&b'o'));",
                "    assert!(result.bytes.next() == Some(&b'%'));",
                "    assert!(result.bytes.next() == Some(&b'2'));"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"foo%2\"; // incomplete percent-encoding",
                "    let result = percent_decode(input);",
                "    assert_eq!(result.bytes.as_ptr(), input.as_ptr());",
                "    assert!(result.bytes.len() == input.len());",
                "    assert!(result.bytes.next() == Some(&b'f'));",
                "    assert!(result.bytes.next() == Some(&b'o'));",
                "    assert!(result.bytes.next() == Some(&b'o'));",
                "    assert!(result.bytes.next() == Some(&b'%'));",
                "    assert!(result.bytes.next() == Some(&b'2'));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"foobar\"; // no percent-encoding",
                "    let result = percent_decode(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bytes.as_slice(), input.iter());",
                "    assert!(result.decode_utf8().is_ok());",
                "    assert_eq!(result.collect::<Vec<u8>>(), b\"foobar\");",
                "    assert_eq!(result.decode_utf8_lossy(), \"foobar\");",
                "    assert_eq!(percent_decode(b\"foo%20bar%3f\").bytes.as_slice(), b\"foo bar?\");",
                "    assert_eq!(percent_decode(b\"%20\").collect::<Vec<u8>>(), b\" \");",
                "    assert!(percent_decode(b\"abc%xyz\").decode_utf8_lossy().contains(\"abc%xyz\"));"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"foobar\"; // no percent-encoding",
                "    let result = percent_decode(input);",
                "    assert_eq!(result.bytes.as_slice(), input.iter());",
                "    assert!(result.decode_utf8().is_ok());",
                "    assert_eq!(result.collect::<Vec<u8>>(), b\"foobar\");",
                "    assert_eq!(result.decode_utf8_lossy(), \"foobar\");",
                "    assert_eq!(percent_decode(b\"foo%20bar%3f\").bytes.as_slice(), b\"foo bar?\");",
                "    assert_eq!(percent_decode(b\"%20\").collect::<Vec<u8>>(), b\" \");",
                "    assert!(percent_decode(b\"abc%xyz\").decode_utf8_lossy().contains(\"abc%xyz\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"\"; // empty byte array",
                "    let result = percent_decode(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bytes.as_slice(), input);",
                "    assert!(result.bytes.clone().count() == 0);",
                "    assert!(result.bytes.next().is_none());"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"\"; // empty byte array",
                "    let result = percent_decode(input);",
                "    assert_eq!(result.bytes.as_slice(), input);",
                "    assert!(result.bytes.clone().count() == 0);",
                "    assert!(result.bytes.next().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"%\"; // single percent sign",
                "    let result = percent_decode(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bytes.as_slice(), &[b'%']);",
                "    assert_eq!(result.bytes.len(), 1);",
                "    assert!(result.bytes.next().is_some());",
                "    assert!(result.bytes.last().is_some());",
                "    assert!(result.bytes.iter().count() == 1);",
                "    assert!(result.bytes.next().unwrap() == &b'%');",
                "    assert!(result.bytes.len() > 0);"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"%\"; // single percent sign",
                "    let result = percent_decode(input);",
                "    assert_eq!(result.bytes.as_slice(), &[b'%']);",
                "    assert_eq!(result.bytes.len(), 1);",
                "    assert!(result.bytes.next().is_some());",
                "    assert!(result.bytes.last().is_some());",
                "    assert!(result.bytes.iter().count() == 1);",
                "    assert!(result.bytes.next().unwrap() == &b'%');",
                "    assert!(result.bytes.len() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"%1\"; // percent followed by one hex digit",
                "    let result = percent_decode(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.bytes.as_slice(), input.iter());"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"%1\"; // percent followed by one hex digit",
                "    let result = percent_decode(input);",
                "    assert_eq!(result.bytes.as_slice(), input.iter());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}