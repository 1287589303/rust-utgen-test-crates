{
  "name": "url::quirks::password",
  "mod_info": {
    "name": "quirks",
    "loc": "url/src/lib.rs:223:1:223:16"
  },
  "visible": true,
  "loc": "url/src/quirks.rs:128:1:130:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: url.password().unwrap_or(\"\")\n"
      ],
      "input_infer": "valid Url instances containing userinfo with and without password, malformed Url strings, Url instances lacking userinfo, and empty Url strings\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url {",
                "        serialization: \"http://username:password@host.com/path\".to_string(),",
                "        scheme_end: 4,",
                "        username_end: 10,",
                "        host_start: 13,",
                "        host_end: 21,",
                "        host: HostInternal::new(\"host.com\").unwrap(),",
                "        port: None,",
                "        path_start: 22,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = password(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(password(&url), \"password\");",
                "    let url_no_password = Url {",
                "    serialization: \"http://username@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 10,",
                "    host_start: 12,",
                "    host_end: 20,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 21,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_no_password), \"\");",
                "    let url_no_user_info = Url {",
                "    serialization: \"http://host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 4,",
                "    host_start: 7,",
                "    host_end: 15,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 16,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_no_user_info), \"\");",
                "    let url_empty = Url {",
                "    serialization: \"\".to_string(),",
                "    scheme_end: 0,",
                "    username_end: 0,",
                "    host_start: 0,",
                "    host_end: 0,",
                "    host: HostInternal::new(\"\").unwrap(),",
                "    port: None,",
                "    path_start: 0,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_empty), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url {",
                "        serialization: \"http://username:password@host.com/path\".to_string(),",
                "        scheme_end: 4,",
                "        username_end: 10,",
                "        host_start: 13,",
                "        host_end: 21,",
                "        host: HostInternal::new(\"host.com\").unwrap(),",
                "        port: None,",
                "        path_start: 22,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = password(&url);",
                "    assert_eq!(password(&url), \"password\");",
                "    let url_no_password = Url {",
                "    serialization: \"http://username@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 10,",
                "    host_start: 12,",
                "    host_end: 20,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 21,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_no_password), \"\");",
                "    let url_no_user_info = Url {",
                "    serialization: \"http://host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 4,",
                "    host_start: 7,",
                "    host_end: 15,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 16,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_no_user_info), \"\");",
                "    let url_empty = Url {",
                "    serialization: \"\".to_string(),",
                "    scheme_end: 0,",
                "    username_end: 0,",
                "    host_start: 0,",
                "    host_end: 0,",
                "    host: HostInternal::new(\"\").unwrap(),",
                "    port: None,",
                "    path_start: 0,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_empty), \"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url {",
                "        serialization: \"http://username@host.com/path\".to_string(),",
                "        scheme_end: 4,",
                "        username_end: 9,",
                "        host_start: 11,",
                "        host_end: 19,",
                "        host: HostInternal::new(\"host.com\").unwrap(),",
                "        port: None,",
                "        path_start: 20,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = password(&url);",
                "}"
              ],
              "oracle": [
                "    let url_with_password = Url {",
                "    serialization: \"http://username:password@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 9,",
                "    host_start: 11,",
                "    host_end: 19,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 20,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_with_password), \"password\");",
                "    ",
                "    let url_without_password = Url {",
                "    serialization: \"http://username@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 9,",
                "    host_start: 11,",
                "    host_end: 19,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 20,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_without_password), \"\");",
                "    ",
                "    let url_no_username = Url {",
                "    serialization: \"http://host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 4,",
                "    host_start: 7,",
                "    host_end: 15,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 16,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_no_username), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url {",
                "        serialization: \"http://username@host.com/path\".to_string(),",
                "        scheme_end: 4,",
                "        username_end: 9,",
                "        host_start: 11,",
                "        host_end: 19,",
                "        host: HostInternal::new(\"host.com\").unwrap(),",
                "        port: None,",
                "        path_start: 20,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = password(&url);",
                "    let url_with_password = Url {",
                "    serialization: \"http://username:password@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 9,",
                "    host_start: 11,",
                "    host_end: 19,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 20,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_with_password), \"password\");",
                "    ",
                "    let url_without_password = Url {",
                "    serialization: \"http://username@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 9,",
                "    host_start: 11,",
                "    host_end: 19,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 20,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_without_password), \"\");",
                "    ",
                "    let url_no_username = Url {",
                "    serialization: \"http://host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 4,",
                "    host_start: 7,",
                "    host_end: 15,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 16,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_no_username), \"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url {",
                "        serialization: \"http://host.com/path\".to_string(),",
                "        scheme_end: 4,",
                "        username_end: 4,",
                "        host_start: 7,",
                "        host_end: 15,",
                "        host: HostInternal::new(\"host.com\").unwrap(),",
                "        port: None,",
                "        path_start: 16,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = password(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(password(&url), \"\");",
                "    let url_with_userinfo = Url {",
                "    serialization: \"http://user:pass@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 8,",
                "    host_start: 11,",
                "    host_end: 19,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 20,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_with_userinfo), \"pass\");",
                "    let url_without_password = Url {",
                "    serialization: \"http://user@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 4,",
                "    host_start: 7,",
                "    host_end: 15,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 16,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_without_password), \"\");",
                "    let url_with_empty_password = Url {",
                "    serialization: \"http://user:@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 6,",
                "    host_start: 8,",
                "    host_end: 16,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 17,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_with_empty_password), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url {",
                "        serialization: \"http://host.com/path\".to_string(),",
                "        scheme_end: 4,",
                "        username_end: 4,",
                "        host_start: 7,",
                "        host_end: 15,",
                "        host: HostInternal::new(\"host.com\").unwrap(),",
                "        port: None,",
                "        path_start: 16,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = password(&url);",
                "    assert_eq!(password(&url), \"\");",
                "    let url_with_userinfo = Url {",
                "    serialization: \"http://user:pass@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 8,",
                "    host_start: 11,",
                "    host_end: 19,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 20,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_with_userinfo), \"pass\");",
                "    let url_without_password = Url {",
                "    serialization: \"http://user@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 4,",
                "    host_start: 7,",
                "    host_end: 15,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 16,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_without_password), \"\");",
                "    let url_with_empty_password = Url {",
                "    serialization: \"http://user:@host.com/path\".to_string(),",
                "    scheme_end: 4,",
                "    username_end: 6,",
                "    host_start: 8,",
                "    host_end: 16,",
                "    host: HostInternal::new(\"host.com\").unwrap(),",
                "    port: None,",
                "    path_start: 17,",
                "    query_start: None,",
                "    fragment_start: None,",
                "    };",
                "    assert_eq!(password(&url_with_empty_password), \"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url {",
                "        serialization: \"\".to_string(),",
                "        scheme_end: 0,",
                "        username_end: 0,",
                "        host_start: 0,",
                "        host_end: 0,",
                "        host: HostInternal::new(\"\").unwrap(),",
                "        port: None,",
                "        path_start: 0,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = password(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(password(&url), \"\");",
                "    let url_with_username = Url { serialization: \"http://username@host\".to_string(), username_end: 8, ..url.clone() };",
                "    assert_eq!(password(&url_with_username), \"\");",
                "    let url_with_password = Url { serialization: \"http://username:password@host\".to_string(), username_end: 8, ..url.clone() };",
                "    assert_eq!(password(&url_with_password), \"password\");",
                "    let url_with_special_characters = Url { serialization: \"http://user:pass123@host.com\".to_string(), username_end: 8, ..url.clone() };",
                "    assert_eq!(password(&url_with_special_characters), \"pass123\");",
                "    let url_no_userinfo = Url { serialization: \"http://host.com\".to_string(), username_end: 0, ..url.clone() };",
                "    assert_eq!(password(&url_no_userinfo), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url {",
                "        serialization: \"\".to_string(),",
                "        scheme_end: 0,",
                "        username_end: 0,",
                "        host_start: 0,",
                "        host_end: 0,",
                "        host: HostInternal::new(\"\").unwrap(),",
                "        port: None,",
                "        path_start: 0,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = password(&url);",
                "    assert_eq!(password(&url), \"\");",
                "    let url_with_username = Url { serialization: \"http://username@host\".to_string(), username_end: 8, ..url.clone() };",
                "    assert_eq!(password(&url_with_username), \"\");",
                "    let url_with_password = Url { serialization: \"http://username:password@host\".to_string(), username_end: 8, ..url.clone() };",
                "    assert_eq!(password(&url_with_password), \"password\");",
                "    let url_with_special_characters = Url { serialization: \"http://user:pass123@host.com\".to_string(), username_end: 8, ..url.clone() };",
                "    assert_eq!(password(&url_with_special_characters), \"pass123\");",
                "    let url_no_userinfo = Url { serialization: \"http://host.com\".to_string(), username_end: 0, ..url.clone() };",
                "    assert_eq!(password(&url_no_userinfo), \"\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url {",
                "        serialization: \"malformedurl\".to_string(),",
                "        scheme_end: 0,",
                "        username_end: 0,",
                "        host_start: 0,",
                "        host_end: 0,",
                "        host: HostInternal::new(\"\").unwrap(),",
                "        port: None,",
                "        path_start: 0,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = password(&url);",
                "}"
              ],
              "oracle": [
                "    let url = Url { serialization: \"malformedurl\".to_string(), scheme_end: 0, username_end: 0, host_start: 0, host_end: 0, host: HostInternal::new(\"\").unwrap(), port: None, path_start: 0, query_start: None, fragment_start: None }; assert_eq!(password(&url), \"\");",
                "    let url = Url { serialization: \"http://user:password@host.com\".to_string(), scheme_end: 4, username_end: 8, host_start: 17, host_end: 24, host: HostInternal::new(\"host.com\").unwrap(), port: None, path_start: 24, query_start: None, fragment_start: None }; assert_eq!(password(&url), \"password\");",
                "    let url = Url { serialization: \"ftp://user@host.com\".to_string(), scheme_end: 5, username_end: 4, host_start: 9, host_end: 16, host: HostInternal::new(\"host.com\").unwrap(), port: None, path_start: 16, query_start: None, fragment_start: None }; assert_eq!(password(&url), \"\");",
                "    let url = Url { serialization: \"https://host.com\".to_string(), scheme_end: 5, username_end: 0, host_start: 8, host_end: 16, host: HostInternal::new(\"host.com\").unwrap(), port: None, path_start: 16, query_start: None, fragment_start: None }; assert_eq!(password(&url), \"\");",
                "    let url = Url { serialization: \"http://user:password@host.com:80/path\".to_string(), scheme_end: 4, username_end: 8, host_start: 17, host_end: 24, host: HostInternal::new(\"host.com\").unwrap(), port: Some(80), path_start: 25, query_start: None, fragment_start: None }; assert_eq!(password(&url), \"password\");"
              ],
              "code": [
                "{",
                "    let url = Url {",
                "        serialization: \"malformedurl\".to_string(),",
                "        scheme_end: 0,",
                "        username_end: 0,",
                "        host_start: 0,",
                "        host_end: 0,",
                "        host: HostInternal::new(\"\").unwrap(),",
                "        port: None,",
                "        path_start: 0,",
                "        query_start: None,",
                "        fragment_start: None,",
                "    };",
                "    let _ = password(&url);",
                "    let url = Url { serialization: \"malformedurl\".to_string(), scheme_end: 0, username_end: 0, host_start: 0, host_end: 0, host: HostInternal::new(\"\").unwrap(), port: None, path_start: 0, query_start: None, fragment_start: None }; assert_eq!(password(&url), \"\");",
                "    let url = Url { serialization: \"http://user:password@host.com\".to_string(), scheme_end: 4, username_end: 8, host_start: 17, host_end: 24, host: HostInternal::new(\"host.com\").unwrap(), port: None, path_start: 24, query_start: None, fragment_start: None }; assert_eq!(password(&url), \"password\");",
                "    let url = Url { serialization: \"ftp://user@host.com\".to_string(), scheme_end: 5, username_end: 4, host_start: 9, host_end: 16, host: HostInternal::new(\"host.com\").unwrap(), port: None, path_start: 16, query_start: None, fragment_start: None }; assert_eq!(password(&url), \"\");",
                "    let url = Url { serialization: \"https://host.com\".to_string(), scheme_end: 5, username_end: 0, host_start: 8, host_end: 16, host: HostInternal::new(\"host.com\").unwrap(), port: None, path_start: 16, query_start: None, fragment_start: None }; assert_eq!(password(&url), \"\");",
                "    let url = Url { serialization: \"http://user:password@host.com:80/path\".to_string(), scheme_end: 4, username_end: 8, host_start: 17, host_end: 24, host: HostInternal::new(\"host.com\").unwrap(), port: Some(80), path_start: 25, query_start: None, fragment_start: None }; assert_eq!(password(&url), \"password\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}