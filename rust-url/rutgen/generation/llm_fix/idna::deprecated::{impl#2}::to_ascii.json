{
  "name": "idna::deprecated::{impl#2}::to_ascii",
  "mod_info": {
    "name": "deprecated",
    "loc": "idna/src/lib.rs:56:1:56:16"
  },
  "visible": true,
  "loc": "idna/src/deprecated.rs:235:5:239:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid ASCII domain names (e.g., \"example.com\"), valid IDN domain names (e.g., \"xn--exmple-cua.com\"), empty string (\"\"), domains with hyphens, domains exceeding DNS length limits (e.g., >253 characters), and invalid domain names (e.g., \"!!!\").\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"example.com\";",
                "    let _ = config.to_ascii(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.to_ascii(domain).is_ok(), true);",
                "    assert_eq!(config.to_ascii(domain).unwrap(), \"example.com\");",
                "    assert_eq!(config.to_ascii(\"invalid_domain_with_!\").is_err(), true);",
                "    assert_eq!(config.to_ascii(\"example..com\").is_err(), true);",
                "    assert_eq!(config.to_ascii(\"xn--exmple-cua.com\").is_ok(), true);",
                "    assert_eq!(config.to_ascii(\"test.example.org\").unwrap(), \"test.example.org\");",
                "    assert_eq!(config.to_ascii(\"example.com\").unwrap_err(), Errors::default());",
                "    assert_eq!(config.to_ascii(\"example-.com\").is_err(), true);",
                "    assert_eq!(config.to_ascii(\"ex-ample.com\").is_ok(), true);",
                "    assert_eq!(config.to_ascii(\"\").is_err(), true);",
                "    assert_eq!(config.use_std3_ascii_rules(true).to_ascii(domain).unwrap(), \"example.com\");"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"example.com\";",
                "    let _ = config.to_ascii(domain);",
                "    assert_eq!(config.to_ascii(domain).is_ok(), true);",
                "    assert_eq!(config.to_ascii(domain).unwrap(), \"example.com\");",
                "    assert_eq!(config.to_ascii(\"invalid_domain_with_!\").is_err(), true);",
                "    assert_eq!(config.to_ascii(\"example..com\").is_err(), true);",
                "    assert_eq!(config.to_ascii(\"xn--exmple-cua.com\").is_ok(), true);",
                "    assert_eq!(config.to_ascii(\"test.example.org\").unwrap(), \"test.example.org\");",
                "    assert_eq!(config.to_ascii(\"example.com\").unwrap_err(), Errors::default());",
                "    assert_eq!(config.to_ascii(\"example-.com\").is_err(), true);",
                "    assert_eq!(config.to_ascii(\"ex-ample.com\").is_ok(), true);",
                "    assert_eq!(config.to_ascii(\"\").is_err(), true);",
                "    assert_eq!(config.use_std3_ascii_rules(true).to_ascii(domain).unwrap(), \"example.com\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"xn--exmple-cua.com\";",
                "    let _ = config.to_ascii(domain);",
                "}"
              ],
              "oracle": [
                "    assert!(config.to_ascii(domain).is_ok());",
                "    assert_eq!(config.to_ascii(domain).unwrap(), \"example.com\");"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"xn--exmple-cua.com\";",
                "    let _ = config.to_ascii(domain);",
                "    assert!(config.to_ascii(domain).is_ok());",
                "    assert_eq!(config.to_ascii(domain).unwrap(), \"example.com\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"\";",
                "    let _ = config.to_ascii(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.to_ascii(domain).unwrap_err(), Errors::default());",
                "    assert!(config.to_ascii(domain).is_err());",
                "    assert!(config.to_ascii(\"\").is_ok());",
                "    assert_eq!(config.to_ascii(\"\").unwrap(), \"\");",
                "    assert!(config.to_ascii(\"example.com\").is_ok());",
                "    assert!(config.to_ascii(\"example.com\").unwrap().contains(\"example.com\"));",
                "    assert!(config.to_ascii(\"xn--bcher-kva.ch\").is_ok());",
                "    assert_eq!(config.to_ascii(\"xn--bcher-kva.ch\").unwrap(), \"bücher.ch\");",
                "    assert!(config.to_ascii(\"example@domain.com\").is_err());",
                "    assert!(config.to_ascii(\"example..com\").is_err());",
                "    assert!(config.to_ascii(\"example.com.\").is_err());",
                "    assert!(config.to_ascii(\"example/.com\").is_err());"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"\";",
                "    let _ = config.to_ascii(domain);",
                "    assert_eq!(config.to_ascii(domain).unwrap_err(), Errors::default());",
                "    assert!(config.to_ascii(domain).is_err());",
                "    assert!(config.to_ascii(\"\").is_ok());",
                "    assert_eq!(config.to_ascii(\"\").unwrap(), \"\");",
                "    assert!(config.to_ascii(\"example.com\").is_ok());",
                "    assert!(config.to_ascii(\"example.com\").unwrap().contains(\"example.com\"));",
                "    assert!(config.to_ascii(\"xn--bcher-kva.ch\").is_ok());",
                "    assert_eq!(config.to_ascii(\"xn--bcher-kva.ch\").unwrap(), \"bücher.ch\");",
                "    assert!(config.to_ascii(\"example@domain.com\").is_err());",
                "    assert!(config.to_ascii(\"example..com\").is_err());",
                "    assert!(config.to_ascii(\"example.com.\").is_err());",
                "    assert!(config.to_ascii(\"example/.com\").is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"example-domain.com\";",
                "    let _ = config.to_ascii(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.to_ascii(\"example-domain.com\").is_ok(), true);",
                "    assert_eq!(config.to_ascii(\"\").is_ok(), true);",
                "    assert!(config.to_ascii(\"invalid_domain\").is_err());",
                "    assert!(config.to_ascii(\"example-domain\").is_ok());",
                "    assert_eq!(config.to_ascii(\"example..com\").is_err(), true);",
                "    assert!(config.to_ascii(\"ex-.ample.com\").is_err());",
                "    assert!(config.to_ascii(\"example--domain.com\").is_err());",
                "    assert_eq!(config.to_ascii(\"example.com\").unwrap(), \"example.com\");",
                "    assert_eq!(config.to_ascii(\"xn--exmple-1g.com\").is_ok(), true);",
                "    assert!(config.to_ascii(\"exa_mple.com\").is_err());"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"example-domain.com\";",
                "    let _ = config.to_ascii(domain);",
                "    assert_eq!(config.to_ascii(\"example-domain.com\").is_ok(), true);",
                "    assert_eq!(config.to_ascii(\"\").is_ok(), true);",
                "    assert!(config.to_ascii(\"invalid_domain\").is_err());",
                "    assert!(config.to_ascii(\"example-domain\").is_ok());",
                "    assert_eq!(config.to_ascii(\"example..com\").is_err(), true);",
                "    assert!(config.to_ascii(\"ex-.ample.com\").is_err());",
                "    assert!(config.to_ascii(\"example--domain.com\").is_err());",
                "    assert_eq!(config.to_ascii(\"example.com\").unwrap(), \"example.com\");",
                "    assert_eq!(config.to_ascii(\"xn--exmple-1g.com\").is_ok(), true);",
                "    assert!(config.to_ascii(\"exa_mple.com\").is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"a\".repeat(254) + \".com\"; // Over 253 characters",
                "    let _ = config.to_ascii(&domain);",
                "}"
              ],
              "oracle": [
                "    assert!(config.to_ascii(\"a\".repeat(254) + \".com\").is_err());"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"a\".repeat(254) + \".com\"; // Over 253 characters",
                "    let _ = config.to_ascii(&domain);",
                "    assert!(config.to_ascii(\"a\".repeat(254) + \".com\").is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"!!!\";",
                "    let _ = config.to_ascii(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(config.to_ascii(domain).is_err(), true);",
                "    assert!(matches!(config.to_ascii(domain), Err(_)));"
              ],
              "code": [
                "{",
                "    let config = Config::default();",
                "    let domain = \"!!!\";",
                "    let _ = config.to_ascii(domain);",
                "    assert_eq!(config.to_ascii(domain).is_err(), true);",
                "    assert!(matches!(config.to_ascii(domain), Err(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}