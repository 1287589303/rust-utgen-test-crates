{
  "name": "idna::deprecated::{impl#2}::to_unicode",
  "mod_info": {
    "name": "deprecated",
    "loc": "idna/src/lib.rs:56:1:56:16"
  },
  "visible": true,
  "loc": "idna/src/deprecated.rs:242:5:247:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: (out, result)\n"
      ],
      "input_infer": "domain: non-empty valid ASCII string, non-ASCII string with mixed characters, string with special characters (e.g., hyphens), empty string, and maximum string length allowed by the system (e.g., 253 characters for domain names)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default()",
                "        .use_std3_ascii_rules(true)",
                "        .transitional_processing(false)",
                "        .verify_dns_length(true)",
                "        .check_hyphens(true);",
                "    let domain = \"example.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "}"
              ],
              "oracle": [
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(true)",
                "    .transitional_processing(false)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(true);",
                "    let domain = \"example.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"example.com\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(false)",
                "    .transitional_processing(true)",
                "    .verify_dns_length(false)",
                "    .check_hyphens(false);",
                "    let domain = \"ex--ample.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"ex--ample.com\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(true)",
                "    .transitional_processing(true)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(false);",
                "    let domain = \"ex..ample.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"ex..ample.com\");",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let config = Config::default()",
                "        .use_std3_ascii_rules(true)",
                "        .transitional_processing(false)",
                "        .verify_dns_length(true)",
                "        .check_hyphens(true);",
                "    let domain = \"example.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(true)",
                "    .transitional_processing(false)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(true);",
                "    let domain = \"example.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"example.com\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(false)",
                "    .transitional_processing(true)",
                "    .verify_dns_length(false)",
                "    .check_hyphens(false);",
                "    let domain = \"ex--ample.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"ex--ample.com\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(true)",
                "    .transitional_processing(true)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(false);",
                "    let domain = \"ex..ample.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"ex..ample.com\");",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default()",
                "        .use_std3_ascii_rules(false)",
                "        .transitional_processing(true)",
                "        .verify_dns_length(false)",
                "        .check_hyphens(false);",
                "    let domain = \"exámple-例.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(out, \"exámple-例.com\");",
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(false)",
                "    .transitional_processing(false)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(true);",
                "    let domain_invalid = \"exámple-.-例.com\";",
                "    let (out_invalid, result_invalid) = config.to_unicode(domain_invalid);",
                "    assert_eq!(result_invalid.is_ok(), false);",
                "    assert!(out_invalid.is_empty());",
                "    let config_empty = Config::default()",
                "    .use_std3_ascii_rules(true)",
                "    .transitional_processing(true)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(false);",
                "    let domain_empty = \"\";",
                "    let (out_empty, result_empty) = config_empty.to_unicode(domain_empty);",
                "    assert_eq!(result_empty.is_ok(), true);",
                "    assert_eq!(out_empty, \"\");"
              ],
              "code": [
                "{",
                "    let config = Config::default()",
                "        .use_std3_ascii_rules(false)",
                "        .transitional_processing(true)",
                "        .verify_dns_length(false)",
                "        .check_hyphens(false);",
                "    let domain = \"exámple-例.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(out, \"exámple-例.com\");",
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(false)",
                "    .transitional_processing(false)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(true);",
                "    let domain_invalid = \"exámple-.-例.com\";",
                "    let (out_invalid, result_invalid) = config.to_unicode(domain_invalid);",
                "    assert_eq!(result_invalid.is_ok(), false);",
                "    assert!(out_invalid.is_empty());",
                "    let config_empty = Config::default()",
                "    .use_std3_ascii_rules(true)",
                "    .transitional_processing(true)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(false);",
                "    let domain_empty = \"\";",
                "    let (out_empty, result_empty) = config_empty.to_unicode(domain_empty);",
                "    assert_eq!(result_empty.is_ok(), true);",
                "    assert_eq!(out_empty, \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default()",
                "        .use_std3_ascii_rules(true)",
                "        .transitional_processing(true)",
                "        .verify_dns_length(true)",
                "        .check_hyphens(true);",
                "    let domain = \"example--domain.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "}"
              ],
              "oracle": [
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(true)",
                "    .transitional_processing(true)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(true);",
                "    let domain = \"example--domain.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"example--domain.com\");",
                "    assert!(result.is_ok());",
                "    assert!(result.unwrap().is_ok());",
                "    ",
                "    let domain_invalid = \"example--domain_123.com\";",
                "    let (out_invalid, result_invalid) = config.to_unicode(domain_invalid);",
                "    assert_eq!(out_invalid, \"\");",
                "    assert!(result_invalid.is_err());",
                "    ",
                "    let domain_empty = \"\";",
                "    let (out_empty, result_empty) = config.to_unicode(domain_empty);",
                "    assert_eq!(out_empty, \"\");",
                "    assert!(result_empty.is_ok());",
                "    ",
                "    let domain_with_whitespace = \"  example.com  \";",
                "    let (out_whitespace, result_whitespace) = config.to_unicode(domain_with_whitespace);",
                "    assert_eq!(out_whitespace, \"example.com\");",
                "    assert!(result_whitespace.is_ok());",
                "    ",
                "    let domain_specific = \"xn--d1acufc.xn--p1ai\";",
                "    let (out_specific, result_specific) = config.to_unicode(domain_specific);",
                "    assert_eq!(out_specific, \"домен.рф\");",
                "    assert!(result_specific.is_ok());"
              ],
              "code": [
                "{",
                "    let config = Config::default()",
                "        .use_std3_ascii_rules(true)",
                "        .transitional_processing(true)",
                "        .verify_dns_length(true)",
                "        .check_hyphens(true);",
                "    let domain = \"example--domain.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(true)",
                "    .transitional_processing(true)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(true);",
                "    let domain = \"example--domain.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"example--domain.com\");",
                "    assert!(result.is_ok());",
                "    assert!(result.unwrap().is_ok());",
                "    ",
                "    let domain_invalid = \"example--domain_123.com\";",
                "    let (out_invalid, result_invalid) = config.to_unicode(domain_invalid);",
                "    assert_eq!(out_invalid, \"\");",
                "    assert!(result_invalid.is_err());",
                "    ",
                "    let domain_empty = \"\";",
                "    let (out_empty, result_empty) = config.to_unicode(domain_empty);",
                "    assert_eq!(out_empty, \"\");",
                "    assert!(result_empty.is_ok());",
                "    ",
                "    let domain_with_whitespace = \"  example.com  \";",
                "    let (out_whitespace, result_whitespace) = config.to_unicode(domain_with_whitespace);",
                "    assert_eq!(out_whitespace, \"example.com\");",
                "    assert!(result_whitespace.is_ok());",
                "    ",
                "    let domain_specific = \"xn--d1acufc.xn--p1ai\";",
                "    let (out_specific, result_specific) = config.to_unicode(domain_specific);",
                "    assert_eq!(out_specific, \"домен.рф\");",
                "    assert!(result_specific.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default()",
                "        .use_std3_ascii_rules(false)",
                "        .transitional_processing(false)",
                "        .verify_dns_length(false)",
                "        .check_hyphens(false);",
                "    let domain = \"\";",
                "    let (out, result) = config.to_unicode(domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(out, \"\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(true)",
                "    .transitional_processing(true)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(true);",
                "    let domain = \"example.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"example.com\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let domain = \"xn--example-7f0a.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"例え.com\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let domain = \"example-.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert!(result.is_err());",
                "    ",
                "    let domain = \"example...com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert!(result.is_ok());",
                "    ",
                "    let domain = \"ex#ample.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert!(result.is_err());",
                "    ",
                "    let domain = \"valid.domain\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"valid.domain\");",
                "    assert!(result.is_ok());"
              ],
              "code": [
                "{",
                "    let config = Config::default()",
                "        .use_std3_ascii_rules(false)",
                "        .transitional_processing(false)",
                "        .verify_dns_length(false)",
                "        .check_hyphens(false);",
                "    let domain = \"\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let config = Config::default()",
                "    .use_std3_ascii_rules(true)",
                "    .transitional_processing(true)",
                "    .verify_dns_length(true)",
                "    .check_hyphens(true);",
                "    let domain = \"example.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"example.com\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let domain = \"xn--example-7f0a.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"例え.com\");",
                "    assert!(result.is_ok());",
                "    ",
                "    let domain = \"example-.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert!(result.is_err());",
                "    ",
                "    let domain = \"example...com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert!(result.is_ok());",
                "    ",
                "    let domain = \"ex#ample.com\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert!(result.is_err());",
                "    ",
                "    let domain = \"valid.domain\";",
                "    let (out, result) = config.to_unicode(domain);",
                "    assert_eq!(out, \"valid.domain\");",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let config = Config::default()",
                "        .use_std3_ascii_rules(true)",
                "        .transitional_processing(false)",
                "        .verify_dns_length(true)",
                "        .check_hyphens(false);",
                "    let domain = \"a\".repeat(253); // maximum length for a domain",
                "    let (out, result) = config.to_unicode(&domain);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(out, domain);"
              ],
              "code": [
                "{",
                "    let config = Config::default()",
                "        .use_std3_ascii_rules(true)",
                "        .transitional_processing(false)",
                "        .verify_dns_length(true)",
                "        .check_hyphens(false);",
                "    let domain = \"a\".repeat(253); // maximum length for a domain",
                "    let (out, result) = config.to_unicode(&domain);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(out, domain);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}