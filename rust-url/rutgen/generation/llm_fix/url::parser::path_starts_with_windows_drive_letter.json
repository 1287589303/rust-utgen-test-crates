{
  "name": "url::parser::path_starts_with_windows_drive_letter",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": false,
  "loc": "url/src/parser.rs:1781:1:1787:2",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Some(c) = s.as_bytes().first() at line 1782 is true\n",
        "precondition: c matches b'\\\\' at line 1783 is true\n",
        "precondition: c matches b'/' at line 1783 is true\n",
        "precondition: c matches b'?' at line 1783 is true\n",
        "precondition: c matches b'#' at line 1783 is true\n",
        "expected return value/type: matches!(c, b'/' | b'\\\\' | b'?' | b'#') && starts_with_windows_drive_letter(&s[1..])\n"
      ],
      "input_infer": "Test input conditions or ranges: Non-empty strings starting with '/', '\\\\', '?', or '#' followed by at least one character meeting the criteria of a valid Windows drive letter (e.g., a-z or A-Z), a ':' or '|' character, and optional additional path characters which can include '/' or '\\\\' or '?' or '#'.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"/C:\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/x:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\x:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?x:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#x:\"), true);"
              ],
              "code": [
                "{",
                "    let input = \"/C:\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/x:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\x:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?x:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#x:\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"\\\\D:\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:\"), true); // precondition: c matches b'\\\\'",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/D:\"), true); // precondition: c matches b'/'",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?D:\"), true); // precondition: c matches b'?'",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#D:\"), true); // precondition: c matches b'#'"
              ],
              "code": [
                "{",
                "    let input = \"\\\\D:\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:\"), true); // precondition: c matches b'\\\\'",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/D:\"), true); // precondition: c matches b'/'",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?D:\"), true); // precondition: c matches b'?'",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#D:\"), true); // precondition: c matches b'#'",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"?B:\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    result = path_starts_with_windows_drive_letter(\"?B:\"); assert_eq!(result, true);",
                "    input = \"/C:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"\\\\D:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"#E:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"?A:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"/A:/\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"\\\\B:\\\\something\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"#C:another\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let input = \"?B:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    result = path_starts_with_windows_drive_letter(\"?B:\"); assert_eq!(result, true);",
                "    input = \"/C:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"\\\\D:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"#E:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"?A:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"/A:/\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"\\\\B:\\\\something\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "    input = \"#C:another\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"#A:\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#A:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?E:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#F:\"), true);"
              ],
              "code": [
                "{",
                "    let input = \"#A:\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#A:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?E:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#F:\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"/C:/path/to/file\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert!(path_starts_with_windows_drive_letter(\"/C:/path/to/file\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/A:/another/path\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/Z:/\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/c:/\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\\\\folder\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"?E:/documents\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"#F:/downloads\") == true);"
              ],
              "code": [
                "{",
                "    let input = \"/C:/path/to/file\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:/path/to/file\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/A:/another/path\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/Z:/\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/c:/\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\\\\folder\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"?E:/documents\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"#F:/downloads\") == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"\\\\D:\\\\additional\\\\path\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\\\\additional\\\\path\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:/Program Files\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"?D:/files\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"#A:/documents\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/a:/\") == true);"
              ],
              "code": [
                "{",
                "    let input = \"\\\\D:\\\\additional\\\\path\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\\\\additional\\\\path\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:/Program Files\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"?D:/files\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"#A:/documents\") == true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/a:/\") == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"?B:/more/paths?\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/c:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?B:/more/paths?\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#Z:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/A:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?C:/path\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/some/path\\\\with\"), false);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"B:/not/valid\"), false);"
              ],
              "code": [
                "{",
                "    let input = \"?B:/more/paths?\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/c:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?B:/more/paths?\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#Z:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/A:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?C:/path\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/some/path\\\\with\"), false);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"B:/not/valid\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"#A:/another/path/\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#A:/another/path/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:/documents/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:/files/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?E:/projects/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#Z:/resources/\"), true);"
              ],
              "code": [
                "{",
                "    let input = \"#A:/another/path/\";",
                "    let _result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#A:/another/path/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:/documents/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:/files/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"?E:/projects/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"#Z:/resources/\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: let Some(c) = s.as_bytes().first() at line 1782 is true\n",
        "precondition: c matches b'/' at line 1783 is true\n",
        "precondition: c matches b'/' or b'\\\\' or b'#' or b'?' at line 1783 is true\n"
      ],
      "input_infer": "Test input conditions or ranges: A string starting with '/' followed by an ASCII alpha character, a valid drive separator (':' or '|'), and optionally followed by either a length of 2 or a character from the set ['/', '\\\\', '?', '#'] for path length greater than 2, e.g., \"/C:\", \"/A:/\", \"/C:/path\", \"/A:\\\\path\", \"/\" or \"/A|\".\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"/C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/b#\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/d\\\\\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/c?\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/x|\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/Y:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/Z:\"), true);"
              ],
              "code": [
                "{",
                "    let input = \"/C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/b#\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/d\\\\\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/c?\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/x|\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/Y:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/Z:\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"\\\\C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/A:/\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"/C:/file.txt\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"/C|\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/C?\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/C#\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"C:\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"\\\\C:\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"#C:\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"?C:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/D:/\"));"
              ],
              "code": [
                "{",
                "    let input = \"\\\\C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/A:/\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"/C:/file.txt\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"/C|\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/C?\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/C#\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"C:\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"\\\\C:\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"#C:\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"?C:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/D:/\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"#C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(result.is_instance_of::<bool>());",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/d:/\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/a:/\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/f:\"));"
              ],
              "code": [
                "{",
                "    let input = \"#C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    assert!(result.is_instance_of::<bool>());",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/d:/\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/a:/\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/f:\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"?C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"/C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"\\\\C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"#C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"?A:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"/A:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"\\\\A:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"#A:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let input = \"?C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"/C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"\\\\C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"#C:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"?A:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"/A:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"\\\\A:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    ",
                "    let input = \"#A:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"/C:/path\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(matches!(input.as_bytes().first(), Some(&b'/')));",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:/path\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/a:/\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/A:/another/path\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/c:/another/path\"));",
                "    assert!(matches!(input.as_bytes()[0], b'/'));"
              ],
              "code": [
                "{",
                "    let input = \"/C:/path\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    assert!(matches!(input.as_bytes().first(), Some(&b'/')));",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:/path\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/a:/\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/A:/another/path\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/c:/another/path\"));",
                "    assert!(matches!(input.as_bytes()[0], b'/'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"\\\\A:\\\\path\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/A:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/c:/path\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/path\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/B:\\\\\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/X:/folder\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/D?#\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/E:/another/path\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"//F:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/G:/subdir\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/H:?query\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/I:#fragment\"), true);"
              ],
              "code": [
                "{",
                "    let input = \"\\\\A:\\\\path\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/A:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/c:/path\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/path\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/B:\\\\\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/X:/folder\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/D?#\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/E:/another/path\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"//F:/\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/G:/subdir\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/H:?query\"), true);",
                "    assert_eq!(path_starts_with_windows_drive_letter(\"/I:#fragment\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let input = \"/c:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"/a:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"/A|\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"/b#\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"\\\\c:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"\\\\a:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"\\\\A|\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"\\\\b#\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let input = \"/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"/c:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"/a:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"/A|\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"/b#\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"\\\\c:\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"\\\\a:/\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"\\\\A|\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    let input = \"\\\\b#\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"/A|\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/B:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:/\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/D|/path\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/E?query\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/F#fragment\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/G:/another/path\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"/H\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"C:/path\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"\\\\I:\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"?/J|\"));"
              ],
              "code": [
                "{",
                "    let input = \"/A|\";",
                "    let result = path_starts_with_windows_drive_letter(input);",
                "    assert_eq!(result, true);",
                "    assert!(path_starts_with_windows_drive_letter(\"/B:\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/C:/\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/D|/path\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/E?query\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/F#fragment\"));",
                "    assert!(path_starts_with_windows_drive_letter(\"/G:/another/path\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"/H\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"C:/path\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"\\\\I:\"));",
                "    assert!(!path_starts_with_windows_drive_letter(\"?/J|\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}