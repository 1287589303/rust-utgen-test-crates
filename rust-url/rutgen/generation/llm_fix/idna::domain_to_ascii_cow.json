{
  "name": "idna::domain_to_ascii_cow",
  "mod_info": {
    "name": "",
    "loc": "idna/src/lib.rs:9:1:171:2"
  },
  "visible": true,
  "loc": "idna/src/lib.rs:105:1:115:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "domain_name: valid UTF-8 encoded byte arrays (length 1 to 253 bytes), ascii_deny_list: AsciiDenyList variants (e.g., URL, none), hyphens: Hyphens::Allow, dns_length: DnsLength::Ignore; edge cases: empty arrays, maximum length, invalid UTF-8 sequences.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name: &[u8] = b\"example.com\";",
                "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let _ = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 0 }).is_ok(), true);",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 0 }).unwrap(), Cow::Borrowed(\"example.com\"));",
                "    assert_eq!(domain_to_ascii_cow(b\"EXAMPLE.COM\", AsciiDenyList { bits: 0 }).unwrap(), Cow::Borrowed(\"example.com\"));",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com.\", AsciiDenyList { bits: 0 }).is_ok(), true);",
                "    assert!(domain_to_ascii_cow(b\"ex@ample.com\", AsciiDenyList { bits: 0 }).is_err());",
                "    assert!(domain_to_ascii_cow(b\"ex ample.com\", AsciiDenyList { bits: 0 }).is_err());",
                "    assert!(domain_to_ascii_cow(b\"example..com\", AsciiDenyList { bits: 0 }).is_err());",
                "    assert_eq!(domain_to_ascii_cow(b\"\\xC3\\xA9xample.com\", AsciiDenyList { bits: 0 }).is_ok(), true);"
              ],
              "code": [
                "{",
                "    let domain_name: &[u8] = b\"example.com\";",
                "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let _ = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 0 }).is_ok(), true);",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 0 }).unwrap(), Cow::Borrowed(\"example.com\"));",
                "    assert_eq!(domain_to_ascii_cow(b\"EXAMPLE.COM\", AsciiDenyList { bits: 0 }).unwrap(), Cow::Borrowed(\"example.com\"));",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com.\", AsciiDenyList { bits: 0 }).is_ok(), true);",
                "    assert!(domain_to_ascii_cow(b\"ex@ample.com\", AsciiDenyList { bits: 0 }).is_err());",
                "    assert!(domain_to_ascii_cow(b\"ex ample.com\", AsciiDenyList { bits: 0 }).is_err());",
                "    assert!(domain_to_ascii_cow(b\"example..com\", AsciiDenyList::new(0)).is_err());  ",
                "    assert_eq!(domain_to_ascii_cow(b\"\\xC3\\xA9xample.com\", AsciiDenyList { bits: 0 }).is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name: &[u8] = b\"a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.com\";",
                "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let _ = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(domain_to_ascii_cow(b\"a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.com\", AsciiDenyList { bits: 0 }).is_ok(), true);"
              ],
              "code": [
                "{",
                "    let domain_name: &[u8] = b\"a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.com\";",
                "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let _ = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert_eq!(domain_to_ascii_cow(b\"a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.com\", AsciiDenyList { bits: 0 }).is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name: &[u8] = b\"\";",
                "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let _ = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "}"
              ],
              "oracle": [
                "    result = domain_to_ascii_cow(b\"\", AsciiDenyList { bits: 0 }); assert!(result.is_ok() && result.unwrap().is_empty());",
                "    ",
                "    domain_name = b\"example.com\";",
                "    ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    result = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert!(result.is_ok() && result.unwrap() == Cow::Borrowed(\"example.com\"));",
                "    ",
                "    domain_name = b\"ex@ample.com\";",
                "    ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    result = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert!(result.is_err());",
                "    ",
                "    domain_name = b\"xn--exmple-cua.com\";",
                "    ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    result = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert!(result.is_ok() && result.unwrap() == Cow::Borrowed(\"example.com\"));",
                "    ",
                "    domain_name = b\"valid.domain\";",
                "    ascii_deny_list = AsciiDenyList { bits: 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF };",
                "    result = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert!(result.is_ok() && result.unwrap() == Cow::Borrowed(\"valid.domain\"));",
                "    ",
                "    domain_name = b\"too.many..dots\";",
                "    ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    result = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let domain_name: &[u8] = b\"\";",
                "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let _ = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    result = domain_to_ascii_cow(b\"\", AsciiDenyList { bits: 0 }); assert!(result.is_ok() && result.unwrap().is_empty());",
                "    ",
                "    domain_name = b\"example.com\";",
                "    ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    result = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert!(result.is_ok() && result.unwrap() == Cow::Borrowed(\"example.com\"));",
                "    ",
                "    domain_name = b\"ex@ample.com\";",
                "    ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let result = domain_to_ascii_cow(domain_name, ascii_deny_list);  ",
                "    assert!(result.is_err());",
                "    ",
                "    domain_name = b\"xn--exmple-cua.com\";",
                "    ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let result = domain_to_ascii_cow(domain_name, ascii_deny_list);  ",
                "    assert!(result.is_ok() && result.unwrap() == Cow::Borrowed(\"example.com\"));",
                "    ",
                "    domain_name = b\"valid.domain\";",
                "    ascii_deny_list = AsciiDenyList { bits: 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF };",
                "    result = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert!(result.is_ok() && result.unwrap() == Cow::Borrowed(\"valid.domain\"));",
                "    ",
                "    domain_name = b\"too.many..dots\";",
                "    ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let result = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name: &[u8] = &[255, 255, 255]; // Invalid UTF-8",
                "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let _ = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "}"
              ],
              "oracle": [
                "    assert!(domain_to_ascii_cow(&[255, 255, 255], AsciiDenyList { bits: 0 }).is_err());"
              ],
              "code": [
                "{",
                "    let domain_name: &[u8] = &[255, 255, 255]; // Invalid UTF-8",
                "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
                "    let _ = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert!(domain_to_ascii_cow(&[255, 255, 255], AsciiDenyList { bits: 0 }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let domain_name: &[u8] = b\"example.com\";",
                "    let ascii_deny_list = AsciiDenyList { bits: 1 }; // Example of deny list",
                "    let _ = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 1 }).is_ok(), true);",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 1 }).unwrap(), Cow::Borrowed(\"example.com\"));",
                "    assert_eq!(domain_to_ascii_cow(b\"example..com\", AsciiDenyList { bits: 1 }).is_err(), true);",
                "    assert_eq!(domain_to_ascii_cow(b\"ex@ample.com\", AsciiDenyList { bits: 1 }).is_err(), true);",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 2 }).is_ok(), true);",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 0 }).unwrap(), Cow::Borrowed(\"example.com\"));",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 0 }).is_ok(), true);"
              ],
              "code": [
                "{",
                "    let domain_name: &[u8] = b\"example.com\";",
                "    let ascii_deny_list = AsciiDenyList { bits: 1 }; // Example of deny list",
                "    let _ = domain_to_ascii_cow(domain_name, ascii_deny_list);",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 1 }).is_ok(), true);",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 1 }).unwrap(), Cow::Borrowed(\"example.com\"));",
                "    assert_eq!(domain_to_ascii_cow(b\"example..com\", AsciiDenyList { bits: 1 }).is_err(), true);",
                "    assert_eq!(domain_to_ascii_cow(b\"ex@ample.com\", AsciiDenyList::new(1)).is_err(), true);  ",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 2 }).is_ok(), true);",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 0 }).unwrap(), Cow::Borrowed(\"example.com\"));",
                "    assert_eq!(domain_to_ascii_cow(b\"example.com\", AsciiDenyList { bits: 0 }).is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}