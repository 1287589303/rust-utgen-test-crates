{
  "name": "idna::uts46::in_inclusive_range8",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:133:1:135:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: u.wrapping_sub(start) <= (end - start)\n"
      ],
      "input_infer": "u: u8 in range [0, 255], start: u8 in range [0, 255], end: u8 in range [0, 255] where start <= end\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let u: u8 = 0;",
                "    let start: u8 = 0;",
                "    let end: u8 = 0;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(in_inclusive_range8(0, 0, 0), true);",
                "    assert_eq!(in_inclusive_range8(1, 0, 2), true);",
                "    assert_eq!(in_inclusive_range8(2, 0, 2), true);",
                "    assert_eq!(in_inclusive_range8(3, 0, 2), false);",
                "    assert_eq!(in_inclusive_range8(0, 1, 0), false);",
                "    assert_eq!(in_inclusive_range8(255, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(255, 128, 255), true);",
                "    assert_eq!(in_inclusive_range8(128, 128, 255), true);",
                "    assert_eq!(in_inclusive_range8(127, 128, 255), false);",
                "    assert_eq!(in_inclusive_range8(100, 100, 200), true);",
                "    assert_eq!(in_inclusive_range8(100, 0, 100), true);",
                "    assert_eq!(in_inclusive_range8(100, 200, 100), false);"
              ],
              "code": [
                "{",
                "    let u: u8 = 0;",
                "    let start: u8 = 0;",
                "    let end: u8 = 0;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "    assert_eq!(in_inclusive_range8(0, 0, 0), true);",
                "    assert_eq!(in_inclusive_range8(1, 0, 2), true);",
                "    assert_eq!(in_inclusive_range8(2, 0, 2), true);",
                "    assert_eq!(in_inclusive_range8(3, 0, 2), false);",
                "    assert_eq!(in_inclusive_range8(0, 1, 0), false);",
                "    assert_eq!(in_inclusive_range8(255, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(255, 128, 255), true);",
                "    assert_eq!(in_inclusive_range8(128, 128, 255), true);",
                "    assert_eq!(in_inclusive_range8(127, 128, 255), false);",
                "    assert_eq!(in_inclusive_range8(100, 100, 200), true);",
                "    assert_eq!(in_inclusive_range8(100, 0, 100), true);",
                "    assert_eq!(in_inclusive_range8(100, 200, 100), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let u: u8 = 128;",
                "    let start: u8 = 100;",
                "    let end: u8 = 150;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(in_inclusive_range8(128, 100, 150), true);",
                "    assert_eq!(in_inclusive_range8(100, 100, 150), true);",
                "    assert_eq!(in_inclusive_range8(150, 100, 150), true);",
                "    assert_eq!(in_inclusive_range8(99, 100, 150), false);",
                "    assert_eq!(in_inclusive_range8(151, 100, 150), false);",
                "    assert_eq!(in_inclusive_range8(128, 150, 100), false);",
                "    assert_eq!(in_inclusive_range8(100, 100, 100), true);",
                "    assert_eq!(in_inclusive_range8(150, 150, 150), true);",
                "    assert_eq!(in_inclusive_range8(128, 128, 128), true);"
              ],
              "code": [
                "{",
                "    let u: u8 = 128;",
                "    let start: u8 = 100;",
                "    let end: u8 = 150;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "    assert_eq!(in_inclusive_range8(128, 100, 150), true);",
                "    assert_eq!(in_inclusive_range8(100, 100, 150), true);",
                "    assert_eq!(in_inclusive_range8(150, 100, 150), true);",
                "    assert_eq!(in_inclusive_range8(99, 100, 150), false);",
                "    assert_eq!(in_inclusive_range8(151, 100, 150), false);",
                "    assert_eq!(in_inclusive_range8(128, 150, 100), false);",
                "    assert_eq!(in_inclusive_range8(100, 100, 100), true);",
                "    assert_eq!(in_inclusive_range8(150, 150, 150), true);",
                "    assert_eq!(in_inclusive_range8(128, 128, 128), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let u: u8 = 255;",
                "    let start: u8 = 200;",
                "    let end: u8 = 255;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(in_inclusive_range8(255, 200, 255), true);",
                "    assert_eq!(in_inclusive_range8(200, 200, 255), true);",
                "    assert_eq!(in_inclusive_range8(199, 200, 255), false);",
                "    assert_eq!(in_inclusive_range8(255, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(0, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(256, 0, 255), false);",
                "    assert_eq!(in_inclusive_range8(255, 255, 255), true);",
                "    assert_eq!(in_inclusive_range8(254, 255, 255), false);"
              ],
              "code": [
                "{",
                "    let u: u8 = 255;",
                "    let start: u8 = 200;",
                "    let end: u8 = 255;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "    assert_eq!(in_inclusive_range8(255, 200, 255), true);",
                "    assert_eq!(in_inclusive_range8(200, 200, 255), true);",
                "    assert_eq!(in_inclusive_range8(199, 200, 255), false);",
                "    assert_eq!(in_inclusive_range8(255, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(0, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(256, 0, 255), false);",
                "    assert_eq!(in_inclusive_range8(255, 255, 255), true);",
                "    assert_eq!(in_inclusive_range8(254, 255, 255), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let u: u8 = 50;",
                "    let start: u8 = 50;",
                "    let end: u8 = 50;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(in_inclusive_range8(50, 50, 50), true);",
                "    assert_eq!(in_inclusive_range8(49, 50, 50), false);",
                "    assert_eq!(in_inclusive_range8(51, 50, 50), false);",
                "    assert_eq!(in_inclusive_range8(50, 49, 50), true);",
                "    assert_eq!(in_inclusive_range8(50, 50, 51), true);",
                "    assert_eq!(in_inclusive_range8(51, 50, 51), true);",
                "    assert_eq!(in_inclusive_range8(49, 49, 50), true);",
                "    assert_eq!(in_inclusive_range8(51, 49, 50), false);",
                "    assert_eq!(in_inclusive_range8(255, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(0, 0, 0), true);",
                "    assert_eq!(in_inclusive_range8(1, 0, 1), true);",
                "    assert_eq!(in_inclusive_range8(10, 5, 15), true);",
                "    assert_eq!(in_inclusive_range8(5, 5, 5), true);",
                "    assert_eq!(in_inclusive_range8(10, 5, 10), true);",
                "    assert_eq!(in_inclusive_range8(5, 6, 10), false);",
                "    assert_eq!(in_inclusive_range8(10, 6, 10), true);",
                "    assert_eq!(in_inclusive_range8(11, 6, 10), false);",
                "    assert_eq!(in_inclusive_range8(6, 6, 6), true);"
              ],
              "code": [
                "{",
                "    let u: u8 = 50;",
                "    let start: u8 = 50;",
                "    let end: u8 = 50;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "    assert_eq!(in_inclusive_range8(50, 50, 50), true);",
                "    assert_eq!(in_inclusive_range8(49, 50, 50), false);",
                "    assert_eq!(in_inclusive_range8(51, 50, 50), false);",
                "    assert_eq!(in_inclusive_range8(50, 49, 50), true);",
                "    assert_eq!(in_inclusive_range8(50, 50, 51), true);",
                "    assert_eq!(in_inclusive_range8(51, 50, 51), true);",
                "    assert_eq!(in_inclusive_range8(49, 49, 50), true);",
                "    assert_eq!(in_inclusive_range8(51, 49, 50), false);",
                "    assert_eq!(in_inclusive_range8(255, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(0, 0, 0), true);",
                "    assert_eq!(in_inclusive_range8(1, 0, 1), true);",
                "    assert_eq!(in_inclusive_range8(10, 5, 15), true);",
                "    assert_eq!(in_inclusive_range8(5, 5, 5), true);",
                "    assert_eq!(in_inclusive_range8(10, 5, 10), true);",
                "    assert_eq!(in_inclusive_range8(5, 6, 10), false);",
                "    assert_eq!(in_inclusive_range8(10, 6, 10), true);",
                "    assert_eq!(in_inclusive_range8(11, 6, 10), false);",
                "    assert_eq!(in_inclusive_range8(6, 6, 6), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let u: u8 = 49;",
                "    let start: u8 = 50;",
                "    let end: u8 = 100;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(in_inclusive_range8(49, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(100, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(101, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 50), true);",
                "    assert_eq!(in_inclusive_range8(49, 49, 49), false);"
              ],
              "code": [
                "{",
                "    let u: u8 = 49;",
                "    let start: u8 = 50;",
                "    let end: u8 = 100;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "    assert_eq!(in_inclusive_range8(49, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(100, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(101, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 50), true);",
                "    assert_eq!(in_inclusive_range8(49, 49, 49), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let u: u8 = 101;",
                "    let start: u8 = 50;",
                "    let end: u8 = 100;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(in_inclusive_range8(101, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(100, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(200, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(101, 100, 255), false);",
                "    assert_eq!(in_inclusive_range8(0, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(255, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(50, 50, 50), true);",
                "    assert_eq!(in_inclusive_range8(51, 50, 50), false);",
                "    assert_eq!(in_inclusive_range8(100, 50, 100), true);"
              ],
              "code": [
                "{",
                "    let u: u8 = 101;",
                "    let start: u8 = 50;",
                "    let end: u8 = 100;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "    assert_eq!(in_inclusive_range8(101, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(100, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(200, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(101, 100, 255), false);",
                "    assert_eq!(in_inclusive_range8(0, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(255, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(50, 50, 50), true);",
                "    assert_eq!(in_inclusive_range8(51, 50, 50), false);",
                "    assert_eq!(in_inclusive_range8(100, 50, 100), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let u: u8 = 100;",
                "    let start: u8 = 50;",
                "    let end: u8 = 100;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(in_inclusive_range8(100, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(49, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(99, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(101, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(100, 50, 99), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 50), true);",
                "    assert_eq!(in_inclusive_range8(56, 55, 60), true);",
                "    assert_eq!(in_inclusive_range8(60, 55, 60), true);",
                "    assert_eq!(in_inclusive_range8(55, 55, 60), true);",
                "    assert_eq!(in_inclusive_range8(54, 55, 60), false);",
                "    assert_eq!(in_inclusive_range8(61, 55, 60), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 50), true);",
                "    assert_eq!(in_inclusive_range8(200, 0, 255), false);",
                "    assert_eq!(in_inclusive_range8(0, 0, 0), true);",
                "    assert_eq!(in_inclusive_range8(255, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(254, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(256, 0, 255), false);",
                "    assert_eq!(in_inclusive_range8(10, 5, 15), true);",
                "    assert_eq!(in_inclusive_range8(5, 5, 15), true);",
                "    assert_eq!(in_inclusive_range8(15, 5, 15), true);",
                "    assert_eq!(in_inclusive_range8(4, 5, 15), false);",
                "    assert_eq!(in_inclusive_range8(16, 5, 15), false);"
              ],
              "code": [
                "{",
                "    let u: u8 = 100;",
                "    let start: u8 = 50;",
                "    let end: u8 = 100;",
                "    let _result = in_inclusive_range8(u, start, end);",
                "    assert_eq!(in_inclusive_range8(100, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(49, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(99, 50, 100), true);",
                "    assert_eq!(in_inclusive_range8(101, 50, 100), false);",
                "    assert_eq!(in_inclusive_range8(100, 50, 99), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 50), true);",
                "    assert_eq!(in_inclusive_range8(56, 55, 60), true);",
                "    assert_eq!(in_inclusive_range8(60, 55, 60), true);",
                "    assert_eq!(in_inclusive_range8(55, 55, 60), true);",
                "    assert_eq!(in_inclusive_range8(54, 55, 60), false);",
                "    assert_eq!(in_inclusive_range8(61, 55, 60), false);",
                "    assert_eq!(in_inclusive_range8(50, 50, 50), true);",
                "    assert_eq!(in_inclusive_range8(200, 0, 255), false);",
                "    assert_eq!(in_inclusive_range8(0, 0, 0), true);",
                "    assert_eq!(in_inclusive_range8(255, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(254, 0, 255), true);",
                "    assert_eq!(in_inclusive_range8(256, 0, 255), false);",
                "    assert_eq!(in_inclusive_range8(10, 5, 15), true);",
                "    assert_eq!(in_inclusive_range8(5, 5, 15), true);",
                "    assert_eq!(in_inclusive_range8(15, 5, 15), true);",
                "    assert_eq!(in_inclusive_range8(4, 5, 15), false);",
                "    assert_eq!(in_inclusive_range8(16, 5, 15), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}