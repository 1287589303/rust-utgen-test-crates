{
  "name": "url::quirks::pathname",
  "mod_info": {
    "name": "quirks",
    "loc": "url/src/lib.rs:223:1:223:16"
  },
  "visible": true,
  "loc": "url/src/quirks.rs:269:1:271:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: url.path()\n"
      ],
      "input_infer": "Valid input strings representing URL paths that cover cases with/without scheme, authority, hierarchical/non-hierarchical paths, empty and malformed URLs, as well as URLs with only fragment or query parameters; range: valid URL formats as per spec (e.g., \"http://example.com/path\", \"https://example.com/path?query=1\", \"//example.com/path#fragment\", \"file:///path/to/file\", \"ftp://user:pass@host:21/path\", \"\", \"http://\", \"invalid_url\"); optional structured edge cases involving maximum path lengths within permitted limits and special characters.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://example.com/path/to/resource\").unwrap();",
                "    pathname(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pathname(&url), \"/path/to/resource\");",
                "    let url = Url::parse(\"https://example.com/another/path\").unwrap();",
                "    assert_eq!(pathname(&url), \"/another/path\");",
                "    let url = Url::parse(\"ftp://example.com/file.txt\").unwrap();",
                "    assert_eq!(pathname(&url), \"/file.txt\");",
                "    let url = Url::parse(\"http://example.com/\").unwrap();",
                "    assert_eq!(pathname(&url), \"/\");",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(pathname(&url), \"\");",
                "    let url = Url::parse(\"http://example.com:8080/path?query=value#fragment\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    let url = Url::parse(\"http://user:pass@example.com/path\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    let url = Url::parse(\"http://example.com/path/\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path/\");",
                "    let url = Url::parse(\"http://example.com/path/to/resource/\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path/to/resource/\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://example.com/path/to/resource\").unwrap();",
                "    pathname(&url);",
                "    assert_eq!(pathname(&url), \"/path/to/resource\");",
                "    let url = Url::parse(\"https://example.com/another/path\").unwrap();",
                "    assert_eq!(pathname(&url), \"/another/path\");",
                "    let url = Url::parse(\"ftp://example.com/file.txt\").unwrap();",
                "    assert_eq!(pathname(&url), \"/file.txt\");",
                "    let url = Url::parse(\"http://example.com/\").unwrap();",
                "    assert_eq!(pathname(&url), \"/\");",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(pathname(&url), \"\");",
                "    let url = Url::parse(\"http://example.com:8080/path?query=value#fragment\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    let url = Url::parse(\"http://user:pass@example.com/path\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    let url = Url::parse(\"http://example.com/path/\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path/\");",
                "    let url = Url::parse(\"http://example.com/path/to/resource/\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path/to/resource/\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"file:///path/to/file\").unwrap();",
                "    pathname(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pathname(&url), \"/path/to/file\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"file:///path/to/file\").unwrap();",
                "    pathname(&url);",
                "    assert_eq!(pathname(&url), \"/path/to/file\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"https://example.com/path?query=1\").unwrap();",
                "    pathname(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pathname(&url), \"/path\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"https://example.com/path?query=1\").unwrap();",
                "    pathname(&url);",
                "    assert_eq!(pathname(&url), \"/path\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"//example.com/path#fragment\").unwrap();",
                "    pathname(&url);",
                "}"
              ],
              "oracle": [
                "    url = Url::parse(\"//example.com/path#fragment\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(pathname(&url), \"\");",
                "    url = Url::parse(\"http://localhost:8080/some/path\").unwrap();",
                "    assert_eq!(pathname(&url), \"/some/path\");",
                "    url = Url::parse(\"ftp://user:pass@host.com:21/upload/file.txt\").unwrap();",
                "    assert_eq!(pathname(&url), \"/upload/file.txt\");",
                "    url = Url::parse(\"file:///home/user/docs/file.txt\").unwrap();",
                "    assert_eq!(pathname(&url), \"/home/user/docs/file.txt\");",
                "    url = Url::parse(\"mailto:user@example.com\").unwrap();",
                "    assert_eq!(pathname(&url), \"\");",
                "    url = Url::parse(\"mailto:user@example.com?subject=test\").unwrap();",
                "    assert_eq!(pathname(&url), \"\");"
              ],
              "code": [
                "{",
                "    let mut url = Url::parse(\"//example.com/path#fragment\").unwrap();  ",
                "    pathname(&url);  ",
                "    url = Url::parse(\"//example.com/path#fragment\").unwrap();  ",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(pathname(&url), \"\");",
                "    url = Url::parse(\"http://localhost:8080/some/path\").unwrap();",
                "    assert_eq!(pathname(&url), \"/some/path\");",
                "    url = Url::parse(\"ftp://user:pass@host.com:21/upload/file.txt\").unwrap();",
                "    assert_eq!(pathname(&url), \"/upload/file.txt\");",
                "    url = Url::parse(\"file:///home/user/docs/file.txt\").unwrap();",
                "    assert_eq!(pathname(&url), \"/home/user/docs/file.txt\");",
                "    url = Url::parse(\"mailto:user@example.com\").unwrap();",
                "    assert_eq!(pathname(&url), \"\");",
                "    url = Url::parse(\"mailto:user@example.com?subject=test\").unwrap();",
                "    assert_eq!(pathname(&url), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"\").unwrap();",
                "    pathname(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pathname(&Url::parse(\"http://example.com\").unwrap()), \"/\");",
                "    assert_eq!(pathname(&Url::parse(\"https://example.com/path\").unwrap()), \"/path\");",
                "    assert_eq!(pathname(&Url::parse(\"ftp://example.com/user/file\").unwrap()), \"/user/file\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/path?query=1\").unwrap()), \"/path\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/path#fragment\").unwrap()), \"/path\");",
                "    assert_eq!(pathname(&Url::parse(\"http://username:password@example.com\").unwrap()), \"/\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/path/\").unwrap()), \"/path/\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/#fragment\").unwrap()), \"/\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/path;params\").unwrap()), \"/path;params\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/path?query\").unwrap()), \"/path\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"\").unwrap();",
                "    pathname(&url);",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com\").unwrap()), \"/\");",
                "    assert_eq!(pathname(&Url::parse(\"https://example.com/path\").unwrap()), \"/path\");",
                "    assert_eq!(pathname(&Url::parse(\"ftp://example.com/user/file\").unwrap()), \"/user/file\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/path?query=1\").unwrap()), \"/path\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/path#fragment\").unwrap()), \"/path\");",
                "    assert_eq!(pathname(&Url::parse(\"http://username:password@example.com\").unwrap()), \"/\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/path/\").unwrap()), \"/path/\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/#fragment\").unwrap()), \"/\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/path;params\").unwrap()), \"/path;params\");",
                "    assert_eq!(pathname(&Url::parse(\"http://example.com/path?query\").unwrap()), \"/path\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://\").unwrap();",
                "    pathname(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pathname(&url), \"\");",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(pathname(&url), \"/\");",
                "    let url = Url::parse(\"http://example.com/path\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    let url = Url::parse(\"http://example.com/path?query=value\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    let url = Url::parse(\"http://example.com/#fragment\").unwrap();",
                "    assert_eq!(pathname(&url), \"/\");",
                "    let url = Url::parse(\"http://example.com/path#fragment\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    let url = Url::parse(\"http://example.com/path/to/resource\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path/to/resource\");",
                "    let url = Url::parse(\"ftp://ftp.example.com/resource\").unwrap();",
                "    assert_eq!(pathname(&url), \"/resource\");",
                "    let url = Url::parse(\"https://example.com:443/path/to/resource\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path/to/resource\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://\").unwrap();",
                "    pathname(&url);",
                "    assert_eq!(pathname(&url), \"\");",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(pathname(&url), \"/\");",
                "    let url = Url::parse(\"http://example.com/path\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    let url = Url::parse(\"http://example.com/path?query=value\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    let url = Url::parse(\"http://example.com/#fragment\").unwrap();",
                "    assert_eq!(pathname(&url), \"/\");",
                "    let url = Url::parse(\"http://example.com/path#fragment\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path\");",
                "    let url = Url::parse(\"http://example.com/path/to/resource\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path/to/resource\");",
                "    let url = Url::parse(\"ftp://ftp.example.com/resource\").unwrap();",
                "    assert_eq!(pathname(&url), \"/resource\");",
                "    let url = Url::parse(\"https://example.com:443/path/to/resource\").unwrap();",
                "    assert_eq!(pathname(&url), \"/path/to/resource\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"invalid_url\").unwrap();",
                "    pathname(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pathname(&url), \"\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"invalid_url\").unwrap();",
                "    pathname(&url);",
                "    assert_eq!(pathname(&url), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://example.com/path with spaces/and_special_characters_!@#$\").unwrap();",
                "    pathname(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pathname(&url), \"/path with spaces/and_special_characters_!@#$\");"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://example.com/path with spaces/and_special_characters_!@#$\").unwrap();",
                "    pathname(&url);",
                "    assert_eq!(pathname(&url), \"/path with spaces/and_special_characters_!@#$\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let long_path = \"/\".repeat(1000);",
                "    let url = Url::parse(&format!(\"http://example.com{}\", long_path)).unwrap();",
                "    pathname(&url);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pathname(&url), long_path);"
              ],
              "code": [
                "{",
                "    let long_path = \"/\".repeat(1000);",
                "    let url = Url::parse(&format!(\"http://example.com{}\", long_path)).unwrap();",
                "    pathname(&url);",
                "    assert_eq!(pathname(&url), long_path);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}