{
  "name": "url::parser::ascii_tab_or_new_line",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": false,
  "loc": "url/src/parser.rs:1749:1:1751:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: ch matches '\\n' at line 78 is true\n",
        "precondition: ch matches '\\r' at line 78 is true\n",
        "precondition: ch matches '\\t' at line 78 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "Test input conditions or ranges: ch = any character other than '\\n', '\\r', or '\\t' (e.g., ch = 'a', ' ', '!', '1', 'Z')\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = 'a';",
                "    ascii_tab_or_new_line(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ascii_tab_or_new_line('\\n'), false);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), false);",
                "    assert_eq!(ascii_tab_or_new_line('\\t'), false);"
              ],
              "code": [
                "{",
                "    let ch = 'a';",
                "    ascii_tab_or_new_line(ch);",
                "    assert_eq!(ascii_tab_or_new_line('\\n'), false);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), false);",
                "    assert_eq!(ascii_tab_or_new_line('\\t'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = ' ';",
                "    ascii_tab_or_new_line(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ascii_tab_or_new_line('\\n'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\t'), true);",
                "    assert_eq!(ascii_tab_or_new_line('a'), false);",
                "    assert_eq!(ascii_tab_or_new_line('&'), false);",
                "    assert_eq!(ascii_tab_or_new_line(' '), false);",
                "    assert_eq!(ascii_tab_or_new_line('\\0'), false);"
              ],
              "code": [
                "{",
                "    let ch = ' ';",
                "    ascii_tab_or_new_line(ch);",
                "    assert_eq!(ascii_tab_or_new_line('\\n'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\t'), true);",
                "    assert_eq!(ascii_tab_or_new_line('a'), false);",
                "    assert_eq!(ascii_tab_or_new_line('&'), false);",
                "    assert_eq!(ascii_tab_or_new_line(' '), false);",
                "    assert_eq!(ascii_tab_or_new_line('\\0'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '!';",
                "    ascii_tab_or_new_line(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ascii_tab_or_new_line('\\n'), false);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), false);",
                "    assert_eq!(ascii_tab_or_new_line('\\t'), false);",
                "    assert_eq!(ascii_tab_or_new_line('!'), false);"
              ],
              "code": [
                "{",
                "    let ch = '!';",
                "    ascii_tab_or_new_line(ch);",
                "    assert_eq!(ascii_tab_or_new_line('\\n'), false);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), false);",
                "    assert_eq!(ascii_tab_or_new_line('\\t'), false);",
                "    assert_eq!(ascii_tab_or_new_line('!'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '1';",
                "    ascii_tab_or_new_line(ch);",
                "}"
              ],
              "oracle": [
                "    ascii_tab_or_new_line('1') == false",
                "    ascii_tab_or_new_line('\\n') == true",
                "    ascii_tab_or_new_line('\\r') == true",
                "    ascii_tab_or_new_line('\\t') == true"
              ],
              "code": [
                "{",
                "    let ch = '1';",
                "    ascii_tab_or_new_line(ch);",
                "    ascii_tab_or_new_line('1') == false",
                "    ascii_tab_or_new_line('\\n') == true",
                "    ascii_tab_or_new_line('\\r') == true",
                "    ascii_tab_or_new_line('\\t') == true",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = 'Z';",
                "    ascii_tab_or_new_line(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ascii_tab_or_new_line('\\n'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\t'), true);",
                "    assert_eq!(ascii_tab_or_new_line('Z'), false);"
              ],
              "code": [
                "{",
                "    let ch = 'Z';",
                "    ascii_tab_or_new_line(ch);",
                "    assert_eq!(ascii_tab_or_new_line('\\n'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\t'), true);",
                "    assert_eq!(ascii_tab_or_new_line('Z'), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: ch matches '\\t' at line 78 is true\n",
        "precondition: ch matches '\\n' or '\\r' or '\\t' at line 1750 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "Test input conditions or ranges: ch should be any of the characters '\\t', '\\n', or '\\r'.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\t';",
                "    ascii_tab_or_new_line(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ascii_tab_or_new_line('\\t'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\n'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), true);"
              ],
              "code": [
                "{",
                "    let ch = '\\t';",
                "    ascii_tab_or_new_line(ch);",
                "    assert_eq!(ascii_tab_or_new_line('\\t'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\n'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\n';",
                "    ascii_tab_or_new_line(ch);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ascii_tab_or_new_line('\\t'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\n'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), true);"
              ],
              "code": [
                "{",
                "    let ch = '\\n';",
                "    ascii_tab_or_new_line(ch);",
                "    assert_eq!(ascii_tab_or_new_line('\\t'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\n'), true);",
                "    assert_eq!(ascii_tab_or_new_line('\\r'), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let ch = '\\r';",
                "    ascii_tab_or_new_line(ch);",
                "}"
              ],
              "oracle": [
                "    assert!(ascii_tab_or_new_line('\\t') == true);",
                "    assert!(ascii_tab_or_new_line('\\n') == true);",
                "    assert!(ascii_tab_or_new_line('\\r') == true);",
                "    assert!(ascii_tab_or_new_line('\\u{000C}') == false);  // form feed should return false",
                "    assert!(ascii_tab_or_new_line('a') == false);  // any other character should return false"
              ],
              "code": [
                "{",
                "    let ch = '\\r';",
                "    ascii_tab_or_new_line(ch);",
                "    assert!(ascii_tab_or_new_line('\\t') == true);",
                "    assert!(ascii_tab_or_new_line('\\n') == true);",
                "    assert!(ascii_tab_or_new_line('\\r') == true);",
                "    assert!(ascii_tab_or_new_line('\\u{000C}') == false);  // form feed should return false",
                "    assert!(ascii_tab_or_new_line('a') == false);  // any other character should return false",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}