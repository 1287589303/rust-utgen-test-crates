{
  "name": "url::host::ends_in_a_number",
  "mod_info": {
    "name": "host",
    "loc": "url/src/lib.rs:216:1:216:10"
  },
  "visible": false,
  "loc": "url/src/host.rs:241:1:258:2",
  "fn_tests": [
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: last.is_empty() at line 244 is true\n",
        "precondition: let Some(last) = parts.next() at line 245 is true\n",
        "precondition: last.is_empty() at line 253 is false\n",
        "precondition: last.as_bytes().iter().all(|c| c.is_ascii_digit()) at line 253 is false\n"
      ],
      "input_infer": "Test input conditions or ranges: input strings with multiple segments separated by dots, where the last segment is non-empty, contains non-digit characters, and at least one previous segment should be a valid IPv4 number or a valid octal, decimal, or hexadecimal representation.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"192.168.1.a\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"192.168.1.a\"), false);",
                "    assert_eq!(ends_in_a_number(\".1.a\"), false);",
                "    assert_eq!(ends_in_a_number(\"..a\"), false);",
                "    assert_eq!(ends_in_a_number(\"abc.\"), false);",
                "    assert_eq!(ends_in_a_number(\"...\"), false);"
              ],
              "code": [
                "{",
                "    let input = \"192.168.1.a\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"192.168.1.a\"), false);",
                "    assert_eq!(ends_in_a_number(\".1.a\"), false);",
                "    assert_eq!(ends_in_a_number(\"..a\"), false);",
                "    assert_eq!(ends_in_a_number(\"abc.\"), false);",
                "    assert_eq!(ends_in_a_number(\"...\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"0o75.0.a\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"0o75.0.a\"), false);"
              ],
              "code": [
                "{",
                "    let input = \"0o75.0.a\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"0o75.0.a\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"0x1A.0.b\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"0x1A.0.b\"), false);"
              ],
              "code": [
                "{",
                "    let input = \"0x1A.0.b\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"0x1A.0.b\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"172.16.30.abc\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"172.16.30.\"), false);",
                "    assert_eq!(ends_in_a_number(\"172.16.30..\"), false);",
                "    assert_eq!(ends_in_a_number(\"172.16.a30.\"), false);",
                "    assert_eq!(ends_in_a_number(\"..\"), false);",
                "    assert_eq!(ends_in_a_number(\".0\"), false);",
                "    assert_eq!(ends_in_a_number(\".abc\"), false);"
              ],
              "code": [
                "{",
                "    let input = \"172.16.30.abc\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"172.16.30.\"), false);",
                "    assert_eq!(ends_in_a_number(\"172.16.30..\"), false);",
                "    assert_eq!(ends_in_a_number(\"172.16.a30.\"), false);",
                "    assert_eq!(ends_in_a_number(\"..\"), false);",
                "    assert_eq!(ends_in_a_number(\".0\"), false);",
                "    assert_eq!(ends_in_a_number(\".abc\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"255.255.255.a@#!\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"255.255.\"), false);",
                "    assert_eq!(ends_in_a_number(\"255.255.0.0.\"), false);",
                "    assert_eq!(ends_in_a_number(\"255.255.255.\"), false);",
                "    assert_eq!(ends_in_a_number(\"192.168.A.\"), false);",
                "    assert_eq!(ends_in_a_number(\"0..\"), false);",
                "    assert_eq!(ends_in_a_number(\"..256\"), false);",
                "    assert_eq!(ends_in_a_number(\"abc..\"), false);",
                "    assert_eq!(ends_in_a_number(\"255.255.255.255.\"), false);",
                "    assert_eq!(ends_in_a_number(\"0.0.0.0.\"), false);",
                "    assert_eq!(ends_in_a_number(\"255.a.255.254.\"), false);"
              ],
              "code": [
                "{",
                "    let input = \"255.255.255.a@#!\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"255.255.\"), false);",
                "    assert_eq!(ends_in_a_number(\"255.255.0.0.\"), false);",
                "    assert_eq!(ends_in_a_number(\"255.255.255.\"), false);",
                "    assert_eq!(ends_in_a_number(\"192.168.A.\"), false);",
                "    assert_eq!(ends_in_a_number(\"0..\"), false);",
                "    assert_eq!(ends_in_a_number(\"..256\"), false);",
                "    assert_eq!(ends_in_a_number(\"abc..\"), false);",
                "    assert_eq!(ends_in_a_number(\"255.255.255.255.\"), false);",
                "    assert_eq!(ends_in_a_number(\"0.0.0.0.\"), false);",
                "    assert_eq!(ends_in_a_number(\"255.a.255.254.\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 5,
      "prompt_conds": [
        "precondition: last.is_empty() at line 244 is false\n",
        "precondition: last.is_empty() at line 253 is true\n"
      ],
      "input_infer": "input should be a non-empty string containing a period followed by an ASCII digit, or a string that ends with a valid IPv4 number (e.g., \"abc.def.123\", \"xyz.0x1A\")\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"test.5\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"test.5\"), true);",
                "    assert_eq!(ends_in_a_number(\"example.123\"), true);",
                "    assert_eq!(ends_in_a_number(\"data.0x1A\"), true);",
                "    assert_eq!(ends_in_a_number(\"example.0777\"), true);",
                "    assert_eq!(ends_in_a_number(\"value.\"), false);",
                "    assert_eq!(ends_in_a_number(\"leading.text.\"), false);",
                "    assert_eq!(ends_in_a_number(\"test..\"), false);",
                "    assert_eq!(ends_in_a_number(\"hello.world..321\"), false);"
              ],
              "code": [
                "{",
                "    let input = \"test.5\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"test.5\"), true);",
                "    assert_eq!(ends_in_a_number(\"example.123\"), true);",
                "    assert_eq!(ends_in_a_number(\"data.0x1A\"), true);",
                "    assert_eq!(ends_in_a_number(\"example.0777\"), true);",
                "    assert_eq!(ends_in_a_number(\"value.\"), false);",
                "    assert_eq!(ends_in_a_number(\"leading.text.\"), false);",
                "    assert_eq!(ends_in_a_number(\"test..\"), false);",
                "    assert_eq!(ends_in_a_number(\"hello.world..321\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"example.com.192\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    plaintext",
                "    assert_eq!(ends_in_a_number(\"example.com.192\"), true);",
                "    assert_eq!(ends_in_a_number(\"test.4\"), true);",
                "    assert_eq!(ends_in_a_number(\"localhost.0xFF\"), true);",
                "    assert_eq!(ends_in_a_number(\"domain.test.12345\"), true);",
                "    assert_eq!(ends_in_a_number(\"foo.bar.0\"), true);",
                "    assert_eq!(ends_in_a_number(\"test.com.\"), false);"
              ],
              "code": [
                "{",
                "    let input = \"example.com.192\";",
                "    ends_in_a_number(input);",
                "    plaintext",
                "    assert_eq!(ends_in_a_number(\"example.com.192\"), true);",
                "    assert_eq!(ends_in_a_number(\"test.4\"), true);",
                "    assert_eq!(ends_in_a_number(\"localhost.0xFF\"), true);",
                "    assert_eq!(ends_in_a_number(\"domain.test.12345\"), true);",
                "    assert_eq!(ends_in_a_number(\"foo.bar.0\"), true);",
                "    assert_eq!(ends_in_a_number(\"test.com.\"), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"sample.0x1A\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"sample.0x1A\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.1\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.255\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.\"), false);",
                "    assert_eq!(ends_in_a_number(\"sample.0\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.00\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.007\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.0xG\"), false);",
                "    assert_eq!(ends_in_a_number(\"sample..\"), false);",
                "    assert_eq!(ends_in_a_number(\"sample.123abc\"), false);"
              ],
              "code": [
                "{",
                "    let input = \"sample.0x1A\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"sample.0x1A\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.1\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.255\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.\"), false);",
                "    assert_eq!(ends_in_a_number(\"sample.0\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.00\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.007\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.0xG\"), false);",
                "    assert_eq!(ends_in_a_number(\"sample..\"), false);",
                "    assert_eq!(ends_in_a_number(\"sample.123abc\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"hello..123\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert!(ends_in_a_number(\"hello..123\") == true);"
              ],
              "code": [
                "{",
                "    let input = \"hello..123\";",
                "    ends_in_a_number(input);",
                "    assert!(ends_in_a_number(\"hello..123\") == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"foo.bar.baz\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"foo.bar.baz\"), false);"
              ],
              "code": [
                "{",
                "    let input = \"foo.bar.baz\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"foo.bar.baz\"), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 6,
      "prompt_conds": [
        "precondition: last.is_empty() at line 244 is false\n",
        "precondition: last.is_empty() at line 253 is false\n",
        "precondition: last.as_bytes().iter().all(|c| c.is_ascii_digit()) at line 253 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "Input string must contain a non-empty segment after the last period that is composed entirely of ASCII digits, e.g., \"example.123\", \"test.4567\", \"number.0\"\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"example.123\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"example.123\"), true);"
              ],
              "code": [
                "{",
                "    let input = \"example.123\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"example.123\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"test.4567\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"test.4567\"), true);",
                "    assert_eq!(ends_in_a_number(\"random.12345\"), true);",
                "    assert_eq!(ends_in_a_number(\"data.6789\"), true);",
                "    assert_eq!(ends_in_a_number(\"number.0000\"), true);",
                "    assert_eq!(ends_in_a_number(\"example.1234567890\"), true);"
              ],
              "code": [
                "{",
                "    let input = \"test.4567\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"test.4567\"), true);",
                "    assert_eq!(ends_in_a_number(\"random.12345\"), true);",
                "    assert_eq!(ends_in_a_number(\"data.6789\"), true);",
                "    assert_eq!(ends_in_a_number(\"number.0000\"), true);",
                "    assert_eq!(ends_in_a_number(\"example.1234567890\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"number.0\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"number.0\"), true);",
                "    assert_eq!(ends_in_a_number(\"text.123\"), true);",
                "    assert_eq!(ends_in_a_number(\"example.4567\"), true);",
                "    assert_eq!(ends_in_a_number(\"test.890\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.7\"), true);"
              ],
              "code": [
                "{",
                "    let input = \"number.0\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"number.0\"), true);",
                "    assert_eq!(ends_in_a_number(\"text.123\"), true);",
                "    assert_eq!(ends_in_a_number(\"example.4567\"), true);",
                "    assert_eq!(ends_in_a_number(\"test.890\"), true);",
                "    assert_eq!(ends_in_a_number(\"sample.7\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input = \"data.987654321\";",
                "    ends_in_a_number(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(ends_in_a_number(\"data.987654321\"), true);"
              ],
              "code": [
                "{",
                "    let input = \"data.987654321\";",
                "    ends_in_a_number(input);",
                "    assert_eq!(ends_in_a_number(\"data.987654321\"), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}