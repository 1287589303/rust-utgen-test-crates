{
  "name": "url::{impl#1}::port",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1256:5:1258:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.port\n"
      ],
      "input_infer": "Valid values: None, Some(80), Some(443), Some(22), Some(65535), Some(0) for test cases with invalid port, edge cases for both None and Some values covering common ports and maximum valid port number; invalid input strings should also be handled.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    url.port();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"ssh://example.com:22\").unwrap();",
                "    assert_eq!(url.port(), Some(22));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    url.port();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"ssh://example.com:22\").unwrap();",
                "    assert_eq!(url.port(), Some(22));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    url.port();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"ssh://example.com:22\").unwrap();",
                "    assert_eq!(url.port(), Some(22));",
                "    ",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"ftp://example.com:21/path\").unwrap();",
                "    assert_eq!(url.port(), Some(21));",
                "    ",
                "    let url = Url::parse(\"mailto:example@example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://example.com:8080\").unwrap();",
                "    assert_eq!(url.port(), Some(8080));",
                "    ",
                "    let url = Url::parse(\"https://example.com:80\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"http://example.com:80\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://user:password@example.com:443/\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://[::1]:443\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://user:password@[::1]:22\").unwrap();",
                "    assert_eq!(url.port(), Some(22));",
                "    ",
                "    let url = Url::parse(\"https://example.com:3000/path\").unwrap();",
                "    assert_eq!(url.port(), Some(3000));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    url.port();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"ssh://example.com:22\").unwrap();",
                "    assert_eq!(url.port(), Some(22));",
                "    ",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"ftp://example.com:21/path\").unwrap();",
                "    assert_eq!(url.port(), Some(21));",
                "    ",
                "    let url = Url::parse(\"mailto:example@example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://example.com:8080\").unwrap();",
                "    assert_eq!(url.port(), Some(8080));",
                "    ",
                "    let url = Url::parse(\"https://example.com:80\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"http://example.com:80\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://user:password@example.com:443/\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://[::1]:443\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://user:password@[::1]:22\").unwrap();",
                "    assert_eq!(url.port(), Some(22));",
                "    ",
                "    let url = Url::parse(\"https://example.com:3000/path\").unwrap();",
                "    assert_eq!(url.port(), Some(3000));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"ssh://example.com:22\").unwrap();",
                "    url.port();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port(), Some(22));",
                "    ",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    assert_eq!(url.port(), None);"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"ssh://example.com:22\").unwrap();",
                "    url.port();",
                "    assert_eq!(url.port(), Some(22));",
                "    ",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    ",
                "    let url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://example.com:0\").unwrap();",
                "    url.port();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port(), Some(0));",
                "    let url = Url::parse(\"http://example.com:80\").unwrap();",
                "    assert_eq!(url.port(), Some(80));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"https://example.com:443\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"ftp://example.com:21\").unwrap();",
                "    assert_eq!(url.port(), Some(21));",
                "    let url = Url::parse(\"ws://example.com:3000\").unwrap();",
                "    assert_eq!(url.port(), Some(3000));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://example.com:0\").unwrap();",
                "    url.port();",
                "    assert_eq!(url.port(), Some(0));",
                "    let url = Url::parse(\"http://example.com:80\").unwrap();",
                "    assert_eq!(url.port(), Some(80));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"https://example.com:443\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"ftp://example.com:21\").unwrap();",
                "    assert_eq!(url.port(), Some(21));",
                "    let url = Url::parse(\"ws://example.com:3000\").unwrap();",
                "    assert_eq!(url.port(), Some(3000));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://example.com:65535\").unwrap();",
                "    url.port();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port(), Some(65535));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"http://example.com:80\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"ftp://example.com:21\").unwrap();",
                "    assert_eq!(url.port(), Some(21));",
                "    let url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"ssh://example.com:22\").unwrap();",
                "    assert_eq!(url.port(), Some(22));",
                "    let url = Url::parse(\"ws://example.com:8080\").unwrap();",
                "    assert_eq!(url.port(), Some(8080));",
                "    let url = Url::parse(\"ftp://example.com:999\").unwrap();",
                "    assert_eq!(url.port(), Some(999));",
                "    let url = Url::parse(\"ftp://example.com:30000\").unwrap();",
                "    assert_eq!(url.port(), Some(30000));",
                "    let url = Url::parse(\"http://example.com:0\").unwrap();",
                "    assert_eq!(url.port(), Some(0));",
                "    let url = Url::parse(\"http://example.com:-1\").unwrap_err();"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://example.com:65535\").unwrap();",
                "    url.port();",
                "    assert_eq!(url.port(), Some(65535));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"http://example.com:80\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"ftp://example.com:21\").unwrap();",
                "    assert_eq!(url.port(), Some(21));",
                "    let url = Url::parse(\"https://example.com:443/\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"ssh://example.com:22\").unwrap();",
                "    assert_eq!(url.port(), Some(22));",
                "    let url = Url::parse(\"ws://example.com:8080\").unwrap();",
                "    assert_eq!(url.port(), Some(8080));",
                "    let url = Url::parse(\"ftp://example.com:999\").unwrap();",
                "    assert_eq!(url.port(), Some(999));",
                "    let url = Url::parse(\"ftp://example.com:30000\").unwrap();",
                "    assert_eq!(url.port(), Some(30000));",
                "    let url = Url::parse(\"http://example.com:0\").unwrap();",
                "    assert_eq!(url.port(), Some(0));",
                "    let url = Url::parse(\"http://example.com:-1\").unwrap_err();",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://example.com:80\").unwrap();",
                "    url.port();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port(), Some(80));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"https://example.com:443\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"ftp://example.com:21\").unwrap();",
                "    assert_eq!(url.port(), Some(21));",
                "    let url = Url::parse(\"ssh://example.com:22\").unwrap();",
                "    assert_eq!(url.port(), Some(22));",
                "    let url = Url::parse(\"http://example.com:0\").unwrap();",
                "    assert_eq!(url.port(), Some(0));",
                "    let url = Url::parse(\"http://example.com:65535\").unwrap();",
                "    assert_eq!(url.port(), Some(65535));",
                "    let url = Url::parse(\"http://example.com:-1\").unwrap_err();",
                "    assert!(url.is_err());"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://example.com:80\").unwrap();",
                "    url.port();",
                "    assert_eq!(url.port(), Some(80));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"https://example.com:443\").unwrap();",
                "    assert_eq!(url.port(), None);",
                "    let url = Url::parse(\"ftp://example.com:21\").unwrap();",
                "    assert_eq!(url.port(), Some(21));",
                "    let url = Url::parse(\"ssh://example.com:22\").unwrap();",
                "    assert_eq!(url.port(), Some(22));",
                "    let url = Url::parse(\"http://example.com:0\").unwrap();",
                "    assert_eq!(url.port(), Some(0));",
                "    let url = Url::parse(\"http://example.com:65535\").unwrap();",
                "    assert_eq!(url.port(), Some(65535));",
                "    let url = Url::parse(\"http://example.com:-1\").unwrap_err();",
                "    assert!(url.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Url::parse(\"invalid_url_string\");",
                "    assert!(result.is_err());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Url::parse(\"https://example.com\").unwrap().port(), None);",
                "    assert_eq!(Url::parse(\"https://example.com:443/\").unwrap().port(), None);",
                "    assert_eq!(Url::parse(\"ssh://example.com:22\").unwrap().port(), Some(22);"
              ],
              "code": [
                "{",
                "    let result = Url::parse(\"invalid_url_string\");",
                "    assert!(result.is_err());",
                "    assert_eq!(Url::parse(\"https://example.com\").unwrap().port(), None);",
                "    assert_eq!(Url::parse(\"https://example.com:443/\").unwrap().port(), None);",
                "    assert_eq!(Url::parse(\"ssh://example.com:22\").unwrap().port(), Some(22));  ",
                "}  "
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}