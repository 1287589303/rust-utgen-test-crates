{
  "name": "url::parser::to_u32",
  "mod_info": {
    "name": "parser",
    "loc": "url/src/lib.rs:218:1:218:12"
  },
  "visible": true,
  "loc": "url/src/parser.rs:1760:1:1766:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: i <= u32::MAX as usize at line 1761 is true, with bound i == u32::MAX as usize\n",
        "expected return value/type: Ok(i as u32)\n"
      ],
      "input_infer": "i in the range 0 to 4294967295 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: usize = u32::MAX as usize;",
                "    let result = to_u32(input);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), u32::MAX);"
              ],
              "code": [
                "{",
                "    let input: usize = u32::MAX as usize;",
                "    let result = to_u32(input);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), u32::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: usize = 0;",
                "    let result = to_u32(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(0));",
                "    let input: usize = u32::MAX as usize;",
                "    let result = to_u32(input);",
                "    assert_eq!(result, Ok(u32::MAX));",
                "    let input: usize = u32::MAX as usize - 1;",
                "    let result = to_u32(input);",
                "    assert_eq!(result, Ok(u32::MAX - 1));"
              ],
              "code": [
                "{",
                "    let input: usize = 0;",
                "    let result = to_u32(input);",
                "    assert_eq!(result, Ok(0));",
                "    let input: usize = u32::MAX as usize;",
                "    let result = to_u32(input);",
                "    assert_eq!(result, Ok(u32::MAX));",
                "    let input: usize = u32::MAX as usize - 1;",
                "    let result = to_u32(input);",
                "    assert_eq!(result, Ok(u32::MAX - 1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: usize = 100;",
                "    let result = to_u32(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(to_u32(u32::MAX as usize), Ok(u32::MAX));"
              ],
              "code": [
                "{",
                "    let input: usize = 100;",
                "    let result = to_u32(input);",
                "    assert_eq!(to_u32(u32::MAX as usize), Ok(u32::MAX));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: usize = 4294967294; // Just below u32::MAX",
                "    let result = to_u32(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(4294967294));"
              ],
              "code": [
                "{",
                "    let input: usize = 4294967294; // Just below u32::MAX",
                "    let result = to_u32(input);",
                "    assert_eq!(result, Ok(4294967294));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: i <= u32::MAX as usize at line 1761 is false\n",
        "expected return value/type: Err(ParseError::Overflow)\n"
      ],
      "input_infer": "i > u32::MAX as usize\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: usize = u32::MAX as usize + 1;",
                "    let result = to_u32(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(ParseError::Overflow));"
              ],
              "code": [
                "{",
                "    let input: usize = u32::MAX as usize + 1;",
                "    let result = to_u32(input);",
                "    assert_eq!(result, Err(ParseError::Overflow));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: usize = std::usize::MAX;",
                "    let result = to_u32(input);",
                "}"
              ],
              "oracle": [
                "    result.unwrap_err() == ParseError::Overflow"
              ],
              "code": [
                "{",
                "    let input: usize = std::usize::MAX;",
                "    let result = to_u32(input);",
                "    result.unwrap_err() == ParseError::Overflow",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: usize = u32::MAX as usize + 100;",
                "    let result = to_u32(input);",
                "}"
              ],
              "oracle": [
                "    let input: usize = u32::MAX as usize + 100;",
                "    let expected: ParseResult<u32> = Err(ParseError::Overflow);",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let input: usize = u32::MAX as usize + 100;",
                "    let result = to_u32(input);",
                "    let input: usize = u32::MAX as usize + 100;",
                "    let expected: ParseResult<u32> = Err(ParseError::Overflow);",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}