{
  "name": "percent_encoding::percent_encode",
  "mod_info": {
    "name": "",
    "loc": "percent_encoding/src/lib.rs:9:1:481:2"
  },
  "visible": true,
  "loc": "percent_encoding/src/lib.rs:117:1:122:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: PercentEncode {\n        bytes: input,\n        ascii_set,\n    }\n"
      ],
      "input_infer": "input: any non-empty byte slice, ascii_set: reference to a valid static AsciiSet\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = &[];",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).bytes, b\"foo bar?\");",
                "    assert_eq!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).ascii_set, &NON_ALPHANUMERIC);",
                "    assert_eq!(percent_encode(b\"\", NON_ALPHANUMERIC).bytes, b\"\");",
                "    assert_eq!(percent_encode(b\"\", NON_ALPHANUMERIC).ascii_set, &NON_ALPHANUMERIC);",
                "    assert_eq!(percent_encode(b\"hello\", CONTROLS).bytes, b\"hello\");",
                "    assert_eq!(percent_encode(b\"hello\", CONTROLS).ascii_set, &CONTROLS);",
                "    assert_eq!(percent_encode(b\" \", NON_ALPHANUMERIC).bytes, b\" \");",
                "    assert_eq!(percent_encode(b\" \", NON_ALPHANUMERIC).ascii_set, &NON_ALPHANUMERIC);"
              ],
              "code": [
                "{",
                "    let input: &[u8] = &[];",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "    assert_eq!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).bytes, b\"foo bar?\");",
                "    assert_eq!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).ascii_set, &NON_ALPHANUMERIC);",
                "    assert_eq!(percent_encode(b\"\", NON_ALPHANUMERIC).bytes, b\"\");",
                "    assert_eq!(percent_encode(b\"\", NON_ALPHANUMERIC).ascii_set, &NON_ALPHANUMERIC);",
                "    assert_eq!(percent_encode(b\"hello\", CONTROLS).bytes, b\"hello\");",
                "    assert_eq!(percent_encode(b\"hello\", CONTROLS).ascii_set, &CONTROLS);",
                "    assert_eq!(percent_encode(b\" \", NON_ALPHANUMERIC).bytes, b\" \");",
                "    assert_eq!(percent_encode(b\" \", NON_ALPHANUMERIC).ascii_set, &NON_ALPHANUMERIC);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"hello\";",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(percent_encode(b\"hello\", NON_ALPHANUMERIC).bytes, b\"hello\");",
                "    assert_eq!(percent_encode(b\"hello\", NON_ALPHANUMERIC).ascii_set, NON_ALPHANUMERIC);",
                "    assert_eq!(percent_encode(b\"\", NON_ALPHANUMERIC).bytes, b\"\");",
                "    assert_eq!(percent_encode(b\" \", NON_ALPHANUMERIC).bytes, b\" \");",
                "    assert_eq!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).to_string(), \"foo%20bar%3F\");",
                "    assert_ne!(percent_encode(b\"abc\", NON_ALPHANUMERIC), percent_encode(b\"abc\", CONTROLS);"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"hello\";",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "    assert_eq!(percent_encode(b\"hello\", NON_ALPHANUMERIC).bytes, b\"hello\");",
                "    assert_eq!(percent_encode(b\"hello\", NON_ALPHANUMERIC).ascii_set, NON_ALPHANUMERIC);",
                "    assert_eq!(percent_encode(b\"\", NON_ALPHANUMERIC).bytes, b\"\");",
                "    assert_eq!(percent_encode(b\" \", NON_ALPHANUMERIC).bytes, b\" \");",
                "    assert_eq!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).to_string(), \"foo%20bar%3F\");",
                "    assert_ne!(percent_encode(b\"abc\", NON_ALPHANUMERIC), percent_encode(b\"abc\", CONTROLS);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"foo bar?\";",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).bytes, b\"foo bar?\");",
                "    assert_eq!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).ascii_set, &NON_ALPHANUMERIC);",
                "    assert!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).to_string() == \"foo%20bar%3F\");",
                "    assert!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).collect::<String>() == \"foo%20bar%3F\");"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"foo bar?\";",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "    assert_eq!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).bytes, b\"foo bar?\");",
                "    assert_eq!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).ascii_set, &NON_ALPHANUMERIC);",
                "    assert!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).to_string() == \"foo%20bar%3F\");",
                "    assert!(percent_encode(b\"foo bar?\", NON_ALPHANUMERIC).collect::<String>() == \"foo%20bar%3F\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"foo \\xFF bar\";",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(percent_encode(b\"foo \\xFF bar\", NON_ALPHANUMERIC).bytes, b\"foo \\xFF bar\");",
                "    assert_eq!(percent_encode(b\"foo \\xFF bar\", NON_ALPHANUMERIC).ascii_set, NON_ALPHANUMERIC);",
                "    assert_eq!(percent_encode(b\"foo \\xFF bar\", NON_ALPHANUMERIC), percent_encode(b\"foo \\xFF bar\", NON_ALPHANUMERIC));"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"foo \\xFF bar\";",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "    assert_eq!(percent_encode(b\"foo \\xFF bar\", NON_ALPHANUMERIC).bytes, b\"foo \\xFF bar\");",
                "    assert_eq!(percent_encode(b\"foo \\xFF bar\", NON_ALPHANUMERIC).ascii_set, NON_ALPHANUMERIC);",
                "    assert_eq!(percent_encode(b\"foo \\xFF bar\", NON_ALPHANUMERIC), percent_encode(b\"foo \\xFF bar\", NON_ALPHANUMERIC));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"hello, world!\";",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(percent_encode(b\"hello, world!\", NON_ALPHANUMERIC).bytes, b\"hello, world!\");",
                "    assert_eq!(percent_encode(b\"hello, world!\", NON_ALPHANUMERIC).ascii_set, &NON_ALPHANUMERIC);"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"hello, world!\";",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "    assert_eq!(percent_encode(b\"hello, world!\", NON_ALPHANUMERIC).bytes, b\"hello, world!\");",
                "    assert_eq!(percent_encode(b\"hello, world!\", NON_ALPHANUMERIC).ascii_set, &NON_ALPHANUMERIC);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let input: &[u8] = b\"\";",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(percent_encode(b\"\", NON_ALPHANUMERIC), PercentEncode { bytes: b\"\", ascii_set: NON_ALPHANUMERIC });"
              ],
              "code": [
                "{",
                "    let input: &[u8] = b\"\";",
                "    let ascii_set = &NON_ALPHANUMERIC;",
                "    percent_encode(input, ascii_set);",
                "    assert_eq!(percent_encode(b\"\", NON_ALPHANUMERIC), PercentEncode { bytes: b\"\", ascii_set: NON_ALPHANUMERIC });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}