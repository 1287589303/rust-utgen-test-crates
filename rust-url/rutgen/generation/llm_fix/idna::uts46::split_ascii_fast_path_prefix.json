{
  "name": "idna::uts46::split_ascii_fast_path_prefix",
  "mod_info": {
    "name": "uts46",
    "loc": "idna/src/lib.rs:58:1:58:15"
  },
  "visible": false,
  "loc": "idna/src/uts46.rs:186:1:202:2",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let Some(pos) = label.iter().position(|b| !b.is_ascii()) at line 187 is true\n",
        "precondition: pos == 0 at line 188 is false\n",
        "expected return value/type: (&[], label)\n"
      ],
      "input_infer": "label: non-empty ASCII slice followed by at least one non-ASCII byte, with length ranges from 1 to 2000 bytes, containing at least one non-ASCII character with the first non-ASCII character not being the first byte.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[u8] = b\"abc\\xFF\"; // ASCII followed by non-ASCII, pos will be 3",
                "    split_ascii_fast_path_prefix(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(split_ascii_fast_path_prefix(b\"abc\\xFF\"), (&b\"ab\"[..], &b\"\\xFF\"[..]));"
              ],
              "code": [
                "{",
                "    let label: &[u8] = b\"abc\\xFF\"; // ASCII followed by non-ASCII, pos will be 3",
                "    split_ascii_fast_path_prefix(label);",
                "    assert_eq!(split_ascii_fast_path_prefix(b\"abc\\xFF\"), (&b\"ab\"[..], &b\"\\xFF\"[..]));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[u8] = b\"xyz\\xC2\\xA9\"; // ASCII followed by non-ASCII (©), pos will be 3",
                "    split_ascii_fast_path_prefix(label);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(split_ascii_fast_path_prefix(b\"xyz\\xC2\\xA9\"), (&b\"\"[..], b\"xyz\\xC2\\xA9\"));"
              ],
              "code": [
                "{",
                "    let label: &[u8] = b\"xyz\\xC2\\xA9\"; // ASCII followed by non-ASCII (©), pos will be 3",
                "    split_ascii_fast_path_prefix(label);",
                "    assert_eq!(split_ascii_fast_path_prefix(b\"xyz\\xC2\\xA9\"), (&b\"\"[..], b\"xyz\\xC2\\xA9\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[u8] = b\"test1234\\xE2\\x9C\\x94\"; // ASCII followed by non-ASCII (✔), pos will be 10",
                "    split_ascii_fast_path_prefix(label);",
                "}"
              ],
              "oracle": [
                "    let label: &[u8] = b\"test1234\\xE2\\x9C\\x94\"; // ASCII followed by non-ASCII (✔), pos will be 10",
                "    assert_eq!(split_ascii_fast_path_prefix(label), (&[], label));"
              ],
              "code": [
                "{",
                "    let label: &[u8] = b\"test1234\\xE2\\x9C\\x94\"; // ASCII followed by non-ASCII (✔), pos will be 10",
                "    split_ascii_fast_path_prefix(label);",
                "    let label: &[u8] = b\"test1234\\xE2\\x9C\\x94\"; // ASCII followed by non-ASCII (✔), pos will be 10",
                "    assert_eq!(split_ascii_fast_path_prefix(label), (&[], label));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[u8] = b\"a\\xE2\\x80\\x98a\"; // ASCII character followed by non-ASCII (‘), pos will be 1",
                "    split_ascii_fast_path_prefix(label);",
                "}"
              ],
              "oracle": [
                "    split_ascii_fast_path_prefix(b\"a\\xE2\\x80\\x98a\"); // expects (&[], b\"a\\xE2\\x80\\x98a\")"
              ],
              "code": [
                "{",
                "    let label: &[u8] = b\"a\\xE2\\x80\\x98a\"; // ASCII character followed by non-ASCII (‘), pos will be 1",
                "    split_ascii_fast_path_prefix(label);",
                "    split_ascii_fast_path_prefix(b\"a\\xE2\\x80\\x98a\"); // expects (&[], b\"a\\xE2\\x80\\x98a\")",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[u8] = b\"string\\xE2\\x9A\\xA1\"; // ASCII followed by non-ASCII (⚡), pos will be 6",
                "    split_ascii_fast_path_prefix(label);",
                "}"
              ],
              "oracle": [
                "    let label: &[u8] = b\"string\\xE2\\x9A\\xA1\"; // ASCII followed by non-ASCII (⚡), pos will be 6",
                "    assert_eq!(split_ascii_fast_path_prefix(label), (&[b's', b't', b'r', b'i', b'n', b'g'], &label[6..]));"
              ],
              "code": [
                "{",
                "    let label: &[u8] = b\"string\\xE2\\x9A\\xA1\"; // ASCII followed by non-ASCII (⚡), pos will be 6",
                "    split_ascii_fast_path_prefix(label);",
                "    let label: &[u8] = b\"string\\xE2\\x9A\\xA1\"; // ASCII followed by non-ASCII (⚡), pos will be 6",
                "    assert_eq!(split_ascii_fast_path_prefix(label), (b\"string\".as_ref(), &label[6..]));  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: let Some(pos) = label.iter().position(|b| !b.is_ascii()) at line 187 is true\n",
        "precondition: pos == 0 at line 188 is true\n",
        "expected return value/type: (head, tail)\n"
      ],
      "input_infer": "label: &[u8] with the first byte being a non-ASCII character and length of label >= 1, e.g., [0xC2, 0xA9] (©)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[u8] = &[0xC2, 0xA9]; // Non-ASCII character ©",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    let expected_head: &[u8] = &[]; // No ASCII characters before the non-ASCII character",
                "    let expected_tail: &[u8] = label; // The entire label is returned",
                "    let _ = (head, tail); // Placeholder to ensure the function is called",
                "}"
              ],
              "oracle": [
                "    let label: &[u8] = &[0xC2, 0xA9]; // Non-ASCII character ©",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    assert_eq!(head, &[]); // Check if head is empty",
                "    assert_eq!(tail, label); // Check if tail is the entire label"
              ],
              "code": [
                "{",
                "    let label: &[u8] = &[0xC2, 0xA9]; // Non-ASCII character ©",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    let expected_head: &[u8] = &[]; // No ASCII characters before the non-ASCII character",
                "    let expected_tail: &[u8] = label; // The entire label is returned",
                "    let _ = (head, tail); // Placeholder to ensure the function is called",
                "    let label: &[u8] = &[0xC2, 0xA9]; // Non-ASCII character ©",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    assert_eq!(head, &[]); // Check if head is empty",
                "    assert_eq!(tail, label); // Check if tail is the entire label",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[u8] = &[0xE2, 0x82, 0xAC]; // Non-ASCII character € (Euro sign)",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    let expected_head: &[u8] = &[]; // No ASCII characters before the non-ASCII character",
                "    let expected_tail: &[u8] = label; // The entire label is returned",
                "    let _ = (head, tail); // Placeholder to ensure the function is called",
                "}"
              ],
              "oracle": [
                "    let label: &[u8] = &[0xE2, 0x82, 0xAC]; // Non-ASCII character € (Euro sign)",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    assert_eq!(head, &[]); // Check if head is empty",
                "    assert_eq!(tail, label); // Check if tail is the entire label"
              ],
              "code": [
                "{",
                "    let label: &[u8] = &[0xE2, 0x82, 0xAC]; // Non-ASCII character € (Euro sign)",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    let expected_head: &[u8] = &[]; // No ASCII characters before the non-ASCII character",
                "    let expected_tail: &[u8] = label; // The entire label is returned",
                "    let _ = (head, tail); // Placeholder to ensure the function is called",
                "    let label: &[u8] = &[0xE2, 0x82, 0xAC]; // Non-ASCII character € (Euro sign)",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    assert_eq!(head, &[]); // Check if head is empty",
                "    assert_eq!(tail, label); // Check if tail is the entire label",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let label: &[u8] = &[0xF0, 0x9F, 0x8C, 0x9F]; // Non-ASCII character 🌟 (Star)",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    let expected_head: &[u8] = &[]; // No ASCII characters before the non-ASCII character",
                "    let expected_tail: &[u8] = label; // The entire label is returned",
                "    let _ = (head, tail); // Placeholder to ensure the function is called",
                "}"
              ],
              "oracle": [
                "    let label: &[u8] = &[0xF0, 0x9F, 0x8C, 0x9F];",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    assert_eq!(head, &[]);",
                "    assert_eq!(tail, label);"
              ],
              "code": [
                "{",
                "    let label: &[u8] = &[0xF0, 0x9F, 0x8C, 0x9F]; // Non-ASCII character 🌟 (Star)",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    let expected_head: &[u8] = &[]; // No ASCII characters before the non-ASCII character",
                "    let expected_tail: &[u8] = label; // The entire label is returned",
                "    let _ = (head, tail); // Placeholder to ensure the function is called",
                "    let label: &[u8] = &[0xF0, 0x9F, 0x8C, 0x9F];",
                "    let (head, tail) = split_ascii_fast_path_prefix(label);",
                "    assert_eq!(head, &[]);",
                "    assert_eq!(tail, label);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}