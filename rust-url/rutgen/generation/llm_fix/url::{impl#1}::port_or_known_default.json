{
  "name": "url::{impl#1}::port_or_known_default",
  "mod_info": {
    "name": "",
    "loc": "url/src/lib.rs:9:1:3218:2"
  },
  "visible": true,
  "loc": "url/src/lib.rs:1288:5:1290:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid URL strings with and without ports for schemes \"http\", \"https\", \"ws\", \"wss\", and \"ftp\"; invalid URLs to confirm the None return; URLs with custom ports to check specific port retrieval; URLs without scheme to check behavior; empty string, malformed URLs, edge cases like \"://\" without authority, and maximum valid port number (65535).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(80)",
                "",
                "    let url = Url::parse(\"http://example.com:8080\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(8080)",
                "}"
              ],
              "oracle": [
                "    url.port_or_known_default(); // Expected Some(80)",
                "    url.port_or_known_default(); // Expected Some(8080)"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(80)",
                "",
                "    let url = Url::parse(\"http://example.com:8080\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(8080)",
                "    url.port_or_known_default(); // Expected Some(80)",
                "    url.port_or_known_default(); // Expected Some(8080)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(443)",
                "",
                "    let url = Url::parse(\"https://example.com:8443\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(8443)",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    assert_eq!(url.port_or_known_default(), Some(8443));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    let url = Url::parse(\"ws://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    let url = Url::parse(\"foo://example.com:1456\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(1456));",
                "    let url = Url::parse(\"ftp://example.com:1024\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(1024));",
                "    let url = Url::parse(\"http://example.com:8080\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(8080));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(443)",
                "",
                "    let url = Url::parse(\"https://example.com:8443\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(8443)",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    assert_eq!(url.port_or_known_default(), Some(8443));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    let url = Url::parse(\"ws://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    let url = Url::parse(\"foo://example.com:1456\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(1456));",
                "    let url = Url::parse(\"ftp://example.com:1024\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(1024));",
                "    let url = Url::parse(\"http://example.com:8080\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(8080));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"ws://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(80)",
                "",
                "    let url = Url::parse(\"ws://example.com:1234\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(1234)",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    assert_eq!(url.port_or_known_default(), Some(1234));",
                "    assert_eq!(Url::parse(\"http://example.com\").unwrap().port_or_known_default(), Some(80));",
                "    assert_eq!(Url::parse(\"https://example.com\").unwrap().port_or_known_default(), Some(443));",
                "    assert_eq!(Url::parse(\"ftp://example.com\").unwrap().port_or_known_default(), Some(21));",
                "    assert_eq!(Url::parse(\"foo://example.com\").unwrap().port_or_known_default(), None);",
                "    assert_eq!(Url::parse(\"foo://example.com:1456\").unwrap().port_or_known_default(), Some(1456));",
                "    assert_eq!(Url::parse(\"wss://example.com\").unwrap().port_or_known_default(), Some(443));",
                "    assert_eq!(Url::parse(\"ws://example.com:1456\").unwrap().port_or_known_default(), Some(1456));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"ws://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(80)",
                "",
                "    let url = Url::parse(\"ws://example.com:1234\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(1234)",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    assert_eq!(url.port_or_known_default(), Some(1234));",
                "    assert_eq!(Url::parse(\"http://example.com\").unwrap().port_or_known_default(), Some(80));",
                "    assert_eq!(Url::parse(\"https://example.com\").unwrap().port_or_known_default(), Some(443));",
                "    assert_eq!(Url::parse(\"ftp://example.com\").unwrap().port_or_known_default(), Some(21));",
                "    assert_eq!(Url::parse(\"foo://example.com\").unwrap().port_or_known_default(), None);",
                "    assert_eq!(Url::parse(\"foo://example.com:1456\").unwrap().port_or_known_default(), Some(1456));",
                "    assert_eq!(Url::parse(\"wss://example.com\").unwrap().port_or_known_default(), Some(443));",
                "    assert_eq!(Url::parse(\"ws://example.com:1456\").unwrap().port_or_known_default(), Some(1456));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(443)",
                "",
                "    let url = Url::parse(\"wss://example.com:5678\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(5678)",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    assert_eq!(url.port_or_known_default(), Some(5678));",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    let url = Url::parse(\"foo://example.com:1456\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(1456));",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(443)",
                "",
                "    let url = Url::parse(\"wss://example.com:5678\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(5678)",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    assert_eq!(url.port_or_known_default(), Some(5678));",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    let url = Url::parse(\"foo://example.com:1456\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(1456));",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(21)",
                "",
                "    let url = Url::parse(\"ftp://example.com:2121\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(2121)",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    assert_eq!(url.port_or_known_default(), Some(2121));",
                "    assert_eq!(Url::parse(\"http://example.com\").unwrap().port_or_known_default(), Some(80));",
                "    assert_eq!(Url::parse(\"https://example.com\").unwrap().port_or_known_default(), Some(443));",
                "    assert_eq!(Url::parse(\"ws://example.com\").unwrap().port_or_known_default(), Some(80));",
                "    assert_eq!(Url::parse(\"wss://example.com\").unwrap().port_or_known_default(), Some(443));",
                "    assert_eq!(Url::parse(\"mailto:user@example.com\").unwrap().port_or_known_default(), None);",
                "    assert_eq!(Url::parse(\"tel:123456789\").unwrap().port_or_known_default(), None);",
                "    assert_eq!(Url::parse(\"ftp://example.com:21\").unwrap().port_or_known_default(), Some(21));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(21)",
                "",
                "    let url = Url::parse(\"ftp://example.com:2121\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(2121)",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    assert_eq!(url.port_or_known_default(), Some(2121));",
                "    assert_eq!(Url::parse(\"http://example.com\").unwrap().port_or_known_default(), Some(80));",
                "    assert_eq!(Url::parse(\"https://example.com\").unwrap().port_or_known_default(), Some(443));",
                "    assert_eq!(Url::parse(\"ws://example.com\").unwrap().port_or_known_default(), Some(80));",
                "    assert_eq!(Url::parse(\"wss://example.com\").unwrap().port_or_known_default(), Some(443));",
                "    assert_eq!(Url::parse(\"mailto:user@example.com\").unwrap().port_or_known_default(), None);",
                "    assert_eq!(Url::parse(\"tel:123456789\").unwrap().port_or_known_default(), None);",
                "    assert_eq!(Url::parse(\"ftp://example.com:21\").unwrap().port_or_known_default(), Some(21));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected None",
                "",
                "    let url = Url::parse(\"foo://example.com:1456\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(1456)",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port_or_known_default(), None);",
                "    assert_eq!(url.port_or_known_default(), Some(1456));",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected None",
                "",
                "    let url = Url::parse(\"foo://example.com:1456\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(1456)",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    assert_eq!(url.port_or_known_default(), Some(1456));",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"//example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected None",
                "",
                "    let url = Url::parse(\"//example.com:1234\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(1234)",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port_or_known_default(), None);",
                "    assert_eq!(url.port_or_known_default(), Some(1234));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    let url = Url::parse(\"ws://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    let url = Url::parse(\"foo://example.com:3000\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(3000));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"//example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected None",
                "",
                "    let url = Url::parse(\"//example.com:1234\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(1234)",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    assert_eq!(url.port_or_known_default(), Some(1234));",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    let url = Url::parse(\"ws://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    let url = Url::parse(\"foo://example.com:3000\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(3000));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"\").unwrap();",
                "    url.port_or_known_default(); // Expected None",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port_or_known_default(), None);",
                "    ",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    ",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    ",
                "    let url = Url::parse(\"ws://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    ",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    ",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    ",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    ",
                "    let url = Url::parse(\"foo://example.com:1234\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(1234));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"\").unwrap();",
                "    url.port_or_known_default(); // Expected None",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    ",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    ",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    ",
                "    let url = Url::parse(\"ws://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    ",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    ",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    ",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    ",
                "    let url = Url::parse(\"foo://example.com:1234\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(1234));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"://\").unwrap();",
                "    url.port_or_known_default(); // Expected None",
                "",
                "    let url = Url::parse(\"htp://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected None",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port_or_known_default(), None);",
                "    ",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    ",
                "    let url = Url::parse(\"http://example.com:8080\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(8080));",
                "    ",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    ",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"://\").unwrap();",
                "    url.port_or_known_default(); // Expected None",
                "",
                "    let url = Url::parse(\"htp://example.com\").unwrap();",
                "    url.port_or_known_default(); // Expected None",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    ",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    ",
                "    let url = Url::parse(\"http://example.com:8080\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(8080));",
                "    ",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    ",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let url = Url::parse(\"http://example.com:65535\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(65535)",
                "}"
              ],
              "oracle": [
                "    assert_eq!(url.port_or_known_default(), Some(65535));",
                "    ",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    ",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    ",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    ",
                "    let url = Url::parse(\"ws://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    ",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    ",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    ",
                "    let url = Url::parse(\"foo://example.com:1456\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(1456));",
                "    ",
                "    let url = Url::parse(\"http://example.com:80\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    ",
                "    let url = Url::parse(\"http://example.com:0\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));"
              ],
              "code": [
                "{",
                "    let url = Url::parse(\"http://example.com:65535\").unwrap();",
                "    url.port_or_known_default(); // Expected Some(65535)",
                "    assert_eq!(url.port_or_known_default(), Some(65535));",
                "    ",
                "    let url = Url::parse(\"http://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    ",
                "    let url = Url::parse(\"https://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    ",
                "    let url = Url::parse(\"ftp://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(21));",
                "    ",
                "    let url = Url::parse(\"ws://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    ",
                "    let url = Url::parse(\"wss://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(443));",
                "    ",
                "    let url = Url::parse(\"foo://example.com\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), None);",
                "    ",
                "    let url = Url::parse(\"foo://example.com:1456\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(1456));",
                "    ",
                "    let url = Url::parse(\"http://example.com:80\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "    ",
                "    let url = Url::parse(\"http://example.com:0\").unwrap();",
                "    assert_eq!(url.port_or_known_default(), Some(80));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}