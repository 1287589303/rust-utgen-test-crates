{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// percent_encoding/src/lib.rs\n// crate name is percent_encoding\n#[cfg(feature = \"alloc\")]\nuse alloc::{\n    borrow::{Cow, ToOwned},\n    string::String, vec::Vec,\n};\nuse core::{fmt, slice, str};\npub use self::ascii_set::{AsciiSet, CONTROLS, NON_ALPHANUMERIC};\n#[derive(Debug, PartialEq, Eq)]\npub struct AsciiSet {\n    mask: [Chunk; ASCII_RANGE_LEN / BITS_PER_CHUNK],\n}\n#[derive(Debug, Clone, PartialEq, Eq)]\npub struct PercentEncode<'a> {\n    bytes: &'a [u8],\n    ascii_set: &'static AsciiSet,\n}\n#[inline]\npub fn utf8_percent_encode<'a>(\n    input: &'a str,\n    ascii_set: &'static AsciiSet,\n) -> PercentEncode<'a> {\n    percent_encode(input.as_bytes(), ascii_set)\n}\n#[inline]\npub fn percent_encode<'a>(\n    input: &'a [u8],\n    ascii_set: &'static AsciiSet,\n) -> PercentEncode<'a> {\n    PercentEncode {\n        bytes: input,\n        ascii_set,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Percent-encode the UTF-8 encoding of the given string.\n///\n/// See [`percent_encode`] regarding the return type.\n///\n/// # Examples\n///\n/// ```\n/// use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};\n///\n/// assert_eq!(utf8_percent_encode(\"foo bar?\", NON_ALPHANUMERIC).to_string(), \"foo%20bar%3F\");\n/// ```\n136 pub fn utf8_percent_encode<'a>(input: &'a str, ascii_set: &'static AsciiSet) -> PercentEncode<'a> {\n137     percent_encode(input.as_bytes(), ascii_set)\n138 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}