{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/lib.rs\n// crate name is idna\nuse alloc::borrow::Cow;\nuse alloc::string::String;\npub use uts46::AsciiDenyList;\nuse uts46::Uts46;\n#[allow(deprecated)]\npub use crate::deprecated::{Config, Idna};\npub struct Uts46 {\n    data: idna_adapter::Adapter,\n}\n#[derive(Default, Debug)]\n#[non_exhaustive]\npub struct Errors {}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[repr(transparent)]\npub struct AsciiDenyList {\n    bits: u128,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[non_exhaustive]\npub enum Hyphens {\n    /// _CheckHyphens=false_: Do not place positional restrictions on hyphens.\n    ///\n    /// This mode is used by the WHATWG URL Standard for normal User Agent processing\n    /// (i.e. not conformance checking).\n    Allow,\n    /// Prohibit hyphens in the first and last position in the label but allow in\n    /// the third and fourth position.\n    ///\n    /// Note that this mode rejects real-world names, including some GitHub user pages.\n    CheckFirstLast,\n    /// _CheckHyphens=true_: Prohibit hyphens in the first, third, fourth,\n    /// and last position in the label.\n    ///\n    /// Note that this mode rejects real-world names, including YouTube CDN nodes\n    /// and some GitHub user pages.\n    Check,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[non_exhaustive]\npub enum DnsLength {\n    /// _VerifyDNSLength=false_. (Possibly relevant for allowing non-DNS naming systems.)\n    Ignore,\n    /// _VerifyDNSLength=true_ with the exception that the trailing root label dot is\n    /// allowed.\n    VerifyAllowRootDot,\n    /// _VerifyDNSLength=true_. (The trailing root label dot is not allowed.)\n    Verify,\n}\nimpl Uts46 {\n    #[cfg(feature = \"compiled_data\")]\n    pub const fn new() -> Self {\n        Self {\n            data: idna_adapter::Adapter::new(),\n        }\n    }\n    pub fn to_ascii<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        dns_length: DnsLength,\n    ) -> Result<Cow<'a, str>, crate::Errors> {\n        let mut s = String::new();\n        match self\n            .process(\n                domain_name,\n                ascii_deny_list,\n                hyphens,\n                ErrorPolicy::FailFast,\n                |_, _, _| false,\n                &mut s,\n                None,\n            )\n        {\n            Ok(ProcessingSuccess::Passthrough) => {\n                let cow = Cow::Borrowed(unsafe {\n                    core::str::from_utf8_unchecked(domain_name)\n                });\n                if dns_length != DnsLength::Ignore\n                    && !verify_dns_length(\n                        &cow,\n                        dns_length == DnsLength::VerifyAllowRootDot,\n                    )\n                {\n                    Err(crate::Errors::default())\n                } else {\n                    Ok(cow)\n                }\n            }\n            Ok(ProcessingSuccess::WroteToSink) => {\n                let cow: Cow<'_, str> = Cow::Owned(s);\n                if dns_length != DnsLength::Ignore\n                    && !verify_dns_length(\n                        &cow,\n                        dns_length == DnsLength::VerifyAllowRootDot,\n                    )\n                {\n                    Err(crate::Errors::default())\n                } else {\n                    Ok(cow)\n                }\n            }\n            Err(ProcessingError::ValidityError) => Err(crate::Errors::default()),\n            Err(ProcessingError::SinkError) => unreachable!(),\n        }\n    }\n    pub fn to_unicode<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {}\n    pub fn to_user_interface<'a, OutputUnicode: FnMut(&[char], &[char], bool) -> bool>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        output_as_unicode: OutputUnicode,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {}\n    #[allow(clippy::too_many_arguments)]\n    pub fn process<\n        W: Write + ?Sized,\n        OutputUnicode: FnMut(&[char], &[char], bool) -> bool,\n    >(\n        &self,\n        domain_name: &[u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        error_policy: ErrorPolicy,\n        mut output_as_unicode: OutputUnicode,\n        sink: &mut W,\n        ascii_sink: Option<&mut W>,\n    ) -> Result<ProcessingSuccess, ProcessingError> {}\n    #[inline(always)]\n    fn process_inner<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n    ) -> (usize, bool, bool) {}\n    #[allow(clippy::too_many_arguments)]\n    #[inline(never)]\n    fn process_innermost<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n        tail: &'a [u8],\n    ) -> (usize, bool, bool) {}\n    #[inline(never)]\n    fn after_punycode_decode(\n        &self,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        current_label_start: usize,\n        label_buffer: &[char],\n        deny_list_deny_dot: u128,\n        fail_fast: bool,\n        had_errors: &mut bool,\n    ) -> bool {}\n    #[inline(never)]\n    fn check_label(\n        &self,\n        hyphens: Hyphens,\n        mut_label: &mut [char],\n        fail_fast: bool,\n        had_errors: &mut bool,\n        first_needs_combining_mark_check: bool,\n        needs_contextj_check: bool,\n    ) -> bool {}\n    #[inline(always)]\n    fn has_appropriately_joining_char<I: Iterator<Item = char>>(\n        &self,\n        iter: I,\n        required_mask: JoiningTypeMask,\n    ) -> bool {}\n    #[inline(always)]\n    fn is_bidi(&self, buffer: &[char]) -> bool {}\n}\npub fn domain_to_ascii_strict(domain: &str) -> Result<String, Errors> {\n    Uts46::new()\n        .to_ascii(\n            domain.as_bytes(),\n            uts46::AsciiDenyList::STD3,\n            uts46::Hyphens::Check,\n            uts46::DnsLength::Verify,\n        )\n        .map(|cow| cow.into_owned())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm,\n/// with the `beStrict` flag set.\n///\n/// Note that this rejects various real-world names including:\n/// * YouTube CDN nodes\n/// * Some GitHub user pages\n/// * Pseudo-hosts used by various TXT record-based protocols.\n139 pub fn domain_to_ascii_strict(domain: &str) -> Result<String, Errors> {\n140     Uts46::new()\n141         .to_ascii(\n142             domain.as_bytes(),\n143             uts46::AsciiDenyList::STD3,\n144             uts46::Hyphens::Check,\n145             uts46::DnsLength::Verify,\n146         )\n147         .map(|cow| cow.into_owned())\n148 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}