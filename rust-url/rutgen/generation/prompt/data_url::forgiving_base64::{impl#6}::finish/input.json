{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/forgiving_base64.rs\n// crate name is data_url\nuse alloc::vec::Vec;\nuse core::fmt;\n#[rustfmt::skip]\nconst BASE64_DECODE_TABLE: [i8; 256] = [\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    62,\n    -1,\n    -1,\n    -1,\n    63,\n    52,\n    53,\n    54,\n    55,\n    56,\n    57,\n    58,\n    59,\n    60,\n    61,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n    45,\n    46,\n    47,\n    48,\n    49,\n    50,\n    51,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n];\npub struct Decoder<F, E>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    write_bytes: F,\n    bit_buffer: u32,\n    buffer_bit_length: u8,\n    padding_symbols: u8,\n}\n#[derive(Debug)]\npub enum DecodeError<E> {\n    InvalidBase64(InvalidBase64),\n    WriteError(E),\n}\n#[derive(Debug)]\nenum InvalidBase64Details {\n    UnexpectedSymbol(u8),\n    AlphabetSymbolAfterPadding,\n    LoneAlphabetSymbol,\n    Padding,\n}\nimpl<F, E> Decoder<F, E>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    pub fn new(write_bytes: F) -> Self {\n        Self {\n            write_bytes,\n            bit_buffer: 0,\n            buffer_bit_length: 0,\n            padding_symbols: 0,\n        }\n    }\n    pub fn feed(&mut self, input: &[u8]) -> Result<(), DecodeError<E>> {}\n    pub fn finish(mut self) -> Result<(), DecodeError<E>> {\n        match (self.buffer_bit_length, self.padding_symbols) {\n            (0, 0) => {}\n            (12, 2) | (12, 0) => {\n                let byte_buffer = [(self.bit_buffer >> 4) as u8];\n                (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;\n            }\n            (18, 1) | (18, 0) => {\n                let byte_buffer = [\n                    (self.bit_buffer >> 10) as u8,\n                    (self.bit_buffer >> 2) as u8,\n                ];\n                (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;\n            }\n            (6, _) => return Err(InvalidBase64Details::LoneAlphabetSymbol.into()),\n            _ => return Err(InvalidBase64Details::Padding.into()),\n        }\n        Ok(())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Call this to signal the end of the input\n152 pub fn finish(mut self) -> Result<(), DecodeError<E>> {\n153     match (self.buffer_bit_length, self.padding_symbols) {\n154         (0, 0) => {\n155             // A multiple of four of alphabet symbols, and nothing else.\n156         }\n157         (12, 2) | (12, 0) => {\n158             // A multiple of four of alphabet symbols, followed by two more symbols,\n159             // optionally followed by two padding characters (which make a total multiple of four).\n160             let byte_buffer = [(self.bit_buffer >> 4) as u8];\n161             (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;\n162         }\n163         (18, 1) | (18, 0) => {\n164             // A multiple of four of alphabet symbols, followed by three more symbols,\n165             // optionally followed by one padding character (which make a total multiple of four).\n166             let byte_buffer = [(self.bit_buffer >> 10) as u8, (self.bit_buffer >> 2) as u8];\n167             (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;\n168         }\n169         (6, _) => return Err(InvalidBase64Details::LoneAlphabetSymbol.into()),\n170         _ => return Err(InvalidBase64Details::Padding.into()),\n171     }\n172     Ok(())\n173 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}