{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/punycode.rs\n// crate name is idna\nuse alloc::{string::String, vec::Vec};\nuse core::char;\nuse core::fmt::Write;\nuse core::marker::PhantomData;\nconst BASE: u32 = 36;\nconst T_MIN: u32 = 1;\nconst T_MAX: u32 = 26;\nconst SKEW: u32 = 38;\nconst DAMP: u32 = 700;\nconst INITIAL_BIAS: u32 = 72;\nconst INITIAL_N: u32 = 0x80;\n#[inline]\nfn value_to_digit(value: u32) -> char {\n    match value {\n        0..=25 => (value as u8 + b'a') as char,\n        26..=35 => (value as u8 - 26 + b'0') as char,\n        _ => panic!(),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n458 fn value_to_digit(value: u32) -> char {\n459     match value {\n460         0..=25 => (value as u8 + b'a') as char,       // a..z\n461         26..=35 => (value as u8 - 26 + b'0') as char, // 0..9\n462         _ => panic!(),\n463     }\n464 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}