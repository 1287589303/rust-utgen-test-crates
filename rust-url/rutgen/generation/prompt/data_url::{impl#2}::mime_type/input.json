{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\npub struct DataUrl<'a> {\n    mime_type: mime::Mime,\n    base64: bool,\n    encoded_body_plus_fragment: &'a str,\n}\n#[derive(Debug, PartialEq, Eq)]\npub struct Mime {\n    pub type_: String,\n    pub subtype: String,\n    /// (name, value)\n    pub parameters: Vec<(String, String)>,\n}\nimpl<'a> DataUrl<'a> {\n    pub fn process(input: &'a str) -> Result<Self, DataUrlError> {\n        use crate::DataUrlError::*;\n        let after_colon = pretend_parse_data_url(input).ok_or(NotADataUrl)?;\n        let (from_colon_to_comma, encoded_body_plus_fragment) = find_comma_before_fragment(\n                after_colon,\n            )\n            .ok_or(NoComma)?;\n        let (mime_type, base64) = parse_header(from_colon_to_comma);\n        Ok(DataUrl {\n            mime_type,\n            base64,\n            encoded_body_plus_fragment,\n        })\n    }\n    pub fn mime_type(&self) -> &mime::Mime {\n        &self.mime_type\n    }\n    pub fn decode<F, E>(\n        &self,\n        write_body_bytes: F,\n    ) -> Result<Option<FragmentIdentifier<'a>>, forgiving_base64::DecodeError<E>>\n    where\n        F: FnMut(&[u8]) -> Result<(), E>,\n    {}\n    pub fn decode_to_vec(\n        &self,\n    ) -> Result<\n        (Vec<u8>, Option<FragmentIdentifier<'a>>),\n        forgiving_base64::InvalidBase64,\n    > {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n90 pub fn mime_type(&self) -> &mime::Mime {\n91     &self.mime_type\n92 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}