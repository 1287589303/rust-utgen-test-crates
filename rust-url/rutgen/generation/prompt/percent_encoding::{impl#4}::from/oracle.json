{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// percent_encoding/src/lib.rs\n// crate name is percent_encoding\n#[cfg(feature = \"alloc\")]\nuse alloc::{\n    borrow::{Cow, ToOwned},\n    string::String, vec::Vec,\n};\nuse core::{fmt, slice, str};\npub use self::ascii_set::{AsciiSet, CONTROLS, NON_ALPHANUMERIC};\n#[derive(Clone, Debug)]\npub struct PercentDecode<'a> {\n    bytes: slice::Iter<'a, u8>,\n}\n#[cfg(feature = \"alloc\")]\nimpl<'a> From<PercentDecode<'a>> for Cow<'a, [u8]> {\n    fn from(iter: PercentDecode<'a>) -> Self {\n        match iter.if_any() {\n            Some(vec) => Cow::Owned(vec),\n            None => Cow::Borrowed(iter.bytes.as_slice()),\n        }\n    }\n}\nimpl<'a> PercentDecode<'a> {\n    #[cfg(feature = \"alloc\")]\n    fn if_any(&self) -> Option<Vec<u8>> {\n        let mut bytes_iter = self.bytes.clone();\n        while bytes_iter.any(|&b| b == b'%') {\n            if let Some(decoded_byte) = after_percent_sign(&mut bytes_iter) {\n                let initial_bytes = self.bytes.as_slice();\n                let unchanged_bytes_len = initial_bytes.len() - bytes_iter.len() - 3;\n                let mut decoded = initial_bytes[..unchanged_bytes_len].to_owned();\n                decoded.push(decoded_byte);\n                decoded.extend(PercentDecode { bytes: bytes_iter });\n                return Some(decoded);\n            }\n        }\n        None\n    }\n    #[cfg(feature = \"alloc\")]\n    pub fn decode_utf8(self) -> Result<Cow<'a, str>, str::Utf8Error> {}\n    #[cfg(feature = \"alloc\")]\n    pub fn decode_utf8_lossy(self) -> Cow<'a, str> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n281 fn from(iter: PercentDecode<'a>) -> Self {\n282     match iter.if_any() {\n283         Some(vec) => Cow::Owned(vec),\n284         None => Cow::Borrowed(iter.bytes.as_slice()),\n285     }\n286 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}