{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// percent_encoding/src/lib.rs\n// crate name is percent_encoding\n#[cfg(feature = \"alloc\")]\nuse alloc::{\n    borrow::{Cow, ToOwned},\n    string::String, vec::Vec,\n};\nuse core::{fmt, slice, str};\npub use self::ascii_set::{AsciiSet, CONTROLS, NON_ALPHANUMERIC};\n#[derive(Clone, Debug)]\npub struct PercentDecode<'a> {\n    bytes: slice::Iter<'a, u8>,\n}\n#[cfg(feature = \"alloc\")]\nimpl<'a> From<PercentDecode<'a>> for Cow<'a, [u8]> {\n    fn from(iter: PercentDecode<'a>) -> Self {\n        match iter.if_any() {\n            Some(vec) => Cow::Owned(vec),\n            None => Cow::Borrowed(iter.bytes.as_slice()),\n        }\n    }\n}\nimpl<'a> PercentDecode<'a> {\n    #[cfg(feature = \"alloc\")]\n    fn if_any(&self) -> Option<Vec<u8>> {\n        let mut bytes_iter = self.bytes.clone();\n        while bytes_iter.any(|&b| b == b'%') {\n            if let Some(decoded_byte) = after_percent_sign(&mut bytes_iter) {\n                let initial_bytes = self.bytes.as_slice();\n                let unchanged_bytes_len = initial_bytes.len() - bytes_iter.len() - 3;\n                let mut decoded = initial_bytes[..unchanged_bytes_len].to_owned();\n                decoded.push(decoded_byte);\n                decoded.extend(PercentDecode { bytes: bytes_iter });\n                return Some(decoded);\n            }\n        }\n        None\n    }\n    #[cfg(feature = \"alloc\")]\n    pub fn decode_utf8(self) -> Result<Cow<'a, str>, str::Utf8Error> {}\n    #[cfg(feature = \"alloc\")]\n    pub fn decode_utf8_lossy(self) -> Cow<'a, str> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n281 fn from(iter: PercentDecode<'a>) -> Self {\n282     match iter.if_any() {\n283         Some(vec) => Cow::Owned(vec),\n284         None => Cow::Borrowed(iter.bytes.as_slice()),\n285     }\n286 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}