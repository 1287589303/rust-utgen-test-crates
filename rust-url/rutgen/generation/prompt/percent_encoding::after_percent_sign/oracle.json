{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// percent_encoding/src/lib.rs\n// crate name is percent_encoding\n#[cfg(feature = \"alloc\")]\nuse alloc::{\n    borrow::{Cow, ToOwned},\n    string::String, vec::Vec,\n};\nuse core::{fmt, slice, str};\npub use self::ascii_set::{AsciiSet, CONTROLS, NON_ALPHANUMERIC};\nfn after_percent_sign(iter: &mut slice::Iter<'_, u8>) -> Option<u8> {\n    let mut cloned_iter = iter.clone();\n    let h = char::from(*cloned_iter.next()?).to_digit(16)?;\n    let l = char::from(*cloned_iter.next()?).to_digit(16)?;\n    *iter = cloned_iter;\n    Some(h as u8 * 0x10 + l as u8)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n252 fn after_percent_sign(iter: &mut slice::Iter<'_, u8>) -> Option<u8> {\n253     let mut cloned_iter = iter.clone();\n254     let h = char::from(*cloned_iter.next()?).to_digit(16)?;\n255     let l = char::from(*cloned_iter.next()?).to_digit(16)?;\n256     *iter = cloned_iter;\n257     Some(h as u8 * 0x10 + l as u8)\n258 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}