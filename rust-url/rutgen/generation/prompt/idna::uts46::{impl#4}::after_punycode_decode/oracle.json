{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\npub struct Uts46 {\n    data: idna_adapter::Adapter,\n}\nimpl Uts46 {\n    #[cfg(feature = \"compiled_data\")]\n    pub const fn new() -> Self {\n        Self {\n            data: idna_adapter::Adapter::new(),\n        }\n    }\n    pub fn to_ascii<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        dns_length: DnsLength,\n    ) -> Result<Cow<'a, str>, crate::Errors> {}\n    pub fn to_unicode<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {}\n    pub fn to_user_interface<'a, OutputUnicode: FnMut(&[char], &[char], bool) -> bool>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        output_as_unicode: OutputUnicode,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {}\n    #[allow(clippy::too_many_arguments)]\n    pub fn process<\n        W: Write + ?Sized,\n        OutputUnicode: FnMut(&[char], &[char], bool) -> bool,\n    >(\n        &self,\n        domain_name: &[u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        error_policy: ErrorPolicy,\n        mut output_as_unicode: OutputUnicode,\n        sink: &mut W,\n        ascii_sink: Option<&mut W>,\n    ) -> Result<ProcessingSuccess, ProcessingError> {}\n    #[inline(always)]\n    fn process_inner<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n    ) -> (usize, bool, bool) {}\n    #[allow(clippy::too_many_arguments)]\n    #[inline(never)]\n    fn process_innermost<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n        tail: &'a [u8],\n    ) -> (usize, bool, bool) {}\n    #[inline(never)]\n    fn after_punycode_decode(\n        &self,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        current_label_start: usize,\n        label_buffer: &[char],\n        deny_list_deny_dot: u128,\n        fail_fast: bool,\n        had_errors: &mut bool,\n    ) -> bool {\n        for c in self\n            .data\n            .normalize_validate(label_buffer.iter().copied())\n            .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))\n        {\n            if c == '\\u{FFFD}' {\n                if fail_fast {\n                    return true;\n                }\n                *had_errors = true;\n            }\n            domain_buffer.push(c);\n        }\n        let normalized = &mut domain_buffer[current_label_start..];\n        if let Err(()) = normalized\n            .iter_mut()\n            .zip(label_buffer.iter())\n            .try_for_each(|(norm_c, decoded_c)| {\n                if *norm_c == *decoded_c {\n                    Ok(())\n                } else {\n                    *norm_c = '\\u{FFFD}';\n                    Err(())\n                }\n            })\n        {\n            if fail_fast {\n                return true;\n            }\n            *had_errors = true;\n        }\n        false\n    }\n    #[inline(never)]\n    fn check_label(\n        &self,\n        hyphens: Hyphens,\n        mut_label: &mut [char],\n        fail_fast: bool,\n        had_errors: &mut bool,\n        first_needs_combining_mark_check: bool,\n        needs_contextj_check: bool,\n    ) -> bool {}\n    #[inline(always)]\n    fn has_appropriately_joining_char<I: Iterator<Item = char>>(\n        &self,\n        iter: I,\n        required_mask: JoiningTypeMask,\n    ) -> bool {}\n    #[inline(always)]\n    fn is_bidi(&self, buffer: &[char]) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1479 fn after_punycode_decode(\n1480     &self,\n1481     domain_buffer: &mut SmallVec<[char; 253]>,\n1482     current_label_start: usize,\n1483     label_buffer: &[char],\n1484     deny_list_deny_dot: u128,\n1485     fail_fast: bool,\n1486     had_errors: &mut bool,\n1487 ) -> bool {\n1488     for c in self\n1489         .data\n1490         .normalize_validate(label_buffer.iter().copied())\n1491         .map(|c| apply_ascii_deny_list_to_lower_cased_unicode(c, deny_list_deny_dot))\n1492     {\n1493         if c == '\\u{FFFD}' {\n1494             if fail_fast {\n1495                 return true;\n1496             }\n1497             *had_errors = true;\n1498         }\n1499         domain_buffer.push(c);\n1500     }\n1501     let normalized = &mut domain_buffer[current_label_start..];\n1502     if let Err(()) =\n1503         normalized\n1504             .iter_mut()\n1505             .zip(label_buffer.iter())\n1506             .try_for_each(|(norm_c, decoded_c)| {\n1507                 if *norm_c == *decoded_c {\n1508                     Ok(())\n1509                 } else {\n1510                     // Mark the first difference\n1511                     *norm_c = '\\u{FFFD}';\n1512                     Err(())\n1513                 }\n1514             })\n1515     {\n1516         if fail_fast {\n1517             return true;\n1518         }\n1519         *had_errors = true;\n1520     }\n1521     false\n1522 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}