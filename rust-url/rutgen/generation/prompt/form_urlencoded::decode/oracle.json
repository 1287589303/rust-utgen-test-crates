{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// form_urlencoded/src/lib.rs\n// crate name is form_urlencoded\npub type EncodingOverride<'a> = Option<&'a dyn Fn(&str) -> Cow<'_, [u8]>>;\nuse alloc::borrow::{Borrow, Cow, ToOwned};\nuse alloc::string::String;\nuse core::str;\nuse percent_encoding::{percent_decode, percent_encode_byte};\nfn decode(input: &[u8]) -> Cow<'_, str> {\n    let replaced = replace_plus(input);\n    decode_utf8_lossy(\n        match percent_decode(&replaced).into() {\n            Cow::Owned(vec) => Cow::Owned(vec),\n            Cow::Borrowed(_) => replaced,\n        },\n    )\n}\nfn replace_plus(input: &[u8]) -> Cow<'_, [u8]> {\n    match input.iter().position(|&b| b == b'+') {\n        None => Cow::Borrowed(input),\n        Some(first_position) => {\n            let mut replaced = input.to_owned();\n            replaced[first_position] = b' ';\n            for byte in &mut replaced[first_position + 1..] {\n                if *byte == b'+' {\n                    *byte = b' ';\n                }\n            }\n            Cow::Owned(replaced)\n        }\n    }\n}\n#[allow(ambiguous_wide_pointer_comparisons)]\npub(crate) fn decode_utf8_lossy(input: Cow<'_, [u8]>) -> Cow<'_, str> {\n    match input {\n        Cow::Borrowed(bytes) => String::from_utf8_lossy(bytes),\n        Cow::Owned(bytes) => {\n            match String::from_utf8_lossy(&bytes) {\n                Cow::Borrowed(utf8) => {\n                    let raw_utf8: *const [u8] = utf8.as_bytes();\n                    debug_assert!(raw_utf8 == &* bytes as * const [u8]);\n                    Cow::Owned(unsafe { String::from_utf8_unchecked(bytes) })\n                }\n                Cow::Owned(s) => Cow::Owned(s),\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n70 fn decode(input: &[u8]) -> Cow<'_, str> {\n71     let replaced = replace_plus(input);\n72     decode_utf8_lossy(match percent_decode(&replaced).into() {\n73         Cow::Owned(vec) => Cow::Owned(vec),\n74         Cow::Borrowed(_) => replaced,\n75     })\n76 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}