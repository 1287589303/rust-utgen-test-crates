{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// percent_encoding/src/lib.rs\n// crate name is percent_encoding\n#[cfg(feature = \"alloc\")]\nuse alloc::{\n    borrow::{Cow, ToOwned},\n    string::String, vec::Vec,\n};\nuse core::{fmt, slice, str};\npub use self::ascii_set::{AsciiSet, CONTROLS, NON_ALPHANUMERIC};\n#[derive(Clone, Debug)]\npub struct PercentDecode<'a> {\n    bytes: slice::Iter<'a, u8>,\n}\nimpl<'a> PercentDecode<'a> {\n    #[cfg(feature = \"alloc\")]\n    fn if_any(&self) -> Option<Vec<u8>> {}\n    #[cfg(feature = \"alloc\")]\n    pub fn decode_utf8(self) -> Result<Cow<'a, str>, str::Utf8Error> {\n        match self.clone().into() {\n            Cow::Borrowed(bytes) => {\n                match str::from_utf8(bytes) {\n                    Ok(s) => Ok(s.into()),\n                    Err(e) => Err(e),\n                }\n            }\n            Cow::Owned(bytes) => {\n                match String::from_utf8(bytes) {\n                    Ok(s) => Ok(s.into()),\n                    Err(e) => Err(e.utf8_error()),\n                }\n            }\n        }\n    }\n    #[cfg(feature = \"alloc\")]\n    pub fn decode_utf8_lossy(self) -> Cow<'a, str> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Decode the result of percent-decoding as UTF-8.\n///\n/// This is return `Err` when the percent-decoded bytes are not well-formed in UTF-8.\n312 pub fn decode_utf8(self) -> Result<Cow<'a, str>, str::Utf8Error> {\n313     match self.clone().into() {\n314         Cow::Borrowed(bytes) => match str::from_utf8(bytes) {\n315             Ok(s) => Ok(s.into()),\n316             Err(e) => Err(e),\n317         },\n318         Cow::Owned(bytes) => match String::from_utf8(bytes) {\n319             Ok(s) => Ok(s.into()),\n320             Err(e) => Err(e.utf8_error()),\n321         },\n322     }\n323 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}