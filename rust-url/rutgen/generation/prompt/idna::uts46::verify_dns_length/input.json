{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\npub fn verify_dns_length(domain_name: &str, allow_trailing_dot: bool) -> bool {\n    let bytes = domain_name.as_bytes();\n    debug_assert!(bytes.is_ascii());\n    let domain_name_without_trailing_dot = if let Some(without) = bytes\n        .strip_suffix(b\".\")\n    {\n        if !allow_trailing_dot {\n            return false;\n        }\n        without\n    } else {\n        bytes\n    };\n    if domain_name_without_trailing_dot.len() > 253 {\n        return false;\n    }\n    for label in domain_name_without_trailing_dot.split(|b| *b == b'.') {\n        if label.is_empty() {\n            return false;\n        }\n        if label.len() > 63 {\n            return false;\n        }\n    }\n    true\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Performs the _VerifyDNSLength_ check on the output of the _ToASCII_ operation.\n///\n/// If the second argument is `false`, the trailing root label dot is allowed.\n///\n/// # Panics\n///\n/// Panics in debug mode if the argument isn't ASCII.\n463 pub fn verify_dns_length(domain_name: &str, allow_trailing_dot: bool) -> bool {\n464     let bytes = domain_name.as_bytes();\n465     debug_assert!(bytes.is_ascii());\n466     let domain_name_without_trailing_dot = if let Some(without) = bytes.strip_suffix(b\".\") {\n467         if !allow_trailing_dot {\n468             return false;\n469         }\n470         without\n471     } else {\n472         bytes\n473     };\n474     if domain_name_without_trailing_dot.len() > 253 {\n475         return false;\n476     }\n477     for label in domain_name_without_trailing_dot.split(|b| *b == b'.') {\n478         if label.is_empty() {\n479             return false;\n480         }\n481         if label.len() > 63 {\n482             return false;\n483         }\n484     }\n485     true\n486 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}