{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// form_urlencoded/src/lib.rs\n// crate name is form_urlencoded\npub type EncodingOverride<'a> = Option<&'a dyn Fn(&str) -> Cow<'_, [u8]>>;\nuse alloc::borrow::{Borrow, Cow, ToOwned};\nuse alloc::string::String;\nuse core::str;\nuse percent_encoding::{percent_decode, percent_encode_byte};\npub trait Target {\n    type Finished;\n    fn as_mut_string(&mut self) -> &mut String;\n    fn finish(self) -> Self::Finished;\n}\npub struct Serializer<'a, T: Target> {\n    target: Option<T>,\n    start_position: usize,\n    encoding: EncodingOverride<'a>,\n}\nimpl<'a, T: Target> Serializer<'a, T> {\n    pub fn new(target: T) -> Self {\n        Self::for_suffix(target, 0)\n    }\n    pub fn for_suffix(mut target: T, start_position: usize) -> Self {\n        if target.as_mut_string().len() < start_position {\n            panic!(\n                \"invalid length {} for target of length {}\", start_position, target\n                .as_mut_string().len()\n            );\n        }\n        Serializer {\n            target: Some(target),\n            start_position,\n            encoding: None,\n        }\n    }\n    pub fn clear(&mut self) -> &mut Self {\n        string(&mut self.target).truncate(self.start_position);\n        self\n    }\n    pub fn encoding_override(&mut self, new: EncodingOverride<'a>) -> &mut Self {\n        self.encoding = new;\n        self\n    }\n    pub fn append_pair(&mut self, name: &str, value: &str) -> &mut Self {\n        append_pair(\n            string(&mut self.target),\n            self.start_position,\n            self.encoding,\n            name,\n            value,\n        );\n        self\n    }\n    pub fn append_key_only(&mut self, name: &str) -> &mut Self {\n        append_key_only(\n            string(&mut self.target),\n            self.start_position,\n            self.encoding,\n            name,\n        );\n        self\n    }\n    pub fn extend_pairs<I, K, V>(&mut self, iter: I) -> &mut Self\n    where\n        I: IntoIterator,\n        I::Item: Borrow<(K, V)>,\n        K: AsRef<str>,\n        V: AsRef<str>,\n    {\n        {\n            let string = string(&mut self.target);\n            for pair in iter {\n                let (k, v) = pair.borrow();\n                append_pair(\n                    string,\n                    self.start_position,\n                    self.encoding,\n                    k.as_ref(),\n                    v.as_ref(),\n                );\n            }\n        }\n        self\n    }\n    pub fn extend_keys_only<I, K>(&mut self, iter: I) -> &mut Self\n    where\n        I: IntoIterator,\n        I::Item: Borrow<K>,\n        K: AsRef<str>,\n    {\n        {\n            let string = string(&mut self.target);\n            for key in iter {\n                let k = key.borrow().as_ref();\n                append_key_only(string, self.start_position, self.encoding, k);\n            }\n        }\n        self\n    }\n    pub fn finish(&mut self) -> T::Finished {\n        self.target\n            .take()\n            .expect(\"url::form_urlencoded::Serializer double finish\")\n            .finish()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// If this serializer was constructed with a string, take and return that string.\n///\n/// ```rust\n/// use form_urlencoded;\n/// let encoded: String = form_urlencoded::Serializer::new(String::new())\n///     .append_pair(\"foo\", \"bar & baz\")\n///     .append_pair(\"saison\", \"Été+hiver\")\n///     .finish();\n/// assert_eq!(encoded, \"foo=bar+%26+baz&saison=%C3%89t%C3%A9%2Bhiver\");\n/// ```\n///\n/// Panics if called more than once.\n344 pub fn finish(&mut self) -> T::Finished {\n345     self.target\n346         .take()\n347         .expect(\"url::form_urlencoded::Serializer double finish\")\n348         .finish()\n349 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}