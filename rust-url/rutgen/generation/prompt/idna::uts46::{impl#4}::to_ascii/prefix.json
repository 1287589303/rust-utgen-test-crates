{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\npub struct Uts46 {\n    data: idna_adapter::Adapter,\n}\n#[derive(Default, Debug)]\n#[non_exhaustive]\npub struct Errors {}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[repr(transparent)]\npub struct AsciiDenyList {\n    bits: u128,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[non_exhaustive]\npub enum ErrorPolicy {\n    /// Return as early as possible without producing output in case of error.\n    FailFast,\n    /// In case of error, mark errors with the REPLACEMENT CHARACTER. (The output\n    /// containing REPLACEMENT CHARACTERs may be show to the user to illustrate\n    /// what was wrong but must not be used for naming in a network protocol.)\n    MarkErrors,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[non_exhaustive]\npub enum DnsLength {\n    /// _VerifyDNSLength=false_. (Possibly relevant for allowing non-DNS naming systems.)\n    Ignore,\n    /// _VerifyDNSLength=true_ with the exception that the trailing root label dot is\n    /// allowed.\n    VerifyAllowRootDot,\n    /// _VerifyDNSLength=true_. (The trailing root label dot is not allowed.)\n    Verify,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[non_exhaustive]\npub enum Hyphens {\n    /// _CheckHyphens=false_: Do not place positional restrictions on hyphens.\n    ///\n    /// This mode is used by the WHATWG URL Standard for normal User Agent processing\n    /// (i.e. not conformance checking).\n    Allow,\n    /// Prohibit hyphens in the first and last position in the label but allow in\n    /// the third and fourth position.\n    ///\n    /// Note that this mode rejects real-world names, including some GitHub user pages.\n    CheckFirstLast,\n    /// _CheckHyphens=true_: Prohibit hyphens in the first, third, fourth,\n    /// and last position in the label.\n    ///\n    /// Note that this mode rejects real-world names, including YouTube CDN nodes\n    /// and some GitHub user pages.\n    Check,\n}\n#[derive(PartialEq, Eq, Copy, Clone, Debug)]\npub enum ProcessingError {\n    /// There was a validity error according to the chosen options.\n    ///\n    /// In case of `Operation::ToAscii`, there is no output. Otherwise, output was written to the\n    /// sink and the output contains at least one U+FFFD REPLACEMENT CHARACTER to denote an error.\n    ValidityError,\n    /// The sink emitted [`core::fmt::Error`]. The partial output written to the sink must not\n    /// be used.\n    SinkError,\n}\n#[derive(PartialEq, Eq, Copy, Clone, Debug)]\npub enum ProcessingSuccess {\n    /// There were no errors. The caller must consider the input to be the output.\n    ///\n    /// This asserts that the input can be safely passed to [`core::str::from_utf8_unchecked`].\n    ///\n    /// (Distinct from `WroteToSink` in order to allow `Cow` behavior to be implemented on top of\n    /// [`Uts46::process`].)\n    Passthrough,\n    /// There were no errors. The caller must consider what was written to the sink to be the output.\n    ///\n    /// (Distinct from `Passthrough` in order to allow `Cow` behavior to be implemented on top of\n    /// [`Uts46::process`].)\n    WroteToSink,\n}\nimpl Uts46 {\n    #[cfg(feature = \"compiled_data\")]\n    pub const fn new() -> Self {\n        Self {\n            data: idna_adapter::Adapter::new(),\n        }\n    }\n    pub fn to_ascii<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        dns_length: DnsLength,\n    ) -> Result<Cow<'a, str>, crate::Errors> {\n        let mut s = String::new();\n        match self\n            .process(\n                domain_name,\n                ascii_deny_list,\n                hyphens,\n                ErrorPolicy::FailFast,\n                |_, _, _| false,\n                &mut s,\n                None,\n            )\n        {\n            Ok(ProcessingSuccess::Passthrough) => {\n                let cow = Cow::Borrowed(unsafe {\n                    core::str::from_utf8_unchecked(domain_name)\n                });\n                if dns_length != DnsLength::Ignore\n                    && !verify_dns_length(\n                        &cow,\n                        dns_length == DnsLength::VerifyAllowRootDot,\n                    )\n                {\n                    Err(crate::Errors::default())\n                } else {\n                    Ok(cow)\n                }\n            }\n            Ok(ProcessingSuccess::WroteToSink) => {\n                let cow: Cow<'_, str> = Cow::Owned(s);\n                if dns_length != DnsLength::Ignore\n                    && !verify_dns_length(\n                        &cow,\n                        dns_length == DnsLength::VerifyAllowRootDot,\n                    )\n                {\n                    Err(crate::Errors::default())\n                } else {\n                    Ok(cow)\n                }\n            }\n            Err(ProcessingError::ValidityError) => Err(crate::Errors::default()),\n            Err(ProcessingError::SinkError) => unreachable!(),\n        }\n    }\n    pub fn to_unicode<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {}\n    pub fn to_user_interface<'a, OutputUnicode: FnMut(&[char], &[char], bool) -> bool>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        output_as_unicode: OutputUnicode,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {}\n    #[allow(clippy::too_many_arguments)]\n    pub fn process<\n        W: Write + ?Sized,\n        OutputUnicode: FnMut(&[char], &[char], bool) -> bool,\n    >(\n        &self,\n        domain_name: &[u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        error_policy: ErrorPolicy,\n        mut output_as_unicode: OutputUnicode,\n        sink: &mut W,\n        ascii_sink: Option<&mut W>,\n    ) -> Result<ProcessingSuccess, ProcessingError> {\n        let fail_fast = error_policy == ErrorPolicy::FailFast;\n        let mut domain_buffer = SmallVec::<[char; 253]>::new();\n        let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();\n        let (passthrough_up_to, is_bidi, had_errors) = self\n            .process_inner(\n                domain_name,\n                ascii_deny_list,\n                hyphens,\n                fail_fast,\n                &mut domain_buffer,\n                &mut already_punycode,\n            );\n        if passthrough_up_to == domain_name.len() {\n            debug_assert!(! had_errors);\n            return Ok(ProcessingSuccess::Passthrough);\n        }\n        if fail_fast && had_errors {\n            return Err(ProcessingError::ValidityError);\n        }\n        debug_assert_eq!(had_errors, domain_buffer.contains(&'\\u{FFFD}'));\n        let without_dot = if let Some(without_dot) = domain_buffer.strip_suffix(&['.']) {\n            without_dot\n        } else {\n            &domain_buffer[..]\n        };\n        let tld = without_dot.rsplit(|c| *c == '.').next().unwrap();\n        let mut had_unicode_output = false;\n        let mut seen_label = false;\n        let mut already_punycode_iter = already_punycode.iter();\n        let mut passthrough_up_to_extended = passthrough_up_to;\n        let mut flushed_prefix = false;\n        for label in domain_buffer.split(|c| *c == '.') {\n            let input_punycode = *already_punycode_iter.next().unwrap();\n            if seen_label {\n                if flushed_prefix {\n                    sink.write_char('.')?;\n                } else {\n                    debug_assert_eq!(domain_name[passthrough_up_to_extended], b'.');\n                    passthrough_up_to_extended += 1;\n                    if passthrough_up_to_extended == domain_name.len() {\n                        debug_assert!(! had_errors);\n                        return Ok(ProcessingSuccess::Passthrough);\n                    }\n                }\n            }\n            seen_label = true;\n            if let AlreadyAsciiLabel::MixedCaseAscii(mixed_case) = input_punycode {\n                if let Some(first_upper_case) = mixed_case\n                    .iter()\n                    .position(|c| c.is_ascii_uppercase())\n                {\n                    let (head, tail) = mixed_case.split_at(first_upper_case);\n                    let slice_to_write = if flushed_prefix {\n                        head\n                    } else {\n                        flushed_prefix = true;\n                        passthrough_up_to_extended += head.len();\n                        debug_assert_ne!(passthrough_up_to_extended, domain_name.len());\n                        &domain_name[..passthrough_up_to_extended]\n                    };\n                    sink.write_str(unsafe {\n                        core::str::from_utf8_unchecked(slice_to_write)\n                    })?;\n                    for c in tail.iter() {\n                        sink.write_char(char::from(c.to_ascii_lowercase()))?;\n                    }\n                } else if flushed_prefix {\n                    sink.write_str(unsafe {\n                        core::str::from_utf8_unchecked(mixed_case)\n                    })?;\n                } else {\n                    passthrough_up_to_extended += mixed_case.len();\n                    if passthrough_up_to_extended == domain_name.len() {\n                        debug_assert!(! had_errors);\n                        return Ok(ProcessingSuccess::Passthrough);\n                    }\n                }\n                continue;\n            }\n            let potentially_punycode = if fail_fast {\n                debug_assert!(\n                    classify_for_punycode(label) != PunycodeClassification::Error\n                );\n                !is_ascii(label)\n            } else {\n                classify_for_punycode(label) == PunycodeClassification::Unicode\n            };\n            let passthrough = if potentially_punycode {\n                let unicode = output_as_unicode(label, tld, is_bidi);\n                had_unicode_output |= unicode;\n                unicode\n            } else {\n                true\n            };\n            if passthrough {\n                if !flushed_prefix {\n                    flushed_prefix = true;\n                    sink.write_str(unsafe {\n                        core::str::from_utf8_unchecked(\n                            &domain_name[..passthrough_up_to_extended],\n                        )\n                    })?;\n                }\n                for c in label.iter().copied() {\n                    sink.write_char(c)?;\n                }\n            } else if let AlreadyAsciiLabel::MixedCasePunycode(mixed_case) = input_punycode {\n                if let Some(first_upper_case) = mixed_case\n                    .iter()\n                    .position(|c| c.is_ascii_uppercase())\n                {\n                    let (head, tail) = mixed_case.split_at(first_upper_case);\n                    let slice_to_write = if flushed_prefix {\n                        head\n                    } else {\n                        flushed_prefix = true;\n                        passthrough_up_to_extended += head.len();\n                        debug_assert_ne!(passthrough_up_to_extended, domain_name.len());\n                        &domain_name[..passthrough_up_to_extended]\n                    };\n                    sink.write_str(unsafe {\n                        core::str::from_utf8_unchecked(slice_to_write)\n                    })?;\n                    for c in tail.iter() {\n                        sink.write_char(char::from(c.to_ascii_lowercase()))?;\n                    }\n                } else if flushed_prefix {\n                    sink.write_str(unsafe {\n                        core::str::from_utf8_unchecked(mixed_case)\n                    })?;\n                } else {\n                    passthrough_up_to_extended += mixed_case.len();\n                    if passthrough_up_to_extended == domain_name.len() {\n                        debug_assert!(! had_errors);\n                        return Ok(ProcessingSuccess::Passthrough);\n                    }\n                }\n            } else {\n                if !flushed_prefix {\n                    flushed_prefix = true;\n                    sink.write_str(unsafe {\n                        core::str::from_utf8_unchecked(\n                            &domain_name[..passthrough_up_to_extended],\n                        )\n                    })?;\n                }\n                write_punycode_label(label, sink)?;\n            }\n        }\n        if had_errors {\n            return Err(ProcessingError::ValidityError);\n        }\n        if had_unicode_output {\n            if let Some(sink) = ascii_sink {\n                let mut seen_label = false;\n                let mut already_punycode_iter = already_punycode.iter();\n                let mut passthrough_up_to_extended = passthrough_up_to;\n                let mut flushed_prefix = false;\n                for label in domain_buffer.split(|c| *c == '.') {\n                    let input_punycode = *already_punycode_iter.next().unwrap();\n                    if seen_label {\n                        if flushed_prefix {\n                            sink.write_char('.')?;\n                        } else {\n                            debug_assert_eq!(\n                                domain_name[passthrough_up_to_extended], b'.'\n                            );\n                            passthrough_up_to_extended += 1;\n                        }\n                    }\n                    seen_label = true;\n                    if let AlreadyAsciiLabel::MixedCaseAscii(mixed_case) = input_punycode {\n                        if let Some(first_upper_case) = mixed_case\n                            .iter()\n                            .position(|c| c.is_ascii_uppercase())\n                        {\n                            let (head, tail) = mixed_case.split_at(first_upper_case);\n                            let slice_to_write = if flushed_prefix {\n                                head\n                            } else {\n                                flushed_prefix = true;\n                                passthrough_up_to_extended += head.len();\n                                debug_assert_ne!(\n                                    passthrough_up_to_extended, domain_name.len()\n                                );\n                                &domain_name[..passthrough_up_to_extended]\n                            };\n                            sink.write_str(unsafe {\n                                core::str::from_utf8_unchecked(slice_to_write)\n                            })?;\n                            for c in tail.iter() {\n                                sink.write_char(char::from(c.to_ascii_lowercase()))?;\n                            }\n                        } else if flushed_prefix {\n                            sink.write_str(unsafe {\n                                core::str::from_utf8_unchecked(mixed_case)\n                            })?;\n                        } else {\n                            passthrough_up_to_extended += mixed_case.len();\n                        }\n                        continue;\n                    }\n                    if is_ascii(label) {\n                        if !flushed_prefix {\n                            flushed_prefix = true;\n                            sink.write_str(unsafe {\n                                core::str::from_utf8_unchecked(\n                                    &domain_name[..passthrough_up_to_extended],\n                                )\n                            })?;\n                        }\n                        for c in label.iter().copied() {\n                            sink.write_char(c)?;\n                        }\n                    } else if let AlreadyAsciiLabel::MixedCasePunycode(mixed_case) = input_punycode {\n                        if let Some(first_upper_case) = mixed_case\n                            .iter()\n                            .position(|c| c.is_ascii_uppercase())\n                        {\n                            let (head, tail) = mixed_case.split_at(first_upper_case);\n                            let slice_to_write = if flushed_prefix {\n                                head\n                            } else {\n                                flushed_prefix = true;\n                                passthrough_up_to_extended += head.len();\n                                debug_assert_ne!(\n                                    passthrough_up_to_extended, domain_name.len()\n                                );\n                                &domain_name[..passthrough_up_to_extended]\n                            };\n                            sink.write_str(unsafe {\n                                core::str::from_utf8_unchecked(slice_to_write)\n                            })?;\n                            for c in tail.iter() {\n                                sink.write_char(char::from(c.to_ascii_lowercase()))?;\n                            }\n                        } else if flushed_prefix {\n                            sink.write_str(unsafe {\n                                core::str::from_utf8_unchecked(mixed_case)\n                            })?;\n                        } else {\n                            passthrough_up_to_extended += mixed_case.len();\n                        }\n                    } else {\n                        if !flushed_prefix {\n                            flushed_prefix = true;\n                            sink.write_str(unsafe {\n                                core::str::from_utf8_unchecked(\n                                    &domain_name[..passthrough_up_to_extended],\n                                )\n                            })?;\n                        }\n                        write_punycode_label(label, sink)?;\n                    }\n                }\n                if !flushed_prefix {\n                    sink.write_str(unsafe {\n                        core::str::from_utf8_unchecked(\n                            &domain_name[..passthrough_up_to_extended],\n                        )\n                    })?;\n                }\n            }\n        }\n        Ok(ProcessingSuccess::WroteToSink)\n    }\n    #[inline(always)]\n    fn process_inner<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n    ) -> (usize, bool, bool) {}\n    #[allow(clippy::too_many_arguments)]\n    #[inline(never)]\n    fn process_innermost<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n        tail: &'a [u8],\n    ) -> (usize, bool, bool) {}\n    #[inline(never)]\n    fn after_punycode_decode(\n        &self,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        current_label_start: usize,\n        label_buffer: &[char],\n        deny_list_deny_dot: u128,\n        fail_fast: bool,\n        had_errors: &mut bool,\n    ) -> bool {}\n    #[inline(never)]\n    fn check_label(\n        &self,\n        hyphens: Hyphens,\n        mut_label: &mut [char],\n        fail_fast: bool,\n        had_errors: &mut bool,\n        first_needs_combining_mark_check: bool,\n        needs_contextj_check: bool,\n    ) -> bool {}\n    #[inline(always)]\n    fn has_appropriately_joining_char<I: Iterator<Item = char>>(\n        &self,\n        iter: I,\n        required_mask: JoiningTypeMask,\n    ) -> bool {}\n    #[inline(always)]\n    fn is_bidi(&self, buffer: &[char]) -> bool {}\n}\npub fn verify_dns_length(domain_name: &str, allow_trailing_dot: bool) -> bool {\n    let bytes = domain_name.as_bytes();\n    debug_assert!(bytes.is_ascii());\n    let domain_name_without_trailing_dot = if let Some(without) = bytes\n        .strip_suffix(b\".\")\n    {\n        if !allow_trailing_dot {\n            return false;\n        }\n        without\n    } else {\n        bytes\n    };\n    if domain_name_without_trailing_dot.len() > 253 {\n        return false;\n    }\n    for label in domain_name_without_trailing_dot.split(|b| *b == b'.') {\n        if label.is_empty() {\n            return false;\n        }\n        if label.len() > 63 {\n            return false;\n        }\n    }\n    true\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Performs the [ToASCII](https://www.unicode.org/reports/tr46/#ToASCII) operation\n/// from UTS #46 with the options indicated.\n///\n/// # Arguments\n///\n/// * `domain_name` - The input domain name as UTF-8 bytes. (The UTF-8ness is checked by\n///   this method and input that is not well-formed UTF-8 is treated as an error. If you\n///   already have a `&str`, call `.as_bytes()` on it.)\n/// * `ascii_deny_list` - What ASCII deny list, if any, to apply. The UTS 46\n///   _UseSTD3ASCIIRules_ flag or the WHATWG URL Standard forbidden domain code point\n///   processing is handled via this argument. Most callers are probably the best off\n///   by using [`AsciiDenyList::URL`] here.\n/// * `hyphens` - The UTS 46 _CheckHyphens_ flag. Most callers are probably the best\n///   off by using [`Hyphens::Allow`] here.\n/// * `dns_length` - The UTS 46 _VerifyDNSLength_ flag.\n527 pub fn to_ascii<'a>(\n528     &self,\n529     domain_name: &'a [u8],\n530     ascii_deny_list: AsciiDenyList,\n531     hyphens: Hyphens,\n532     dns_length: DnsLength,\n533 ) -> Result<Cow<'a, str>, crate::Errors> {\n534     let mut s = String::new();\n535     match self.process(\n536         domain_name,\n537         ascii_deny_list,\n538         hyphens,\n539         ErrorPolicy::FailFast,\n540         |_, _, _| false,\n541         &mut s,\n542         None,\n543     ) {\n544         // SAFETY: `ProcessingSuccess::Passthrough` asserts that `domain_name` is ASCII.\n545         Ok(ProcessingSuccess::Passthrough) => {\n546             let cow = Cow::Borrowed(unsafe { core::str::from_utf8_unchecked(domain_name) });\n547             if dns_length != DnsLength::Ignore\n548                 && !verify_dns_length(&cow, dns_length == DnsLength::VerifyAllowRootDot)\n549             {\n550                 Err(crate::Errors::default())\n551             } else {\n552                 Ok(cow)\n553             }\n554         }\n555         Ok(ProcessingSuccess::WroteToSink) => {\n556             let cow: Cow<'_, str> = Cow::Owned(s);\n557             if dns_length != DnsLength::Ignore\n558                 && !verify_dns_length(&cow, dns_length == DnsLength::VerifyAllowRootDot)\n559             {\n560                 Err(crate::Errors::default())\n561             } else {\n562                 Ok(cow)\n563             }\n564         }\n565         Err(ProcessingError::ValidityError) => Err(crate::Errors::default()),\n566         Err(ProcessingError::SinkError) => unreachable!(),\n567     }\n568 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}