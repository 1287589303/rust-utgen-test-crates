{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\nfn find_comma_before_fragment(after_colon: &str) -> Option<(&str, &str)> {\n    for (i, byte) in after_colon.bytes().enumerate() {\n        if byte == b',' {\n            return Some((&after_colon[..i], &after_colon[i + 1..]));\n        }\n        if byte == b'#' {\n            break;\n        }\n    }\n    None\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n181 fn find_comma_before_fragment(after_colon: &str) -> Option<(&str, &str)> {\n182     for (i, byte) in after_colon.bytes().enumerate() {\n183         if byte == b',' {\n184             return Some((&after_colon[..i], &after_colon[i + 1..]));\n185         }\n186         if byte == b'#' {\n187             break;\n188         }\n189     }\n190     None\n191 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}