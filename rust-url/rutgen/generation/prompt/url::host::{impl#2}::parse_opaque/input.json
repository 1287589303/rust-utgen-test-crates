{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/host.rs\n// crate name is url\nuse crate::net::{Ipv4Addr, Ipv6Addr};\nuse alloc::borrow::Cow;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::fmt::{self, Formatter};\nuse percent_encoding::{percent_decode, utf8_percent_encode, CONTROLS};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nuse crate::parser::{ParseError, ParseResult};\n#[cfg_attr(feature = \"serde\", derive(Deserialize, Serialize))]\n#[derive(Clone, Debug, Eq, Ord, PartialOrd, Hash)]\npub enum Host<S = String> {\n    /// A DNS domain name, as '.' dot-separated labels.\n    /// Non-ASCII labels are encoded in punycode per IDNA if this is the host of\n    /// a special URL, or percent encoded for non-special URLs. Hosts for\n    /// non-special URLs are also called opaque hosts.\n    Domain(S),\n    /// An IPv4 address.\n    /// `Url::host_str` returns the serialization of this address,\n    /// as four decimal integers separated by `.` dots.\n    Ipv4(Ipv4Addr),\n    /// An IPv6 address.\n    /// `Url::host_str` returns the serialization of that address between `[` and `]` brackets,\n    /// in the format per [RFC 5952 *A Recommendation\n    /// for IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\n    /// lowercase hexadecimal with maximal `::` compression.\n    Ipv6(Ipv6Addr),\n}\nimpl Host<String> {\n    pub fn parse(input: &str) -> Result<Self, ParseError> {\n        if input.starts_with('[') {\n            if !input.ends_with(']') {\n                return Err(ParseError::InvalidIpv6Address);\n            }\n            return parse_ipv6addr(&input[1..input.len() - 1]).map(Host::Ipv6);\n        }\n        let domain: Cow<'_, [u8]> = percent_decode(input.as_bytes()).into();\n        let domain = Self::domain_to_ascii(&domain)?;\n        if domain.is_empty() {\n            return Err(ParseError::EmptyHost);\n        }\n        if ends_in_a_number(&domain) {\n            let address = parse_ipv4addr(&domain)?;\n            Ok(Host::Ipv4(address))\n        } else {\n            Ok(Host::Domain(domain.to_string()))\n        }\n    }\n    pub fn parse_opaque(input: &str) -> Result<Self, ParseError> {\n        if input.starts_with('[') {\n            if !input.ends_with(']') {\n                return Err(ParseError::InvalidIpv6Address);\n            }\n            return parse_ipv6addr(&input[1..input.len() - 1]).map(Host::Ipv6);\n        }\n        let is_invalid_host_char = |c| {\n            matches!(\n                c, '\\0' | '\\t' | '\\n' | '\\r' | ' ' | '#' | '/' | ':' | '<' | '>' | '?' |\n                '@' | '[' | '\\\\' | ']' | '^' | '|'\n            )\n        };\n        if input.find(is_invalid_host_char).is_some() {\n            Err(ParseError::InvalidDomainCharacter)\n        } else {\n            Ok(Host::Domain(utf8_percent_encode(input, CONTROLS).to_string()))\n        }\n    }\n    fn domain_to_ascii(domain: &[u8]) -> Result<Cow<'_, str>, ParseError> {}\n}\nfn parse_ipv6addr(input: &str) -> ParseResult<Ipv6Addr> {\n    let input = input.as_bytes();\n    let len = input.len();\n    let mut is_ip_v4 = false;\n    let mut pieces = [0, 0, 0, 0, 0, 0, 0, 0];\n    let mut piece_pointer = 0;\n    let mut compress_pointer = None;\n    let mut i = 0;\n    if len < 2 {\n        return Err(ParseError::InvalidIpv6Address);\n    }\n    if input[0] == b':' {\n        if input[1] != b':' {\n            return Err(ParseError::InvalidIpv6Address);\n        }\n        i = 2;\n        piece_pointer = 1;\n        compress_pointer = Some(1);\n    }\n    while i < len {\n        if piece_pointer == 8 {\n            return Err(ParseError::InvalidIpv6Address);\n        }\n        if input[i] == b':' {\n            if compress_pointer.is_some() {\n                return Err(ParseError::InvalidIpv6Address);\n            }\n            i += 1;\n            piece_pointer += 1;\n            compress_pointer = Some(piece_pointer);\n            continue;\n        }\n        let start = i;\n        let end = cmp::min(len, start + 4);\n        let mut value = 0u16;\n        while i < end {\n            match (input[i] as char).to_digit(16) {\n                Some(digit) => {\n                    value = value * 0x10 + digit as u16;\n                    i += 1;\n                }\n                None => break,\n            }\n        }\n        if i < len {\n            match input[i] {\n                b'.' => {\n                    if i == start {\n                        return Err(ParseError::InvalidIpv6Address);\n                    }\n                    i = start;\n                    if piece_pointer > 6 {\n                        return Err(ParseError::InvalidIpv6Address);\n                    }\n                    is_ip_v4 = true;\n                }\n                b':' => {\n                    i += 1;\n                    if i == len {\n                        return Err(ParseError::InvalidIpv6Address);\n                    }\n                }\n                _ => return Err(ParseError::InvalidIpv6Address),\n            }\n        }\n        if is_ip_v4 {\n            break;\n        }\n        pieces[piece_pointer] = value;\n        piece_pointer += 1;\n    }\n    if is_ip_v4 {\n        if piece_pointer > 6 {\n            return Err(ParseError::InvalidIpv6Address);\n        }\n        let mut numbers_seen = 0;\n        while i < len {\n            if numbers_seen > 0 {\n                if numbers_seen < 4 && (i < len && input[i] == b'.') {\n                    i += 1\n                } else {\n                    return Err(ParseError::InvalidIpv6Address);\n                }\n            }\n            let mut ipv4_piece = None;\n            while i < len {\n                let digit = match input[i] {\n                    c @ b'0'..=b'9' => c - b'0',\n                    _ => break,\n                };\n                match ipv4_piece {\n                    None => ipv4_piece = Some(digit as u16),\n                    Some(0) => return Err(ParseError::InvalidIpv6Address),\n                    Some(ref mut v) => {\n                        *v = *v * 10 + digit as u16;\n                        if *v > 255 {\n                            return Err(ParseError::InvalidIpv6Address);\n                        }\n                    }\n                }\n                i += 1;\n            }\n            pieces[piece_pointer] = if let Some(v) = ipv4_piece {\n                pieces[piece_pointer] * 0x100 + v\n            } else {\n                return Err(ParseError::InvalidIpv6Address);\n            };\n            numbers_seen += 1;\n            if numbers_seen == 2 || numbers_seen == 4 {\n                piece_pointer += 1;\n            }\n        }\n        if numbers_seen != 4 {\n            return Err(ParseError::InvalidIpv6Address);\n        }\n    }\n    if i < len {\n        return Err(ParseError::InvalidIpv6Address);\n    }\n    match compress_pointer {\n        Some(compress_pointer) => {\n            let mut swaps = piece_pointer - compress_pointer;\n            piece_pointer = 7;\n            while swaps > 0 {\n                pieces.swap(piece_pointer, compress_pointer + swaps - 1);\n                swaps -= 1;\n                piece_pointer -= 1;\n            }\n        }\n        _ => {\n            if piece_pointer != 8 {\n                return Err(ParseError::InvalidIpv6Address);\n            }\n        }\n    }\n    Ok(\n        Ipv6Addr::new(\n            pieces[0],\n            pieces[1],\n            pieces[2],\n            pieces[3],\n            pieces[4],\n            pieces[5],\n            pieces[6],\n            pieces[7],\n        ),\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n106 pub fn parse_opaque(input: &str) -> Result<Self, ParseError> {\n107     if input.starts_with('[') {\n108         if !input.ends_with(']') {\n109             return Err(ParseError::InvalidIpv6Address);\n110         }\n111         return parse_ipv6addr(&input[1..input.len() - 1]).map(Host::Ipv6);\n112     }\n113 \n114     let is_invalid_host_char = |c| {\n115         matches!(\n116             c,\n117             '\\0' | '\\t'\n118                 | '\\n'\n119                 | '\\r'\n120                 | ' '\n121                 | '#'\n122                 | '/'\n123                 | ':'\n124                 | '<'\n125                 | '>'\n126                 | '?'\n127                 | '@'\n128                 | '['\n129                 | '\\\\'\n130                 | ']'\n131                 | '^'\n132                 | '|'\n133         )\n134     };\n135 \n136     if input.find(is_invalid_host_char).is_some() {\n137         Err(ParseError::InvalidDomainCharacter)\n138     } else {\n139         Ok(Host::Domain(\n140             utf8_percent_encode(input, CONTROLS).to_string(),\n141         ))\n142     }\n143 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}