{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/lib.rs\n// crate name is url\npub use form_urlencoded;\nuse crate::host::HostInternal;\nuse crate::net::IpAddr;\n#[cfg(feature = \"std\")]\n#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\", target_os = \"hermit\"))]\nuse crate::net::{SocketAddr, ToSocketAddrs};\nuse crate::parser::{to_u32, Context, Parser, SchemeType, USERINFO};\nuse alloc::borrow::ToOwned;\nuse alloc::str;\nuse alloc::string::{String, ToString};\nuse core::borrow::Borrow;\nuse core::convert::TryFrom;\nuse core::fmt::Write;\nuse core::ops::{Range, RangeFrom, RangeTo};\nuse core::{cmp, fmt, hash, mem};\nuse percent_encoding::utf8_percent_encode;\n#[cfg(feature = \"std\")]\n#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\", target_os = \"hermit\"))]\nuse std::io;\n#[cfg(feature = \"std\")]\nuse std::path::{Path, PathBuf};\npub use crate::host::Host;\npub use crate::origin::{OpaqueOrigin, Origin};\npub use crate::parser::{ParseError, SyntaxViolation};\npub use crate::path_segments::PathSegmentsMut;\npub use crate::slicing::Position;\npub use form_urlencoded::EncodingOverride;\n#[derive(Copy, Clone)]\n#[must_use]\npub struct ParseOptions<'a> {\n    base_url: Option<&'a Url>,\n    encoding_override: EncodingOverride<'a>,\n    violation_fn: Option<&'a dyn Fn(SyntaxViolation)>,\n}\npub struct Parser<'a> {\n    pub serialization: String,\n    pub base_url: Option<&'a Url>,\n    pub query_encoding_override: EncodingOverride<'a>,\n    pub violation_fn: Option<&'a dyn Fn(SyntaxViolation)>,\n    pub context: Context,\n}\n#[derive(Clone)]\npub struct Url {\n    /// Syntax in pseudo-BNF:\n    ///\n    ///   url = scheme \":\" [ hierarchical | non-hierarchical ] [ \"?\" query ]? [ \"#\" fragment ]?\n    ///   non-hierarchical = non-hierarchical-path\n    ///   non-hierarchical-path = /* Does not start with \"/\" */\n    ///   hierarchical = authority? hierarchical-path\n    ///   authority = \"//\" userinfo? host [ \":\" port ]?\n    ///   userinfo = username [ \":\" password ]? \"@\"\n    ///   hierarchical-path = [ \"/\" path-segment ]+\n    serialization: String,\n    scheme_end: u32,\n    username_end: u32,\n    host_start: u32,\n    host_end: u32,\n    host: HostInternal,\n    port: Option<u16>,\n    path_start: u32,\n    query_start: Option<u32>,\n    fragment_start: Option<u32>,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\npub enum Context {\n    UrlParser,\n    Setter,\n    PathSegmentSetter,\n}\nimpl<'a> ParseOptions<'a> {\n    pub fn base_url(mut self, new: Option<&'a Url>) -> Self {\n        self.base_url = new;\n        self\n    }\n    pub fn encoding_override(mut self, new: EncodingOverride<'a>) -> Self {\n        self.encoding_override = new;\n        self\n    }\n    pub fn syntax_violation_callback(\n        mut self,\n        new: Option<&'a dyn Fn(SyntaxViolation)>,\n    ) -> Self {\n        self.violation_fn = new;\n        self\n    }\n    pub fn parse(self, input: &str) -> Result<Url, crate::ParseError> {\n        Parser {\n            serialization: String::with_capacity(input.len()),\n            base_url: self.base_url,\n            query_encoding_override: self.encoding_override,\n            violation_fn: self.violation_fn,\n            context: Context::UrlParser,\n        }\n            .parse_url(input)\n    }\n}\nimpl<'a> Parser<'a> {\n    fn log_violation(&self, v: SyntaxViolation) {}\n    fn log_violation_if(&self, v: SyntaxViolation, test: impl FnOnce() -> bool) {}\n    pub fn for_setter(serialization: String) -> Parser<'a> {}\n    pub fn parse_url(mut self, input: &str) -> ParseResult<Url> {\n        let input = Input::new_trim_c0_control_and_space(input, self.violation_fn);\n        if let Ok(remaining) = self.parse_scheme(input.clone()) {\n            return self.parse_with_scheme(remaining);\n        }\n        if let Some(base_url) = self.base_url {\n            if input.starts_with('#') {\n                self.fragment_only(base_url, input)\n            } else if base_url.cannot_be_a_base() {\n                Err(ParseError::RelativeUrlWithCannotBeABaseBase)\n            } else {\n                let scheme_type = SchemeType::from(base_url.scheme());\n                if scheme_type.is_file() {\n                    self.parse_file(input, scheme_type, Some(base_url))\n                } else {\n                    self.parse_relative(input, scheme_type, base_url)\n                }\n            }\n        } else {\n            Err(ParseError::RelativeUrlWithoutBase)\n        }\n    }\n    pub fn parse_scheme<'i>(&mut self, mut input: Input<'i>) -> Result<Input<'i>, ()> {}\n    fn parse_with_scheme(mut self, input: Input<'_>) -> ParseResult<Url> {}\n    fn parse_non_special(\n        mut self,\n        input: Input<'_>,\n        scheme_type: SchemeType,\n        scheme_end: u32,\n    ) -> ParseResult<Url> {}\n    fn parse_file(\n        mut self,\n        input: Input<'_>,\n        scheme_type: SchemeType,\n        base_file_url: Option<&Url>,\n    ) -> ParseResult<Url> {}\n    fn parse_relative(\n        mut self,\n        input: Input<'_>,\n        scheme_type: SchemeType,\n        base_url: &Url,\n    ) -> ParseResult<Url> {}\n    fn after_double_slash(\n        mut self,\n        input: Input<'_>,\n        scheme_type: SchemeType,\n        scheme_end: u32,\n    ) -> ParseResult<Url> {}\n    fn parse_userinfo<'i>(\n        &mut self,\n        mut input: Input<'i>,\n        scheme_type: SchemeType,\n    ) -> ParseResult<(u32, Input<'i>)> {}\n    fn parse_host_and_port<'i>(\n        &mut self,\n        input: Input<'i>,\n        scheme_end: u32,\n        scheme_type: SchemeType,\n    ) -> ParseResult<(u32, HostInternal, Option<u16>, Input<'i>)> {}\n    pub fn parse_host(\n        mut input: Input<'_>,\n        scheme_type: SchemeType,\n    ) -> ParseResult<(Host<String>, Input<'_>)> {}\n    fn get_file_host(input: Input<'_>) -> ParseResult<(Host<String>, Input<'_>)> {}\n    fn parse_file_host<'i>(\n        &mut self,\n        input: Input<'i>,\n    ) -> ParseResult<(bool, HostInternal, Input<'i>)> {}\n    pub fn file_host(input: Input) -> ParseResult<(bool, String, Input)> {}\n    pub fn parse_port<P>(\n        mut input: Input<'_>,\n        default_port: P,\n        context: Context,\n    ) -> ParseResult<(Option<u16>, Input<'_>)>\n    where\n        P: Fn() -> Option<u16>,\n    {}\n    pub fn parse_path_start<'i>(\n        &mut self,\n        scheme_type: SchemeType,\n        has_host: &mut bool,\n        input: Input<'i>,\n    ) -> Input<'i> {}\n    pub fn parse_path<'i>(\n        &mut self,\n        scheme_type: SchemeType,\n        has_host: &mut bool,\n        path_start: usize,\n        mut input: Input<'i>,\n    ) -> Input<'i> {}\n    fn last_slash_can_be_removed(serialization: &str, path_start: usize) -> bool {}\n    fn shorten_path(&mut self, scheme_type: SchemeType, path_start: usize) {}\n    fn pop_path(&mut self, scheme_type: SchemeType, path_start: usize) {}\n    pub fn parse_cannot_be_a_base_path<'i>(\n        &mut self,\n        mut input: Input<'i>,\n    ) -> Input<'i> {}\n    #[allow(clippy::too_many_arguments)]\n    fn with_query_and_fragment(\n        mut self,\n        scheme_type: SchemeType,\n        scheme_end: u32,\n        username_end: u32,\n        host_start: u32,\n        host_end: u32,\n        host: HostInternal,\n        port: Option<u16>,\n        mut path_start: u32,\n        remaining: Input<'_>,\n    ) -> ParseResult<Url> {}\n    fn parse_query_and_fragment(\n        &mut self,\n        scheme_type: SchemeType,\n        scheme_end: u32,\n        mut input: Input<'_>,\n    ) -> ParseResult<(Option<u32>, Option<u32>)> {}\n    pub fn parse_query<'i>(\n        &mut self,\n        scheme_type: SchemeType,\n        scheme_end: u32,\n        input: Input<'i>,\n    ) -> Option<Input<'i>> {}\n    fn fragment_only(\n        mut self,\n        base_url: &Url,\n        mut input: Input<'_>,\n    ) -> ParseResult<Url> {}\n    pub fn parse_fragment(&mut self, input: Input<'_>) {}\n    #[inline]\n    fn check_url_code_point(&self, c: char, input: &Input<'_>) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Parse an URL string with the configuration so far.\n305 pub fn parse(self, input: &str) -> Result<Url, crate::ParseError> {\n306     Parser {\n307         serialization: String::with_capacity(input.len()),\n308         base_url: self.base_url,\n309         query_encoding_override: self.encoding_override,\n310         violation_fn: self.violation_fn,\n311         context: Context::UrlParser,\n312     }\n313     .parse_url(input)\n314 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}