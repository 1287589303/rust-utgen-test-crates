{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/forgiving_base64.rs\n// crate name is data_url\nuse alloc::vec::Vec;\nuse core::fmt;\n#[rustfmt::skip]\nconst BASE64_DECODE_TABLE: [i8; 256] = [\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    62,\n    -1,\n    -1,\n    -1,\n    63,\n    52,\n    53,\n    54,\n    55,\n    56,\n    57,\n    58,\n    59,\n    60,\n    61,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n    45,\n    46,\n    47,\n    48,\n    49,\n    50,\n    51,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n];\npub struct Decoder<F, E>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    write_bytes: F,\n    bit_buffer: u32,\n    buffer_bit_length: u8,\n    padding_symbols: u8,\n}\n#[derive(Debug)]\npub struct InvalidBase64(InvalidBase64Details);\npub(crate) enum Impossible {}\n#[derive(Debug)]\npub enum DecodeError<E> {\n    InvalidBase64(InvalidBase64),\n    WriteError(E),\n}\nimpl<F, E> Decoder<F, E>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    pub fn new(write_bytes: F) -> Self {\n        Self {\n            write_bytes,\n            bit_buffer: 0,\n            buffer_bit_length: 0,\n            padding_symbols: 0,\n        }\n    }\n    pub fn feed(&mut self, input: &[u8]) -> Result<(), DecodeError<E>> {\n        for &byte in input.iter() {\n            let value = BASE64_DECODE_TABLE[byte as usize];\n            if value < 0 {\n                if matches!(byte, b' ' | b'\\t' | b'\\n' | b'\\r' | b'\\x0C') {\n                    continue;\n                }\n                if byte == b'=' {\n                    self.padding_symbols = self.padding_symbols.saturating_add(1);\n                    continue;\n                }\n                return Err(InvalidBase64Details::UnexpectedSymbol(byte).into());\n            }\n            if self.padding_symbols > 0 {\n                return Err(InvalidBase64Details::AlphabetSymbolAfterPadding.into());\n            }\n            self.bit_buffer <<= 6;\n            self.bit_buffer |= value as u32;\n            if self.buffer_bit_length < 18 {\n                self.buffer_bit_length += 6;\n            } else {\n                let byte_buffer = [\n                    (self.bit_buffer >> 16) as u8,\n                    (self.bit_buffer >> 8) as u8,\n                    self.bit_buffer as u8,\n                ];\n                (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;\n                self.buffer_bit_length = 0;\n            }\n        }\n        Ok(())\n    }\n    pub fn finish(mut self) -> Result<(), DecodeError<E>> {\n        match (self.buffer_bit_length, self.padding_symbols) {\n            (0, 0) => {}\n            (12, 2) | (12, 0) => {\n                let byte_buffer = [(self.bit_buffer >> 4) as u8];\n                (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;\n            }\n            (18, 1) | (18, 0) => {\n                let byte_buffer = [\n                    (self.bit_buffer >> 10) as u8,\n                    (self.bit_buffer >> 2) as u8,\n                ];\n                (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;\n            }\n            (6, _) => return Err(InvalidBase64Details::LoneAlphabetSymbol.into()),\n            _ => return Err(InvalidBase64Details::Padding.into()),\n        }\n        Ok(())\n    }\n}\npub fn decode_to_vec(input: &[u8]) -> Result<Vec<u8>, InvalidBase64> {\n    let mut v = Vec::new();\n    {\n        let mut decoder = Decoder::new(|bytes| {\n            v.extend_from_slice(bytes);\n            Ok(())\n        });\n        decoder.feed(input)?;\n        decoder.finish()?;\n    }\n    Ok(v)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// `input` is assumed to be in an ASCII-compatible encoding\n71 pub fn decode_to_vec(input: &[u8]) -> Result<Vec<u8>, InvalidBase64> {\n72     let mut v = Vec::new();\n73     {\n74         let mut decoder = Decoder::new(|bytes| {\n75             v.extend_from_slice(bytes);\n76             Ok(())\n77         });\n78         decoder.feed(input)?;\n79         decoder.finish()?;\n80     }\n81     Ok(v)\n82 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}