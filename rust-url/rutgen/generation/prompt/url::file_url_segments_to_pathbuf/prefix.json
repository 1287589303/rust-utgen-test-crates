{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/lib.rs\n// crate name is url\npub use form_urlencoded;\nuse crate::host::HostInternal;\nuse crate::net::IpAddr;\n#[cfg(feature = \"std\")]\n#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\", target_os = \"hermit\"))]\nuse crate::net::{SocketAddr, ToSocketAddrs};\nuse crate::parser::{to_u32, Context, Parser, SchemeType, USERINFO};\nuse alloc::borrow::ToOwned;\nuse alloc::str;\nuse alloc::string::{String, ToString};\nuse core::borrow::Borrow;\nuse core::convert::TryFrom;\nuse core::fmt::Write;\nuse core::ops::{Range, RangeFrom, RangeTo};\nuse core::{cmp, fmt, hash, mem};\nuse percent_encoding::utf8_percent_encode;\n#[cfg(feature = \"std\")]\n#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\", target_os = \"hermit\"))]\nuse std::io;\n#[cfg(feature = \"std\")]\nuse std::path::{Path, PathBuf};\npub use crate::host::Host;\npub use crate::origin::{OpaqueOrigin, Origin};\npub use crate::parser::{ParseError, SyntaxViolation};\npub use crate::path_segments::PathSegmentsMut;\npub use crate::slicing::Position;\npub use form_urlencoded::EncodingOverride;\n#[cfg(all(feature = \"std\", windows))]\nfn file_url_segments_to_pathbuf(\n    estimated_capacity: usize,\n    host: Option<&str>,\n    segments: str::Split<char>,\n) -> Result<PathBuf, ()> {\n    file_url_segments_to_pathbuf_windows(estimated_capacity, host, segments)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n3051 fn file_url_segments_to_pathbuf(\n3052     estimated_capacity: usize,\n3053     host: Option<&str>,\n3054     segments: str::Split<'_, char>,\n3055 ) -> Result<PathBuf, ()> {\n3056     use alloc::vec::Vec;\n3057     use percent_encoding::percent_decode;\n3058     #[cfg(not(target_os = \"wasi\"))]\n3059     use std::ffi::OsStr;\n3060     #[cfg(target_os = \"hermit\")]\n3061     use std::os::hermit::ffi::OsStrExt;\n3062     #[cfg(any(unix, target_os = \"redox\"))]\n3063     use std::os::unix::prelude::OsStrExt;\n3064 \n3065     if host.is_some() {\n3066         return Err(());\n3067     }\n3068 \n3069     let mut bytes = Vec::new();\n3070     bytes.try_reserve(estimated_capacity).map_err(|_| ())?;\n3071     if cfg!(target_os = \"redox\") {\n3072         bytes.extend(b\"file:\");\n3073     }\n3074 \n3075     for segment in segments {\n3076         bytes.push(b'/');\n3077         bytes.extend(percent_decode(segment.as_bytes()));\n3078     }\n3079 \n3080     // A windows drive letter must end with a slash.\n3081     if bytes.len() > 2\n3082         && bytes[bytes.len() - 2].is_ascii_alphabetic()\n3083         && matches!(bytes[bytes.len() - 1], b':' | b'|')\n3084     {\n3085         bytes.push(b'/');\n3086     }\n3087 \n3088     #[cfg(not(target_os = \"wasi\"))]\n3089     let path = PathBuf::from(OsStr::from_bytes(&bytes));\n3090     #[cfg(target_os = \"wasi\")]\n3091     let path = String::from_utf8(bytes)\n3092         .map(|path| PathBuf::from(path))\n3093         .map_err(|_| ())?;\n3094 \n3095     debug_assert!(\n3096         path.is_absolute(),\n3097         \"to_file_path() failed to produce an absolute Path\"\n3098     );\n3099 \n3100     Ok(path)\n3101 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}