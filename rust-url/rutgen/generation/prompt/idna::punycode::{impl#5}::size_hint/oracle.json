{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/punycode.rs\n// crate name is idna\nuse alloc::{string::String, vec::Vec};\nuse core::char;\nuse core::fmt::Write;\nuse core::marker::PhantomData;\nconst BASE: u32 = 36;\nconst T_MIN: u32 = 1;\nconst T_MAX: u32 = 26;\nconst SKEW: u32 = 38;\nconst DAMP: u32 = 700;\nconst INITIAL_BIAS: u32 = 72;\nconst INITIAL_N: u32 = 0x80;\npub(crate) trait PunycodeCodeUnit {\n    fn is_delimiter(&self) -> bool;\n    fn is_ascii(&self) -> bool;\n    fn digit(&self) -> Option<u32>;\n    fn char(&self) -> char;\n    fn char_ascii_lower_case(&self) -> char;\n}\npub(crate) trait PunycodeCaller {\n    const EXTERNAL_CALLER: bool;\n}\npub(crate) struct Decode<'a, T, C>\nwhere\n    T: PunycodeCodeUnit + Copy,\n    C: PunycodeCaller,\n{\n    base: core::slice::Iter<'a, T>,\n    pub(crate) insertions: &'a [(usize, char)],\n    inserted: usize,\n    position: usize,\n    len: usize,\n    phantom: PhantomData<C>,\n}\nimpl<T: PunycodeCodeUnit + Copy, C: PunycodeCaller> Iterator for Decode<'_, T, C> {\n    type Item = char;\n    fn next(&mut self) -> Option<Self::Item> {\n        loop {\n            match self.insertions.get(self.inserted) {\n                Some((pos, c)) if *pos == self.position => {\n                    self.inserted += 1;\n                    self.position += 1;\n                    return Some(*c);\n                }\n                _ => {}\n            }\n            if let Some(c) = self.base.next() {\n                self.position += 1;\n                return Some(\n                    if C::EXTERNAL_CALLER { c.char() } else { c.char_ascii_lower_case() },\n                );\n            } else if self.inserted >= self.insertions.len() {\n                return None;\n            }\n        }\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        let len = self.len - self.position;\n        (len, Some(len))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n306 fn size_hint(&self) -> (usize, Option<usize>) {\n307     let len = self.len - self.position;\n308     (len, Some(len))\n309 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}