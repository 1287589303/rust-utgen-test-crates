{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/slicing.rs\n// crate name is url\nuse core::ops::{Index, Range, RangeFrom, RangeFull, RangeTo};\nuse crate::Url;\n#[derive(Clone)]\npub struct Url {\n    /// Syntax in pseudo-BNF:\n    ///\n    ///   url = scheme \":\" [ hierarchical | non-hierarchical ] [ \"?\" query ]? [ \"#\" fragment ]?\n    ///   non-hierarchical = non-hierarchical-path\n    ///   non-hierarchical-path = /* Does not start with \"/\" */\n    ///   hierarchical = authority? hierarchical-path\n    ///   authority = \"//\" userinfo? host [ \":\" port ]?\n    ///   userinfo = username [ \":\" password ]? \"@\"\n    ///   hierarchical-path = [ \"/\" path-segment ]+\n    serialization: String,\n    scheme_end: u32,\n    username_end: u32,\n    host_start: u32,\n    host_end: u32,\n    host: HostInternal,\n    port: Option<u16>,\n    path_start: u32,\n    query_start: Option<u32>,\n    fragment_start: Option<u32>,\n}\n#[derive(Copy, Clone, Debug)]\npub enum Position {\n    BeforeScheme,\n    AfterScheme,\n    BeforeUsername,\n    AfterUsername,\n    BeforePassword,\n    AfterPassword,\n    BeforeHost,\n    AfterHost,\n    BeforePort,\n    AfterPort,\n    BeforePath,\n    AfterPath,\n    BeforeQuery,\n    AfterQuery,\n    BeforeFragment,\n    AfterFragment,\n}\n#[cfg_attr(feature = \"serde\", derive(Deserialize, Serialize))]\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub(crate) enum HostInternal {\n    None,\n    Domain,\n    Ipv4(Ipv4Addr),\n    Ipv6(Ipv6Addr),\n}\nimpl Url {\n    #[inline]\n    fn index(&self, position: Position) -> usize {\n        match position {\n            Position::BeforeScheme => 0,\n            Position::AfterScheme => self.scheme_end as usize,\n            Position::BeforeUsername => {\n                if self.has_authority() {\n                    self.scheme_end as usize + \"://\".len()\n                } else {\n                    debug_assert!(self.byte_at(self.scheme_end) == b':');\n                    debug_assert!(\n                        self.scheme_end + \":\".len() as u32 == self.username_end\n                    );\n                    self.scheme_end as usize + \":\".len()\n                }\n            }\n            Position::AfterUsername => self.username_end as usize,\n            Position::BeforePassword => {\n                if self.has_authority() && self.byte_at(self.username_end) == b':' {\n                    self.username_end as usize + \":\".len()\n                } else {\n                    debug_assert!(self.username_end == self.host_start);\n                    self.username_end as usize\n                }\n            }\n            Position::AfterPassword => {\n                if self.has_authority() && self.byte_at(self.username_end) == b':' {\n                    debug_assert!(\n                        self.byte_at(self.host_start - \"@\".len() as u32) == b'@'\n                    );\n                    self.host_start as usize - \"@\".len()\n                } else {\n                    debug_assert!(self.username_end == self.host_start);\n                    self.host_start as usize\n                }\n            }\n            Position::BeforeHost => self.host_start as usize,\n            Position::AfterHost => self.host_end as usize,\n            Position::BeforePort => {\n                if self.port.is_some() {\n                    debug_assert!(self.byte_at(self.host_end) == b':');\n                    self.host_end as usize + \":\".len()\n                } else {\n                    self.host_end as usize\n                }\n            }\n            Position::AfterPort => {\n                if let Some(port) = self.port {\n                    debug_assert!(self.byte_at(self.host_end) == b':');\n                    self.host_end as usize + \":\".len() + count_digits(port)\n                } else {\n                    self.host_end as usize\n                }\n            }\n            Position::BeforePath => self.path_start as usize,\n            Position::AfterPath => {\n                match (self.query_start, self.fragment_start) {\n                    (Some(q), _) => q as usize,\n                    (None, Some(f)) => f as usize,\n                    (None, None) => self.serialization.len(),\n                }\n            }\n            Position::BeforeQuery => {\n                match (self.query_start, self.fragment_start) {\n                    (Some(q), _) => {\n                        debug_assert!(self.byte_at(q) == b'?');\n                        q as usize + \"?\".len()\n                    }\n                    (None, Some(f)) => f as usize,\n                    (None, None) => self.serialization.len(),\n                }\n            }\n            Position::AfterQuery => {\n                match self.fragment_start {\n                    None => self.serialization.len(),\n                    Some(f) => f as usize,\n                }\n            }\n            Position::BeforeFragment => {\n                match self.fragment_start {\n                    Some(f) => {\n                        debug_assert!(self.byte_at(f) == b'#');\n                        f as usize + \"#\".len()\n                    }\n                    None => self.serialization.len(),\n                }\n            }\n            Position::AfterFragment => self.serialization.len(),\n        }\n    }\n}\nfn count_digits(n: u16) -> usize {\n    match n {\n        0..=9 => 1,\n        10..=99 => 2,\n        100..=999 => 3,\n        1000..=9999 => 4,\n        10000..=65535 => 5,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n126 fn index(&self, position: Position) -> usize {\n127     match position {\n128         Position::BeforeScheme => 0,\n129 \n130         Position::AfterScheme => self.scheme_end as usize,\n131 \n132         Position::BeforeUsername => {\n133             if self.has_authority() {\n134                 self.scheme_end as usize + \"://\".len()\n135             } else {\n136                 debug_assert!(self.byte_at(self.scheme_end) == b':');\n137                 debug_assert!(self.scheme_end + \":\".len() as u32 == self.username_end);\n138                 self.scheme_end as usize + \":\".len()\n139             }\n140         }\n141 \n142         Position::AfterUsername => self.username_end as usize,\n143 \n144         Position::BeforePassword => {\n145             if self.has_authority() && self.byte_at(self.username_end) == b':' {\n146                 self.username_end as usize + \":\".len()\n147             } else {\n148                 debug_assert!(self.username_end == self.host_start);\n149                 self.username_end as usize\n150             }\n151         }\n152 \n153         Position::AfterPassword => {\n154             if self.has_authority() && self.byte_at(self.username_end) == b':' {\n155                 debug_assert!(self.byte_at(self.host_start - \"@\".len() as u32) == b'@');\n156                 self.host_start as usize - \"@\".len()\n157             } else {\n158                 debug_assert!(self.username_end == self.host_start);\n159                 self.host_start as usize\n160             }\n161         }\n162 \n163         Position::BeforeHost => self.host_start as usize,\n164 \n165         Position::AfterHost => self.host_end as usize,\n166 \n167         Position::BeforePort => {\n168             if self.port.is_some() {\n169                 debug_assert!(self.byte_at(self.host_end) == b':');\n170                 self.host_end as usize + \":\".len()\n171             } else {\n172                 self.host_end as usize\n173             }\n174         }\n175 \n176         Position::AfterPort => {\n177             if let Some(port) = self.port {\n178                 debug_assert!(self.byte_at(self.host_end) == b':');\n179                 self.host_end as usize + \":\".len() + count_digits(port)\n180             } else {\n181                 self.host_end as usize\n182             }\n183         }\n184 \n185         Position::BeforePath => self.path_start as usize,\n186 \n187         Position::AfterPath => match (self.query_start, self.fragment_start) {\n188             (Some(q), _) => q as usize,\n189             (None, Some(f)) => f as usize,\n190             (None, None) => self.serialization.len(),\n191         },\n192 \n193         Position::BeforeQuery => match (self.query_start, self.fragment_start) {\n194             (Some(q), _) => {\n195                 debug_assert!(self.byte_at(q) == b'?');\n196                 q as usize + \"?\".len()\n197             }\n198             (None, Some(f)) => f as usize,\n199             (None, None) => self.serialization.len(),\n200         },\n201 \n202         Position::AfterQuery => match self.fragment_start {\n203             None => self.serialization.len(),\n204             Some(f) => f as usize,\n205         },\n206 \n207         Position::BeforeFragment => match self.fragment_start {\n208             Some(f) => {\n209                 debug_assert!(self.byte_at(f) == b'#');\n210                 f as usize + \"#\".len()\n211             }\n212             None => self.serialization.len(),\n213         },\n214 \n215         Position::AfterFragment => self.serialization.len(),\n216     }\n217 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}