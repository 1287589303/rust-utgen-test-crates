{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/lib.rs\n// crate name is url\npub use form_urlencoded;\nuse crate::host::HostInternal;\nuse crate::net::IpAddr;\n#[cfg(feature = \"std\")]\n#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\", target_os = \"hermit\"))]\nuse crate::net::{SocketAddr, ToSocketAddrs};\nuse crate::parser::{to_u32, Context, Parser, SchemeType, USERINFO};\nuse alloc::borrow::ToOwned;\nuse alloc::str;\nuse alloc::string::{String, ToString};\nuse core::borrow::Borrow;\nuse core::convert::TryFrom;\nuse core::fmt::Write;\nuse core::ops::{Range, RangeFrom, RangeTo};\nuse core::{cmp, fmt, hash, mem};\nuse percent_encoding::utf8_percent_encode;\n#[cfg(feature = \"std\")]\n#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\", target_os = \"hermit\"))]\nuse std::io;\n#[cfg(feature = \"std\")]\nuse std::path::{Path, PathBuf};\npub use crate::host::Host;\npub use crate::origin::{OpaqueOrigin, Origin};\npub use crate::parser::{ParseError, SyntaxViolation};\npub use crate::path_segments::PathSegmentsMut;\npub use crate::slicing::Position;\npub use form_urlencoded::EncodingOverride;\n#[cfg(feature = \"std\")]\n#[cfg_attr(not(windows), allow(dead_code))]\nfn file_url_segments_to_pathbuf_windows(\n    estimated_capacity: usize,\n    host: Option<&str>,\n    mut segments: str::Split<'_, char>,\n) -> Result<PathBuf, ()> {\n    use percent_encoding::percent_decode_str;\n    let mut string = String::new();\n    string.try_reserve(estimated_capacity).map_err(|_| ())?;\n    if let Some(host) = host {\n        string.push_str(r\"\\\\\");\n        string.push_str(host);\n    } else {\n        let first = segments.next().ok_or(())?;\n        match first.len() {\n            2 => {\n                if !first.starts_with(parser::ascii_alpha) || first.as_bytes()[1] != b':'\n                {\n                    return Err(());\n                }\n                string.push_str(first);\n            }\n            4 => {\n                if !first.starts_with(parser::ascii_alpha) {\n                    return Err(());\n                }\n                let bytes = first.as_bytes();\n                if bytes[1] != b'%' || bytes[2] != b'3'\n                    || (bytes[3] != b'a' && bytes[3] != b'A')\n                {\n                    return Err(());\n                }\n                string.push_str(&first[0..1]);\n                string.push(':');\n            }\n            _ => return Err(()),\n        }\n    };\n    for segment in segments {\n        string.push('\\\\');\n        match percent_decode_str(segment).decode_utf8() {\n            Ok(s) => string.push_str(&s),\n            Err(..) => return Err(()),\n        }\n    }\n    if cfg!(test) {\n        debug_assert!(\n            string.len() <= estimated_capacity, \"len: {}, capacity: {}\", string.len(),\n            estimated_capacity\n        );\n    }\n    let path = PathBuf::from(string);\n    debug_assert!(\n        path.is_absolute(), \"to_file_path() failed to produce an absolute Path\"\n    );\n    Ok(path)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n3115 fn file_url_segments_to_pathbuf_windows(\n3116     estimated_capacity: usize,\n3117     host: Option<&str>,\n3118     mut segments: str::Split<'_, char>,\n3119 ) -> Result<PathBuf, ()> {\n3120     use percent_encoding::percent_decode_str;\n3121     let mut string = String::new();\n3122     string.try_reserve(estimated_capacity).map_err(|_| ())?;\n3123     if let Some(host) = host {\n3124         string.push_str(r\"\\\\\");\n3125         string.push_str(host);\n3126     } else {\n3127         let first = segments.next().ok_or(())?;\n3128 \n3129         match first.len() {\n3130             2 => {\n3131                 if !first.starts_with(parser::ascii_alpha) || first.as_bytes()[1] != b':' {\n3132                     return Err(());\n3133                 }\n3134 \n3135                 string.push_str(first);\n3136             }\n3137 \n3138             4 => {\n3139                 if !first.starts_with(parser::ascii_alpha) {\n3140                     return Err(());\n3141                 }\n3142                 let bytes = first.as_bytes();\n3143                 if bytes[1] != b'%' || bytes[2] != b'3' || (bytes[3] != b'a' && bytes[3] != b'A') {\n3144                     return Err(());\n3145                 }\n3146 \n3147                 string.push_str(&first[0..1]);\n3148                 string.push(':');\n3149             }\n3150 \n3151             _ => return Err(()),\n3152         }\n3153     };\n3154 \n3155     for segment in segments {\n3156         string.push('\\\\');\n3157 \n3158         // Currently non-unicode windows paths cannot be represented\n3159         match percent_decode_str(segment).decode_utf8() {\n3160             Ok(s) => string.push_str(&s),\n3161             Err(..) => return Err(()),\n3162         }\n3163     }\n3164     // ensure our estimated capacity was good\n3165     if cfg!(test) {\n3166         debug_assert!(\n3167             string.len() <= estimated_capacity,\n3168             \"len: {}, capacity: {}\",\n3169             string.len(),\n3170             estimated_capacity\n3171         );\n3172     }\n3173     let path = PathBuf::from(string);\n3174     debug_assert!(\n3175         path.is_absolute(),\n3176         \"to_file_path() failed to produce an absolute Path\"\n3177     );\n3178     Ok(path)\n3179 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}