{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\n#[inline(always)]\nfn has_punycode_prefix(slice: &[u8]) -> bool {\n    if slice.len() < 4 {\n        return false;\n    }\n    let a = slice[0];\n    let b = slice[1];\n    let c = slice[2];\n    let d = slice[3];\n    let u = (u32::from(d) << 24) | (u32::from(c) << 16) | (u32::from(b) << 8)\n        | u32::from(a);\n    (u & PUNYCODE_PREFIX_MASK) == PUNYCODE_PREFIX\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n118 fn has_punycode_prefix(slice: &[u8]) -> bool {\n119     if slice.len() < 4 {\n120         return false;\n121     }\n122     // Sadly, the optimizer doesn't figure out that more idiomatic code\n123     // should compile to masking on 32-bit value.\n124     let a = slice[0];\n125     let b = slice[1];\n126     let c = slice[2];\n127     let d = slice[3];\n128     let u = (u32::from(d) << 24) | (u32::from(c) << 16) | (u32::from(b) << 8) | u32::from(a);\n129     (u & PUNYCODE_PREFIX_MASK) == PUNYCODE_PREFIX\n130 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}