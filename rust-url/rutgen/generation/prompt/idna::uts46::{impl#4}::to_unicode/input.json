{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\npub struct Uts46 {\n    data: idna_adapter::Adapter,\n}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[repr(transparent)]\npub struct AsciiDenyList {\n    bits: u128,\n}\n#[derive(Default, Debug)]\n#[non_exhaustive]\npub struct Errors {}\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[non_exhaustive]\npub enum Hyphens {\n    /// _CheckHyphens=false_: Do not place positional restrictions on hyphens.\n    ///\n    /// This mode is used by the WHATWG URL Standard for normal User Agent processing\n    /// (i.e. not conformance checking).\n    Allow,\n    /// Prohibit hyphens in the first and last position in the label but allow in\n    /// the third and fourth position.\n    ///\n    /// Note that this mode rejects real-world names, including some GitHub user pages.\n    CheckFirstLast,\n    /// _CheckHyphens=true_: Prohibit hyphens in the first, third, fourth,\n    /// and last position in the label.\n    ///\n    /// Note that this mode rejects real-world names, including YouTube CDN nodes\n    /// and some GitHub user pages.\n    Check,\n}\nimpl Uts46 {\n    #[cfg(feature = \"compiled_data\")]\n    pub const fn new() -> Self {\n        Self {\n            data: idna_adapter::Adapter::new(),\n        }\n    }\n    pub fn to_ascii<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        dns_length: DnsLength,\n    ) -> Result<Cow<'a, str>, crate::Errors> {}\n    pub fn to_unicode<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {\n        self.to_user_interface(domain_name, ascii_deny_list, hyphens, |_, _, _| true)\n    }\n    pub fn to_user_interface<'a, OutputUnicode: FnMut(&[char], &[char], bool) -> bool>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        output_as_unicode: OutputUnicode,\n    ) -> (Cow<'a, str>, Result<(), crate::Errors>) {\n        let mut s = String::new();\n        match self\n            .process(\n                domain_name,\n                ascii_deny_list,\n                hyphens,\n                ErrorPolicy::MarkErrors,\n                output_as_unicode,\n                &mut s,\n                None,\n            )\n        {\n            Ok(ProcessingSuccess::Passthrough) => {\n                (\n                    Cow::Borrowed(unsafe {\n                        core::str::from_utf8_unchecked(domain_name)\n                    }),\n                    Ok(()),\n                )\n            }\n            Ok(ProcessingSuccess::WroteToSink) => (Cow::Owned(s), Ok(())),\n            Err(ProcessingError::ValidityError) => {\n                (Cow::Owned(s), Err(crate::Errors::default()))\n            }\n            Err(ProcessingError::SinkError) => unreachable!(),\n        }\n    }\n    #[allow(clippy::too_many_arguments)]\n    pub fn process<\n        W: Write + ?Sized,\n        OutputUnicode: FnMut(&[char], &[char], bool) -> bool,\n    >(\n        &self,\n        domain_name: &[u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        error_policy: ErrorPolicy,\n        mut output_as_unicode: OutputUnicode,\n        sink: &mut W,\n        ascii_sink: Option<&mut W>,\n    ) -> Result<ProcessingSuccess, ProcessingError> {}\n    #[inline(always)]\n    fn process_inner<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n    ) -> (usize, bool, bool) {}\n    #[allow(clippy::too_many_arguments)]\n    #[inline(never)]\n    fn process_innermost<'a>(\n        &self,\n        domain_name: &'a [u8],\n        ascii_deny_list: AsciiDenyList,\n        hyphens: Hyphens,\n        fail_fast: bool,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        already_punycode: &mut SmallVec<[AlreadyAsciiLabel<'a>; 8]>,\n        tail: &'a [u8],\n    ) -> (usize, bool, bool) {}\n    #[inline(never)]\n    fn after_punycode_decode(\n        &self,\n        domain_buffer: &mut SmallVec<[char; 253]>,\n        current_label_start: usize,\n        label_buffer: &[char],\n        deny_list_deny_dot: u128,\n        fail_fast: bool,\n        had_errors: &mut bool,\n    ) -> bool {}\n    #[inline(never)]\n    fn check_label(\n        &self,\n        hyphens: Hyphens,\n        mut_label: &mut [char],\n        fail_fast: bool,\n        had_errors: &mut bool,\n        first_needs_combining_mark_check: bool,\n        needs_contextj_check: bool,\n    ) -> bool {}\n    #[inline(always)]\n    fn has_appropriately_joining_char<I: Iterator<Item = char>>(\n        &self,\n        iter: I,\n        required_mask: JoiningTypeMask,\n    ) -> bool {}\n    #[inline(always)]\n    fn is_bidi(&self, buffer: &[char]) -> bool {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Performs the [ToUnicode](https://www.unicode.org/reports/tr46/#ToUnicode) operation\n/// from UTS #46 according to the options given. When there\n/// are errors, there is still output, which may be rendered user, even through\n/// the output must not be used in networking protocols. Errors are denoted\n/// by U+FFFD REPLACEMENT CHARACTERs in the output. (That is, if the second item of the\n/// return tuple is `Err`, the first item of the return tuple is guaranteed to contain\n/// at least one U+FFFD.)\n///\n/// Most applications probably shouldn't use this method and should be using\n/// [`Uts46::to_user_interface`] instead.\n///\n/// # Arguments\n///\n/// * `domain_name` - The input domain name as UTF-8 bytes. (The UTF-8ness is checked by\n///   this method and input that is not well-formed UTF-8 is treated as an error. If you\n///   already have a `&str`, call `.as_bytes()` on it.)\n/// * `ascii_deny_list` - What ASCII deny list, if any, to apply. The UTS 46\n///   _UseSTD3ASCIIRules_ flag or the WHATWG URL Standard forbidden domain code point\n///   processing is handled via this argument. Most callers are probably the best off\n///   by using [`AsciiDenyList::URL`] here.\n/// * `hyphens` - The UTS 46 _CheckHyphens_ flag. Most callers are probably the best\n///   off by using [`Hyphens::Allow`] here.\n592 pub fn to_unicode<'a>(\n593     &self,\n594     domain_name: &'a [u8],\n595     ascii_deny_list: AsciiDenyList,\n596     hyphens: Hyphens,\n597 ) -> (Cow<'a, str>, Result<(), crate::Errors>) {\n598     self.to_user_interface(domain_name, ascii_deny_list, hyphens, |_, _, _| true)\n599 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}