{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/host.rs\n// crate name is url\nuse crate::net::{Ipv4Addr, Ipv6Addr};\nuse alloc::borrow::Cow;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::fmt::{self, Formatter};\nuse percent_encoding::{percent_decode, utf8_percent_encode, CONTROLS};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nuse crate::parser::{ParseError, ParseResult};\nfn longest_zero_sequence(pieces: &[u16; 8]) -> (isize, isize) {\n    let mut longest = -1;\n    let mut longest_length = -1;\n    let mut start = -1;\n    macro_rules! finish_sequence {\n        ($end:expr) => {\n            if start >= 0 { let length = $end - start; if length > longest_length {\n            longest = start; longest_length = length; } }\n        };\n    }\n    for i in 0..8 {\n        if pieces[i as usize] == 0 {\n            if start < 0 {\n                start = i;\n            }\n        } else {\n            finish_sequence!(i);\n            start = -1;\n        }\n    }\n    finish_sequence!(8);\n    if longest_length < 2 { (-1, -2) } else { (longest, longest + longest_length) }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n205 fn longest_zero_sequence(pieces: &[u16; 8]) -> (isize, isize) {\n206     let mut longest = -1;\n207     let mut longest_length = -1;\n208     let mut start = -1;\n209     macro_rules! finish_sequence(\n210         ($end: expr) => {\n211             if start >= 0 {\n212                 let length = $end - start;\n213                 if length > longest_length {\n214                     longest = start;\n215                     longest_length = length;\n216                 }\n217             }\n218         };\n219     );\n220     for i in 0..8 {\n221         if pieces[i as usize] == 0 {\n222             if start < 0 {\n223                 start = i;\n224             }\n225         } else {\n226             finish_sequence!(i);\n227             start = -1;\n228         }\n229     }\n230     finish_sequence!(8);\n231     // https://url.spec.whatwg.org/#concept-ipv6-serializer\n232     // step 3: ignore lone zeroes\n233     if longest_length < 2 {\n234         (-1, -2)\n235     } else {\n236         (longest, longest + longest_length)\n237     }\n238 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}