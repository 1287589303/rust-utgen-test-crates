{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/host.rs\n// crate name is url\nuse crate::net::{Ipv4Addr, Ipv6Addr};\nuse alloc::borrow::Cow;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::fmt::{self, Formatter};\nuse percent_encoding::{percent_decode, utf8_percent_encode, CONTROLS};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nuse crate::parser::{ParseError, ParseResult};\nfn longest_zero_sequence(pieces: &[u16; 8]) -> (isize, isize) {\n    let mut longest = -1;\n    let mut longest_length = -1;\n    let mut start = -1;\n    macro_rules! finish_sequence {\n        ($end:expr) => {\n            if start >= 0 { let length = $end - start; if length > longest_length {\n            longest = start; longest_length = length; } }\n        };\n    }\n    for i in 0..8 {\n        if pieces[i as usize] == 0 {\n            if start < 0 {\n                start = i;\n            }\n        } else {\n            finish_sequence!(i);\n            start = -1;\n        }\n    }\n    finish_sequence!(8);\n    if longest_length < 2 { (-1, -2) } else { (longest, longest + longest_length) }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n205 fn longest_zero_sequence(pieces: &[u16; 8]) -> (isize, isize) {\n206     let mut longest = -1;\n207     let mut longest_length = -1;\n208     let mut start = -1;\n209     macro_rules! finish_sequence(\n210         ($end: expr) => {\n211             if start >= 0 {\n212                 let length = $end - start;\n213                 if length > longest_length {\n214                     longest = start;\n215                     longest_length = length;\n216                 }\n217             }\n218         };\n219     );\n220     for i in 0..8 {\n221         if pieces[i as usize] == 0 {\n222             if start < 0 {\n223                 start = i;\n224             }\n225         } else {\n226             finish_sequence!(i);\n227             start = -1;\n228         }\n229     }\n230     finish_sequence!(8);\n231     // https://url.spec.whatwg.org/#concept-ipv6-serializer\n232     // step 3: ignore lone zeroes\n233     if longest_length < 2 {\n234         (-1, -2)\n235     } else {\n236         (longest, longest + longest_length)\n237     }\n238 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}