{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/slicing.rs\n// crate name is url\nuse core::ops::{Index, Range, RangeFrom, RangeFull, RangeTo};\nuse crate::Url;\n#[derive(Clone)]\npub struct Url {\n    /// Syntax in pseudo-BNF:\n    ///\n    ///   url = scheme \":\" [ hierarchical | non-hierarchical ] [ \"?\" query ]? [ \"#\" fragment ]?\n    ///   non-hierarchical = non-hierarchical-path\n    ///   non-hierarchical-path = /* Does not start with \"/\" */\n    ///   hierarchical = authority? hierarchical-path\n    ///   authority = \"//\" userinfo? host [ \":\" port ]?\n    ///   userinfo = username [ \":\" password ]? \"@\"\n    ///   hierarchical-path = [ \"/\" path-segment ]+\n    serialization: String,\n    scheme_end: u32,\n    username_end: u32,\n    host_start: u32,\n    host_end: u32,\n    host: HostInternal,\n    port: Option<u16>,\n    path_start: u32,\n    query_start: Option<u32>,\n    fragment_start: Option<u32>,\n}\n#[derive(Copy, Clone, Debug)]\npub enum Position {\n    BeforeScheme,\n    AfterScheme,\n    BeforeUsername,\n    AfterUsername,\n    BeforePassword,\n    AfterPassword,\n    BeforeHost,\n    AfterHost,\n    BeforePort,\n    AfterPort,\n    BeforePath,\n    AfterPath,\n    BeforeQuery,\n    AfterQuery,\n    BeforeFragment,\n    AfterFragment,\n}\n#[cfg_attr(feature = \"serde\", derive(Deserialize, Serialize))]\n#[derive(Copy, Clone, Debug, Eq, PartialEq)]\npub(crate) enum HostInternal {\n    None,\n    Domain,\n    Ipv4(Ipv4Addr),\n    Ipv6(Ipv6Addr),\n}\nimpl Index<Range<Position>> for Url {\n    type Output = str;\n    fn index(&self, range: Range<Position>) -> &str {\n        &self.serialization[self.index(range.start)..self.index(range.end)]\n    }\n}\nimpl Url {\n    #[inline]\n    fn index(&self, position: Position) -> usize {\n        match position {\n            Position::BeforeScheme => 0,\n            Position::AfterScheme => self.scheme_end as usize,\n            Position::BeforeUsername => {\n                if self.has_authority() {\n                    self.scheme_end as usize + \"://\".len()\n                } else {\n                    debug_assert!(self.byte_at(self.scheme_end) == b':');\n                    debug_assert!(\n                        self.scheme_end + \":\".len() as u32 == self.username_end\n                    );\n                    self.scheme_end as usize + \":\".len()\n                }\n            }\n            Position::AfterUsername => self.username_end as usize,\n            Position::BeforePassword => {\n                if self.has_authority() && self.byte_at(self.username_end) == b':' {\n                    self.username_end as usize + \":\".len()\n                } else {\n                    debug_assert!(self.username_end == self.host_start);\n                    self.username_end as usize\n                }\n            }\n            Position::AfterPassword => {\n                if self.has_authority() && self.byte_at(self.username_end) == b':' {\n                    debug_assert!(\n                        self.byte_at(self.host_start - \"@\".len() as u32) == b'@'\n                    );\n                    self.host_start as usize - \"@\".len()\n                } else {\n                    debug_assert!(self.username_end == self.host_start);\n                    self.host_start as usize\n                }\n            }\n            Position::BeforeHost => self.host_start as usize,\n            Position::AfterHost => self.host_end as usize,\n            Position::BeforePort => {\n                if self.port.is_some() {\n                    debug_assert!(self.byte_at(self.host_end) == b':');\n                    self.host_end as usize + \":\".len()\n                } else {\n                    self.host_end as usize\n                }\n            }\n            Position::AfterPort => {\n                if let Some(port) = self.port {\n                    debug_assert!(self.byte_at(self.host_end) == b':');\n                    self.host_end as usize + \":\".len() + count_digits(port)\n                } else {\n                    self.host_end as usize\n                }\n            }\n            Position::BeforePath => self.path_start as usize,\n            Position::AfterPath => {\n                match (self.query_start, self.fragment_start) {\n                    (Some(q), _) => q as usize,\n                    (None, Some(f)) => f as usize,\n                    (None, None) => self.serialization.len(),\n                }\n            }\n            Position::BeforeQuery => {\n                match (self.query_start, self.fragment_start) {\n                    (Some(q), _) => {\n                        debug_assert!(self.byte_at(q) == b'?');\n                        q as usize + \"?\".len()\n                    }\n                    (None, Some(f)) => f as usize,\n                    (None, None) => self.serialization.len(),\n                }\n            }\n            Position::AfterQuery => {\n                match self.fragment_start {\n                    None => self.serialization.len(),\n                    Some(f) => f as usize,\n                }\n            }\n            Position::BeforeFragment => {\n                match self.fragment_start {\n                    Some(f) => {\n                        debug_assert!(self.byte_at(f) == b'#');\n                        f as usize + \"#\".len()\n                    }\n                    None => self.serialization.len(),\n                }\n            }\n            Position::AfterFragment => self.serialization.len(),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n22 fn index(&self, range: RangeFrom<Position>) -> &str {\n23     &self.serialization[self.index(range.start)..]\n24 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}