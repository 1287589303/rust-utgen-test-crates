{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\nfn pretend_parse_data_url(input: &str) -> Option<&str> {\n    let left_trimmed = input.trim_start_matches(|ch| ch <= ' ');\n    let mut bytes = left_trimmed.bytes();\n    {\n        let mut iter = bytes\n            .by_ref()\n            .filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'd'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'a'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b't'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'a'));\n        require!(iter.next() ? == b':');\n    }\n    let bytes_consumed = left_trimmed.len() - bytes.len();\n    let after_colon = &left_trimmed[bytes_consumed..];\n    Some(after_colon.trim_end_matches(|ch| ch <= ' '))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Similar to <https://url.spec.whatwg.org/#concept-basic-url-parser>\n/// followed by <https://url.spec.whatwg.org/#concept-url-serializer>\n///\n/// * `None`: not a data URL.\n///\n/// * `Some(s)`: sort of the result of serialization, except:\n///\n///   - `data:` prefix removed\n///   - The fragment is included\n///   - Other components are **not** UTF-8 percent-encoded\n///   - ASCII tabs and newlines in the middle are **not** removed\n158 fn pretend_parse_data_url(input: &str) -> Option<&str> {\n159     // Trim C0 control or space\n160     let left_trimmed = input.trim_start_matches(|ch| ch <= ' ');\n161 \n162     let mut bytes = left_trimmed.bytes();\n163     {\n164         // Ignore ASCII tabs or newlines like the URL parser would\n165         let mut iter = bytes\n166             .by_ref()\n167             .filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));\n168         require!(iter.next()?.eq_ignore_ascii_case(&b'd'));\n169         require!(iter.next()?.eq_ignore_ascii_case(&b'a'));\n170         require!(iter.next()?.eq_ignore_ascii_case(&b't'));\n171         require!(iter.next()?.eq_ignore_ascii_case(&b'a'));\n172         require!(iter.next()? == b':');\n173     }\n174     let bytes_consumed = left_trimmed.len() - bytes.len();\n175     let after_colon = &left_trimmed[bytes_consumed..];\n176 \n177     // Trim C0 control or space\n178     Some(after_colon.trim_end_matches(|ch| ch <= ' '))\n179 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}