{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\nfn pretend_parse_data_url(input: &str) -> Option<&str> {\n    let left_trimmed = input.trim_start_matches(|ch| ch <= ' ');\n    let mut bytes = left_trimmed.bytes();\n    {\n        let mut iter = bytes\n            .by_ref()\n            .filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'd'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'a'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b't'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'a'));\n        require!(iter.next() ? == b':');\n    }\n    let bytes_consumed = left_trimmed.len() - bytes.len();\n    let after_colon = &left_trimmed[bytes_consumed..];\n    Some(after_colon.trim_end_matches(|ch| ch <= ' '))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Similar to <https://url.spec.whatwg.org/#concept-basic-url-parser>\n/// followed by <https://url.spec.whatwg.org/#concept-url-serializer>\n///\n/// * `None`: not a data URL.\n///\n/// * `Some(s)`: sort of the result of serialization, except:\n///\n///   - `data:` prefix removed\n///   - The fragment is included\n///   - Other components are **not** UTF-8 percent-encoded\n///   - ASCII tabs and newlines in the middle are **not** removed\n158 fn pretend_parse_data_url(input: &str) -> Option<&str> {\n159     // Trim C0 control or space\n160     let left_trimmed = input.trim_start_matches(|ch| ch <= ' ');\n161 \n162     let mut bytes = left_trimmed.bytes();\n163     {\n164         // Ignore ASCII tabs or newlines like the URL parser would\n165         let mut iter = bytes\n166             .by_ref()\n167             .filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));\n168         require!(iter.next()?.eq_ignore_ascii_case(&b'd'));\n169         require!(iter.next()?.eq_ignore_ascii_case(&b'a'));\n170         require!(iter.next()?.eq_ignore_ascii_case(&b't'));\n171         require!(iter.next()?.eq_ignore_ascii_case(&b'a'));\n172         require!(iter.next()? == b':');\n173     }\n174     let bytes_consumed = left_trimmed.len() - bytes.len();\n175     let after_colon = &left_trimmed[bytes_consumed..];\n176 \n177     // Trim C0 control or space\n178     Some(after_colon.trim_end_matches(|ch| ch <= ' '))\n179 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}