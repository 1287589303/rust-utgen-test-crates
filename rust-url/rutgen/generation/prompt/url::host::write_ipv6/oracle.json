{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/host.rs\n// crate name is url\nuse crate::net::{Ipv4Addr, Ipv6Addr};\nuse alloc::borrow::Cow;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::fmt::{self, Formatter};\nuse percent_encoding::{percent_decode, utf8_percent_encode, CONTROLS};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nuse crate::parser::{ParseError, ParseResult};\nfn write_ipv6(addr: &Ipv6Addr, f: &mut Formatter<'_>) -> fmt::Result {\n    let segments = addr.segments();\n    let (compress_start, compress_end) = longest_zero_sequence(&segments);\n    let mut i = 0;\n    while i < 8 {\n        if i == compress_start {\n            f.write_str(\":\")?;\n            if i == 0 {\n                f.write_str(\":\")?;\n            }\n            if compress_end < 8 {\n                i = compress_end;\n            } else {\n                break;\n            }\n        }\n        write!(f, \"{:x}\", segments[i as usize])?;\n        if i < 7 {\n            f.write_str(\":\")?;\n        }\n        i += 1;\n    }\n    Ok(())\n}\nfn longest_zero_sequence(pieces: &[u16; 8]) -> (isize, isize) {\n    let mut longest = -1;\n    let mut longest_length = -1;\n    let mut start = -1;\n    macro_rules! finish_sequence {\n        ($end:expr) => {\n            if start >= 0 { let length = $end - start; if length > longest_length {\n            longest = start; longest_length = length; } }\n        };\n    }\n    for i in 0..8 {\n        if pieces[i as usize] == 0 {\n            if start < 0 {\n                start = i;\n            }\n        } else {\n            finish_sequence!(i);\n            start = -1;\n        }\n    }\n    finish_sequence!(8);\n    if longest_length < 2 { (-1, -2) } else { (longest, longest + longest_length) }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n179 fn write_ipv6(addr: &Ipv6Addr, f: &mut Formatter<'_>) -> fmt::Result {\n180     let segments = addr.segments();\n181     let (compress_start, compress_end) = longest_zero_sequence(&segments);\n182     let mut i = 0;\n183     while i < 8 {\n184         if i == compress_start {\n185             f.write_str(\":\")?;\n186             if i == 0 {\n187                 f.write_str(\":\")?;\n188             }\n189             if compress_end < 8 {\n190                 i = compress_end;\n191             } else {\n192                 break;\n193             }\n194         }\n195         write!(f, \"{:x}\", segments[i as usize])?;\n196         if i < 7 {\n197             f.write_str(\":\")?;\n198         }\n199         i += 1;\n200     }\n201     Ok(())\n202 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}