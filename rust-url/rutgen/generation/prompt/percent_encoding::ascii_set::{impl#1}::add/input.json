{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// percent_encoding/src/ascii_set.rs\n// crate name is percent_encoding\ntype Chunk = u32;\nuse core::{mem, ops};\nconst ASCII_RANGE_LEN: usize = 0x80;\nconst BITS_PER_CHUNK: usize = 8 * mem::size_of::<Chunk>();\npub const CONTROLS: &AsciiSet = &AsciiSet {\n    mask: [!0_u32, 0, 0, 1 << (0x7F_u32 % 32)],\n};\npub const NON_ALPHANUMERIC: &AsciiSet = &CONTROLS\n    .add(b' ')\n    .add(b'!')\n    .add(b'\"')\n    .add(b'#')\n    .add(b'$')\n    .add(b'%')\n    .add(b'&')\n    .add(b'\\'')\n    .add(b'(')\n    .add(b')')\n    .add(b'*')\n    .add(b'+')\n    .add(b',')\n    .add(b'-')\n    .add(b'.')\n    .add(b'/')\n    .add(b':')\n    .add(b';')\n    .add(b'<')\n    .add(b'=')\n    .add(b'>')\n    .add(b'?')\n    .add(b'@')\n    .add(b'[')\n    .add(b'\\\\')\n    .add(b']')\n    .add(b'^')\n    .add(b'_')\n    .add(b'`')\n    .add(b'{')\n    .add(b'|')\n    .add(b'}')\n    .add(b'~');\n#[derive(Debug, PartialEq, Eq)]\npub struct AsciiSet {\n    mask: [Chunk; ASCII_RANGE_LEN / BITS_PER_CHUNK],\n}\nimpl ops::Add for AsciiSet {\n    type Output = Self;\n    fn add(self, other: Self) -> Self {\n        self.union(other)\n    }\n}\nimpl AsciiSet {\n    pub const EMPTY: AsciiSet = AsciiSet {\n        mask: [0; ASCII_RANGE_LEN / BITS_PER_CHUNK],\n    };\n    pub(crate) const fn contains(&self, byte: u8) -> bool {}\n    pub(crate) fn should_percent_encode(&self, byte: u8) -> bool {}\n    pub const fn add(&self, byte: u8) -> Self {\n        let mut mask = self.mask;\n        mask[byte as usize / BITS_PER_CHUNK] |= 1 << (byte as usize % BITS_PER_CHUNK);\n        AsciiSet { mask }\n    }\n    pub const fn remove(&self, byte: u8) -> Self {\n        let mut mask = self.mask;\n        mask[byte as usize / BITS_PER_CHUNK] &= !(1 << (byte as usize % BITS_PER_CHUNK));\n        AsciiSet { mask }\n    }\n    pub const fn union(&self, other: Self) -> Self {\n        let mask = [\n            self.mask[0] | other.mask[0],\n            self.mask[1] | other.mask[1],\n            self.mask[2] | other.mask[2],\n            self.mask[3] | other.mask[3],\n        ];\n        AsciiSet { mask }\n    }\n    pub const fn complement(&self) -> Self {\n        let mask = [!self.mask[0], !self.mask[1], !self.mask[2], !self.mask[3]];\n        AsciiSet { mask }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n89 fn add(self, other: Self) -> Self {\n90     self.union(other)\n91 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}