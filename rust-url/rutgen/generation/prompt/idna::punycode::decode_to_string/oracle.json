{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/punycode.rs\n// crate name is idna\nuse alloc::{string::String, vec::Vec};\nuse core::char;\nuse core::fmt::Write;\nuse core::marker::PhantomData;\nconst BASE: u32 = 36;\nconst T_MIN: u32 = 1;\nconst T_MAX: u32 = 26;\nconst SKEW: u32 = 38;\nconst DAMP: u32 = 700;\nconst INITIAL_BIAS: u32 = 72;\nconst INITIAL_N: u32 = 0x80;\n#[derive(Default)]\npub(crate) struct Decoder {\n    insertions: smallvec::SmallVec<[(usize, char); 59]>,\n}\npub(crate) struct Decode<'a, T, C>\nwhere\n    T: PunycodeCodeUnit + Copy,\n    C: PunycodeCaller,\n{\n    base: core::slice::Iter<'a, T>,\n    pub(crate) insertions: &'a [(usize, char)],\n    inserted: usize,\n    position: usize,\n    len: usize,\n    phantom: PhantomData<C>,\n}\nstruct ExternalCaller;\nimpl Decoder {\n    pub(crate) fn decode<'a, T: PunycodeCodeUnit + Copy, C: PunycodeCaller>(\n        &'a mut self,\n        input: &'a [T],\n    ) -> Result<Decode<'a, T, C>, ()> {\n        self.insertions.clear();\n        let (base, input) = if let Some(position) = input\n            .iter()\n            .rposition(|c| c.is_delimiter())\n        {\n            (\n                &input[..position],\n                if position > 0 { &input[position + 1..] } else { input },\n            )\n        } else {\n            (&input[..0], input)\n        };\n        if C::EXTERNAL_CALLER && !base.iter().all(|c| c.is_ascii()) {\n            return Err(());\n        }\n        let base_len = base.len();\n        let mut length = base_len as u32;\n        let mut code_point = INITIAL_N;\n        let mut bias = INITIAL_BIAS;\n        let mut i = 0u32;\n        let mut iter = input.iter();\n        loop {\n            let previous_i = i;\n            let mut weight = 1;\n            let mut k = BASE;\n            let mut byte = match iter.next() {\n                None => break,\n                Some(byte) => byte,\n            };\n            loop {\n                let digit = if let Some(digit) = byte.digit() {\n                    digit\n                } else {\n                    return Err(());\n                };\n                let product = digit.checked_mul(weight).ok_or(())?;\n                i = i.checked_add(product).ok_or(())?;\n                let t = if k <= bias {\n                    T_MIN\n                } else if k >= bias + T_MAX {\n                    T_MAX\n                } else {\n                    k - bias\n                };\n                if digit < t {\n                    break;\n                }\n                weight = weight.checked_mul(BASE - t).ok_or(())?;\n                k += BASE;\n                byte = match iter.next() {\n                    None => return Err(()),\n                    Some(byte) => byte,\n                };\n            }\n            bias = adapt(i - previous_i, length + 1, previous_i == 0);\n            code_point = code_point.checked_add(i / (length + 1)).ok_or(())?;\n            i %= length + 1;\n            let c = match char::from_u32(code_point) {\n                Some(c) => c,\n                None => return Err(()),\n            };\n            for (idx, _) in &mut self.insertions {\n                if *idx >= i as usize {\n                    *idx += 1;\n                }\n            }\n            self.insertions.push((i as usize, c));\n            length += 1;\n            i += 1;\n        }\n        self.insertions.sort_by_key(|(i, _)| *i);\n        Ok(Decode {\n            base: base.iter(),\n            insertions: &self.insertions,\n            inserted: 0,\n            position: 0,\n            len: base_len + self.insertions.len(),\n            phantom: PhantomData::<C>,\n        })\n    }\n}\n#[inline]\npub fn decode_to_string(input: &str) -> Option<String> {\n    Some(\n        Decoder::default().decode::<u8, ExternalCaller>(input.as_bytes()).ok()?.collect(),\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Convert Punycode to an Unicode `String`.\n///\n/// Return None on malformed input or overflow.\n/// Overflow can only happen on inputs that take more than\n/// 63 encoded bytes, the DNS limit on domain name labels.\n48 pub fn decode_to_string(input: &str) -> Option<String> {\n49     Some(\n50         Decoder::default()\n51             .decode::<u8, ExternalCaller>(input.as_bytes())\n52             .ok()?\n53             .collect(),\n54     )\n55 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}