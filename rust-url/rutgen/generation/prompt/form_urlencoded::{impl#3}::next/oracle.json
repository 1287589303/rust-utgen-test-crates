{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// form_urlencoded/src/lib.rs\n// crate name is form_urlencoded\npub type EncodingOverride<'a> = Option<&'a dyn Fn(&str) -> Cow<'_, [u8]>>;\nuse alloc::borrow::{Borrow, Cow, ToOwned};\nuse alloc::string::String;\nuse core::str;\nuse percent_encoding::{percent_decode, percent_encode_byte};\n#[derive(Debug)]\npub struct ByteSerialize<'a> {\n    bytes: &'a [u8],\n}\nimpl<'a> Iterator for ByteSerialize<'a> {\n    type Item = &'a str;\n    fn next(&mut self) -> Option<&'a str> {\n        if let Some((&first, tail)) = self.bytes.split_first() {\n            if !byte_serialized_unchanged(first) {\n                self.bytes = tail;\n                return Some(\n                    if first == b' ' { \"+\" } else { percent_encode_byte(first) },\n                );\n            }\n            let position = tail.iter().position(|&b| !byte_serialized_unchanged(b));\n            let (unchanged_slice, remaining) = match position {\n                Some(i) => self.bytes.split_at(1 + i),\n                None => (self.bytes, &[][..]),\n            };\n            self.bytes = remaining;\n            Some(unsafe { str::from_utf8_unchecked(unchanged_slice) })\n        } else {\n            None\n        }\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {}\n}\nfn byte_serialized_unchanged(byte: u8) -> bool {\n    matches!(\n        byte, b'*' | b'-' | b'.' | b'0'..= b'9' | b'A'..= b'Z' | b'_' | b'a'..= b'z'\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n138 fn next(&mut self) -> Option<&'a str> {\n139     if let Some((&first, tail)) = self.bytes.split_first() {\n140         if !byte_serialized_unchanged(first) {\n141             self.bytes = tail;\n142             return Some(if first == b' ' {\n143                 \"+\"\n144             } else {\n145                 percent_encode_byte(first)\n146             });\n147         }\n148         let position = tail.iter().position(|&b| !byte_serialized_unchanged(b));\n149         let (unchanged_slice, remaining) = match position {\n150             // 1 for first_byte + i unchanged in tail\n151             Some(i) => self.bytes.split_at(1 + i),\n152             None => (self.bytes, &[][..]),\n153         };\n154         self.bytes = remaining;\n155         // This unsafe is appropriate because we have already checked these\n156         // bytes in byte_serialized_unchanged, which checks for a subset\n157         // of UTF-8. So we know these bytes are valid UTF-8, and doing\n158         // another UTF-8 check would be wasteful.\n159         Some(unsafe { str::from_utf8_unchecked(unchanged_slice) })\n160     } else {\n161         None\n162     }\n163 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}