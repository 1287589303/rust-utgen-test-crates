{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/parser.rs\n// crate name is url\npub type ParseResult<T> = Result<T, ParseError>;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse core::fmt::{self, Formatter, Write};\nuse core::str;\nuse crate::host::{Host, HostInternal};\nuse crate::Url;\nuse form_urlencoded::EncodingOverride;\nuse percent_encoding::{percent_encode, utf8_percent_encode, AsciiSet, CONTROLS};\nconst FRAGMENT: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'<').add(b'>').add(b'`');\nconst PATH: &AsciiSet = &FRAGMENT.add(b'#').add(b'?').add(b'{').add(b'}');\npub(crate) const USERINFO: &AsciiSet = &PATH\n    .add(b'/')\n    .add(b':')\n    .add(b';')\n    .add(b'=')\n    .add(b'@')\n    .add(b'[')\n    .add(b'\\\\')\n    .add(b']')\n    .add(b'^')\n    .add(b'|');\npub(crate) const PATH_SEGMENT: &AsciiSet = &PATH.add(b'/').add(b'%');\npub(crate) const SPECIAL_PATH_SEGMENT: &AsciiSet = &PATH_SEGMENT.add(b'\\\\');\nconst QUERY: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'#').add(b'<').add(b'>');\nconst SPECIAL_QUERY: &AsciiSet = &QUERY.add(b'\\'');\n#[derive(Clone, Debug)]\npub struct Input<'i> {\n    chars: str::Chars<'i>,\n}\nfn check_url_code_point(vfn: &dyn Fn(SyntaxViolation), c: char, input: &Input<'_>) {\n    if c == '%' {\n        let mut input = input.clone();\n        if !matches!(\n            (input.next(), input.next()), (Some(a), Some(b)) if a.is_ascii_hexdigit() &&\n            b.is_ascii_hexdigit()\n        ) {\n            vfn(SyntaxViolation::PercentDecode)\n        }\n    } else if !is_url_code_point(c) {\n        vfn(SyntaxViolation::NonUrlCodePoint)\n    }\n}\n#[inline]\nfn is_url_code_point(c: char) -> bool {\n    matches!(\n        c, 'a'..='z' | 'A'..='Z' | '0'..='9' | '!' | '$' | '&' | '\\'' | '(' | ')' | '*' |\n        '+' | ',' | '-' | '.' | '/' | ':' | ';' | '=' | '?' | '@' | '_' | '~' | '\\u{A0}'\n        ..='\\u{D7FF}' | '\\u{E000}'..='\\u{FDCF}' | '\\u{FDF0}'..='\\u{FFFD}' | '\\u{10000}'\n        ..='\\u{1FFFD}' | '\\u{20000}'..='\\u{2FFFD}' | '\\u{30000}'..='\\u{3FFFD}' |\n        '\\u{40000}'..='\\u{4FFFD}' | '\\u{50000}'..='\\u{5FFFD}' | '\\u{60000}'..='\\u{6FFFD}'\n        | '\\u{70000}'..='\\u{7FFFD}' | '\\u{80000}'..='\\u{8FFFD}' | '\\u{90000}'\n        ..='\\u{9FFFD}' | '\\u{A0000}'..='\\u{AFFFD}' | '\\u{B0000}'..='\\u{BFFFD}' |\n        '\\u{C0000}'..='\\u{CFFFD}' | '\\u{D0000}'..='\\u{DFFFD}' | '\\u{E1000}'..='\\u{EFFFD}'\n        | '\\u{F0000}'..='\\u{FFFFD}' | '\\u{100000}'..='\\u{10FFFD}'\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1702 fn check_url_code_point(vfn: &dyn Fn(SyntaxViolation), c: char, input: &Input<'_>) {\n1703     if c == '%' {\n1704         let mut input = input.clone();\n1705         if !matches!((input.next(), input.next()), (Some(a), Some(b))\n1706                              if a.is_ascii_hexdigit() && b.is_ascii_hexdigit())\n1707         {\n1708             vfn(SyntaxViolation::PercentDecode)\n1709         }\n1710     } else if !is_url_code_point(c) {\n1711         vfn(SyntaxViolation::NonUrlCodePoint)\n1712     }\n1713 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}