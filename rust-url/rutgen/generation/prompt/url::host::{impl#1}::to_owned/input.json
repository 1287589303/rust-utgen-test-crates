{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/host.rs\n// crate name is url\nuse crate::net::{Ipv4Addr, Ipv6Addr};\nuse alloc::borrow::Cow;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::fmt::{self, Formatter};\nuse percent_encoding::{percent_decode, utf8_percent_encode, CONTROLS};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nuse crate::parser::{ParseError, ParseResult};\n#[cfg_attr(feature = \"serde\", derive(Deserialize, Serialize))]\n#[derive(Clone, Debug, Eq, Ord, PartialOrd, Hash)]\npub enum Host<S = String> {\n    /// A DNS domain name, as '.' dot-separated labels.\n    /// Non-ASCII labels are encoded in punycode per IDNA if this is the host of\n    /// a special URL, or percent encoded for non-special URLs. Hosts for\n    /// non-special URLs are also called opaque hosts.\n    Domain(S),\n    /// An IPv4 address.\n    /// `Url::host_str` returns the serialization of this address,\n    /// as four decimal integers separated by `.` dots.\n    Ipv4(Ipv4Addr),\n    /// An IPv6 address.\n    /// `Url::host_str` returns the serialization of that address between `[` and `]` brackets,\n    /// in the format per [RFC 5952 *A Recommendation\n    /// for IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\n    /// lowercase hexadecimal with maximal `::` compression.\n    Ipv6(Ipv6Addr),\n}\nimpl Host<&str> {\n    pub fn to_owned(&self) -> Host<String> {\n        match *self {\n            Host::Domain(domain) => Host::Domain(domain.to_owned()),\n            Host::Ipv4(address) => Host::Ipv4(address),\n            Host::Ipv6(address) => Host::Ipv6(address),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a copy of `self` that owns an allocated `String` but does not borrow an `&Url`.\n69 pub fn to_owned(&self) -> Host<String> {\n70     match *self {\n71         Host::Domain(domain) => Host::Domain(domain.to_owned()),\n72         Host::Ipv4(address) => Host::Ipv4(address),\n73         Host::Ipv6(address) => Host::Ipv6(address),\n74     }\n75 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}