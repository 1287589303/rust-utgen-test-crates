{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// percent_encoding/src/lib.rs\n// crate name is percent_encoding\n#[cfg(feature = \"alloc\")]\nuse alloc::{\n    borrow::{Cow, ToOwned},\n    string::String, vec::Vec,\n};\nuse core::{fmt, slice, str};\npub use self::ascii_set::{AsciiSet, CONTROLS, NON_ALPHANUMERIC};\n#[derive(Clone, Debug)]\npub struct PercentDecode<'a> {\n    bytes: slice::Iter<'a, u8>,\n}\n#[inline]\npub fn percent_decode(input: &[u8]) -> PercentDecode<'_> {\n    PercentDecode {\n        bytes: input.iter(),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Percent-decode the given bytes.\n///\n/// <https://url.spec.whatwg.org/#percent-decode>\n///\n/// Any sequence of `%` followed by two hexadecimal digits is decoded.\n/// The return type:\n///\n/// * Implements `Into<Cow<u8>>` borrowing `input` when it contains no percent-encoded sequence,\n/// * Implements `Iterator<Item = u8>` and therefore has a `.collect::<Vec<u8>>()` method,\n/// * Has `decode_utf8()` and `decode_utf8_lossy()` methods.\n///\n/// # Examples\n///\n/// ```\n/// use percent_encoding::percent_decode;\n///\n/// assert_eq!(percent_decode(b\"foo%20bar%3f\").decode_utf8().unwrap(), \"foo bar?\");\n/// ```\n240 pub fn percent_decode(input: &[u8]) -> PercentDecode<'_> {\n241     PercentDecode {\n242         bytes: input.iter(),\n243     }\n244 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}