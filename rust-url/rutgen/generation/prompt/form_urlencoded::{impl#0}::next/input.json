{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// form_urlencoded/src/lib.rs\n// crate name is form_urlencoded\npub type EncodingOverride<'a> = Option<&'a dyn Fn(&str) -> Cow<'_, [u8]>>;\nuse alloc::borrow::{Borrow, Cow, ToOwned};\nuse alloc::string::String;\nuse core::str;\nuse percent_encoding::{percent_decode, percent_encode_byte};\n#[derive(Copy, Clone)]\npub struct Parse<'a> {\n    input: &'a [u8],\n}\nimpl<'a> Iterator for Parse<'a> {\n    type Item = (Cow<'a, str>, Cow<'a, str>);\n    fn next(&mut self) -> Option<Self::Item> {\n        loop {\n            if self.input.is_empty() {\n                return None;\n            }\n            let mut split2 = self.input.splitn(2, |&b| b == b'&');\n            let sequence = split2.next().unwrap();\n            self.input = split2.next().unwrap_or(&[][..]);\n            if sequence.is_empty() {\n                continue;\n            }\n            let mut split2 = sequence.splitn(2, |&b| b == b'=');\n            let name = split2.next().unwrap();\n            let value = split2.next().unwrap_or(&[][..]);\n            return Some((decode(name), decode(value)));\n        }\n    }\n}\nfn decode(input: &[u8]) -> Cow<'_, str> {\n    let replaced = replace_plus(input);\n    decode_utf8_lossy(\n        match percent_decode(&replaced).into() {\n            Cow::Owned(vec) => Cow::Owned(vec),\n            Cow::Borrowed(_) => replaced,\n        },\n    )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n51 fn next(&mut self) -> Option<Self::Item> {\n52     loop {\n53         if self.input.is_empty() {\n54             return None;\n55         }\n56         let mut split2 = self.input.splitn(2, |&b| b == b'&');\n57         let sequence = split2.next().unwrap();\n58         self.input = split2.next().unwrap_or(&[][..]);\n59         if sequence.is_empty() {\n60             continue;\n61         }\n62         let mut split2 = sequence.splitn(2, |&b| b == b'=');\n63         let name = split2.next().unwrap();\n64         let value = split2.next().unwrap_or(&[][..]);\n65         return Some((decode(name), decode(value)));\n66     }\n67 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}