{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/path_segments.rs\n// crate name is url\nuse crate::parser::{self, to_u32, SchemeType};\nuse crate::Url;\nuse alloc::string::String;\nuse core::str;\n#[derive(Debug)]\npub struct PathSegmentsMut<'a> {\n    url: &'a mut Url,\n    after_first_slash: usize,\n    after_path: String,\n    old_after_path_position: u32,\n}\n#[derive(Clone)]\npub struct Url {\n    /// Syntax in pseudo-BNF:\n    ///\n    ///   url = scheme \":\" [ hierarchical | non-hierarchical ] [ \"?\" query ]? [ \"#\" fragment ]?\n    ///   non-hierarchical = non-hierarchical-path\n    ///   non-hierarchical-path = /* Does not start with \"/\" */\n    ///   hierarchical = authority? hierarchical-path\n    ///   authority = \"//\" userinfo? host [ \":\" port ]?\n    ///   userinfo = username [ \":\" password ]? \"@\"\n    ///   hierarchical-path = [ \"/\" path-segment ]+\n    serialization: String,\n    scheme_end: u32,\n    username_end: u32,\n    host_start: u32,\n    host_end: u32,\n    host: HostInternal,\n    port: Option<u16>,\n    path_start: u32,\n    query_start: Option<u32>,\n    fragment_start: Option<u32>,\n}\nimpl PathSegmentsMut<'_> {\n    pub fn clear(&mut self) -> &mut Self {\n        self.url.serialization.truncate(self.after_first_slash);\n        self\n    }\n    pub fn pop_if_empty(&mut self) -> &mut Self {\n        if self.after_first_slash >= self.url.serialization.len() {\n            return self;\n        }\n        if self.url.serialization[self.after_first_slash..].ends_with('/') {\n            self.url.serialization.pop();\n        }\n        self\n    }\n    pub fn pop(&mut self) -> &mut Self {\n        if self.after_first_slash >= self.url.serialization.len() {\n            return self;\n        }\n        let last_slash = self\n            .url\n            .serialization[self.after_first_slash..]\n            .rfind('/')\n            .unwrap_or(0);\n        self.url.serialization.truncate(self.after_first_slash + last_slash);\n        self\n    }\n    pub fn push(&mut self, segment: &str) -> &mut Self {\n        self.extend(Some(segment))\n    }\n    pub fn extend<I>(&mut self, segments: I) -> &mut Self\n    where\n        I: IntoIterator,\n        I::Item: AsRef<str>,\n    {\n        let scheme_type = SchemeType::from(self.url.scheme());\n        let path_start = self.url.path_start as usize;\n        self.url\n            .mutate(|parser| {\n                parser.context = parser::Context::PathSegmentSetter;\n                for segment in segments {\n                    let segment = segment.as_ref();\n                    if matches!(segment, \".\" | \"..\") {\n                        continue;\n                    }\n                    if parser.serialization.len() > path_start + 1\n                        || parser.serialization.len() == path_start\n                    {\n                        parser.serialization.push('/');\n                    }\n                    let mut has_host = true;\n                    parser\n                        .parse_path(\n                            scheme_type,\n                            &mut has_host,\n                            path_start,\n                            parser::Input::new_no_trim(segment),\n                        );\n                }\n            });\n        self\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Append the given segment at the end of this URLâ€™s path.\n///\n/// See the documentation for `.extend()`.\n///\n/// Returns `&mut Self` so that method calls can be chained.\n171 pub fn push(&mut self, segment: &str) -> &mut Self {\n172     self.extend(Some(segment))\n173 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}