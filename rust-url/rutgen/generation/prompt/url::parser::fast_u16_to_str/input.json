{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/parser.rs\n// crate name is url\npub type ParseResult<T> = Result<T, ParseError>;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse core::fmt::{self, Formatter, Write};\nuse core::str;\nuse crate::host::{Host, HostInternal};\nuse crate::Url;\nuse form_urlencoded::EncodingOverride;\nuse percent_encoding::{percent_encode, utf8_percent_encode, AsciiSet, CONTROLS};\nconst FRAGMENT: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'<').add(b'>').add(b'`');\nconst PATH: &AsciiSet = &FRAGMENT.add(b'#').add(b'?').add(b'{').add(b'}');\npub(crate) const USERINFO: &AsciiSet = &PATH\n    .add(b'/')\n    .add(b':')\n    .add(b';')\n    .add(b'=')\n    .add(b'@')\n    .add(b'[')\n    .add(b'\\\\')\n    .add(b']')\n    .add(b'^')\n    .add(b'|');\npub(crate) const PATH_SEGMENT: &AsciiSet = &PATH.add(b'/').add(b'%');\npub(crate) const SPECIAL_PATH_SEGMENT: &AsciiSet = &PATH_SEGMENT.add(b'\\\\');\nconst QUERY: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'#').add(b'<').add(b'>');\nconst SPECIAL_QUERY: &AsciiSet = &QUERY.add(b'\\'');\n#[inline]\nfn fast_u16_to_str(buffer: &mut [u8; 5], mut value: u16) -> &str {\n    let mut index = buffer.len();\n    loop {\n        index -= 1;\n        buffer[index] = b'0' + (value % 10) as u8;\n        value /= 10;\n        if value == 0 {\n            break;\n        }\n    }\n    unsafe { core::str::from_utf8_unchecked(&buffer[index..]) }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1815 fn fast_u16_to_str(\n1816     // max 5 digits for u16 (65535)\n1817     buffer: &mut [u8; 5],\n1818     mut value: u16,\n1819 ) -> &str {\n1820     let mut index = buffer.len();\n1821 \n1822     loop {\n1823         index -= 1;\n1824         buffer[index] = b'0' + (value % 10) as u8;\n1825         value /= 10;\n1826         if value == 0 {\n1827             break;\n1828         }\n1829     }\n1830 \n1831     // SAFETY: we know the values in the buffer from the\n1832     // current index on will be a number\n1833     unsafe { core::str::from_utf8_unchecked(&buffer[index..]) }\n1834 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}