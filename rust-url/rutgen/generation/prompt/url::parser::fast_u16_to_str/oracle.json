{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/parser.rs\n// crate name is url\npub type ParseResult<T> = Result<T, ParseError>;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse core::fmt::{self, Formatter, Write};\nuse core::str;\nuse crate::host::{Host, HostInternal};\nuse crate::Url;\nuse form_urlencoded::EncodingOverride;\nuse percent_encoding::{percent_encode, utf8_percent_encode, AsciiSet, CONTROLS};\nconst FRAGMENT: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'<').add(b'>').add(b'`');\nconst PATH: &AsciiSet = &FRAGMENT.add(b'#').add(b'?').add(b'{').add(b'}');\npub(crate) const USERINFO: &AsciiSet = &PATH\n    .add(b'/')\n    .add(b':')\n    .add(b';')\n    .add(b'=')\n    .add(b'@')\n    .add(b'[')\n    .add(b'\\\\')\n    .add(b']')\n    .add(b'^')\n    .add(b'|');\npub(crate) const PATH_SEGMENT: &AsciiSet = &PATH.add(b'/').add(b'%');\npub(crate) const SPECIAL_PATH_SEGMENT: &AsciiSet = &PATH_SEGMENT.add(b'\\\\');\nconst QUERY: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'#').add(b'<').add(b'>');\nconst SPECIAL_QUERY: &AsciiSet = &QUERY.add(b'\\'');\n#[inline]\nfn fast_u16_to_str(buffer: &mut [u8; 5], mut value: u16) -> &str {\n    let mut index = buffer.len();\n    loop {\n        index -= 1;\n        buffer[index] = b'0' + (value % 10) as u8;\n        value /= 10;\n        if value == 0 {\n            break;\n        }\n    }\n    unsafe { core::str::from_utf8_unchecked(&buffer[index..]) }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1815 fn fast_u16_to_str(\n1816     // max 5 digits for u16 (65535)\n1817     buffer: &mut [u8; 5],\n1818     mut value: u16,\n1819 ) -> &str {\n1820     let mut index = buffer.len();\n1821 \n1822     loop {\n1823         index -= 1;\n1824         buffer[index] = b'0' + (value % 10) as u8;\n1825         value /= 10;\n1826         if value == 0 {\n1827             break;\n1828         }\n1829     }\n1830 \n1831     // SAFETY: we know the values in the buffer from the\n1832     // current index on will be a number\n1833     unsafe { core::str::from_utf8_unchecked(&buffer[index..]) }\n1834 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}