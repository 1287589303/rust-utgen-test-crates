{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/host.rs\n// crate name is url\nuse crate::net::{Ipv4Addr, Ipv6Addr};\nuse alloc::borrow::Cow;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::fmt::{self, Formatter};\nuse percent_encoding::{percent_decode, utf8_percent_encode, CONTROLS};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nuse crate::parser::{ParseError, ParseResult};\nfn parse_ipv4addr(input: &str) -> ParseResult<Ipv4Addr> {\n    let mut parts: Vec<&str> = input.split('.').collect();\n    if parts.last() == Some(&\"\") {\n        parts.pop();\n    }\n    if parts.len() > 4 {\n        return Err(ParseError::InvalidIpv4Address);\n    }\n    let mut numbers: Vec<u32> = Vec::new();\n    for part in parts {\n        match parse_ipv4number(part) {\n            Ok(Some(n)) => numbers.push(n),\n            Ok(None) => return Err(ParseError::InvalidIpv4Address),\n            Err(()) => return Err(ParseError::InvalidIpv4Address),\n        };\n    }\n    let mut ipv4 = numbers.pop().expect(\"a non-empty list of numbers\");\n    if ipv4 > u32::MAX >> (8 * numbers.len() as u32) {\n        return Err(ParseError::InvalidIpv4Address);\n    }\n    if numbers.iter().any(|x| *x > 255) {\n        return Err(ParseError::InvalidIpv4Address);\n    }\n    for (counter, n) in numbers.iter().enumerate() {\n        ipv4 += n << (8 * (3 - counter as u32));\n    }\n    Ok(Ipv4Addr::from(ipv4))\n}\nfn parse_ipv4number(mut input: &str) -> Result<Option<u32>, ()> {\n    if input.is_empty() {\n        return Err(());\n    }\n    let mut r = 10;\n    if input.starts_with(\"0x\") || input.starts_with(\"0X\") {\n        input = &input[2..];\n        r = 16;\n    } else if input.len() >= 2 && input.starts_with('0') {\n        input = &input[1..];\n        r = 8;\n    }\n    if input.is_empty() {\n        return Ok(Some(0));\n    }\n    let valid_number = match r {\n        8 => input.as_bytes().iter().all(|c| (b'0'..=b'7').contains(c)),\n        10 => input.as_bytes().iter().all(|c| c.is_ascii_digit()),\n        16 => input.as_bytes().iter().all(|c| c.is_ascii_hexdigit()),\n        _ => false,\n    };\n    if !valid_number {\n        return Err(());\n    }\n    match u32::from_str_radix(input, r) {\n        Ok(num) => Ok(Some(num)),\n        Err(_) => Ok(None),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// <https://url.spec.whatwg.org/#concept-ipv4-parser>\n298 fn parse_ipv4addr(input: &str) -> ParseResult<Ipv4Addr> {\n299     let mut parts: Vec<&str> = input.split('.').collect();\n300     if parts.last() == Some(&\"\") {\n301         parts.pop();\n302     }\n303     if parts.len() > 4 {\n304         return Err(ParseError::InvalidIpv4Address);\n305     }\n306     let mut numbers: Vec<u32> = Vec::new();\n307     for part in parts {\n308         match parse_ipv4number(part) {\n309             Ok(Some(n)) => numbers.push(n),\n310             Ok(None) => return Err(ParseError::InvalidIpv4Address), // u32 overflow\n311             Err(()) => return Err(ParseError::InvalidIpv4Address),\n312         };\n313     }\n314     let mut ipv4 = numbers.pop().expect(\"a non-empty list of numbers\");\n315     // Equivalent to: ipv4 >= 256 ** (4 âˆ’ numbers.len())\n316     if ipv4 > u32::MAX >> (8 * numbers.len() as u32) {\n317         return Err(ParseError::InvalidIpv4Address);\n318     }\n319     if numbers.iter().any(|x| *x > 255) {\n320         return Err(ParseError::InvalidIpv4Address);\n321     }\n322     for (counter, n) in numbers.iter().enumerate() {\n323         ipv4 += n << (8 * (3 - counter as u32))\n324     }\n325     Ok(Ipv4Addr::from(ipv4))\n326 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}