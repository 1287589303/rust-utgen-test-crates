{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/host.rs\n// crate name is url\nuse crate::net::{Ipv4Addr, Ipv6Addr};\nuse alloc::borrow::Cow;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::fmt::{self, Formatter};\nuse percent_encoding::{percent_decode, utf8_percent_encode, CONTROLS};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nuse crate::parser::{ParseError, ParseResult};\nfn parse_ipv4addr(input: &str) -> ParseResult<Ipv4Addr> {\n    let mut parts: Vec<&str> = input.split('.').collect();\n    if parts.last() == Some(&\"\") {\n        parts.pop();\n    }\n    if parts.len() > 4 {\n        return Err(ParseError::InvalidIpv4Address);\n    }\n    let mut numbers: Vec<u32> = Vec::new();\n    for part in parts {\n        match parse_ipv4number(part) {\n            Ok(Some(n)) => numbers.push(n),\n            Ok(None) => return Err(ParseError::InvalidIpv4Address),\n            Err(()) => return Err(ParseError::InvalidIpv4Address),\n        };\n    }\n    let mut ipv4 = numbers.pop().expect(\"a non-empty list of numbers\");\n    if ipv4 > u32::MAX >> (8 * numbers.len() as u32) {\n        return Err(ParseError::InvalidIpv4Address);\n    }\n    if numbers.iter().any(|x| *x > 255) {\n        return Err(ParseError::InvalidIpv4Address);\n    }\n    for (counter, n) in numbers.iter().enumerate() {\n        ipv4 += n << (8 * (3 - counter as u32));\n    }\n    Ok(Ipv4Addr::from(ipv4))\n}\nfn parse_ipv4number(mut input: &str) -> Result<Option<u32>, ()> {\n    if input.is_empty() {\n        return Err(());\n    }\n    let mut r = 10;\n    if input.starts_with(\"0x\") || input.starts_with(\"0X\") {\n        input = &input[2..];\n        r = 16;\n    } else if input.len() >= 2 && input.starts_with('0') {\n        input = &input[1..];\n        r = 8;\n    }\n    if input.is_empty() {\n        return Ok(Some(0));\n    }\n    let valid_number = match r {\n        8 => input.as_bytes().iter().all(|c| (b'0'..=b'7').contains(c)),\n        10 => input.as_bytes().iter().all(|c| c.is_ascii_digit()),\n        16 => input.as_bytes().iter().all(|c| c.is_ascii_hexdigit()),\n        _ => false,\n    };\n    if !valid_number {\n        return Err(());\n    }\n    match u32::from_str_radix(input, r) {\n        Ok(num) => Ok(Some(num)),\n        Err(_) => Ok(None),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// <https://url.spec.whatwg.org/#concept-ipv4-parser>\n298 fn parse_ipv4addr(input: &str) -> ParseResult<Ipv4Addr> {\n299     let mut parts: Vec<&str> = input.split('.').collect();\n300     if parts.last() == Some(&\"\") {\n301         parts.pop();\n302     }\n303     if parts.len() > 4 {\n304         return Err(ParseError::InvalidIpv4Address);\n305     }\n306     let mut numbers: Vec<u32> = Vec::new();\n307     for part in parts {\n308         match parse_ipv4number(part) {\n309             Ok(Some(n)) => numbers.push(n),\n310             Ok(None) => return Err(ParseError::InvalidIpv4Address), // u32 overflow\n311             Err(()) => return Err(ParseError::InvalidIpv4Address),\n312         };\n313     }\n314     let mut ipv4 = numbers.pop().expect(\"a non-empty list of numbers\");\n315     // Equivalent to: ipv4 >= 256 ** (4 âˆ’ numbers.len())\n316     if ipv4 > u32::MAX >> (8 * numbers.len() as u32) {\n317         return Err(ParseError::InvalidIpv4Address);\n318     }\n319     if numbers.iter().any(|x| *x > 255) {\n320         return Err(ParseError::InvalidIpv4Address);\n321     }\n322     for (counter, n) in numbers.iter().enumerate() {\n323         ipv4 += n << (8 * (3 - counter as u32))\n324     }\n325     Ok(Ipv4Addr::from(ipv4))\n326 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}