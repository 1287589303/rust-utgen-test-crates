{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\npub struct FragmentIdentifier<'a>(&'a str);\nimpl FragmentIdentifier<'_> {\n    pub fn to_percent_encoded(&self) -> String {\n        let mut string = String::new();\n        for byte in self.0.bytes() {\n            match byte {\n                b'\\t' | b'\\n' | b'\\r' => continue,\n                b'\\0'..=b' ' | b'\"' | b'<' | b'>' | b'`' | b'\\x7F'..=b'\\xFF' => {\n                    percent_encode(byte, &mut string)\n                }\n                _ => string.push(byte as char),\n            }\n        }\n        string\n    }\n}\nfn percent_encode(byte: u8, string: &mut String) {\n    const HEX_UPPER: [u8; 16] = *b\"0123456789ABCDEF\";\n    string.push('%');\n    string.push(HEX_UPPER[(byte >> 4) as usize] as char);\n    string.push(HEX_UPPER[(byte & 0x0f) as usize] as char);\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Like in a parsed URL\n129 pub fn to_percent_encoded(&self) -> String {\n130     let mut string = String::new();\n131     for byte in self.0.bytes() {\n132         match byte {\n133             // Ignore ASCII tabs or newlines like the URL parser would\n134             b'\\t' | b'\\n' | b'\\r' => continue,\n135             // https://url.spec.whatwg.org/#fragment-percent-encode-set\n136             b'\\0'..=b' ' | b'\"' | b'<' | b'>' | b'`' | b'\\x7F'..=b'\\xFF' => {\n137                 percent_encode(byte, &mut string)\n138             }\n139             // Printable ASCII\n140             _ => string.push(byte as char),\n141         }\n142     }\n143     string\n144 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}