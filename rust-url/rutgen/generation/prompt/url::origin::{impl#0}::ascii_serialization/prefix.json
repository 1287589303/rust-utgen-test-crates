{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/origin.rs\n// crate name is url\nuse crate::host::Host;\nuse crate::parser::default_port;\nuse crate::Url;\nuse alloc::borrow::ToOwned;\nuse alloc::format;\nuse alloc::string::String;\nuse core::sync::atomic::{AtomicUsize, Ordering};\n#[derive(Eq, PartialEq, Hash, Clone, Debug)]\npub struct OpaqueOrigin(usize);\n#[derive(PartialEq, Eq, Hash, Clone, Debug)]\npub enum Origin {\n    /// A globally unique identifier\n    Opaque(OpaqueOrigin),\n    /// Consists of the URL's scheme, host and port\n    Tuple(String, Host<String>, u16),\n}\n#[cfg_attr(feature = \"serde\", derive(Deserialize, Serialize))]\n#[derive(Clone, Debug, Eq, Ord, PartialOrd, Hash)]\npub enum Host<S = String> {\n    /// A DNS domain name, as '.' dot-separated labels.\n    /// Non-ASCII labels are encoded in punycode per IDNA if this is the host of\n    /// a special URL, or percent encoded for non-special URLs. Hosts for\n    /// non-special URLs are also called opaque hosts.\n    Domain(S),\n    /// An IPv4 address.\n    /// `Url::host_str` returns the serialization of this address,\n    /// as four decimal integers separated by `.` dots.\n    Ipv4(Ipv4Addr),\n    /// An IPv6 address.\n    /// `Url::host_str` returns the serialization of that address between `[` and `]` brackets,\n    /// in the format per [RFC 5952 *A Recommendation\n    /// for IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\n    /// lowercase hexadecimal with maximal `::` compression.\n    Ipv6(Ipv6Addr),\n}\nimpl Origin {\n    pub fn new_opaque() -> Origin {}\n    pub fn is_tuple(&self) -> bool {}\n    pub fn ascii_serialization(&self) -> String {\n        match *self {\n            Origin::Opaque(_) => \"null\".to_owned(),\n            Origin::Tuple(ref scheme, ref host, port) => {\n                if default_port(scheme) == Some(port) {\n                    format!(\"{}://{}\", scheme, host)\n                } else {\n                    format!(\"{}://{}:{}\", scheme, host, port)\n                }\n            }\n        }\n    }\n    pub fn unicode_serialization(&self) -> String {}\n}\npub fn default_port(scheme: &str) -> Option<u16> {\n    match scheme {\n        \"http\" | \"ws\" => Some(80),\n        \"https\" | \"wss\" => Some(443),\n        \"ftp\" => Some(21),\n        _ => None,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// <https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin>\n78 pub fn ascii_serialization(&self) -> String {\n79     match *self {\n80         Origin::Opaque(_) => \"null\".to_owned(),\n81         Origin::Tuple(ref scheme, ref host, port) => {\n82             if default_port(scheme) == Some(port) {\n83                 format!(\"{}://{}\", scheme, host)\n84             } else {\n85                 format!(\"{}://{}:{}\", scheme, host, port)\n86             }\n87         }\n88     }\n89 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}