{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/origin.rs\n// crate name is url\nuse crate::host::Host;\nuse crate::parser::default_port;\nuse crate::Url;\nuse alloc::borrow::ToOwned;\nuse alloc::format;\nuse alloc::string::String;\nuse core::sync::atomic::{AtomicUsize, Ordering};\n#[derive(Eq, PartialEq, Hash, Clone, Debug)]\npub struct OpaqueOrigin(usize);\n#[derive(PartialEq, Eq, Hash, Clone, Debug)]\npub enum Origin {\n    /// A globally unique identifier\n    Opaque(OpaqueOrigin),\n    /// Consists of the URL's scheme, host and port\n    Tuple(String, Host<String>, u16),\n}\n#[cfg_attr(feature = \"serde\", derive(Deserialize, Serialize))]\n#[derive(Clone, Debug, Eq, Ord, PartialOrd, Hash)]\npub enum Host<S = String> {\n    /// A DNS domain name, as '.' dot-separated labels.\n    /// Non-ASCII labels are encoded in punycode per IDNA if this is the host of\n    /// a special URL, or percent encoded for non-special URLs. Hosts for\n    /// non-special URLs are also called opaque hosts.\n    Domain(S),\n    /// An IPv4 address.\n    /// `Url::host_str` returns the serialization of this address,\n    /// as four decimal integers separated by `.` dots.\n    Ipv4(Ipv4Addr),\n    /// An IPv6 address.\n    /// `Url::host_str` returns the serialization of that address between `[` and `]` brackets,\n    /// in the format per [RFC 5952 *A Recommendation\n    /// for IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\n    /// lowercase hexadecimal with maximal `::` compression.\n    Ipv6(Ipv6Addr),\n}\nimpl Origin {\n    pub fn new_opaque() -> Origin {}\n    pub fn is_tuple(&self) -> bool {}\n    pub fn ascii_serialization(&self) -> String {\n        match *self {\n            Origin::Opaque(_) => \"null\".to_owned(),\n            Origin::Tuple(ref scheme, ref host, port) => {\n                if default_port(scheme) == Some(port) {\n                    format!(\"{}://{}\", scheme, host)\n                } else {\n                    format!(\"{}://{}:{}\", scheme, host, port)\n                }\n            }\n        }\n    }\n    pub fn unicode_serialization(&self) -> String {}\n}\npub fn default_port(scheme: &str) -> Option<u16> {\n    match scheme {\n        \"http\" | \"ws\" => Some(80),\n        \"https\" | \"wss\" => Some(443),\n        \"ftp\" => Some(21),\n        _ => None,\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// <https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin>\n78 pub fn ascii_serialization(&self) -> String {\n79     match *self {\n80         Origin::Opaque(_) => \"null\".to_owned(),\n81         Origin::Tuple(ref scheme, ref host, port) => {\n82             if default_port(scheme) == Some(port) {\n83                 format!(\"{}://{}\", scheme, host)\n84             } else {\n85                 format!(\"{}://{}:{}\", scheme, host, port)\n86             }\n87         }\n88     }\n89 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}