{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\n#[derive(Debug, PartialEq, Eq)]\npub struct Mime {\n    pub type_: String,\n    pub subtype: String,\n    /// (name, value)\n    pub parameters: Vec<(String, String)>,\n}\n#[derive(Debug)]\npub struct MimeParsingError(());\nfn parse_header(from_colon_to_comma: &str) -> (mime::Mime, bool) {\n    let trimmed = from_colon_to_comma\n        .trim_matches(|c| matches!(c, ' ' | '\\t' | '\\n' | '\\r'));\n    let without_base64_suffix = remove_base64_suffix(trimmed);\n    let base64 = without_base64_suffix.is_some();\n    let mime_type = without_base64_suffix.unwrap_or(trimmed);\n    let mut string = String::new();\n    if mime_type.starts_with(';') {\n        string.push_str(\"text/plain\")\n    }\n    let mut in_query = false;\n    for byte in mime_type.bytes() {\n        match byte {\n            b'\\t' | b'\\n' | b'\\r' => continue,\n            b'\\0'..=b'\\x1F' | b'\\x7F'..=b'\\xFF' => percent_encode(byte, &mut string),\n            b' ' | b'\"' | b'<' | b'>' if in_query => percent_encode(byte, &mut string),\n            b'?' => {\n                in_query = true;\n                string.push('?')\n            }\n            _ => string.push(byte as char),\n        }\n    }\n    let mime_type = string\n        .parse()\n        .unwrap_or_else(|_| mime::Mime {\n            type_: String::from(\"text\"),\n            subtype: String::from(\"plain\"),\n            parameters: vec![(String::from(\"charset\"), String::from(\"US-ASCII\"))],\n        });\n    (mime_type, base64)\n}\n#[allow(clippy::skip_while_next)]\nfn remove_base64_suffix(s: &str) -> Option<&str> {\n    let mut bytes = s.bytes();\n    {\n        let iter = bytes.by_ref().filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));\n        let mut iter = iter.rev();\n        require!(iter.next() ? == b'4');\n        require!(iter.next() ? == b'6');\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'e'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b's'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'a'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'b'));\n        require!(iter.skip_while(|& byte | byte == b' ').next() ? == b';');\n    }\n    Some(&s[..bytes.len()])\n}\nfn percent_encode(byte: u8, string: &mut String) {\n    const HEX_UPPER: [u8; 16] = *b\"0123456789ABCDEF\";\n    string.push('%');\n    string.push(HEX_UPPER[(byte >> 4) as usize] as char);\n    string.push(HEX_UPPER[(byte & 0x0f) as usize] as char);\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n193 fn parse_header(from_colon_to_comma: &str) -> (mime::Mime, bool) {\n194     // \"Strip leading and trailing ASCII whitespace\"\n195     //     \\t, \\n, and \\r would have been filtered by the URL parser\n196     //     \\f percent-encoded by the URL parser\n197     //     space is the only remaining ASCII whitespace\n198     let trimmed = from_colon_to_comma.trim_matches(|c| matches!(c, ' ' | '\\t' | '\\n' | '\\r'));\n199 \n200     let without_base64_suffix = remove_base64_suffix(trimmed);\n201     let base64 = without_base64_suffix.is_some();\n202     let mime_type = without_base64_suffix.unwrap_or(trimmed);\n203 \n204     let mut string = String::new();\n205     if mime_type.starts_with(';') {\n206         string.push_str(\"text/plain\")\n207     }\n208     let mut in_query = false;\n209     for byte in mime_type.bytes() {\n210         match byte {\n211             // Ignore ASCII tabs or newlines like the URL parser would\n212             b'\\t' | b'\\n' | b'\\r' => continue,\n213 \n214             // https://url.spec.whatwg.org/#c0-control-percent-encode-set\n215             b'\\0'..=b'\\x1F' | b'\\x7F'..=b'\\xFF' => percent_encode(byte, &mut string),\n216 \n217             // Bytes other than the C0 percent-encode set that are percent-encoded\n218             // by the URL parser in the query state.\n219             // '#' is also in that list but cannot occur here\n220             // since it indicates the start of the URL’s fragment.\n221             b' ' | b'\"' | b'<' | b'>' if in_query => percent_encode(byte, &mut string),\n222 \n223             b'?' => {\n224                 in_query = true;\n225                 string.push('?')\n226             }\n227 \n228             // Printable ASCII\n229             _ => string.push(byte as char),\n230         }\n231     }\n232 \n233     // FIXME: does Mime::from_str match the MIME Sniffing Standard’s parsing algorithm?\n234     // <https://mimesniff.spec.whatwg.org/#parse-a-mime-type>\n235     let mime_type = string.parse().unwrap_or_else(|_| mime::Mime {\n236         type_: String::from(\"text\"),\n237         subtype: String::from(\"plain\"),\n238         parameters: vec![(String::from(\"charset\"), String::from(\"US-ASCII\"))],\n239     });\n240 \n241     (mime_type, base64)\n242 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}