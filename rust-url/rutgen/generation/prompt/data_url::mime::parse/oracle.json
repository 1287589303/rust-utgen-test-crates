{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/mime.rs\n// crate name is data_url\nuse alloc::{borrow::ToOwned, string::String, vec::Vec};\nuse core::fmt::{self, Write};\nuse core::str::FromStr;\n#[rustfmt::skip]\nstatic IS_HTTP_TOKEN: [bool; 256] = byte_map![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0,\n];\n#[derive(Debug, PartialEq, Eq)]\npub struct Mime {\n    pub type_: String,\n    pub subtype: String,\n    /// (name, value)\n    pub parameters: Vec<(String, String)>,\n}\nfn parse(s: &str) -> Option<Mime> {\n    let trimmed = s.trim_matches(http_whitespace);\n    let (type_, rest) = split2(trimmed, '/');\n    require!(only_http_token_code_points(type_) && ! type_.is_empty());\n    let (subtype, rest) = split2(rest?, ';');\n    let subtype = subtype.trim_end_matches(http_whitespace);\n    require!(only_http_token_code_points(subtype) && ! subtype.is_empty());\n    let mut parameters = Vec::new();\n    if let Some(rest) = rest {\n        parse_parameters(rest, &mut parameters)\n    }\n    Some(Mime {\n        type_: type_.to_ascii_lowercase(),\n        subtype: subtype.to_ascii_lowercase(),\n        parameters,\n    })\n}\nfn parse_parameters(s: &str, parameters: &mut Vec<(String, String)>) {\n    let mut semicolon_separated = s.split(';');\n    while let Some(piece) = semicolon_separated.next() {\n        let piece = piece.trim_start_matches(http_whitespace);\n        let (name, value) = split2(piece, '=');\n        let name_valid = !name.is_empty() && only_http_token_code_points(name)\n            && !contains(parameters, name);\n        if let Some(value) = value {\n            let value = if let Some(stripped) = value.strip_prefix('\"') {\n                let max_len = stripped.len().saturating_sub(1);\n                let mut unescaped_value = String::with_capacity(max_len);\n                let mut chars = stripped.chars();\n                'until_closing_quote: loop {\n                    while let Some(c) = chars.next() {\n                        match c {\n                            '\"' => break 'until_closing_quote,\n                            '\\\\' => {\n                                unescaped_value\n                                    .push(\n                                        chars\n                                            .next()\n                                            .unwrap_or_else(|| {\n                                                semicolon_separated\n                                                    .next()\n                                                    .map(|piece| {\n                                                        chars = piece.chars();\n                                                        ';'\n                                                    })\n                                                    .unwrap_or('\\\\')\n                                            }),\n                                    )\n                            }\n                            _ => unescaped_value.push(c),\n                        }\n                    }\n                    if let Some(piece) = semicolon_separated.next() {\n                        unescaped_value.push(';');\n                        chars = piece.chars();\n                    } else {\n                        break;\n                    }\n                }\n                if !name_valid || !valid_value(value) {\n                    continue;\n                }\n                unescaped_value\n            } else {\n                let value = value.trim_end_matches(http_whitespace);\n                if value.is_empty() {\n                    continue;\n                }\n                if !name_valid || !valid_value(value) {\n                    continue;\n                }\n                value.to_owned()\n            };\n            parameters.push((name.to_ascii_lowercase(), value))\n        }\n    }\n}\nfn only_http_token_code_points(s: &str) -> bool {\n    s.bytes().all(|byte| IS_HTTP_TOKEN[byte as usize])\n}\nfn split2(s: &str, separator: char) -> (&str, Option<&str>) {\n    let mut iter = s.splitn(2, separator);\n    let first = iter.next().unwrap();\n    (first, iter.next())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n47 fn parse(s: &str) -> Option<Mime> {\n48     let trimmed = s.trim_matches(http_whitespace);\n49 \n50     let (type_, rest) = split2(trimmed, '/');\n51     require!(only_http_token_code_points(type_) && !type_.is_empty());\n52 \n53     let (subtype, rest) = split2(rest?, ';');\n54     let subtype = subtype.trim_end_matches(http_whitespace);\n55     require!(only_http_token_code_points(subtype) && !subtype.is_empty());\n56 \n57     let mut parameters = Vec::new();\n58     if let Some(rest) = rest {\n59         parse_parameters(rest, &mut parameters)\n60     }\n61 \n62     Some(Mime {\n63         type_: type_.to_ascii_lowercase(),\n64         subtype: subtype.to_ascii_lowercase(),\n65         parameters,\n66     })\n67 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}