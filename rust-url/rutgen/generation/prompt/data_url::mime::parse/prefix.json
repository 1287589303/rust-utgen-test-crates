{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/mime.rs\n// crate name is data_url\nuse alloc::{borrow::ToOwned, string::String, vec::Vec};\nuse core::fmt::{self, Write};\nuse core::str::FromStr;\n#[rustfmt::skip]\nstatic IS_HTTP_TOKEN: [bool; 256] = byte_map![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0,\n];\n#[derive(Debug, PartialEq, Eq)]\npub struct Mime {\n    pub type_: String,\n    pub subtype: String,\n    /// (name, value)\n    pub parameters: Vec<(String, String)>,\n}\nfn parse(s: &str) -> Option<Mime> {\n    let trimmed = s.trim_matches(http_whitespace);\n    let (type_, rest) = split2(trimmed, '/');\n    require!(only_http_token_code_points(type_) && ! type_.is_empty());\n    let (subtype, rest) = split2(rest?, ';');\n    let subtype = subtype.trim_end_matches(http_whitespace);\n    require!(only_http_token_code_points(subtype) && ! subtype.is_empty());\n    let mut parameters = Vec::new();\n    if let Some(rest) = rest {\n        parse_parameters(rest, &mut parameters)\n    }\n    Some(Mime {\n        type_: type_.to_ascii_lowercase(),\n        subtype: subtype.to_ascii_lowercase(),\n        parameters,\n    })\n}\nfn parse_parameters(s: &str, parameters: &mut Vec<(String, String)>) {\n    let mut semicolon_separated = s.split(';');\n    while let Some(piece) = semicolon_separated.next() {\n        let piece = piece.trim_start_matches(http_whitespace);\n        let (name, value) = split2(piece, '=');\n        let name_valid = !name.is_empty() && only_http_token_code_points(name)\n            && !contains(parameters, name);\n        if let Some(value) = value {\n            let value = if let Some(stripped) = value.strip_prefix('\"') {\n                let max_len = stripped.len().saturating_sub(1);\n                let mut unescaped_value = String::with_capacity(max_len);\n                let mut chars = stripped.chars();\n                'until_closing_quote: loop {\n                    while let Some(c) = chars.next() {\n                        match c {\n                            '\"' => break 'until_closing_quote,\n                            '\\\\' => {\n                                unescaped_value\n                                    .push(\n                                        chars\n                                            .next()\n                                            .unwrap_or_else(|| {\n                                                semicolon_separated\n                                                    .next()\n                                                    .map(|piece| {\n                                                        chars = piece.chars();\n                                                        ';'\n                                                    })\n                                                    .unwrap_or('\\\\')\n                                            }),\n                                    )\n                            }\n                            _ => unescaped_value.push(c),\n                        }\n                    }\n                    if let Some(piece) = semicolon_separated.next() {\n                        unescaped_value.push(';');\n                        chars = piece.chars();\n                    } else {\n                        break;\n                    }\n                }\n                if !name_valid || !valid_value(value) {\n                    continue;\n                }\n                unescaped_value\n            } else {\n                let value = value.trim_end_matches(http_whitespace);\n                if value.is_empty() {\n                    continue;\n                }\n                if !name_valid || !valid_value(value) {\n                    continue;\n                }\n                value.to_owned()\n            };\n            parameters.push((name.to_ascii_lowercase(), value))\n        }\n    }\n}\nfn only_http_token_code_points(s: &str) -> bool {\n    s.bytes().all(|byte| IS_HTTP_TOKEN[byte as usize])\n}\nfn split2(s: &str, separator: char) -> (&str, Option<&str>) {\n    let mut iter = s.splitn(2, separator);\n    let first = iter.next().unwrap();\n    (first, iter.next())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n47 fn parse(s: &str) -> Option<Mime> {\n48     let trimmed = s.trim_matches(http_whitespace);\n49 \n50     let (type_, rest) = split2(trimmed, '/');\n51     require!(only_http_token_code_points(type_) && !type_.is_empty());\n52 \n53     let (subtype, rest) = split2(rest?, ';');\n54     let subtype = subtype.trim_end_matches(http_whitespace);\n55     require!(only_http_token_code_points(subtype) && !subtype.is_empty());\n56 \n57     let mut parameters = Vec::new();\n58     if let Some(rest) = rest {\n59         parse_parameters(rest, &mut parameters)\n60     }\n61 \n62     Some(Mime {\n63         type_: type_.to_ascii_lowercase(),\n64         subtype: subtype.to_ascii_lowercase(),\n65         parameters,\n66     })\n67 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}