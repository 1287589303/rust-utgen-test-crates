{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// form_urlencoded/src/lib.rs\n// crate name is form_urlencoded\npub type EncodingOverride<'a> = Option<&'a dyn Fn(&str) -> Cow<'_, [u8]>>;\nuse alloc::borrow::{Borrow, Cow, ToOwned};\nuse alloc::string::String;\nuse core::str;\nuse percent_encoding::{percent_decode, percent_encode_byte};\n#[allow(ambiguous_wide_pointer_comparisons)]\npub(crate) fn decode_utf8_lossy(input: Cow<'_, [u8]>) -> Cow<'_, str> {\n    match input {\n        Cow::Borrowed(bytes) => String::from_utf8_lossy(bytes),\n        Cow::Owned(bytes) => {\n            match String::from_utf8_lossy(&bytes) {\n                Cow::Borrowed(utf8) => {\n                    let raw_utf8: *const [u8] = utf8.as_bytes();\n                    debug_assert!(raw_utf8 == &* bytes as * const [u8]);\n                    Cow::Owned(unsafe { String::from_utf8_unchecked(bytes) })\n                }\n                Cow::Owned(s) => Cow::Owned(s),\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n402 pub(crate) fn decode_utf8_lossy(input: Cow<'_, [u8]>) -> Cow<'_, str> {\n403     // Note: This function is duplicated in `percent_encoding/lib.rs`.\n404     match input {\n405         Cow::Borrowed(bytes) => String::from_utf8_lossy(bytes),\n406         Cow::Owned(bytes) => {\n407             match String::from_utf8_lossy(&bytes) {\n408                 Cow::Borrowed(utf8) => {\n409                     // If from_utf8_lossy returns a Cow::Borrowed, then we can\n410                     // be sure our original bytes were valid UTF-8. This is because\n411                     // if the bytes were invalid UTF-8 from_utf8_lossy would have\n412                     // to allocate a new owned string to back the Cow so it could\n413                     // replace invalid bytes with a placeholder.\n414 \n415                     // First we do a debug_assert to confirm our description above.\n416                     let raw_utf8: *const [u8] = utf8.as_bytes();\n417                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);\n418 \n419                     // Given we know the original input bytes are valid UTF-8,\n420                     // and we have ownership of those bytes, we re-use them and\n421                     // return a Cow::Owned here.\n422                     Cow::Owned(unsafe { String::from_utf8_unchecked(bytes) })\n423                 }\n424                 Cow::Owned(s) => Cow::Owned(s),\n425             }\n426         }\n427     }\n428 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}