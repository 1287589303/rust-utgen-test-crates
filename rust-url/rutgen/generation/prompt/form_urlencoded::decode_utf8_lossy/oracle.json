{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// form_urlencoded/src/lib.rs\n// crate name is form_urlencoded\npub type EncodingOverride<'a> = Option<&'a dyn Fn(&str) -> Cow<'_, [u8]>>;\nuse alloc::borrow::{Borrow, Cow, ToOwned};\nuse alloc::string::String;\nuse core::str;\nuse percent_encoding::{percent_decode, percent_encode_byte};\n#[allow(ambiguous_wide_pointer_comparisons)]\npub(crate) fn decode_utf8_lossy(input: Cow<'_, [u8]>) -> Cow<'_, str> {\n    match input {\n        Cow::Borrowed(bytes) => String::from_utf8_lossy(bytes),\n        Cow::Owned(bytes) => {\n            match String::from_utf8_lossy(&bytes) {\n                Cow::Borrowed(utf8) => {\n                    let raw_utf8: *const [u8] = utf8.as_bytes();\n                    debug_assert!(raw_utf8 == &* bytes as * const [u8]);\n                    Cow::Owned(unsafe { String::from_utf8_unchecked(bytes) })\n                }\n                Cow::Owned(s) => Cow::Owned(s),\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n402 pub(crate) fn decode_utf8_lossy(input: Cow<'_, [u8]>) -> Cow<'_, str> {\n403     // Note: This function is duplicated in `percent_encoding/lib.rs`.\n404     match input {\n405         Cow::Borrowed(bytes) => String::from_utf8_lossy(bytes),\n406         Cow::Owned(bytes) => {\n407             match String::from_utf8_lossy(&bytes) {\n408                 Cow::Borrowed(utf8) => {\n409                     // If from_utf8_lossy returns a Cow::Borrowed, then we can\n410                     // be sure our original bytes were valid UTF-8. This is because\n411                     // if the bytes were invalid UTF-8 from_utf8_lossy would have\n412                     // to allocate a new owned string to back the Cow so it could\n413                     // replace invalid bytes with a placeholder.\n414 \n415                     // First we do a debug_assert to confirm our description above.\n416                     let raw_utf8: *const [u8] = utf8.as_bytes();\n417                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);\n418 \n419                     // Given we know the original input bytes are valid UTF-8,\n420                     // and we have ownership of those bytes, we re-use them and\n421                     // return a Cow::Owned here.\n422                     Cow::Owned(unsafe { String::from_utf8_unchecked(bytes) })\n423                 }\n424                 Cow::Owned(s) => Cow::Owned(s),\n425             }\n426         }\n427     }\n428 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}