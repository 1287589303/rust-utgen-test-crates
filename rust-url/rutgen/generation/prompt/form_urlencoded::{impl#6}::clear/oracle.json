{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// form_urlencoded/src/lib.rs\n// crate name is form_urlencoded\npub type EncodingOverride<'a> = Option<&'a dyn Fn(&str) -> Cow<'_, [u8]>>;\nuse alloc::borrow::{Borrow, Cow, ToOwned};\nuse alloc::string::String;\nuse core::str;\nuse percent_encoding::{percent_decode, percent_encode_byte};\npub trait Target {\n    type Finished;\n    fn as_mut_string(&mut self) -> &mut String;\n    fn finish(self) -> Self::Finished;\n}\npub struct Serializer<'a, T: Target> {\n    target: Option<T>,\n    start_position: usize,\n    encoding: EncodingOverride<'a>,\n}\nimpl<'a, T: Target> Serializer<'a, T> {\n    pub fn new(target: T) -> Self {\n        Self::for_suffix(target, 0)\n    }\n    pub fn for_suffix(mut target: T, start_position: usize) -> Self {\n        if target.as_mut_string().len() < start_position {\n            panic!(\n                \"invalid length {} for target of length {}\", start_position, target\n                .as_mut_string().len()\n            );\n        }\n        Serializer {\n            target: Some(target),\n            start_position,\n            encoding: None,\n        }\n    }\n    pub fn clear(&mut self) -> &mut Self {\n        string(&mut self.target).truncate(self.start_position);\n        self\n    }\n    pub fn encoding_override(&mut self, new: EncodingOverride<'a>) -> &mut Self {\n        self.encoding = new;\n        self\n    }\n    pub fn append_pair(&mut self, name: &str, value: &str) -> &mut Self {\n        append_pair(\n            string(&mut self.target),\n            self.start_position,\n            self.encoding,\n            name,\n            value,\n        );\n        self\n    }\n    pub fn append_key_only(&mut self, name: &str) -> &mut Self {\n        append_key_only(\n            string(&mut self.target),\n            self.start_position,\n            self.encoding,\n            name,\n        );\n        self\n    }\n    pub fn extend_pairs<I, K, V>(&mut self, iter: I) -> &mut Self\n    where\n        I: IntoIterator,\n        I::Item: Borrow<(K, V)>,\n        K: AsRef<str>,\n        V: AsRef<str>,\n    {\n        {\n            let string = string(&mut self.target);\n            for pair in iter {\n                let (k, v) = pair.borrow();\n                append_pair(\n                    string,\n                    self.start_position,\n                    self.encoding,\n                    k.as_ref(),\n                    v.as_ref(),\n                );\n            }\n        }\n        self\n    }\n    pub fn extend_keys_only<I, K>(&mut self, iter: I) -> &mut Self\n    where\n        I: IntoIterator,\n        I::Item: Borrow<K>,\n        K: AsRef<str>,\n    {\n        {\n            let string = string(&mut self.target);\n            for key in iter {\n                let k = key.borrow().as_ref();\n                append_key_only(string, self.start_position, self.encoding, k);\n            }\n        }\n        self\n    }\n    pub fn finish(&mut self) -> T::Finished {}\n}\nfn string<T: Target>(target: &mut Option<T>) -> &mut String {\n    target.as_mut().expect(\"url::form_urlencoded::Serializer finished\").as_mut_string()\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Remove any existing name/value pair.\n///\n/// Panics if called after `.finish()`.\n241 pub fn clear(&mut self) -> &mut Self {\n242     string(&mut self.target).truncate(self.start_position);\n243     self\n244 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}