{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/parser.rs\n// crate name is url\npub type ParseResult<T> = Result<T, ParseError>;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse core::fmt::{self, Formatter, Write};\nuse core::str;\nuse crate::host::{Host, HostInternal};\nuse crate::Url;\nuse form_urlencoded::EncodingOverride;\nuse percent_encoding::{percent_encode, utf8_percent_encode, AsciiSet, CONTROLS};\nconst FRAGMENT: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'<').add(b'>').add(b'`');\nconst PATH: &AsciiSet = &FRAGMENT.add(b'#').add(b'?').add(b'{').add(b'}');\npub(crate) const USERINFO: &AsciiSet = &PATH\n    .add(b'/')\n    .add(b':')\n    .add(b';')\n    .add(b'=')\n    .add(b'@')\n    .add(b'[')\n    .add(b'\\\\')\n    .add(b']')\n    .add(b'^')\n    .add(b'|');\npub(crate) const PATH_SEGMENT: &AsciiSet = &PATH.add(b'/').add(b'%');\npub(crate) const SPECIAL_PATH_SEGMENT: &AsciiSet = &PATH_SEGMENT.add(b'\\\\');\nconst QUERY: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'#').add(b'<').add(b'>');\nconst SPECIAL_QUERY: &AsciiSet = &QUERY.add(b'\\'');\npub trait Pattern {\n    fn split_prefix(self, input: &mut Input) -> bool;\n}\n#[derive(Clone, Debug)]\npub struct Input<'i> {\n    chars: str::Chars<'i>,\n}\nimpl<F: FnMut(char) -> bool> Pattern for F {\n    fn split_prefix(self, input: &mut Input) -> bool {\n        input.next().map_or(false, self)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n311 fn split_prefix(self, input: &mut Input) -> bool {\n312     for c in self.chars() {\n313         if input.next() != Some(c) {\n314             return false;\n315         }\n316     }\n317     true\n318 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}