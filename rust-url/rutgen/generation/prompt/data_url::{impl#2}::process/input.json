{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\npub struct DataUrl<'a> {\n    mime_type: mime::Mime,\n    base64: bool,\n    encoded_body_plus_fragment: &'a str,\n}\n#[derive(Debug, PartialEq, Eq)]\npub struct Mime {\n    pub type_: String,\n    pub subtype: String,\n    /// (name, value)\n    pub parameters: Vec<(String, String)>,\n}\n#[derive(Debug)]\npub enum DataUrlError {\n    NotADataUrl,\n    NoComma,\n}\nimpl<'a> DataUrl<'a> {\n    pub fn process(input: &'a str) -> Result<Self, DataUrlError> {\n        use crate::DataUrlError::*;\n        let after_colon = pretend_parse_data_url(input).ok_or(NotADataUrl)?;\n        let (from_colon_to_comma, encoded_body_plus_fragment) = find_comma_before_fragment(\n                after_colon,\n            )\n            .ok_or(NoComma)?;\n        let (mime_type, base64) = parse_header(from_colon_to_comma);\n        Ok(DataUrl {\n            mime_type,\n            base64,\n            encoded_body_plus_fragment,\n        })\n    }\n    pub fn mime_type(&self) -> &mime::Mime {}\n    pub fn decode<F, E>(\n        &self,\n        write_body_bytes: F,\n    ) -> Result<Option<FragmentIdentifier<'a>>, forgiving_base64::DecodeError<E>>\n    where\n        F: FnMut(&[u8]) -> Result<(), E>,\n    {}\n    pub fn decode_to_vec(\n        &self,\n    ) -> Result<\n        (Vec<u8>, Option<FragmentIdentifier<'a>>),\n        forgiving_base64::InvalidBase64,\n    > {}\n}\nfn find_comma_before_fragment(after_colon: &str) -> Option<(&str, &str)> {\n    for (i, byte) in after_colon.bytes().enumerate() {\n        if byte == b',' {\n            return Some((&after_colon[..i], &after_colon[i + 1..]));\n        }\n        if byte == b'#' {\n            break;\n        }\n    }\n    None\n}\nfn pretend_parse_data_url(input: &str) -> Option<&str> {\n    let left_trimmed = input.trim_start_matches(|ch| ch <= ' ');\n    let mut bytes = left_trimmed.bytes();\n    {\n        let mut iter = bytes\n            .by_ref()\n            .filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'd'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'a'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b't'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'a'));\n        require!(iter.next() ? == b':');\n    }\n    let bytes_consumed = left_trimmed.len() - bytes.len();\n    let after_colon = &left_trimmed[bytes_consumed..];\n    Some(after_colon.trim_end_matches(|ch| ch <= ' '))\n}\nfn parse_header(from_colon_to_comma: &str) -> (mime::Mime, bool) {\n    let trimmed = from_colon_to_comma\n        .trim_matches(|c| matches!(c, ' ' | '\\t' | '\\n' | '\\r'));\n    let without_base64_suffix = remove_base64_suffix(trimmed);\n    let base64 = without_base64_suffix.is_some();\n    let mime_type = without_base64_suffix.unwrap_or(trimmed);\n    let mut string = String::new();\n    if mime_type.starts_with(';') {\n        string.push_str(\"text/plain\")\n    }\n    let mut in_query = false;\n    for byte in mime_type.bytes() {\n        match byte {\n            b'\\t' | b'\\n' | b'\\r' => continue,\n            b'\\0'..=b'\\x1F' | b'\\x7F'..=b'\\xFF' => percent_encode(byte, &mut string),\n            b' ' | b'\"' | b'<' | b'>' if in_query => percent_encode(byte, &mut string),\n            b'?' => {\n                in_query = true;\n                string.push('?')\n            }\n            _ => string.push(byte as char),\n        }\n    }\n    let mime_type = string\n        .parse()\n        .unwrap_or_else(|_| mime::Mime {\n            type_: String::from(\"text\"),\n            subtype: String::from(\"plain\"),\n            parameters: vec![(String::from(\"charset\"), String::from(\"US-ASCII\"))],\n        });\n    (mime_type, base64)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// <https://fetch.spec.whatwg.org/#data-url-processor>\n/// but starting from a string rather than a parsed `Url`, to avoid extra string copies.\n73 pub fn process(input: &'a str) -> Result<Self, DataUrlError> {\n74     use crate::DataUrlError::*;\n75 \n76     let after_colon = pretend_parse_data_url(input).ok_or(NotADataUrl)?;\n77 \n78     let (from_colon_to_comma, encoded_body_plus_fragment) =\n79         find_comma_before_fragment(after_colon).ok_or(NoComma)?;\n80 \n81     let (mime_type, base64) = parse_header(from_colon_to_comma);\n82 \n83     Ok(DataUrl {\n84         mime_type,\n85         base64,\n86         encoded_body_plus_fragment,\n87     })\n88 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}