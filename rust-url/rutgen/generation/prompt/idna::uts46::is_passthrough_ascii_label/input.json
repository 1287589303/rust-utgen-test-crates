{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/uts46.rs\n// crate name is idna\nuse crate::punycode::Decoder;\nuse crate::punycode::InternalCaller;\nuse alloc::borrow::Cow;\nuse alloc::string::String;\nuse core::fmt::Write;\nuse idna_adapter::*;\nuse smallvec::SmallVec;\nuse utf8_iter::Utf8CharsEx;\nconst PUNYCODE_DECODE_MAX_INPUT_LENGTH: usize = 2000;\nconst PUNYCODE_ENCODE_MAX_INPUT_LENGTH: usize = 1000;\nconst UPPER_CASE_MASK: u128 = upper_case_mask();\nconst GLYPHLESS_MASK: u128 = glyphless_mask();\nconst DOT_MASK: u128 = 1 << b'.';\nconst PUNYCODE_PREFIX: u32 = ((b'-' as u32) << 24) | ((b'-' as u32) << 16)\n    | ((b'N' as u32) << 8) | b'X' as u32;\nconst PUNYCODE_PREFIX_MASK: u32 = (0xFF << 24) | (0xFF << 16) | (0xDF << 8) | 0xDF;\n#[inline(always)]\nfn is_passthrough_ascii_label(label: &[u8]) -> bool {\n    if label.len() >= 4 && label[2] == b'-' && label[3] == b'-' {\n        return false;\n    }\n    if let Some((&first, tail)) = label.split_first() {\n        if !in_inclusive_range8(first, b'a', b'z') {\n            return false;\n        }\n        for &b in tail {\n            if in_inclusive_range8(b, b'a', b'z') {\n                continue;\n            }\n            if in_inclusive_range8(b, b'0', b'9') {\n                continue;\n            }\n            if b == b'-' {\n                continue;\n            }\n            return false;\n        }\n        label.last() != Some(&b'-')\n    } else {\n        true\n    }\n}\n#[inline(always)]\nfn in_inclusive_range8(u: u8, start: u8, end: u8) -> bool {\n    u.wrapping_sub(start) <= (end - start)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n143 fn is_passthrough_ascii_label(label: &[u8]) -> bool {\n144     // XXX if we aren't performing _CheckHyphens_, this could\n145     // check for \"xn--\" and pass through YouTube CDN node names.\n146     if label.len() >= 4 && label[2] == b'-' && label[3] == b'-' {\n147         return false;\n148     }\n149     if let Some((&first, tail)) = label.split_first() {\n150         // We need to check the first and last character\n151         // more strictly in case this turns out to be a\n152         // label in a bidi domain name. This has the side\n153         // effect that this function only accepts labels\n154         // that also conform to the STD3 rules.\n155         //\n156         // XXX: If we are in the fail-fast mode (i.e. we don't need\n157         // to be able to overwrite anything with U+FFFD), we could\n158         // merely record that we've seen a digit here and error out\n159         // if we later discover that the domain name is a bidi\n160         // domain name.\n161         if !in_inclusive_range8(first, b'a', b'z') {\n162             return false;\n163         }\n164         for &b in tail {\n165             // If we used LDH_MASK, we'd have to check\n166             // the bytes for the ASCII range anyhow.\n167             if in_inclusive_range8(b, b'a', b'z') {\n168                 continue;\n169             }\n170             if in_inclusive_range8(b, b'0', b'9') {\n171                 continue;\n172             }\n173             if b == b'-' {\n174                 continue;\n175             }\n176             return false;\n177         }\n178         label.last() != Some(&b'-')\n179     } else {\n180         // empty\n181         true\n182     }\n183 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}