{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\npub struct FragmentIdentifier<'a>(&'a str);\nfn decode_without_base64<F, E>(\n    encoded_body_plus_fragment: &str,\n    mut write_bytes: F,\n) -> Result<Option<FragmentIdentifier<'_>>, E>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    let bytes = encoded_body_plus_fragment.as_bytes();\n    let mut slice_start = 0;\n    for (i, &byte) in bytes.iter().enumerate() {\n        if matches!(byte, b'%' | b'#' | b'\\t' | b'\\n' | b'\\r') {\n            if i > slice_start {\n                write_bytes(&bytes[slice_start..i])?;\n                slice_start = i;\n            }\n            match byte {\n                b'%' => {\n                    let l = bytes.get(i + 2).and_then(|&b| (b as char).to_digit(16));\n                    let h = bytes.get(i + 1).and_then(|&b| (b as char).to_digit(16));\n                    if let (Some(h), Some(l)) = (h, l) {\n                        let one_byte = h as u8 * 0x10 + l as u8;\n                        write_bytes(&[one_byte])?;\n                        slice_start = i + 3;\n                    } else {}\n                }\n                b'#' => {\n                    let fragment_start = i + 1;\n                    let fragment = &encoded_body_plus_fragment[fragment_start..];\n                    return Ok(Some(FragmentIdentifier(fragment)));\n                }\n                _ => slice_start = i + 1,\n            }\n        }\n    }\n    write_bytes(&bytes[slice_start..])?;\n    Ok(None)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This is <https://url.spec.whatwg.org/#string-percent-decode> while also:\n///\n/// * Ignoring ASCII tab or newlines\n/// * Stopping at the first '#' (which indicates the start of the fragment)\n///\n/// Anything that would have been UTF-8 percent-encoded by the URL parser\n/// would be percent-decoded here.\n/// We skip that round-trip and pass it through unchanged.\n283 fn decode_without_base64<F, E>(\n284     encoded_body_plus_fragment: &str,\n285     mut write_bytes: F,\n286 ) -> Result<Option<FragmentIdentifier<'_>>, E>\n287 where\n288     F: FnMut(&[u8]) -> Result<(), E>,\n289 {\n290     let bytes = encoded_body_plus_fragment.as_bytes();\n291     let mut slice_start = 0;\n292     for (i, &byte) in bytes.iter().enumerate() {\n293         // We only need to look for 5 different \"special\" byte values.\n294         // For everything else we make slices as large as possible, borrowing the input,\n295         // in order to make fewer write_all() calls.\n296         if matches!(byte, b'%' | b'#' | b'\\t' | b'\\n' | b'\\r') {\n297             // Write everything (if anything) \"non-special\" weâ€™ve accumulated\n298             // before this special byte\n299             if i > slice_start {\n300                 write_bytes(&bytes[slice_start..i])?;\n301                 slice_start = i;\n302             }\n303             // Then deal with the special byte.\n304             match byte {\n305                 b'%' => {\n306                     let l = bytes.get(i + 2).and_then(|&b| (b as char).to_digit(16));\n307                     let h = bytes.get(i + 1).and_then(|&b| (b as char).to_digit(16));\n308                     if let (Some(h), Some(l)) = (h, l) {\n309                         // '%' followed by two ASCII hex digits\n310                         let one_byte = h as u8 * 0x10 + l as u8;\n311                         write_bytes(&[one_byte])?;\n312                         slice_start = i + 3;\n313                     } else {\n314                         // Do nothing. Leave slice_start unchanged.\n315                         // The % sign will be part of the next slice.\n316                     }\n317                 }\n318 \n319                 b'#' => {\n320                     let fragment_start = i + 1;\n321                     let fragment = &encoded_body_plus_fragment[fragment_start..];\n322                     return Ok(Some(FragmentIdentifier(fragment)));\n323                 }\n324 \n325                 // Ignore over '\\t' | '\\n' | '\\r'\n326                 _ => slice_start = i + 1,\n327             }\n328         }\n329     }\n330     write_bytes(&bytes[slice_start..])?;\n331     Ok(None)\n332 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}