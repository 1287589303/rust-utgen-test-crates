{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\npub struct FragmentIdentifier<'a>(&'a str);\nfn decode_without_base64<F, E>(\n    encoded_body_plus_fragment: &str,\n    mut write_bytes: F,\n) -> Result<Option<FragmentIdentifier<'_>>, E>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    let bytes = encoded_body_plus_fragment.as_bytes();\n    let mut slice_start = 0;\n    for (i, &byte) in bytes.iter().enumerate() {\n        if matches!(byte, b'%' | b'#' | b'\\t' | b'\\n' | b'\\r') {\n            if i > slice_start {\n                write_bytes(&bytes[slice_start..i])?;\n                slice_start = i;\n            }\n            match byte {\n                b'%' => {\n                    let l = bytes.get(i + 2).and_then(|&b| (b as char).to_digit(16));\n                    let h = bytes.get(i + 1).and_then(|&b| (b as char).to_digit(16));\n                    if let (Some(h), Some(l)) = (h, l) {\n                        let one_byte = h as u8 * 0x10 + l as u8;\n                        write_bytes(&[one_byte])?;\n                        slice_start = i + 3;\n                    } else {}\n                }\n                b'#' => {\n                    let fragment_start = i + 1;\n                    let fragment = &encoded_body_plus_fragment[fragment_start..];\n                    return Ok(Some(FragmentIdentifier(fragment)));\n                }\n                _ => slice_start = i + 1,\n            }\n        }\n    }\n    write_bytes(&bytes[slice_start..])?;\n    Ok(None)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// This is <https://url.spec.whatwg.org/#string-percent-decode> while also:\n///\n/// * Ignoring ASCII tab or newlines\n/// * Stopping at the first '#' (which indicates the start of the fragment)\n///\n/// Anything that would have been UTF-8 percent-encoded by the URL parser\n/// would be percent-decoded here.\n/// We skip that round-trip and pass it through unchanged.\n283 fn decode_without_base64<F, E>(\n284     encoded_body_plus_fragment: &str,\n285     mut write_bytes: F,\n286 ) -> Result<Option<FragmentIdentifier<'_>>, E>\n287 where\n288     F: FnMut(&[u8]) -> Result<(), E>,\n289 {\n290     let bytes = encoded_body_plus_fragment.as_bytes();\n291     let mut slice_start = 0;\n292     for (i, &byte) in bytes.iter().enumerate() {\n293         // We only need to look for 5 different \"special\" byte values.\n294         // For everything else we make slices as large as possible, borrowing the input,\n295         // in order to make fewer write_all() calls.\n296         if matches!(byte, b'%' | b'#' | b'\\t' | b'\\n' | b'\\r') {\n297             // Write everything (if anything) \"non-special\" weâ€™ve accumulated\n298             // before this special byte\n299             if i > slice_start {\n300                 write_bytes(&bytes[slice_start..i])?;\n301                 slice_start = i;\n302             }\n303             // Then deal with the special byte.\n304             match byte {\n305                 b'%' => {\n306                     let l = bytes.get(i + 2).and_then(|&b| (b as char).to_digit(16));\n307                     let h = bytes.get(i + 1).and_then(|&b| (b as char).to_digit(16));\n308                     if let (Some(h), Some(l)) = (h, l) {\n309                         // '%' followed by two ASCII hex digits\n310                         let one_byte = h as u8 * 0x10 + l as u8;\n311                         write_bytes(&[one_byte])?;\n312                         slice_start = i + 3;\n313                     } else {\n314                         // Do nothing. Leave slice_start unchanged.\n315                         // The % sign will be part of the next slice.\n316                     }\n317                 }\n318 \n319                 b'#' => {\n320                     let fragment_start = i + 1;\n321                     let fragment = &encoded_body_plus_fragment[fragment_start..];\n322                     return Ok(Some(FragmentIdentifier(fragment)));\n323                 }\n324 \n325                 // Ignore over '\\t' | '\\n' | '\\r'\n326                 _ => slice_start = i + 1,\n327             }\n328         }\n329     }\n330     write_bytes(&bytes[slice_start..])?;\n331     Ok(None)\n332 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}