{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// idna/src/lib.rs\n// crate name is idna\nuse alloc::borrow::Cow;\nuse alloc::string::String;\npub use uts46::AsciiDenyList;\nuse uts46::Uts46;\n#[allow(deprecated)]\npub use crate::deprecated::{Config, Idna};\n#[derive(PartialEq, Eq, Copy, Clone)]\n#[repr(transparent)]\npub struct AsciiDenyList {\n    bits: u128,\n}\n#[derive(Default, Debug)]\n#[non_exhaustive]\npub struct Errors {}\npub fn domain_to_ascii(domain: &str) -> Result<String, Errors> {\n    domain_to_ascii_cow(domain.as_bytes(), AsciiDenyList::EMPTY)\n        .map(|cow| cow.into_owned())\n}\npub fn domain_to_ascii_cow(\n    domain: &[u8],\n    ascii_deny_list: AsciiDenyList,\n) -> Result<Cow<'_, str>, Errors> {\n    Uts46::new()\n        .to_ascii(\n            domain,\n            ascii_deny_list,\n            uts46::Hyphens::Allow,\n            uts46::DnsLength::Ignore,\n        )\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm;\n/// version returning `String` and no ASCII deny list (i.e. _UseSTD3ASCIIRules=false_).\n///\n/// This function exists for backward-compatibility. Consider using [`domain_to_ascii_cow`]\n/// instead.\n///\n/// Return the ASCII representation a domain name,\n/// normalizing characters (upper-case to lower-case and other kinds of equivalence)\n/// and using Punycode as necessary.\n///\n/// This process may fail.\n128 pub fn domain_to_ascii(domain: &str) -> Result<String, Errors> {\n129     domain_to_ascii_cow(domain.as_bytes(), AsciiDenyList::EMPTY).map(|cow| cow.into_owned())\n130 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}