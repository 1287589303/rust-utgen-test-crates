{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/host.rs\n// crate name is url\nuse crate::net::{Ipv4Addr, Ipv6Addr};\nuse alloc::borrow::Cow;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::fmt::{self, Formatter};\nuse percent_encoding::{percent_decode, utf8_percent_encode, CONTROLS};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nuse crate::parser::{ParseError, ParseResult};\nfn ends_in_a_number(input: &str) -> bool {\n    let mut parts = input.rsplit('.');\n    let last = parts.next().unwrap();\n    let last = if last.is_empty() {\n        if let Some(last) = parts.next() {\n            last\n        } else {\n            return false;\n        }\n    } else {\n        last\n    };\n    if !last.is_empty() && last.as_bytes().iter().all(|c| c.is_ascii_digit()) {\n        return true;\n    }\n    parse_ipv4number(last).is_ok()\n}\nfn parse_ipv4number(mut input: &str) -> Result<Option<u32>, ()> {\n    if input.is_empty() {\n        return Err(());\n    }\n    let mut r = 10;\n    if input.starts_with(\"0x\") || input.starts_with(\"0X\") {\n        input = &input[2..];\n        r = 16;\n    } else if input.len() >= 2 && input.starts_with('0') {\n        input = &input[1..];\n        r = 8;\n    }\n    if input.is_empty() {\n        return Ok(Some(0));\n    }\n    let valid_number = match r {\n        8 => input.as_bytes().iter().all(|c| (b'0'..=b'7').contains(c)),\n        10 => input.as_bytes().iter().all(|c| c.is_ascii_digit()),\n        16 => input.as_bytes().iter().all(|c| c.is_ascii_hexdigit()),\n        _ => false,\n    };\n    if !valid_number {\n        return Err(());\n    }\n    match u32::from_str_radix(input, r) {\n        Ok(num) => Ok(Some(num)),\n        Err(_) => Ok(None),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// <https://url.spec.whatwg.org/#ends-in-a-number-checker>\n241 fn ends_in_a_number(input: &str) -> bool {\n242     let mut parts = input.rsplit('.');\n243     let last = parts.next().unwrap();\n244     let last = if last.is_empty() {\n245         if let Some(last) = parts.next() {\n246             last\n247         } else {\n248             return false;\n249         }\n250     } else {\n251         last\n252     };\n253     if !last.is_empty() && last.as_bytes().iter().all(|c| c.is_ascii_digit()) {\n254         return true;\n255     }\n256 \n257     parse_ipv4number(last).is_ok()\n258 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}