{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/host.rs\n// crate name is url\nuse crate::net::{Ipv4Addr, Ipv6Addr};\nuse alloc::borrow::Cow;\nuse alloc::borrow::ToOwned;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse alloc::vec::Vec;\nuse core::cmp;\nuse core::fmt::{self, Formatter};\nuse percent_encoding::{percent_decode, utf8_percent_encode, CONTROLS};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nuse crate::parser::{ParseError, ParseResult};\nfn parse_ipv4number(mut input: &str) -> Result<Option<u32>, ()> {\n    if input.is_empty() {\n        return Err(());\n    }\n    let mut r = 10;\n    if input.starts_with(\"0x\") || input.starts_with(\"0X\") {\n        input = &input[2..];\n        r = 16;\n    } else if input.len() >= 2 && input.starts_with('0') {\n        input = &input[1..];\n        r = 8;\n    }\n    if input.is_empty() {\n        return Ok(Some(0));\n    }\n    let valid_number = match r {\n        8 => input.as_bytes().iter().all(|c| (b'0'..=b'7').contains(c)),\n        10 => input.as_bytes().iter().all(|c| c.is_ascii_digit()),\n        16 => input.as_bytes().iter().all(|c| c.is_ascii_hexdigit()),\n        _ => false,\n    };\n    if !valid_number {\n        return Err(());\n    }\n    match u32::from_str_radix(input, r) {\n        Ok(num) => Ok(Some(num)),\n        Err(_) => Ok(None),\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// <https://url.spec.whatwg.org/#ipv4-number-parser>\n/// Ok(None) means the input is a valid number, but it overflows a `u32`.\n262 fn parse_ipv4number(mut input: &str) -> Result<Option<u32>, ()> {\n263     if input.is_empty() {\n264         return Err(());\n265     }\n266 \n267     let mut r = 10;\n268     if input.starts_with(\"0x\") || input.starts_with(\"0X\") {\n269         input = &input[2..];\n270         r = 16;\n271     } else if input.len() >= 2 && input.starts_with('0') {\n272         input = &input[1..];\n273         r = 8;\n274     }\n275 \n276     if input.is_empty() {\n277         return Ok(Some(0));\n278     }\n279 \n280     let valid_number = match r {\n281         8 => input.as_bytes().iter().all(|c| (b'0'..=b'7').contains(c)),\n282         10 => input.as_bytes().iter().all(|c| c.is_ascii_digit()),\n283         16 => input.as_bytes().iter().all(|c| c.is_ascii_hexdigit()),\n284         _ => false,\n285     };\n286     if !valid_number {\n287         return Err(());\n288     }\n289 \n290     match u32::from_str_radix(input, r) {\n291         Ok(num) => Ok(Some(num)),\n292         Err(_) => Ok(None), // The only possible error kind here is an integer overflow.\n293                             // The validity of the chars in the input is checked above.\n294     }\n295 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}