{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/parser.rs\n// crate name is url\npub type ParseResult<T> = Result<T, ParseError>;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse core::fmt::{self, Formatter, Write};\nuse core::str;\nuse crate::host::{Host, HostInternal};\nuse crate::Url;\nuse form_urlencoded::EncodingOverride;\nuse percent_encoding::{percent_encode, utf8_percent_encode, AsciiSet, CONTROLS};\nconst FRAGMENT: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'<').add(b'>').add(b'`');\nconst PATH: &AsciiSet = &FRAGMENT.add(b'#').add(b'?').add(b'{').add(b'}');\npub(crate) const USERINFO: &AsciiSet = &PATH\n    .add(b'/')\n    .add(b':')\n    .add(b';')\n    .add(b'=')\n    .add(b'@')\n    .add(b'[')\n    .add(b'\\\\')\n    .add(b']')\n    .add(b'^')\n    .add(b'|');\npub(crate) const PATH_SEGMENT: &AsciiSet = &PATH.add(b'/').add(b'%');\npub(crate) const SPECIAL_PATH_SEGMENT: &AsciiSet = &PATH_SEGMENT.add(b'\\\\');\nconst QUERY: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'#').add(b'<').add(b'>');\nconst SPECIAL_QUERY: &AsciiSet = &QUERY.add(b'\\'');\n#[inline]\npub fn is_windows_drive_letter(segment: &str) -> bool {\n    segment.len() == 2 && starts_with_windows_drive_letter(segment)\n}\nfn starts_with_windows_drive_letter(s: &str) -> bool {\n    s.len() >= 2 && ascii_alpha(s.as_bytes()[0] as char)\n        && matches!(s.as_bytes() [1], b':' | b'|')\n        && (s.len() == 2 || matches!(s.as_bytes() [2], b'/' | b'\\\\' | b'?' | b'#'))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Whether the scheme is file:, the path has a single segment, and that segment\n/// is a Windows drive letter\n1775 pub fn is_windows_drive_letter(segment: &str) -> bool {\n1776     segment.len() == 2 && starts_with_windows_drive_letter(segment)\n1777 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}