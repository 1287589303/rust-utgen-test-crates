{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/parser.rs\n// crate name is url\npub type ParseResult<T> = Result<T, ParseError>;\nuse alloc::string::String;\nuse alloc::string::ToString;\nuse core::fmt::{self, Formatter, Write};\nuse core::str;\nuse crate::host::{Host, HostInternal};\nuse crate::Url;\nuse form_urlencoded::EncodingOverride;\nuse percent_encoding::{percent_encode, utf8_percent_encode, AsciiSet, CONTROLS};\nconst FRAGMENT: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'<').add(b'>').add(b'`');\nconst PATH: &AsciiSet = &FRAGMENT.add(b'#').add(b'?').add(b'{').add(b'}');\npub(crate) const USERINFO: &AsciiSet = &PATH\n    .add(b'/')\n    .add(b':')\n    .add(b';')\n    .add(b'=')\n    .add(b'@')\n    .add(b'[')\n    .add(b'\\\\')\n    .add(b']')\n    .add(b'^')\n    .add(b'|');\npub(crate) const PATH_SEGMENT: &AsciiSet = &PATH.add(b'/').add(b'%');\npub(crate) const SPECIAL_PATH_SEGMENT: &AsciiSet = &PATH_SEGMENT.add(b'\\\\');\nconst QUERY: &AsciiSet = &CONTROLS.add(b' ').add(b'\"').add(b'#').add(b'<').add(b'>');\nconst SPECIAL_QUERY: &AsciiSet = &QUERY.add(b'\\'');\n#[inline]\npub fn is_windows_drive_letter(segment: &str) -> bool {\n    segment.len() == 2 && starts_with_windows_drive_letter(segment)\n}\nfn starts_with_windows_drive_letter(s: &str) -> bool {\n    s.len() >= 2 && ascii_alpha(s.as_bytes()[0] as char)\n        && matches!(s.as_bytes() [1], b':' | b'|')\n        && (s.len() == 2 || matches!(s.as_bytes() [2], b'/' | b'\\\\' | b'?' | b'#'))\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Whether the scheme is file:, the path has a single segment, and that segment\n/// is a Windows drive letter\n1775 pub fn is_windows_drive_letter(segment: &str) -> bool {\n1776     segment.len() == 2 && starts_with_windows_drive_letter(segment)\n1777 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}