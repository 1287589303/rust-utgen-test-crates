{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// url/src/lib.rs\n// crate name is url\npub use form_urlencoded;\nuse crate::host::HostInternal;\nuse crate::net::IpAddr;\n#[cfg(feature = \"std\")]\n#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\", target_os = \"hermit\"))]\nuse crate::net::{SocketAddr, ToSocketAddrs};\nuse crate::parser::{to_u32, Context, Parser, SchemeType, USERINFO};\nuse alloc::borrow::ToOwned;\nuse alloc::str;\nuse alloc::string::{String, ToString};\nuse core::borrow::Borrow;\nuse core::convert::TryFrom;\nuse core::fmt::Write;\nuse core::ops::{Range, RangeFrom, RangeTo};\nuse core::{cmp, fmt, hash, mem};\nuse percent_encoding::utf8_percent_encode;\n#[cfg(feature = \"std\")]\n#[cfg(any(unix, windows, target_os = \"redox\", target_os = \"wasi\", target_os = \"hermit\"))]\nuse std::io;\n#[cfg(feature = \"std\")]\nuse std::path::{Path, PathBuf};\npub use crate::host::Host;\npub use crate::origin::{OpaqueOrigin, Origin};\npub use crate::parser::{ParseError, SyntaxViolation};\npub use crate::path_segments::PathSegmentsMut;\npub use crate::slicing::Position;\npub use form_urlencoded::EncodingOverride;\n#[derive(Copy, Clone)]\n#[must_use]\npub struct ParseOptions<'a> {\n    base_url: Option<&'a Url>,\n    encoding_override: EncodingOverride<'a>,\n    violation_fn: Option<&'a dyn Fn(SyntaxViolation)>,\n}\n#[derive(Clone)]\npub struct Url {\n    /// Syntax in pseudo-BNF:\n    ///\n    ///   url = scheme \":\" [ hierarchical | non-hierarchical ] [ \"?\" query ]? [ \"#\" fragment ]?\n    ///   non-hierarchical = non-hierarchical-path\n    ///   non-hierarchical-path = /* Does not start with \"/\" */\n    ///   hierarchical = authority? hierarchical-path\n    ///   authority = \"//\" userinfo? host [ \":\" port ]?\n    ///   userinfo = username [ \":\" password ]? \"@\"\n    ///   hierarchical-path = [ \"/\" path-segment ]+\n    serialization: String,\n    scheme_end: u32,\n    username_end: u32,\n    host_start: u32,\n    host_end: u32,\n    host: HostInternal,\n    port: Option<u16>,\n    path_start: u32,\n    query_start: Option<u32>,\n    fragment_start: Option<u32>,\n}\nimpl<'a> ParseOptions<'a> {\n    pub fn base_url(mut self, new: Option<&'a Url>) -> Self {\n        self.base_url = new;\n        self\n    }\n    pub fn encoding_override(mut self, new: EncodingOverride<'a>) -> Self {\n        self.encoding_override = new;\n        self\n    }\n    pub fn syntax_violation_callback(\n        mut self,\n        new: Option<&'a dyn Fn(SyntaxViolation)>,\n    ) -> Self {\n        self.violation_fn = new;\n        self\n    }\n    pub fn parse(self, input: &str) -> Result<Url, crate::ParseError> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Call the provided function or closure for a non-fatal `SyntaxViolation`\n/// when it occurs during parsing. Note that since the provided function is\n/// `Fn`, the caller might need to utilize _interior mutability_, such as with\n/// a `RefCell`, to collect the violations.\n///\n/// ## Example\n/// ```\n/// use std::cell::RefCell;\n/// use url::{Url, SyntaxViolation};\n/// # use url::ParseError;\n/// # fn run() -> Result<(), url::ParseError> {\n/// let violations = RefCell::new(Vec::new());\n/// let url = Url::options()\n///     .syntax_violation_callback(Some(&|v| violations.borrow_mut().push(v)))\n///     .parse(\"https:////example.com\")?;\n/// assert_eq!(url.as_str(), \"https://example.com/\");\n/// assert_eq!(violations.into_inner(),\n///            vec!(SyntaxViolation::ExpectedDoubleSlash));\n/// # Ok(())\n/// # }\n/// # run().unwrap();\n/// ```\n299 pub fn syntax_violation_callback(mut self, new: Option<&'a dyn Fn(SyntaxViolation)>) -> Self {\n300     self.violation_fn = new;\n301     self\n302 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}