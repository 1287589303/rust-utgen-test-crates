{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\npub struct Decoder<F, E>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    write_bytes: F,\n    bit_buffer: u32,\n    buffer_bit_length: u8,\n    padding_symbols: u8,\n}\npub struct FragmentIdentifier<'a>(&'a str);\n#[derive(Debug)]\npub enum DecodeError<E> {\n    InvalidBase64(InvalidBase64),\n    WriteError(E),\n}\nimpl<F, E> Decoder<F, E>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    pub fn new(write_bytes: F) -> Self {\n        Self {\n            write_bytes,\n            bit_buffer: 0,\n            buffer_bit_length: 0,\n            padding_symbols: 0,\n        }\n    }\n    pub fn feed(&mut self, input: &[u8]) -> Result<(), DecodeError<E>> {}\n    pub fn finish(mut self) -> Result<(), DecodeError<E>> {\n        match (self.buffer_bit_length, self.padding_symbols) {\n            (0, 0) => {}\n            (12, 2) | (12, 0) => {\n                let byte_buffer = [(self.bit_buffer >> 4) as u8];\n                (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;\n            }\n            (18, 1) | (18, 0) => {\n                let byte_buffer = [\n                    (self.bit_buffer >> 10) as u8,\n                    (self.bit_buffer >> 2) as u8,\n                ];\n                (self.write_bytes)(&byte_buffer).map_err(DecodeError::WriteError)?;\n            }\n            (6, _) => return Err(InvalidBase64Details::LoneAlphabetSymbol.into()),\n            _ => return Err(InvalidBase64Details::Padding.into()),\n        }\n        Ok(())\n    }\n}\nfn decode_with_base64<F, E>(\n    encoded_body_plus_fragment: &str,\n    write_bytes: F,\n) -> Result<Option<FragmentIdentifier<'_>>, forgiving_base64::DecodeError<E>>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    let mut decoder = forgiving_base64::Decoder::new(write_bytes);\n    let fragment = decode_without_base64(\n        encoded_body_plus_fragment,\n        |bytes| decoder.feed(bytes),\n    )?;\n    decoder.finish()?;\n    Ok(fragment)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// `decode_without_base64()` composed with\n/// <https://infra.spec.whatwg.org/#isomorphic-decode> composed with\n/// <https://infra.spec.whatwg.org/#forgiving-base64-decode>.\n337 fn decode_with_base64<F, E>(\n338     encoded_body_plus_fragment: &str,\n339     write_bytes: F,\n340 ) -> Result<Option<FragmentIdentifier<'_>>, forgiving_base64::DecodeError<E>>\n341 where\n342     F: FnMut(&[u8]) -> Result<(), E>,\n343 {\n344     let mut decoder = forgiving_base64::Decoder::new(write_bytes);\n345     let fragment = decode_without_base64(encoded_body_plus_fragment, |bytes| decoder.feed(bytes))?;\n346     decoder.finish()?;\n347     Ok(fragment)\n348 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}