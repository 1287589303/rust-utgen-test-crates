{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/mime.rs\n// crate name is data_url\nuse alloc::{borrow::ToOwned, string::String, vec::Vec};\nuse core::fmt::{self, Write};\nuse core::str::FromStr;\n#[rustfmt::skip]\nstatic IS_HTTP_TOKEN: [bool; 256] = byte_map![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0,\n];\nfn parse_parameters(s: &str, parameters: &mut Vec<(String, String)>) {\n    let mut semicolon_separated = s.split(';');\n    while let Some(piece) = semicolon_separated.next() {\n        let piece = piece.trim_start_matches(http_whitespace);\n        let (name, value) = split2(piece, '=');\n        let name_valid = !name.is_empty() && only_http_token_code_points(name)\n            && !contains(parameters, name);\n        if let Some(value) = value {\n            let value = if let Some(stripped) = value.strip_prefix('\"') {\n                let max_len = stripped.len().saturating_sub(1);\n                let mut unescaped_value = String::with_capacity(max_len);\n                let mut chars = stripped.chars();\n                'until_closing_quote: loop {\n                    while let Some(c) = chars.next() {\n                        match c {\n                            '\"' => break 'until_closing_quote,\n                            '\\\\' => {\n                                unescaped_value\n                                    .push(\n                                        chars\n                                            .next()\n                                            .unwrap_or_else(|| {\n                                                semicolon_separated\n                                                    .next()\n                                                    .map(|piece| {\n                                                        chars = piece.chars();\n                                                        ';'\n                                                    })\n                                                    .unwrap_or('\\\\')\n                                            }),\n                                    )\n                            }\n                            _ => unescaped_value.push(c),\n                        }\n                    }\n                    if let Some(piece) = semicolon_separated.next() {\n                        unescaped_value.push(';');\n                        chars = piece.chars();\n                    } else {\n                        break;\n                    }\n                }\n                if !name_valid || !valid_value(value) {\n                    continue;\n                }\n                unescaped_value\n            } else {\n                let value = value.trim_end_matches(http_whitespace);\n                if value.is_empty() {\n                    continue;\n                }\n                if !name_valid || !valid_value(value) {\n                    continue;\n                }\n                value.to_owned()\n            };\n            parameters.push((name.to_ascii_lowercase(), value))\n        }\n    }\n}\nfn split2(s: &str, separator: char) -> (&str, Option<&str>) {\n    let mut iter = s.splitn(2, separator);\n    let first = iter.next().unwrap();\n    (first, iter.next())\n}\nfn contains(parameters: &[(String, String)], name: &str) -> bool {\n    parameters.iter().any(|(n, _)| n == name)\n}\nfn only_http_token_code_points(s: &str) -> bool {\n    s.bytes().all(|byte| IS_HTTP_TOKEN[byte as usize])\n}\nfn valid_value(s: &str) -> bool {\n    s.chars().all(|c| { matches!(c, '\\t' | ' '..='~' | '\\u{80}'..='\\u{FF}') })\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 75 fn parse_parameters(s: &str, parameters: &mut Vec<(String, String)>) {\n 76     let mut semicolon_separated = s.split(';');\n 77 \n 78     while let Some(piece) = semicolon_separated.next() {\n 79         let piece = piece.trim_start_matches(http_whitespace);\n 80         let (name, value) = split2(piece, '=');\n 81         // We can not early return on an invalid name here, because the value\n 82         // parsing later may consume more semicolon seperated pieces.\n 83         let name_valid =\n 84             !name.is_empty() && only_http_token_code_points(name) && !contains(parameters, name);\n 85         if let Some(value) = value {\n 86             let value = if let Some(stripped) = value.strip_prefix('\"') {\n 87                 let max_len = stripped.len().saturating_sub(1); // without end quote\n 88                 let mut unescaped_value = String::with_capacity(max_len);\n 89                 let mut chars = stripped.chars();\n 90                 'until_closing_quote: loop {\n 91                     while let Some(c) = chars.next() {\n 92                         match c {\n 93                             '\"' => break 'until_closing_quote,\n 94                             '\\\\' => unescaped_value.push(chars.next().unwrap_or_else(|| {\n 95                                 semicolon_separated\n 96                                     .next()\n 97                                     .map(|piece| {\n 98                                         // A semicolon inside a quoted value is not a separator\n 99                                         // for the next parameter, but part of the value.\n100                                         chars = piece.chars();\n101                                         ';'\n102                                     })\n103                                     .unwrap_or('\\\\')\n104                             })),\n105                             _ => unescaped_value.push(c),\n106                         }\n107                     }\n108                     if let Some(piece) = semicolon_separated.next() {\n109                         // A semicolon inside a quoted value is not a separator\n110                         // for the next parameter, but part of the value.\n111                         unescaped_value.push(';');\n112                         chars = piece.chars()\n113                     } else {\n114                         break;\n115                     }\n116                 }\n117                 if !name_valid || !valid_value(value) {\n118                     continue;\n119                 }\n120                 unescaped_value\n121             } else {\n122                 let value = value.trim_end_matches(http_whitespace);\n123                 if value.is_empty() {\n124                     continue;\n125                 }\n126                 if !name_valid || !valid_value(value) {\n127                     continue;\n128                 }\n129                 value.to_owned()\n130             };\n131             parameters.push((name.to_ascii_lowercase(), value))\n132         }\n133     }\n134 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}