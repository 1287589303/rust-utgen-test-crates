{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\n#[allow(clippy::skip_while_next)]\nfn remove_base64_suffix(s: &str) -> Option<&str> {\n    let mut bytes = s.bytes();\n    {\n        let iter = bytes.by_ref().filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));\n        let mut iter = iter.rev();\n        require!(iter.next() ? == b'4');\n        require!(iter.next() ? == b'6');\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'e'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b's'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'a'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'b'));\n        require!(iter.skip_while(|& byte | byte == b' ').next() ? == b';');\n    }\n    Some(&s[..bytes.len()])\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// None: no base64 suffix\n246 fn remove_base64_suffix(s: &str) -> Option<&str> {\n247     let mut bytes = s.bytes();\n248     {\n249         // Ignore ASCII tabs or newlines like the URL parser would\n250         let iter = bytes\n251             .by_ref()\n252             .filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));\n253 \n254         // Search from the end\n255         let mut iter = iter.rev();\n256 \n257         require!(iter.next()? == b'4');\n258         require!(iter.next()? == b'6');\n259         require!(iter.next()?.eq_ignore_ascii_case(&b'e'));\n260         require!(iter.next()?.eq_ignore_ascii_case(&b's'));\n261         require!(iter.next()?.eq_ignore_ascii_case(&b'a'));\n262         require!(iter.next()?.eq_ignore_ascii_case(&b'b'));\n263         require!(iter.skip_while(|&byte| byte == b' ').next()? == b';');\n264     }\n265     Some(&s[..bytes.len()])\n266 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}