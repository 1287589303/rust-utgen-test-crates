{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\n#[allow(clippy::skip_while_next)]\nfn remove_base64_suffix(s: &str) -> Option<&str> {\n    let mut bytes = s.bytes();\n    {\n        let iter = bytes.by_ref().filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));\n        let mut iter = iter.rev();\n        require!(iter.next() ? == b'4');\n        require!(iter.next() ? == b'6');\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'e'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b's'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'a'));\n        require!(iter.next() ?.eq_ignore_ascii_case(& b'b'));\n        require!(iter.skip_while(|& byte | byte == b' ').next() ? == b';');\n    }\n    Some(&s[..bytes.len()])\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// None: no base64 suffix\n246 fn remove_base64_suffix(s: &str) -> Option<&str> {\n247     let mut bytes = s.bytes();\n248     {\n249         // Ignore ASCII tabs or newlines like the URL parser would\n250         let iter = bytes\n251             .by_ref()\n252             .filter(|&byte| !matches!(byte, b'\\t' | b'\\n' | b'\\r'));\n253 \n254         // Search from the end\n255         let mut iter = iter.rev();\n256 \n257         require!(iter.next()? == b'4');\n258         require!(iter.next()? == b'6');\n259         require!(iter.next()?.eq_ignore_ascii_case(&b'e'));\n260         require!(iter.next()?.eq_ignore_ascii_case(&b's'));\n261         require!(iter.next()?.eq_ignore_ascii_case(&b'a'));\n262         require!(iter.next()?.eq_ignore_ascii_case(&b'b'));\n263         require!(iter.skip_while(|&byte| byte == b' ').next()? == b';');\n264     }\n265     Some(&s[..bytes.len()])\n266 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}