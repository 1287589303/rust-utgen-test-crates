{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// percent_encoding/src/lib.rs\n// crate name is percent_encoding\n#[cfg(feature = \"alloc\")]\nuse alloc::{\n    borrow::{Cow, ToOwned},\n    string::String, vec::Vec,\n};\nuse core::{fmt, slice, str};\npub use self::ascii_set::{AsciiSet, CONTROLS, NON_ALPHANUMERIC};\n#[derive(Debug, Clone, PartialEq, Eq)]\npub struct PercentEncode<'a> {\n    bytes: &'a [u8],\n    ascii_set: &'static AsciiSet,\n}\n#[cfg(feature = \"alloc\")]\nimpl<'a> From<PercentDecode<'a>> for Cow<'a, [u8]> {\n    fn from(iter: PercentDecode<'a>) -> Self {\n        match iter.if_any() {\n            Some(vec) => Cow::Owned(vec),\n            None => Cow::Borrowed(iter.bytes.as_slice()),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n195 fn from(mut iter: PercentEncode<'a>) -> Self {\n196     match iter.next() {\n197         None => \"\".into(),\n198         Some(first) => match iter.next() {\n199             None => first.into(),\n200             Some(second) => {\n201                 let mut string = first.to_owned();\n202                 string.push_str(second);\n203                 string.extend(iter);\n204                 string.into()\n205             }\n206         },\n207     }\n208 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}