{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// data-url/src/lib.rs\n// crate name is data_url\nuse alloc::{string::String, vec::Vec};\nuse core::fmt;\npub struct DataUrl<'a> {\n    mime_type: mime::Mime,\n    base64: bool,\n    encoded_body_plus_fragment: &'a str,\n}\n#[derive(Debug, PartialEq, Eq)]\npub struct Mime {\n    pub type_: String,\n    pub subtype: String,\n    /// (name, value)\n    pub parameters: Vec<(String, String)>,\n}\npub struct FragmentIdentifier<'a>(&'a str);\n#[derive(Debug)]\npub enum DecodeError<E> {\n    InvalidBase64(InvalidBase64),\n    WriteError(E),\n}\nimpl<'a> DataUrl<'a> {\n    pub fn process(input: &'a str) -> Result<Self, DataUrlError> {\n        use crate::DataUrlError::*;\n        let after_colon = pretend_parse_data_url(input).ok_or(NotADataUrl)?;\n        let (from_colon_to_comma, encoded_body_plus_fragment) = find_comma_before_fragment(\n                after_colon,\n            )\n            .ok_or(NoComma)?;\n        let (mime_type, base64) = parse_header(from_colon_to_comma);\n        Ok(DataUrl {\n            mime_type,\n            base64,\n            encoded_body_plus_fragment,\n        })\n    }\n    pub fn mime_type(&self) -> &mime::Mime {}\n    pub fn decode<F, E>(\n        &self,\n        write_body_bytes: F,\n    ) -> Result<Option<FragmentIdentifier<'a>>, forgiving_base64::DecodeError<E>>\n    where\n        F: FnMut(&[u8]) -> Result<(), E>,\n    {\n        if self.base64 {\n            decode_with_base64(self.encoded_body_plus_fragment, write_body_bytes)\n        } else {\n            decode_without_base64(self.encoded_body_plus_fragment, write_body_bytes)\n                .map_err(forgiving_base64::DecodeError::WriteError)\n        }\n    }\n    pub fn decode_to_vec(\n        &self,\n    ) -> Result<\n        (Vec<u8>, Option<FragmentIdentifier<'a>>),\n        forgiving_base64::InvalidBase64,\n    > {}\n}\nfn decode_without_base64<F, E>(\n    encoded_body_plus_fragment: &str,\n    mut write_bytes: F,\n) -> Result<Option<FragmentIdentifier<'_>>, E>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    let bytes = encoded_body_plus_fragment.as_bytes();\n    let mut slice_start = 0;\n    for (i, &byte) in bytes.iter().enumerate() {\n        if matches!(byte, b'%' | b'#' | b'\\t' | b'\\n' | b'\\r') {\n            if i > slice_start {\n                write_bytes(&bytes[slice_start..i])?;\n                slice_start = i;\n            }\n            match byte {\n                b'%' => {\n                    let l = bytes.get(i + 2).and_then(|&b| (b as char).to_digit(16));\n                    let h = bytes.get(i + 1).and_then(|&b| (b as char).to_digit(16));\n                    if let (Some(h), Some(l)) = (h, l) {\n                        let one_byte = h as u8 * 0x10 + l as u8;\n                        write_bytes(&[one_byte])?;\n                        slice_start = i + 3;\n                    } else {}\n                }\n                b'#' => {\n                    let fragment_start = i + 1;\n                    let fragment = &encoded_body_plus_fragment[fragment_start..];\n                    return Ok(Some(FragmentIdentifier(fragment)));\n                }\n                _ => slice_start = i + 1,\n            }\n        }\n    }\n    write_bytes(&bytes[slice_start..])?;\n    Ok(None)\n}\nfn decode_with_base64<F, E>(\n    encoded_body_plus_fragment: &str,\n    write_bytes: F,\n) -> Result<Option<FragmentIdentifier<'_>>, forgiving_base64::DecodeError<E>>\nwhere\n    F: FnMut(&[u8]) -> Result<(), E>,\n{\n    let mut decoder = forgiving_base64::Decoder::new(write_bytes);\n    let fragment = decode_without_base64(\n        encoded_body_plus_fragment,\n        |bytes| decoder.feed(bytes),\n    )?;\n    decoder.finish()?;\n    Ok(fragment)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Streaming-decode the data URL’s body to `write_body_bytes`,\n/// and return the URL’s fragment identifier if it has one.\n 96 pub fn decode<F, E>(\n 97     &self,\n 98     write_body_bytes: F,\n 99 ) -> Result<Option<FragmentIdentifier<'a>>, forgiving_base64::DecodeError<E>>\n100 where\n101     F: FnMut(&[u8]) -> Result<(), E>,\n102 {\n103     if self.base64 {\n104         decode_with_base64(self.encoded_body_plus_fragment, write_body_bytes)\n105     } else {\n106         decode_without_base64(self.encoded_body_plus_fragment, write_body_bytes)\n107             .map_err(forgiving_base64::DecodeError::WriteError)\n108     }\n109 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}