{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// percent_encoding/src/lib.rs\n// crate name is percent_encoding\n#[cfg(feature = \"alloc\")]\nuse alloc::{\n    borrow::{Cow, ToOwned},\n    string::String, vec::Vec,\n};\nuse core::{fmt, slice, str};\npub use self::ascii_set::{AsciiSet, CONTROLS, NON_ALPHANUMERIC};\n#[cfg(feature = \"alloc\")]\n#[allow(ambiguous_wide_pointer_comparisons)]\nfn decode_utf8_lossy(input: Cow<'_, [u8]>) -> Cow<'_, str> {\n    match input {\n        Cow::Borrowed(bytes) => String::from_utf8_lossy(bytes),\n        Cow::Owned(bytes) => {\n            match String::from_utf8_lossy(&bytes) {\n                Cow::Borrowed(utf8) => {\n                    let raw_utf8: *const [u8] = utf8.as_bytes();\n                    debug_assert!(raw_utf8 == &* bytes as * const [u8]);\n                    Cow::Owned(unsafe { String::from_utf8_unchecked(bytes) })\n                }\n                Cow::Owned(s) => Cow::Owned(s),\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n339 fn decode_utf8_lossy(input: Cow<'_, [u8]>) -> Cow<'_, str> {\n340     // Note: This function is duplicated in `form_urlencoded/src/query_encoding.rs`.\n341     match input {\n342         Cow::Borrowed(bytes) => String::from_utf8_lossy(bytes),\n343         Cow::Owned(bytes) => {\n344             match String::from_utf8_lossy(&bytes) {\n345                 Cow::Borrowed(utf8) => {\n346                     // If from_utf8_lossy returns a Cow::Borrowed, then we can\n347                     // be sure our original bytes were valid UTF-8. This is because\n348                     // if the bytes were invalid UTF-8 from_utf8_lossy would have\n349                     // to allocate a new owned string to back the Cow so it could\n350                     // replace invalid bytes with a placeholder.\n351 \n352                     // First we do a debug_assert to confirm our description above.\n353                     let raw_utf8: *const [u8] = utf8.as_bytes();\n354                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);\n355 \n356                     // Given we know the original input bytes are valid UTF-8,\n357                     // and we have ownership of those bytes, we re-use them and\n358                     // return a Cow::Owned here.\n359                     Cow::Owned(unsafe { String::from_utf8_unchecked(bytes) })\n360                 }\n361                 Cow::Owned(s) => Cow::Owned(s),\n362             }\n363         }\n364     }\n365 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}