{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// percent_encoding/src/lib.rs\n// crate name is percent_encoding\n#[cfg(feature = \"alloc\")]\nuse alloc::{\n    borrow::{Cow, ToOwned},\n    string::String, vec::Vec,\n};\nuse core::{fmt, slice, str};\npub use self::ascii_set::{AsciiSet, CONTROLS, NON_ALPHANUMERIC};\n#[cfg(feature = \"alloc\")]\n#[allow(ambiguous_wide_pointer_comparisons)]\nfn decode_utf8_lossy(input: Cow<'_, [u8]>) -> Cow<'_, str> {\n    match input {\n        Cow::Borrowed(bytes) => String::from_utf8_lossy(bytes),\n        Cow::Owned(bytes) => {\n            match String::from_utf8_lossy(&bytes) {\n                Cow::Borrowed(utf8) => {\n                    let raw_utf8: *const [u8] = utf8.as_bytes();\n                    debug_assert!(raw_utf8 == &* bytes as * const [u8]);\n                    Cow::Owned(unsafe { String::from_utf8_unchecked(bytes) })\n                }\n                Cow::Owned(s) => Cow::Owned(s),\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n339 fn decode_utf8_lossy(input: Cow<'_, [u8]>) -> Cow<'_, str> {\n340     // Note: This function is duplicated in `form_urlencoded/src/query_encoding.rs`.\n341     match input {\n342         Cow::Borrowed(bytes) => String::from_utf8_lossy(bytes),\n343         Cow::Owned(bytes) => {\n344             match String::from_utf8_lossy(&bytes) {\n345                 Cow::Borrowed(utf8) => {\n346                     // If from_utf8_lossy returns a Cow::Borrowed, then we can\n347                     // be sure our original bytes were valid UTF-8. This is because\n348                     // if the bytes were invalid UTF-8 from_utf8_lossy would have\n349                     // to allocate a new owned string to back the Cow so it could\n350                     // replace invalid bytes with a placeholder.\n351 \n352                     // First we do a debug_assert to confirm our description above.\n353                     let raw_utf8: *const [u8] = utf8.as_bytes();\n354                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);\n355 \n356                     // Given we know the original input bytes are valid UTF-8,\n357                     // and we have ownership of those bytes, we re-use them and\n358                     // return a Cow::Owned here.\n359                     Cow::Owned(unsafe { String::from_utf8_unchecked(bytes) })\n360                 }\n361                 Cow::Owned(s) => Cow::Owned(s),\n362             }\n363         }\n364     }\n365 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}