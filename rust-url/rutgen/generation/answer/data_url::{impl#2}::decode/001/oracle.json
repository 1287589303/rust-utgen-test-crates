[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestWriter {",
          "        fn new() -> Self {",
          "            TestWriter { data: Vec::new() }",
          "        }",
          "",
          "        fn write(&mut self, bytes: &[u8]) -> Result<(), ()> {",
          "            self.data.extend_from_slice(bytes);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let input = \"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==#fragment\";",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let mut writer = TestWriter::new();",
          "",
          "    data_url.decode(|bytes| writer.write(bytes)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.data, b\"Hello, World!\");",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).is_ok());",
          "    assert_eq!(data_url.decode(|bytes| writer.write(bytes)).unwrap().is_some(), true);",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).unwrap_err().is_instance_of::<forgiving_base64::DecodeError<&str>>());",
          "    assert!(data_url.decode(|_| Err(())).is_err());",
          "    assert_eq!(data_url.decode(|bytes| writer.write(bytes)).unwrap_err().is_instance_of::<forgiving_base64::DecodeError<()>>(), true);"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestWriter {",
          "        fn new() -> Self {",
          "            TestWriter { data: Vec::new() }",
          "        }",
          "",
          "        fn write(&mut self, bytes: &[u8]) -> Result<(), ()> {",
          "            self.data.extend_from_slice(bytes);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let input = \"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==#fragment\";",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let mut writer = TestWriter::new();",
          "",
          "    data_url.decode(|bytes| writer.write(bytes)).unwrap();",
          "    assert_eq!(writer.data, b\"Hello, World!\");",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).is_ok());",
          "    assert_eq!(data_url.decode(|bytes| writer.write(bytes)).unwrap().is_some(), true);",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).unwrap_err().is_instance_of::<forgiving_base64::DecodeError<&str>>());",
          "    assert!(data_url.decode(|_| Err(())).is_err());",
          "    assert_eq!(data_url.decode(|bytes| writer.write(bytes)).unwrap_err().is_instance_of::<forgiving_base64::DecodeError<()>>(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestWriter {",
          "        fn new() -> Self {",
          "            TestWriter { data: Vec::new() }",
          "        }",
          "",
          "        fn write(&mut self, bytes: &[u8]) -> Result<(), ()> {",
          "            self.data.extend_from_slice(bytes);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let input = \"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==\";",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let mut writer = TestWriter::new();",
          "",
          "    data_url.decode(|bytes| writer.write(bytes)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.data, b\"Hello, World!\");",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).is_ok());",
          "    assert!(!writer.data.is_empty());",
          "    assert_eq!(data_url.base64, true);",
          "    assert_eq!(data_url.encoded_body_plus_fragment, \"SGVsbG8sIFdvcmxkIQ==\");",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).is_ok());",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).unwrap().is_none());"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestWriter {",
          "        fn new() -> Self {",
          "            TestWriter { data: Vec::new() }",
          "        }",
          "",
          "        fn write(&mut self, bytes: &[u8]) -> Result<(), ()> {",
          "            self.data.extend_from_slice(bytes);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let input = \"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==\";",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let mut writer = TestWriter::new();",
          "",
          "    data_url.decode(|bytes| writer.write(bytes)).unwrap();",
          "    assert_eq!(writer.data, b\"Hello, World!\");",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).is_ok());",
          "    assert!(!writer.data.is_empty());",
          "    assert_eq!(data_url.base64, true);",
          "    assert_eq!(data_url.encoded_body_plus_fragment, \"SGVsbG8sIFdvcmxkIQ==\");",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).is_ok());",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).unwrap().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWriter {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestWriter {",
          "        fn new() -> Self {",
          "            TestWriter { data: Vec::new() }",
          "        }",
          "",
          "        fn write(&mut self, bytes: &[u8]) -> Result<(), ()> {",
          "            self.data.extend_from_slice(bytes);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let input = \"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==#\";",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let mut writer = TestWriter::new();",
          "",
          "    data_url.decode(|bytes| writer.write(bytes)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(writer.data, b\"Hello, World!\");",
          "    assert_eq!(data_url.decode(|bytes| writer.write(bytes)).is_ok(), true);",
          "    assert_eq!(data_url.base64, true);",
          "    assert!(data_url.decode(|_| Err(())).is_err());",
          "    assert!(data_url.decode(|bytes| Ok(())).is_ok());",
          "    assert!(writer.data.len() > 0);",
          "    assert!(data_url.decode(|bytes| { writer.write(bytes); Ok(()) }).is_ok());",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestWriter {",
          "        data: Vec<u8>,",
          "    }",
          "",
          "    impl TestWriter {",
          "        fn new() -> Self {",
          "            TestWriter { data: Vec::new() }",
          "        }",
          "",
          "        fn write(&mut self, bytes: &[u8]) -> Result<(), ()> {",
          "            self.data.extend_from_slice(bytes);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let input = \"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==#\";",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let mut writer = TestWriter::new();",
          "",
          "    data_url.decode(|bytes| writer.write(bytes)).unwrap();",
          "    assert_eq!(writer.data, b\"Hello, World!\");",
          "    assert_eq!(data_url.decode(|bytes| writer.write(bytes)).is_ok(), true);",
          "    assert_eq!(data_url.base64, true);",
          "    assert!(data_url.decode(|_| Err(())).is_err());",
          "    assert!(data_url.decode(|bytes| Ok(())).is_ok());",
          "    assert!(writer.data.len() > 0);",
          "    assert!(data_url.decode(|bytes| { writer.write(bytes); Ok(()) }).is_ok());",
          "    assert!(data_url.decode(|bytes| writer.write(bytes)).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]