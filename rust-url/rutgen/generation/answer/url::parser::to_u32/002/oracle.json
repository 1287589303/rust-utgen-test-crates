[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: usize = u32::MAX as usize + 1;",
          "    let result = to_u32(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(ParseError::Overflow));"
        ],
        "code": [
          "{",
          "    let input: usize = u32::MAX as usize + 1;",
          "    let result = to_u32(input);",
          "    assert_eq!(result, Err(ParseError::Overflow));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: usize = std::usize::MAX;",
          "    let result = to_u32(input);",
          "}"
        ],
        "oracle": [
          "    result.unwrap_err() == ParseError::Overflow"
        ],
        "code": [
          "{",
          "    let input: usize = std::usize::MAX;",
          "    let result = to_u32(input);",
          "    result.unwrap_err() == ParseError::Overflow",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: usize = u32::MAX as usize + 100;",
          "    let result = to_u32(input);",
          "}"
        ],
        "oracle": [
          "    let input: usize = u32::MAX as usize + 100;",
          "    let expected: ParseResult<u32> = Err(ParseError::Overflow);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let input: usize = u32::MAX as usize + 100;",
          "    let result = to_u32(input);",
          "    let input: usize = u32::MAX as usize + 100;",
          "    let expected: ParseResult<u32> = Err(ParseError::Overflow);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]