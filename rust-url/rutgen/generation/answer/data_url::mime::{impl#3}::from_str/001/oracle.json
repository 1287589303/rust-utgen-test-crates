[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_mime_1 = Mime::from_str(\"text/html\");",
          "    let valid_mime_2 = Mime::from_str(\"application/json\");",
          "    let valid_mime_3 = Mime::from_str(\"image/png\");",
          "    let valid_mime_4 = Mime::from_str(\"       text/plain;\");",
          "    let valid_mime_5 = Mime::from_str(\"application/vnd.api+json\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(valid_mime_1, Ok(Mime { type_: \"text\".to_string(), subtype: \"html\".to_string(), parameters: Vec::new() }));",
          "    assert_eq!(valid_mime_2, Ok(Mime { type_: \"application\".to_string(), subtype: \"json\".to_string(), parameters: Vec::new() }));",
          "    assert_eq!(valid_mime_3, Ok(Mime { type_: \"image\".to_string(), subtype: \"png\".to_string(), parameters: Vec::new() }));",
          "    assert_eq!(valid_mime_4, Ok(Mime { type_: \"text\".to_string(), subtype: \"plain\".to_string(), parameters: Vec::new() }));",
          "    assert_eq!(valid_mime_5, Ok(Mime { type_: \"application\".to_string(), subtype: \"vnd.api+json\".to_string(), parameters: Vec::new() }));"
        ],
        "code": [
          "{",
          "    let valid_mime_1 = Mime::from_str(\"text/html\");",
          "    let valid_mime_2 = Mime::from_str(\"application/json\");",
          "    let valid_mime_3 = Mime::from_str(\"image/png\");",
          "    let valid_mime_4 = Mime::from_str(\"       text/plain;\");",
          "    let valid_mime_5 = Mime::from_str(\"application/vnd.api+json\");",
          "    assert_eq!(valid_mime_1, Ok(Mime { type_: \"text\".to_string(), subtype: \"html\".to_string(), parameters: Vec::new() }));",
          "    assert_eq!(valid_mime_2, Ok(Mime { type_: \"application\".to_string(), subtype: \"json\".to_string(), parameters: Vec::new() }));",
          "    assert_eq!(valid_mime_3, Ok(Mime { type_: \"image\".to_string(), subtype: \"png\".to_string(), parameters: Vec::new() }));",
          "    assert_eq!(valid_mime_4, Ok(Mime { type_: \"text\".to_string(), subtype: \"plain\".to_string(), parameters: Vec::new() }));",
          "    assert_eq!(valid_mime_5, Ok(Mime { type_: \"application\".to_string(), subtype: \"vnd.api+json\".to_string(), parameters: Vec::new() }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let invalid_mime_1 = Mime::from_str(\"\");",
          "    let invalid_mime_2 = Mime::from_str(\"text/\");",
          "    let invalid_mime_3 = Mime::from_str(\"/html\");",
          "    let invalid_mime_4 = Mime::from_str(\"text/html; charset=utf-8; invalid_parameter=!\");",
          "    let invalid_mime_5 = Mime::from_str(\"application/json;\"); // Semicolon without parameters",
          "}"
        ],
        "oracle": [
          "    assert_eq!(invalid_mime_1.is_err(), true);",
          "    assert_eq!(invalid_mime_2.is_err(), true);",
          "    assert_eq!(invalid_mime_3.is_err(), true);",
          "    assert_eq!(invalid_mime_4.is_err(), true);",
          "    assert_eq!(invalid_mime_5.is_err(), true);"
        ],
        "code": [
          "{",
          "    let invalid_mime_1 = Mime::from_str(\"\");",
          "    let invalid_mime_2 = Mime::from_str(\"text/\");",
          "    let invalid_mime_3 = Mime::from_str(\"/html\");",
          "    let invalid_mime_4 = Mime::from_str(\"text/html; charset=utf-8; invalid_parameter=!\");",
          "    let invalid_mime_5 = Mime::from_str(\"application/json;\"); // Semicolon without parameters",
          "    assert_eq!(invalid_mime_1.is_err(), true);",
          "    assert_eq!(invalid_mime_2.is_err(), true);",
          "    assert_eq!(invalid_mime_3.is_err(), true);",
          "    assert_eq!(invalid_mime_4.is_err(), true);",
          "    assert_eq!(invalid_mime_5.is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]