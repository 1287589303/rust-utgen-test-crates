[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"abcdefghijklmnopqrstuvwxyz\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // Allow all",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "",
          "    let result = uts46.process_inner(",
          "        domain_name,",
          "        ascii_deny_list,",
          "        hyphens,",
          "        fail_fast,",
          "        &mut domain_buffer,",
          "        &mut already_punycode,",
          "    );",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (domain_name.len(), false, false));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"abcdefghijklmnopqrstuvwxyz\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 }; // Allow all",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "",
          "    let result = uts46.process_inner(",
          "        domain_name,",
          "        ascii_deny_list,",
          "        hyphens,",
          "        fail_fast,",
          "        &mut domain_buffer,",
          "        &mut already_punycode,",
          "    );",
          "    assert_eq!(result, (domain_name.len(), false, false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]