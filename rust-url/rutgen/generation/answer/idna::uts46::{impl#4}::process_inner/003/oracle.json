[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"\\xC2\\xA9example\"; // Non-ASCII character (©)",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "}"
        ],
        "oracle": [
          "    let domain_name = b\"\\xC2\\xA9example\"; // Non-ASCII character (©)",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "    ",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, (domain_name.len(), false, false));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"\\xC2\\xA9example\"; // Non-ASCII character (©)",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    let domain_name = b\"\\xC2\\xA9example\"; // Non-ASCII character (©)",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "    ",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, (domain_name.len(), false, false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example@domain.com\"; // Special character (@)",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "}"
        ],
        "oracle": [
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, (domain_name.len(), false, false));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example@domain.com\"; // Special character (@)",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, (domain_name.len(), false, false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example123\"; // Contains digits",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (domain_name.len(), false, false));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example123\"; // Contains digits",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, (domain_name.len(), false, false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"Example.com\"; // Uppercase character (E)",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "}"
        ],
        "oracle": [
          "    let domain_name: &[u8] = b\"Example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "    ",
          "    let expected_result = (domain_name.len(), false, false);",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"Example.com\"; // Uppercase character (E)",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    let domain_name: &[u8] = b\"Example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "    ",
          "    let expected_result = (domain_name.len(), false, false);",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"ex-ample\"; // Contains a hyphen but starts with a non-ASCII character",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Check;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "}"
        ],
        "oracle": [
          "    let domain_name: &[u8] = b\"ex-ample\"; // Non-ASCII character case",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Check;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, (domain_name.len(), false, false));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"ex-ample\"; // Contains a hyphen but starts with a non-ASCII character",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Check;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    let domain_name: &[u8] = b\"ex-ample\"; // Non-ASCII character case",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Check;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::new();",
          "    let mut already_punycode = SmallVec::new();",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, (domain_name.len(), false, false));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]