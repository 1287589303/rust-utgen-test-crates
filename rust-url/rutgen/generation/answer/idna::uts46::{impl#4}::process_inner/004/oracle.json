[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "    ",
          "    let _ = uts46.process_inner(",
          "        domain_name,",
          "        ascii_deny_list,",
          "        hyphens,",
          "        fail_fast,",
          "        &mut domain_buffer,",
          "        &mut already_punycode,",
          "    );",
          "}"
        ],
        "oracle": [
          "    let domain_name: &[u8] = b\"example.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "    let first_byte = b'd';",
          "    let _ = uts46.process_inner(",
          "    domain_name,",
          "    ascii_deny_list,",
          "    hyphens,",
          "    fail_fast,",
          "    &mut domain_buffer,",
          "    &mut already_punycode,",
          "    );",
          "    assert_eq!(domain_buffer.len(), expected_length);",
          "    assert!(already_punycode.len() >= expected_min_length);"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "    ",
          "    let _ = uts46.process_inner(",
          "        domain_name,",
          "        ascii_deny_list,",
          "        hyphens,",
          "        fail_fast,",
          "        &mut domain_buffer,",
          "        &mut already_punycode,",
          "    );",
          "    let domain_name: &[u8] = b\"example.domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "    let first_byte = b'd';",
          "    let _ = uts46.process_inner(",
          "    domain_name,",
          "    ascii_deny_list,",
          "    hyphens,",
          "    fail_fast,",
          "    &mut domain_buffer,",
          "    &mut already_punycode,",
          "    );",
          "    assert_eq!(domain_buffer.len(), expected_length);",
          "    assert!(already_punycode.len() >= expected_min_length);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"Example.Domain.Com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "    ",
          "    let _ = uts46.process_inner(",
          "        domain_name,",
          "        ascii_deny_list,",
          "        hyphens,",
          "        fail_fast,",
          "        &mut domain_buffer,",
          "        &mut already_punycode,",
          "    );",
          "}"
        ],
        "oracle": [
          "    let domain_name: &[u8] = b\"Example.Domain.Com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result.0, domain_name.len());",
          "    assert!(!result.1);",
          "    assert!(!result.2);",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Check;",
          "    let b: u8 = b'.';",
          "    let domain_name: &[u8] = b\"Example..Domain\";",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result.0, 0);",
          "    assert!(!result.1);",
          "    assert!(result.2);"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"Example.Domain.Com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "    ",
          "    let _ = uts46.process_inner(",
          "        domain_name,",
          "        ascii_deny_list,",
          "        hyphens,",
          "        fail_fast,",
          "        &mut domain_buffer,",
          "        &mut already_punycode,",
          "    );",
          "    let domain_name: &[u8] = b\"Example.Domain.Com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result.0, domain_name.len());",
          "    assert!(!result.1);",
          "    assert!(!result.2);",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Check;",
          "    let b: u8 = b'.';",
          "    let domain_name: &[u8] = b\"Example..Domain\";",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result.0, 0);",
          "    assert!(!result.1);",
          "    assert!(result.2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example@domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "    ",
          "    let _ = uts46.process_inner(",
          "        domain_name,",
          "        ascii_deny_list,",
          "        hyphens,",
          "        fail_fast,",
          "        &mut domain_buffer,",
          "        &mut already_punycode,",
          "    );",
          "}"
        ],
        "oracle": [
          "    let domain_name = b\"example@domain.com\";",
          "    assert_eq!(domain_buffer.len(), 0);",
          "    assert_eq!(already_punycode.len(), 0);",
          "    assert!(domain_buffer.is_empty());",
          "    assert!(already_punycode.is_empty());",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, (0, false, true));",
          "    assert!(domain_buffer.iter().all(|&c| c != '.' && c != '@'));",
          "    assert_eq!(already_punycode.len(), 1);",
          "    assert!(matches!(already_punycode[0], AlreadyAsciiLabel::Other));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example@domain.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    let fail_fast = false;",
          "    let mut domain_buffer = SmallVec::<[char; 253]>::new();",
          "    let mut already_punycode = SmallVec::<[AlreadyAsciiLabel; 8]>::new();",
          "    ",
          "    let _ = uts46.process_inner(",
          "        domain_name,",
          "        ascii_deny_list,",
          "        hyphens,",
          "        fail_fast,",
          "        &mut domain_buffer,",
          "        &mut already_punycode,",
          "    );",
          "    let domain_name = b\"example@domain.com\";",
          "    assert_eq!(domain_buffer.len(), 0);",
          "    assert_eq!(already_punycode.len(), 0);",
          "    assert!(domain_buffer.is_empty());",
          "    assert!(already_punycode.is_empty());",
          "    let result = uts46.process_inner(domain_name, ascii_deny_list, hyphens, fail_fast, &mut domain_buffer, &mut already_punycode);",
          "    assert_eq!(result, (0, false, true));",
          "    assert!(domain_buffer.iter().all(|&c| c != '.' && c != '@'));",
          "    assert_eq!(already_punycode.len(), 1);",
          "    assert!(matches!(already_punycode[0], AlreadyAsciiLabel::Other));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]