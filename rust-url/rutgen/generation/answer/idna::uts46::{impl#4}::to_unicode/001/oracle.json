[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(uts46.to_unicode(b\"example.com\", AsciiDenyList { bits: 0 }, Hyphens::Allow).0, Cow::Borrowed(\"example.com\"));",
          "    assert!(uts46.to_unicode(b\"example.com\", AsciiDenyList { bits: 0 }, Hyphens::Allow).1.is_ok());",
          "    assert_eq!(uts46.to_unicode(b\"\\xFF\", AsciiDenyList { bits: 0 }, Hyphens::Allow).0, Cow::Owned(String::from(\"\\u{FFFD}\")));",
          "    assert!(uts46.to_unicode(b\"\\xFF\", AsciiDenyList { bits: 0 }, Hyphens::Allow).1.is_err());",
          "    assert_eq!(uts46.to_unicode(b\"example-domain\", AsciiDenyList { bits: 0 }, Hyphens::Allow).0, Cow::Borrowed(\"example-domain\"));",
          "    assert!(uts46.to_unicode(b\"example-domain\", AsciiDenyList { bits: 0 }, Hyphens::Allow).1.is_ok());",
          "    assert_eq!(uts46.to_unicode(b\"-invalid.com\", AsciiDenyList { bits: 0 }, Hyphens::CheckFirstLast).0, Cow::Owned(String::from(\"\\u{FFFD}\")));",
          "    assert!(uts46.to_unicode(b\"-invalid.com\", AsciiDenyList { bits: 0 }, Hyphens::CheckFirstLast).1.is_err());"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "    assert_eq!(uts46.to_unicode(b\"example.com\", AsciiDenyList { bits: 0 }, Hyphens::Allow).0, Cow::Borrowed(\"example.com\"));",
          "    assert!(uts46.to_unicode(b\"example.com\", AsciiDenyList { bits: 0 }, Hyphens::Allow).1.is_ok());",
          "    assert_eq!(uts46.to_unicode(b\"\\xFF\", AsciiDenyList { bits: 0 }, Hyphens::Allow).0, Cow::Owned(String::from(\"\\u{FFFD}\")));",
          "    assert!(uts46.to_unicode(b\"\\xFF\", AsciiDenyList { bits: 0 }, Hyphens::Allow).1.is_err());",
          "    assert_eq!(uts46.to_unicode(b\"example-domain\", AsciiDenyList { bits: 0 }, Hyphens::Allow).0, Cow::Borrowed(\"example-domain\"));",
          "    assert!(uts46.to_unicode(b\"example-domain\", AsciiDenyList { bits: 0 }, Hyphens::Allow).1.is_ok());",
          "    assert_eq!(uts46.to_unicode(b\"-invalid.com\", AsciiDenyList { bits: 0 }, Hyphens::CheckFirstLast).0, Cow::Owned(String::from(\"\\u{FFFD}\")));",
          "    assert!(uts46.to_unicode(b\"-invalid.com\", AsciiDenyList { bits: 0 }, Hyphens::CheckFirstLast).1.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"\"; // empty input",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "}"
        ],
        "oracle": [
          "    let result = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "    assert_eq!(result.0, Cow::Owned(String::from(\"\\u{FFFD}\")));",
          "    assert!(result.1.is_ok());"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"\"; // empty input",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "    let result = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "    assert_eq!(result.0, Cow::Owned(String::from(\"\\u{FFFD}\")));",
          "    assert!(result.1.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"a\".repeat(2000).as_bytes(); // max length input",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow; ",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0, Cow::Borrowed(\"a\".repeat(2000).as_str()));",
          "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).1.is_ok());",
          "    let short_domain_name: &[u8] = b\"valid.domain\";",
          "    assert_eq!(uts46.to_unicode(short_domain_name, ascii_deny_list, hyphens).0, Cow::Borrowed(\"valid.domain\"));",
          "    assert!(uts46.to_unicode(short_domain_name, ascii_deny_list, hyphens).1.is_ok());",
          "    let invalid_domain_name: &[u8] = b\"\\xFF\";",
          "    assert_eq!(uts46.to_unicode(invalid_domain_name, ascii_deny_list, hyphens).0, Cow::Owned(\"\\u{FFFD}\".to_string()));",
          "    assert!(uts46.to_unicode(invalid_domain_name, ascii_deny_list, hyphens).1.is_err());",
          "    let deny_list = AsciiDenyList { bits: 1 << b'/' };",
          "    let hyphen_check = Hyphens::Check;",
          "    assert_eq!(uts46.to_unicode(b\"valid-domain\", deny_list, hyphen_check).0, Cow::Owned(\"valid-domain\".to_string()));",
          "    assert!(uts46.to_unicode(b\"valid-domain\", deny_list, hyphen_check).1.is_ok());",
          "    assert_eq!(uts46.to_unicode(b\"invalid-/domain\", deny_list, hyphen_check).0, Cow::Owned(\"\\u{FFFD}\".to_string()));",
          "    assert!(uts46.to_unicode(b\"invalid-/domain\", deny_list, hyphen_check).1.is_err());"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"a\".repeat(2000).as_bytes(); // max length input",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow; ",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "    assert_eq!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0, Cow::Borrowed(\"a\".repeat(2000).as_str()));",
          "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).1.is_ok());",
          "    let short_domain_name: &[u8] = b\"valid.domain\";",
          "    assert_eq!(uts46.to_unicode(short_domain_name, ascii_deny_list, hyphens).0, Cow::Borrowed(\"valid.domain\"));",
          "    assert!(uts46.to_unicode(short_domain_name, ascii_deny_list, hyphens).1.is_ok());",
          "    let invalid_domain_name: &[u8] = b\"\\xFF\";",
          "    assert_eq!(uts46.to_unicode(invalid_domain_name, ascii_deny_list, hyphens).0, Cow::Owned(\"\\u{FFFD}\".to_string()));",
          "    assert!(uts46.to_unicode(invalid_domain_name, ascii_deny_list, hyphens).1.is_err());",
          "    let deny_list = AsciiDenyList { bits: 1 << b'/' };",
          "    let hyphen_check = Hyphens::Check;",
          "    assert_eq!(uts46.to_unicode(b\"valid-domain\", deny_list, hyphen_check).0, Cow::Owned(\"valid-domain\".to_string()));",
          "    assert!(uts46.to_unicode(b\"valid-domain\", deny_list, hyphen_check).1.is_ok());",
          "    assert_eq!(uts46.to_unicode(b\"invalid-/domain\", deny_list, hyphen_check).0, Cow::Owned(\"\\u{FFFD}\".to_string()));",
          "    assert!(uts46.to_unicode(b\"invalid-/domain\", deny_list, hyphen_check).1.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = &[0, 159, 146, 150]; // invalid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "}"
        ],
        "oracle": [
          "    let result = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "    assert_eq!(result.0, Cow::Owned(String::from(\"\\u{FFFD}\")));",
          "    assert!(result.1.is_err());"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = &[0, 159, 146, 150]; // invalid UTF-8",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Allow;",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "    let result = uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "    assert_eq!(result.0, Cow::Owned(String::from(\"\\u{FFFD}\")));",
          "    assert!(result.1.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: UPPER_CASE_MASK }; // some bits set",
          "    let hyphens = Hyphens::CheckFirstLast;",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(uts46.to_unicode(b\"example.com\", AsciiDenyList { bits: UPPER_CASE_MASK }, Hyphens::CheckFirstLast), (Cow::Borrowed(\"example.com\"), Ok(())));",
          "    assert_eq!(uts46.to_unicode(b\"exam-ple.com\", AsciiDenyList { bits: UPPER_CASE_MASK }, Hyphens::CheckFirstLast), (Cow::Borrowed(\"exam-ple.com\"), Ok(())));",
          "    assert!(uts46.to_unicode(b\"-example.com\", AsciiDenyList { bits: UPPER_CASE_MASK }, Hyphens::CheckFirstLast).1.is_err());",
          "    assert!(uts46.to_unicode(b\"example-.com\", AsciiDenyList { bits: UPPER_CASE_MASK }, Hyphens::CheckFirstLast).1.is_err());",
          "    assert_eq!(uts46.to_unicode(b\"example.com\", AsciiDenyList { bits: 0 }, Hyphens::Allow), (Cow::Borrowed(\"example.com\"), Ok(())));",
          "    assert!(uts46.to_unicode(b\"example.com�\", AsciiDenyList { bits: 0 }, Hyphens::Allow).1.is_err());",
          "    assert_eq!(uts46.to_unicode(b\"example.com\", AsciiDenyList { bits: 0 }, Hyphens::Check), (Cow::Borrowed(\"example.com\"), Ok(())));",
          "    assert!(uts46.to_unicode(b\"exam--ple.com\", AsciiDenyList { bits: 0 }, Hyphens::Check).1.is_err());",
          "    assert!(uts46.to_unicode(b\"exam#ple.com\", AsciiDenyList { bits: 0 }, Hyphens::Allow).1.is_err());",
          "    assert_eq!(uts46.to_unicode(b\"中.com\", AsciiDenyList { bits: 0 }, Hyphens::Allow), (Cow::Owned(\"中.com\".to_string()), Ok(())));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"example.com\";",
          "    let ascii_deny_list = AsciiDenyList { bits: UPPER_CASE_MASK }; // some bits set",
          "    let hyphens = Hyphens::CheckFirstLast;",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "    assert_eq!(uts46.to_unicode(b\"example.com\", AsciiDenyList { bits: UPPER_CASE_MASK }, Hyphens::CheckFirstLast), (Cow::Borrowed(\"example.com\"), Ok(())));",
          "    assert_eq!(uts46.to_unicode(b\"exam-ple.com\", AsciiDenyList { bits: UPPER_CASE_MASK }, Hyphens::CheckFirstLast), (Cow::Borrowed(\"exam-ple.com\"), Ok(())));",
          "    assert!(uts46.to_unicode(b\"-example.com\", AsciiDenyList { bits: UPPER_CASE_MASK }, Hyphens::CheckFirstLast).1.is_err());",
          "    assert!(uts46.to_unicode(b\"example-.com\", AsciiDenyList { bits: UPPER_CASE_MASK }, Hyphens::CheckFirstLast).1.is_err());",
          "    assert_eq!(uts46.to_unicode(b\"example.com\", AsciiDenyList { bits: 0 }, Hyphens::Allow), (Cow::Borrowed(\"example.com\"), Ok(())));",
          "    assert!(uts46.to_unicode(b\"example.com�\", AsciiDenyList { bits: 0 }, Hyphens::Allow).1.is_err());",
          "    assert_eq!(uts46.to_unicode(b\"example.com\", AsciiDenyList { bits: 0 }, Hyphens::Check), (Cow::Borrowed(\"example.com\"), Ok(())));",
          "    assert!(uts46.to_unicode(b\"exam--ple.com\", AsciiDenyList { bits: 0 }, Hyphens::Check).1.is_err());",
          "    assert!(uts46.to_unicode(b\"exam#ple.com\", AsciiDenyList { bits: 0 }, Hyphens::Allow).1.is_err());",
          "    assert_eq!(uts46.to_unicode(b\"中.com\", AsciiDenyList { bits: 0 }, Hyphens::Allow), (Cow::Owned(\"中.com\".to_string()), Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"ex--ample.com\"; // hyphens in invalid positions",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Check;",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "}"
        ],
        "oracle": [
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens).1.is_err();",
          "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.contains('\\u{FFFD}'));",
          "    assert_eq!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0, Cow::Owned(\"ex\\u{FFFD}ample.com\".to_string()));",
          "    assert_eq!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).1, Err(crate::Errors::default()));"
        ],
        "code": [
          "{",
          "    let uts46 = Uts46::new();",
          "    let domain_name: &[u8] = b\"ex--ample.com\"; // hyphens in invalid positions",
          "    let ascii_deny_list = AsciiDenyList { bits: 0 };",
          "    let hyphens = Hyphens::Check;",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens);",
          "    uts46.to_unicode(domain_name, ascii_deny_list, hyphens).1.is_err();",
          "    assert!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0.contains('\\u{FFFD}'));",
          "    assert_eq!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).0, Cow::Owned(\"ex\\u{FFFD}ample.com\".to_string()));",
          "    assert_eq!(uts46.to_unicode(domain_name, ascii_deny_list, hyphens).1, Err(crate::Errors::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]