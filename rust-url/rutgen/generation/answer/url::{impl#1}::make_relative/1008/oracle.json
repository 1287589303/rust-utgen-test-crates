[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/dir/\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/file.png?query=value#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"file.png\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() == url.scheme());",
          "    assert!(base.host() == url.host());",
          "    assert!(base.port() == url.port());",
          "    assert!(base.path_segments().is_some());",
          "    assert!(base.path_segments().unwrap().count() == 3); // \"path\", \"to\", \"dir\"",
          "    assert!(url.path_segments().is_some());",
          "    assert!(url.path_segments().unwrap().count() == 4); // \"path\", \"to\", \"file.png\"",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/dir/\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/file.png?query=value#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"file.png\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() == url.scheme());",
          "    assert!(base.host() == url.host());",
          "    assert!(base.port() == url.port());",
          "    assert!(base.path_segments().is_some());",
          "    assert!(base.path_segments().unwrap().count() == 3); // \"path\", \"to\", \"dir\"",
          "    assert!(url.path_segments().is_some());",
          "    assert!(url.path_segments().unwrap().count() == 4); // \"path\", \"to\", \"file.png\"",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/images/\")?;",
          "    let url = Url::parse(\"https://example.com/images/photo.png?size=large#gallery\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"photo.png?size=large#gallery\"));",
          "    assert!(base.has_authority());",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), \"https\");",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(base.path_segments().is_some());",
          "    assert_eq!(base.path(), \"/images/\");",
          "    assert_eq!(url.path(), \"/images/photo.png\");",
          "    assert!(!relative.is_empty());",
          "    assert!(!url.query().is_empty());",
          "    assert!(!url.fragment().is_empty());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/images/\")?;",
          "    let url = Url::parse(\"https://example.com/images/photo.png?size=large#gallery\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"photo.png?size=large#gallery\"));",
          "    assert!(base.has_authority());",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), \"https\");",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(base.path_segments().is_some());",
          "    assert_eq!(base.path(), \"/images/\");",
          "    assert_eq!(url.path(), \"/images/photo.png\");",
          "    assert!(!relative.is_empty());",
          "    assert!(!url.query().is_empty());",
          "    assert!(!url.fragment().is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/test/\")?;",
          "    let url = Url::parse(\"https://example.com/test/file.txt?param=value#section\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"file.txt?param=value#section\"));"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/test/\")?;",
          "    let url = Url::parse(\"https://example.com/test/file.txt?param=value#section\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"file.txt?param=value#section\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/docs/\")?;",
          "    let url = Url::parse(\"https://example.com/docs/manual.pdf?version=1.2#cover\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"manual.pdf\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() == url.scheme());",
          "    assert!(base.host() == url.host());",
          "    assert!(base.port() == url.port());",
          "    assert!(base.path_segments().is_some());",
          "    assert!(base.path() == \"/docs/\");",
          "    assert!(url.path_segments().count() > 0);",
          "    assert!(url.path() == \"/docs/manual.pdf\");",
          "    assert!(!relative.is_empty());",
          "    assert!(!url.filename().is_empty());",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/docs/\")?;",
          "    let url = Url::parse(\"https://example.com/docs/manual.pdf?version=1.2#cover\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"manual.pdf\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() == url.scheme());",
          "    assert!(base.host() == url.host());",
          "    assert!(base.port() == url.port());",
          "    assert!(base.path_segments().is_some());",
          "    assert!(base.path() == \"/docs/\");",
          "    assert!(url.path_segments().count() > 0);",
          "    assert!(url.path() == \"/docs/manual.pdf\");",
          "    assert!(!relative.is_empty());",
          "    assert!(!url.filename().is_empty());",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/resources/\")?;",
          "    let url = Url::parse(\"https://example.com/resources/docs/guide.pdf?lang=en#intro\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"docs/guide.pdf?lang=en#intro\"));",
          "    assert!(base.make_relative(&Url::parse(\"http://example.com/resources/docs/guide.pdf\")?).is_none());",
          "    assert!(base.make_relative(&Url::parse(\"https://example.org/resources/docs/guide.pdf?lang=en#intro\")?).is_none());",
          "    assert!(base.make_relative(&Url::parse(\"https://example.com/resources/other/guide.pdf\")?).is_none());",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/resources/docs/guide.pdf\")?).unwrap(), \"docs/guide.pdf\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/resources/docs/guide.pdf#intro\")?).unwrap(), \"docs/guide.pdf#intro\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/resources/docs/guide.pdf?lang=en\")?).unwrap(), \"docs/guide.pdf?lang=en\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/resources/docs/cd.pdf?lang=fr#sec1\")?).unwrap(), \"../docs/cd.pdf?lang=fr#sec1\");"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/resources/\")?;",
          "    let url = Url::parse(\"https://example.com/resources/docs/guide.pdf?lang=en#intro\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"docs/guide.pdf?lang=en#intro\"));",
          "    assert!(base.make_relative(&Url::parse(\"http://example.com/resources/docs/guide.pdf\")?).is_none());",
          "    assert!(base.make_relative(&Url::parse(\"https://example.org/resources/docs/guide.pdf?lang=en#intro\")?).is_none());",
          "    assert!(base.make_relative(&Url::parse(\"https://example.com/resources/other/guide.pdf\")?).is_none());",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/resources/docs/guide.pdf\")?).unwrap(), \"docs/guide.pdf\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/resources/docs/guide.pdf#intro\")?).unwrap(), \"docs/guide.pdf#intro\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/resources/docs/guide.pdf?lang=en\")?).unwrap(), \"docs/guide.pdf?lang=en\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/resources/docs/cd.pdf?lang=fr#sec1\")?).unwrap(), \"../docs/cd.pdf?lang=fr#sec1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]