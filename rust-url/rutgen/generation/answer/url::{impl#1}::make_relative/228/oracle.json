[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/resource\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/resource/extra?query=param#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert!(relative.is_some());",
          "    assert_eq!(relative.as_ref().unwrap(), \"extra\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource\")?).unwrap(), \"\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource/another\")?).unwrap(), \"another\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource/../extra\")?).unwrap(), \"extra\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource/../../other\")?).unwrap(), \"../other\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource?new=query#newfragment\")?).unwrap(), \"?new=query\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource#newfragment\")?).unwrap(), \"#newfragment\");"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/resource\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/resource/extra?query=param#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert!(relative.is_some());",
          "    assert_eq!(relative.as_ref().unwrap(), \"extra\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource\")?).unwrap(), \"\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource/another\")?).unwrap(), \"another\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource/../extra\")?).unwrap(), \"extra\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource/../../other\")?).unwrap(), \"../other\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource?new=query#newfragment\")?).unwrap(), \"?new=query\");",
          "    assert_eq!(base.make_relative(&Url::parse(\"https://example.com/path/to/resource#newfragment\")?).unwrap(), \"#newfragment\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/another/path/to/resource/\")?;",
          "    let url = Url::parse(\"https://example.com/another/path/to/resource/extra?query=param#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"extra\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(base.path().split('/').peekable().peek().is_some());",
          "    assert_eq!(base.path().split('/').next().unwrap(), url.path().split('/').next().unwrap());",
          "    assert!(base.path().split('/').peekable().next().is_none());",
          "    assert!(!base.path().split('/').any(|segment| segment.is_empty()));",
          "    assert!(!relative.is_empty());",
          "    assert!(!url.path().split('/').next().is_none());",
          "    assert!(!relative.is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(!url.filename().is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "    assert!(relative.is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/another/path/to/resource/\")?;",
          "    let url = Url::parse(\"https://example.com/another/path/to/resource/extra?query=param#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"extra\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(base.path().split('/').peekable().peek().is_some());",
          "    assert_eq!(base.path().split('/').next().unwrap(), url.path().split('/').next().unwrap());",
          "    assert!(base.path().split('/').peekable().next().is_none());",
          "    assert!(!base.path().split('/').any(|segment| segment.is_empty()));",
          "    assert!(!relative.is_empty());",
          "    assert!(!url.path().split('/').next().is_none());",
          "    assert!(!relative.is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(!url.filename().is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "    assert!(relative.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/resource/\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/resource/extra/file.txt?query=param#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"extra/file.txt?query=param#fragment\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(base.path().split('/').peekable().peek().is_some());",
          "    assert_eq!(base.path(), url.path());",
          "    assert!(base.path().split('/').peekable().peek().is_none());",
          "    assert!(!base.path().split('/').peekable().next().unwrap().is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(base.path().split('/').next().is_none());",
          "    assert!(url.path().split('/').peekable().peek().is_some());",
          "    assert!(!relative.is_empty());",
          "    assert!(url.path().split('/').next().is_none());",
          "    assert!(!relative.is_empty());",
          "    assert!(!url.path().ends_with('/'));",
          "    assert!(relative.contains(\"extra/file.txt\"));",
          "    assert!(relative.contains(\"query=param\"));",
          "    assert!(relative.contains(\"#fragment\"));"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/resource/\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/resource/extra/file.txt?query=param#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"extra/file.txt?query=param#fragment\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(base.path().split('/').peekable().peek().is_some());",
          "    assert_eq!(base.path(), url.path());",
          "    assert!(base.path().split('/').peekable().peek().is_none());",
          "    assert!(!base.path().split('/').peekable().next().unwrap().is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(base.path().split('/').next().is_none());",
          "    assert!(url.path().split('/').peekable().peek().is_some());",
          "    assert!(!relative.is_empty());",
          "    assert!(url.path().split('/').next().is_none());",
          "    assert!(!relative.is_empty());",
          "    assert!(!url.path().ends_with('/'));",
          "    assert!(relative.contains(\"extra/file.txt\"));",
          "    assert!(relative.contains(\"query=param\"));",
          "    assert!(relative.contains(\"#fragment\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/resource/a\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/resource/a/b?query=param#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert!(relative.is_some());",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"b?query=param#fragment\"));"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/resource/a\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/resource/a/b?query=param#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert!(relative.is_some());",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"b?query=param#fragment\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/resource/\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/resource/another_folder/?query=param#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"another_folder/\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() != url.scheme() == false);",
          "    assert!(base.host() != url.host() == false);",
          "    assert!(base.port() != url.port() == false);",
          "    assert!(base.path().split('/').peekable().peek().is_some() == true);",
          "    assert!(base.path().split('/').peekable().peek() == url.path().split('/').peekable().peek());",
          "    assert!(base.path().split('/').peekable().peek().is_some() == false);",
          "    assert!(!(base.path().split('/').any(|segment| segment.is_empty())));",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.path().split('/').any(|segment| segment.is_empty()) == false);",
          "    assert!(relative.is_empty() == false);",
          "    assert!(base.path().split('/').peekable().peek().is_some() == false);",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.filename.is_empty() == false);",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.query().is_some() == true);",
          "    assert!(url.fragment().is_some() == true);"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/resource/\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/resource/another_folder/?query=param#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"another_folder/\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() != url.scheme() == false);",
          "    assert!(base.host() != url.host() == false);",
          "    assert!(base.port() != url.port() == false);",
          "    assert!(base.path().split('/').peekable().peek().is_some() == true);",
          "    assert!(base.path().split('/').peekable().peek() == url.path().split('/').peekable().peek());",
          "    assert!(base.path().split('/').peekable().peek().is_some() == false);",
          "    assert!(!(base.path().split('/').any(|segment| segment.is_empty())));",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.path().split('/').any(|segment| segment.is_empty()) == false);",
          "    assert!(relative.is_empty() == false);",
          "    assert!(base.path().split('/').peekable().peek().is_some() == false);",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.filename.is_empty() == false);",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.query().is_some() == true);",
          "    assert!(url.fragment().is_some() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/resource\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/resource?new=query#new_fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"resource?new=query#new_fragment\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    let (base_path, base_filename) = extract_path_filename(base.path());",
          "    let (url_path, url_filename) = extract_path_filename(url.path());",
          "    assert!(base_path.split('/').peekable().peek().is_some());",
          "    assert!(base_path.split('/').peekable().peek() == url_path.split('/').peekable().peek());",
          "    assert!(base_path.split('/').peekable().peek().is_none());",
          "    assert!(base_path.split('/').any(|segment| !segment.is_empty());",
          "    assert!(!base_path.split('/').any(|segment| segment.is_empty());",
          "    assert!(relative.is_empty());",
          "    assert!(url_path.split('/').any(|segment| !segment.is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(!url_filename.is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/path/to/resource\")?;",
          "    let url = Url::parse(\"https://example.com/path/to/resource?new=query#new_fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"resource?new=query#new_fragment\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    let (base_path, base_filename) = extract_path_filename(base.path());",
          "    let (url_path, url_filename) = extract_path_filename(url.path());",
          "    assert!(base_path.split('/').peekable().peek().is_some());",
          "    assert!(base_path.split('/').peekable().peek() == url_path.split('/').peekable().peek());",
          "    assert!(base_path.split('/').peekable().peek().is_none());",
          "    assert!(base_path.split('/').any(|segment| !segment.is_empty());",
          "    assert!(!base_path.split('/').any(|segment| segment.is_empty());",
          "    assert!(relative.is_empty());",
          "    assert!(url_path.split('/').any(|segment| !segment.is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(!url_filename.is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]