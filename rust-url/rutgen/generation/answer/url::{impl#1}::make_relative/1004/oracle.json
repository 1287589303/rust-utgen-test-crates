[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/b/\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"b/\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() == url.scheme());",
          "    assert!(base.host() == url.host());",
          "    assert!(base.port() == url.port());",
          "    assert!(base.path_segments().is_none());",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.filename().is_empty());",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/b/\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"b/\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() == url.scheme());",
          "    assert!(base.host() == url.host());",
          "    assert!(base.port() == url.port());",
          "    assert!(base.path_segments().is_none());",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.filename().is_empty());",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/a/c.png?key=value#section\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(base.path().ends_with(\"/\"));",
          "    assert!(base.path_segments().unwrap().count() > 0);",
          "    assert!(url.path_segments().unwrap().count() > 0);",
          "    assert!(relative.is_empty());",
          "    assert!(url.path().ends_with(\".png\"));",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/a/c.png?key=value#section\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(base.path().ends_with(\"/\"));",
          "    assert!(base.path_segments().unwrap().count() > 0);",
          "    assert!(url.path_segments().unwrap().count() > 0);",
          "    assert!(relative.is_empty());",
          "    assert!(url.path().ends_with(\".png\"));",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/b/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/a/b/c.png?x=y#footer\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));",
          "    assert!(relative.is_some());",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() == url.scheme());",
          "    assert!(base.host() == url.host());",
          "    assert!(base.port() == url.port());",
          "    assert!(base.path_segments().unwrap().count() > 0);",
          "    assert!(relative.as_ref().unwrap().is_empty() == false);",
          "    assert!(url.path().ends_with(\"/c.png\"));",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/b/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/a/b/c.png?x=y#footer\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));",
          "    assert!(relative.is_some());",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() == url.scheme());",
          "    assert!(base.host() == url.host());",
          "    assert!(base.port() == url.port());",
          "    assert!(base.path_segments().unwrap().count() > 0);",
          "    assert!(relative.as_ref().unwrap().is_empty() == false);",
          "    assert!(url.path().ends_with(\"/c.png\"));",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/directory/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/directory/file.txt?foo=bar#top\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"file.txt?foo=bar#top\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(!base.path_segments().is_none());",
          "    assert!(!relative.is_empty());",
          "    assert!(url.path().ends_with(\"file.txt\"));",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/directory/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/directory/file.txt?foo=bar#top\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"file.txt?foo=bar#top\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(!base.path_segments().is_none());",
          "    assert!(!relative.is_empty());",
          "    assert!(url.path().ends_with(\"file.txt\"));",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/documents/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/documents/index.html?view=full#page\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"index.html\"));",
          "    assert_eq!(relative.as_ref().unwrap(), \"index.html\");",
          "    assert!(relative.is_some());",
          "    assert!(!relative.is_empty());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/documents/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/documents/index.html?view=full#page\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"index.html\"));",
          "    assert_eq!(relative.as_ref().unwrap(), \"index.html\");",
          "    assert!(relative.is_some());",
          "    assert!(!relative.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]