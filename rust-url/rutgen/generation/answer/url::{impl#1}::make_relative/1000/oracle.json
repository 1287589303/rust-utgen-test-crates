[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/path/file.ext?query=value#fragment\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"path/file.ext\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(!base.path().is_empty());",
          "    assert!(base.path_segments().is_some());",
          "    assert!(url.path_segments().is_some());",
          "    assert!(relative.is_some());",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"path/file.ext\"));",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/path/file.ext?query=value#fragment\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"path/file.ext\"));",
          "    assert!(!base.cannot_be_a_base());",
          "    assert_eq!(base.scheme(), url.scheme());",
          "    assert_eq!(base.host(), url.host());",
          "    assert_eq!(base.port(), url.port());",
          "    assert!(!base.path().is_empty());",
          "    assert!(base.path_segments().is_some());",
          "    assert!(url.path_segments().is_some());",
          "    assert!(relative.is_some());",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"path/file.ext\"));",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/other_path/file.html?query1=value1&query2=value2#section\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"other_path/file.html\"));",
          "    assert_eq!(relative.as_ref().map(|s| s.to_string()), Some(\"other_path/file.html\"));",
          "    assert_eq!(relative.as_ref().map(|s| s.contains(\"query1\")), true);",
          "    assert_eq!(relative.as_ref().map(|s| s.contains(\"#section\")), true);",
          "    assert_eq!(relative.is_some(), true);",
          "    assert!(relative.unwrap().starts_with(\"other_path/\"));",
          "    assert!(relative.unwrap().ends_with(\"file.html\"));",
          "    assert!(relative.unwrap().contains(\"query1=value1\"));",
          "    assert!(relative.unwrap().contains(\"query2=value2\"));",
          "    assert!(relative.unwrap().contains(\"#section\"));",
          "    assert!(relative.unwrap().len() > 0);"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/other_path/file.html?query1=value1&query2=value2#section\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"other_path/file.html\"));",
          "    assert_eq!(relative.as_ref().map(|s| s.to_string()), Some(\"other_path/file.html\"));",
          "    assert_eq!(relative.as_ref().map(|s| s.contains(\"query1\")), true);",
          "    assert_eq!(relative.as_ref().map(|s| s.contains(\"#section\")), true);",
          "    assert_eq!(relative.is_some(), true);",
          "    assert!(relative.unwrap().starts_with(\"other_path/\"));",
          "    assert!(relative.unwrap().ends_with(\"file.html\"));",
          "    assert!(relative.unwrap().contains(\"query1=value1\"));",
          "    assert!(relative.unwrap().contains(\"query2=value2\"));",
          "    assert!(relative.unwrap().contains(\"#section\"));",
          "    assert!(relative.unwrap().len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/directory/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/directory/file.png?size=large#image\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative, Some(\"file.png?size=large#image\"));"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/directory/\").unwrap();",
          "    let url = Url::parse(\"https://example.com/directory/file.png?size=large#image\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative, Some(\"file.png?size=large#image\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]