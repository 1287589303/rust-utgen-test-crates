[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"http://example.net/a/b.html\").unwrap();",
          "    let url = Url::parse(\"https://example.net/a/c.png\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative, None);"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"http://example.net/a/b.html\").unwrap();",
          "    let url = Url::parse(\"https://example.net/a/c.png\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"ftp://example.net/a/b.html?param=value\").unwrap();",
          "    let url = Url::parse(\"http://example.net/a/c.png\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative, None);"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"ftp://example.net/a/b.html?param=value\").unwrap();",
          "    let url = Url::parse(\"http://example.net/a/c.png\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"http://example.net/a/b.html#section\").unwrap();",
          "    let url = Url::parse(\"https://example.net/a/c.png\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative, None);"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"http://example.net/a/b.html#section\").unwrap();",
          "    let url = Url::parse(\"https://example.net/a/c.png\").unwrap();",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]