[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/b.html?foo=bar#section\")?;",
          "    let url = Url::parse(\"https://example.com/a/c.png?baz=qux#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../c.png?baz=qux#fragment\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() == url.scheme());",
          "    assert!(base.host() == url.host());",
          "    assert!(base.port() == url.port());",
          "    assert!(base.path_segments().is_some());",
          "    assert!(base_path.peek().is_some());",
          "    assert!(base_path.peek() != url_path.peek());",
          "    assert!(base_path_split.peek().is_empty());",
          "    assert!(url_path.peek().is_none());",
          "    assert!(relative.is_empty());",
          "    assert!(base_filename != url_filename);",
          "    assert!(!url_filename.is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/b.html?foo=bar#section\")?;",
          "    let url = Url::parse(\"https://example.com/a/c.png?baz=qux#fragment\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../c.png?baz=qux#fragment\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() == url.scheme());",
          "    assert!(base.host() == url.host());",
          "    assert!(base.port() == url.port());",
          "    assert!(base.path_segments().is_some());",
          "    assert!(base_path.peek().is_some());",
          "    assert!(base_path.peek() != url_path.peek());",
          "    assert!(base_path_split.peek().is_empty());",
          "    assert!(url_path.peek().is_none());",
          "    assert!(relative.is_empty());",
          "    assert!(base_filename != url_filename);",
          "    assert!(!url_filename.is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/b/\")?;",
          "    let url = Url::parse(\"https://example.com/a/b/c.png?param=value#frag\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));",
          "    assert_eq!(base.scheme() != url.scheme(), false);",
          "    assert_eq!(base.host() != url.host(), false);",
          "    assert_eq!(base.port() != url.port(), false);",
          "    assert!(base_path.peek().is_some());",
          "    assert!(base_path.peek() != url_path.peek());",
          "    assert!(base_path_segment.is_empty());",
          "    assert!(!url_path_segment.is_empty());",
          "    assert!(relative.is_empty());",
          "    assert!(base_filename != url_filename);",
          "    assert!(!url_filename.is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(let Some(query) = url.query());",
          "    assert!(let Some(fragment) = url.fragment());",
          "    assert!(relative.is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/b/\")?;",
          "    let url = Url::parse(\"https://example.com/a/b/c.png?param=value#frag\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"c.png\"));",
          "    assert_eq!(base.scheme() != url.scheme(), false);",
          "    assert_eq!(base.host() != url.host(), false);",
          "    assert_eq!(base.port() != url.port(), false);",
          "    assert!(base_path.peek().is_some());",
          "    assert!(base_path.peek() != url_path.peek());",
          "    assert!(base_path_segment.is_empty());",
          "    assert!(!url_path_segment.is_empty());",
          "    assert!(relative.is_empty());",
          "    assert!(base_filename != url_filename);",
          "    assert!(!url_filename.is_empty());",
          "    assert!(!relative.is_empty());",
          "    assert!(let Some(query) = url.query());",
          "    assert!(let Some(fragment) = url.fragment());",
          "    assert!(relative.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/b/\")?;",
          "    let url = Url::parse(\"https://example.com/a/d/c.png?abc=def#header\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../d/c.png?abc=def#header\"));"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/b/\")?;",
          "    let url = Url::parse(\"https://example.com/a/d/c.png?abc=def#header\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"../d/c.png?abc=def#header\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/b.html?c=d#top\")?;",
          "    let url = Url::parse(\"https://example.com/a/b.html?e=f#bottom\")?;",
          "    let relative = base.make_relative(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"?e=f#bottom\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() != url.scheme() == false);",
          "    assert!(base.host() != url.host() == false);",
          "    assert!(base.port() != url.port() == false);",
          "    assert!(base.path().contains(\"a/b.html\"));",
          "    assert!(base.path().split('/').count() > 1);",
          "    assert!(base.path().split('/').last().unwrap() == \"b.html\");",
          "    assert!(base.path().split('/').count() == 3);",
          "    assert!(relative.is_empty() == false);",
          "    assert!(base_filename != url_filename);",
          "    assert!(url_filename.is_empty() == false);",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());"
        ],
        "code": [
          "{",
          "    let base = Url::parse(\"https://example.com/a/b.html?c=d#top\")?;",
          "    let url = Url::parse(\"https://example.com/a/b.html?e=f#bottom\")?;",
          "    let relative = base.make_relative(&url);",
          "    assert_eq!(relative.as_ref().map(|s| s.as_str()), Some(\"?e=f#bottom\"));",
          "    assert!(base.cannot_be_a_base() == false);",
          "    assert!(base.scheme() != url.scheme() == false);",
          "    assert!(base.host() != url.host() == false);",
          "    assert!(base.port() != url.port() == false);",
          "    assert!(base.path().contains(\"a/b.html\"));",
          "    assert!(base.path().split('/').count() > 1);",
          "    assert!(base.path().split('/').last().unwrap() == \"b.html\");",
          "    assert!(base.path().split('/').count() == 3);",
          "    assert!(relative.is_empty() == false);",
          "    assert!(base_filename != url_filename);",
          "    assert!(url_filename.is_empty() == false);",
          "    assert!(relative.is_empty() == false);",
          "    assert!(url.query().is_some());",
          "    assert!(url.fragment().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]