[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"ftp://example.com/foo\").unwrap();",
          "    let _ = url.origin();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.origin(), Origin::Tuple(\"ftp\".into(), Host::Domain(\"example.com\".into()), 21));",
          "    ",
          "    let url_blob = Url::parse(\"blob:https://example.com/foo\").unwrap();",
          "    assert_eq!(url_blob.origin(), Origin::Tuple(\"https\".into(), Host::Domain(\"example.com\".into()), 443));",
          "    ",
          "    let url_file = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    assert!(!url_file.origin().is_tuple());",
          "    ",
          "    let other_url_file = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    assert!(url_file.origin() != other_url_file.origin());",
          "    ",
          "    let url_other = Url::parse(\"foo:bar\").unwrap();",
          "    assert!(!url_other.origin().is_tuple());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"ftp://example.com/foo\").unwrap();",
          "    let _ = url.origin();",
          "    assert_eq!(url.origin(), Origin::Tuple(\"ftp\".into(), Host::Domain(\"example.com\".into()), 21));",
          "    ",
          "    let url_blob = Url::parse(\"blob:https://example.com/foo\").unwrap();",
          "    assert_eq!(url_blob.origin(), Origin::Tuple(\"https\".into(), Host::Domain(\"example.com\".into()), 443));",
          "    ",
          "    let url_file = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    assert!(!url_file.origin().is_tuple());",
          "    ",
          "    let other_url_file = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    assert!(url_file.origin() != other_url_file.origin());",
          "    ",
          "    let url_other = Url::parse(\"foo:bar\").unwrap();",
          "    assert!(!url_other.origin().is_tuple());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"blob:https://example.com/foo\").unwrap();",
          "    let _ = url.origin();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.origin(), Origin::Tuple(\"https\".into(), Host::Domain(\"example.com\".into()), 443));",
          "    assert!(!url.origin().is_tuple());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"blob:https://example.com/foo\").unwrap();",
          "    let _ = url.origin();",
          "    assert_eq!(url.origin(), Origin::Tuple(\"https\".into(), Host::Domain(\"example.com\".into()), 443));",
          "    assert!(!url.origin().is_tuple());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    let _ = url.origin();",
          "",
          "    let other_url = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    let _ = url.origin();",
          "    let _ = other_url.origin();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.origin().is_tuple());",
          "    assert!(url.origin() != other_url.origin());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    let _ = url.origin();",
          "",
          "    let other_url = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    let _ = url.origin();",
          "    let _ = other_url.origin();",
          "    assert!(!url.origin().is_tuple());",
          "    assert!(url.origin() != other_url.origin());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"foo:bar\").unwrap();",
          "    let _ = url.origin();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.origin(), Origin::new_opaque());",
          "    assert!(!url.origin().is_tuple());",
          "    let url = Url::parse(\"ftp://example.com/foo\").unwrap();",
          "    assert_eq!(url.origin(), Origin::Tuple(\"ftp\".into(), Host::Domain(\"example.com\".into()), 21));",
          "    let url = Url::parse(\"blob:https://example.com/foo\").unwrap();",
          "    assert_eq!(url.origin(), Origin::Tuple(\"https\".into(), Host::Domain(\"example.com\".into()), 443));",
          "    let url = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    assert!(!url.origin().is_tuple());",
          "    let other_url = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    assert!(url.origin() != other_url.origin());",
          "    let url = Url::parse(\"foo:bar\").unwrap();",
          "    assert!(!url.origin().is_tuple());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"foo:bar\").unwrap();",
          "    let _ = url.origin();",
          "    assert_eq!(url.origin(), Origin::new_opaque());",
          "    assert!(!url.origin().is_tuple());",
          "    let url = Url::parse(\"ftp://example.com/foo\").unwrap();",
          "    assert_eq!(url.origin(), Origin::Tuple(\"ftp\".into(), Host::Domain(\"example.com\".into()), 21));",
          "    let url = Url::parse(\"blob:https://example.com/foo\").unwrap();",
          "    assert_eq!(url.origin(), Origin::Tuple(\"https\".into(), Host::Domain(\"example.com\".into()), 443));",
          "    let url = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    assert!(!url.origin().is_tuple());",
          "    let other_url = Url::parse(\"file:///tmp/foo\").unwrap();",
          "    assert!(url.origin() != other_url.origin());",
          "    let url = Url::parse(\"foo:bar\").unwrap();",
          "    assert!(!url.origin().is_tuple());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"://invalid\").unwrap();",
          "    let _ = url.origin();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(url.origin(), Origin::Opaque(_)));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"://invalid\").unwrap();",
          "    let _ = url.origin();",
          "    assert!(matches!(url.origin(), Origin::Opaque(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"custom_scheme://resource\").unwrap();",
          "    let _ = url.origin();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.origin(), Origin::new_opaque());",
          "    assert!(!url.origin().is_tuple());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"custom_scheme://resource\").unwrap();",
          "    let _ = url.origin();",
          "    assert_eq!(url.origin(), Origin::new_opaque());",
          "    assert!(!url.origin().is_tuple());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]