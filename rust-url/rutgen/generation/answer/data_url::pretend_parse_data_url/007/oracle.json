[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"http://example.com\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"http://example.com\");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"       \");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"       \");",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"data:\\ttest\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(\"test\"));",
          "    assert_eq!(result.unwrap(), \"test\");",
          "    assert!(result.is_some());",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap().len() > 0);",
          "    assert!(result.unwrap().contains(\"test\"));"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"data:\\ttest\");",
          "    assert_eq!(result, Some(\"test\"));",
          "    assert_eq!(result.unwrap(), \"test\");",
          "    assert!(result.is_some());",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap().len() > 0);",
          "    assert!(result.unwrap().contains(\"test\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"data:\\ntest\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(\"test\"));"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"data:\\ntest\");",
          "    assert_eq!(result, Some(\"test\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"data:\\r\\n test\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(\"test\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\n\\n data: test\\n\"), Some(\"test\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:   example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"NOT A DATA URL\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data: test data\"), Some(\"test data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:    test    \"), Some(\"test\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\tdata\\n\"), Some(\"data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:12345 \"), Some(\"12345\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:Hello, World!\"), Some(\"Hello, World!\"));",
          "    assert_eq!(pretend_parse_data_url(\"   DATA:test\"), Some(\"test\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  \"), Some(\"\"));"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"data:\\r\\n test\");",
          "    assert_eq!(result, Some(\"test\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\n\\n data: test\\n\"), Some(\"test\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:   example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"NOT A DATA URL\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data: test data\"), Some(\"test data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:    test    \"), Some(\"test\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\tdata\\n\"), Some(\"data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:12345 \"), Some(\"12345\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:Hello, World!\"), Some(\"Hello, World!\"));",
          "    assert_eq!(pretend_parse_data_url(\"   DATA:test\"), Some(\"test\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  \"), Some(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]