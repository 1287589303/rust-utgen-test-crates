[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"  data:example_data  \";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"  data:example_data  \"), Some(\"example_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example_data\"), Some(\"example_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data:example_data\\n\"), Some(\"example_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\td\\tata:example_data  \"), Some(\"example_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\n  data:example_data\\r\\n\"), Some(\"example_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data: \"), Some(\"\"));",
          "    assert!(pretend_parse_data_url(\"notdata:example_data\").is_none());",
          "    assert!(pretend_parse_data_url(\"  data:   \\tabc\").is_some());",
          "    assert!(pretend_parse_data_url(\"data\").is_none());",
          "    assert!(pretend_parse_data_url(\"\").is_none());"
        ],
        "code": [
          "{",
          "    let input = \"  data:example_data  \";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"  data:example_data  \"), Some(\"example_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example_data\"), Some(\"example_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data:example_data\\n\"), Some(\"example_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\td\\tata:example_data  \"), Some(\"example_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\n  data:example_data\\r\\n\"), Some(\"example_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data: \"), Some(\"\"));",
          "    assert!(pretend_parse_data_url(\"notdata:example_data\").is_none());",
          "    assert!(pretend_parse_data_url(\"  data:   \\tabc\").is_some());",
          "    assert!(pretend_parse_data_url(\"data\").is_none());",
          "    assert!(pretend_parse_data_url(\"\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"    \";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:example   \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\ttext\"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\ntext\"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:12345\"), Some(\"12345\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:   \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"notdata:example\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:;fragment#more\"), Some(\";fragment#more\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdata:example\\n\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"randomstring\"), None);"
        ],
        "code": [
          "{",
          "    let input = \"    \";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:example   \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\ttext\"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\ntext\"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:12345\"), Some(\"12345\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:   \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"notdata:example\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:;fragment#more\"), Some(\";fragment#more\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdata:example\\n\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"randomstring\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\\tdatacontent\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"\\tdatacontent\"), Some(\"datacontent\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdaTa content\\n\"), Some(\"datacontent\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tDATA  \"), Some(\"DATA\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdatacontent\"), Some(\"datacontent\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:datacontent\"), Some(\"datacontent\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data:datacontent \"), Some(\"datacontent\"));"
        ],
        "code": [
          "{",
          "    let input = \"\\tdatacontent\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"\\tdatacontent\"), Some(\"datacontent\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdaTa content\\n\"), Some(\"datacontent\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tDATA  \"), Some(\"DATA\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdatacontent\"), Some(\"datacontent\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:datacontent\"), Some(\"datacontent\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data:datacontent \"), Some(\"datacontent\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\\ndata:some\\ncontent\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"\\ndata:some\\ncontent\"), Some(\"some\\ncontent\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"    data:info  \"), Some(\"info\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:   \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:valid_data\\twith\\tspaces\"), Some(\"valid_data\\twith\\tspaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"random:input\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:123\"), Some(\"123\"));",
          "    assert_eq!(pretend_parse_data_url(\" \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"\\n\\tdata:example\\n\\n\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:ends_with_spaces   \"), Some(\"ends_with_spaces\"));"
        ],
        "code": [
          "{",
          "    let input = \"\\ndata:some\\ncontent\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"\\ndata:some\\ncontent\"), Some(\"some\\ncontent\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"    data:info  \"), Some(\"info\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:   \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:valid_data\\twith\\tspaces\"), Some(\"valid_data\\twith\\tspaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"random:input\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:123\"), Some(\"123\"));",
          "    assert_eq!(pretend_parse_data_url(\" \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"\\n\\tdata:example\\n\\n\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:ends_with_spaces   \"), Some(\"ends_with_spaces\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"notdata:butthis\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:sample\"), Some(\"sample\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:example   \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:   \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:content;type=text/plain;base64,SGVsbG8sIFdvcmxkIQ==\"), Some(\"content;type=text/plain;base64,SGVsbG8sIFdvcmxkIQ==\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==\"), Some(\"text/plain;base64,SGVsbG8sIFdvcmxkIQ==\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:part;with;multiple;separators\"), Some(\"part;with;multiple;separators\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:fragment#likeThis\"), Some(\"fragment#likeThis\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\t\\nvalue\\n\\t\"), Some(\"value\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));"
        ],
        "code": [
          "{",
          "    let input = \"notdata:butthis\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:sample\"), Some(\"sample\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:example   \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:   \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:content;type=text/plain;base64,SGVsbG8sIFdvcmxkIQ==\"), Some(\"content;type=text/plain;base64,SGVsbG8sIFdvcmxkIQ==\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:text/plain;base64,SGVsbG8sIFdvcmxkIQ==\"), Some(\"text/plain;base64,SGVsbG8sIFdvcmxkIQ==\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:part;with;multiple;separators\"), Some(\"part;with;multiple;separators\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:fragment#likeThis\"), Some(\"fragment#likeThis\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\t\\nvalue\\n\\t\"), Some(\"value\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data:\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\" data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:valid\"), Some(\"valid\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:content  \"), Some(\"content\"));",
          "    assert!(pretend_parse_data_url(\"not_a_data_url\").is_none());",
          "    assert!(pretend_parse_data_url(\"  \\n\\t data:  test  \").is_some());",
          "    assert_eq!(pretend_parse_data_url(\"data:info\"), Some(\"info\"));",
          "    assert_eq!(pretend_parse_data_url(\"DATA:example\"), Some(\"example\"));",
          "    assert!(pretend_parse_data_url(\"\").is_none());"
        ],
        "code": [
          "{",
          "    let input = \"data:\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\" data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:valid\"), Some(\"valid\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:content  \"), Some(\"content\"));",
          "    assert!(pretend_parse_data_url(\"not_a_data_url\").is_none());",
          "    assert!(pretend_parse_data_url(\"  \\n\\t data:  test  \").is_some());",
          "    assert_eq!(pretend_parse_data_url(\"data:info\"), Some(\"info\"));",
          "    assert_eq!(pretend_parse_data_url(\"DATA:example\"), Some(\"example\"));",
          "    assert!(pretend_parse_data_url(\"\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]