[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example  \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\n\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdata:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data:example  \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"invalid_prefix:example\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:with special characters !@#$%^&*()\"), Some(\"with special characters !@#$%^&*()\"));",
          "    assert_eq!(pretend_parse_data_url(\" \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:a\\tb\\nc\"), Some(\"a\\tb\\nc\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \\t \\n data\"), Some(\"data\"));"
        ],
        "code": [
          "{",
          "    let input = \"data\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example  \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\n\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdata:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data:example  \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"invalid_prefix:example\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:with special characters !@#$%^&*()\"), Some(\"with special characters !@#$%^&*()\"));",
          "    assert_eq!(pretend_parse_data_url(\" \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:a\\tb\\nc\"), Some(\"a\\tb\\nc\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \\t \\n data\"), Some(\"data\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data:\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some_data\"), Some(\"some_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some_data   \"), Some(\"some_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\td\\tata:\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:\\n\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some_data\\nmore_data\"), Some(\"some_data\\nmore_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"invalid_prefix:\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:a\\tb\\r\\nc\"), Some(\"a\\tb\\r\\nc\"));",
          "    assert_eq!(pretend_parse_data_url(\" data : \"), Some(\"\"));"
        ],
        "code": [
          "{",
          "    let input = \"data:\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some_data\"), Some(\"some_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some_data   \"), Some(\"some_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\td\\tata:\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:\\n\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some_data\\nmore_data\"), Some(\"some_data\\nmore_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"invalid_prefix:\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:a\\tb\\r\\nc\"), Some(\"a\\tb\\r\\nc\"));",
          "    assert_eq!(pretend_parse_data_url(\" data : \"), Some(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"dat a:\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"dat a:\"), None);"
        ],
        "code": [
          "{",
          "    let input = \"dat a:\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"dat a:\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"da ta:\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"da ta:\"), None);"
        ],
        "code": [
          "{",
          "    let input = \"da ta:\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"da ta:\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"d ata:\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"d ata:\"), None);"
        ],
        "code": [
          "{",
          "    let input = \"d ata:\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"d ata:\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data:\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"data:\"; assert_eq!(pretend_parse_data_url(input), None);"
        ],
        "code": [
          "{",
          "    let input = \"data:\";",
          "    pretend_parse_data_url(input);",
          "    let input = \"data:\"; assert_eq!(pretend_parse_data_url(input), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]