[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data:example data\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:example data\"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\"     data:example data\"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example data   \"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\tdata\"), Some(\"example\\tdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\ndata\"), Some(\"example\\ndata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\rdata\"), Some(\"example\\rdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example data \"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example data\\t\"), Some(\"example data\\t\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  example data\"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example!\"), Some(\"example!\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:    \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"not-a-data-url\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"   \\n   \\tdata:   sample data   \\n\"), Some(\"sample data\"));"
        ],
        "code": [
          "{",
          "    let input = \"data:example data\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:example data\"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\"     data:example data\"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example data   \"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\tdata\"), Some(\"example\\tdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\ndata\"), Some(\"example\\ndata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\rdata\"), Some(\"example\\rdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example data \"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example data\\t\"), Some(\"example data\\t\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  example data\"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example!\"), Some(\"example!\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:    \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"not-a-data-url\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"   \\n   \\tdata:   sample data   \\n\"), Some(\"sample data\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"   data:another_example\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"   data:another_example\"), Some(\"another_example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example with spaces   \"), Some(\"example with spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:   example with tabs\\t\\t   \"), Some(\"example with tabs\\t\\t\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\nwith\\nnewlines\"), Some(\"example\\nwith\\nnewlines\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\rwith\\rcarriage returns\"), Some(\"example\\rwith\\rcarriage returns\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:another_example\\tmore_text\"), Some(\"another_example\\tmore_text\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:   \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example_with_special_chars?!*\"), Some(\"example_with_special_chars?!*\"));",
          "    assert_eq!(pretend_parse_data_url(\"xyz:not_a_data_url\"), None);"
        ],
        "code": [
          "{",
          "    let input = \"   data:another_example\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"   data:another_example\"), Some(\"another_example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example with spaces   \"), Some(\"example with spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:   example with tabs\\t\\t   \"), Some(\"example with tabs\\t\\t\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\nwith\\nnewlines\"), Some(\"example\\nwith\\nnewlines\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\\rwith\\rcarriage returns\"), Some(\"example\\rwith\\rcarriage returns\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:another_example\\tmore_text\"), Some(\"another_example\\tmore_text\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:   \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example_with_special_chars?!*\"), Some(\"example_with_special_chars?!*\"));",
          "    assert_eq!(pretend_parse_data_url(\"xyz:not_a_data_url\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data:\\texample\\tdata\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:\\texample\\tdata\"), Some(\"example\\tdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\nexample\\ndata\"), Some(\"example\\ndata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example data \"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:\\texample\\tdata \"), Some(\"example\\tdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:data\"), Some(\"data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\t\"), Some(\"\"));",
          "    assert!(pretend_parse_data_url(\"notdata:\\texample\\tdata\").is_none());",
          "    assert!(pretend_parse_data_url(\"data\").is_none());",
          "    assert!(pretend_parse_data_url(\"\").is_none());",
          "    assert!(pretend_parse_data_url(\"  \\t  \").is_none());"
        ],
        "code": [
          "{",
          "    let input = \"data:\\texample\\tdata\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:\\texample\\tdata\"), Some(\"example\\tdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\nexample\\ndata\"), Some(\"example\\ndata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example data \"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:\\texample\\tdata \"), Some(\"example\\tdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:data\"), Some(\"data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\t\"), Some(\"\"));",
          "    assert!(pretend_parse_data_url(\"notdata:\\texample\\tdata\").is_none());",
          "    assert!(pretend_parse_data_url(\"data\").is_none());",
          "    assert!(pretend_parse_data_url(\"\").is_none());",
          "    assert!(pretend_parse_data_url(\"  \\t  \").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data:\\nnew\\nline data\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:\\nnew\\nline data\"), Some(\"new\\nline data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\tnew data\"), Some(\"new data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: new data \"), Some(\"new data\"));",
          "    assert_eq!(pretend_parse_data_url(\" data: my data \"), Some(\"my data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: multiple   spaces    \"), Some(\"multiple   spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:single_line_data\"), Some(\"single_line_data\"));",
          "    assert_eq!(pretend_parse_data_url(\" data: trimmed space \"), Some(\"trimmed space\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:\\n\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:     \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:line1\\nline2\"), Some(\"line1\\nline2\"));"
        ],
        "code": [
          "{",
          "    let input = \"data:\\nnew\\nline data\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:\\nnew\\nline data\"), Some(\"new\\nline data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\tnew data\"), Some(\"new data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: new data \"), Some(\"new data\"));",
          "    assert_eq!(pretend_parse_data_url(\" data: my data \"), Some(\"my data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: multiple   spaces    \"), Some(\"multiple   spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:single_line_data\"), Some(\"single_line_data\"));",
          "    assert_eq!(pretend_parse_data_url(\" data: trimmed space \"), Some(\"trimmed space\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:\\n\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:     \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:line1\\nline2\"), Some(\"line1\\nline2\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data:   trailing spaces    \";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:   trailing spaces    \"), Some(\"trailing spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:content\"), Some(\"content\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:   leading spaces \"), Some(\"leading spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  newlines\\nand tabs\\t \"), Some(\"newlines\\nand tabs\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:onlytext\"), Some(\"onlytext\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\t  tabs and spaces \\n\"), Some(\"tabs and spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:validdata  \"), Some(\"validdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:singlecharacter  \"), Some(\"singlecharacter\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  \\t\\n\\r  \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"invalid data\"), None);"
        ],
        "code": [
          "{",
          "    let input = \"data:   trailing spaces    \";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:   trailing spaces    \"), Some(\"trailing spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:content\"), Some(\"content\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:   leading spaces \"), Some(\"leading spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  newlines\\nand tabs\\t \"), Some(\"newlines\\nand tabs\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:onlytext\"), Some(\"onlytext\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\t  tabs and spaces \\n\"), Some(\"tabs and spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:validdata  \"), Some(\"validdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:singlecharacter  \"), Some(\"singlecharacter\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  \\t\\n\\r  \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"invalid data\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"DATA:caseInsensitiveExample\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"DATA:caseInsensitiveExample\"), Some(\"caseInsensitiveExample\"));",
          "    assert_eq!(pretend_parse_data_url(\"    DATA:leadingSpaces\"), Some(\"leadingSpaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"DATA:trailingSpaces   \"), Some(\"trailingSpaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"DATA:with\\nnewlines\\nand\\ttabs\"), Some(\"with\\nnewlines\\nand\\ttabs\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:validData\"), Some(\"validData\"));",
          "    assert_eq!(pretend_parse_data_url(\"data :noColonAfter\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"notData:invalidPrefix\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"  \\t \\nDAta:anotherExample  \"), Some(\"anotherExample\"));",
          "    assert_eq!(pretend_parse_data_url(\"DATA:\\tvalidDataWithTabs\"), Some(\"validDataWithTabs\"));"
        ],
        "code": [
          "{",
          "    let input = \"DATA:caseInsensitiveExample\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"DATA:caseInsensitiveExample\"), Some(\"caseInsensitiveExample\"));",
          "    assert_eq!(pretend_parse_data_url(\"    DATA:leadingSpaces\"), Some(\"leadingSpaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"DATA:trailingSpaces   \"), Some(\"trailingSpaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"DATA:with\\nnewlines\\nand\\ttabs\"), Some(\"with\\nnewlines\\nand\\ttabs\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:validData\"), Some(\"validData\"));",
          "    assert_eq!(pretend_parse_data_url(\"data :noColonAfter\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"notData:invalidPrefix\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"  \\t \\nDAta:anotherExample  \"), Some(\"anotherExample\"));",
          "    assert_eq!(pretend_parse_data_url(\"DATA:\\tvalidDataWithTabs\"), Some(\"validDataWithTabs\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data:\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: some data \"), Some(\"some data\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data: with spaces   \"), Some(\"with spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\twith tabs\\n\"), Some(\"with tabs\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \\n\\rdata \\t \"), Some(\"data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:withNoSpaces\"), Some(\"withNoSpaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\r\\nanother_example\"), Some(\"another_example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  trailing whitespace    \"), Some(\"trailing whitespace\"));"
        ],
        "code": [
          "{",
          "    let input = \"data:\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: some data \"), Some(\"some data\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data: with spaces   \"), Some(\"with spaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\twith tabs\\n\"), Some(\"with tabs\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \\n\\rdata \\t \"), Some(\"data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:withNoSpaces\"), Some(\"withNoSpaces\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\r\\nanother_example\"), Some(\"another_example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  trailing whitespace    \"), Some(\"trailing whitespace\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]