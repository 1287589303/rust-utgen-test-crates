[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    pretend_parse_data_url(\"\")",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"    \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"    data:   \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"DAtA:some_data\"), Some(\"some_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"DAtA: some_data \"), Some(\"some_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\nhello world\"), Some(\"\\nhello world\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\thello\"), Some(\"\\thello\"));",
          "    assert_eq!(pretend_parse_data_url(\"something:else\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"datab:incorrect\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"da:ta\"), None);"
        ],
        "code": [
          "{",
          "    pretend_parse_data_url(\"\")",
          "    assert_eq!(pretend_parse_data_url(\"\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"    \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"    data:   \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"DAtA:some_data\"), Some(\"some_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"DAtA: some_data \"), Some(\"some_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\nhello world\"), Some(\"\\nhello world\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\thello\"), Some(\"\\thello\"));",
          "    assert_eq!(pretend_parse_data_url(\"something:else\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"datab:incorrect\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"da:ta\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    pretend_parse_data_url(\"    \")",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"    \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"  data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some_value\"), Some(\"some_value\"));",
          "    assert_eq!(pretend_parse_data_url(\"dat:wrong_prefix\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"   \\t data: more_data   \"), Some(\"more_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: valid_data \\n \"), Some(\"valid_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\tInvalid\\nformat\"), Some(\"Invalid\\nformat\"));"
        ],
        "code": [
          "{",
          "    pretend_parse_data_url(\"    \")",
          "    assert_eq!(pretend_parse_data_url(\"    \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"  data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some_value\"), Some(\"some_value\"));",
          "    assert_eq!(pretend_parse_data_url(\"dat:wrong_prefix\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"   \\t data: more_data   \"), Some(\"more_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: valid_data \\n \"), Some(\"valid_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\tInvalid\\nformat\"), Some(\"Invalid\\nformat\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    pretend_parse_data_url(\"\\t\\t\\t\")",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"\\t\\t\\t\"), None);"
        ],
        "code": [
          "{",
          "    pretend_parse_data_url(\"\\t\\t\\t\")",
          "    assert_eq!(pretend_parse_data_url(\"\\t\\t\\t\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    pretend_parse_data_url(\"\\n\\n\\n\")",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"\\n\\n\\n\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"   \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:hello\"), Some(\"hello\"));",
          "    assert_eq!(pretend_parse_data_url(\"invalid_data: content\"), Some(\"invalid_data: content\"));"
        ],
        "code": [
          "{",
          "    pretend_parse_data_url(\"\\n\\n\\n\")",
          "    assert_eq!(pretend_parse_data_url(\"\\n\\n\\n\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"   \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:hello\"), Some(\"hello\"));",
          "    assert_eq!(pretend_parse_data_url(\"invalid_data: content\"), Some(\"invalid_data: content\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    pretend_parse_data_url(\"invalid_data_url\")",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"invalid_data_url\"), None);"
        ],
        "code": [
          "{",
          "    pretend_parse_data_url(\"invalid_data_url\")",
          "    assert_eq!(pretend_parse_data_url(\"invalid_data_url\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    pretend_parse_data_url(\"Invalid_Data_URL\")",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"Invalid_Data_URL\"), None);"
        ],
        "code": [
          "{",
          "    pretend_parse_data_url(\"Invalid_Data_URL\")",
          "    assert_eq!(pretend_parse_data_url(\"Invalid_Data_URL\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    pretend_parse_data_url(\"text/plain;base64,SGVsbG8sIFdvcmxkIQ==\")",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"text/plain;base64,SGVsbG8sIFdvcmxkIQ==\"), None);"
        ],
        "code": [
          "{",
          "    pretend_parse_data_url(\"text/plain;base64,SGVsbG8sIFdvcmxkIQ==\")",
          "    assert_eq!(pretend_parse_data_url(\"text/plain;base64,SGVsbG8sIFdvcmxkIQ==\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    pretend_parse_data_url(\"      not_a_data_url     \")",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"      not_a_data_url     \"), None);"
        ],
        "code": [
          "{",
          "    pretend_parse_data_url(\"      not_a_data_url     \")",
          "    assert_eq!(pretend_parse_data_url(\"      not_a_data_url     \"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]