[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"   data:hello world!\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(\"hello world!\"));",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().trim(), \"hello world!\");",
          "    assert_eq!(pretend_parse_data_url(\"data:  example data  \"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:12345\"), Some(\"12345\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:another test   \"), Some(\"another test\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:message with tabs\\tand\\nnewlines\"), Some(\"message with tabs\\tand\\nnewlines\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:validString!\"), Some(\"validString!\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"not a data URL\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"  \\t \\n data:only spaces after\"), Some(\"only spaces after\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some data followed by whitespace   \"), Some(\"some data followed by whitespace\"));"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"   data:hello world!\");",
          "    assert_eq!(result, Some(\"hello world!\"));",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().trim(), \"hello world!\");",
          "    assert_eq!(pretend_parse_data_url(\"data:  example data  \"), Some(\"example data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:12345\"), Some(\"12345\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:another test   \"), Some(\"another test\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:message with tabs\\tand\\nnewlines\"), Some(\"message with tabs\\tand\\nnewlines\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:validString!\"), Some(\"validString!\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"not a data URL\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"  \\t \\n data:only spaces after\"), Some(\"only spaces after\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some data followed by whitespace   \"), Some(\"some data followed by whitespace\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"data:\\n\\ttext\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(\"text\"));",
          "    assert_eq!(result, Some(\"text\"));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() == \"text\");",
          "    assert_eq!(pretend_parse_data_url(\"data:text\"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\" data: text \"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:text \"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \\n text \"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  \\t text\"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:text;name=value#fragment\"), Some(\"text;name=value#fragment\"));",
          "    assert_eq!(pretend_parse_data_url(\" data: text;name=value\\n \"), Some(\"text;name=value\"));",
          "    assert!(pretend_parse_data_url(\"text:data\") == None);",
          "    assert!(pretend_parse_data_url(\"notdata:text\") == None);",
          "    assert!(pretend_parse_data_url(\"data:text\") == Some(\"text\"));",
          "    assert!(pretend_parse_data_url(\"\") == None);",
          "    assert!(pretend_parse_data_url(\" \\t\\n \") == None);",
          "    assert!(pretend_parse_data_url(\"data: \") == Some(\"\"));",
          "    assert!(pretend_parse_data_url(\" data: \\r\\n \") == Some(\"\"));"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"data:\\n\\ttext\");",
          "    assert_eq!(result, Some(\"text\"));",
          "    assert_eq!(result, Some(\"text\"));",
          "    assert!(result.is_some());",
          "    assert!(result.unwrap() == \"text\");",
          "    assert_eq!(pretend_parse_data_url(\"data:text\"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\" data: text \"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:text \"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \\n text \"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:  \\t text\"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:text;name=value#fragment\"), Some(\"text;name=value#fragment\"));",
          "    assert_eq!(pretend_parse_data_url(\" data: text;name=value\\n \"), Some(\"text;name=value\"));",
          "    assert!(pretend_parse_data_url(\"text:data\") == None);",
          "    assert!(pretend_parse_data_url(\"notdata:text\") == None);",
          "    assert!(pretend_parse_data_url(\"data:text\") == Some(\"text\"));",
          "    assert!(pretend_parse_data_url(\"\") == None);",
          "    assert!(pretend_parse_data_url(\" \\t\\n \") == None);",
          "    assert!(pretend_parse_data_url(\"data: \") == Some(\"\"));",
          "    assert!(pretend_parse_data_url(\" data: \\r\\n \") == Some(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"Data: 123\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(\"123\"));",
          "    assert_eq!(result, Some(\"123\".trim_end_matches(|ch| ch <= ' ')));"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"Data: 123\");",
          "    assert_eq!(result, Some(\"123\"));",
          "    assert_eq!(result, Some(\"123\".trim_end_matches(|ch| ch <= ' ')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"\\r\\n\\tdata:abc \");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(\"abc\"));"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"\\r\\n\\tdata:abc \");",
          "    assert_eq!(result, Some(\"abc\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"DaTa:hello world!\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(\"hello world!\"));"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"DaTa:hello world!\");",
          "    assert_eq!(result, Some(\"hello world!\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = pretend_parse_data_url(\"data:     \");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:     \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:     \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example\\n\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example\\t\"), Some(\"example\\t\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \\t\\nexample\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:     example     \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:long-string-of-data\"), Some(\"long-string-of-data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: 1234567890\"), Some(\"1234567890\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:abc123/!@#\"), Some(\"abc123/!@#\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:abcdefg\"), Some(\"abcdefg\"));",
          "    assert!(pretend_parse_data_url(\"notdata:example\").is_none());",
          "    assert!(pretend_parse_data_url(\"data\").is_none());",
          "    assert!(pretend_parse_data_url(\"\").is_none());",
          "    assert!(pretend_parse_data_url(\"   \").is_none());"
        ],
        "code": [
          "{",
          "    let result = pretend_parse_data_url(\"data:     \");",
          "    assert_eq!(result, Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:     \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data:     \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example\\n\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example\\t\"), Some(\"example\\t\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \\t\\nexample\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:     example     \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:long-string-of-data\"), Some(\"long-string-of-data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: 1234567890\"), Some(\"1234567890\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:abc123/!@#\"), Some(\"abc123/!@#\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:abcdefg\"), Some(\"abcdefg\"));",
          "    assert!(pretend_parse_data_url(\"notdata:example\").is_none());",
          "    assert!(pretend_parse_data_url(\"data\").is_none());",
          "    assert!(pretend_parse_data_url(\"\").is_none());",
          "    assert!(pretend_parse_data_url(\"   \").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]