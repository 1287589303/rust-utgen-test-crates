[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"   DaTa: example data\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: example data\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"DaTa: some data\"), Some(\"some data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"   datA: with trailing space   \"), Some(\"with trailing space\"));",
          "    assert_eq!(pretend_parse_data_url(\"   da ta: valid input\"), None);",
          "    assert_eq!(pretend_parse_data_url(\" data:valid data \"), Some(\"valid data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: no space\"), Some(\"no space\"));",
          "    assert_eq!(pretend_parse_data_url(\"   \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"   \\t\\n data: example\"), Some(\"example\"));"
        ],
        "code": [
          "{",
          "    let input = \"   DaTa: example data\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: example data\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"DaTa: some data\"), Some(\"some data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"   datA: with trailing space   \"), Some(\"with trailing space\"));",
          "    assert_eq!(pretend_parse_data_url(\"   da ta: valid input\"), None);",
          "    assert_eq!(pretend_parse_data_url(\" data:valid data \"), Some(\"valid data\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: no space\"), Some(\"no space\"));",
          "    assert_eq!(pretend_parse_data_url(\"   \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"   \\t\\n data: example\"), Some(\"example\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"   data1: example data\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"   data1: example data\"), None);"
        ],
        "code": [
          "{",
          "    let input = \"   data1: example data\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"   data1: example data\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"   Data: \";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"Data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   Data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tData: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\nData: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"   Data: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tData: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\nData: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: example\\t\"), Some(\"example\\t\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: example\\n\"), Some(\"example\\n\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: example\\r\\n\"), Some(\"example\\r\\n\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: \\t example\"), Some(\"\\t example\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: \\n example\"), Some(\"\\n example\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: \\r\\n example\"), Some(\"\\r\\n example\"));",
          "    assert_eq!(pretend_parse_data_url(\"daTa: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"D:\\tData: example\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"Data: invalid_data\"), Some(\"invalid_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"invalid_data\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"datA: \\t \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\t\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\" Data: example \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\" Data: \" + String::from_utf8(vec![0,1,2]).unwrap().as_str()), None);",
          "    assert_eq!(pretend_parse_data_url(\"\\t \\n Data: example \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"     dATA: example \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\rData: \"), Some(\"\"));"
        ],
        "code": [
          "{",
          "    let input = \"   Data: \";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"Data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   Data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tData: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\nData: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"   Data: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tData: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\nData: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: example\\t\"), Some(\"example\\t\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: example\\n\"), Some(\"example\\n\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: example\\r\\n\"), Some(\"example\\r\\n\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: \\t example\"), Some(\"\\t example\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: \\n example\"), Some(\"\\n example\"));",
          "    assert_eq!(pretend_parse_data_url(\"Data: \\r\\n example\"), Some(\"\\r\\n example\"));",
          "    assert_eq!(pretend_parse_data_url(\"daTa: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"D:\\tData: example\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"Data: invalid_data\"), Some(\"invalid_data\"));",
          "    assert_eq!(pretend_parse_data_url(\"invalid_data\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"datA: \\t \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\\t\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\" Data: example \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\" Data: \" + String::from_utf8(vec![0,1,2]).unwrap().as_str()), None);",
          "    assert_eq!(pretend_parse_data_url(\"\\t \\n Data: example \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"     dATA: example \"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\rData: \"), Some(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"\\tdata: \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"\"));",
          "    ",
          "    let input = \"\\ndata: sample\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"sample\"));",
          "    ",
          "    let input = \"   data: example   \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"example\"));",
          "    ",
          "    let input = \"data: with\\t tabs\\nand newlines\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"with\\t tabs\\nand newlines\"));",
          "    ",
          "    let input = \"data: \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"\"));",
          "    ",
          "    let input = \"data: followed by text\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"followed by text\"));",
          "    ",
          "    let input = \" dAta: example \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"example\"));",
          "    ",
          "    let input = \" d: data: not a valid data URL\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"not a valid data URL\"));",
          "    ",
          "    let input = \"data: contains special char !@#\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"contains special char !@#\"));",
          "    ",
          "    let input = \"data: with control char \\x0F\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"with control char \\x0F\"));",
          "    ",
          "    let input = \"dat: wrong data URL\";",
          "    assert_eq!(pretend_parse_data_url(input), None);",
          "    ",
          "    let input = \"data: \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"\"));",
          "    ",
          "    let input = \"data:abc\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"abc\"));",
          "    ",
          "    let input = \"abc:data\";",
          "    assert_eq!(pretend_parse_data_url(input), None);",
          "    ",
          "    let input = \"\\tdata:123\\n\\n\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"123\"));",
          "    ",
          "    let input = \"data:   \\n\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"\"));",
          "    ",
          "    let input = \"dat: wrong prefix\";",
          "    assert_eq!(pretend_parse_data_url(input), None);",
          "    ",
          "    let input = \"data: trailing space \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"trailing space\"));"
        ],
        "code": [
          "{",
          "    let input = \"\";",
          "    pretend_parse_data_url(input);",
          "    let input = \"\\tdata: \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"\"));",
          "    ",
          "    let input = \"\\ndata: sample\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"sample\"));",
          "    ",
          "    let input = \"   data: example   \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"example\"));",
          "    ",
          "    let input = \"data: with\\t tabs\\nand newlines\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"with\\t tabs\\nand newlines\"));",
          "    ",
          "    let input = \"data: \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"\"));",
          "    ",
          "    let input = \"data: followed by text\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"followed by text\"));",
          "    ",
          "    let input = \" dAta: example \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"example\"));",
          "    ",
          "    let input = \" d: data: not a valid data URL\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"not a valid data URL\"));",
          "    ",
          "    let input = \"data: contains special char !@#\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"contains special char !@#\"));",
          "    ",
          "    let input = \"data: with control char \\x0F\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"with control char \\x0F\"));",
          "    ",
          "    let input = \"dat: wrong data URL\";",
          "    assert_eq!(pretend_parse_data_url(input), None);",
          "    ",
          "    let input = \"data: \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"\"));",
          "    ",
          "    let input = \"data:abc\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"abc\"));",
          "    ",
          "    let input = \"abc:data\";",
          "    assert_eq!(pretend_parse_data_url(input), None);",
          "    ",
          "    let input = \"\\tdata:123\\n\\n\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"123\"));",
          "    ",
          "    let input = \"data:   \\n\";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"\"));",
          "    ",
          "    let input = \"dat: wrong prefix\";",
          "    assert_eq!(pretend_parse_data_url(input), None);",
          "    ",
          "    let input = \"data: trailing space \";",
          "    assert_eq!(pretend_parse_data_url(input), Some(\"trailing space\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"   \";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:hello world\"), Some(\"hello world\"));",
          "    assert_eq!(pretend_parse_data_url(\"dat:wrong\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"da ta:encoded\"), Some(\"encoded\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data:another test  \"), Some(\"another test\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:valid?test\"), Some(\"valid?test\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:...\"), Some(\"...\"));"
        ],
        "code": [
          "{",
          "    let input = \"   \";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:hello world\"), Some(\"hello world\"));",
          "    assert_eq!(pretend_parse_data_url(\"dat:wrong\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"da ta:encoded\"), Some(\"encoded\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data:another test  \"), Some(\"another test\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:valid?test\"), Some(\"valid?test\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:...\"), Some(\"...\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"   data:     \";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data: text \"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"dAta:validdata\"), Some(\"validdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:validdata\\t\\r\\n\"), Some(\"validdata\\t\\r\\n\"));",
          "    assert_eq!(pretend_parse_data_url(\"notdata:somevalue\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"    \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:valid data\\t\\n\"), Some(\"valid data\\t\\n\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some%20encoded&more\"), Some(\"some%20encoded&more\"));",
          "    assert_eq!(pretend_parse_data_url(\"daTa:test\"), Some(\"test\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdata:trimmed\"), Some(\"trimmed\"));"
        ],
        "code": [
          "{",
          "    let input = \"   data:     \";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: example\"), Some(\"example\"));",
          "    assert_eq!(pretend_parse_data_url(\"  data: text \"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"dAta:validdata\"), Some(\"validdata\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:validdata\\t\\r\\n\"), Some(\"validdata\\t\\r\\n\"));",
          "    assert_eq!(pretend_parse_data_url(\"notdata:somevalue\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"\"), None);",
          "    assert_eq!(pretend_parse_data_url(\"    \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"data:valid data\\t\\n\"), Some(\"valid data\\t\\n\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:some%20encoded&more\"), Some(\"some%20encoded&more\"));",
          "    assert_eq!(pretend_parse_data_url(\"daTa:test\"), Some(\"test\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdata:trimmed\"), Some(\"trimmed\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"   DaTa: valid data\";",
          "    pretend_parse_data_url(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: valid data\"), Some(\"valid data\"));",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: valid data   \"), Some(\"valid data\"));",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: valid data\\nmore\"), Some(\"valid data\\nmore\"));",
          "    assert_eq!(pretend_parse_data_url(\"   daTa: text\"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:another example\"), Some(\"another example\"));",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa:   \" ), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"Some random input\"), None);",
          "    assert_eq!(pretend_parse_data_url(\" \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"\\n\\tdata:input\"), Some(\"input\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\t data:input \"), Some(\"input\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:input + more\"), Some(\"input + more\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdata:input\\textra\"), Some(\"input\\textra\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:input\\n\"), Some(\"input\"));"
        ],
        "code": [
          "{",
          "    let input = \"   DaTa: valid data\";",
          "    pretend_parse_data_url(input);",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: valid data\"), Some(\"valid data\"));",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: \"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: valid data   \"), Some(\"valid data\"));",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa: valid data\\nmore\"), Some(\"valid data\\nmore\"));",
          "    assert_eq!(pretend_parse_data_url(\"   daTa: text\"), Some(\"text\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:another example\"), Some(\"another example\"));",
          "    assert_eq!(pretend_parse_data_url(\"   DaTa:   \" ), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:\"), Some(\"\"));",
          "    assert_eq!(pretend_parse_data_url(\"Some random input\"), None);",
          "    assert_eq!(pretend_parse_data_url(\" \"), None);",
          "    assert_eq!(pretend_parse_data_url(\"\\n\\tdata:input\"), Some(\"input\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\t data:input \"), Some(\"input\"));",
          "    assert_eq!(pretend_parse_data_url(\" data:input + more\"), Some(\"input + more\"));",
          "    assert_eq!(pretend_parse_data_url(\"\\tdata:input\\textra\"), Some(\"input\\textra\"));",
          "    assert_eq!(pretend_parse_data_url(\"data:input\\n\"), Some(\"input\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]