[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"SGVsbG8=\";",
          "    let result = decode_to_vec(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), b\"Hello\");",
          "    ",
          "    let input_with_spaces = b\" SGV sbG8= \";",
          "    let result_with_spaces = decode_to_vec(input_with_spaces);",
          "    assert!(result_with_spaces.is_ok());",
          "    assert_eq!(result_with_spaces.unwrap(), b\"Hello\");",
          "    ",
          "    let input_with_tabs = b\"SGVsbG8\\t=\";",
          "    let result_with_tabs = decode_to_vec(input_with_tabs);",
          "    assert!(result_with_tabs.is_ok());",
          "    assert_eq!(result_with_tabs.unwrap(), b\"Hello\");",
          "    ",
          "    let input_without_padding = b\"SGVsbG8\";",
          "    let result_without_padding = decode_to_vec(input_without_padding);",
          "    assert!(result_without_padding.is_err());",
          "    ",
          "    let input_invalid_char = b\"SGVsbG8@@\";",
          "    let result_invalid_char = decode_to_vec(input_invalid_char);",
          "    assert!(result_invalid_char.is_err());"
        ],
        "code": [
          "{",
          "    let input = b\"SGVsbG8=\";",
          "    let result = decode_to_vec(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), b\"Hello\");",
          "    ",
          "    let input_with_spaces = b\" SGV sbG8= \";",
          "    let result_with_spaces = decode_to_vec(input_with_spaces);",
          "    assert!(result_with_spaces.is_ok());",
          "    assert_eq!(result_with_spaces.unwrap(), b\"Hello\");",
          "    ",
          "    let input_with_tabs = b\"SGVsbG8\\t=\";",
          "    let result_with_tabs = decode_to_vec(input_with_tabs);",
          "    assert!(result_with_tabs.is_ok());",
          "    assert_eq!(result_with_tabs.unwrap(), b\"Hello\");",
          "    ",
          "    let input_without_padding = b\"SGVsbG8\";",
          "    let result_without_padding = decode_to_vec(input_without_padding);",
          "    assert!(result_without_padding.is_err());",
          "    ",
          "    let input_invalid_char = b\"SGVsbG8@@\";",
          "    let result_invalid_char = decode_to_vec(input_invalid_char);",
          "    assert!(result_invalid_char.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"U29tZSBpbmNvcnJlY3Q=\";",
          "    let result = decode_to_vec(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(vec![83, 111, 109, 101, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116]));"
        ],
        "code": [
          "{",
          "    let input = b\"U29tZSBpbmNvcnJlY3Q=\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(vec![83, 111, 109, 101, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"dGVzdA==\";",
          "    let result = decode_to_vec(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(vec![116, 101, 115, 116]));"
        ],
        "code": [
          "{",
          "    let input = b\"dGVzdA==\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(vec![116, 101, 115, 116]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"\";",
          "    let result = decode_to_vec(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Vec::new()));"
        ],
        "code": [
          "{",
          "    let input = b\"\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(Vec::new()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"QUJDRA==\";",
          "    let result = decode_to_vec(input);",
          "}"
        ],
        "oracle": [
          "    let input = b\"QUJDRA==\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(vec![81, 85, 68, 82]));",
          "    ",
          "    let input = b\"QUJDRA\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(vec![81, 85, 68, 82]));",
          "    ",
          "    let input = b\"QUJDRAA==\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Err(InvalidBase64(InvalidBase64Details::Padding)));",
          "    ",
          "    let input = b\"QUJD==RA\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Err(InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding)));",
          "    ",
          "    let input = b\"QUJDRA!\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Err(InvalidBase64(InvalidBase64Details::UnexpectedSymbol(0x21))));",
          "    ",
          "    let input = b\"\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(vec![]));",
          "    ",
          "    let input = b\"QUJDRA\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(vec![81, 85, 68, 82]));",
          "    ",
          "    let input = b\"QUJDRA==QUJD\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Err(InvalidBase64(InvalidBase64Details::Padding)));"
        ],
        "code": [
          "{",
          "    let input = b\"QUJDRA==\";",
          "    let result = decode_to_vec(input);",
          "    let input = b\"QUJDRA==\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(vec![81, 85, 68, 82]));",
          "    ",
          "    let input = b\"QUJDRA\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(vec![81, 85, 68, 82]));",
          "    ",
          "    let input = b\"QUJDRAA==\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Err(InvalidBase64(InvalidBase64Details::Padding)));",
          "    ",
          "    let input = b\"QUJD==RA\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Err(InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding)));",
          "    ",
          "    let input = b\"QUJDRA!\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Err(InvalidBase64(InvalidBase64Details::UnexpectedSymbol(0x21))));",
          "    ",
          "    let input = b\"\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(vec![]));",
          "    ",
          "    let input = b\"QUJDRA\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Ok(vec![81, 85, 68, 82]));",
          "    ",
          "    let input = b\"QUJDRA==QUJD\";",
          "    let result = decode_to_vec(input);",
          "    assert_eq!(result, Err(InvalidBase64(InvalidBase64Details::Padding)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = b\"QUJDRAQUJDRAQUJDRAQUJDRAQUJDRAQUJDRA==\";",
          "    let result = decode_to_vec(input);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), b\"ABCDABCDABCDABCDABCDABCD\".to_vec());"
        ],
        "code": [
          "{",
          "    let input = b\"QUJDRAQUJDRAQUJDRAQUJDRAQUJDRAQUJDRA==\";",
          "    let result = decode_to_vec(input);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), b\"ABCDABCDABCDABCDABCDABCD\".to_vec());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]