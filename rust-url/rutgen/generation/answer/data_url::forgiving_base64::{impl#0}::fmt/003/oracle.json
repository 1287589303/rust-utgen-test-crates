[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding);",
          "    let _ = format!(\"{}\", invalid_base64);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{}\", invalid_base64), \"alphabet symbol present after padding\");"
        ],
        "code": [
          "{",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding);",
          "    let _ = format!(\"{}\", invalid_base64);",
          "    assert_eq!(format!(\"{}\", invalid_base64), \"alphabet symbol present after padding\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::UnexpectedSymbol(255));",
          "    let _ = format!(\"{}\", invalid_base64);",
          "}"
        ],
        "oracle": [
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::UnexpectedSymbol(255)); assert_eq!(format!(\"{}\", invalid_base64), \"symbol with codepoint 255 not expected\");",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding); assert_eq!(format!(\"{}\", invalid_base64), \"alphabet symbol present after padding\");",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol); assert_eq!(format!(\"{}\", invalid_base64), \"lone alphabet symbol present\");",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::Padding); assert_eq!(format!(\"{}\", invalid_base64), \"incorrect padding\");"
        ],
        "code": [
          "{",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::UnexpectedSymbol(255));",
          "    let _ = format!(\"{}\", invalid_base64);",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::UnexpectedSymbol(255)); assert_eq!(format!(\"{}\", invalid_base64), \"symbol with codepoint 255 not expected\");",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding); assert_eq!(format!(\"{}\", invalid_base64), \"alphabet symbol present after padding\");",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol); assert_eq!(format!(\"{}\", invalid_base64), \"lone alphabet symbol present\");",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::Padding); assert_eq!(format!(\"{}\", invalid_base64), \"incorrect padding\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol);",
          "    let _ = format!(\"{}\", invalid_base64);",
          "}"
        ],
        "oracle": [
          "    format!(\"{}\", InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding));",
          "    assert_eq!(format!(\"{}\", InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding)), \"alphabet symbol present after padding\");",
          "    format!(\"{}\", InvalidBase64(InvalidBase64Details::Padding));",
          "    assert_eq!(format!(\"{}\", InvalidBase64(InvalidBase64Details::Padding)), \"incorrect padding\");",
          "    format!(\"{}\", InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42)));",
          "    assert_eq!(format!(\"{}\", InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42))), \"symbol with codepoint 42 not expected\");",
          "    format!(\"{}\", InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol));",
          "    assert_eq!(format!(\"{}\", InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol)), \"lone alphabet symbol present\");"
        ],
        "code": [
          "{",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol);",
          "    let _ = format!(\"{}\", invalid_base64);",
          "    format!(\"{}\", InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding));",
          "    assert_eq!(format!(\"{}\", InvalidBase64(InvalidBase64Details::AlphabetSymbolAfterPadding)), \"alphabet symbol present after padding\");",
          "    format!(\"{}\", InvalidBase64(InvalidBase64Details::Padding));",
          "    assert_eq!(format!(\"{}\", InvalidBase64(InvalidBase64Details::Padding)), \"incorrect padding\");",
          "    format!(\"{}\", InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42)));",
          "    assert_eq!(format!(\"{}\", InvalidBase64(InvalidBase64Details::UnexpectedSymbol(42))), \"symbol with codepoint 42 not expected\");",
          "    format!(\"{}\", InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol));",
          "    assert_eq!(format!(\"{}\", InvalidBase64(InvalidBase64Details::LoneAlphabetSymbol)), \"lone alphabet symbol present\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::Padding);",
          "    let _ = format!(\"{}\", invalid_base64);",
          "}"
        ],
        "oracle": [
          "    write!(f, \"incorrect padding\")",
          "    write!(f, \"alphabet symbol present after padding\")"
        ],
        "code": [
          "{",
          "    let invalid_base64 = InvalidBase64(InvalidBase64Details::Padding);",
          "    let _ = format!(\"{}\", invalid_base64);",
          "    write!(f, \"incorrect padding\")",
          "    write!(f, \"alphabet symbol present after padding\")",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]