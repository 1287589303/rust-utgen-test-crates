[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestUnit {",
          "        value: char,",
          "    }",
          "",
          "    impl PunycodeCodeUnit for TestUnit {",
          "        fn is_delimiter(&self) -> bool {",
          "            self.value == '-'",
          "        }",
          "",
          "        fn is_ascii(&self) -> bool {",
          "            self.value.is_ascii()",
          "        }",
          "",
          "        fn digit(&self) -> Option<u32> {",
          "            match self.value {",
          "                'a'..='z' => Some((self.value as u32) - ('a' as u32)),",
          "                _ => None,",
          "            }",
          "        }",
          "",
          "        fn char(&self) -> char {",
          "            self.value",
          "        }",
          "",
          "        fn char_ascii_lower_case(&self) -> char {",
          "            self.value.to_ascii_lowercase()",
          "        }",
          "    }",
          "",
          "    struct TestCaller;",
          "    ",
          "    impl PunycodeCaller for TestCaller {",
          "        const EXTERNAL_CALLER: bool = false;",
          "    }",
          "",
          "    let mut decoder = Decoder::default();",
          "    let input = vec![TestUnit { value: '-' }, TestUnit { value: 'a' }, TestUnit { value: 'b' }];",
          "    let result = decoder.decode::<TestUnit, TestCaller>(&input);",
          "}"
        ],
        "oracle": [
          "    let input = vec![TestUnit { value: '-' }, TestUnit { value: 'a' }, TestUnit { value: 'b' }];",
          "    let result = decoder.decode::<TestUnit, TestCaller>(&input);",
          "    assert_eq!(result, Err(()));",
          "    assert!(decoder.insertions.is_empty());",
          "    assert_eq!(decoder.len, 0);"
        ],
        "code": [
          "{",
          "    struct TestUnit {",
          "        value: char,",
          "    }",
          "",
          "    impl PunycodeCodeUnit for TestUnit {",
          "        fn is_delimiter(&self) -> bool {",
          "            self.value == '-'",
          "        }",
          "",
          "        fn is_ascii(&self) -> bool {",
          "            self.value.is_ascii()",
          "        }",
          "",
          "        fn digit(&self) -> Option<u32> {",
          "            match self.value {",
          "                'a'..='z' => Some((self.value as u32) - ('a' as u32)),",
          "                _ => None,",
          "            }",
          "        }",
          "",
          "        fn char(&self) -> char {",
          "            self.value",
          "        }",
          "",
          "        fn char_ascii_lower_case(&self) -> char {",
          "            self.value.to_ascii_lowercase()",
          "        }",
          "    }",
          "",
          "    struct TestCaller;",
          "    ",
          "    impl PunycodeCaller for TestCaller {",
          "        const EXTERNAL_CALLER: bool = false;",
          "    }",
          "",
          "    let mut decoder = Decoder::default();",
          "    let input = vec![TestUnit { value: '-' }, TestUnit { value: 'a' }, TestUnit { value: 'b' }];",
          "    let result = decoder.decode::<TestUnit, TestCaller>(&input);",
          "    let input = vec![TestUnit { value: '-' }, TestUnit { value: 'a' }, TestUnit { value: 'b' }];",
          "    let result = decoder.decode::<TestUnit, TestCaller>(&input);",
          "    assert_eq!(result, Err(()));",
          "    assert!(decoder.insertions.is_empty());",
          "    assert_eq!(decoder.len, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]