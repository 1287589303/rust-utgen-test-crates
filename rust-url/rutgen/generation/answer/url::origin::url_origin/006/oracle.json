[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ws://example.com:8080\"),",
          "        scheme_end: 2,",
          "        username_end: 0,",
          "        host_start: 5,",
          "        host_end: 16,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(8080),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_, Origin::Tuple(String::from(\"ws\"), Host::Domain(String::from(\"example.com\")), Some(8080)));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ws://example.com:8080\"),",
          "        scheme_end: 2,",
          "        username_end: 0,",
          "        host_start: 5,",
          "        host_end: 16,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(8080),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "    assert_eq!(_, Origin::Tuple(String::from(\"ws\"), Host::Domain(String::from(\"example.com\")), Some(8080)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:80\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(80),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(",
          "    url_origin(&url),",
          "    Origin::Tuple(",
          "    String::from(\"http\"),",
          "    Host::Domain(String::from(\"example.com\")),",
          "    Some(80)",
          "    )",
          "    );"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.com:80\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 18,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(80),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "    assert_eq!(",
          "    url_origin(&url),",
          "    Origin::Tuple(",
          "    String::from(\"http\"),",
          "    Host::Domain(String::from(\"example.com\")),",
          "    Some(80)",
          "    )",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://example.com:443\"),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 6,",
          "        host_end: 17,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(443),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(&_url_origin(&url), Origin::Tuple(\"http\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(443)));",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"ftp://example.com:21\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 5,",
          "    host_end: 17,",
          "    host: Host::Domain(String::from(\"example.com\")),",
          "    port: Some(21),",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(&_url_origin(&url), Origin::Tuple(\"ftp\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(21)));",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"ws://example.com:80\"),",
          "    scheme_end: 2,",
          "    username_end: 0,",
          "    host_start: 3,",
          "    host_end: 17,",
          "    host: Host::Domain(String::from(\"example.com\")),",
          "    port: Some(80),",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(&_url_origin(&url), Origin::Tuple(\"ws\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(80)));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://example.com:443\"),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 6,",
          "        host_end: 17,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(443),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "    assert_eq!(&_url_origin(&url), Origin::Tuple(\"http\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(443)));",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"ftp://example.com:21\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 5,",
          "    host_end: 17,",
          "    host: Host::Domain(String::from(\"example.com\")),",
          "    port: Some(21),",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(&_url_origin(&url), Origin::Tuple(\"ftp\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(21)));",
          "    ",
          "    let url = Url {",
          "    serialization: String::from(\"ws://example.com:80\"),",
          "    scheme_end: 2,",
          "    username_end: 0,",
          "    host_start: 3,",
          "    host_end: 17,",
          "    host: Host::Domain(String::from(\"example.com\")),",
          "    port: Some(80),",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(&_url_origin(&url), Origin::Tuple(\"ws\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(80)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ftp://ftp.example.com:21\"),",
          "        scheme_end: 3,",
          "        username_end: 0,",
          "        host_start: 6,",
          "        host_end: 20,",
          "        host: Host::Domain(String::from(\"ftp.example.com\")),",
          "        port: Some(21),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    url_origin(&url) == Origin::Tuple(",
          "    String::from(\"ftp\"),",
          "    Host::Domain(String::from(\"ftp.example.com\")),",
          "    Some(21)",
          "    )"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ftp://ftp.example.com:21\"),",
          "        scheme_end: 3,",
          "        username_end: 0,",
          "        host_start: 6,",
          "        host_end: 20,",
          "        host: Host::Domain(String::from(\"ftp.example.com\")),",
          "        port: Some(21),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "    url_origin(&url) == Origin::Tuple(",
          "    String::from(\"ftp\"),",
          "    Host::Domain(String::from(\"ftp.example.com\")),",
          "    Some(21)",
          "    )",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"wss://secure.example.com:8443\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 5,",
          "        host_end: 23,",
          "        host: Host::Domain(String::from(\"secure.example.com\")),",
          "        port: Some(8443),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    let scheme = url.scheme(); assert_eq!(scheme, \"wss\");",
          "    let host = url.host().unwrap(); assert_eq!(host, Host::Domain(String::from(\"secure.example.com\")));",
          "    let port = url.port_or_known_default().unwrap(); assert_eq!(port, 8443);",
          "    let origin = url_origin(&url); assert!(matches!(origin, Origin::Tuple(_, _, _)));",
          "    assert_eq!(origin.scheme(), \"wss\");",
          "    assert_eq!(origin.host(), Host::Domain(String::from(\"secure.example.com\")));",
          "    assert_eq!(origin.port(), 8443);"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"wss://secure.example.com:8443\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 5,",
          "        host_end: 23,",
          "        host: Host::Domain(String::from(\"secure.example.com\")),",
          "        port: Some(8443),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "    let scheme = url.scheme(); assert_eq!(scheme, \"wss\");",
          "    let host = url.host().unwrap(); assert_eq!(host, Host::Domain(String::from(\"secure.example.com\")));",
          "    let port = url.port_or_known_default().unwrap(); assert_eq!(port, 8443);",
          "    let origin = url_origin(&url); assert!(matches!(origin, Origin::Tuple(_, _, _)));",
          "    assert_eq!(origin.scheme(), \"wss\");",
          "    assert_eq!(origin.host(), Host::Domain(String::from(\"secure.example.com\")));",
          "    assert_eq!(origin.port(), 8443);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]