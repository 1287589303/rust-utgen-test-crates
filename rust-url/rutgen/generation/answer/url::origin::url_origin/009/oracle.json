[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ftp://example.com\"),",
          "        scheme_end: 3,",
          "        username_end: 0,",
          "        host_start: 6,",
          "        host_end: 18,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(21),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    let url = Url {",
          "    serialization: String::from(\"ftp://example.com\"),",
          "    scheme_end: 3,",
          "    username_end: 0,",
          "    host_start: 6,",
          "    host_end: 18,",
          "    host: Host::Domain(String::from(\"example.com\")),",
          "    port: Some(21),",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    let _origin = url_origin(&url);",
          "    assert_eq!(_origin, Origin::new_opaque());"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ftp://example.com\"),",
          "        scheme_end: 3,",
          "        username_end: 0,",
          "        host_start: 6,",
          "        host_end: 18,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(21),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _origin = url_origin(&url);",
          "    let url = Url {",
          "    serialization: String::from(\"ftp://example.com\"),",
          "    scheme_end: 3,",
          "    username_end: 0,",
          "    host_start: 6,",
          "    host_end: 18,",
          "    host: Host::Domain(String::from(\"example.com\")),",
          "    port: Some(21),",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    let _origin = url_origin(&url);",
          "    assert_eq!(_origin, Origin::new_opaque());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"invalidscheme://example.com\"),",
          "        scheme_end: 14,",
          "        username_end: 0,",
          "        host_start: 13,",
          "        host_end: 25,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_origin, Origin::new_opaque());"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"invalidscheme://example.com\"),",
          "        scheme_end: 14,",
          "        username_end: 0,",
          "        host_start: 13,",
          "        host_end: 25,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _origin = url_origin(&url);",
          "    assert_eq!(_origin, Origin::new_opaque());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"://example.com\"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 3,",
          "        host_end: 15,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    let url = Url {",
          "    serialization: String::from(\"://example.com\"),",
          "    scheme_end: 0,",
          "    username_end: 0,",
          "    host_start: 3,",
          "    host_end: 15,",
          "    host: Host::Domain(String::from(\"example.com\")),",
          "    port: None,",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    let origin = url_origin(&url);",
          "    assert!(matches!(origin, Origin::Opaque(_)));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"://example.com\"),",
          "        scheme_end: 0,",
          "        username_end: 0,",
          "        host_start: 3,",
          "        host_end: 15,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _origin = url_origin(&url);",
          "    let url = Url {",
          "    serialization: String::from(\"://example.com\"),",
          "    scheme_end: 0,",
          "    username_end: 0,",
          "    host_start: 3,",
          "    host_end: 15,",
          "    host: Host::Domain(String::from(\"example.com\")),",
          "    port: None,",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    let origin = url_origin(&url);",
          "    assert!(matches!(origin, Origin::Opaque(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"inv@lid://example.com\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 9,",
          "        host_end: 21,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    _origin is of type Origin",
          "    _origin should match the pattern Origin::Opaque(_)",
          "    _origin should not match Origin::Tuple(_, _, _)"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"inv@lid://example.com\"),",
          "        scheme_end: 8,",
          "        username_end: 0,",
          "        host_start: 9,",
          "        host_end: 21,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _origin = url_origin(&url);",
          "    _origin is of type Origin",
          "    _origin should match the pattern Origin::Opaque(_)",
          "    _origin should not match Origin::Tuple(_, _, _)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]