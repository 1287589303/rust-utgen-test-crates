[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://example.com:80\").unwrap();",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url_origin(&url), Origin::Tuple(\"http\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(80)));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://example.com:80\").unwrap();",
          "    let _ = url_origin(&url);",
          "    assert_eq!(url_origin(&url), Origin::Tuple(\"http\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(80)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"https://example.com:443\").unwrap();",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.scheme(), \"https\");",
          "    assert!(url.host().is_some());",
          "    assert_eq!(url.port_or_known_default(), Some(443));",
          "    assert!(matches!(url_origin(&url), Origin::Tuple(_, _, _)));",
          "    assert!(matches!(url_origin(&url), Origin::Tuple(scheme, _, _) if scheme == \"https\"));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"https://example.com:443\").unwrap();",
          "    let _ = url_origin(&url);",
          "    assert_eq!(url.scheme(), \"https\");",
          "    assert!(url.host().is_some());",
          "    assert_eq!(url.port_or_known_default(), Some(443));",
          "    assert!(matches!(url_origin(&url), Origin::Tuple(_, _, _)));",
          "    assert!(matches!(url_origin(&url), Origin::Tuple(scheme, _, _) if scheme == \"https\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"ws://example.com:3000\").unwrap();",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url_origin(&url), Origin::Tuple(\"ws\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(3000)));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"ws://example.com:3000\").unwrap();",
          "    let _ = url_origin(&url);",
          "    assert_eq!(url_origin(&url), Origin::Tuple(\"ws\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(3000)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"wss://example.com:3001\").unwrap();",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    let url = Url::parse(\"http://example.com:3000\").unwrap();",
          "    let result = url_origin(&url);",
          "    assert_eq!(result, Origin::Tuple(\"http\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(3000)));",
          "    ",
          "    let url = Url::parse(\"https://example.com\").unwrap();",
          "    let result = url_origin(&url);",
          "    assert_eq!(result, Origin::Tuple(\"https\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(443)));",
          "    ",
          "    let url = Url::parse(\"ws://example.com\").unwrap();",
          "    let result = url_origin(&url);",
          "    assert_eq!(result, Origin::Tuple(\"ws\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(80)));",
          "    ",
          "    let url = Url::parse(\"ftp://example.com:21\").unwrap();",
          "    let result = url_origin(&url);",
          "    assert_eq!(result, Origin::Tuple(\"ftp\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(21)));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"wss://example.com:3001\").unwrap();",
          "    let _ = url_origin(&url);",
          "    let url = Url::parse(\"http://example.com:3000\").unwrap();",
          "    let result = url_origin(&url);",
          "    assert_eq!(result, Origin::Tuple(\"http\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(3000)));",
          "    ",
          "    let url = Url::parse(\"https://example.com\").unwrap();",
          "    let result = url_origin(&url);",
          "    assert_eq!(result, Origin::Tuple(\"https\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(443)));",
          "    ",
          "    let url = Url::parse(\"ws://example.com\").unwrap();",
          "    let result = url_origin(&url);",
          "    assert_eq!(result, Origin::Tuple(\"ws\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(80)));",
          "    ",
          "    let url = Url::parse(\"ftp://example.com:21\").unwrap();",
          "    let result = url_origin(&url);",
          "    assert_eq!(result, Origin::Tuple(\"ftp\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(21)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://localhost:8080\").unwrap();",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    url_origin(&url) == Origin::Tuple(\"http\".to_owned(), url.host().unwrap().to_owned(), url.port_or_known_default().unwrap())"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://localhost:8080\").unwrap();",
          "    let _ = url_origin(&url);",
          "    url_origin(&url) == Origin::Tuple(\"http\".to_owned(), url.host().unwrap().to_owned(), url.port_or_known_default().unwrap())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"https://localhost:8443\").unwrap();",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url_origin(&url), Origin::Tuple(\"https\".to_owned(), Host::Domain(\"localhost\".to_owned()), Some(8443)));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"https://localhost:8443\").unwrap();",
          "    let _ = url_origin(&url);",
          "    assert_eq!(url_origin(&url), Origin::Tuple(\"https\".to_owned(), Host::Domain(\"localhost\".to_owned()), Some(8443)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]