[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_blob_url = Url::parse(\"blob:http://example.com/resource\").unwrap();",
          "    let origin = url_origin(&valid_blob_url);",
          "}"
        ],
        "oracle": [
          "    let valid_blob_url = Url::parse(\"blob:http://example.com/resource\").unwrap();",
          "    assert_eq!(origin, Origin::Tuple(\"blob\".to_owned(), valid_blob_url.host().unwrap().to_owned(), valid_blob_url.port_or_known_default().unwrap()));"
        ],
        "code": [
          "{",
          "    let valid_blob_url = Url::parse(\"blob:http://example.com/resource\").unwrap();",
          "    let origin = url_origin(&valid_blob_url);",
          "    let valid_blob_url = Url::parse(\"blob:http://example.com/resource\").unwrap();",
          "    assert_eq!(origin, Origin::Tuple(\"blob\".to_owned(), valid_blob_url.host().unwrap().to_owned(), valid_blob_url.port_or_known_default().unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let valid_blob_url_with_path = Url::parse(\"blob:http://example.com/resource/path\").unwrap();",
          "    let origin = url_origin(&valid_blob_url_with_path);",
          "}"
        ],
        "oracle": [
          "    origin.is_tuple() == false",
          "    origin.ascii_serialization() == origin.unicode_serialization()",
          "    origin == Origin::new_opaque()  // For \"blob\" scheme",
          "    origin == Origin::Opaque(OpaqueOrigin(0))  // Opaque origin counter starts at 0",
          "    url_origin(&valid_blob_url_with_path) == origin  // Consistency check with function call"
        ],
        "code": [
          "{",
          "    let valid_blob_url_with_path = Url::parse(\"blob:http://example.com/resource/path\").unwrap();",
          "    let origin = url_origin(&valid_blob_url_with_path);",
          "    origin.is_tuple() == false",
          "    origin.ascii_serialization() == origin.unicode_serialization()",
          "    origin == Origin::new_opaque()  // For \"blob\" scheme",
          "    origin == Origin::Opaque(OpaqueOrigin(0))  // Opaque origin counter starts at 0",
          "    url_origin(&valid_blob_url_with_path) == origin  // Consistency check with function call",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let complex_blob_url = Url::parse(\"blob:http://example.com/path/to/resource\").unwrap();",
          "    let origin = url_origin(&complex_blob_url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin, Origin::Tuple(\"blob\".to_owned(), Host::Domain(\"example.com\".to_owned()), 80));",
          "    assert!(matches!(origin, Origin::Tuple(_, _, _)));",
          "    assert!(url_origin(&complex_blob_url).is_tuple());",
          "    assert_eq!(url_origin(&complex_blob_url).ascii_serialization(), \"blob:http://example.com\");",
          "    assert_eq!(url_origin(&complex_blob_url).unicode_serialization(), \"blob:http://example.com\");"
        ],
        "code": [
          "{",
          "    let complex_blob_url = Url::parse(\"blob:http://example.com/path/to/resource\").unwrap();",
          "    let origin = url_origin(&complex_blob_url);",
          "    assert_eq!(origin, Origin::Tuple(\"blob\".to_owned(), Host::Domain(\"example.com\".to_owned()), 80));",
          "    assert!(matches!(origin, Origin::Tuple(_, _, _)));",
          "    assert!(url_origin(&complex_blob_url).is_tuple());",
          "    assert_eq!(url_origin(&complex_blob_url).ascii_serialization(), \"blob:http://example.com\");",
          "    assert_eq!(url_origin(&complex_blob_url).unicode_serialization(), \"blob:http://example.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]