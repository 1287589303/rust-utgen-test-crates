[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ftp://example.com:21\"),",
          "        scheme_end: 3,",
          "        username_end: 0,",
          "        host_start: 6,",
          "        host_end: 16,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(21),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_ , Origin::Tuple(",
          "    \"ftp\".to_owned(),",
          "    Host::Domain(\"example.com\".to_owned()),",
          "    Some(21),",
          "    ));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ftp://example.com:21\"),",
          "        scheme_end: 3,",
          "        username_end: 0,",
          "        host_start: 6,",
          "        host_end: 16,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(21),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "    assert_eq!(_ , Origin::Tuple(",
          "    \"ftp\".to_owned(),",
          "    Host::Domain(\"example.com\".to_owned()),",
          "    Some(21),",
          "    ));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://example.com:443\"),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 18,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(443),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url_origin(&url), Origin::Tuple(String::from(\"https\"), Host::Domain(String::from(\"example.com\")), 443));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"https://example.com:443\"),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 18,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(443),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "    assert_eq!(url_origin(&url), Origin::Tuple(String::from(\"https\"), Host::Domain(String::from(\"example.com\")), 443));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.net:80\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: Host::Domain(String::from(\"example.net\")),",
          "        port: Some(80),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    let url = Url {",
          "    serialization: String::from(\"http://example.net:80\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 17,",
          "    host: Host::Domain(String::from(\"example.net\")),",
          "    port: Some(80),",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(url_origin(&url), Origin::Tuple(String::from(\"http\"), Host::Domain(String::from(\"example.net\")), 80));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"http://example.net:80\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: Host::Domain(String::from(\"example.net\")),",
          "        port: Some(80),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "    let url = Url {",
          "    serialization: String::from(\"http://example.net:80\"),",
          "    scheme_end: 4,",
          "    username_end: 0,",
          "    host_start: 7,",
          "    host_end: 17,",
          "    host: Host::Domain(String::from(\"example.net\")),",
          "    port: Some(80),",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    assert_eq!(url_origin(&url), Origin::Tuple(String::from(\"http\"), Host::Domain(String::from(\"example.net\")), 80));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ws://example.org:8080\"),",
          "        scheme_end: 2,",
          "        username_end: 0,",
          "        host_start: 5,",
          "        host_end: 15,",
          "        host: Host::Domain(String::from(\"example.org\")),",
          "        port: Some(8080),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    let url = Url {",
          "    serialization: String::from(\"ws://example.org:8080\"),",
          "    scheme_end: 2,",
          "    username_end: 0,",
          "    host_start: 5,",
          "    host_end: 15,",
          "    host: Host::Domain(String::from(\"example.org\")),",
          "    port: Some(8080),",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    let result = url_origin(&url);",
          "    assert_eq!(result, Origin::Tuple(String::from(\"ws\"), Host::Domain(String::from(\"example.org\")), 8080));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"ws://example.org:8080\"),",
          "        scheme_end: 2,",
          "        username_end: 0,",
          "        host_start: 5,",
          "        host_end: 15,",
          "        host: Host::Domain(String::from(\"example.org\")),",
          "        port: Some(8080),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "    let url = Url {",
          "    serialization: String::from(\"ws://example.org:8080\"),",
          "    scheme_end: 2,",
          "    username_end: 0,",
          "    host_start: 5,",
          "    host_end: 15,",
          "    host: Host::Domain(String::from(\"example.org\")),",
          "    port: Some(8080),",
          "    path_start: 0,",
          "    query_start: None,",
          "    fragment_start: None,",
          "    };",
          "    let result = url_origin(&url);",
          "    assert_eq!(result, Origin::Tuple(String::from(\"ws\"), Host::Domain(String::from(\"example.org\")), 8080));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"wss://example.com:8443\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(8443),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_,",
          "    Origin::Tuple(",
          "    String::from(\"wss\"),",
          "    Host::Domain(String::from(\"example.com\")),",
          "    Some(8443),",
          "    )",
          "    );"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: String::from(\"wss://example.com:8443\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 17,",
          "        host: Host::Domain(String::from(\"example.com\")),",
          "        port: Some(8443),",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let _ = url_origin(&url);",
          "    assert_eq!(_,",
          "    Origin::Tuple(",
          "    String::from(\"wss\"),",
          "    Host::Domain(String::from(\"example.com\")),",
          "    Some(8443),",
          "    )",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]