[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
          "    let origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    let url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
          "    let origin = url_origin(&url);",
          "    assert!(matches!(origin, Origin::Opaque(_)));"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
          "    let origin = url_origin(&url);",
          "    let url = Url::parse(\"file:///path/to/file.txt\").unwrap();",
          "    let origin = url_origin(&url);",
          "    assert!(matches!(origin, Origin::Opaque(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"file:///\").unwrap();",
          "    let origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin, Origin::new_opaque());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"file:///\").unwrap();",
          "    let origin = url_origin(&url);",
          "    assert_eq!(origin, Origin::new_opaque());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"file:///path/to/file.txt#fragment\").unwrap();",
          "    let origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin, Origin::new_opaque());",
          "    assert!(url.scheme() == \"file\");",
          "    assert!(url.path() == \"/path/to/file.txt\");",
          "    assert!(url.fragment().is_some());",
          "    assert!(url.host().is_none());",
          "    assert!(url.port().is_none());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"file:///path/to/file.txt#fragment\").unwrap();",
          "    let origin = url_origin(&url);",
          "    assert_eq!(origin, Origin::new_opaque());",
          "    assert!(url.scheme() == \"file\");",
          "    assert!(url.path() == \"/path/to/file.txt\");",
          "    assert!(url.fragment().is_some());",
          "    assert!(url.host().is_none());",
          "    assert!(url.port().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"file:///path/to/file.txt?query=value\").unwrap();",
          "    let origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin, Origin::new_opaque());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"file:///path/to/file.txt?query=value\").unwrap();",
          "    let origin = url_origin(&url);",
          "    assert_eq!(origin, Origin::new_opaque());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]