[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_url = \"https://example.com:443/path\";",
          "    let url = Url::parse(input_url).unwrap();",
          "    let origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin, Origin::Tuple(\"https\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(443)));"
        ],
        "code": [
          "{",
          "    let input_url = \"https://example.com:443/path\";",
          "    let url = Url::parse(input_url).unwrap();",
          "    let origin = url_origin(&url);",
          "    assert_eq!(origin, Origin::Tuple(\"https\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(443)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_url = \"https://example.com/path\";",
          "    let url = Url::parse(input_url).unwrap();",
          "    let origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin, Origin::Tuple(\"https\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(443)));"
        ],
        "code": [
          "{",
          "    let input_url = \"https://example.com/path\";",
          "    let url = Url::parse(input_url).unwrap();",
          "    let origin = url_origin(&url);",
          "    assert_eq!(origin, Origin::Tuple(\"https\".to_owned(), Host::Domain(\"example.com\".to_owned()), Some(443)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_url = \"https://sub.example.com:443/path\";",
          "    let url = Url::parse(input_url).unwrap();",
          "    let origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin, Origin::Tuple(\"https\".to_owned(), Host::Domain(\"sub.example.com\".to_owned()), Some(443)));"
        ],
        "code": [
          "{",
          "    let input_url = \"https://sub.example.com:443/path\";",
          "    let url = Url::parse(input_url).unwrap();",
          "    let origin = url_origin(&url);",
          "    assert_eq!(origin, Origin::Tuple(\"https\".to_owned(), Host::Domain(\"sub.example.com\".to_owned()), Some(443)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_url = \"https://192.168.1.1:443/path\";",
          "    let url = Url::parse(input_url).unwrap();",
          "    let origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin, Origin::Tuple(\"https\".to_owned(), Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1)), Some(443));"
        ],
        "code": [
          "{",
          "    let input_url = \"https://192.168.1.1:443/path\";",
          "    let url = Url::parse(input_url).unwrap();",
          "    let origin = url_origin(&url);",
          "    assert_eq!(origin, Origin::Tuple(\"https\".to_owned(), Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1)), Some(443));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input_url = \"https://[2001:db8::1]:443/path\";",
          "    let url = Url::parse(input_url).unwrap();",
          "    let origin = url_origin(&url);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(origin, Origin::Tuple(\"https\".to_owned(), Host::Ipv6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0x1)), 443));"
        ],
        "code": [
          "{",
          "    let input_url = \"https://[2001:db8::1]:443/path\";",
          "    let url = Url::parse(input_url).unwrap();",
          "    let origin = url_origin(&url);",
          "    assert_eq!(origin, Origin::Tuple(\"https\".to_owned(), Host::Ipv6(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0x1)), 443));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]