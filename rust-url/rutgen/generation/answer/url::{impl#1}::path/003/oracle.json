[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://example.com/api/versions\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 19,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 20,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = url.path();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"/api/versions\");",
          "    assert_eq!(url.path(), url.slice(url.path_start..));",
          "    assert!(url.query_start.is_none() && url.fragment_start.is_none());",
          "    assert_eq!(result, url.slice(20..));",
          "    assert!(result.starts_with(\"/\"));"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://example.com/api/versions\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 19,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 20,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = url.path();",
          "    assert_eq!(result, \"/api/versions\");",
          "    assert_eq!(url.path(), url.slice(url.path_start..));",
          "    assert!(url.query_start.is_none() && url.fragment_start.is_none());",
          "    assert_eq!(result, url.slice(20..));",
          "    assert!(result.starts_with(\"/\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://example.com/\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 19,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 20,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = url.path();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"\");",
          "    assert_eq!(result, \"/\");",
          "    assert_eq!(result, \"/api/versions\");",
          "    assert_eq!(result, \"/countries/vi%E1%BB%87t%20nam\");",
          "    assert_eq!(result, \"/non-hierarchical-path\");"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://example.com/\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 19,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 20,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = url.path();",
          "    assert_eq!(result, \"\");",
          "    assert_eq!(result, \"/\");",
          "    assert_eq!(result, \"/api/versions\");",
          "    assert_eq!(result, \"/countries/vi%E1%BB%87t%20nam\");",
          "    assert_eq!(result, \"/non-hierarchical-path\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://example.com/countries/việt nam\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 19,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 20,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = url.path();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"/countries/vi%E1%BB%87t%20nam\");"
        ],
        "code": [
          "{",
          "    let url = Url {",
          "        serialization: \"https://example.com/countries/việt nam\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 19,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 20,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    let result = url.path();",
          "    assert_eq!(result, \"/countries/vi%E1%BB%87t%20nam\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]