[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_hash(&mut url, \"exampleFragment\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.fragment_start, None);",
          "    assert_eq!(url.path(), \"http://example.com\");",
          "    assert_eq!(url.serialization, \"http://example.com#exampleFragment\");",
          "    assert!(url.set_fragment().is_none());"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"http://example.com\"),",
          "        scheme_end: 4,",
          "        username_end: 0,",
          "        host_start: 7,",
          "        host_end: 16,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_hash(&mut url, \"exampleFragment\");",
          "    assert_eq!(url.fragment_start, None);",
          "    assert_eq!(url.path(), \"http://example.com\");",
          "    assert_eq!(url.serialization, \"http://example.com#exampleFragment\");",
          "    assert!(url.set_fragment().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"https://example.com\"),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 17,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_hash(&mut url, \"validFragment!\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.fragment_start, Some(20));",
          "    assert_eq!(url.serialization, \"https://example.com#validFragment!\");",
          "    assert!(url.query().is_none());",
          "    assert!(url.path().is_empty());",
          "    assert!(url.username().is_empty());",
          "    assert!(url.password().is_none());",
          "    assert!(url.host().is_some());",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert_eq!(url.scheme(), \"https\");",
          "    assert!(url.has_authority());"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"https://example.com\"),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 8,",
          "        host_end: 17,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_hash(&mut url, \"validFragment!\");",
          "    assert_eq!(url.fragment_start, Some(20));",
          "    assert_eq!(url.serialization, \"https://example.com#validFragment!\");",
          "    assert!(url.query().is_none());",
          "    assert!(url.path().is_empty());",
          "    assert!(url.username().is_empty());",
          "    assert!(url.password().is_none());",
          "    assert!(url.host().is_some());",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert_eq!(url.scheme(), \"https\");",
          "    assert!(url.has_authority());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"ftp://example.com\"),",
          "        scheme_end: 6,",
          "        username_end: 0,",
          "        host_start: 9,",
          "        host_end: 18,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_hash(&mut url, \"anotherFragment123\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.fragment_start, Some(18));",
          "    assert_eq!(url.serialization, \"ftp://example.com#anotherFragment123\");",
          "    assert!(url.path().is_empty());",
          "    assert!(url.query().is_none());",
          "    assert!(url.username().is_empty());",
          "    assert!(url.password().is_none());",
          "    assert!(url.has_host());",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert_eq!(url.port(), None);",
          "    assert_eq!(url.scheme(), \"ftp\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: String::from(\"ftp://example.com\"),",
          "        scheme_end: 6,",
          "        username_end: 0,",
          "        host_start: 9,",
          "        host_end: 18,",
          "        host: HostInternal::default(),",
          "        port: None,",
          "        path_start: 0,",
          "        query_start: None,",
          "        fragment_start: None,",
          "    };",
          "    set_hash(&mut url, \"anotherFragment123\");",
          "    assert_eq!(url.fragment_start, Some(18));",
          "    assert_eq!(url.serialization, \"ftp://example.com#anotherFragment123\");",
          "    assert!(url.path().is_empty());",
          "    assert!(url.query().is_none());",
          "    assert!(url.username().is_empty());",
          "    assert!(url.password().is_none());",
          "    assert!(url.has_host());",
          "    assert_eq!(url.host_str(), Some(\"example.com\"));",
          "    assert_eq!(url.port(), None);",
          "    assert_eq!(url.scheme(), \"ftp\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]