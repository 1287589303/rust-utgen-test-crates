[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = Vec::new();",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decoder.next(), None);",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), Some(b'b'));",
          "    assert_eq!(decoder.next(), Some(b'c'));",
          "    assert_eq!(decoder.next(), None);",
          "    let bytes: Vec<u8> = vec![b'%', b'2', b'5', b'a'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    assert_eq!(decoder.next(), Some(b'2'));",
          "    assert_eq!(decoder.next(), Some(b'5'));",
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), None);",
          "    let bytes: Vec<u8> = vec![b'%'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    assert_eq!(decoder.next(), None);",
          "    let bytes: Vec<u8> = vec![b'a', b'%', b'b', b'c'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    assert_eq!(decoder.next(), Some(b'b'));",
          "    assert_eq!(decoder.next(), Some(b'c'));",
          "    assert_eq!(decoder.next(), None);"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = Vec::new();",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), None);",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), Some(b'b'));",
          "    assert_eq!(decoder.next(), Some(b'c'));",
          "    assert_eq!(decoder.next(), None);",
          "    let bytes: Vec<u8> = vec![b'%', b'2', b'5', b'a'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    assert_eq!(decoder.next(), Some(b'2'));",
          "    assert_eq!(decoder.next(), Some(b'5'));",
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), None);",
          "    let bytes: Vec<u8> = vec![b'%'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    assert_eq!(decoder.next(), None);",
          "    let bytes: Vec<u8> = vec![b'a', b'%', b'b', b'c'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    assert_eq!(decoder.next(), Some(b'b'));",
          "    assert_eq!(decoder.next(), Some(b'c'));",
          "    assert_eq!(decoder.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "}"
        ],
        "oracle": [
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), Some(b'b'));",
          "    assert_eq!(decoder.next(), Some(b'c'));",
          "    assert_eq!(decoder.next(), None);"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'c'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), Some(b'b'));",
          "    assert_eq!(decoder.next(), Some(b'c'));",
          "    assert_eq!(decoder.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'%', b'3', b'1'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), Some(b'b'));",
          "    assert_eq!(decoder.next(), Some(b'3'));",
          "    assert_eq!(decoder.next(), Some(b'1'));",
          "    assert_eq!(decoder.next(), None);"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'%', b'3', b'1'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), Some(b'b'));",
          "    assert_eq!(decoder.next(), Some(b'3'));",
          "    assert_eq!(decoder.next(), Some(b'1'));",
          "    assert_eq!(decoder.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'%', b'g', b'h'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), Some(b'b'));",
          "    assert_eq!(decoder.next(), Some(b'g'));",
          "    assert_eq!(decoder.next(), Some(b'h'));",
          "    assert_eq!(decoder.next(), None);"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = vec![b'a', b'b', b'%', b'g', b'h'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), Some(b'a'));",
          "    assert_eq!(decoder.next(), Some(b'b'));",
          "    assert_eq!(decoder.next(), Some(b'g'));",
          "    assert_eq!(decoder.next(), Some(b'h'));",
          "    assert_eq!(decoder.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = vec![b'%', b'3', b'1', b'%', b'!', b'%', b'4', b'2'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decoder.next(), Some(b'3'));",
          "    assert_eq!(decoder.next(), Some(b'!'));",
          "    assert_eq!(decoder.next(), Some(b'4'));",
          "    assert_eq!(decoder.next(), None);"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = vec![b'%', b'3', b'1', b'%', b'!', b'%', b'4', b'2'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), Some(b'3'));",
          "    assert_eq!(decoder.next(), Some(b'!'));",
          "    assert_eq!(decoder.next(), Some(b'4'));",
          "    assert_eq!(decoder.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: Vec<u8> = vec![b'%', b'%', b'%'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), None);"
        ],
        "code": [
          "{",
          "    let bytes: Vec<u8> = vec![b'%', b'%', b'%'];",
          "    let mut decoder = PercentDecode { bytes: bytes.iter() };",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), Some(b'%'));",
          "    decoder.next();",
          "    assert_eq!(decoder.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]