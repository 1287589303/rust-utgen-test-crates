[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let test_input = \"data:text/plain;base64,abcdeSAB;\";",
          "    let _result = remove_base64_suffix(test_input);",
          "}"
        ],
        "oracle": [
          "    let test_input = \"data:text/plain;base64,abcdeSAB;\";",
          "    let result = remove_base64_suffix(test_input);",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let test_input = \"data:text/plain;base64,abcdeSAB;\";",
          "    let _result = remove_base64_suffix(test_input);",
          "    let test_input = \"data:text/plain;base64,abcdeSAB;\";",
          "    let result = remove_base64_suffix(test_input);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let test_input = \"data:text/plain;base64,abcdfg;\";",
          "    let _result = remove_base64_suffix(test_input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg4\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46e\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46es\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46esa\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46esab\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46esabc\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46esabc;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46esabc; \"), None);"
        ],
        "code": [
          "{",
          "    let test_input = \"data:text/plain;base64,abcdfg;\";",
          "    let _result = remove_base64_suffix(test_input);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg4\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46e\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46es\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46esa\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46esab\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46esabc\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46esabc;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdfg46esabc; \"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let test_input = \"data:text/plain;\";",
          "    let _result = remove_base64_suffix(test_input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;AAAA\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;A4e6\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;B4e6\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;44AB\"), None);"
        ],
        "code": [
          "{",
          "    let test_input = \"data:text/plain;\";",
          "    let _result = remove_base64_suffix(test_input);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;AAAA\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;A4e6\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;B4e6\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;44AB\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_input = \"data:text/plain;base64,abcdeSAB;   \";",
          "    let _result = remove_base64_suffix(test_input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;   \"), Some(\"data:text/plain;base64,abcdeSAB;   \"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;\"), Some(\"data:text/plain;base64,abcdeSAB;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB\"), Some(\"data:text/plain;base64,abcdeSAB\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSA\"), Some(\"data:text/plain;base64,abcdeSA\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeS\"), Some(\"data:text/plain;base64,abcdeS\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcde\"), Some(\"data:text/plain;base64,abcde\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcd\"), Some(\"data:text/plain;base64,abcd\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;\"), Some(\"data:text/plain;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;abcde\"), Some(\"data:text/plain;base64,abcdeSAB;abcde\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;  \"), Some(\"data:text/plain;base64,abcdeSAB;  \"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;\\n\"), Some(\"data:text/plain;base64,abcdeSAB;\\n\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;\\t\"), Some(\"data:text/plain;base64,abcdeSAB;\\t\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;\\r\"), Some(\"data:text/plain;base64,abcdeSAB;\\r\"));"
        ],
        "code": [
          "{",
          "    let test_input = \"data:text/plain;base64,abcdeSAB;   \";",
          "    let _result = remove_base64_suffix(test_input);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;   \"), Some(\"data:text/plain;base64,abcdeSAB;   \"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;\"), Some(\"data:text/plain;base64,abcdeSAB;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB\"), Some(\"data:text/plain;base64,abcdeSAB\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSA\"), Some(\"data:text/plain;base64,abcdeSA\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeS\"), Some(\"data:text/plain;base64,abcdeS\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcde\"), Some(\"data:text/plain;base64,abcde\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcd\"), Some(\"data:text/plain;base64,abcd\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;\"), Some(\"data:text/plain;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;abcde\"), Some(\"data:text/plain;base64,abcdeSAB;abcde\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;  \"), Some(\"data:text/plain;base64,abcdeSAB;  \"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;\\n\"), Some(\"data:text/plain;base64,abcdeSAB;\\n\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;\\t\"), Some(\"data:text/plain;base64,abcdeSAB;\\t\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcdeSAB;\\r\"), Some(\"data:text/plain;base64,abcdeSAB;\\r\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_input = \"data:text/plain;base64,123456;\";",
          "    let _result = remove_base64_suffix(test_input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456;\"), Some(\"data:text/plain;base64,123456;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456\"), Some(\"data:text/plain;base64,123456\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456;    \"), Some(\"data:text/plain;base64,123456;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456;\\n\"), Some(\"data:text/plain;base64,123456;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456;\\t\"), Some(\"data:text/plain;base64,123456;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,12345g;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcde;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,1234564;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,1234564\"), Some(\"data:text/plain;base64,1234564\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456;   \\n\\t\\r\"), Some(\"data:text/plain;base64,123456;\"));"
        ],
        "code": [
          "{",
          "    let test_input = \"data:text/plain;base64,123456;\";",
          "    let _result = remove_base64_suffix(test_input);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456;\"), Some(\"data:text/plain;base64,123456;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456\"), Some(\"data:text/plain;base64,123456\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456;    \"), Some(\"data:text/plain;base64,123456;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456;\\n\"), Some(\"data:text/plain;base64,123456;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456;\\t\"), Some(\"data:text/plain;base64,123456;\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,12345g;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,abcde;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,1234564;\"), None);",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,1234564\"), Some(\"data:text/plain;base64,1234564\"));",
          "    assert_eq!(remove_base64_suffix(\"data:text/plain;base64,123456;   \\n\\t\\r\"), Some(\"data:text/plain;base64,123456;\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]