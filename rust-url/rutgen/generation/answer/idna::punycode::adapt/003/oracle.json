[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let delta: u32 = 1000; // delta > ((BASE - T_MIN) * T_MAX) / 2",
          "    let num_points: u32 = 5;",
          "    let first_time: bool = false;",
          "    let result = adapt(delta, num_points, first_time);",
          "}"
        ],
        "oracle": [
          "    assert!(result == 111); // expected return value when delta > ((BASE - T_MIN) * T_MAX) / 2",
          "    ",
          "    let delta: u32 = 700; // bound delta == ((BASE - T_MIN) * T_MAX) / 2",
          "    let num_points: u32 = 5;",
          "    let first_time: bool = false;",
          "    let result = adapt(delta, num_points, first_time);",
          "    assert!(result == 0); // expected return value when delta == ((BASE - T_MIN) * T_MAX) / 2",
          "    ",
          "    let delta: u32 = 1600; // delta > ((BASE - T_MIN) * T_MAX) / 2",
          "    let num_points: u32 = 10;",
          "    let first_time: bool = false;",
          "    let result = adapt(delta, num_points, first_time);",
          "    assert!(result == 202); // expected return value when delta > ((BASE - T_MIN) * T_MAX) / 2",
          "    ",
          "    let delta: u32 = 0; // testing lower boundary case where delta would cause division by zero",
          "    let num_points: u32 = 1;",
          "    let first_time: bool = false;",
          "    let result = adapt(delta, num_points, first_time);",
          "    assert!(result == 0); // expected return value when delta is 0"
        ],
        "code": [
          "{",
          "    let delta: u32 = 1000; // delta > ((BASE - T_MIN) * T_MAX) / 2",
          "    let num_points: u32 = 5;",
          "    let first_time: bool = false;",
          "    let result = adapt(delta, num_points, first_time);",
          "    assert!(result == 111); // expected return value when delta > ((BASE - T_MIN) * T_MAX) / 2",
          "    ",
          "    let delta: u32 = 700; // bound delta == ((BASE - T_MIN) * T_MAX) / 2",
          "    let num_points: u32 = 5;",
          "    let first_time: bool = false;",
          "    let result = adapt(delta, num_points, first_time);",
          "    assert!(result == 0); // expected return value when delta == ((BASE - T_MIN) * T_MAX) / 2",
          "    ",
          "    let delta: u32 = 1600; // delta > ((BASE - T_MIN) * T_MAX) / 2",
          "    let num_points: u32 = 10;",
          "    let first_time: bool = false;",
          "    let result = adapt(delta, num_points, first_time);",
          "    assert!(result == 202); // expected return value when delta > ((BASE - T_MIN) * T_MAX) / 2",
          "    ",
          "    let delta: u32 = 0; // testing lower boundary case where delta would cause division by zero",
          "    let num_points: u32 = 1;",
          "    let first_time: bool = false;",
          "    let result = adapt(delta, num_points, first_time);",
          "    assert!(result == 0); // expected return value when delta is 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let delta: u32 = ((BASE - T_MIN) * T_MAX) / 2; // boundary case",
          "    let num_points: u32 = 5;",
          "    let first_time: bool = false;",
          "    let result = adapt(delta, num_points, first_time);",
          "}"
        ],
        "oracle": [
          "    let expected_result = (0 + (((BASE - T_MIN + 1) * delta) / (delta + SKEW)));",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let delta_above = ((BASE - T_MIN) * T_MAX) / 2 + 1;",
          "    let result_above = adapt(delta_above, num_points, first_time);",
          "    assert!(result_above > expected_result);",
          "    ",
          "    let delta_below = ((BASE - T_MIN) * T_MAX) / 2 - 1;",
          "    let result_below = adapt(delta_below, num_points, first_time);",
          "    assert_eq!(result_below, expected_result);"
        ],
        "code": [
          "{",
          "    let delta: u32 = ((BASE - T_MIN) * T_MAX) / 2; // boundary case",
          "    let num_points: u32 = 5;",
          "    let first_time: bool = false;",
          "    let result = adapt(delta, num_points, first_time);",
          "    let expected_result = (0 + (((BASE - T_MIN + 1) * delta) / (delta + SKEW)));",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let delta_above = ((BASE - T_MIN) * T_MAX) / 2 + 1;",
          "    let result_above = adapt(delta_above, num_points, first_time);",
          "    assert!(result_above > expected_result);",
          "    ",
          "    let delta_below = ((BASE - T_MIN) * T_MAX) / 2 - 1;",
          "    let result_below = adapt(delta_below, num_points, first_time);",
          "    assert_eq!(result_below, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]