[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let delta = ((BASE - T_MIN) * T_MAX) / 2; // delta equals to boundary value",
          "    let num_points = 1; // num_points must be greater than 0",
          "    let first_time = false; // must be false as per precondition",
          "    let result = adapt(delta, num_points, first_time);",
          "}"
        ],
        "oracle": [
          "    let expected_result = (((BASE - T_MIN + 1) * delta) / (delta + SKEW));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let delta = ((BASE - T_MIN) * T_MAX) / 2; // delta equals to boundary value",
          "    let num_points = 1; // num_points must be greater than 0",
          "    let first_time = false; // must be false as per precondition",
          "    let result = adapt(delta, num_points, first_time);",
          "    let expected_result = (((BASE - T_MIN + 1) * delta) / (delta + SKEW));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let delta = ((BASE - T_MIN) * T_MAX) / 2; // delta equals to boundary value",
          "    let num_points = 2; // another num_points case greater than 0",
          "    let first_time = false; // must be false as per precondition",
          "    let result = adapt(delta, num_points, first_time);",
          "}"
        ],
        "oracle": [
          "    let expected_value = ((BASE - T_MIN + 1) * delta) / (delta + SKEW);",
          "    assert_eq!(result, expected_value);"
        ],
        "code": [
          "{",
          "    let delta = ((BASE - T_MIN) * T_MAX) / 2; // delta equals to boundary value",
          "    let num_points = 2; // another num_points case greater than 0",
          "    let first_time = false; // must be false as per precondition",
          "    let result = adapt(delta, num_points, first_time);",
          "    let expected_value = ((BASE - T_MIN + 1) * delta) / (delta + SKEW);",
          "    assert_eq!(result, expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let delta = ((BASE - T_MIN) * T_MAX) / 2; // delta equals to boundary value",
          "    let num_points = 10; // yet another num_points case greater than 0",
          "    let first_time = false; // must be false as per precondition",
          "    let result = adapt(delta, num_points, first_time);",
          "}"
        ],
        "oracle": [
          "    let expected_result = (((BASE - T_MIN + 1) * delta) / (delta + SKEW));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let delta = ((BASE - T_MIN) * T_MAX) / 2; // delta equals to boundary value",
          "    let num_points = 10; // yet another num_points case greater than 0",
          "    let first_time = false; // must be false as per precondition",
          "    let result = adapt(delta, num_points, first_time);",
          "    let expected_result = (((BASE - T_MIN + 1) * delta) / (delta + SKEW));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]