[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.union(*CONTROLS);",
          "    let byte: u8 = 0;",
          "    ascii_set.contains(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ascii_set.contains(0), true);",
          "    assert_eq!(ascii_set.contains(1), false);",
          "    assert_eq!(ascii_set.contains(127), true);",
          "    assert_eq!(ascii_set.contains(128), false);",
          "    assert_eq!(ascii_set.contains(65), true);",
          "    assert_eq!(ascii_set.contains(32), false);",
          "    assert_eq!(ascii_set.contains(7), true);",
          "    assert_eq!(ascii_set.contains(127), true);",
          "    assert_eq!(ascii_set.contains(63), false);",
          "    assert_eq!(ascii_set.contains(90), true);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.union(*CONTROLS);",
          "    let byte: u8 = 0;",
          "    ascii_set.contains(byte);",
          "    assert_eq!(ascii_set.contains(0), true);",
          "    assert_eq!(ascii_set.contains(1), false);",
          "    assert_eq!(ascii_set.contains(127), true);",
          "    assert_eq!(ascii_set.contains(128), false);",
          "    assert_eq!(ascii_set.contains(65), true);",
          "    assert_eq!(ascii_set.contains(32), false);",
          "    assert_eq!(ascii_set.contains(7), true);",
          "    assert_eq!(ascii_set.contains(127), true);",
          "    assert_eq!(ascii_set.contains(63), false);",
          "    assert_eq!(ascii_set.contains(90), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.union(*CONTROLS);",
          "    let byte: u8 = 127;",
          "    ascii_set.contains(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ascii_set.contains(0), false);",
          "    assert_eq!(ascii_set.contains(31), false);",
          "    assert_eq!(ascii_set.contains(32), true);",
          "    assert_eq!(ascii_set.contains(64), false);",
          "    assert_eq!(ascii_set.contains(127), true);",
          "    assert_eq!(ascii_set.contains(128), false);",
          "    assert_eq!(ascii_set.contains(255), false);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.union(*CONTROLS);",
          "    let byte: u8 = 127;",
          "    ascii_set.contains(byte);",
          "    assert_eq!(ascii_set.contains(0), false);",
          "    assert_eq!(ascii_set.contains(31), false);",
          "    assert_eq!(ascii_set.contains(32), true);",
          "    assert_eq!(ascii_set.contains(64), false);",
          "    assert_eq!(ascii_set.contains(127), true);",
          "    assert_eq!(ascii_set.contains(128), false);",
          "    assert_eq!(ascii_set.contains(255), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.union(*NON_ALPHANUMERIC);",
          "    let byte: u8 = b' ';",
          "    ascii_set.contains(byte);",
          "}"
        ],
        "oracle": [
          "    let ascii_set = AsciiSet::EMPTY.union(*NON_ALPHANUMERIC);",
          "    let byte: u8 = b' ';",
          "    let expected_result: bool = true;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = b'!';",
          "    let expected_result: bool = true;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = b'a';",
          "    let expected_result: bool = false;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = 0x7F;",
          "    let expected_result: bool = false;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = b'&';",
          "    let expected_result: bool = true;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = b'~';",
          "    let expected_result: bool = true;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = b'A';",
          "    let expected_result: bool = false;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = 0x80;",
          "    let expected_result: bool = false;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.union(*NON_ALPHANUMERIC);",
          "    let byte: u8 = b' ';",
          "    ascii_set.contains(byte);",
          "    let ascii_set = AsciiSet::EMPTY.union(*NON_ALPHANUMERIC);",
          "    let byte: u8 = b' ';",
          "    let expected_result: bool = true;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = b'!';",
          "    let expected_result: bool = true;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = b'a';",
          "    let expected_result: bool = false;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = 0x7F;",
          "    let expected_result: bool = false;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = b'&';",
          "    let expected_result: bool = true;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = b'~';",
          "    let expected_result: bool = true;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = b'A';",
          "    let expected_result: bool = false;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "    ",
          "    let byte: u8 = 0x80;",
          "    let expected_result: bool = false;",
          "    assert_eq!(ascii_set.contains(byte), expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.union(*NON_ALPHANUMERIC);",
          "    let byte: u8 = b'!';",
          "    ascii_set.contains(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ascii_set.contains(b'!'), true);",
          "    assert_eq!(ascii_set.contains(b' '), true);",
          "    assert_eq!(ascii_set.contains(b'#'), true);",
          "    assert_eq!(ascii_set.contains(b'$'), true);",
          "    assert_eq!(ascii_set.contains(b'&'), true);",
          "    assert_eq!(ascii_set.contains(b'('), true);",
          "    assert_eq!(ascii_set.contains(b')'), true);",
          "    assert_eq!(ascii_set.contains(b'*'), true);",
          "    assert_eq!(ascii_set.contains(b'+'), true);",
          "    assert_eq!(ascii_set.contains(b','), true);",
          "    assert_eq!(ascii_set.contains(b'-'), true);",
          "    assert_eq!(ascii_set.contains(b'.'), true);",
          "    assert_eq!(ascii_set.contains(b'/'), true);",
          "    assert_eq!(ascii_set.contains(b':'), true);",
          "    assert_eq!(ascii_set.contains(b';'), true);",
          "    assert_eq!(ascii_set.contains(b'<'), true);",
          "    assert_eq!(ascii_set.contains(b'='); true);",
          "    assert_eq!(ascii_set.contains(b'>'), true);",
          "    assert_eq!(ascii_set.contains(b'?'), true);",
          "    assert_eq!(ascii_set.contains(b'@'), true);",
          "    assert_eq!(ascii_set.contains(b'\\\\'), true);",
          "    assert_eq!(ascii_set.contains(b'^'), true);",
          "    assert_eq!(ascii_set.contains(b'_'), true);",
          "    assert_eq!(ascii_set.contains(b'`'), true);",
          "    assert_eq!(ascii_set.contains(b'{'), true);",
          "    assert_eq!(ascii_set.contains(b'|'), true);",
          "    assert_eq!(ascii_set.contains(b'}'), true);",
          "    assert_eq!(ascii_set.contains(b'~'), true);",
          "    assert_eq!(ascii_set.contains(b'a'), false);",
          "    assert_eq!(ascii_set.contains(b'z'), false);",
          "    assert_eq!(ascii_set.contains(b'A'), false);",
          "    assert_eq!(ascii_set.contains(b'Z'), false);",
          "    assert_eq!(ascii_set.contains(b'0'), false);",
          "    assert_eq!(ascii_set.contains(b'9'), false);",
          "    assert_eq!(ascii_set.contains(0x80), false);",
          "    assert_eq!(ascii_set.contains(0xFF), false);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.union(*NON_ALPHANUMERIC);",
          "    let byte: u8 = b'!';",
          "    ascii_set.contains(byte);",
          "    assert_eq!(ascii_set.contains(b'!'), true);",
          "    assert_eq!(ascii_set.contains(b' '), true);",
          "    assert_eq!(ascii_set.contains(b'#'), true);",
          "    assert_eq!(ascii_set.contains(b'$'), true);",
          "    assert_eq!(ascii_set.contains(b'&'), true);",
          "    assert_eq!(ascii_set.contains(b'('), true);",
          "    assert_eq!(ascii_set.contains(b')'), true);",
          "    assert_eq!(ascii_set.contains(b'*'), true);",
          "    assert_eq!(ascii_set.contains(b'+'), true);",
          "    assert_eq!(ascii_set.contains(b','), true);",
          "    assert_eq!(ascii_set.contains(b'-'), true);",
          "    assert_eq!(ascii_set.contains(b'.'), true);",
          "    assert_eq!(ascii_set.contains(b'/'), true);",
          "    assert_eq!(ascii_set.contains(b':'), true);",
          "    assert_eq!(ascii_set.contains(b';'), true);",
          "    assert_eq!(ascii_set.contains(b'<'), true);",
          "    assert_eq!(ascii_set.contains(b'='); true);",
          "    assert_eq!(ascii_set.contains(b'>'), true);",
          "    assert_eq!(ascii_set.contains(b'?'), true);",
          "    assert_eq!(ascii_set.contains(b'@'), true);",
          "    assert_eq!(ascii_set.contains(b'\\\\'), true);",
          "    assert_eq!(ascii_set.contains(b'^'), true);",
          "    assert_eq!(ascii_set.contains(b'_'), true);",
          "    assert_eq!(ascii_set.contains(b'`'), true);",
          "    assert_eq!(ascii_set.contains(b'{'), true);",
          "    assert_eq!(ascii_set.contains(b'|'), true);",
          "    assert_eq!(ascii_set.contains(b'}'), true);",
          "    assert_eq!(ascii_set.contains(b'~'), true);",
          "    assert_eq!(ascii_set.contains(b'a'), false);",
          "    assert_eq!(ascii_set.contains(b'z'), false);",
          "    assert_eq!(ascii_set.contains(b'A'), false);",
          "    assert_eq!(ascii_set.contains(b'Z'), false);",
          "    assert_eq!(ascii_set.contains(b'0'), false);",
          "    assert_eq!(ascii_set.contains(b'9'), false);",
          "    assert_eq!(ascii_set.contains(0x80), false);",
          "    assert_eq!(ascii_set.contains(0xFF), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.union(*NON_ALPHANUMERIC);",
          "    let byte: u8 = b'~';",
          "    ascii_set.contains(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ascii_set.contains(b'~'), true);",
          "    assert_eq!(ascii_set.contains(b'a'), false);",
          "    assert_eq!(ascii_set.contains(b' '), true);",
          "    assert_eq!(ascii_set.contains(b'!'), true);",
          "    assert_eq!(ascii_set.contains(b'1'), false);",
          "    assert_eq!(ascii_set.contains(b'@'), true);",
          "    assert_eq!(ascii_set.contains(b':'), true);",
          "    assert_eq!(ascii_set.contains(b'\\n'), false);",
          "    assert_eq!(ascii_set.contains(b'\\x00'), true);",
          "    assert_eq!(ascii_set.contains(b'\\x7F'), false);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.union(*NON_ALPHANUMERIC);",
          "    let byte: u8 = b'~';",
          "    ascii_set.contains(byte);",
          "    assert_eq!(ascii_set.contains(b'~'), true);",
          "    assert_eq!(ascii_set.contains(b'a'), false);",
          "    assert_eq!(ascii_set.contains(b' '), true);",
          "    assert_eq!(ascii_set.contains(b'!'), true);",
          "    assert_eq!(ascii_set.contains(b'1'), false);",
          "    assert_eq!(ascii_set.contains(b'@'), true);",
          "    assert_eq!(ascii_set.contains(b':'), true);",
          "    assert_eq!(ascii_set.contains(b'\\n'), false);",
          "    assert_eq!(ascii_set.contains(b'\\x00'), true);",
          "    assert_eq!(ascii_set.contains(b'\\x7F'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let byte: u8 = b'a';",
          "    ascii_set.contains(byte);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ascii_set.contains(b'a'), false);",
          "    assert_eq!(ascii_set.contains(b' '), false);",
          "    assert_eq!(ascii_set.contains(b'!'), false);",
          "    assert_eq!(ascii_set.contains(b'Z'), false);",
          "    assert_eq!(ascii_set.contains(b'0'), false);",
          "    assert_eq!(ascii_set.contains(0x7F), false);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let byte: u8 = b'a';",
          "    ascii_set.contains(byte);",
          "    assert_eq!(ascii_set.contains(b'a'), false);",
          "    assert_eq!(ascii_set.contains(b' '), false);",
          "    assert_eq!(ascii_set.contains(b'!'), false);",
          "    assert_eq!(ascii_set.contains(b'Z'), false);",
          "    assert_eq!(ascii_set.contains(b'0'), false);",
          "    assert_eq!(ascii_set.contains(0x7F), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let byte: u8 = b'1';",
          "    ascii_set.contains(byte);",
          "}"
        ],
        "oracle": [
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let byte: u8 = b'1';",
          "    assert_eq!(ascii_set.contains(byte), false);",
          "    ",
          "    let ascii_set = NON_ALPHANUMERIC;",
          "    let byte: u8 = b'!';",
          "    assert_eq!(ascii_set.contains(byte), true);",
          "    ",
          "    let ascii_set = NON_ALPHANUMERIC;",
          "    let byte: u8 = b'a';",
          "    assert_eq!(ascii_set.contains(byte), false);",
          "    ",
          "    let ascii_set = CONTROLS;",
          "    let byte: u8 = 0x00;",
          "    assert_eq!(ascii_set.contains(byte), true);",
          "    ",
          "    let ascii_set = CONTROLS;",
          "    let byte: u8 = 0x7F;",
          "    assert_eq!(ascii_set.contains(byte), true);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let byte: u8 = b'1';",
          "    ascii_set.contains(byte);",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let byte: u8 = b'1';",
          "    assert_eq!(ascii_set.contains(byte), false);",
          "    ",
          "    let ascii_set = NON_ALPHANUMERIC;",
          "    let byte: u8 = b'!';",
          "    assert_eq!(ascii_set.contains(byte), true);",
          "    ",
          "    let ascii_set = NON_ALPHANUMERIC;",
          "    let byte: u8 = b'a';",
          "    assert_eq!(ascii_set.contains(byte), false);",
          "    ",
          "    let ascii_set = CONTROLS;",
          "    let byte: u8 = 0x00;",
          "    assert_eq!(ascii_set.contains(byte), true);",
          "    ",
          "    let ascii_set = CONTROLS;",
          "    let byte: u8 = 0x7F;",
          "    assert_eq!(ascii_set.contains(byte), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let byte: u8 = 128;",
          "    ascii_set.contains(byte);",
          "}"
        ],
        "oracle": [
          "    ascii_set.contains(0) == false",
          "    ascii_set.contains(31) == false",
          "    ascii_set.contains(32) == false",
          "    ascii_set.contains(33) == false",
          "    ascii_set.contains(126) == false",
          "    ascii_set.contains(127) == false",
          "    ascii_set.contains(128) == false",
          "    ascii_set.contains(255) == false",
          "    ascii_set.add(65).contains(65) == true",
          "    ascii_set.add(90).contains(90) == true",
          "    ascii_set.add(97).contains(97) == true",
          "    ascii_set.add(122).contains(122) == true",
          "    ascii_set.add(0).contains(0) == true",
          "    ascii_set.add(31).contains(31) == true",
          "    ascii_set.add(64).contains(64) == true",
          "    ascii_set.add(127).contains(127) == true",
          "    ascii_set.add(128).contains(128) == false",
          "    ascii_set.add(255).contains(255) == false"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY;",
          "    let byte: u8 = 128;",
          "    ascii_set.contains(byte);",
          "    ascii_set.contains(0) == false",
          "    ascii_set.contains(31) == false",
          "    ascii_set.contains(32) == false",
          "    ascii_set.contains(33) == false",
          "    ascii_set.contains(126) == false",
          "    ascii_set.contains(127) == false",
          "    ascii_set.contains(128) == false",
          "    ascii_set.contains(255) == false",
          "    ascii_set.add(65).contains(65) == true",
          "    ascii_set.add(90).contains(90) == true",
          "    ascii_set.add(97).contains(97) == true",
          "    ascii_set.add(122).contains(122) == true",
          "    ascii_set.add(0).contains(0) == true",
          "    ascii_set.add(31).contains(31) == true",
          "    ascii_set.add(64).contains(64) == true",
          "    ascii_set.add(127).contains(127) == true",
          "    ascii_set.add(128).contains(128) == false",
          "    ascii_set.add(255).contains(255) == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]