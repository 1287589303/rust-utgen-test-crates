[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        use_std3_ascii_rules: false,",
          "        transitional_processing: false,",
          "        verify_dns_length: false,",
          "        check_hyphens: false,",
          "    };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"valid-domain.com\";",
          "    let mut out = String::new();",
          "",
          "    idna.to_ascii(domain, &mut out).unwrap();",
          "}"
        ],
        "oracle": [
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"valid-domain.com\";",
          "    let mut out = String::new();",
          "    let mapped = map_transitional(domain, false);",
          "    let result = Uts46::new().process(mapped.as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out, None);",
          "    assert_eq!(result, Ok(ProcessingSuccess::Passthrough));",
          "    assert!(verify_dns_length(&mapped, true));",
          "    idna.to_ascii(domain, &mut out).unwrap();",
          "    ",
          "    let config_with_error = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: true, check_hyphens: false };",
          "    let mut idna_with_error = Idna::new(config_with_error);",
          "    let mut out_with_error = String::new();",
          "    let error_result = Uts46::new().process(mapped.as_bytes(), idna_with_error.config.deny_list(), idna_with_error.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out_with_error, None);",
          "    assert!(matches!(error_result, Err(ProcessingError::ValidityError)) || matches!(error_result, Err(ProcessingError::SinkError)));",
          "    idna_with_error.to_ascii(domain, &mut out_with_error).unwrap_err();",
          "    ",
          "    let config_dns_check = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna_dns_check = Idna::new(config_dns_check);",
          "    let mut out_dns_check = String::new();",
          "    let dns_check_result = Uts46::new().process(mapped.as_bytes(), idna_dns_check.config.deny_list(), idna_dns_check.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out_dns_check, None);",
          "    assert_eq!(dns_check_result, Ok(ProcessingSuccess::WroteToSink));",
          "    idna_dns_check.to_ascii(domain, &mut out_dns_check).unwrap();"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        use_std3_ascii_rules: false,",
          "        transitional_processing: false,",
          "        verify_dns_length: false,",
          "        check_hyphens: false,",
          "    };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"valid-domain.com\";",
          "    let mut out = String::new();",
          "",
          "    idna.to_ascii(domain, &mut out).unwrap();",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"valid-domain.com\";",
          "    let mut out = String::new();",
          "    let mapped = map_transitional(domain, false);",
          "    let result = Uts46::new().process(mapped.as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out, None);",
          "    assert_eq!(result, Ok(ProcessingSuccess::Passthrough));",
          "    assert!(verify_dns_length(&mapped, true));",
          "    idna.to_ascii(domain, &mut out).unwrap();",
          "    ",
          "    let config_with_error = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: true, check_hyphens: false };",
          "    let mut idna_with_error = Idna::new(config_with_error);",
          "    let mut out_with_error = String::new();",
          "    let error_result = Uts46::new().process(mapped.as_bytes(), idna_with_error.config.deny_list(), idna_with_error.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out_with_error, None);",
          "    assert!(matches!(error_result, Err(ProcessingError::ValidityError)) || matches!(error_result, Err(ProcessingError::SinkError)));",
          "    idna_with_error.to_ascii(domain, &mut out_with_error).unwrap_err();",
          "    ",
          "    let config_dns_check = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna_dns_check = Idna::new(config_dns_check);",
          "    let mut out_dns_check = String::new();",
          "    let dns_check_result = Uts46::new().process(mapped.as_bytes(), idna_dns_check.config.deny_list(), idna_dns_check.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out_dns_check, None);",
          "    assert_eq!(dns_check_result, Ok(ProcessingSuccess::WroteToSink));",
          "    idna_dns_check.to_ascii(domain, &mut out_dns_check).unwrap();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        use_std3_ascii_rules: false,",
          "        transitional_processing: false,",
          "        verify_dns_length: false,",
          "        check_hyphens: false,",
          "    };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"xn--80akhbyknj4f\"; // Punycode for validation",
          "    let mut out = String::new();",
          "",
          "    idna.to_ascii(domain, &mut out).unwrap();",
          "}"
        ],
        "oracle": [
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"xn--80akhbyknj4f\";",
          "    let mut out = String::new();",
          "    assert_eq!(idna.to_ascii(domain, &mut out), Ok(()));",
          "    assert_eq!(out, \"xn--80akhbyknj4f\");",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: true, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"xn--80akhbyknj4f\";",
          "    let mut out = String::new();",
          "    assert_eq!(idna.to_ascii(domain, &mut out), Ok(()));",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: true, check_hyphens: true };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"xn--80akhbyknj4f\";",
          "    let mut out = String::new();",
          "    assert_eq!(idna.to_ascii(domain, &mut out), Ok(()));",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: true };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"xn--80akhbyknj4f\";",
          "    let mut out = String::new();",
          "    assert_eq!(idna.to_ascii(domain, &mut out), Ok(()));",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: true, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"invalid-domain-@\" ;",
          "    let mut out = String::new();",
          "    assert!(idna.to_ascii(domain, &mut out).is_err());",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: true, verify_dns_length: false, check_hyphens: true };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"invalid--domain\";",
          "    let mut out = String::new();",
          "    assert!(idna.to_ascii(domain, &mut out).is_err());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        use_std3_ascii_rules: false,",
          "        transitional_processing: false,",
          "        verify_dns_length: false,",
          "        check_hyphens: false,",
          "    };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"xn--80akhbyknj4f\"; // Punycode for validation",
          "    let mut out = String::new();",
          "",
          "    idna.to_ascii(domain, &mut out).unwrap();",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"xn--80akhbyknj4f\";",
          "    let mut out = String::new();",
          "    assert_eq!(idna.to_ascii(domain, &mut out), Ok(()));",
          "    assert_eq!(out, \"xn--80akhbyknj4f\");",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: true, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"xn--80akhbyknj4f\";",
          "    let mut out = String::new();",
          "    assert_eq!(idna.to_ascii(domain, &mut out), Ok(()));",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: true, check_hyphens: true };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"xn--80akhbyknj4f\";",
          "    let mut out = String::new();",
          "    assert_eq!(idna.to_ascii(domain, &mut out), Ok(()));",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: true };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"xn--80akhbyknj4f\";",
          "    let mut out = String::new();",
          "    assert_eq!(idna.to_ascii(domain, &mut out), Ok(()));",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: true, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"invalid-domain-@\" ;",
          "    let mut out = String::new();",
          "    assert!(idna.to_ascii(domain, &mut out).is_err());",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: true, verify_dns_length: false, check_hyphens: true };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"invalid--domain\";",
          "    let mut out = String::new();",
          "    assert!(idna.to_ascii(domain, &mut out).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        use_std3_ascii_rules: false,",
          "        transitional_processing: false,",
          "        verify_dns_length: false,",
          "        check_hyphens: false,",
          "    };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"invalid--domain.com\"; // Invalid domain with double hyphen",
          "    let mut out = String::new();",
          "",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    let config = Config { use_std3_ascii_rules: true, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"valid-domain.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"valid-domain.com\");",
          "    ",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: true, verify_dns_length: false, check_hyphens: true };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"valid-domain.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_ok());",
          "    assert_eq!(out, \"valid-domain.com\");",
          "    ",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: true, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"too_long_domain_name_exceeding_limit_of_two_hundred_and_fifty_three_characters_12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        use_std3_ascii_rules: false,",
          "        transitional_processing: false,",
          "        verify_dns_length: false,",
          "        check_hyphens: false,",
          "    };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"invalid--domain.com\"; // Invalid domain with double hyphen",
          "    let mut out = String::new();",
          "",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_err());",
          "    let config = Config { use_std3_ascii_rules: true, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"valid-domain.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"valid-domain.com\");",
          "    ",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: true, verify_dns_length: false, check_hyphens: true };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"valid-domain.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_ok());",
          "    assert_eq!(out, \"valid-domain.com\");",
          "    ",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: true, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"too_long_domain_name_exceeding_limit_of_two_hundred_and_fifty_three_characters_12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config {",
          "        use_std3_ascii_rules: false,",
          "        transitional_processing: false,",
          "        verify_dns_length: false,",
          "        check_hyphens: false,",
          "    };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"\"; // An empty domain string",
          "    let mut out = String::new();",
          "",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_err());",
          "}"
        ],
        "oracle": [
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(out.is_empty());",
          "    assert!(verify_dns_length(&out, true));",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: true, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_ok());",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example..com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_err());",
          "    let config = Config { use_std3_ascii_rules: true, transitional_processing: false, verify_dns_length: false, check_hyphens: true };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example-.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_err());",
          "    let config = Config { use_std3_ascii_rules: true, transitional_processing: true, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_ok());",
          "    assert_eq!(out, \"example.com\");"
        ],
        "code": [
          "{",
          "    let config = Config {",
          "        use_std3_ascii_rules: false,",
          "        transitional_processing: false,",
          "        verify_dns_length: false,",
          "        check_hyphens: false,",
          "    };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"\"; // An empty domain string",
          "    let mut out = String::new();",
          "",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_err());",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert_eq!(result, Ok(()));",
          "    assert!(out.is_empty());",
          "    assert!(verify_dns_length(&out, true));",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: true, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_ok());",
          "    let config = Config { use_std3_ascii_rules: false, transitional_processing: false, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example..com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_err());",
          "    let config = Config { use_std3_ascii_rules: true, transitional_processing: false, verify_dns_length: false, check_hyphens: true };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example-.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_err());",
          "    let config = Config { use_std3_ascii_rules: true, transitional_processing: true, verify_dns_length: false, check_hyphens: false };",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example.com\";",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(domain, &mut out);",
          "    assert!(result.is_ok());",
          "    assert_eq!(out, \"example.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]