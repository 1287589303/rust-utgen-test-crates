[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default()",
          "        .transitional_processing(true)",
          "        .verify_dns_length(false);",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"valid.domain\";",
          "    let mut output = String::new();",
          "    ",
          "    let result = idna.to_ascii(domain, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"valid.domain\");",
          "    assert!(output.len() > 0);",
          "    assert!(verify_dns_length(&output, true));"
        ],
        "code": [
          "{",
          "    let config = Config::default()",
          "        .transitional_processing(true)",
          "        .verify_dns_length(false);",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"valid.domain\";",
          "    let mut output = String::new();",
          "    ",
          "    let result = idna.to_ascii(domain, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"valid.domain\");",
          "    assert!(output.len() > 0);",
          "    assert!(verify_dns_length(&output, true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default()",
          "        .transitional_processing(false)",
          "        .verify_dns_length(false);",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"another.valid.domain\";",
          "    let mut output = String::new();",
          "    ",
          "    let result = idna.to_ascii(domain, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"another.valid.domain\");",
          "    assert_eq!(Uts46::new().process(domain.as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut output, None).unwrap(), ProcessingSuccess::Passthrough);",
          "    assert!(verify_dns_length(output.as_str(), true));"
        ],
        "code": [
          "{",
          "    let config = Config::default()",
          "        .transitional_processing(false)",
          "        .verify_dns_length(false);",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"another.valid.domain\";",
          "    let mut output = String::new();",
          "    ",
          "    let result = idna.to_ascii(domain, &mut output);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(output, \"another.valid.domain\");",
          "    assert_eq!(Uts46::new().process(domain.as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut output, None).unwrap(), ProcessingSuccess::Passthrough);",
          "    assert!(verify_dns_length(output.as_str(), true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let config = Config::default()",
          "        .transitional_processing(true)",
          "        .verify_dns_length(false);",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example.com\";",
          "    let mut output = String::new();",
          "    ",
          "    let result = idna.to_ascii(domain, &mut output);",
          "}"
        ],
        "oracle": [
          "    let config = Config::default().transitional_processing(true).verify_dns_length(false);",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example.com\";",
          "    let mut output = String::new();",
          "    let mapped = map_transitional(domain, true);",
          "    let assert_result = Uts46::new().process(mapped.as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut output, None);",
          "    assert!(assert_result == Ok(ProcessingSuccess::Passthrough) || assert_result == Ok(ProcessingSuccess::WroteToSink);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"example.com\");"
        ],
        "code": [
          "{",
          "    let config = Config::default()",
          "        .transitional_processing(true)",
          "        .verify_dns_length(false);",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example.com\";",
          "    let mut output = String::new();",
          "    ",
          "    let result = idna.to_ascii(domain, &mut output);",
          "    let config = Config::default().transitional_processing(true).verify_dns_length(false);",
          "    let mut idna = Idna::new(config);",
          "    let domain = \"example.com\";",
          "    let mut output = String::new();",
          "    let mapped = map_transitional(domain, true);",
          "    let assert_result = Uts46::new().process(mapped.as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut output, None);",
          "    assert!(assert_result == Ok(ProcessingSuccess::Passthrough) || assert_result == Ok(ProcessingSuccess::WroteToSink);",
          "    assert!(result.is_ok());",
          "    assert_eq!(output, \"example.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]