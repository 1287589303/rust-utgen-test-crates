[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"example.com\", &mut out);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"example.com\");",
          "    assert!(verify_dns_length(&out, true));"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"example.com\", &mut out);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"example.com\");",
          "    assert!(verify_dns_length(&out, true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"my-domain.com\", &mut out);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"my-domain.com\");",
          "    assert!(verify_dns_length(\"my-domain.com\", true));",
          "    assert!(Uts46::new().process(",
          "    map_transitional(\"my-domain.com\", true).as_bytes(),",
          "    idna.config.deny_list(),",
          "    idna.config.hyphens(),",
          "    ErrorPolicy::FailFast,",
          "    |_, _, _| false,",
          "    &mut out,",
          "    None,",
          "    ).is_ok());"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"my-domain.com\", &mut out);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"my-domain.com\");",
          "    assert!(verify_dns_length(\"my-domain.com\", true));",
          "    assert!(Uts46::new().process(",
          "    map_transitional(\"my-domain.com\", true).as_bytes(),",
          "    idna.config.deny_list(),",
          "    idna.config.hyphens(),",
          "    ErrorPolicy::FailFast,",
          "    |_, _, _| false,",
          "    &mut out,",
          "    None,",
          "    ).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"a\", &mut out);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"a\");",
          "    assert!(!out.is_empty());",
          "    assert!(verify_dns_length(&out, true));",
          "    assert!(Uts46::new().process(\"a\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out, None).is_ok());"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"a\", &mut out);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"a\");",
          "    assert!(!out.is_empty());",
          "    assert!(verify_dns_length(&out, true));",
          "    assert!(Uts46::new().process(\"a\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out, None).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"example.label.com\", &mut out);",
          "}"
        ],
        "oracle": [
          "    let config = Config::default().use_std3_ascii_rules(true).transitional_processing(true).verify_dns_length(true).check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    assert!(Uts46::new().process(\"example.label.com\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out, None).is_ok());",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"example.label.com\");",
          "    assert!(verify_dns_length(\"example.label.com\", true));"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"example.label.com\", &mut out);",
          "    let config = Config::default().use_std3_ascii_rules(true).transitional_processing(true).verify_dns_length(true).check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    assert!(Uts46::new().process(\"example.label.com\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out, None).is_ok());",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"example.label.com\");",
          "    assert!(verify_dns_length(\"example.label.com\", true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"a-very-long-valid-domain-name.com\", &mut out);",
          "}"
        ],
        "oracle": [
          "    let config = Config::default()",
          "    .use_std3_ascii_rules(true)",
          "    .transitional_processing(true)",
          "    .verify_dns_length(true)",
          "    .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(\"a-very-long-valid-domain-name.com\", &mut out);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"a-very-long-valid-domain-name.com\");"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"a-very-long-valid-domain-name.com\", &mut out);",
          "    let config = Config::default()",
          "    .use_std3_ascii_rules(true)",
          "    .transitional_processing(true)",
          "    .verify_dns_length(true)",
          "    .check_hyphens(false);",
          "    let mut idna = Idna::new(config);",
          "    let mut out = String::new();",
          "    let result = idna.to_ascii(\"a-very-long-valid-domain-name.com\", &mut out);",
          "    assert_eq!(result, Ok(()));",
          "    assert_eq!(out, \"a-very-long-valid-domain-name.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(true);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"example-.com\", &mut out);",
          "}"
        ],
        "oracle": [
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "    .use_std3_ascii_rules(true)",
          "    .transitional_processing(true)",
          "    .verify_dns_length(true)",
          "    .check_hyphens(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_ascii(\"example-.com\", &mut out);",
          "    assert!(result.is_ok());",
          "    assert_eq!(out, \"example-.com\");",
          "    assert!(Uts46::new().process(\"example-.com\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out, None).is_ok());",
          "    assert!(idna.config.verify_dns_length);",
          "    assert!(verify_dns_length(\"example-.com\", true));"
        ],
        "code": [
          "{",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "        .use_std3_ascii_rules(true)",
          "        .transitional_processing(true)",
          "        .verify_dns_length(true)",
          "        .check_hyphens(true);",
          "    let mut idna = Idna::new(config);",
          "    ",
          "    let result = idna.to_ascii(\"example-.com\", &mut out);",
          "    let mut out = String::new();",
          "    let config = Config::default()",
          "    .use_std3_ascii_rules(true)",
          "    .transitional_processing(true)",
          "    .verify_dns_length(true)",
          "    .check_hyphens(true);",
          "    let mut idna = Idna::new(config);",
          "    let result = idna.to_ascii(\"example-.com\", &mut out);",
          "    assert!(result.is_ok());",
          "    assert_eq!(out, \"example-.com\");",
          "    assert!(Uts46::new().process(\"example-.com\".as_bytes(), idna.config.deny_list(), idna.config.hyphens(), ErrorPolicy::FailFast, |_, _, _| false, &mut out, None).is_ok());",
          "    assert!(idna.config.verify_dns_length);",
          "    assert!(verify_dns_length(\"example-.com\", true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]