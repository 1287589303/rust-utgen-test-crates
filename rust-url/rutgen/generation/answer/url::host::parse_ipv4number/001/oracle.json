[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\";",
          "    let result = parse_ipv4number(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let input = \"\";",
          "    let result = parse_ipv4number(input);",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"0\";",
          "    let result = parse_ipv4number(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let input = \"0\";",
          "    let result = parse_ipv4number(input);",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"01\";",
          "    let result = parse_ipv4number(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let input = \"01\";",
          "    let result = parse_ipv4number(input);",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"0x\";",
          "    let result = parse_ipv4number(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let input = \"0x\";",
          "    let result = parse_ipv4number(input);",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"0x00\";",
          "    let result = parse_ipv4number(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parse_ipv4number(\"\"), Err(()));"
        ],
        "code": [
          "{",
          "    let input = \"0x00\";",
          "    let result = parse_ipv4number(input);",
          "    assert_eq!(parse_ipv4number(\"\"), Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"0x1A3F\";",
          "    let result = parse_ipv4number(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(parse_ipv4number(\"\"), Err(()));"
        ],
        "code": [
          "{",
          "    let input = \"0x1A3F\";",
          "    let result = parse_ipv4number(input);",
          "    assert_eq!(parse_ipv4number(\"\"), Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"0xGHIJ\";",
          "    let result = parse_ipv4number(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let input = \"0xGHIJ\";",
          "    let result = parse_ipv4number(input);",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"01\"; // leading zero should trigger octal parsing",
          "    let result = parse_ipv4number(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"\";",
          "    let expected = Err(());",
          "    assert_eq!(parse_ipv4number(input), expected);"
        ],
        "code": [
          "{",
          "    let input = \"01\"; // leading zero should trigger octal parsing",
          "    let result = parse_ipv4number(input);",
          "    let input = \"\";",
          "    let expected = Err(());",
          "    assert_eq!(parse_ipv4number(input), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"08\"; // invalid octal number",
          "    let result = parse_ipv4number(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let input = \"08\"; // invalid octal number",
          "    let result = parse_ipv4number(input);",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]