[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"/C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/b#\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/d\\\\\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/c?\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/x|\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/Y:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/Z:\"), true);"
        ],
        "code": [
          "{",
          "    let input = \"/C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/b#\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/d\\\\\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/c?\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/x|\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/Y:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/Z:\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\\\\C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/A:/\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"/C:/file.txt\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"/C|\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/C?\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/C#\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"C:\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"\\\\C:\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"#C:\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"?C:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/D:/\"));"
        ],
        "code": [
          "{",
          "    let input = \"\\\\C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/A:/\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"/C:/file.txt\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"/C|\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/C?\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/C#\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"C:\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"\\\\C:\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"#C:\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"?C:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/D:/\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"#C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(result.is_instance_of::<bool>());",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/d:/\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/a:/\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/f:\"));"
        ],
        "code": [
          "{",
          "    let input = \"#C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    assert!(result.is_instance_of::<bool>());",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/d:/\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/a:/\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/f:\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"?C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"/C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"\\\\C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"#C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"?A:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"/A:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"\\\\A:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"#A:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let input = \"?C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"/C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"\\\\C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"#C:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"?A:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"/A:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"\\\\A:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    ",
          "    let input = \"#A:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"/C:/path\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(matches!(input.as_bytes().first(), Some(&b'/')));",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:/path\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/a:/\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/A:/another/path\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/c:/another/path\"));",
          "    assert!(matches!(input.as_bytes()[0], b'/'));"
        ],
        "code": [
          "{",
          "    let input = \"/C:/path\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    assert!(matches!(input.as_bytes().first(), Some(&b'/')));",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:/path\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/a:/\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/A:/another/path\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/c:/another/path\"));",
          "    assert!(matches!(input.as_bytes()[0], b'/'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\\\\A:\\\\path\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/A:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/c:/path\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/path\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/B:\\\\\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/X:/folder\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/D?#\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/E:/another/path\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"//F:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/G:/subdir\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/H:?query\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/I:#fragment\"), true);"
        ],
        "code": [
          "{",
          "    let input = \"\\\\A:\\\\path\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/A:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/c:/path\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/path\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/B:\\\\\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/X:/folder\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/D?#\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/E:/another/path\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"//F:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/G:/subdir\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/H:?query\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/I:#fragment\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let input = \"/c:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"/a:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"/A|\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"/b#\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"\\\\c:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"\\\\a:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"\\\\A|\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"\\\\b#\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let input = \"/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"/c:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"/a:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"/A|\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"/b#\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"\\\\c:\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"\\\\a:/\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"\\\\A|\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    let input = \"\\\\b#\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"/A|\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/B:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:/\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/D|/path\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/E?query\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/F#fragment\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/G:/another/path\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"/H\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"C:/path\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"\\\\I:\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"?/J|\"));"
        ],
        "code": [
          "{",
          "    let input = \"/A|\";",
          "    let result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(result, true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/B:\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:/\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/D|/path\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/E?query\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/F#fragment\"));",
          "    assert!(path_starts_with_windows_drive_letter(\"/G:/another/path\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"/H\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"C:/path\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"\\\\I:\"));",
          "    assert!(!path_starts_with_windows_drive_letter(\"?/J|\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]