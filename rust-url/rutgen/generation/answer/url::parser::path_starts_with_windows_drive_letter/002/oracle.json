[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"/C:\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/x:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\x:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?x:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#x:\"), true);"
        ],
        "code": [
          "{",
          "    let input = \"/C:\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/x:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\x:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?x:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#x:\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\\\\D:\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:\"), true); // precondition: c matches b'\\\\'",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/D:\"), true); // precondition: c matches b'/'",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?D:\"), true); // precondition: c matches b'?'",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#D:\"), true); // precondition: c matches b'#'"
        ],
        "code": [
          "{",
          "    let input = \"\\\\D:\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:\"), true); // precondition: c matches b'\\\\'",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/D:\"), true); // precondition: c matches b'/'",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?D:\"), true); // precondition: c matches b'?'",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#D:\"), true); // precondition: c matches b'#'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"?B:\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    result = path_starts_with_windows_drive_letter(\"?B:\"); assert_eq!(result, true);",
          "    input = \"/C:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"\\\\D:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"#E:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"?A:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"/A:/\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"\\\\B:\\\\something\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"#C:another\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let input = \"?B:\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "    result = path_starts_with_windows_drive_letter(\"?B:\"); assert_eq!(result, true);",
          "    input = \"/C:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"\\\\D:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"#E:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"?A:\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"/A:/\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"\\\\B:\\\\something\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "    input = \"#C:another\"; result = path_starts_with_windows_drive_letter(input); assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"#A:\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#A:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?E:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#F:\"), true);"
        ],
        "code": [
          "{",
          "    let input = \"#A:\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#A:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?E:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#F:\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"/C:/path/to/file\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert!(path_starts_with_windows_drive_letter(\"/C:/path/to/file\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/A:/another/path\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/Z:/\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/c:/\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\\\\folder\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"?E:/documents\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"#F:/downloads\") == true);"
        ],
        "code": [
          "{",
          "    let input = \"/C:/path/to/file\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:/path/to/file\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/A:/another/path\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/Z:/\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/c:/\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\\\\folder\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"?E:/documents\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"#F:/downloads\") == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\\\\D:\\\\additional\\\\path\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\\\\additional\\\\path\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:/Program Files\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"?D:/files\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"#A:/documents\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/a:/\") == true);"
        ],
        "code": [
          "{",
          "    let input = \"\\\\D:\\\\additional\\\\path\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "    assert!(path_starts_with_windows_drive_letter(\"\\\\D:\\\\additional\\\\path\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/C:/Program Files\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"?D:/files\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"#A:/documents\") == true);",
          "    assert!(path_starts_with_windows_drive_letter(\"/a:/\") == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"?B:/more/paths?\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/c:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?B:/more/paths?\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#Z:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/A:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?C:/path\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/some/path\\\\with\"), false);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"B:/not/valid\"), false);"
        ],
        "code": [
          "{",
          "    let input = \"?B:/more/paths?\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/c:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/a:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\C:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?B:/more/paths?\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#Z:/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/A:\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?C:/path\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/some/path\\\\with\"), false);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"B:/not/valid\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"#A:/another/path/\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#A:/another/path/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:/documents/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:/files/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?E:/projects/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#Z:/resources/\"), true);"
        ],
        "code": [
          "{",
          "    let input = \"#A:/another/path/\";",
          "    let _result = path_starts_with_windows_drive_letter(input);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#A:/another/path/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"/C:/documents/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"\\\\D:/files/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"?E:/projects/\"), true);",
          "    assert_eq!(path_starts_with_windows_drive_letter(\"#Z:/resources/\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]