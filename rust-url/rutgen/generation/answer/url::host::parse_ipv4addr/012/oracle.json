[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"192.168.0.1.1\";",
          "    let _ = parse_ipv4addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"192.168.0.1.1\";",
          "    let result = parse_ipv4addr(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv4Address);"
        ],
        "code": [
          "{",
          "    let input = \"192.168.0.1.1\";",
          "    let _ = parse_ipv4addr(input);",
          "    let input = \"192.168.0.1.1\";",
          "    let result = parse_ipv4addr(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv4Address);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"256.256.256.256.256\";",
          "    let _ = parse_ipv4addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"256.256.256.256.256\";",
          "    let result = parse_ipv4addr(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv4Address);"
        ],
        "code": [
          "{",
          "    let input = \"256.256.256.256.256\";",
          "    let _ = parse_ipv4addr(input);",
          "    let input = \"256.256.256.256.256\";",
          "    let result = parse_ipv4addr(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv4Address);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"1.2.3.4.5a\";",
          "    let _ = parse_ipv4addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"1.2.3.4.5a\";",
          "    assert_eq!(parse_ipv4addr(input), Err(ParseError::InvalidIpv4Address));"
        ],
        "code": [
          "{",
          "    let input = \"1.2.3.4.5a\";",
          "    let _ = parse_ipv4addr(input);",
          "    let input = \"1.2.3.4.5a\";",
          "    assert_eq!(parse_ipv4addr(input), Err(ParseError::InvalidIpv4Address));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"1.2.3.4.\";",
          "    let _ = parse_ipv4addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"1.2.3.4.5\"; // More than 4 parts",
          "    let result = parse_ipv4addr(input);",
          "    assert_eq!(result, Err(ParseError::InvalidIpv4Address));"
        ],
        "code": [
          "{",
          "    let input = \"1.2.3.4.\";",
          "    let _ = parse_ipv4addr(input);",
          "    let input = \"1.2.3.4.5\"; // More than 4 parts",
          "    let result = parse_ipv4addr(input);",
          "    assert_eq!(result, Err(ParseError::InvalidIpv4Address));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"1..2.3.4.5\";",
          "    let _ = parse_ipv4addr(input);",
          "}"
        ],
        "oracle": [
          "    let input = \"1..2.3.4.5\";",
          "    let result = parse_ipv4addr(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv4Address);"
        ],
        "code": [
          "{",
          "    let input = \"1..2.3.4.5\";",
          "    let _ = parse_ipv4addr(input);",
          "    let input = \"1..2.3.4.5\";",
          "    let result = parse_ipv4addr(input);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ParseError::InvalidIpv4Address);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]