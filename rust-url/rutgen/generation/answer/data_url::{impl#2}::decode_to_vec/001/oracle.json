[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data:text/plain;base64,!!!\";  // Invalid base64",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let _result = data_url.decode_to_vec();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert!(matches!(_result, Err(forgiving_base64::InvalidBase64)));"
        ],
        "code": [
          "{",
          "    let input = \"data:text/plain;base64,!!!\";  // Invalid base64",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let _result = data_url.decode_to_vec();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert!(matches!(_result, Err(forgiving_base64::InvalidBase64)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"\";  // Empty string",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let _result = data_url.decode_to_vec();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert!(matches!(_result, Err(forgiving_base64::InvalidBase64 { .. })));"
        ],
        "code": [
          "{",
          "    let input = \"\";  // Empty string",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let _result = data_url.decode_to_vec();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert!(matches!(_result, Err(forgiving_base64::InvalidBase64 { .. })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data:text/plain;base64,aGVsbG8gd29ybGQ=\";  // No comma present",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let _result = data_url.decode_to_vec();",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), forgiving_base64::InvalidBase64);"
        ],
        "code": [
          "{",
          "    let input = \"data:text/plain;base64,aGVsbG8gd29ybGQ=\";  // No comma present",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let _result = data_url.decode_to_vec();",
          "    assert!(_result.is_err());",
          "    assert_eq!(_result.unwrap_err(), forgiving_base64::InvalidBase64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"data::text/plain;base64,aGVsbG8gd29ybGQ=\";  // Malformed Data URL",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let _result = data_url.decode_to_vec();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.err().unwrap().is_invalid_base64(), true);"
        ],
        "code": [
          "{",
          "    let input = \"data::text/plain;base64,aGVsbG8gd29ybGQ=\";  // Malformed Data URL",
          "    let data_url = DataUrl::process(input).unwrap();",
          "    let _result = data_url.decode_to_vec();",
          "    assert_eq!(_result.is_err(), true);",
          "    assert_eq!(_result.err().unwrap().is_invalid_base64(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]