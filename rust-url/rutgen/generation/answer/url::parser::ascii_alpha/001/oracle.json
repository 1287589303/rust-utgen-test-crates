[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ascii_alpha('a');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('1');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('*');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('\\0');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('A');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('1');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('*');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('\\0');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('A');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ascii_alpha('z');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('1');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('$');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('A');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('~');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('ё');",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = ascii_alpha('z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('1');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('$');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('A');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('~');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('ё');",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ascii_alpha('A');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('0');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('!');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('\\u{100}');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let result = ascii_alpha('A');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('0');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('!');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('\\u{100}');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ascii_alpha('Z');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('1');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('%');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('!');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('A');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('`');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('¬');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('\\0');",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('1');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('%');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('!');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('A');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('`');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('¬');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('\\0');",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ascii_alpha('ñ');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('1');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('@');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('');",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = ascii_alpha('ñ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('1');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('@');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('');",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ascii_alpha('5');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('1');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('-');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let result = ascii_alpha('5');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('a');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('Z');",
          "    assert_eq!(result, true);",
          "    let result = ascii_alpha('1');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha('-');",
          "    assert_eq!(result, false);",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ascii_alpha('!');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let result = ascii_alpha('!');",
          "    assert_eq!(result, false);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = ascii_alpha(' ');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert_eq!(ascii_alpha('a'), true);",
          "    assert_eq!(ascii_alpha('Z'), true);",
          "    assert_eq!(ascii_alpha('1'), false);",
          "    assert_eq!(ascii_alpha('@'), false);",
          "    assert_eq!(ascii_alpha('-'), false);"
        ],
        "code": [
          "{",
          "    let result = ascii_alpha(' ');",
          "    assert_eq!(result, false);",
          "    assert_eq!(ascii_alpha('a'), true);",
          "    assert_eq!(ascii_alpha('Z'), true);",
          "    assert_eq!(ascii_alpha('1'), false);",
          "    assert_eq!(ascii_alpha('@'), false);",
          "    assert_eq!(ascii_alpha('-'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]