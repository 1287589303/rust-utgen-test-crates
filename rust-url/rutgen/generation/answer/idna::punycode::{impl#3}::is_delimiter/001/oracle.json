[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_char: char = '-';",
          "    let result = test_char.is_delimiter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    ",
          "    let test_char: char = 'a';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, false);",
          "    ",
          "    let test_char: char = '1';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, false);",
          "    ",
          "    let test_char: char = ' ';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, false);",
          "    ",
          "    let test_char: char = '-';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, true);",
          "    ",
          "    let test_char: char = '\\n';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let test_char: char = '-';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, true);",
          "    ",
          "    let test_char: char = 'a';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, false);",
          "    ",
          "    let test_char: char = '1';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, false);",
          "    ",
          "    let test_char: char = ' ';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, false);",
          "    ",
          "    let test_char: char = '-';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, true);",
          "    ",
          "    let test_char: char = '\\n';",
          "    let result = test_char.is_delimiter();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let test_chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];",
          "    for &c in &test_chars {",
          "        let result = c.is_delimiter();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!('a'.is_delimiter(), false);",
          "    assert_eq!('b'.is_delimiter(), false);",
          "    assert_eq!('c'.is_delimiter(), false);",
          "    assert_eq!('d'.is_delimiter(), false);",
          "    assert_eq!('e'.is_delimiter(), false);",
          "    assert_eq!('f'.is_delimiter(), false);",
          "    assert_eq!('g'.is_delimiter(), false);",
          "    assert_eq!('h'.is_delimiter(), false);",
          "    assert_eq!('i'.is_delimiter(), false);",
          "    assert_eq!('j'.is_delimiter(), false);",
          "    assert_eq!('k'.is_delimiter(), false);",
          "    assert_eq!('l'.is_delimiter(), false);",
          "    assert_eq!('m'.is_delimiter(), false);",
          "    assert_eq!('n'.is_delimiter(), false);",
          "    assert_eq!('o'.is_delimiter(), false);",
          "    assert_eq!('p'.is_delimiter(), false);",
          "    assert_eq!('q'.is_delimiter(), false);",
          "    assert_eq!('r'.is_delimiter(), false);",
          "    assert_eq!('s'.is_delimiter(), false);",
          "    assert_eq!('t'.is_delimiter(), false);",
          "    assert_eq!('u'.is_delimiter(), false);",
          "    assert_eq!('v'.is_delimiter(), false);",
          "    assert_eq!('w'.is_delimiter(), false);",
          "    assert_eq!('x'.is_delimiter(), false);",
          "    assert_eq!('y'.is_delimiter(), false);",
          "    assert_eq!('z'.is_delimiter(), false);",
          "    assert_eq!('0'.is_delimiter(), false);",
          "    assert_eq!('1'.is_delimiter(), false);",
          "    assert_eq!('2'.is_delimiter(), false);",
          "    assert_eq!('3'.is_delimiter(), false);",
          "    assert_eq!('4'.is_delimiter(), false);",
          "    assert_eq!('5'.is_delimiter(), false);",
          "    assert_eq!('6'.is_delimiter(), false);",
          "    assert_eq!('7'.is_delimiter(), false);",
          "    assert_eq!('8'.is_delimiter(), false);",
          "    assert_eq!('9'.is_delimiter(), false);",
          "    assert_eq!('-'.is_delimiter(), true);"
        ],
        "code": [
          "{",
          "    let test_chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];",
          "    for &c in &test_chars {",
          "        let result = c.is_delimiter();",
          "    }",
          "    assert_eq!('a'.is_delimiter(), false);",
          "    assert_eq!('b'.is_delimiter(), false);",
          "    assert_eq!('c'.is_delimiter(), false);",
          "    assert_eq!('d'.is_delimiter(), false);",
          "    assert_eq!('e'.is_delimiter(), false);",
          "    assert_eq!('f'.is_delimiter(), false);",
          "    assert_eq!('g'.is_delimiter(), false);",
          "    assert_eq!('h'.is_delimiter(), false);",
          "    assert_eq!('i'.is_delimiter(), false);",
          "    assert_eq!('j'.is_delimiter(), false);",
          "    assert_eq!('k'.is_delimiter(), false);",
          "    assert_eq!('l'.is_delimiter(), false);",
          "    assert_eq!('m'.is_delimiter(), false);",
          "    assert_eq!('n'.is_delimiter(), false);",
          "    assert_eq!('o'.is_delimiter(), false);",
          "    assert_eq!('p'.is_delimiter(), false);",
          "    assert_eq!('q'.is_delimiter(), false);",
          "    assert_eq!('r'.is_delimiter(), false);",
          "    assert_eq!('s'.is_delimiter(), false);",
          "    assert_eq!('t'.is_delimiter(), false);",
          "    assert_eq!('u'.is_delimiter(), false);",
          "    assert_eq!('v'.is_delimiter(), false);",
          "    assert_eq!('w'.is_delimiter(), false);",
          "    assert_eq!('x'.is_delimiter(), false);",
          "    assert_eq!('y'.is_delimiter(), false);",
          "    assert_eq!('z'.is_delimiter(), false);",
          "    assert_eq!('0'.is_delimiter(), false);",
          "    assert_eq!('1'.is_delimiter(), false);",
          "    assert_eq!('2'.is_delimiter(), false);",
          "    assert_eq!('3'.is_delimiter(), false);",
          "    assert_eq!('4'.is_delimiter(), false);",
          "    assert_eq!('5'.is_delimiter(), false);",
          "    assert_eq!('6'.is_delimiter(), false);",
          "    assert_eq!('7'.is_delimiter(), false);",
          "    assert_eq!('8'.is_delimiter(), false);",
          "    assert_eq!('9'.is_delimiter(), false);",
          "    assert_eq!('-'.is_delimiter(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let non_ascii_chars = ['Ã¡', 'Î©', 'æ±‰', 'ğŸ˜Š', 'ÃŸ'];",
          "    for &c in &non_ascii_chars {",
          "        let result = c.is_delimiter();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(non_ascii_chars[0].is_delimiter(), false);",
          "    assert_eq!(non_ascii_chars[1].is_delimiter(), false);",
          "    assert_eq!(non_ascii_chars[2].is_delimiter(), false);",
          "    assert_eq!(non_ascii_chars[3].is_delimiter(), false);",
          "    assert_eq!(non_ascii_chars[4].is_delimiter(), false);"
        ],
        "code": [
          "{",
          "    let non_ascii_chars = ['Ã¡', 'Î©', 'æ±‰', 'ğŸ˜Š', 'ÃŸ'];",
          "    for &c in &non_ascii_chars {",
          "        let result = c.is_delimiter();",
          "    }",
          "    assert_eq!(non_ascii_chars[0].is_delimiter(), false);",
          "    assert_eq!(non_ascii_chars[1].is_delimiter(), false);",
          "    assert_eq!(non_ascii_chars[2].is_delimiter(), false);",
          "    assert_eq!(non_ascii_chars[3].is_delimiter(), false);",
          "    assert_eq!(non_ascii_chars[4].is_delimiter(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let delimiter_chars = ['-', '-', '-', '-'];",
          "    for &c in &delimiter_chars {",
          "        let result = c.is_delimiter();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(delimiter_chars.iter().all(|&c| c.is_delimiter() == true));"
        ],
        "code": [
          "{",
          "    let delimiter_chars = ['-', '-', '-', '-'];",
          "    for &c in &delimiter_chars {",
          "        let result = c.is_delimiter();",
          "    }",
          "    assert!(delimiter_chars.iter().all(|&c| c.is_delimiter() == true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let edge_case_chars = ['-', '\\0', '\\u{007F}', ' '];",
          "    for &c in &edge_case_chars {",
          "        let result = c.is_delimiter();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!('-', '-'.is_delimiter());",
          "    assert_eq!('\\0', '\\0'.is_delimiter());",
          "    assert_eq!('\\u{007F}', '\\u{007F}'.is_delimiter());",
          "    assert_eq!(' ', ' '.is_delimiter());"
        ],
        "code": [
          "{",
          "    let edge_case_chars = ['-', '\\0', '\\u{007F}', ' '];",
          "    for &c in &edge_case_chars {",
          "        let result = c.is_delimiter();",
          "    }",
          "    assert_eq!('-', '-'.is_delimiter());",
          "    assert_eq!('\\0', '\\0'.is_delimiter());",
          "    assert_eq!('\\u{007F}', '\\u{007F}'.is_delimiter());",
          "    assert_eq!(' ', ' '.is_delimiter());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]