[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: char = 'a';",
          "    let result = input.char();",
          "}"
        ],
        "oracle": [
          "    let input: char = 'a';",
          "    let result = input.char();",
          "    assert_eq!(result, 'a');"
        ],
        "code": [
          "{",
          "    let input: char = 'a';",
          "    let result = input.char();",
          "    let input: char = 'a';",
          "    let result = input.char();",
          "    assert_eq!(result, 'a');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: char = 'Z';",
          "    let result = input.char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'Z');",
          "    assert!(std::panic::catch_unwind(|| input.char()).is_err());"
        ],
        "code": [
          "{",
          "    let input: char = 'Z';",
          "    let result = input.char();",
          "    assert_eq!(result, 'Z');",
          "    assert!(std::panic::catch_unwind(|| input.char()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: char = '5';",
          "    let result = input.char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '5');"
        ],
        "code": [
          "{",
          "    let input: char = '5';",
          "    let result = input.char();",
          "    assert_eq!(result, '5');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: char = ' ';",
          "    let result = input.char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, input);"
        ],
        "code": [
          "{",
          "    let input: char = ' ';",
          "    let result = input.char();",
          "    assert_eq!(result, input);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: char = ',';",
          "    let result = input.char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, input);"
        ],
        "code": [
          "{",
          "    let input: char = ',';",
          "    let result = input.char();",
          "    assert_eq!(result, input);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: char = '.';",
          "    let result = input.char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '.');",
          "    assert!(std::panic::catch_unwind(|| input.char()).is_err());"
        ],
        "code": [
          "{",
          "    let input: char = '.';",
          "    let result = input.char();",
          "    assert_eq!(result, '.');",
          "    assert!(std::panic::catch_unwind(|| input.char()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: char = '\\x00';",
          "    let result = input.char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, input);"
        ],
        "code": [
          "{",
          "    let input: char = '\\x00';",
          "    let result = input.char();",
          "    assert_eq!(result, input);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: char = '\\x7F';",
          "    let result = input.char();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '\\x7F');",
          "    assert!(!result.is_ascii());",
          "    assert!(result.is_delimiter());",
          "    assert_eq!(result.digit(), None);",
          "    assert_eq!(result.char_ascii_lower_case(), '\\x7F');"
        ],
        "code": [
          "{",
          "    let input: char = '\\x7F';",
          "    let result = input.char();",
          "    assert_eq!(result, '\\x7F');",
          "    assert!(!result.is_ascii());",
          "    assert!(result.is_delimiter());",
          "    assert_eq!(result.digit(), None);",
          "    assert_eq!(result.char_ascii_lower_case(), '\\x7F');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]