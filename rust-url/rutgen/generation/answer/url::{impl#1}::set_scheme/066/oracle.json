[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://example.net/path/to/resource\").unwrap();",
          "    let result = url.set_scheme(\"ftp\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://example.net/path/to/resource\").unwrap();",
          "    let result = url.set_scheme(\"ftp\");",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"https://example.com/path/to/resource\").unwrap();",
          "    let result = url.set_scheme(\"foo\");",
          "}"
        ],
        "oracle": [
          "    let mut url = Url::parse(\"https://example.com/path/to/resource\").unwrap();",
          "    let result = url.set_scheme(\"foo\");",
          "    assert_eq!(result, Err(()));",
          "    assert_eq!(url.as_str(), \"https://example.com/path/to/resource\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"https://example.com/path/to/resource\").unwrap();",
          "    let result = url.set_scheme(\"foo\");",
          "    let mut url = Url::parse(\"https://example.com/path/to/resource\").unwrap();",
          "    let result = url.set_scheme(\"foo\");",
          "    assert_eq!(result, Err(()));",
          "    assert_eq!(url.as_str(), \"https://example.com/path/to/resource\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ws://example.org/extra/segment\").unwrap();",
          "    let result = url.set_scheme(\"bar\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ws://example.org/extra/segment\").unwrap();",
          "    let result = url.set_scheme(\"bar\");",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"https://example.com/another/segment\").unwrap();",
          "    let result = url.set_scheme(\"baz\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"https://example.com/another/segment\").unwrap();",
          "    let result = url.set_scheme(\"baz\");",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]