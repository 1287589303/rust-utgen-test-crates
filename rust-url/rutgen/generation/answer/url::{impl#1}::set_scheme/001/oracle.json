[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"://example.net\").unwrap();",
          "    let result = url.set_scheme(\"1invalid\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"://example.net\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"://example.net\").unwrap();",
          "    let result = url.set_scheme(\"1invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"://example.net\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(url.as_str(), \"http://example.net/\");",
          "    assert_eq!(result, Err(()));",
          "    ",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\"invalid_scheme$#\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(url.as_str(), \"http://example.net/\");",
          "    assert_eq!(result, Err(()));",
          "    ",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\"ftp\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(url.as_str(), \"ftp://example.net/\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\"\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(url.as_str(), \"http://example.net/\");",
          "    assert_eq!(result, Err(()));",
          "    ",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\"invalid_scheme$#\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(url.as_str(), \"http://example.net/\");",
          "    assert_eq!(result, Err(()));",
          "    ",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\"ftp\");",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(url.as_str(), \"ftp://example.net/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\"http@\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(url.as_str(), \"http://example.net/\");",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\"http@\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(url.as_str(), \"http://example.net/\");",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\"http invalid\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"http://example.net/\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\"http invalid\");",
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"http://example.net/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\":invalid\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://example.net\").unwrap();",
          "    let result = url.set_scheme(\":invalid\");",
          "    assert_eq!(result.is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"file:///\").unwrap();",
          "    let result = url.set_scheme(\"foo\");",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"file:///\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"file:///\").unwrap();",
          "    let result = url.set_scheme(\"foo\");",
          "    assert!(result.is_err());",
          "    assert_eq!(url.as_str(), \"file:///\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"mailto:rms@example.net\").unwrap();",
          "    let result = url.set_scheme(\"http\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(url.as_str(), \"mailto:rms@example.net\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"mailto:rms@example.net\").unwrap();",
          "    let result = url.set_scheme(\"http\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(url.as_str(), \"mailto:rms@example.net\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"http://user:pass@example.net\").unwrap();",
          "    let result = url.set_scheme(\"file\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(url.as_str(), \"http://user:pass@example.net/\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"http://user:pass@example.net\").unwrap();",
          "    let result = url.set_scheme(\"file\");",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(url.as_str(), \"http://user:pass@example.net/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]