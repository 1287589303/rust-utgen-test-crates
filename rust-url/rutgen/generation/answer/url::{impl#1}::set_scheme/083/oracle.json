[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.net\").unwrap();",
          "    let result = url.set_scheme(\"http\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.net\").unwrap();",
          "    let result = url.set_scheme(\"http\");",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.net\").unwrap();",
          "    let result = url.set_scheme(\"ftp\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.net\").unwrap();",
          "    let result = url.set_scheme(\"ftp\");",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.net\").unwrap();",
          "    let result = url.set_scheme(\"file\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.net\").unwrap();",
          "    let result = url.set_scheme(\"file\");",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]