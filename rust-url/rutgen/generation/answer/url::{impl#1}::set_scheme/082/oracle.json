[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"custom://example.com/path?query#fragment\").unwrap();",
          "    url.set_scheme(\"another\").unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"another://example.com/path?query#fragment\");",
          "    assert!(url.scheme() == \"another\");",
          "    assert!(url.has_host());",
          "    assert_eq!(url.fragment(), Some(\"fragment\"));",
          "    assert_eq!(url.query(), Some(\"query\"));",
          "    assert_eq!(url.path(), \"/path\");",
          "    assert_eq!(url.port(), None);"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"custom://example.com/path?query#fragment\").unwrap();",
          "    url.set_scheme(\"another\").unwrap();",
          "    assert_eq!(url.as_str(), \"another://example.com/path?query#fragment\");",
          "    assert!(url.scheme() == \"another\");",
          "    assert!(url.has_host());",
          "    assert_eq!(url.fragment(), Some(\"fragment\"));",
          "    assert_eq!(url.query(), Some(\"query\"));",
          "    assert_eq!(url.path(), \"/path\");",
          "    assert_eq!(url.port(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.com/path?query#fragment\").unwrap();",
          "    url.set_scheme(\"gopher\").unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"gopher://example.com/path?query#fragment\");",
          "    assert!(url.has_host());",
          "    assert!(url.query_start.is_some());",
          "    assert!(url.fragment_start.is_some());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"ftp://example.com/path?query#fragment\").unwrap();",
          "    url.set_scheme(\"gopher\").unwrap();",
          "    assert_eq!(url.as_str(), \"gopher://example.com/path?query#fragment\");",
          "    assert!(url.has_host());",
          "    assert!(url.query_start.is_some());",
          "    assert!(url.fragment_start.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"mailto:user@example.com\").unwrap();",
          "    url.set_scheme(\"news\").unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"news:user@example.com\");",
          "    assert!(url.set_scheme(\"http\").is_ok());",
          "    assert_eq!(url.as_str(), \"http:user@example.com\");",
          "    assert!(url.set_scheme(\"ftp\").is_ok());",
          "    assert_eq!(url.as_str(), \"ftp:user@example.com\");",
          "    assert!(url.set_scheme(\"ws\").is_ok());",
          "    assert_eq!(url.as_str(), \"ws:user@example.com\");",
          "    assert!(url.set_scheme(\"wss\").is_ok());",
          "    assert_eq!(url.as_str(), \"wss:user@example.com\");",
          "    assert!(url.set_scheme(\"file\").is_err());",
          "    assert!(url.set_scheme(\"file://\").is_err());",
          "    assert!(url.set_scheme(\"foob\").is_err());",
          "    assert!(url.set_scheme(\"123\").is_err());",
          "    assert!(url.set_scheme(\"!invalid\").is_err());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"mailto:user@example.com\").unwrap();",
          "    url.set_scheme(\"news\").unwrap();",
          "    assert_eq!(url.as_str(), \"news:user@example.com\");",
          "    assert!(url.set_scheme(\"http\").is_ok());",
          "    assert_eq!(url.as_str(), \"http:user@example.com\");",
          "    assert!(url.set_scheme(\"ftp\").is_ok());",
          "    assert_eq!(url.as_str(), \"ftp:user@example.com\");",
          "    assert!(url.set_scheme(\"ws\").is_ok());",
          "    assert_eq!(url.as_str(), \"ws:user@example.com\");",
          "    assert!(url.set_scheme(\"wss\").is_ok());",
          "    assert_eq!(url.as_str(), \"wss:user@example.com\");",
          "    assert!(url.set_scheme(\"file\").is_err());",
          "    assert!(url.set_scheme(\"file://\").is_err());",
          "    assert!(url.set_scheme(\"foob\").is_err());",
          "    assert!(url.set_scheme(\"123\").is_err());",
          "    assert!(url.set_scheme(\"!invalid\").is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"smtp://example.com\").unwrap();",
          "    url.set_scheme(\"pop\").unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(url.as_str() == \"pop://example.com/\");",
          "    assert!(url.scheme() == \"pop\");",
          "    assert!(url.has_host());",
          "    assert!(url.port().is_none());",
          "    assert!(url.fragment().is_none());",
          "    assert!(url.query().is_none());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"smtp://example.com\").unwrap();",
          "    url.set_scheme(\"pop\").unwrap();",
          "    assert!(url.as_str() == \"pop://example.com/\");",
          "    assert!(url.scheme() == \"pop\");",
          "    assert!(url.has_host());",
          "    assert!(url.port().is_none());",
          "    assert!(url.fragment().is_none());",
          "    assert!(url.query().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"custom://example.com\").unwrap();",
          "    url.set_scheme(\"custom\").unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(url.scheme() == \"custom\");",
          "    assert!(url.port().is_none());",
          "    assert!(url.has_host());",
          "    assert_eq!(url.as_str(), \"custom://example.com/\");"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"custom://example.com\").unwrap();",
          "    url.set_scheme(\"custom\").unwrap();",
          "    assert!(url.scheme() == \"custom\");",
          "    assert!(url.port().is_none());",
          "    assert!(url.has_host());",
          "    assert_eq!(url.as_str(), \"custom://example.com/\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url::parse(\"market://example.com/path?query#fragment\").unwrap();",
          "    url.set_scheme(\"content\").unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"content://example.com/path?query#fragment\");",
          "    assert!(url.scheme() == \"content\");",
          "    assert!(url.has_host());",
          "    assert!(url.query_start.is_some());",
          "    assert!(url.fragment_start.is_some());"
        ],
        "code": [
          "{",
          "    let mut url = Url::parse(\"market://example.com/path?query#fragment\").unwrap();",
          "    url.set_scheme(\"content\").unwrap();",
          "    assert_eq!(url.as_str(), \"content://example.com/path?query#fragment\");",
          "    assert!(url.scheme() == \"content\");",
          "    assert!(url.has_host());",
          "    assert!(url.query_start.is_some());",
          "    assert!(url.fragment_start.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]