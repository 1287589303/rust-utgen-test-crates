[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ascii_set.mask[0], 1);",
          "    assert_eq!(ascii_set.mask[1], 0);",
          "    assert_eq!(ascii_set.mask[2], 0);",
          "    assert_eq!(ascii_set.mask[3], 0);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(0);",
          "    assert_eq!(ascii_set.mask[0], 1);",
          "    assert_eq!(ascii_set.mask[1], 0);",
          "    assert_eq!(ascii_set.mask[2], 0);",
          "    assert_eq!(ascii_set.mask[3], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(255);",
          "}"
        ],
        "oracle": [
          "    let result = ascii_set;",
          "    let expected_mask = [0, 0, 0, 0];",
          "    expected_mask[255 / BITS_PER_CHUNK] |= 1 << (255 % BITS_PER_CHUNK);",
          "    assert_eq!(result.mask, expected_mask);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(255);",
          "    let result = ascii_set;",
          "    let expected_mask = [0, 0, 0, 0];",
          "    expected_mask[255 / BITS_PER_CHUNK] |= 1 << (255 % BITS_PER_CHUNK);",
          "    assert_eq!(result.mask, expected_mask);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(128);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ascii_set.mask[0], 0);",
          "    assert_eq!(ascii_set.mask[1], 0);",
          "    assert_eq!(ascii_set.mask[2], 0);",
          "    assert_eq!(ascii_set.mask[3], 1 << (128 % 32));"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(128);",
          "    assert_eq!(ascii_set.mask[0], 0);",
          "    assert_eq!(ascii_set.mask[1], 0);",
          "    assert_eq!(ascii_set.mask[2], 0);",
          "    assert_eq!(ascii_set.mask[3], 1 << (128 % 32));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(7);",
          "}"
        ],
        "oracle": [
          "    ascii_set.add(7).mask[0] == (1 << (7 % BITS_PER_CHUNK));",
          "    ascii_set.add(7).mask[1] == 0;",
          "    ascii_set.add(7).mask[2] == 0;",
          "    ascii_set.add(7).mask[3] == 0;",
          "    ascii_set.add(8).mask[0] == (1 << (8 % BITS_PER_CHUNK));",
          "    ascii_set.add(8).mask[1] == 0;",
          "    ascii_set.add(8).mask[2] == 0;",
          "    ascii_set.add(8).mask[3] == 0;",
          "    ascii_set.add(32).mask[0] == (1 << (32 % BITS_PER_CHUNK));",
          "    ascii_set.add(32).mask[1] == 0;",
          "    ascii_set.add(32).mask[2] == 0;",
          "    ascii_set.add(32).mask[3] == 0;",
          "    ascii_set.add(255).mask[0] == (1 << (255 % BITS_PER_CHUNK));",
          "    ascii_set.add(255).mask[1] == 0;",
          "    ascii_set.add(255).mask[2] == 0;",
          "    ascii_set.add(255).mask[3] == 0;",
          "    ascii_set.add(0).mask[0] == (1 << (0 % BITS_PER_CHUNK));",
          "    ascii_set.add(0).mask[1] == 0;",
          "    ascii_set.add(0).mask[2] == 0;",
          "    ascii_set.add(0).mask[3] == 0;"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(7);",
          "    ascii_set.add(7).mask[0] == (1 << (7 % BITS_PER_CHUNK));",
          "    ascii_set.add(7).mask[1] == 0;",
          "    ascii_set.add(7).mask[2] == 0;",
          "    ascii_set.add(7).mask[3] == 0;",
          "    ascii_set.add(8).mask[0] == (1 << (8 % BITS_PER_CHUNK));",
          "    ascii_set.add(8).mask[1] == 0;",
          "    ascii_set.add(8).mask[2] == 0;",
          "    ascii_set.add(8).mask[3] == 0;",
          "    ascii_set.add(32).mask[0] == (1 << (32 % BITS_PER_CHUNK));",
          "    ascii_set.add(32).mask[1] == 0;",
          "    ascii_set.add(32).mask[2] == 0;",
          "    ascii_set.add(32).mask[3] == 0;",
          "    ascii_set.add(255).mask[0] == (1 << (255 % BITS_PER_CHUNK));",
          "    ascii_set.add(255).mask[1] == 0;",
          "    ascii_set.add(255).mask[2] == 0;",
          "    ascii_set.add(255).mask[3] == 0;",
          "    ascii_set.add(0).mask[0] == (1 << (0 % BITS_PER_CHUNK));",
          "    ascii_set.add(0).mask[1] == 0;",
          "    ascii_set.add(0).mask[2] == 0;",
          "    ascii_set.add(0).mask[3] == 0;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(b' ');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ascii_set mask, [0b00000000_00000000_00000000_00000001]);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(b' ');",
          "    assert_eq!(ascii_set mask, [0b00000000_00000000_00000000_00000001]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(b'!');",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ascii_set.mask[0], 0b00000001);",
          "    assert_eq!(ascii_set.mask[1], 0);",
          "    assert_eq!(ascii_set.mask[2], 0);",
          "    assert_eq!(ascii_set.mask[3], 0);",
          "    assert!(ascii_set.contains(b'!'));",
          "    assert!(!ascii_set.contains(b'a'));",
          "    assert!(ascii_set.should_percent_encode(b'!'));",
          "    assert!(!ascii_set.should_percent_encode(b'a'));",
          "    assert_eq!(ascii_set.add(b'#').mask[0], 0b00000011);",
          "    assert_eq!(ascii_set.remove(b'!').mask[0], 0);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(b'!');",
          "    assert_eq!(ascii_set.mask[0], 0b00000001);",
          "    assert_eq!(ascii_set.mask[1], 0);",
          "    assert_eq!(ascii_set.mask[2], 0);",
          "    assert_eq!(ascii_set.mask[3], 0);",
          "    assert!(ascii_set.contains(b'!'));",
          "    assert!(!ascii_set.contains(b'a'));",
          "    assert!(ascii_set.should_percent_encode(b'!'));",
          "    assert!(!ascii_set.should_percent_encode(b'a'));",
          "    assert_eq!(ascii_set.add(b'#').mask[0], 0b00000011);",
          "    assert_eq!(ascii_set.remove(b'!').mask[0], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(31);",
          "}"
        ],
        "oracle": [
          "    let expected_mask = [1, 0, 0, 0];",
          "    let ascii_set = AsciiSet::EMPTY.add(31);",
          "    assert_eq!(ascii_set.mask, expected_mask);",
          "    assert_eq!(ascii_set.mask[0] & (1 << 31 % BITS_PER_CHUNK) != 0, true);",
          "    assert_eq!(ascii_set.mask[1], 0);",
          "    assert_eq!(ascii_set.mask[2], 0);",
          "    assert_eq!(ascii_set.mask[3], 0);"
        ],
        "code": [
          "{",
          "    let ascii_set = AsciiSet::EMPTY.add(31);",
          "    let expected_mask = [1, 0, 0, 0];",
          "    let ascii_set = AsciiSet::EMPTY.add(31);",
          "    assert_eq!(ascii_set.mask, expected_mask);",
          "    assert_eq!(ascii_set.mask[0] & (1 << 31 % BITS_PER_CHUNK) != 0, true);",
          "    assert_eq!(ascii_set.mask[1], 0);",
          "    assert_eq!(ascii_set.mask[2], 0);",
          "    assert_eq!(ascii_set.mask[3], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]