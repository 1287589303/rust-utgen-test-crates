[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[b'-', b'-', b'N', b'X'];",
          "    let result = has_punycode_prefix(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let slice: &[u8] = &[b'a', b'b', b'c', b'd'];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "    let slice: &[u8] = &[b'-', b'-', b'N', b'Y'];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "    let slice: &[u8] = &[b'-', b'-', b'N', 0xDF];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, true);",
          "    let slice: &[u8] = &[b'N', b'X', b'-', b'-'];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[b'-', b'-', b'N', b'X'];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, true);",
          "    let slice: &[u8] = &[b'a', b'b', b'c', b'd'];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "    let slice: &[u8] = &[b'-', b'-', b'N', b'Y'];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "    let slice: &[u8] = &[b'-', b'-', b'N', 0xDF];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, true);",
          "    let slice: &[u8] = &[b'N', b'X', b'-', b'-'];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0xDF, 0xDF, 0xDF, 0xDF];",
          "    let result = has_punycode_prefix(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0xDF, 0xDF, 0xDF, 0xDF];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u8] = &[0x00, 0x00, 0x00, 0x00];",
          "    let result = has_punycode_prefix(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let slice: &[u8] = &[0x2D, 0x2D, 0x4E, 0x58];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, true);",
          "    let slice: &[u8] = &[0x2D, 0x2D, 0x4E, 0x57];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "    let slice: &[u8] = &[0x2D, 0x2D, 0x4E, 0x5A];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "    let slice: &[u8] = &[0x2D, 0x2D, 0x4E, 0x7A];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let slice: &[u8] = &[0x00, 0x00, 0x00, 0x00];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "    let slice: &[u8] = &[0x2D, 0x2D, 0x4E, 0x58];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, true);",
          "    let slice: &[u8] = &[0x2D, 0x2D, 0x4E, 0x57];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "    let slice: &[u8] = &[0x2D, 0x2D, 0x4E, 0x5A];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "    let slice: &[u8] = &[0x2D, 0x2D, 0x4E, 0x7A];",
          "    let result = has_punycode_prefix(slice);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]