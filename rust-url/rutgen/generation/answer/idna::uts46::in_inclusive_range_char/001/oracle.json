[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'a';",
          "    let start = 'a';",
          "    let end = 'a';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'b'), true);",
          "    assert_eq!(in_inclusive_range_char('b', 'a', 'b'), true);",
          "    assert_eq!(in_inclusive_range_char('b', 'a', 'c'), true);",
          "    assert_eq!(in_inclusive_range_char('c', 'a', 'b'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'b', 'c'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'c'), true);",
          "    assert_eq!(in_inclusive_range_char('d', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('\\0', '\\0', '\\0'), true);",
          "    assert_eq!(in_inclusive_range_char('\\0', '\\0', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('a', '\\0', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('a', '\\0', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('x', 'y', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('y', 'y', 'y'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'A', 'Z'), false);"
        ],
        "code": [
          "{",
          "    let c = 'a';",
          "    let start = 'a';",
          "    let end = 'a';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'b'), true);",
          "    assert_eq!(in_inclusive_range_char('b', 'a', 'b'), true);",
          "    assert_eq!(in_inclusive_range_char('b', 'a', 'c'), true);",
          "    assert_eq!(in_inclusive_range_char('c', 'a', 'b'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'b', 'c'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'c'), true);",
          "    assert_eq!(in_inclusive_range_char('d', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('\\0', '\\0', '\\0'), true);",
          "    assert_eq!(in_inclusive_range_char('\\0', '\\0', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('a', '\\0', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('a', '\\0', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('x', 'y', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('y', 'y', 'y'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'A', 'Z'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'a';",
          "    let start = 'a';",
          "    let end = 'z';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'b', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'y'), false);",
          "    assert_eq!(in_inclusive_range_char('m', 'a', 'm'), true);",
          "    assert_eq!(in_inclusive_range_char('x', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('!', 'a', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('y', 'x', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('b', 'c', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'A'), false);",
          "    assert_eq!(in_inclusive_range_char('z', 'A', 'Z'), false);",
          "    assert_eq!(in_inclusive_range_char('k', 'a', 'k'), true);",
          "    assert_eq!(in_inclusive_range_char('n', 'l', 'r'), true);",
          "    assert_eq!(in_inclusive_range_char('r', 'l', 'q'), false);"
        ],
        "code": [
          "{",
          "    let c = 'a';",
          "    let start = 'a';",
          "    let end = 'z';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'b', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'y'), false);",
          "    assert_eq!(in_inclusive_range_char('m', 'a', 'm'), true);",
          "    assert_eq!(in_inclusive_range_char('x', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('!', 'a', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('y', 'x', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('b', 'c', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'A'), false);",
          "    assert_eq!(in_inclusive_range_char('z', 'A', 'Z'), false);",
          "    assert_eq!(in_inclusive_range_char('k', 'a', 'k'), true);",
          "    assert_eq!(in_inclusive_range_char('n', 'l', 'r'), true);",
          "    assert_eq!(in_inclusive_range_char('r', 'l', 'q'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'z';",
          "    let start = 'a';",
          "    let end = 'z';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('m', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'y'), false);",
          "    assert_eq!(in_inclusive_range_char('b', 'c', 'd'), false);",
          "    assert_eq!(in_inclusive_range_char('y', 'a', 'y'), true);",
          "    assert_eq!(in_inclusive_range_char('!', '!', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('d', 'a', 'c'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'a'), true);"
        ],
        "code": [
          "{",
          "    let c = 'z';",
          "    let start = 'a';",
          "    let end = 'z';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('m', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'y'), false);",
          "    assert_eq!(in_inclusive_range_char('b', 'c', 'd'), false);",
          "    assert_eq!(in_inclusive_range_char('y', 'a', 'y'), true);",
          "    assert_eq!(in_inclusive_range_char('!', '!', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('d', 'a', 'c'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'a'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'm';",
          "    let start = 'a';",
          "    let end = 'z';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('m', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('c', 'a', 'f'), true);",
          "    assert_eq!(in_inclusive_range_char('b', 'a', 'b'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'b', 'c'), false);",
          "    assert_eq!(in_inclusive_range_char('d', 'e', 'f'), false);",
          "    assert_eq!(in_inclusive_range_char('x', 'y', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'y'), false);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('B', 'A', 'B'), true);",
          "    assert_eq!(in_inclusive_range_char('C', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('D', 'B', 'C'), false);",
          "    assert_eq!(in_inclusive_range_char('b', 'a', 'c'), true);",
          "    assert_eq!(in_inclusive_range_char('m', 'n', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('f', 'c', 'f'), true);",
          "    assert_eq!(in_inclusive_range_char('!', '!', '@'), true);",
          "    assert_eq!(in_inclusive_range_char(',', '!', '@'), true);",
          "    assert_eq!(in_inclusive_range_char('!', '\"', '@'), false);"
        ],
        "code": [
          "{",
          "    let c = 'm';",
          "    let start = 'a';",
          "    let end = 'z';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('m', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('c', 'a', 'f'), true);",
          "    assert_eq!(in_inclusive_range_char('b', 'a', 'b'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'b', 'c'), false);",
          "    assert_eq!(in_inclusive_range_char('d', 'e', 'f'), false);",
          "    assert_eq!(in_inclusive_range_char('x', 'y', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'a'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'y'), false);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('B', 'A', 'B'), true);",
          "    assert_eq!(in_inclusive_range_char('C', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('D', 'B', 'C'), false);",
          "    assert_eq!(in_inclusive_range_char('b', 'a', 'c'), true);",
          "    assert_eq!(in_inclusive_range_char('m', 'n', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('f', 'c', 'f'), true);",
          "    assert_eq!(in_inclusive_range_char('!', '!', '@'), true);",
          "    assert_eq!(in_inclusive_range_char(',', '!', '@'), true);",
          "    assert_eq!(in_inclusive_range_char('!', '\"', '@'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '0';",
          "    let start = '0';",
          "    let end = '9';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(in_inclusive_range_char('0', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('1', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('A', '0', '9'), false);",
          "    assert_eq!(in_inclusive_range_char('0', '0', '0'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '1', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('1', '1', '1'), true);",
          "    assert_eq!(in_inclusive_range_char('a', '0', '9'), false);",
          "    assert_eq!(in_inclusive_range_char('0', '1', '9'), false);",
          "    assert_eq!(in_inclusive_range_char('8', '0', '8'), true);",
          "    assert_eq!(in_inclusive_range_char('0', 'a', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('0', '0', 'A'), false);",
          "    assert_eq!(in_inclusive_range_char('9', '8', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('5', '0', '5'), true);",
          "    assert_eq!(in_inclusive_range_char('C', 'A', 'Z'), false);",
          "    assert_eq!(in_inclusive_range_char('5', '5', '5'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '2', '8'), false);"
        ],
        "code": [
          "{",
          "    let c = '0';",
          "    let start = '0';",
          "    let end = '9';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "    assert_eq!(in_inclusive_range_char('0', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('1', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('A', '0', '9'), false);",
          "    assert_eq!(in_inclusive_range_char('0', '0', '0'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '1', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('1', '1', '1'), true);",
          "    assert_eq!(in_inclusive_range_char('a', '0', '9'), false);",
          "    assert_eq!(in_inclusive_range_char('0', '1', '9'), false);",
          "    assert_eq!(in_inclusive_range_char('8', '0', '8'), true);",
          "    assert_eq!(in_inclusive_range_char('0', 'a', 'z'), false);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('0', '0', 'A'), false);",
          "    assert_eq!(in_inclusive_range_char('9', '8', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('5', '0', '5'), true);",
          "    assert_eq!(in_inclusive_range_char('C', 'A', 'Z'), false);",
          "    assert_eq!(in_inclusive_range_char('5', '5', '5'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '2', '8'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = '~';",
          "    let start = '!';",
          "    let end = '~';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(in_inclusive_range_char('~', '!', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('!', '!', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('~', '!', '!'), false);",
          "    assert_eq!(in_inclusive_range_char('a', '!', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('Z', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('`', '!', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('#', '!', '%'), false);",
          "    assert_eq!(in_inclusive_range_char(' ', ' ', ' '), true);",
          "    assert_eq!(in_inclusive_range_char('1', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('0', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '0', '8'), false);",
          "    assert_eq!(in_inclusive_range_char('!', '~', '~'), false);",
          "    assert_eq!(in_inclusive_range_char('!', '!', '!'), true);",
          "    assert_eq!(in_inclusive_range_char('~', '~', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('~', '!', '!'), false);"
        ],
        "code": [
          "{",
          "    let c = '~';",
          "    let start = '!';",
          "    let end = '~';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "    assert_eq!(in_inclusive_range_char('~', '!', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('!', '!', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('~', '!', '!'), false);",
          "    assert_eq!(in_inclusive_range_char('a', '!', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('Z', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('`', '!', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('#', '!', '%'), false);",
          "    assert_eq!(in_inclusive_range_char(' ', ' ', ' '), true);",
          "    assert_eq!(in_inclusive_range_char('1', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('0', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '0', '8'), false);",
          "    assert_eq!(in_inclusive_range_char('!', '~', '~'), false);",
          "    assert_eq!(in_inclusive_range_char('!', '!', '!'), true);",
          "    assert_eq!(in_inclusive_range_char('~', '~', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('~', '!', '!'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'a';",
          "    let start = 'z';",
          "    let end = 'a';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "}"
        ],
        "oracle": [
          "    assert!(!in_inclusive_range_char('a', 'z', 'a'));",
          "    assert!(in_inclusive_range_char('a', 'a', 'z'));",
          "    assert!(in_inclusive_range_char('z', 'a', 'z'));",
          "    assert!(in_inclusive_range_char('y', 'a', 'z'));",
          "    assert!(!in_inclusive_range_char('c', 'd', 'e'));",
          "    assert!(in_inclusive_range_char('d', 'd', 'e'));",
          "    assert!(in_inclusive_range_char('e', 'd', 'e'));",
          "    assert!(!in_inclusive_range_char('f', 'd', 'e'));",
          "    assert!(in_inclusive_range_char('x', 'a', 'y'));",
          "    assert!(in_inclusive_range_char('x', 'x', 'x'));",
          "    assert!(!in_inclusive_range_char('y', 'x', 'x'));",
          "    assert!(in_inclusive_range_char('A', 'A', 'Z'));",
          "    assert!(in_inclusive_range_char('Z', 'A', 'Z'));",
          "    assert!(!in_inclusive_range_char('C', 'D', 'E'));",
          "    assert!(in_inclusive_range_char('D', 'D', 'E'));",
          "    assert!(in_inclusive_range_char('E', 'D', 'E'));",
          "    assert!(!in_inclusive_range_char('F', 'D', 'E'));"
        ],
        "code": [
          "{",
          "    let c = 'a';",
          "    let start = 'z';",
          "    let end = 'a';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "    assert!(!in_inclusive_range_char('a', 'z', 'a'));",
          "    assert!(in_inclusive_range_char('a', 'a', 'z'));",
          "    assert!(in_inclusive_range_char('z', 'a', 'z'));",
          "    assert!(in_inclusive_range_char('y', 'a', 'z'));",
          "    assert!(!in_inclusive_range_char('c', 'd', 'e'));",
          "    assert!(in_inclusive_range_char('d', 'd', 'e'));",
          "    assert!(in_inclusive_range_char('e', 'd', 'e'));",
          "    assert!(!in_inclusive_range_char('f', 'd', 'e'));",
          "    assert!(in_inclusive_range_char('x', 'a', 'y'));",
          "    assert!(in_inclusive_range_char('x', 'x', 'x'));",
          "    assert!(!in_inclusive_range_char('y', 'x', 'x'));",
          "    assert!(in_inclusive_range_char('A', 'A', 'Z'));",
          "    assert!(in_inclusive_range_char('Z', 'A', 'Z'));",
          "    assert!(!in_inclusive_range_char('C', 'D', 'E'));",
          "    assert!(in_inclusive_range_char('D', 'D', 'E'));",
          "    assert!(in_inclusive_range_char('E', 'D', 'E'));",
          "    assert!(!in_inclusive_range_char('F', 'D', 'E'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'ÿ'; // ASCII limit for testing",
          "    let start = 'ÿ'; ",
          "    let end = 'ÿ'; ",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('c', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('!', ' ', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('ÿ', 'ÿ', 'ÿ'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('Z', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('b', 'a', 'c'), true);",
          "    assert_eq!(in_inclusive_range_char('d', 'a', 'c'), false);",
          "    assert_eq!(in_inclusive_range_char('ø', 'a', 'ø'), true);",
          "    assert_eq!(in_inclusive_range_char('ø', 'ø', 'ø'), true);",
          "    assert_eq!(in_inclusive_range_char('ø', 'z', 'ö'), false);",
          "    assert_eq!(in_inclusive_range_char('ä', 'a', 'ö'), true);",
          "    assert_eq!(in_inclusive_range_char('Ø', 'A', 'Z'), false);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'A'), true);",
          "    assert_eq!(in_inclusive_range_char('.', '.', '.'), true);",
          "    assert_eq!(in_inclusive_range_char(' ', ' ', ' '), true);",
          "    assert_eq!(in_inclusive_range_char('0', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('5', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('2', '0', '9'), true);"
        ],
        "code": [
          "{",
          "    let c = 'ÿ'; // ASCII limit for testing",
          "    let start = 'ÿ'; ",
          "    let end = 'ÿ'; ",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "    assert_eq!(in_inclusive_range_char('a', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('c', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('z', 'a', 'z'), true);",
          "    assert_eq!(in_inclusive_range_char('!', ' ', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('ÿ', 'ÿ', 'ÿ'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('Z', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('b', 'a', 'c'), true);",
          "    assert_eq!(in_inclusive_range_char('d', 'a', 'c'), false);",
          "    assert_eq!(in_inclusive_range_char('ø', 'a', 'ø'), true);",
          "    assert_eq!(in_inclusive_range_char('ø', 'ø', 'ø'), true);",
          "    assert_eq!(in_inclusive_range_char('ø', 'z', 'ö'), false);",
          "    assert_eq!(in_inclusive_range_char('ä', 'a', 'ö'), true);",
          "    assert_eq!(in_inclusive_range_char('Ø', 'A', 'Z'), false);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'A'), true);",
          "    assert_eq!(in_inclusive_range_char('.', '.', '.'), true);",
          "    assert_eq!(in_inclusive_range_char(' ', ' ', ' '), true);",
          "    assert_eq!(in_inclusive_range_char('0', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('9', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('5', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('2', '0', '9'), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'A';",
          "    let start = 'A';",
          "    let end = 'Z';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('B', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('Z', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'A', 'Z'), false);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'A'), true);",
          "    assert_eq!(in_inclusive_range_char('Z', 'A', 'Y'), false);",
          "    assert_eq!(in_inclusive_range_char('X', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('!', '!', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('0', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'B', 'Z'), false);",
          "    assert_eq!(in_inclusive_range_char('C', 'A', 'C'), true);",
          "    assert_eq!(in_inclusive_range_char('D', 'B', 'C'), false);",
          "    assert_eq!(in_inclusive_range_char('Z', 'Z', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('T', 'L', 'P'), false);",
          "    assert_eq!(in_inclusive_range_char('m', 'a', 'z'), false);"
        ],
        "code": [
          "{",
          "    let c = 'A';",
          "    let start = 'A';",
          "    let end = 'Z';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('B', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('Z', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('a', 'A', 'Z'), false);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'A'), true);",
          "    assert_eq!(in_inclusive_range_char('Z', 'A', 'Y'), false);",
          "    assert_eq!(in_inclusive_range_char('X', 'A', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('!', '!', '~'), true);",
          "    assert_eq!(in_inclusive_range_char('0', '0', '9'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'B', 'Z'), false);",
          "    assert_eq!(in_inclusive_range_char('C', 'A', 'C'), true);",
          "    assert_eq!(in_inclusive_range_char('D', 'B', 'C'), false);",
          "    assert_eq!(in_inclusive_range_char('Z', 'Z', 'Z'), true);",
          "    assert_eq!(in_inclusive_range_char('T', 'L', 'P'), false);",
          "    assert_eq!(in_inclusive_range_char('m', 'a', 'z'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let c = 'D';",
          "    let start = 'A';",
          "    let end = 'E';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(in_inclusive_range_char('D', 'A', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('E', 'A', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('C', 'A', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('F', 'A', 'E'), false);",
          "    assert_eq!(in_inclusive_range_char('D', 'D', 'D'), true);",
          "    assert_eq!(in_inclusive_range_char('D', 'C', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('B', 'C', 'E'), false);",
          "    assert_eq!(in_inclusive_range_char('E', 'D', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'B', 'C'), false);"
        ],
        "code": [
          "{",
          "    let c = 'D';",
          "    let start = 'A';",
          "    let end = 'E';",
          "    let _ = in_inclusive_range_char(c, start, end);",
          "    assert_eq!(in_inclusive_range_char('D', 'A', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'A', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('E', 'A', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('C', 'A', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('F', 'A', 'E'), false);",
          "    assert_eq!(in_inclusive_range_char('D', 'D', 'D'), true);",
          "    assert_eq!(in_inclusive_range_char('D', 'C', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('B', 'C', 'E'), false);",
          "    assert_eq!(in_inclusive_range_char('E', 'D', 'E'), true);",
          "    assert_eq!(in_inclusive_range_char('A', 'B', 'C'), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]