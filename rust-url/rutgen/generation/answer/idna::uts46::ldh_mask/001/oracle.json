[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'a';",
          "    let mut accu: u128 = 0u128;",
          "    if !(b >= b'a' && b <= b'z' || b >= b'0' && b <= b'9' || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "}"
        ],
        "oracle": [
          "    const fn expected_ldh_mask_case_a() -> u128 { 0u128 }",
          "    const fn expected_ldh_mask_case_z() -> u128 { 0u128 }",
          "    const fn expected_ldh_mask_case_non_ascii() -> u128 { (1u128 << 128) - 1 }",
          "    assert_eq!(ldh_mask(), expected_ldh_mask_case_a());",
          "    assert_eq!(ldh_mask(), expected_ldh_mask_case_z());",
          "    assert_eq!(ldh_mask(), expected_ldh_mask_case_non_ascii());"
        ],
        "code": [
          "{",
          "    let b: u8 = b'a';",
          "    let mut accu: u128 = 0u128;",
          "    if !(b >= b'a' && b <= b'z' || b >= b'0' && b <= b'9' || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    const fn expected_ldh_mask_case_a() -> u128 { 0u128 }",
          "    const fn expected_ldh_mask_case_z() -> u128 { 0u128 }",
          "    const fn expected_ldh_mask_case_non_ascii() -> u128 { (1u128 << 128) - 1 }",
          "    assert_eq!(ldh_mask(), expected_ldh_mask_case_a());",
          "    assert_eq!(ldh_mask(), expected_ldh_mask_case_z());",
          "    assert_eq!(ldh_mask(), expected_ldh_mask_case_non_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = b'z';",
          "    let mut accu: u128 = 0u128;",
          "    if !(b >= b'a' && b <= b'z' || b >= b'0' && b <= b'9' || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ldh_mask(), 0u128); // Testing the case where b < 128 is false, b == 128",
          "    assert_eq!(ldh_mask(), 0u128); // Testing with b == b'z'",
          "    assert_eq!(ldh_mask(), 0u128); // Testing with b == b'a'",
          "    assert_eq!(ldh_mask(), !(1u128 << b) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF); // Testing ldh_mask with full 0b1111111111111111111111111111111111111111111111111111111111111111 mask for b == b'a' through b == b'z'"
        ],
        "code": [
          "{",
          "    let b: u8 = b'z';",
          "    let mut accu: u128 = 0u128;",
          "    if !(b >= b'a' && b <= b'z' || b >= b'0' && b <= b'9' || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    assert_eq!(ldh_mask(), 0u128); // Testing the case where b < 128 is false, b == 128",
          "    assert_eq!(ldh_mask(), 0u128); // Testing with b == b'z'",
          "    assert_eq!(ldh_mask(), 0u128); // Testing with b == b'a'",
          "    assert_eq!(ldh_mask(), !(1u128 << b) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF); // Testing ldh_mask with full 0b1111111111111111111111111111111111111111111111111111111111111111 mask for b == b'a' through b == b'z'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 128;",
          "    let mut accu: u128 = 0u128;",
          "    if !(b >= b'a' && b <= b'z' || b >= b'0' && b <= b'9' || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ldh_mask(), 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
          "    assert_eq!(ldh_mask() & (1u128 << b'a'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << b'z'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << 128), 1u128 << 128);",
          "    assert_eq!(ldh_mask() & (1u128 << b'-'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << b'0'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << b'9'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << b'.'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << b'A'), 1u128 << b'A');",
          "    assert_eq!(ldh_mask() & (1u128 << b'Z'), 1u128 << b'Z');"
        ],
        "code": [
          "{",
          "    let b: u8 = 128;",
          "    let mut accu: u128 = 0u128;",
          "    if !(b >= b'a' && b <= b'z' || b >= b'0' && b <= b'9' || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    assert_eq!(ldh_mask(), 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
          "    assert_eq!(ldh_mask() & (1u128 << b'a'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << b'z'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << 128), 1u128 << 128);",
          "    assert_eq!(ldh_mask() & (1u128 << b'-'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << b'0'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << b'9'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << b'.'), 0);",
          "    assert_eq!(ldh_mask() & (1u128 << b'A'), 1u128 << b'A');",
          "    assert_eq!(ldh_mask() & (1u128 << b'Z'), 1u128 << b'Z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]