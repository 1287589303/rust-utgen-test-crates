[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let b: u8 = 127;",
          "    let mut accu = 0u128;",
          "    if !((b >= b'a' && b <= b'z') || (b >= b'0' && b <= b'9') || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "}"
        ],
        "oracle": [
          "    let b: u8 = 127;",
          "    assert_eq!(ldh_mask(), 0b1 << 127);",
          "    let b: u8 = b'-';",
          "    assert_eq!(ldh_mask(), 0);",
          "    let b: u8 = 128;",
          "    assert_eq!(ldh_mask(), 0);"
        ],
        "code": [
          "{",
          "    let b: u8 = 127;",
          "    let mut accu = 0u128;",
          "    if !((b >= b'a' && b <= b'z') || (b >= b'0' && b <= b'9') || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    let b: u8 = 127;",
          "    assert_eq!(ldh_mask(), 0b1 << 127);",
          "    let b: u8 = b'-';",
          "    assert_eq!(ldh_mask(), 0);",
          "    let b: u8 = 128;",
          "    assert_eq!(ldh_mask(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let b: u8 = 128;",
          "    let mut accu = 0u128;",
          "    if !((b >= b'a' && b <= b'z') || (b >= b'0' && b <= b'9') || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(ldh_mask(), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);  // Test with b < 128 false (b == 128) should return all bits set.",
          "    assert_eq!(ldh_mask() & (1u128 << b'-' as u8), 0);             // Test with b == b'-' should not set this bit.",
          "    assert_eq!(ldh_mask() & (1u128 << b'.' as u8), 0);            // Test with b == b'.' which should not set this bit.",
          "    assert_eq!(ldh_mask(), 0xFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFF);  // Test with all valid characters, expect mask for invalid ones excluding '-' and '.'."
        ],
        "code": [
          "{",
          "    let b: u8 = 128;",
          "    let mut accu = 0u128;",
          "    if !((b >= b'a' && b <= b'z') || (b >= b'0' && b <= b'9') || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    assert_eq!(ldh_mask(), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);  // Test with b < 128 false (b == 128) should return all bits set.",
          "    assert_eq!(ldh_mask() & (1u128 << b'-' as u8), 0);             // Test with b == b'-' should not set this bit.",
          "    assert_eq!(ldh_mask() & (1u128 << b'.' as u8), 0);            // Test with b == b'.' which should not set this bit.",
          "    assert_eq!(ldh_mask(), 0xFFFFFFFFFFFFFFF0FFFFFFFFFFFFFFFF);  // Test with all valid characters, expect mask for invalid ones excluding '-' and '.'.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]