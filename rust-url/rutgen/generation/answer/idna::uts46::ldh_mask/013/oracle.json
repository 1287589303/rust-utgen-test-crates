[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    // This test invokes the ldh_mask function",
          "    // and will verify behavior when b reaches 128.",
          "    let result = ldh_mask();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);  // Check if all bits for b < 128 are set.",
          "    assert_eq!(result & (1 << b'a'), 0);                       // Assert that bit for lowercase 'a' is not set.",
          "    assert_eq!(result & (1 << b'z'), 0);                       // Assert that bit for lowercase 'z' is not set.",
          "    assert_eq!(result & (1 << b'0'), 0);                       // Assert that bit for digit '0' is not set.",
          "    assert_eq!(result & (1 << b'9'), 0);                       // Assert that bit for digit '9' is not set.",
          "    assert_eq!(result & (1 << b'-'), 0);                       // Assert that bit for '-' is not set.",
          "    assert_eq!(result & (1 << b'.'), 0);                       // Assert that bit for '.' is not set.",
          "    assert_eq!(result & (1 << 128), 0);                        // Ensure that no bits are set for b >= 128."
        ],
        "code": [
          "{",
          "    // This test invokes the ldh_mask function",
          "    // and will verify behavior when b reaches 128.",
          "    let result = ldh_mask();",
          "    assert_eq!(result, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);  // Check if all bits for b < 128 are set.",
          "    assert_eq!(result & (1 << b'a'), 0);                       // Assert that bit for lowercase 'a' is not set.",
          "    assert_eq!(result & (1 << b'z'), 0);                       // Assert that bit for lowercase 'z' is not set.",
          "    assert_eq!(result & (1 << b'0'), 0);                       // Assert that bit for digit '0' is not set.",
          "    assert_eq!(result & (1 << b'9'), 0);                       // Assert that bit for digit '9' is not set.",
          "    assert_eq!(result & (1 << b'-'), 0);                       // Assert that bit for '-' is not set.",
          "    assert_eq!(result & (1 << b'.'), 0);                       // Assert that bit for '.' is not set.",
          "    assert_eq!(result & (1 << 128), 0);                        // Ensure that no bits are set for b >= 128.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    // Test the case where b is a non-lowercase ASCII character.",
          "    // Assume we evaluate the mask for b = 65 ('A') which is outside of the b'a'..=b'z' range.",
          "    let mut accu = 0u128;",
          "    let b = 65; // 'A'",
          "    if !((b >= b'a' && b <= b'z') || (b >= b'0' && b <= b'9') || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    // We call ldh_mask here for proper function invocation",
          "    let result = ldh_mask();",
          "}"
        ],
        "oracle": [
          "    accu |= 1u128 << 65;",
          "    assert_eq!(result & (1u128 << 65), 1u128 << 65);",
          "    assert_eq!(result & ldh_mask(), result);",
          "    assert!(result & (1u128 << 65) != 0);",
          "    assert_eq!(result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, result);",
          "    assert!(result & (1u128 << 128) == 0);"
        ],
        "code": [
          "{",
          "    // Test the case where b is a non-lowercase ASCII character.",
          "    // Assume we evaluate the mask for b = 65 ('A') which is outside of the b'a'..=b'z' range.",
          "    let mut accu = 0u128;",
          "    let b = 65; // 'A'",
          "    if !((b >= b'a' && b <= b'z') || (b >= b'0' && b <= b'9') || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    // We call ldh_mask here for proper function invocation",
          "    let result = ldh_mask();",
          "    accu |= 1u128 << 65;",
          "    assert_eq!(result & (1u128 << 65), 1u128 << 65);",
          "    assert_eq!(result & ldh_mask(), result);",
          "    assert!(result & (1u128 << 65) != 0);",
          "    assert_eq!(result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, result);",
          "    assert!(result & (1u128 << 128) == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    // Test the case where b is a digit, ",
          "    // specifically '1' (b = 49).",
          "    let mut accu = 0u128;",
          "    let b = 49; // '1'",
          "    if !((b >= b'a' && b <= b'z') || (b >= b'0' && b <= b'9') || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    // We call ldh_mask here for proper function invocation",
          "    let result = ldh_mask();",
          "}"
        ],
        "oracle": [
          "    let result = ldh_mask(); assert_eq!(result, 0x00000000000000000000000000000700);",
          "    let result = ldh_mask(); assert_eq!(result, 0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111);",
          "    let result = ldh_mask(); assert_ne!(result, 0);",
          "    let mut accu = 0u128; let b = 128; if !(b < 128) { accu |= 1u128 << b; } assert_eq!(accu, 0);"
        ],
        "code": [
          "{",
          "    // Test the case where b is a digit, ",
          "    // specifically '1' (b = 49).",
          "    let mut accu = 0u128;",
          "    let b = 49; // '1'",
          "    if !((b >= b'a' && b <= b'z') || (b >= b'0' && b <= b'9') || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    // We call ldh_mask here for proper function invocation",
          "    let result = ldh_mask();",
          "    let result = ldh_mask(); assert_eq!(result, 0x00000000000000000000000000000700);",
          "    let result = ldh_mask(); assert_eq!(result, 0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111);",
          "    let result = ldh_mask(); assert_ne!(result, 0);",
          "    let mut accu = 0u128; let b = 128; if !(b < 128) { accu |= 1u128 << b; } assert_eq!(accu, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    // Test the case where b is the hyphen character.",
          "    // Here b = 45 ('-').",
          "    let mut accu = 0u128;",
          "    let b = 45; // '-'",
          "    if !((b >= b'a' && b <= b'z') || (b >= b'0' && b <= b'9') || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    // We call ldh_mask here for proper function invocation",
          "    let result = ldh_mask();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0x0000000000000000000000000000000000000000000000000000000000000000);",
          "    assert!(result & (1u128 << 45) != 0);",
          "    assert!(result & (1u128 << 0) == 0);",
          "    assert!(result & (1u128 << 1) == 0);",
          "    assert!(result & (1u128 << 2) == 0);",
          "    assert!(result & (1u128 << 3) == 0);",
          "    assert!(result & (1u128 << 4) == 0);",
          "    assert!(result & (1u128 << 5) == 0);",
          "    assert!(result & (1u128 << 6) == 0);",
          "    assert!(result & (1u128 << 7) == 0);",
          "    assert!(result & (1u128 << 8) == 0);",
          "    assert!(result & (1u128 << 9) == 0);",
          "    assert!(result & (1u128 << 10) == 0);",
          "    assert!(result & (1u128 << 11) == 0);",
          "    assert!(result & (1u128 << 12) == 0);",
          "    assert!(result & (1u128 << 13) == 0);",
          "    assert!(result & (1u128 << 14) == 0);",
          "    assert!(result & (1u128 << 15) == 0);",
          "    assert!(result & (1u128 << 16) == 0);",
          "    assert!(result & (1u128 << 17) == 0);",
          "    assert!(result & (1u128 << 18) == 0);",
          "    assert!(result & (1u128 << 19) == 0);",
          "    assert!(result & (1u128 << 20) == 0);",
          "    assert!(result & (1u128 << 21) == 0);",
          "    assert!(result & (1u128 << 22) == 0);",
          "    assert!(result & (1u128 << 23) == 0);",
          "    assert!(result & (1u128 << 24) == 0);",
          "    assert!(result & (1u128 << 25) == 0);",
          "    assert!(result & (1u128 << 26) == 0);",
          "    assert!(result & (1u128 << 27) == 0);",
          "    assert!(result & (1u128 << 28) == 0);",
          "    assert!(result & (1u128 << 29) == 0);",
          "    assert!(result & (1u128 << 30) == 0);",
          "    assert!(result & (1u128 << 31) == 0);",
          "    assert!(result & (1u128 << 32) == 0);",
          "    assert!(result & (1u128 << 33) == 0);",
          "    assert!(result & (1u128 << 34) == 0);",
          "    assert!(result & (1u128 << 35) == 0);",
          "    assert!(result & (1u128 << 36) == 0);",
          "    assert!(result & (1u128 << 37) == 0);",
          "    assert!(result & (1u128 << 38) == 0);",
          "    assert!(result & (1u128 << 39) == 0);",
          "    assert!(result & (1u128 << 40) == 0);",
          "    assert!(result & (1u128 << 41) == 0);",
          "    assert!(result & (1u128 << 42) == 0);",
          "    assert!(result & (1u128 << 43) == 0);",
          "    assert!(result & (1u128 << 44) == 0);",
          "    assert!(result & (1u128 << 45) != 0);",
          "    assert!(result & (1u128 << 46) == 0);",
          "    assert!(result & (1u128 << 47) == 0);",
          "    assert!(result & (1u128 << 48) == 0);",
          "    assert!(result & (1u128 << 49) == 0);",
          "    assert!(result & (1u128 << 50) == 0);",
          "    assert!(result & (1u128 << 51) == 0);",
          "    assert!(result & (1u128 << 52) == 0);",
          "    assert!(result & (1u128 << 53) == 0);",
          "    assert!(result & (1u128 << 54) == 0);",
          "    assert!(result & (1u128 << 55) == 0);",
          "    assert!(result & (1u128 << 56) == 0);",
          "    assert!(result & (1u128 << 57) == 0);",
          "    assert!(result & (1u128 << 58) == 0);",
          "    assert!(result & (1u128 << 59) == 0);",
          "    assert!(result & (1u128 << 60) == 0);",
          "    assert!(result & (1u128 << 61) == 0);",
          "    assert!(result & (1u128 << 62) == 0);",
          "    assert!(result & (1u128 << 63) == 0);",
          "    assert!(result & (1u128 << 64) == 0);",
          "    assert!(result & (1u128 << 65) == 0);",
          "    assert!(result & (1u128 << 66) == 0);",
          "    assert!(result & (1u128 << 67) == 0);",
          "    assert!(result & (1u128 << 68) == 0);",
          "    assert!(result & (1u128 << 69) == 0);",
          "    assert!(result & (1u128 << 70) == 0);",
          "    assert!(result & (1u128 << 71) == 0);",
          "    assert!(result & (1u128 << 72) == 0);",
          "    assert!(result & (1u128 << 73) == 0);",
          "    assert!(result & (1u128 << 74) == 0);",
          "    assert!(result & (1u128 << 75) == 0);",
          "    assert!(result & (1u128 << 76) == 0);",
          "    assert!(result & (1u128 << 77) == 0);",
          "    assert!(result & (1u128 << 78) == 0);",
          "    assert!(result & (1u128 << 79) == 0);",
          "    assert!(result & (1u128 << 80) == 0);",
          "    assert!(result & (1u128 << 81) == 0);",
          "    assert!(result & (1u128 << 82) == 0);",
          "    assert!(result & (1u128 << 83) == 0);",
          "    assert!(result & (1u128 << 84) == 0);",
          "    assert!(result & (1u128 << 85) == 0);",
          "    assert!(result & (1u128 << 86) == 0);",
          "    assert!(result & (1u128 << 87) == 0);",
          "    assert!(result & (1u128 << 88) == 0);",
          "    assert!(result & (1u128 << 89) == 0);",
          "    assert!(result & (1u128 << 90) == 0);",
          "    assert!(result & (1u128 << 91) == 0);",
          "    assert!(result & (1u128 << 92) == 0);",
          "    assert!(result & (1u128 << 93) == 0);",
          "    assert!(result & (1u128 << 94) == 0);",
          "    assert!(result & (1u128 << 95) == 0);",
          "    assert!(result & (1u128 << 96) == 0);",
          "    assert!(result & (1u128 << 97) == 0);",
          "    assert!(result & (1u128 << 98) == 0);",
          "    assert!(result & (1u128 << 99) == 0);",
          "    assert!(result & (1u128 << 100) == 0);",
          "    assert!(result & (1u128 << 101) == 0);",
          "    assert!(result & (1u128 << 102) == 0);",
          "    assert!(result & (1u128 << 103) == 0);",
          "    assert!(result & (1u128 << 104) == 0);",
          "    assert!(result & (1u128 << 105) == 0);",
          "    assert!(result & (1u128 << 106) == 0);",
          "    assert!(result & (1u128 << 107) == 0);",
          "    assert!(result & (1u128 << 108) == 0);",
          "    assert!(result & (1u128 << 109) == 0);",
          "    assert!(result & (1u128 << 110) == 0);",
          "    assert!(result & (1u128 << 111) == 0);",
          "    assert!(result & (1u128 << 112) == 0);",
          "    assert!(result & (1u128 << 113) == 0);",
          "    assert!(result & (1u128 << 114) == 0);",
          "    assert!(result & (1u128 << 115) == 0);",
          "    assert!(result & (1u128 << 116) == 0);",
          "    assert!(result & (1u128 << 117) == 0);",
          "    assert!(result & (1u128 << 118) == 0);",
          "    assert!(result & (1u128 << 119) == 0);",
          "    assert!(result & (1u128 << 120) == 0);",
          "    assert!(result & (1u128 << 121) == 0);",
          "    assert!(result & (1u128 << 122) == 0);",
          "    assert!(result & (1u128 << 123) == 0);",
          "    assert!(result & (1u128 << 124) == 0);",
          "    assert!(result & (1u128 << 125) == 0);",
          "    assert!(result & (1u128 << 126) == 0);",
          "    assert!(result & (1u128 << 127) == 0);"
        ],
        "code": [
          "{",
          "    // Test the case where b is the hyphen character.",
          "    // Here b = 45 ('-').",
          "    let mut accu = 0u128;",
          "    let b = 45; // '-'",
          "    if !((b >= b'a' && b <= b'z') || (b >= b'0' && b <= b'9') || b == b'-' || b == b'.') {",
          "        accu |= 1u128 << b;",
          "    }",
          "    // We call ldh_mask here for proper function invocation",
          "    let result = ldh_mask();",
          "    assert_eq!(result, 0x0000000000000000000000000000000000000000000000000000000000000000);",
          "    assert!(result & (1u128 << 45) != 0);",
          "    assert!(result & (1u128 << 0) == 0);",
          "    assert!(result & (1u128 << 1) == 0);",
          "    assert!(result & (1u128 << 2) == 0);",
          "    assert!(result & (1u128 << 3) == 0);",
          "    assert!(result & (1u128 << 4) == 0);",
          "    assert!(result & (1u128 << 5) == 0);",
          "    assert!(result & (1u128 << 6) == 0);",
          "    assert!(result & (1u128 << 7) == 0);",
          "    assert!(result & (1u128 << 8) == 0);",
          "    assert!(result & (1u128 << 9) == 0);",
          "    assert!(result & (1u128 << 10) == 0);",
          "    assert!(result & (1u128 << 11) == 0);",
          "    assert!(result & (1u128 << 12) == 0);",
          "    assert!(result & (1u128 << 13) == 0);",
          "    assert!(result & (1u128 << 14) == 0);",
          "    assert!(result & (1u128 << 15) == 0);",
          "    assert!(result & (1u128 << 16) == 0);",
          "    assert!(result & (1u128 << 17) == 0);",
          "    assert!(result & (1u128 << 18) == 0);",
          "    assert!(result & (1u128 << 19) == 0);",
          "    assert!(result & (1u128 << 20) == 0);",
          "    assert!(result & (1u128 << 21) == 0);",
          "    assert!(result & (1u128 << 22) == 0);",
          "    assert!(result & (1u128 << 23) == 0);",
          "    assert!(result & (1u128 << 24) == 0);",
          "    assert!(result & (1u128 << 25) == 0);",
          "    assert!(result & (1u128 << 26) == 0);",
          "    assert!(result & (1u128 << 27) == 0);",
          "    assert!(result & (1u128 << 28) == 0);",
          "    assert!(result & (1u128 << 29) == 0);",
          "    assert!(result & (1u128 << 30) == 0);",
          "    assert!(result & (1u128 << 31) == 0);",
          "    assert!(result & (1u128 << 32) == 0);",
          "    assert!(result & (1u128 << 33) == 0);",
          "    assert!(result & (1u128 << 34) == 0);",
          "    assert!(result & (1u128 << 35) == 0);",
          "    assert!(result & (1u128 << 36) == 0);",
          "    assert!(result & (1u128 << 37) == 0);",
          "    assert!(result & (1u128 << 38) == 0);",
          "    assert!(result & (1u128 << 39) == 0);",
          "    assert!(result & (1u128 << 40) == 0);",
          "    assert!(result & (1u128 << 41) == 0);",
          "    assert!(result & (1u128 << 42) == 0);",
          "    assert!(result & (1u128 << 43) == 0);",
          "    assert!(result & (1u128 << 44) == 0);",
          "    assert!(result & (1u128 << 45) != 0);",
          "    assert!(result & (1u128 << 46) == 0);",
          "    assert!(result & (1u128 << 47) == 0);",
          "    assert!(result & (1u128 << 48) == 0);",
          "    assert!(result & (1u128 << 49) == 0);",
          "    assert!(result & (1u128 << 50) == 0);",
          "    assert!(result & (1u128 << 51) == 0);",
          "    assert!(result & (1u128 << 52) == 0);",
          "    assert!(result & (1u128 << 53) == 0);",
          "    assert!(result & (1u128 << 54) == 0);",
          "    assert!(result & (1u128 << 55) == 0);",
          "    assert!(result & (1u128 << 56) == 0);",
          "    assert!(result & (1u128 << 57) == 0);",
          "    assert!(result & (1u128 << 58) == 0);",
          "    assert!(result & (1u128 << 59) == 0);",
          "    assert!(result & (1u128 << 60) == 0);",
          "    assert!(result & (1u128 << 61) == 0);",
          "    assert!(result & (1u128 << 62) == 0);",
          "    assert!(result & (1u128 << 63) == 0);",
          "    assert!(result & (1u128 << 64) == 0);",
          "    assert!(result & (1u128 << 65) == 0);",
          "    assert!(result & (1u128 << 66) == 0);",
          "    assert!(result & (1u128 << 67) == 0);",
          "    assert!(result & (1u128 << 68) == 0);",
          "    assert!(result & (1u128 << 69) == 0);",
          "    assert!(result & (1u128 << 70) == 0);",
          "    assert!(result & (1u128 << 71) == 0);",
          "    assert!(result & (1u128 << 72) == 0);",
          "    assert!(result & (1u128 << 73) == 0);",
          "    assert!(result & (1u128 << 74) == 0);",
          "    assert!(result & (1u128 << 75) == 0);",
          "    assert!(result & (1u128 << 76) == 0);",
          "    assert!(result & (1u128 << 77) == 0);",
          "    assert!(result & (1u128 << 78) == 0);",
          "    assert!(result & (1u128 << 79) == 0);",
          "    assert!(result & (1u128 << 80) == 0);",
          "    assert!(result & (1u128 << 81) == 0);",
          "    assert!(result & (1u128 << 82) == 0);",
          "    assert!(result & (1u128 << 83) == 0);",
          "    assert!(result & (1u128 << 84) == 0);",
          "    assert!(result & (1u128 << 85) == 0);",
          "    assert!(result & (1u128 << 86) == 0);",
          "    assert!(result & (1u128 << 87) == 0);",
          "    assert!(result & (1u128 << 88) == 0);",
          "    assert!(result & (1u128 << 89) == 0);",
          "    assert!(result & (1u128 << 90) == 0);",
          "    assert!(result & (1u128 << 91) == 0);",
          "    assert!(result & (1u128 << 92) == 0);",
          "    assert!(result & (1u128 << 93) == 0);",
          "    assert!(result & (1u128 << 94) == 0);",
          "    assert!(result & (1u128 << 95) == 0);",
          "    assert!(result & (1u128 << 96) == 0);",
          "    assert!(result & (1u128 << 97) == 0);",
          "    assert!(result & (1u128 << 98) == 0);",
          "    assert!(result & (1u128 << 99) == 0);",
          "    assert!(result & (1u128 << 100) == 0);",
          "    assert!(result & (1u128 << 101) == 0);",
          "    assert!(result & (1u128 << 102) == 0);",
          "    assert!(result & (1u128 << 103) == 0);",
          "    assert!(result & (1u128 << 104) == 0);",
          "    assert!(result & (1u128 << 105) == 0);",
          "    assert!(result & (1u128 << 106) == 0);",
          "    assert!(result & (1u128 << 107) == 0);",
          "    assert!(result & (1u128 << 108) == 0);",
          "    assert!(result & (1u128 << 109) == 0);",
          "    assert!(result & (1u128 << 110) == 0);",
          "    assert!(result & (1u128 << 111) == 0);",
          "    assert!(result & (1u128 << 112) == 0);",
          "    assert!(result & (1u128 << 113) == 0);",
          "    assert!(result & (1u128 << 114) == 0);",
          "    assert!(result & (1u128 << 115) == 0);",
          "    assert!(result & (1u128 << 116) == 0);",
          "    assert!(result & (1u128 << 117) == 0);",
          "    assert!(result & (1u128 << 118) == 0);",
          "    assert!(result & (1u128 << 119) == 0);",
          "    assert!(result & (1u128 << 120) == 0);",
          "    assert!(result & (1u128 << 121) == 0);",
          "    assert!(result & (1u128 << 122) == 0);",
          "    assert!(result & (1u128 << 123) == 0);",
          "    assert!(result & (1u128 << 124) == 0);",
          "    assert!(result & (1u128 << 125) == 0);",
          "    assert!(result & (1u128 << 126) == 0);",
          "    assert!(result & (1u128 << 127) == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]