[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    percent_encode(0, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"%00\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    percent_encode(0, &mut output);",
          "    assert_eq!(output, \"%00\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    percent_encode(255, &mut output);",
          "}"
        ],
        "oracle": [
          "    let mut output = String::new();",
          "    percent_encode(255, &mut output);",
          "    assert_eq!(output, \"%FF\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(0, &mut output);",
          "    assert_eq!(output, \"%00\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(1, &mut output);",
          "    assert_eq!(output, \"%01\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(16, &mut output);",
          "    assert_eq!(output, \"%10\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(255, &mut output);",
          "    assert_eq!(output, \"%FF\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(127, &mut output);",
          "    assert_eq!(output, \"%7F\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(32, &mut output);",
          "    assert_eq!(output, \"%20\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(64, &mut output);",
          "    assert_eq!(output, \"%40\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(128, &mut output);",
          "    assert_eq!(output, \"%80\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    percent_encode(255, &mut output);",
          "    let mut output = String::new();",
          "    percent_encode(255, &mut output);",
          "    assert_eq!(output, \"%FF\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(0, &mut output);",
          "    assert_eq!(output, \"%00\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(1, &mut output);",
          "    assert_eq!(output, \"%01\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(16, &mut output);",
          "    assert_eq!(output, \"%10\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(255, &mut output);",
          "    assert_eq!(output, \"%FF\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(127, &mut output);",
          "    assert_eq!(output, \"%7F\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(32, &mut output);",
          "    assert_eq!(output, \"%20\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(64, &mut output);",
          "    assert_eq!(output, \"%40\");",
          "    ",
          "    let mut output = String::new();",
          "    percent_encode(128, &mut output);",
          "    assert_eq!(output, \"%80\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    percent_encode(128, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"%80\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    percent_encode(128, &mut output);",
          "    assert_eq!(output, \"%80\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    percent_encode(1, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"%01\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    percent_encode(1, &mut output);",
          "    assert_eq!(output, \"%01\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut output = String::new();",
          "    percent_encode(254, &mut output);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"%FE\");"
        ],
        "code": [
          "{",
          "    let mut output = String::new();",
          "    percent_encode(254, &mut output);",
          "    assert_eq!(output, \"%FE\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]