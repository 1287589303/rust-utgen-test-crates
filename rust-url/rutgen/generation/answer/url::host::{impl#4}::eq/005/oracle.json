[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ip1 = Ipv4Addr::new(0, 0, 0, 0);",
          "    let ip2 = Ipv4Addr::new(0, 0, 0, 0);",
          "    let host1 = Host::Ipv4(ip1);",
          "    let host2 = Host::Ipv4(ip2);",
          "    let _ = host1.eq(&host2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host1.eq(&host2), true);"
        ],
        "code": [
          "{",
          "    let ip1 = Ipv4Addr::new(0, 0, 0, 0);",
          "    let ip2 = Ipv4Addr::new(0, 0, 0, 0);",
          "    let host1 = Host::Ipv4(ip1);",
          "    let host2 = Host::Ipv4(ip2);",
          "    let _ = host1.eq(&host2);",
          "    assert_eq!(host1.eq(&host2), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ip1 = Ipv4Addr::new(255, 255, 255, 255);",
          "    let ip2 = Ipv4Addr::new(255, 255, 255, 255);",
          "    let host1 = Host::Ipv4(ip1);",
          "    let host2 = Host::Ipv4(ip2);",
          "    let _ = host1.eq(&host2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host1.eq(&host2), true);"
        ],
        "code": [
          "{",
          "    let ip1 = Ipv4Addr::new(255, 255, 255, 255);",
          "    let ip2 = Ipv4Addr::new(255, 255, 255, 255);",
          "    let host1 = Host::Ipv4(ip1);",
          "    let host2 = Host::Ipv4(ip2);",
          "    let _ = host1.eq(&host2);",
          "    assert_eq!(host1.eq(&host2), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ip1 = Ipv4Addr::new(128, 0, 0, 1);",
          "    let ip2 = Ipv4Addr::new(128, 0, 0, 1);",
          "    let host1 = Host::Ipv4(ip1);",
          "    let host2 = Host::Ipv4(ip2);",
          "    let _ = host1.eq(&host2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host1.eq(&host2), true);"
        ],
        "code": [
          "{",
          "    let ip1 = Ipv4Addr::new(128, 0, 0, 1);",
          "    let ip2 = Ipv4Addr::new(128, 0, 0, 1);",
          "    let host1 = Host::Ipv4(ip1);",
          "    let host2 = Host::Ipv4(ip2);",
          "    let _ = host1.eq(&host2);",
          "    assert_eq!(host1.eq(&host2), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ip1 = Ipv4Addr::new(192, 168, 1, 1);",
          "    let ip2 = Ipv4Addr::new(10, 0, 0, 1);",
          "    let host1 = Host::Ipv4(ip1);",
          "    let host2 = Host::Ipv4(ip2);",
          "    let _ = host1.eq(&host2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host1.eq(&host2), false);"
        ],
        "code": [
          "{",
          "    let ip1 = Ipv4Addr::new(192, 168, 1, 1);",
          "    let ip2 = Ipv4Addr::new(10, 0, 0, 1);",
          "    let host1 = Host::Ipv4(ip1);",
          "    let host2 = Host::Ipv4(ip2);",
          "    let _ = host1.eq(&host2);",
          "    assert_eq!(host1.eq(&host2), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ip1 = Ipv4Addr::new(10, 0, 0, 1);",
          "    let ip2 = Ipv4Addr::new(172, 16, 0, 1);",
          "    let host1 = Host::Ipv4(ip1);",
          "    let host2 = Host::Ipv4(ip2);",
          "    let _ = host1.eq(&host2);",
          "}"
        ],
        "oracle": [
          "    assert!(!host1.eq(&host2));"
        ],
        "code": [
          "{",
          "    let ip1 = Ipv4Addr::new(10, 0, 0, 1);",
          "    let ip2 = Ipv4Addr::new(172, 16, 0, 1);",
          "    let host1 = Host::Ipv4(ip1);",
          "    let host2 = Host::Ipv4(ip2);",
          "    let _ = host1.eq(&host2);",
          "    assert!(!host1.eq(&host2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]