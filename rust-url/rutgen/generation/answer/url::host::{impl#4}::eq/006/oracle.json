[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host_a = Host::Domain(String::from(\"example.com\"));",
          "    let host_b = Host::Domain(String::from(\"test.com\"));",
          "    let _ = host_a.eq(&host_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host_a.eq(&host_b), false);"
        ],
        "code": [
          "{",
          "    let host_a = Host::Domain(String::from(\"example.com\"));",
          "    let host_b = Host::Domain(String::from(\"test.com\"));",
          "    let _ = host_a.eq(&host_b);",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host_a = Host::Domain(String::from(\"example.com\"));",
          "    let host_b = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let _ = host_a.eq(&host_b);",
          "}"
        ],
        "oracle": [
          "    let host_a = Host::Domain(String::from(\"example.com\"));",
          "    let host_b = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    assert_eq!(host_a.eq(&host_b), false);"
        ],
        "code": [
          "{",
          "    let host_a = Host::Domain(String::from(\"example.com\"));",
          "    let host_b = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let _ = host_a.eq(&host_b);",
          "    let host_a = Host::Domain(String::from(\"example.com\"));",
          "    let host_b = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host_a = Host::Domain(String::from(\"example.com\"));",
          "    let host_b = Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0dB8, 0, 0, 0, 0, 0x1));",
          "    let _ = host_a.eq(&host_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host_a.eq(&host_b), false);"
        ],
        "code": [
          "{",
          "    let host_a = Host::Domain(String::from(\"example.com\"));",
          "    let host_b = Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0dB8, 0, 0, 0, 0, 0x1));",
          "    let _ = host_a.eq(&host_b);",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host_a = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let host_b = Host::Ipv4(Ipv4Addr::new(10, 0, 0, 1));",
          "    let _ = host_a.eq(&host_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host_a.eq(&host_b), false);"
        ],
        "code": [
          "{",
          "    let host_a = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let host_b = Host::Ipv4(Ipv4Addr::new(10, 0, 0, 1));",
          "    let _ = host_a.eq(&host_b);",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host_a = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let host_b = Host::Domain(String::from(\"example.com\"));",
          "    let _ = host_a.eq(&host_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host_a.eq(&host_b), false);"
        ],
        "code": [
          "{",
          "    let host_a = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let host_b = Host::Domain(String::from(\"example.com\"));",
          "    let _ = host_a.eq(&host_b);",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host_a = Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0D, 0xB8, 0, 0, 0, 1));",
          "    let host_b = Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0D, 0xB8, 0, 0, 0, 2));",
          "    let _ = host_a.eq(&host_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host_a.eq(&host_b), false);"
        ],
        "code": [
          "{",
          "    let host_a = Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0D, 0xB8, 0, 0, 0, 1));",
          "    let host_b = Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0D, 0xB8, 0, 0, 0, 2));",
          "    let _ = host_a.eq(&host_b);",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host_a = Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0D, 0xB8, 0, 0, 0, 1));",
          "    let host_b = Host::Domain(String::from(\"example.com\"));",
          "    let _ = host_a.eq(&host_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host_a.eq(&host_b), false);"
        ],
        "code": [
          "{",
          "    let host_a = Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0D, 0xB8, 0, 0, 0, 1));",
          "    let host_b = Host::Domain(String::from(\"example.com\"));",
          "    let _ = host_a.eq(&host_b);",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host_a = Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0D, 0xB8, 0, 0, 0, 1));",
          "    let host_b = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let _ = host_a.eq(&host_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host_a.eq(&host_b), false);"
        ],
        "code": [
          "{",
          "    let host_a = Host::Ipv6(Ipv6Addr::new(0x20, 0x01, 0x0D, 0xB8, 0, 0, 0, 1));",
          "    let host_b = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let _ = host_a.eq(&host_b);",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host_a = Host::Domain(String::from(\"\"));",
          "    let host_b = Host::Domain(String::from(\"not_empty.com\"));",
          "    let _ = host_a.eq(&host_b);",
          "}"
        ],
        "oracle": [
          "    let host_a = Host::Domain(String::from(\"different.com\"));",
          "    let host_b = Host::Domain(String::from(\"another.com\"));",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "    let host_a = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let host_b = Host::Ipv4(Ipv4Addr::new(10, 0, 0, 1));",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "    let host_a = Host::Ipv6(Ipv6Addr::new(0x2001, 0x0db8, 0x85a3, 0x0000, 0x0000, 0x8a2e, 0x0370, 0x7334));",
          "    let host_b = Host::Ipv6(Ipv6Addr::new(0x3001, 0x0db8, 0x85a3, 0x0000, 0x0000, 0x8a2e, 0x0370, 0x1234));",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "    let host_a = Host::Domain(String::from(\"%E2%82%AC\"));",
          "    let host_b = Host::Domain(String::from(\"Euro%20Sign\"));",
          "    assert_eq!(host_a.eq(&host_b), false);"
        ],
        "code": [
          "{",
          "    let host_a = Host::Domain(String::from(\"\"));",
          "    let host_b = Host::Domain(String::from(\"not_empty.com\"));",
          "    let _ = host_a.eq(&host_b);",
          "    let host_a = Host::Domain(String::from(\"different.com\"));",
          "    let host_b = Host::Domain(String::from(\"another.com\"));",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "    let host_a = Host::Ipv4(Ipv4Addr::new(192, 168, 1, 1));",
          "    let host_b = Host::Ipv4(Ipv4Addr::new(10, 0, 0, 1));",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "    let host_a = Host::Ipv6(Ipv6Addr::new(0x2001, 0x0db8, 0x85a3, 0x0000, 0x0000, 0x8a2e, 0x0370, 0x7334));",
          "    let host_b = Host::Ipv6(Ipv6Addr::new(0x3001, 0x0db8, 0x85a3, 0x0000, 0x0000, 0x8a2e, 0x0370, 0x1234));",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "    let host_a = Host::Domain(String::from(\"%E2%82%AC\"));",
          "    let host_b = Host::Domain(String::from(\"Euro%20Sign\"));",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let host_a = Host::Domain(String::from(\"example.com!\"));",
          "    let host_b = Host::Domain(String::from(\"example.com@\"));",
          "    let _ = host_a.eq(&host_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(host_a.eq(&host_b), false);"
        ],
        "code": [
          "{",
          "    let host_a = Host::Domain(String::from(\"example.com!\"));",
          "    let host_b = Host::Domain(String::from(\"example.com@\"));",
          "    let _ = host_a.eq(&host_b);",
          "    assert_eq!(host_a.eq(&host_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]