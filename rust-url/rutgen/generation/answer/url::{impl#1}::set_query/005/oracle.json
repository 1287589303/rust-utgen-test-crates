[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com/products#test\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(24),",
          "        fragment_start: Some(29),",
          "    };",
          "    url.set_query(Some(\"page=1\"));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"https://example.com/products#test\");",
          "    assert_eq!(url.query(), Some(\"page=1\"));",
          "    assert_eq!(url.query_start, Some(24));",
          "    assert_eq!(url.serialization, \"https://example.com/products?page=1#test\");",
          "    assert_eq!(url.fragment_start, Some(29));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com/products#test\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(24),",
          "        fragment_start: Some(29),",
          "    };",
          "    url.set_query(Some(\"page=1\"));",
          "    assert_eq!(url.as_str(), \"https://example.com/products#test\");",
          "    assert_eq!(url.query(), Some(\"page=1\"));",
          "    assert_eq!(url.query_start, Some(24));",
          "    assert_eq!(url.serialization, \"https://example.com/products?page=1#test\");",
          "    assert_eq!(url.fragment_start, Some(29));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com/products?old_query#fragment\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(24),",
          "        fragment_start: Some(36),",
          "    };",
          "    url.set_query(Some(\"sort=asc\"));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"https://example.com/products?sort=asc\");",
          "    assert_eq!(url.query(), Some(\"sort=asc\"));",
          "    assert_eq!(url.fragment(), Some(\"fragment\"));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com/products?old_query#fragment\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(24),",
          "        fragment_start: Some(36),",
          "    };",
          "    url.set_query(Some(\"sort=asc\"));",
          "    assert_eq!(url.as_str(), \"https://example.com/products?sort=asc\");",
          "    assert_eq!(url.query(), Some(\"sort=asc\"));",
          "    assert_eq!(url.fragment(), Some(\"fragment\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com/products?old_query#fragment\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(24),",
          "        fragment_start: Some(36),",
          "    };",
          "    url.set_query(None);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"https://example.com/products#fragment\");",
          "    assert_eq!(url.query(), None);",
          "    assert_eq!(url.query_start, None);",
          "    assert_eq!(url.fragment_start, Some(36));",
          "    assert_eq!(url.serialization, \"https://example.com/products#fragment\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com/products?old_query#fragment\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(24),",
          "        fragment_start: Some(36),",
          "    };",
          "    url.set_query(None);",
          "    assert_eq!(url.as_str(), \"https://example.com/products#fragment\");",
          "    assert_eq!(url.query(), None);",
          "    assert_eq!(url.query_start, None);",
          "    assert_eq!(url.fragment_start, Some(36));",
          "    assert_eq!(url.serialization, \"https://example.com/products#fragment\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com/products?old_query#test fragment\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(24),",
          "        fragment_start: Some(36),",
          "    };",
          "    url.set_query(Some(\"    search=test   \"));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.serialization, \"https://example.com/products?search=test\");",
          "    assert_eq!(url.query(), Some(\"search=test\"));",
          "    assert_eq!(url.query_start, Some(24));",
          "    assert_eq!(url.fragment_start, Some(36));"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com/products?old_query#test fragment\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(24),",
          "        fragment_start: Some(36),",
          "    };",
          "    url.set_query(Some(\"    search=test   \"));",
          "    assert_eq!(url.serialization, \"https://example.com/products?search=test\");",
          "    assert_eq!(url.query(), Some(\"search=test\"));",
          "    assert_eq!(url.query_start, Some(24));",
          "    assert_eq!(url.fragment_start, Some(36));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com/products?old_query#test\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(24),",
          "        fragment_start: Some(36),",
          "    };",
          "    url.set_query(Some(\"page=2&sort=asc\"));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.as_str(), \"https://example.com/products?page=2&sort=asc\");",
          "    assert_eq!(url.query(), Some(\"page=2&sort=asc\"));",
          "    assert_eq!(url.query_start, Some(24));",
          "    assert!(url.fragment_start.is_some());",
          "    assert_eq!(url.serialization, \"https://example.com/products?page=2&sort=asc\");"
        ],
        "code": [
          "{",
          "    let mut url = Url {",
          "        serialization: \"https://example.com/products?old_query#test\".to_string(),",
          "        scheme_end: 5,",
          "        username_end: 0,",
          "        host_start: 0,",
          "        host_end: 15,",
          "        host: HostInternal::Domain,",
          "        port: None,",
          "        path_start: 23,",
          "        query_start: Some(24),",
          "        fragment_start: Some(36),",
          "    };",
          "    url.set_query(Some(\"page=2&sort=asc\"));",
          "    assert_eq!(url.as_str(), \"https://example.com/products?page=2&sort=asc\");",
          "    assert_eq!(url.query(), Some(\"page=2&sort=asc\"));",
          "    assert_eq!(url.query_start, Some(24));",
          "    assert!(url.fragment_start.is_some());",
          "    assert_eq!(url.serialization, \"https://example.com/products?page=2&sort=asc\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]