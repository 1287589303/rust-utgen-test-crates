[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"http://example.com\").unwrap();",
          "    url.cannot_be_a_base();",
          "",
          "    let url = Url::parse(\"ftp://example.com\").unwrap();",
          "    url.cannot_be_a_base();",
          "",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    url.cannot_be_a_base();",
          "}"
        ],
        "oracle": [
          "    assert!(!url.cannot_be_a_base());  // For \"http://example.com\"",
          "    assert!(!url.cannot_be_a_base());  // For \"ftp://example.com\"",
          "    assert!(!url.cannot_be_a_base());  // For \"unix:/run/foo.socket\"",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert!(url.cannot_be_a_base());  // For \"data:text/plain,Stuff\""
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"http://example.com\").unwrap();",
          "    url.cannot_be_a_base();",
          "",
          "    let url = Url::parse(\"ftp://example.com\").unwrap();",
          "    url.cannot_be_a_base();",
          "",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    url.cannot_be_a_base();",
          "    assert!(!url.cannot_be_a_base());  // For \"http://example.com\"",
          "    assert!(!url.cannot_be_a_base());  // For \"ftp://example.com\"",
          "    assert!(!url.cannot_be_a_base());  // For \"unix:/run/foo.socket\"",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert!(url.cannot_be_a_base());  // For \"data:text/plain,Stuff\"",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    url.cannot_be_a_base();",
          "",
          "    let url = Url::parse(\"mailto:someone@example.com\").unwrap();",
          "    url.cannot_be_a_base();",
          "}"
        ],
        "oracle": [
          "    assert!(url.cannot_be_a_base());",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert!(!url.cannot_be_a_base());",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    assert!(!url.cannot_be_a_base());",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert!(url.cannot_be_a_base());",
          "    let url = Url::parse(\"mailto:someone@example.com\").unwrap();",
          "    assert!(url.cannot_be_a_base());"
        ],
        "code": [
          "{",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    url.cannot_be_a_base();",
          "",
          "    let url = Url::parse(\"mailto:someone@example.com\").unwrap();",
          "    url.cannot_be_a_base();",
          "    assert!(url.cannot_be_a_base());",
          "    let url = Url::parse(\"ftp://rms@example.com\").unwrap();",
          "    assert!(!url.cannot_be_a_base());",
          "    let url = Url::parse(\"unix:/run/foo.socket\").unwrap();",
          "    assert!(!url.cannot_be_a_base());",
          "    let url = Url::parse(\"data:text/plain,Stuff\").unwrap();",
          "    assert!(url.cannot_be_a_base());",
          "    let url = Url::parse(\"mailto:someone@example.com\").unwrap();",
          "    assert!(url.cannot_be_a_base());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]