[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    mime.get_parameter(\"charset\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mime.get_parameter(\"charset\"), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(\"not-a-parameter\"), None);",
          "    assert_eq!(mime.get_parameter(\"charset \"), None);",
          "    assert_eq!(mime.get_parameter(\"Charset\"), None);",
          "    assert_eq!(mime.get_parameter(\"\"), None);",
          "    assert_eq!(mime.get_parameter(\"utf-8\"), None);",
          "    assert_eq!(mime.get_parameter(&\"charset\"[..]), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(&String::from(\"charset\")), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(&\"not-a-parameter\"[..]), None);"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    mime.get_parameter(\"charset\");",
          "    assert_eq!(mime.get_parameter(\"charset\"), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(\"not-a-parameter\"), None);",
          "    assert_eq!(mime.get_parameter(\"charset \"), None);",
          "    assert_eq!(mime.get_parameter(\"Charset\"), None);",
          "    assert_eq!(mime.get_parameter(\"\"), None);",
          "    assert_eq!(mime.get_parameter(\"utf-8\"), None);",
          "    assert_eq!(mime.get_parameter(&\"charset\"[..]), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(&String::from(\"charset\")), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(&\"not-a-parameter\"[..]), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    mime.get_parameter(\"non-existing\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mime.get_parameter(\"non-existing\"), None);"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    mime.get_parameter(\"non-existing\");",
          "    assert_eq!(mime.get_parameter(\"non-existing\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"html\".to_owned(),",
          "        parameters: vec![(\"CHARSET\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    mime.get_parameter(\"charset\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mime.get_parameter(\"CHARSET\"), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(\"charset\"), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(\"INVALID_PARAM\"), None);",
          "    assert_eq!(mime.get_parameter(\"CHARSET\"), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(\"\"), None);",
          "    assert_eq!(mime.get_parameter(\" \"), None);",
          "    assert_eq!(mime.get_parameter(&\"CHARSET\"[..]), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(&String::from(\"charset\")), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(&\"INVALID_PARAM\"[..]), None);"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"html\".to_owned(),",
          "        parameters: vec![(\"CHARSET\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    mime.get_parameter(\"charset\");",
          "    assert_eq!(mime.get_parameter(\"CHARSET\"), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(\"charset\"), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(\"INVALID_PARAM\"), None);",
          "    assert_eq!(mime.get_parameter(\"CHARSET\"), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(\"\"), None);",
          "    assert_eq!(mime.get_parameter(\" \"), None);",
          "    assert_eq!(mime.get_parameter(&\"CHARSET\"[..]), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(&String::from(\"charset\")), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(&\"INVALID_PARAM\"[..]), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"application\".to_owned(),",
          "        subtype: \"json\".to_owned(),",
          "        parameters: Vec::new(),",
          "    };",
          "    mime.get_parameter(\"charset\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mime.get_parameter(\"charset\"), None);"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"application\".to_owned(),",
          "        subtype: \"json\".to_owned(),",
          "        parameters: Vec::new(),",
          "    };",
          "    mime.get_parameter(\"charset\");",
          "    assert_eq!(mime.get_parameter(\"charset\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let long_name = \"a\".repeat(255);",
          "    let mime = Mime {",
          "        type_: \"image\".to_owned(),",
          "        subtype: \"png\".to_owned(),",
          "        parameters: vec![(long_name.clone(), \"value\".to_owned())],",
          "    };",
          "    mime.get_parameter(&long_name);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mime.get_parameter(&long_name), Some(\"value\"));"
        ],
        "code": [
          "{",
          "    let long_name = \"a\".repeat(255);",
          "    let mime = Mime {",
          "        type_: \"image\".to_owned(),",
          "        subtype: \"png\".to_owned(),",
          "        parameters: vec![(long_name.clone(), \"value\".to_owned())],",
          "    };",
          "    mime.get_parameter(&long_name);",
          "    assert_eq!(mime.get_parameter(&long_name), Some(\"value\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    mime.get_parameter(\"\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(mime.get_parameter(\"charset\"), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(\"nonexistent\"), None);",
          "    assert_eq!(mime.get_parameter(\"\"), None);",
          "    assert_eq!(mime.get_parameter(\"charset\".to_owned()), Some(\"utf-8\"));"
        ],
        "code": [
          "{",
          "    let mime = Mime {",
          "        type_: \"text\".to_owned(),",
          "        subtype: \"plain\".to_owned(),",
          "        parameters: vec![(\"charset\".to_owned(), \"utf-8\".to_owned())],",
          "    };",
          "    mime.get_parameter(\"\");",
          "    assert_eq!(mime.get_parameter(\"charset\"), Some(\"utf-8\"));",
          "    assert_eq!(mime.get_parameter(\"nonexistent\"), None);",
          "    assert_eq!(mime.get_parameter(\"\"), None);",
          "    assert_eq!(mime.get_parameter(\"charset\".to_owned()), Some(\"utf-8\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]