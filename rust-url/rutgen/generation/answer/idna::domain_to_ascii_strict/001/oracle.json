[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"example.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(domain_to_ascii_strict(\"example.com\"), Ok(\"example.com\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"example.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "    assert_eq!(domain_to_ascii_strict(\"example.com\"), Ok(\"example.com\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"sub-domain.example.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "}"
        ],
        "oracle": [
          "    result = domain_to_ascii_strict(\"sub-domain.example.com\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), \"sub-domain.example.com\");"
        ],
        "code": [
          "{",
          "    let domain = \"sub-domain.example.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "    result = domain_to_ascii_strict(\"sub-domain.example.com\");",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), \"sub-domain.example.com\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(domain_to_ascii_strict(\"\"), Err(Errors::default()));"
        ],
        "code": [
          "{",
          "    let domain = \"\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "    assert_eq!(domain_to_ascii_strict(\"\"), Err(Errors::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"a\".repeat(253); // creates a domain consisting of 253 'a's",
          "    let _ = domain_to_ascii_strict(&domain);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(domain_to_ascii_strict(\"a\".repeat(253)), Ok(\"a\".repeat(253)));"
        ],
        "code": [
          "{",
          "    let domain = \"a\".repeat(253); // creates a domain consisting of 253 'a's",
          "    let _ = domain_to_ascii_strict(&domain);",
          "    assert_eq!(domain_to_ascii_strict(\"a\".repeat(253)), Ok(\"a\".repeat(253)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"-invalid.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(domain_to_ascii_strict(\"-invalid.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"valid.com\"), Ok(\"valid.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"user@domain.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\".leadingdot.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"trailingdot.com.\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"check-hyphens.com\"), Ok(\"check-hyphens.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"subdomain.valid.com\"), Ok(\"subdomain.valid.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"github_user.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"youtube-cdn.com\"), Err(Errors::default()));"
        ],
        "code": [
          "{",
          "    let domain = \"-invalid.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "    assert_eq!(domain_to_ascii_strict(\"-invalid.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"valid.com\"), Ok(\"valid.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"user@domain.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\".leadingdot.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"trailingdot.com.\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"check-hyphens.com\"), Ok(\"check-hyphens.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"subdomain.valid.com\"), Ok(\"subdomain.valid.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"github_user.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"youtube-cdn.com\"), Err(Errors::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"invalid-.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(domain_to_ascii_strict(\"invalid-.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"youTube.com\"), Ok(\"youTube.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"example.com\"), Ok(\"example.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"some-github-user.page\"), Ok(\"some-github-user.page\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"valid-domain.com\"), Ok(\"valid-domain.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"another.example.com\"), Ok(\"another.example.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"valid-domain-123.com\"), Ok(\"valid-domain-123.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"-invalid.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"invalid@domain.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"..invalid.com\"), Err(Errors::default()));"
        ],
        "code": [
          "{",
          "    let domain = \"invalid-.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "    assert_eq!(domain_to_ascii_strict(\"invalid-.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"youTube.com\"), Ok(\"youTube.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"example.com\"), Ok(\"example.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"some-github-user.page\"), Ok(\"some-github-user.page\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"valid-domain.com\"), Ok(\"valid-domain.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"another.example.com\"), Ok(\"another.example.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"valid-domain-123.com\"), Ok(\"valid-domain-123.com\".to_string()));",
          "    assert_eq!(domain_to_ascii_strict(\"-invalid.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"invalid@domain.com\"), Err(Errors::default()));",
          "    assert_eq!(domain_to_ascii_strict(\"..invalid.com\"), Err(Errors::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"in-valid-example.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(domain_to_ascii_strict(\"valid-example.com\"), Ok(\"valid-example.com\".to_string()));",
          "    assert!(domain_to_ascii_strict(\"you-tube.com\").is_err());",
          "    assert!(domain_to_ascii_strict(\"GitHub.com\").is_err());",
          "    assert!(domain_to_ascii_strict(\"example..com\").is_err());",
          "    assert_eq!(domain_to_ascii_strict(\"sub.domain.com\"), Ok(\"sub.domain.com\".to_string()));",
          "    assert!(domain_to_ascii_strict(\"valid-domain.com\").is_ok());",
          "    assert!(domain_to_ascii_strict(\"_special_character.com\").is_err());",
          "    assert_eq!(domain_to_ascii_strict(\"valid-domain123.com\"), Ok(\"valid-domain123.com\".to_string()));"
        ],
        "code": [
          "{",
          "    let domain = \"in-valid-example.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "    assert_eq!(domain_to_ascii_strict(\"valid-example.com\"), Ok(\"valid-example.com\".to_string()));",
          "    assert!(domain_to_ascii_strict(\"you-tube.com\").is_err());",
          "    assert!(domain_to_ascii_strict(\"GitHub.com\").is_err());",
          "    assert!(domain_to_ascii_strict(\"example..com\").is_err());",
          "    assert_eq!(domain_to_ascii_strict(\"sub.domain.com\"), Ok(\"sub.domain.com\".to_string()));",
          "    assert!(domain_to_ascii_strict(\"valid-domain.com\").is_ok());",
          "    assert!(domain_to_ascii_strict(\"_special_character.com\").is_err());",
          "    assert_eq!(domain_to_ascii_strict(\"valid-domain123.com\"), Ok(\"valid-domain123.com\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"inva-lid-.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(domain_to_ascii_strict(\"inva-lid-.com\"), Err(Errors::default()));"
        ],
        "code": [
          "{",
          "    let domain = \"inva-lid-.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "    assert_eq!(domain_to_ascii_strict(\"inva-lid-.com\"), Err(Errors::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let domain = \"invalid@domain.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(domain_to_ascii_strict(\"invalid@domain.com\"), Err(Errors::default()));"
        ],
        "code": [
          "{",
          "    let domain = \"invalid@domain.com\";",
          "    let _ = domain_to_ascii_strict(domain);",
          "    assert_eq!(domain_to_ascii_strict(\"invalid@domain.com\"), Err(Errors::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]