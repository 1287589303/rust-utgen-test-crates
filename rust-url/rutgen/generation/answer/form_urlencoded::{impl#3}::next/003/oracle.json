[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"ABCabc0123456789*-_.\";",
          "    let mut serializer = ByteSerialize { bytes };",
          "    let result = serializer.next();",
          "}"
        ],
        "oracle": [
          "    let bytes: &[u8] = b\"ABCabc0123456789*-_.\";",
          "    let mut serializer = ByteSerialize { bytes };",
          "    let result = serializer.next();",
          "    assert_eq!(result, Some(\"ABCabc0123456789*-_.\"));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"ABCabc0123456789*-_.\";",
          "    let mut serializer = ByteSerialize { bytes };",
          "    let result = serializer.next();",
          "    let bytes: &[u8] = b\"ABCabc0123456789*-_.\";",
          "    let mut serializer = ByteSerialize { bytes };",
          "    let result = serializer.next();",
          "    assert_eq!(result, Some(\"ABCabc0123456789*-_.\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"A\";",
          "    let mut serializer = ByteSerialize { bytes };",
          "    let result = serializer.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(unsafe { str::from_utf8_unchecked(b\"A\") }));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"A\";",
          "    let mut serializer = ByteSerialize { bytes };",
          "    let result = serializer.next();",
          "    assert_eq!(result, Some(unsafe { str::from_utf8_unchecked(b\"A\") }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bytes: &[u8] = b\"HelloWorld\";",
          "    let mut serializer = ByteSerialize { bytes };",
          "    let result = serializer.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(\"HelloWorld\"));"
        ],
        "code": [
          "{",
          "    let bytes: &[u8] = b\"HelloWorld\";",
          "    let mut serializer = ByteSerialize { bytes };",
          "    let result = serializer.next();",
          "    assert_eq!(result, Some(\"HelloWorld\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]