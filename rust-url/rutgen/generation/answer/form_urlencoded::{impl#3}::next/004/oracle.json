[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"\\x01\\x02\\x03\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(percent_encode_byte(1)));",
          "    assert_eq!(result, Some(percent_encode_byte(2)));",
          "    assert_eq!(result, Some(percent_encode_byte(3)));"
        ],
        "code": [
          "{",
          "    let data = b\"\\x01\\x02\\x03\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(1)));",
          "    assert_eq!(result, Some(percent_encode_byte(2)));",
          "    assert_eq!(result, Some(percent_encode_byte(3)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"\\x7F\\x80\\x81\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "}"
        ],
        "oracle": [
          "    let data = b\"\\x7F\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x7F')));",
          "    ",
          "    let data = b\"\\x80\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x80')));",
          "    ",
          "    let data = b\"\\x81\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x81')));"
        ],
        "code": [
          "{",
          "    let data = b\"\\x7F\\x80\\x81\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    let data = b\"\\x7F\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x7F')));",
          "    ",
          "    let data = b\"\\x80\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x80')));",
          "    ",
          "    let data = b\"\\x81\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x81')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"\\x3C\\x3E\\x26\"; // '<', '>', '&'",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "}"
        ],
        "oracle": [
          "    let data = b\"\\x3C\"; // '<' which is not unchanged",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x3C'))); // Expect percent encoding for '<'",
          "    ",
          "    let data = b\"\\x3E\"; // '>' which is not unchanged",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x3E'))); // Expect percent encoding for '>'",
          "    ",
          "    let data = b\"\\x26\"; // '&' which is not unchanged",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x26'))); // Expect percent encoding for '&'"
        ],
        "code": [
          "{",
          "    let data = b\"\\x3C\\x3E\\x26\"; // '<', '>', '&'",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    let data = b\"\\x3C\"; // '<' which is not unchanged",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x3C'))); // Expect percent encoding for '<'",
          "    ",
          "    let data = b\"\\x3E\"; // '>' which is not unchanged",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x3E'))); // Expect percent encoding for '>'",
          "    ",
          "    let data = b\"\\x26\"; // '&' which is not unchanged",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'\\x26'))); // Expect percent encoding for '&'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"\\x01hello\\xFFworld\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "}"
        ],
        "oracle": [
          "    let data = b\"\\x01hello\\xFFworld\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(0x01)));",
          "    ",
          "    let data = b\" hello\\xFFworld\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(0xFF)));",
          "    ",
          "    let data = b\"\\x00\\x01\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(0x00)));",
          "    ",
          "    let data = b\"test\\x00test\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(0x00)));",
          "    ",
          "    let data = b\"ab cd\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'a')));"
        ],
        "code": [
          "{",
          "    let data = b\"\\x01hello\\xFFworld\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    let data = b\"\\x01hello\\xFFworld\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(0x01)));",
          "    ",
          "    let data = b\" hello\\xFFworld\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(0xFF)));",
          "    ",
          "    let data = b\"\\x00\\x01\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(0x00)));",
          "    ",
          "    let data = b\"test\\x00test\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(0x00)));",
          "    ",
          "    let data = b\"ab cd\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(b'a')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let data = b\"\\xFF\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(percent_encode_byte(0xFF)));"
        ],
        "code": [
          "{",
          "    let data = b\"\\xFF\";",
          "    let mut byte_serializer = ByteSerialize { bytes: data };",
          "    let result = byte_serializer.next();",
          "    assert_eq!(result, Some(percent_encode_byte(0xFF)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]