[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \";charset=utf-8\";",
          "    let (mime_type, base64) = parse_header(input);",
          "}"
        ],
        "oracle": [
          "    let input = \";charset=utf-8\";",
          "    let (mime_type, base64) = parse_header(input);",
          "    assert_eq!(mime_type.type_, \"text\");",
          "    assert_eq!(mime_type.subtype, \"plain\");",
          "    assert_eq!(mime_type.parameters, vec![(String::from(\"charset\"), String::from(\"utf-8\"))]);",
          "    assert!(!base64);"
        ],
        "code": [
          "{",
          "    let input = \";charset=utf-8\";",
          "    let (mime_type, base64) = parse_header(input);",
          "    let input = \";charset=utf-8\";",
          "    let (mime_type, base64) = parse_header(input);",
          "    assert_eq!(mime_type.type_, \"text\");",
          "    assert_eq!(mime_type.subtype, \"plain\");",
          "    assert_eq!(mime_type.parameters, vec![(String::from(\"charset\"), String::from(\"utf-8\"))]);",
          "    assert!(!base64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \";application/json\";",
          "    let (mime_type, base64) = parse_header(input);",
          "}"
        ],
        "oracle": [
          "    mime_type.type_ == \"text/plain\" && mime_type.subtype == \"plain\" && mime_type.parameters.len() == 1 && mime_type.parameters[0] == (String::from(\"charset\"), String::from(\"US-ASCII\")) && base64 == false"
        ],
        "code": [
          "{",
          "    let input = \";application/json\";",
          "    let (mime_type, base64) = parse_header(input);",
          "    mime_type.type_ == \"text/plain\" && mime_type.subtype == \"plain\" && mime_type.parameters.len() == 1 && mime_type.parameters[0] == (String::from(\"charset\"), String::from(\"US-ASCII\")) && base64 == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \" ; text/html \";",
          "    let (mime_type, base64) = parse_header(input);",
          "}"
        ],
        "oracle": [
          "    let input = \" ; text/html \";",
          "    assert_eq!(mime_type.type_, \"text/plain\");",
          "    assert_eq!(mime_type.subtype, \"plain\");",
          "    assert_eq!(mime_type.parameters, vec![(String::from(\"charset\"), String::from(\"US-ASCII\"))]);",
          "    assert_eq!(base64, false);"
        ],
        "code": [
          "{",
          "    let input = \" ; text/html \";",
          "    let (mime_type, base64) = parse_header(input);",
          "    let input = \" ; text/html \";",
          "    assert_eq!(mime_type.type_, \"text/plain\");",
          "    assert_eq!(mime_type.subtype, \"plain\");",
          "    assert_eq!(mime_type.parameters, vec![(String::from(\"charset\"), String::from(\"US-ASCII\"))]);",
          "    assert_eq!(base64, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \";image/png?width=400&height=400\";",
          "    let (mime_type, base64) = parse_header(input);",
          "}"
        ],
        "oracle": [
          "    let input = \";image/png?width=400&height=400\";",
          "    let expected_mime_type = mime::Mime { type_: String::from(\"text/plain\"), subtype: String::from(\"plain\"), parameters: vec![(String::from(\"charset\"), String::from(\"US-ASCII\"))] };",
          "    let expected_base64 = false;",
          "    assert_eq!(mime_type, expected_mime_type);",
          "    assert_eq!(base64, expected_base64);"
        ],
        "code": [
          "{",
          "    let input = \";image/png?width=400&height=400\";",
          "    let (mime_type, base64) = parse_header(input);",
          "    let input = \";image/png?width=400&height=400\";",
          "    let expected_mime_type = mime::Mime { type_: String::from(\"text/plain\"), subtype: String::from(\"plain\"), parameters: vec![(String::from(\"charset\"), String::from(\"US-ASCII\"))] };",
          "    let expected_base64 = false;",
          "    assert_eq!(mime_type, expected_mime_type);",
          "    assert_eq!(base64, expected_base64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \";text/plain; charset=UTF-8; version=1.0\";",
          "    let (mime_type, base64) = parse_header(input);",
          "}"
        ],
        "oracle": [
          "    let input = \";text/plain; charset=UTF-8; version=1.0\";",
          "    let (mime_type, base64) = parse_header(input);",
          "    assert_eq!(mime_type.type_, \"text\");",
          "    assert_eq!(mime_type.subtype, \"plain\");",
          "    assert_eq!(mime_type.parameters.len(), 2);",
          "    assert_eq!(mime_type.parameters[0], (String::from(\"charset\"), String::from(\"UTF-8\")));",
          "    assert_eq!(mime_type.parameters[1], (String::from(\"version\"), String::from(\"1.0\")));",
          "    assert_eq!(base64, false);"
        ],
        "code": [
          "{",
          "    let input = \";text/plain; charset=UTF-8; version=1.0\";",
          "    let (mime_type, base64) = parse_header(input);",
          "    let input = \";text/plain; charset=UTF-8; version=1.0\";",
          "    let (mime_type, base64) = parse_header(input);",
          "    assert_eq!(mime_type.type_, \"text\");",
          "    assert_eq!(mime_type.subtype, \"plain\");",
          "    assert_eq!(mime_type.parameters.len(), 2);",
          "    assert_eq!(mime_type.parameters[0], (String::from(\"charset\"), String::from(\"UTF-8\")));",
          "    assert_eq!(mime_type.parameters[1], (String::from(\"version\"), String::from(\"1.0\")));",
          "    assert_eq!(base64, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]