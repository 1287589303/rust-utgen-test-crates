[
  {
    "uses": [
      "use percent_encoding::NON_ALPHANUMERIC;",
      "use percent_encoding::utf8_percent_encode;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"\", NON_ALPHANUMERIC);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.to_string(), \"\");",
          "    assert_eq!(result.bytes, b\"\");",
          "    assert_eq!(result.ascii_set, NON_ALPHANUMERIC);"
        ],
        "code": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"\", NON_ALPHANUMERIC);",
          "    assert_eq!(result.to_string(), \"\");",
          "    assert_eq!(result.bytes, b\"\");",
          "    assert_eq!(result.ascii_set, NON_ALPHANUMERIC);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"hello\", NON_ALPHANUMERIC);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.to_string(), \"hello\");",
          "    assert_eq!(result.ascii_set, NON_ALPHANUMERIC);",
          "    assert_eq!(result.bytes, b\"hello\");",
          "    assert!(result.bytes.len() > 0);",
          "    assert!(result.bytes.iter().all(|&b| b.is_ascii()));"
        ],
        "code": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"hello\", NON_ALPHANUMERIC);",
          "    assert_eq!(result.to_string(), \"hello\");",
          "    assert_eq!(result.ascii_set, NON_ALPHANUMERIC);",
          "    assert_eq!(result.bytes, b\"hello\");",
          "    assert!(result.bytes.len() > 0);",
          "    assert!(result.bytes.iter().all(|&b| b.is_ascii()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"hello world\", NON_ALPHANUMERIC);",
          "}"
        ],
        "oracle": [
          "    assert!(result.bytes == b\"hello world\");",
          "    assert!(result.ascii_set == NON_ALPHANUMERIC);",
          "    assert_eq!(result.to_string(), \"hello%20world\");",
          "    let result_empty = utf8_percent_encode(\"\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_empty.to_string(), \"\");",
          "    let result_special_chars = utf8_percent_encode(\"foo bar?\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_special_chars.to_string(), \"foo%20bar%3F\");",
          "    let result_non_ascii = utf8_percent_encode(\"你好\", NON_ALPHANUMERIC);",
          "    assert!(result_non_ascii.to_string() == \"你好\");"
        ],
        "code": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"hello world\", NON_ALPHANUMERIC);",
          "    assert!(result.bytes == b\"hello world\");",
          "    assert!(result.ascii_set == NON_ALPHANUMERIC);",
          "    assert_eq!(result.to_string(), \"hello%20world\");",
          "    let result_empty = utf8_percent_encode(\"\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_empty.to_string(), \"\");",
          "    let result_special_chars = utf8_percent_encode(\"foo bar?\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_special_chars.to_string(), \"foo%20bar%3F\");",
          "    let result_non_ascii = utf8_percent_encode(\"你好\", NON_ALPHANUMERIC);",
          "    assert!(result_non_ascii.to_string() == \"你好\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"foo bar?\", NON_ALPHANUMERIC);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.to_string(), \"foo%20bar%3F\");"
        ],
        "code": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"foo bar?\", NON_ALPHANUMERIC);",
          "    assert_eq!(result.to_string(), \"foo%20bar%3F\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"Hello, World!\", NON_ALPHANUMERIC);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.to_string(), \"Hello%2C%20World%21\");",
          "    assert!(result.bytes == b\"Hello, World!\");",
          "    assert!(result.ascii_set == &NON_ALPHANUMERIC);",
          "    assert_eq!(result.bytes.len(), 13);",
          "    assert_eq!(result.ascii_set.mask.len(), ASCII_RANGE_LEN / BITS_PER_CHUNK);"
        ],
        "code": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"Hello, World!\", NON_ALPHANUMERIC);",
          "    assert_eq!(result.to_string(), \"Hello%2C%20World%21\");",
          "    assert!(result.bytes == b\"Hello, World!\");",
          "    assert!(result.ascii_set == &NON_ALPHANUMERIC);",
          "    assert_eq!(result.bytes.len(), 13);",
          "    assert_eq!(result.ascii_set.mask.len(), ASCII_RANGE_LEN / BITS_PER_CHUNK);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let long_string = \"a\".repeat(1000);",
          "    let result = utf8_percent_encode(&long_string, NON_ALPHANUMERIC);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(utf8_percent_encode(\"foo bar?\", NON_ALPHANUMERIC).to_string(), \"foo%20bar%3F\");",
          "    assert_eq!(utf8_percent_encode(\"hello world!\", NON_ALPHANUMERIC).to_string(), \"hello%20world%21\");",
          "    assert_eq!(utf8_percent_encode(\"1234&5678\", NON_ALPHANUMERIC).to_string(), \"1234%265678\");",
          "    assert_eq!(utf8_percent_encode(\"abc123\", NON_ALPHANUMERIC).to_string(), \"abc123\");",
          "    assert_eq!(utf8_percent_encode(\" \", NON_ALPHANUMERIC).to_string(), \"%20\");",
          "    assert_eq!(utf8_percent_encode(\"!@#$%\", NON_ALPHANUMERIC).to_string(), \"%21%40%23%24%25\");",
          "    assert_eq!(utf8_percent_encode(\"~`\", NON_ALPHANUMERIC).to_string(), \"%7E%60\");",
          "    assert_eq!(utf8_percent_encode(\"áéíóú\", NON_ALPHANUMERIC).to_string(), \"áéíóú\");",
          "    assert_eq!(utf8_percent_encode(\"\", NON_ALPHANUMERIC).to_string(), \"\");",
          "    assert_eq!(utf8_percent_encode(\"a\".repeat(1000), NON_ALPHANUMERIC).to_string(), \"a%{0}.repeat(1000)\");",
          "    assert_eq!(utf8_percent_encode(\"中文\", NON_ALPHANUMERIC).to_string(), \"中文\");"
        ],
        "code": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let long_string = \"a\".repeat(1000);",
          "    let result = utf8_percent_encode(&long_string, NON_ALPHANUMERIC);",
          "    assert_eq!(utf8_percent_encode(\"foo bar?\", NON_ALPHANUMERIC).to_string(), \"foo%20bar%3F\");",
          "    assert_eq!(utf8_percent_encode(\"hello world!\", NON_ALPHANUMERIC).to_string(), \"hello%20world%21\");",
          "    assert_eq!(utf8_percent_encode(\"1234&5678\", NON_ALPHANUMERIC).to_string(), \"1234%265678\");",
          "    assert_eq!(utf8_percent_encode(\"abc123\", NON_ALPHANUMERIC).to_string(), \"abc123\");",
          "    assert_eq!(utf8_percent_encode(\" \", NON_ALPHANUMERIC).to_string(), \"%20\");",
          "    assert_eq!(utf8_percent_encode(\"!@#$%\", NON_ALPHANUMERIC).to_string(), \"%21%40%23%24%25\");",
          "    assert_eq!(utf8_percent_encode(\"~`\", NON_ALPHANUMERIC).to_string(), \"%7E%60\");",
          "    assert_eq!(utf8_percent_encode(\"áéíóú\", NON_ALPHANUMERIC).to_string(), \"áéíóú\");",
          "    assert_eq!(utf8_percent_encode(\"\", NON_ALPHANUMERIC).to_string(), \"\");",
          "    assert_eq!(utf8_percent_encode(\"a\".repeat(1000), NON_ALPHANUMERIC).to_string(), \"a%{0}.repeat(1000)\");",
          "    assert_eq!(utf8_percent_encode(\"中文\", NON_ALPHANUMERIC).to_string(), \"中文\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"12345\", NON_ALPHANUMERIC);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.to_string(), \"12345\");",
          "    ",
          "    let result_empty = utf8_percent_encode(\"\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_empty.to_string(), \"\");",
          "    ",
          "    let result_special_chars = utf8_percent_encode(\"foo bar?\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_special_chars.to_string(), \"foo%20bar%3F\");",
          "    ",
          "    let result_numeric = utf8_percent_encode(\"!@#$%^&*\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_numeric.to_string(), \"%21%40%23%24%25%5E%26%2A\");",
          "    ",
          "    let result_alphanumeric = utf8_percent_encode(\"abc123\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_alphanumeric.to_string(), \"abc123\");",
          "    ",
          "    let result_spaces = utf8_percent_encode(\"hello world\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_spaces.to_string(), \"hello%20world\");"
        ],
        "code": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"12345\", NON_ALPHANUMERIC);",
          "    assert_eq!(result.to_string(), \"12345\");",
          "    ",
          "    let result_empty = utf8_percent_encode(\"\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_empty.to_string(), \"\");",
          "    ",
          "    let result_special_chars = utf8_percent_encode(\"foo bar?\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_special_chars.to_string(), \"foo%20bar%3F\");",
          "    ",
          "    let result_numeric = utf8_percent_encode(\"!@#$%^&*\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_numeric.to_string(), \"%21%40%23%24%25%5E%26%2A\");",
          "    ",
          "    let result_alphanumeric = utf8_percent_encode(\"abc123\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_alphanumeric.to_string(), \"abc123\");",
          "    ",
          "    let result_spaces = utf8_percent_encode(\"hello world\", NON_ALPHANUMERIC);",
          "    assert_eq!(result_spaces.to_string(), \"hello%20world\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"!@#$%^&*()\", NON_ALPHANUMERIC);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.to_string(), \"%21%40%23%24%25%5E%26%2A%28%29\");",
          "    assert_eq!(result.ascii_set, &NON_ALPHANUMERIC);",
          "    assert_eq!(result.bytes, b\"!@#$%^&*()\");",
          "    assert!(result.bytes.len() > 0);",
          "    assert!(result.to_string().contains(\"%\"));"
        ],
        "code": [
          "{",
          "    use percent_encoding::{utf8_percent_encode, NON_ALPHANUMERIC};",
          "    let result = utf8_percent_encode(\"!@#$%^&*()\", NON_ALPHANUMERIC);",
          "    assert_eq!(result.to_string(), \"%21%40%23%24%25%5E%26%2A%28%29\");",
          "    assert_eq!(result.ascii_set, &NON_ALPHANUMERIC);",
          "    assert_eq!(result.bytes, b\"!@#$%^&*()\");",
          "    assert!(result.bytes.len() > 0);",
          "    assert!(result.to_string().contains(\"%\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]