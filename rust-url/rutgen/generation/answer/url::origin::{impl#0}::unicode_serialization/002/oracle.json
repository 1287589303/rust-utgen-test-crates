[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scheme = \"ftp\";",
          "    let host = Host::Ipv4(\"192.168.1.1\".parse().unwrap());",
          "    let port = 22; // port 22 is not the default for ftp",
          "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
          "    let result = origin.unicode_serialization();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"ftp://192.168.1.1:22\");"
        ],
        "code": [
          "{",
          "    let scheme = \"ftp\";",
          "    let host = Host::Ipv4(\"192.168.1.1\".parse().unwrap());",
          "    let port = 22; // port 22 is not the default for ftp",
          "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
          "    let result = origin.unicode_serialization();",
          "    assert_eq!(result, \"ftp://192.168.1.1:22\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scheme = \"ws\";",
          "    let host = Host::Ipv6(\"::1\".parse().unwrap());",
          "    let port = 8080; // port 8080 is not the default for ws",
          "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
          "    let result = origin.unicode_serialization();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"ws://[::1]:8080\".to_owned());"
        ],
        "code": [
          "{",
          "    let scheme = \"ws\";",
          "    let host = Host::Ipv6(\"::1\".parse().unwrap());",
          "    let port = 8080; // port 8080 is not the default for ws",
          "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
          "    let result = origin.unicode_serialization();",
          "    assert_eq!(result, \"ws://[::1]:8080\".to_owned());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scheme = \"http\"; // scheme is valid",
          "    let host = Host::Ipv4(\"10.0.0.1\".parse().unwrap());",
          "    let port = 3000; // port 3000 is a valid custom port, not default for http",
          "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
          "    let result = origin.unicode_serialization();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"http://10.0.0.1:3000\");"
        ],
        "code": [
          "{",
          "    let scheme = \"http\"; // scheme is valid",
          "    let host = Host::Ipv4(\"10.0.0.1\".parse().unwrap());",
          "    let port = 3000; // port 3000 is a valid custom port, not default for http",
          "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
          "    let result = origin.unicode_serialization();",
          "    assert_eq!(result, \"http://10.0.0.1:3000\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let scheme = \"https\"; // scheme is valid",
          "    let host = Host::Ipv6(\"2001:db8::ff00:42:8329\".parse().unwrap());",
          "    let port = 10001; // port 10001 is not the default for https",
          "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
          "    let result = origin.unicode_serialization();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"https://[2001:db8::ff00:42:8329]:10001\".to_owned());"
        ],
        "code": [
          "{",
          "    let scheme = \"https\"; // scheme is valid",
          "    let host = Host::Ipv6(\"2001:db8::ff00:42:8329\".parse().unwrap());",
          "    let port = 10001; // port 10001 is not the default for https",
          "    let origin = Origin::Tuple(scheme.to_owned(), host, port);",
          "    let result = origin.unicode_serialization();",
          "    assert_eq!(result, \"https://[2001:db8::ff00:42:8329]:10001\".to_owned());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]