[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"A|/\";",
          "    starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter(\"A|/\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"B|/\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"C|/\"), true);"
        ],
        "code": [
          "{",
          "    let input = \"A|/\";",
          "    starts_with_windows_drive_letter(input);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|/\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"B|/\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"C|/\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"Z|#\";",
          "    starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert!(starts_with_windows_drive_letter(\"Z|\")); // s.len() == 2, ascii_alpha('Z'), s.as_bytes()[1] == b'|', s.len() == 2, s.as_bytes()[2] == b'#'",
          "    assert!(starts_with_windows_drive_letter(\"A|/\")); // s.len() == 3, ascii_alpha('A'), s.as_bytes()[1] == b'|', s.len() == 2, s.as_bytes()[2] == b'/'",
          "    assert!(starts_with_windows_drive_letter(\"B|?\")); // s.len() == 3, ascii_alpha('B'), s.as_bytes()[1] == b'|', s.len() == 2, s.as_bytes()[2] == b'?'",
          "    assert!(starts_with_windows_drive_letter(\"C|\\\\\")); // s.len() == 3, ascii_alpha('C'), s.as_bytes()[1] == b'|', s.len() == 2, s.as_bytes()[2] == b'\\\\'"
        ],
        "code": [
          "{",
          "    let input = \"Z|#\";",
          "    starts_with_windows_drive_letter(input);",
          "    assert!(starts_with_windows_drive_letter(\"Z|\")); // s.len() == 2, ascii_alpha('Z'), s.as_bytes()[1] == b'|', s.len() == 2, s.as_bytes()[2] == b'#'",
          "    assert!(starts_with_windows_drive_letter(\"A|/\")); // s.len() == 3, ascii_alpha('A'), s.as_bytes()[1] == b'|', s.len() == 2, s.as_bytes()[2] == b'/'",
          "    assert!(starts_with_windows_drive_letter(\"B|?\")); // s.len() == 3, ascii_alpha('B'), s.as_bytes()[1] == b'|', s.len() == 2, s.as_bytes()[2] == b'?'",
          "    assert!(starts_with_windows_drive_letter(\"C|\\\\\")); // s.len() == 3, ascii_alpha('C'), s.as_bytes()[1] == b'|', s.len() == 2, s.as_bytes()[2] == b'\\\\'",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"M|?\";",
          "    starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter(\"M|?\"), true);",
          "    assert!(starts_with_windows_drive_letter(\"A|/\"));",
          "    assert!(starts_with_windows_drive_letter(\"B|#\"));",
          "    assert!(starts_with_windows_drive_letter(\"C|\\\\\"));",
          "    assert_eq!(starts_with_windows_drive_letter(\"X|?\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"Z|/\"), true);",
          "    assert!(starts_with_windows_drive_letter(\"D|@\"));",
          "    assert!(starts_with_windows_drive_letter(\"E|/\"));"
        ],
        "code": [
          "{",
          "    let input = \"M|?\";",
          "    starts_with_windows_drive_letter(input);",
          "    assert_eq!(starts_with_windows_drive_letter(\"M|?\"), true);",
          "    assert!(starts_with_windows_drive_letter(\"A|/\"));",
          "    assert!(starts_with_windows_drive_letter(\"B|#\"));",
          "    assert!(starts_with_windows_drive_letter(\"C|\\\\\"));",
          "    assert_eq!(starts_with_windows_drive_letter(\"X|?\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"Z|/\"), true);",
          "    assert!(starts_with_windows_drive_letter(\"D|@\"));",
          "    assert!(starts_with_windows_drive_letter(\"E|/\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"K|\\\\\";",
          "    starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter(\"K|\\\\\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|/\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"B|#\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"C|?\"), true);"
        ],
        "code": [
          "{",
          "    let input = \"K|\\\\\";",
          "    starts_with_windows_drive_letter(input);",
          "    assert_eq!(starts_with_windows_drive_letter(\"K|\\\\\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|/\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"B|#\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"C|?\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]