[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"A\"; // Length < 2",
          "    starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter(\"A\"), false); // Length < 2",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), false); // Length == 2, valid drive letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|\"), false); // Length == 2, valid drive letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB\"), false); // Length == 2, no valid following character",
          "    assert_eq!(starts_with_windows_drive_letter(\"A/C\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\\\\\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"A?\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"A#\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB/\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB\\\\\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB?\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB#\"), false); // Length > 2, but first two conditions met"
        ],
        "code": [
          "{",
          "    let input = \"A\"; // Length < 2",
          "    starts_with_windows_drive_letter(input);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\"), false); // Length < 2",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), false); // Length == 2, valid drive letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|\"), false); // Length == 2, valid drive letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB\"), false); // Length == 2, no valid following character",
          "    assert_eq!(starts_with_windows_drive_letter(\"A/C\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\\\\\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"A?\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"A#\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB/\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB\\\\\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB?\"), false); // Length > 2, but first two conditions met",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB#\"), false); // Length > 2, but first two conditions met",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"1:\"; // Non-alphabetic start",
          "    starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter(\"1:\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"B|\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"C:\\\\\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"D:?\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"E#\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB:\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\":\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"AA|/\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"1|\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB|?\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"AA\\\\#\"), true);"
        ],
        "code": [
          "{",
          "    let input = \"1:\"; // Non-alphabetic start",
          "    starts_with_windows_drive_letter(input);",
          "    assert_eq!(starts_with_windows_drive_letter(\"1:\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"B|\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"C:\\\\\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"D:?\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"E#\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB:\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\":\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"AA|/\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"1|\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB|?\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), true);",
          "    assert_eq!(starts_with_windows_drive_letter(\"AA\\\\#\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"AB\"; // s[1] is not ':' or '|'",
          "    starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter(\"A\"), false); // s.len() < 2",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), true); // valid drive letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|\"), true); // valid drive letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB\"), true); // valid drive letter, s[1] is ':'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A/\"), true); // valid drive letter, s[2] is '/'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\\\\\"), true); // valid drive letter, s[2] is '\\'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A?\"), true); // valid drive letter, s[2] is '?'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A#\"), true); // valid drive letter, s[2] is '#'",
          "    assert_eq!(starts_with_windows_drive_letter(\"ABC\"), false); // s[1] is not ':' or '|', length > 2",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB:\"), false); // s[1] is not ':' or '|'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|C\"), false); // invalid drive letter format",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB/\"), false); // invalid drive letter format",
          "    assert_eq!(starts_with_windows_drive_letter(\"A..\"), false); // invalid drive letter format",
          "    assert_eq!(starts_with_windows_drive_letter(\"12:\"), false); // non-alphabetic character at start",
          "    assert_eq!(starts_with_windows_drive_letter(\"A#C\"), false); // invalid character after drive letter"
        ],
        "code": [
          "{",
          "    let input = \"AB\"; // s[1] is not ':' or '|'",
          "    starts_with_windows_drive_letter(input);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\"), false); // s.len() < 2",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), true); // valid drive letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|\"), true); // valid drive letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB\"), true); // valid drive letter, s[1] is ':'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A/\"), true); // valid drive letter, s[2] is '/'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\\\\\"), true); // valid drive letter, s[2] is '\\'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A?\"), true); // valid drive letter, s[2] is '?'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A#\"), true); // valid drive letter, s[2] is '#'",
          "    assert_eq!(starts_with_windows_drive_letter(\"ABC\"), false); // s[1] is not ':' or '|', length > 2",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB:\"), false); // s[1] is not ':' or '|'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|C\"), false); // invalid drive letter format",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB/\"), false); // invalid drive letter format",
          "    assert_eq!(starts_with_windows_drive_letter(\"A..\"), false); // invalid drive letter format",
          "    assert_eq!(starts_with_windows_drive_letter(\"12:\"), false); // non-alphabetic character at start",
          "    assert_eq!(starts_with_windows_drive_letter(\"A#C\"), false); // invalid character after drive letter",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"A:\"; // Length == 2, no third character",
          "    starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), true); // valid Windows drive letter with length 2",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|\"), true); // valid Windows drive letter with length 2",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:/\"), true); // valid Windows drive letter with third character '/'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\\\\\"), true); // valid Windows drive letter with third character '\\'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A?\"), true); // valid Windows drive letter with third character '?'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A#\"), true); // valid Windows drive letter with third character '#'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), true); // valid case",
          "    assert_eq!(starts_with_windows_drive_letter(\"B|\"), true); // valid case with different letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\"), false); // invalid case, length < 2",
          "    assert_eq!(starts_with_windows_drive_letter(\":\"), false); // invalid case, no letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"1:\"), false); // invalid case, non-alpha prefix",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB:\"), false); // invalid case, length > 2 without valid third character",
          "    assert_eq!(starts_with_windows_drive_letter(\"A#b:\"), false); // invalid case, valid first but invalid third character"
        ],
        "code": [
          "{",
          "    let input = \"A:\"; // Length == 2, no third character",
          "    starts_with_windows_drive_letter(input);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), true); // valid Windows drive letter with length 2",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|\"), true); // valid Windows drive letter with length 2",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:/\"), true); // valid Windows drive letter with third character '/'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\\\\\"), true); // valid Windows drive letter with third character '\\'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A?\"), true); // valid Windows drive letter with third character '?'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A#\"), true); // valid Windows drive letter with third character '#'",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), true); // valid case",
          "    assert_eq!(starts_with_windows_drive_letter(\"B|\"), true); // valid case with different letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\"), false); // invalid case, length < 2",
          "    assert_eq!(starts_with_windows_drive_letter(\":\"), false); // invalid case, no letter",
          "    assert_eq!(starts_with_windows_drive_letter(\"1:\"), false); // invalid case, non-alpha prefix",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB:\"), false); // invalid case, length > 2 without valid third character",
          "    assert_eq!(starts_with_windows_drive_letter(\"A#b:\"), false); // invalid case, valid first but invalid third character",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = \"A|$\"; // s[2] is not '/', '\\\\', '?', or '#'",
          "    starts_with_windows_drive_letter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(starts_with_windows_drive_letter(\"A|$\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|\"), false);"
        ],
        "code": [
          "{",
          "    let input = \"A|$\"; // s[2] is not '/', '\\\\', '?', or '#'",
          "    starts_with_windows_drive_letter(input);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|$\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A:\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"AB\"), false);",
          "    assert_eq!(starts_with_windows_drive_letter(\"A|\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]