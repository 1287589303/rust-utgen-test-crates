[
  {
    "uses": [
      "use std::path::Path;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::Path;",
          "    let path = Path::new(\"/folder\");",
          "    let mut serialization = String::new();",
          "    let result = path_to_file_url_segments(&path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (host_end, host_internal) = result.unwrap();",
          "    assert_eq!(host_internal, HostInternal::None);",
          "    assert!(host_end > 0);",
          "    assert_eq!(serialization, \"/folder\");"
        ],
        "code": [
          "{",
          "    use std::path::Path;",
          "    let path = Path::new(\"/folder\");",
          "    let mut serialization = String::new();",
          "    let result = path_to_file_url_segments(&path, &mut serialization);",
          "    assert!(result.is_ok());",
          "    let (host_end, host_internal) = result.unwrap();",
          "    assert_eq!(host_internal, HostInternal::None);",
          "    assert!(host_end > 0);",
          "    assert_eq!(serialization, \"/folder\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::Path;",
          "    let path = Path::new(\"/folder/file.txt\");",
          "    let mut serialization = String::new();",
          "    let result = path_to_file_url_segments(&path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(serialization, \"/folder/file.txt\");",
          "    assert_eq!(result.unwrap(), (serialization.len() as u32, HostInternal::None));"
        ],
        "code": [
          "{",
          "    use std::path::Path;",
          "    let path = Path::new(\"/folder/file.txt\");",
          "    let mut serialization = String::new();",
          "    let result = path_to_file_url_segments(&path, &mut serialization);",
          "    assert!(result.is_ok());",
          "    assert_eq!(serialization, \"/folder/file.txt\");",
          "    assert_eq!(result.unwrap(), (serialization.len() as u32, HostInternal::None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::Path;",
          "    let path = Path::new(\"/folder/file@name.txt\");",
          "    let mut serialization = String::new();",
          "    let result = path_to_file_url_segments(&path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (host_end, host_internal) = result.unwrap();",
          "    assert_eq!(host_internal, HostInternal::None);",
          "    assert!(host_end > 0);",
          "    assert_eq!(serialization, \"/folder/file%40name.txt\");"
        ],
        "code": [
          "{",
          "    use std::path::Path;",
          "    let path = Path::new(\"/folder/file@name.txt\");",
          "    let mut serialization = String::new();",
          "    let result = path_to_file_url_segments(&path, &mut serialization);",
          "    assert!(result.is_ok());",
          "    let (host_end, host_internal) = result.unwrap();",
          "    assert_eq!(host_internal, HostInternal::None);",
          "    assert!(host_end > 0);",
          "    assert_eq!(serialization, \"/folder/file%40name.txt\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::path::Path;",
          "    let path = Path::new(\"/folder//file.txt\");",
          "    let mut serialization = String::new();",
          "    let result = path_to_file_url_segments(&path, &mut serialization);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let (host_end, host_internal) = result.unwrap();",
          "    assert_eq!(host_internal, HostInternal::None);",
          "    assert!(serialization.starts_with(\"/\"));",
          "    assert_eq!(serialization, \"/folder/file.txt\");",
          "    assert!(host_end > 0);"
        ],
        "code": [
          "{",
          "    use std::path::Path;",
          "    let path = Path::new(\"/folder//file.txt\");",
          "    let mut serialization = String::new();",
          "    let result = path_to_file_url_segments(&path, &mut serialization);",
          "    assert!(result.is_ok());",
          "    let (host_end, host_internal) = result.unwrap();",
          "    assert_eq!(host_internal, HostInternal::None);",
          "    assert!(serialization.starts_with(\"/\"));",
          "    assert_eq!(serialization, \"/folder/file.txt\");",
          "    assert!(host_end > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]