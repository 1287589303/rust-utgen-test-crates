[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = mime::Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: Vec::new(),",
          "    };",
          "    let data_url = DataUrl {",
          "        mime_type: mime,",
          "        base64: false,",
          "        encoded_body_plus_fragment: \"\",",
          "    };",
          "    let _ = data_url.mime_type();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data_url.mime_type().type_, String::from(\"text\"));",
          "    assert_eq!(data_url.mime_type().subtype, String::from(\"plain\"));",
          "    assert!(data_url.mime_type().parameters.is_empty());"
        ],
        "code": [
          "{",
          "    let mime = mime::Mime {",
          "        type_: String::from(\"text\"),",
          "        subtype: String::from(\"plain\"),",
          "        parameters: Vec::new(),",
          "    };",
          "    let data_url = DataUrl {",
          "        mime_type: mime,",
          "        base64: false,",
          "        encoded_body_plus_fragment: \"\",",
          "    };",
          "    let _ = data_url.mime_type();",
          "    assert_eq!(data_url.mime_type().type_, String::from(\"text\"));",
          "    assert_eq!(data_url.mime_type().subtype, String::from(\"plain\"));",
          "    assert!(data_url.mime_type().parameters.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = mime::Mime {",
          "        type_: String::from(\"\"),",
          "        subtype: String::from(\"\"),",
          "        parameters: Vec::new(),",
          "    };",
          "    let data_url = DataUrl {",
          "        mime_type: mime,",
          "        base64: false,",
          "        encoded_body_plus_fragment: \"\",",
          "    };",
          "    let _ = data_url.mime_type();",
          "}"
        ],
        "oracle": [
          "    let mime = mime::Mime { type_: String::from(\"\"), subtype: String::from(\"\"), parameters: Vec::new() };",
          "    let data_url = DataUrl { mime_type: mime.clone(), base64: false, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url.mime_type(), &mime);",
          "    let mime2 = mime::Mime { type_: String::from(\"text\"), subtype: String::from(\"plain\"), parameters: Vec::new() };",
          "    let data_url2 = DataUrl { mime_type: mime2.clone(), base64: false, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url2.mime_type(), &mime2);",
          "    let mime3 = mime::Mime { type_: String::from(\"image\"), subtype: String::from(\"png\"), parameters: vec![(String::from(\"key\"), String::from(\"value\"))] };",
          "    let data_url3 = DataUrl { mime_type: mime3.clone(), base64: true, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url3.mime_type(), &mime3);",
          "    let mime4 = mime::Mime { type_: String::from(\"application\"), subtype: String::from(\"json\"), parameters: Vec::new() };",
          "    let data_url4 = DataUrl { mime_type: mime4.clone(), base64: false, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url4.mime_type(), &mime4);"
        ],
        "code": [
          "{",
          "    let mime = mime::Mime {",
          "        type_: String::from(\"\"),",
          "        subtype: String::from(\"\"),",
          "        parameters: Vec::new(),",
          "    };",
          "    let data_url = DataUrl {",
          "        mime_type: mime,",
          "        base64: false,",
          "        encoded_body_plus_fragment: \"\",",
          "    };",
          "    let _ = data_url.mime_type();",
          "    let mime = mime::Mime { type_: String::from(\"\"), subtype: String::from(\"\"), parameters: Vec::new() };",
          "    let data_url = DataUrl { mime_type: mime.clone(), base64: false, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url.mime_type(), &mime);",
          "    let mime2 = mime::Mime { type_: String::from(\"text\"), subtype: String::from(\"plain\"), parameters: Vec::new() };",
          "    let data_url2 = DataUrl { mime_type: mime2.clone(), base64: false, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url2.mime_type(), &mime2);",
          "    let mime3 = mime::Mime { type_: String::from(\"image\"), subtype: String::from(\"png\"), parameters: vec![(String::from(\"key\"), String::from(\"value\"))] };",
          "    let data_url3 = DataUrl { mime_type: mime3.clone(), base64: true, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url3.mime_type(), &mime3);",
          "    let mime4 = mime::Mime { type_: String::from(\"application\"), subtype: String::from(\"json\"), parameters: Vec::new() };",
          "    let data_url4 = DataUrl { mime_type: mime4.clone(), base64: false, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url4.mime_type(), &mime4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = mime::Mime {",
          "        type_: String::from(\"application/json\"),",
          "        subtype: String::from(\"example\"),",
          "        parameters: Vec::new(),",
          "    };",
          "    let data_url = DataUrl {",
          "        mime_type: mime,",
          "        base64: false,",
          "        encoded_body_plus_fragment: \"\",",
          "    };",
          "    let _ = data_url.mime_type();",
          "}"
        ],
        "oracle": [
          "    let mime = mime::Mime { type_: String::from(\"application/json\"), subtype: String::from(\"example\"), parameters: Vec::new() };",
          "    let data_url = DataUrl { mime_type: mime.clone(), base64: false, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url.mime_type(), &mime);",
          "    let mime = mime::Mime { type_: String::from(\"text/plain\"), subtype: String::from(\"utf-8\"), parameters: Vec::new() };",
          "    let data_url = DataUrl { mime_type: mime.clone(), base64: false, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url.mime_type(), &mime);",
          "    let mime = mime::Mime { type_: String::from(\"image/png\"), subtype: String::from(\"\"), parameters: Vec::new() };",
          "    let data_url = DataUrl { mime_type: mime.clone(), base64: true, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url.mime_type(), &mime);",
          "    let mime = mime::Mime { type_: String::from(\"application/octet-stream\"), subtype: String::from(\"\"), parameters: Vec::new() };",
          "    let data_url = DataUrl { mime_type: mime.clone(), base64: true, encoded_body_plus_fragment: \"data\" };",
          "    assert_eq!(data_url.mime_type(), &mime);"
        ],
        "code": [
          "{",
          "    let mime = mime::Mime {",
          "        type_: String::from(\"application/json\"),",
          "        subtype: String::from(\"example\"),",
          "        parameters: Vec::new(),",
          "    };",
          "    let data_url = DataUrl {",
          "        mime_type: mime,",
          "        base64: false,",
          "        encoded_body_plus_fragment: \"\",",
          "    };",
          "    let _ = data_url.mime_type();",
          "    let mime = mime::Mime { type_: String::from(\"application/json\"), subtype: String::from(\"example\"), parameters: Vec::new() };",
          "    let data_url = DataUrl { mime_type: mime.clone(), base64: false, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url.mime_type(), &mime);",
          "    let mime = mime::Mime { type_: String::from(\"text/plain\"), subtype: String::from(\"utf-8\"), parameters: Vec::new() };",
          "    let data_url = DataUrl { mime_type: mime.clone(), base64: false, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url.mime_type(), &mime);",
          "    let mime = mime::Mime { type_: String::from(\"image/png\"), subtype: String::from(\"\"), parameters: Vec::new() };",
          "    let data_url = DataUrl { mime_type: mime.clone(), base64: true, encoded_body_plus_fragment: \"\" };",
          "    assert_eq!(data_url.mime_type(), &mime);",
          "    let mime = mime::Mime { type_: String::from(\"application/octet-stream\"), subtype: String::from(\"\"), parameters: Vec::new() };",
          "    let data_url = DataUrl { mime_type: mime.clone(), base64: true, encoded_body_plus_fragment: \"data\" };",
          "    assert_eq!(data_url.mime_type(), &mime);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = mime::Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![",
          "            (String::from(\"width\"), String::from(\"100\")),",
          "            (String::from(\"height\"), String::from(\"100\")),",
          "        ],",
          "    };",
          "    let data_url = DataUrl {",
          "        mime_type: mime,",
          "        base64: false,",
          "        encoded_body_plus_fragment: \"\",",
          "    };",
          "    let _ = data_url.mime_type();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(",
          "    data_url.mime_type().type_,",
          "    \"image\"",
          "    );",
          "    assert_eq!(",
          "    data_url.mime_type().subtype,",
          "    \"png\"",
          "    );",
          "    assert_eq!(",
          "    data_url.mime_type().parameters.len(),",
          "    2",
          "    );",
          "    assert_eq!(",
          "    data_url.mime_type().parameters[0],",
          "    (String::from(\"width\"), String::from(\"100\"))",
          "    );",
          "    assert_eq!(",
          "    data_url.mime_type().parameters[1],",
          "    (String::from(\"height\"), String::from(\"100\"))",
          "    );"
        ],
        "code": [
          "{",
          "    let mime = mime::Mime {",
          "        type_: String::from(\"image\"),",
          "        subtype: String::from(\"png\"),",
          "        parameters: vec![",
          "            (String::from(\"width\"), String::from(\"100\")),",
          "            (String::from(\"height\"), String::from(\"100\")),",
          "        ],",
          "    };",
          "    let data_url = DataUrl {",
          "        mime_type: mime,",
          "        base64: false,",
          "        encoded_body_plus_fragment: \"\",",
          "    };",
          "    let _ = data_url.mime_type();",
          "    assert_eq!(",
          "    data_url.mime_type().type_,",
          "    \"image\"",
          "    );",
          "    assert_eq!(",
          "    data_url.mime_type().subtype,",
          "    \"png\"",
          "    );",
          "    assert_eq!(",
          "    data_url.mime_type().parameters.len(),",
          "    2",
          "    );",
          "    assert_eq!(",
          "    data_url.mime_type().parameters[0],",
          "    (String::from(\"width\"), String::from(\"100\"))",
          "    );",
          "    assert_eq!(",
          "    data_url.mime_type().parameters[1],",
          "    (String::from(\"height\"), String::from(\"100\"))",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mime = mime::Mime {",
          "        type_: String::from(\"audio\"),",
          "        subtype: String::from(\"wav\"),",
          "        parameters: vec![",
          "            (String::from(\"codec\"), String::from(\"pcm\")),",
          "            (String::from(\"bitrate\"), String::from(\"128kbps\")),",
          "            (String::from(\"channels\"), String::from(\"2\")),",
          "        ],",
          "    };",
          "    let data_url = DataUrl {",
          "        mime_type: mime,",
          "        base64: false,",
          "        encoded_body_plus_fragment: \"\",",
          "    };",
          "    let _ = data_url.mime_type();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(data_url.mime_type().type_, \"audio\");",
          "    assert_eq!(data_url.mime_type().subtype, \"wav\");",
          "    assert_eq!(data_url.mime_type().parameters.len(), 3);",
          "    assert_eq!(data_url.mime_type().parameters[0], (String::from(\"codec\"), String::from(\"pcm\")));",
          "    assert_eq!(data_url.mime_type().parameters[1], (String::from(\"bitrate\"), String::from(\"128kbps\")));",
          "    assert_eq!(data_url.mime_type().parameters[2], (String::from(\"channels\"), String::from(\"2\")));",
          "    assert!(std::ptr::eq(data_url.mime_type(), &data_url.mime_type));"
        ],
        "code": [
          "{",
          "    let mime = mime::Mime {",
          "        type_: String::from(\"audio\"),",
          "        subtype: String::from(\"wav\"),",
          "        parameters: vec![",
          "            (String::from(\"codec\"), String::from(\"pcm\")),",
          "            (String::from(\"bitrate\"), String::from(\"128kbps\")),",
          "            (String::from(\"channels\"), String::from(\"2\")),",
          "        ],",
          "    };",
          "    let data_url = DataUrl {",
          "        mime_type: mime,",
          "        base64: false,",
          "        encoded_body_plus_fragment: \"\",",
          "    };",
          "    let _ = data_url.mime_type();",
          "    assert_eq!(data_url.mime_type().type_, \"audio\");",
          "    assert_eq!(data_url.mime_type().subtype, \"wav\");",
          "    assert_eq!(data_url.mime_type().parameters.len(), 3);",
          "    assert_eq!(data_url.mime_type().parameters[0], (String::from(\"codec\"), String::from(\"pcm\")));",
          "    assert_eq!(data_url.mime_type().parameters[1], (String::from(\"bitrate\"), String::from(\"128kbps\")));",
          "    assert_eq!(data_url.mime_type().parameters[2], (String::from(\"channels\"), String::from(\"2\")));",
          "    assert!(std::ptr::eq(data_url.mime_type(), &data_url.mime_type));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]