[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind(), std::io::ErrorKind::InvalidData);",
          "    assert_eq!(result.err().unwrap().to_string(), \"No host name in the URL\");"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap().kind(), std::io::ErrorKind::InvalidData);",
          "    assert_eq!(result.err().unwrap().to_string(), \"No host name in the URL\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"http://\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), std::io::ErrorKind::InvalidData);",
          "    assert!(result.unwrap_err().to_string().contains(\"No host name in the URL\"));"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"http://\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), std::io::ErrorKind::InvalidData);",
          "    assert!(result.unwrap_err().to_string().contains(\"No host name in the URL\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"://example.com\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), std::io::ErrorKind::InvalidData);"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"://example.com\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), std::io::ErrorKind::InvalidData);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"invalid-url\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), std::io::ErrorKind::InvalidData);",
          "    assert_eq!(result.unwrap_err().to_string(), \"No host name in the URL\");"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"invalid-url\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), std::io::ErrorKind::InvalidData);",
          "    assert_eq!(result.unwrap_err().to_string(), \"No host name in the URL\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"http:///path\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "}"
        ],
        "oracle": [
          "    let url = url::Url::parse(\"http:///path\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), std::io::ErrorKind::InvalidData);",
          "    assert_eq!(result.unwrap_err().to_string(), \"No host name in the URL\");"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"http:///path\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "    let url = url::Url::parse(\"http:///path\").unwrap();",
          "    let result = url.socket_addrs(|| None);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err().kind(), std::io::ErrorKind::InvalidData);",
          "    assert_eq!(result.unwrap_err().to_string(), \"No host name in the URL\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]