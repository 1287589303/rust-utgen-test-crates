[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"https://example.com\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(443)).unwrap();",
          "}"
        ],
        "oracle": [
          "    let url = url::Url::parse(\"https://example.com\").unwrap();",
          "    let host_result = url.host();",
          "    assert!(host_result.is_some(), \"Host should be present\");",
          "    let port_result = url.port_or_known_default().or_else(|| Some(443));",
          "    assert!(port_result.is_some(), \"Port should be known or provided\");",
          "    let host = host_result.unwrap();",
          "    if let Host::Domain(domain) = host {",
          "    let addr_result = (domain, port_result.unwrap()).to_socket_addrs();",
          "    assert!(addr_result.is_ok(), \"Socket addresses should resolve correctly for the domain\");",
          "    } else {",
          "    panic!(\"Expected Host::Domain\");",
          "    }",
          "    let addrs = url.socket_addrs(|| Some(443)).unwrap();",
          "    assert!(!addrs.is_empty(), \"Socket addresses should not be empty\");"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"https://example.com\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(443)).unwrap();",
          "    let url = url::Url::parse(\"https://example.com\").unwrap();",
          "    let host_result = url.host();",
          "    assert!(host_result.is_some(), \"Host should be present\");",
          "    let port_result = url.port_or_known_default().or_else(|| Some(443));",
          "    assert!(port_result.is_some(), \"Port should be known or provided\");",
          "    let host = host_result.unwrap();",
          "    if let Host::Domain(domain) = host {",
          "    let addr_result = (domain, port_result.unwrap()).to_socket_addrs();",
          "    assert!(addr_result.is_ok(), \"Socket addresses should resolve correctly for the domain\");",
          "    } else {",
          "    panic!(\"Expected Host::Domain\");",
          "    }",
          "    let addrs = url.socket_addrs(|| Some(443)).unwrap();",
          "    assert!(!addrs.is_empty(), \"Socket addresses should not be empty\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"http://192.168.1.1:8080\").unwrap();",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "}"
        ],
        "oracle": [
          "    let url = url::Url::parse(\"http://example.com:80\").unwrap();",
          "    assert!(url.socket_addrs(|| None).is_ok());",
          "    let url = url::Url::parse(\"http://example.com:8080\").unwrap();",
          "    assert_eq!(url.socket_addrs(|| None).unwrap().len(), 1);",
          "    let url = url::Url::parse(\"https://example.com\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(443)).unwrap();",
          "    assert!(addrs.len() > 0);",
          "    let url = url::Url::parse(\"http://example.com\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(80)).unwrap();",
          "    assert!(addrs.len() > 0);",
          "    let url = url::Url::parse(\"http://example.com\").unwrap();",
          "    assert!(url.has_host());",
          "    assert!(url.port().is_none());",
          "    let url = url::Url::parse(\"http://example.com:80\").unwrap();",
          "    assert_eq!(url.port().unwrap(), 80);"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"http://192.168.1.1:8080\").unwrap();",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    let url = url::Url::parse(\"http://example.com:80\").unwrap();",
          "    assert!(url.socket_addrs(|| None).is_ok());",
          "    let url = url::Url::parse(\"http://example.com:8080\").unwrap();",
          "    assert_eq!(url.socket_addrs(|| None).unwrap().len(), 1);",
          "    let url = url::Url::parse(\"https://example.com\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(443)).unwrap();",
          "    assert!(addrs.len() > 0);",
          "    let url = url::Url::parse(\"http://example.com\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(80)).unwrap();",
          "    assert!(addrs.len() > 0);",
          "    let url = url::Url::parse(\"http://example.com\").unwrap();",
          "    assert!(url.has_host());",
          "    assert!(url.port().is_none());",
          "    let url = url::Url::parse(\"http://example.com:80\").unwrap();",
          "    assert_eq!(url.port().unwrap(), 80);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"http://[::1]:8080\").unwrap();",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "}"
        ],
        "oracle": [
          "    let url = url::Url::parse(\"http://example.com:80\").unwrap();",
          "    assert!(url.socket_addrs(|| None).is_ok());",
          "    let url = url::Url::parse(\"http://example.com\").unwrap();",
          "    assert!(url.socket_addrs(|| Some(8080)).is_ok());",
          "    let url = url::Url::parse(\"https://example.com\").unwrap();",
          "    assert!(url.socket_addrs(|| Some(443)).is_ok());",
          "    let url = url::Url::parse(\"http://localhost:3000\").unwrap();",
          "    assert!(url.socket_addrs(|| None).is_ok());",
          "    let url = url::Url::parse(\"http://example.com:1234\").unwrap();",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    assert_eq!(addrs.len(), 1);",
          "    let url = url::Url::parse(\"http://example.com\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(8080)).unwrap();",
          "    assert_eq!(addrs.len(), 1);",
          "    let url = url::Url::parse(\"http://example.com:80\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(1234)).unwrap();",
          "    assert_eq!(addrs.len(), 1);"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"http://[::1]:8080\").unwrap();",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    let url = url::Url::parse(\"http://example.com:80\").unwrap();",
          "    assert!(url.socket_addrs(|| None).is_ok());",
          "    let url = url::Url::parse(\"http://example.com\").unwrap();",
          "    assert!(url.socket_addrs(|| Some(8080)).is_ok());",
          "    let url = url::Url::parse(\"https://example.com\").unwrap();",
          "    assert!(url.socket_addrs(|| Some(443)).is_ok());",
          "    let url = url::Url::parse(\"http://localhost:3000\").unwrap();",
          "    assert!(url.socket_addrs(|| None).is_ok());",
          "    let url = url::Url::parse(\"http://example.com:1234\").unwrap();",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    assert_eq!(addrs.len(), 1);",
          "    let url = url::Url::parse(\"http://example.com\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(8080)).unwrap();",
          "    assert_eq!(addrs.len(), 1);",
          "    let url = url::Url::parse(\"http://example.com:80\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(1234)).unwrap();",
          "    assert_eq!(addrs.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"http://example.org\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(80)).unwrap();",
          "}"
        ],
        "oracle": [
          "    let url = url::Url::parse(\"http://example.org\").unwrap();",
          "    let host = url.host().unwrap();",
          "    let port = url.port_or_known_default().or_else(|| Some(80)).unwrap();",
          "    assert!(matches!(host, Host::Domain(_)));",
          "    let result = (host, port).to_socket_addrs();",
          "    assert!(result.is_ok());",
          "    let addrs = url.socket_addrs(|| Some(80)).unwrap();",
          "    assert!(!addrs.is_empty());"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"http://example.org\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(80)).unwrap();",
          "    let url = url::Url::parse(\"http://example.org\").unwrap();",
          "    let host = url.host().unwrap();",
          "    let port = url.port_or_known_default().or_else(|| Some(80)).unwrap();",
          "    assert!(matches!(host, Host::Domain(_)));",
          "    let result = (host, port).to_socket_addrs();",
          "    assert!(result.is_ok());",
          "    let addrs = url.socket_addrs(|| Some(80)).unwrap();",
          "    assert!(!addrs.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]