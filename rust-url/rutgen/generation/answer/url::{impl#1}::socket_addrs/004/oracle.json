[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"http://192.168.1.1:8080\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(80)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(addrs.len() > 0);",
          "    assert_eq!(addrs[0].port(), 8080);",
          "    assert_eq!(addrs[0].ip().to_string(), \"192.168.1.1\");"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"http://192.168.1.1:8080\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(80)).unwrap();",
          "    assert!(addrs.len() > 0);",
          "    assert_eq!(addrs[0].port(), 8080);",
          "    assert_eq!(addrs[0].ip().to_string(), \"192.168.1.1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"http://10.0.0.1\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(8080)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(addrs.is_ok());",
          "    assert_eq!(addrs.unwrap().len(), 1);",
          "    match addrs.unwrap().first().unwrap() {",
          "    SocketAddr::V4(addr) => {",
          "    assert_eq!(addr.ip().to_string(), \"10.0.0.1\");",
          "    assert_eq!(addr.port(), 8080);",
          "    }",
          "    _ => panic!(\"Expected an IPv4 address\");",
          "    }",
          "    assert_eq!(url.host(), Some(Host::Ipv4(Ipv4Addr::new(10, 0, 0, 1))));",
          "    assert!(url.port_or_known_default().is_some());",
          "    assert_eq!(url.port_or_known_default().unwrap(), Some(8080));"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"http://10.0.0.1\").unwrap();",
          "    let addrs = url.socket_addrs(|| Some(8080)).unwrap();",
          "    assert!(addrs.is_ok());",
          "    assert_eq!(addrs.unwrap().len(), 1);",
          "    match addrs.unwrap().first().unwrap() {",
          "    SocketAddr::V4(addr) => {",
          "    assert_eq!(addr.ip().to_string(), \"10.0.0.1\");",
          "    assert_eq!(addr.port(), 8080);",
          "    }",
          "    _ => panic!(\"Expected an IPv4 address\");",
          "    }",
          "    assert_eq!(url.host(), Some(Host::Ipv4(Ipv4Addr::new(10, 0, 0, 1))));",
          "    assert!(url.port_or_known_default().is_some());",
          "    assert_eq!(url.port_or_known_default().unwrap(), Some(8080));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"http://172.16.0.1:3000\").unwrap();",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "}"
        ],
        "oracle": [
          "    let url = url::Url::parse(\"http://172.16.0.1:3000\").unwrap();",
          "    let host_result = url.host();",
          "    assert!(host_result.is_some());",
          "    let port_result = url.port_or_known_default().or_else(|| None);",
          "    assert!(port_result.is_some());",
          "    let host = url.host().unwrap();",
          "    match host {",
          "    Host::Ipv4(ip) => {",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    assert!(!addrs.is_empty());",
          "    assert_eq!(addrs[0].ip(), ip);",
          "    assert_eq!(addrs[0].port(), 3000);",
          "    },",
          "    _ => panic!(\"Expected Host::Ipv4, got {:?}\", host),",
          "    }"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"http://172.16.0.1:3000\").unwrap();",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    let url = url::Url::parse(\"http://172.16.0.1:3000\").unwrap();",
          "    let host_result = url.host();",
          "    assert!(host_result.is_some());",
          "    let port_result = url.port_or_known_default().or_else(|| None);",
          "    assert!(port_result.is_some());",
          "    let host = url.host().unwrap();",
          "    match host {",
          "    Host::Ipv4(ip) => {",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    assert!(!addrs.is_empty());",
          "    assert_eq!(addrs[0].ip(), ip);",
          "    assert_eq!(addrs[0].port(), 3000);",
          "    },",
          "    _ => panic!(\"Expected Host::Ipv4, got {:?}\", host),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]