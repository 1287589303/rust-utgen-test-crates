[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"https://example.com/\").unwrap();",
          "    let _ = url.socket_addrs(|| None).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(url.host().is_some());",
          "    assert!(url.port_or_known_default().is_none());",
          "    assert!(matches!(url.socket_addrs(|| None), Ok(_)));"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"https://example.com/\").unwrap();",
          "    let _ = url.socket_addrs(|| None).unwrap();",
          "    assert!(url.host().is_some());",
          "    assert!(url.port_or_known_default().is_none());",
          "    assert!(matches!(url.socket_addrs(|| None), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"http://example.org/\").unwrap();",
          "    let _ = url.socket_addrs(|| None).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(url.host().is_some());",
          "    assert!(url.port_or_known_default().is_none());"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"http://example.org/\").unwrap();",
          "    let _ = url.socket_addrs(|| None).unwrap();",
          "    assert!(url.host().is_some());",
          "    assert!(url.port_or_known_default().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"https://example.net/\").unwrap();",
          "    let _ = url.socket_addrs(|| None).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(url::Url::parse(\"https://example.net/\").is_ok());",
          "    let url = url::Url::parse(\"https://example.net/\").unwrap();",
          "    assert!(url.host().is_some());",
          "    assert!(url.port_or_known_default().is_none());",
          "    let result = url.socket_addrs(|| None);",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"https://example.net/\").unwrap();",
          "    let _ = url.socket_addrs(|| None).unwrap();",
          "    assert!(url::Url::parse(\"https://example.net/\").is_ok());",
          "    let url = url::Url::parse(\"https://example.net/\").unwrap();",
          "    assert!(url.host().is_some());",
          "    assert!(url.port_or_known_default().is_none());",
          "    let result = url.socket_addrs(|| None);",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url = url::Url::parse(\"http://example.edu/\").unwrap();",
          "    let _ = url.socket_addrs(|| Some(80)).unwrap(); // 80 is the default for HTTP",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url::Url::parse(\"http://example.edu/\").is_ok(), true);",
          "    let url = url::Url::parse(\"http://example.edu/\").unwrap();",
          "    assert!(matches!(url.socket_addrs(|| Some(80)), Ok(_)));",
          "    assert!(matches!(url.socket_addrs(|| None), Err(_)));"
        ],
        "code": [
          "{",
          "    let url = url::Url::parse(\"http://example.edu/\").unwrap();",
          "    let _ = url.socket_addrs(|| Some(80)).unwrap(); // 80 is the default for HTTP",
          "    assert_eq!(url::Url::parse(\"http://example.edu/\").is_ok(), true);",
          "    let url = url::Url::parse(\"http://example.edu/\").unwrap();",
          "    assert!(matches!(url.socket_addrs(|| Some(80)), Ok(_)));",
          "    assert!(matches!(url.socket_addrs(|| None), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]