[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url_str = \"http://[2001:db8::1]:8080/\";",
          "    let url = url::Url::parse(url_str).unwrap();",
          "",
          "    let addrs = url.socket_addrs(|| Some(8080)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(url.host().is_some(), true);",
          "    assert_eq!(url.port_or_known_default().is_some(), true);",
          "    assert!(matches!(url.host(), Some(Host::Ipv6(_))));",
          "    assert!(addrs.len() > 0);  // Ensure that the returned addresses are not empty",
          "    assert_eq!(addrs[0].port(), 8080);  // Check that the port is correct",
          "    assert!(addrs[0].is_ipv6());  // Check that the address is IPv6"
        ],
        "code": [
          "{",
          "    let url_str = \"http://[2001:db8::1]:8080/\";",
          "    let url = url::Url::parse(url_str).unwrap();",
          "",
          "    let addrs = url.socket_addrs(|| Some(8080)).unwrap();",
          "    assert_eq!(url.host().is_some(), true);",
          "    assert_eq!(url.port_or_known_default().is_some(), true);",
          "    assert!(matches!(url.host(), Some(Host::Ipv6(_))));",
          "    assert!(addrs.len() > 0);  // Ensure that the returned addresses are not empty",
          "    assert_eq!(addrs[0].port(), 8080);  // Check that the port is correct",
          "    assert!(addrs[0].is_ipv6());  // Check that the address is IPv6",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url_str = \"http://[2001:db8::1]/\";",
          "    let url = url::Url::parse(url_str).unwrap();",
          "",
          "    let addrs = url.socket_addrs(|| Some(80)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(addrs.len(), 1);",
          "    assert_eq!(addrs[0].ip(), \"2001:db8::1\".parse().unwrap());",
          "    assert_eq!(addrs[0].port(), 80);"
        ],
        "code": [
          "{",
          "    let url_str = \"http://[2001:db8::1]/\";",
          "    let url = url::Url::parse(url_str).unwrap();",
          "",
          "    let addrs = url.socket_addrs(|| Some(80)).unwrap();",
          "    assert_eq!(addrs.len(), 1);",
          "    assert_eq!(addrs[0].ip(), \"2001:db8::1\".parse().unwrap());",
          "    assert_eq!(addrs[0].port(), 80);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url_str = \"http://[2001:db8::1]:65535/\";",
          "    let url = url::Url::parse(url_str).unwrap();",
          "",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(url.host().is_some());",
          "    assert!(url.port_or_known_default().is_some());",
          "    assert!(matches!(url.host().unwrap(), url::Host::Ipv6(_)));",
          "    assert!(matches!(addrs[0].port(), 65535));",
          "    assert!(addrs.len() > 0);",
          "    assert!(addrs.iter().all(|addr| addr.ip().is_ipv6()));",
          "    assert_eq!(addrs[0].ip().to_string(), \"2001:db8::1\");"
        ],
        "code": [
          "{",
          "    let url_str = \"http://[2001:db8::1]:65535/\";",
          "    let url = url::Url::parse(url_str).unwrap();",
          "",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    assert!(url.host().is_some());",
          "    assert!(url.port_or_known_default().is_some());",
          "    assert!(matches!(url.host().unwrap(), url::Host::Ipv6(_)));",
          "    assert!(matches!(addrs[0].port(), 65535));",
          "    assert!(addrs.len() > 0);",
          "    assert!(addrs.iter().all(|addr| addr.ip().is_ipv6()));",
          "    assert_eq!(addrs[0].ip().to_string(), \"2001:db8::1\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let url_str = \"http://[2001:db8::1]:1/\";",
          "    let url = url::Url::parse(url_str).unwrap();",
          "",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "}"
        ],
        "oracle": [
          "    let url_str = \"http://[2001:db8::1]:1/\";",
          "    let url = url::Url::parse(url_str).unwrap();",
          "    let host_result = url.host();",
          "    assert!(host_result.is_some());",
          "    let port_result = url.port_or_known_default();",
          "    assert!(port_result.is_some());",
          "    let host = host_result.unwrap();",
          "    assert!(matches!(host, url::HostInternal::Ipv6(_)));",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    assert!(!addrs.is_empty());"
        ],
        "code": [
          "{",
          "    let url_str = \"http://[2001:db8::1]:1/\";",
          "    let url = url::Url::parse(url_str).unwrap();",
          "",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    let url_str = \"http://[2001:db8::1]:1/\";",
          "    let url = url::Url::parse(url_str).unwrap();",
          "    let host_result = url.host();",
          "    assert!(host_result.is_some());",
          "    let port_result = url.port_or_known_default();",
          "    assert!(port_result.is_some());",
          "    let host = host_result.unwrap();",
          "    assert!(matches!(host, url::HostInternal::Ipv6(_)));",
          "    let addrs = url.socket_addrs(|| None).unwrap();",
          "    assert!(!addrs.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]