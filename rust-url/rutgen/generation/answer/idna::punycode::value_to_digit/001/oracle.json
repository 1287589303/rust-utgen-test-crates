[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 0;",
          "    let result = value_to_digit(value);",
          "}"
        ],
        "oracle": [
          "    let value = 0;",
          "    let expected_result = 'a';",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let value = 1;",
          "    let expected_result = 'b';",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let value = 25;",
          "    let expected_result = 'z';",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let value = 0;",
          "    let result = value_to_digit(value);",
          "    let value = 0;",
          "    let expected_result = 'a';",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let value = 1;",
          "    let expected_result = 'b';",
          "    assert_eq!(result, expected_result);",
          "    ",
          "    let value = 25;",
          "    let expected_result = 'z';",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 1;",
          "    let result = value_to_digit(value);",
          "}"
        ],
        "oracle": [
          "    let value = 0; assert_eq!(value_to_digit(value), 'a');",
          "    let value = 1; assert_eq!(value_to_digit(value), 'b');",
          "    let value = 2; assert_eq!(value_to_digit(value), 'c');",
          "    let value = 25; assert_eq!(value_to_digit(value), 'z');"
        ],
        "code": [
          "{",
          "    let value = 1;",
          "    let result = value_to_digit(value);",
          "    let value = 0; assert_eq!(value_to_digit(value), 'a');",
          "    let value = 1; assert_eq!(value_to_digit(value), 'b');",
          "    let value = 2; assert_eq!(value_to_digit(value), 'c');",
          "    let value = 25; assert_eq!(value_to_digit(value), 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 2;",
          "    let result = value_to_digit(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'c');",
          "    assert!(result.is_ascii());",
          "    assert!(result.is_alphabetic());",
          "    assert!(result.is_lowercase());",
          "    assert!(result >= 'a' && result <= 'z');",
          "    assert_eq!(value_to_digit(0), 'a');",
          "    assert_eq!(value_to_digit(25), 'z');"
        ],
        "code": [
          "{",
          "    let value = 2;",
          "    let result = value_to_digit(value);",
          "    assert_eq!(result, 'c');",
          "    assert!(result.is_ascii());",
          "    assert!(result.is_alphabetic());",
          "    assert!(result.is_lowercase());",
          "    assert!(result >= 'a' && result <= 'z');",
          "    assert_eq!(value_to_digit(0), 'a');",
          "    assert_eq!(value_to_digit(25), 'z');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 25;",
          "    let result = value_to_digit(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 'z');",
          "    assert!(result.is_ascii());",
          "    assert!(result.is_alphabetic());",
          "    assert!(result.is_lowercase());",
          "    assert!(matches!(result, 'a'..='z'));"
        ],
        "code": [
          "{",
          "    let value = 25;",
          "    let result = value_to_digit(value);",
          "    assert_eq!(result, 'z');",
          "    assert!(result.is_ascii());",
          "    assert!(result.is_alphabetic());",
          "    assert!(result.is_lowercase());",
          "    assert!(matches!(result, 'a'..='z'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]