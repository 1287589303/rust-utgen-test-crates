[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = value_to_digit(26);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '0');",
          "    assert_eq!(result, value_to_digit(26));",
          "    assert_eq!(result, value_to_digit(27));",
          "    assert_eq!(result, value_to_digit(34));",
          "    assert_eq!(result, value_to_digit(35));"
        ],
        "code": [
          "{",
          "    let result = value_to_digit(26);",
          "    assert_eq!(result, '0');",
          "    assert_eq!(result, value_to_digit(26));",
          "    assert_eq!(result, value_to_digit(27));",
          "    assert_eq!(result, value_to_digit(34));",
          "    assert_eq!(result, value_to_digit(35));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = value_to_digit(27);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '0');",
          "    assert_eq!(result, (27 as u8 - 26 + b'0') as char);",
          "    assert!(matches!(result, '0'..='9'));"
        ],
        "code": [
          "{",
          "    let result = value_to_digit(27);",
          "    assert_eq!(result, '0');",
          "    assert_eq!(result, (27 as u8 - 26 + b'0') as char);",
          "    assert!(matches!(result, '0'..='9'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = value_to_digit(28);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '2');"
        ],
        "code": [
          "{",
          "    let result = value_to_digit(28);",
          "    assert_eq!(result, '2');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = value_to_digit(29);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '3');"
        ],
        "code": [
          "{",
          "    let result = value_to_digit(29);",
          "    assert_eq!(result, '3');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = value_to_digit(30);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '4');"
        ],
        "code": [
          "{",
          "    let result = value_to_digit(30);",
          "    assert_eq!(result, '4');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = value_to_digit(31);",
          "}"
        ],
        "oracle": [
          "    let expected = '5';",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let result = value_to_digit(31);",
          "    let expected = '5';",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = value_to_digit(32);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '2');",
          "    assert!(result.is_ascii_digit());",
          "    assert!(result.is_ascii());",
          "    assert!(result.is_alphanumeric());",
          "    assert!(result.is_numeric());"
        ],
        "code": [
          "{",
          "    let result = value_to_digit(32);",
          "    assert_eq!(result, '2');",
          "    assert!(result.is_ascii_digit());",
          "    assert!(result.is_ascii());",
          "    assert!(result.is_alphanumeric());",
          "    assert!(result.is_numeric());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = value_to_digit(33);",
          "}"
        ],
        "oracle": [
          "    let result = value_to_digit(33);",
          "    assert_eq!(result, '3');",
          "    assert_eq!(result, value_to_digit(35));",
          "    assert_eq!(result, '5');",
          "    assert_eq!(result, value_to_digit(30));",
          "    assert_eq!(result, '0' + (33 - 26) as char);"
        ],
        "code": [
          "{",
          "    let result = value_to_digit(33);",
          "    let result = value_to_digit(33);",
          "    assert_eq!(result, '3');",
          "    assert_eq!(result, value_to_digit(35));",
          "    assert_eq!(result, '5');",
          "    assert_eq!(result, value_to_digit(30));",
          "    assert_eq!(result, '0' + (33 - 26) as char);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = value_to_digit(34);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '4');"
        ],
        "code": [
          "{",
          "    let result = value_to_digit(34);",
          "    assert_eq!(result, '4');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = value_to_digit(35);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, '9');"
        ],
        "code": [
          "{",
          "    let result = value_to_digit(35);",
          "    assert_eq!(result, '9');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]